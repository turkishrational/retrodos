     1                                  ; ****************************************************************************
     2                                  ; MSDOS.SYS (MSDOS 1.25 Kernel) - RETRO DOS v1.0 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 20/04/2018
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 04/02/2018 
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.11  
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	    ((nasm msdos.s -l msdos.lst -o MSDOS.BIN)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Derived from 'MSDOS.ASM' file of MSDOS 1.25 (IBM PCDOS v1.1) source code
    13                                  ; by Microsoft (by Tim Paterson), 03/03/1982
    14                                  ; ****************************************************************************
    15                                  
    16                                  ; 86-DOS  High-performance operating system for the 8086  version 1.25
    17                                  ;       by Tim Paterson
    18                                  
    19                                  ; ****************** Revision History *************************
    20                                  ;          >> EVERY change must noted below!! <<
    21                                  ;
    22                                  ; 0.34 12/29/80 General release, updating all past customers
    23                                  ; 0.42 02/25/81 32-byte directory entries added
    24                                  ; 0.56 03/23/81 Variable record and sector sizes
    25                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
    26                                  ; 0.74 04/15/81 Recognize I/O devices with file names
    27                                  ; 0.75 04/17/81 Improve and correct buffer handling
    28                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
    29                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
    30                                  ; 1.00 04/28/81 Renumber for general release
    31                                  ; 1.01 05/12/81 Fix bug in `STORE'
    32                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
    33                                  ;               RENAME fix, general cleanup
    34                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
    35                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
    36                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
    37                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR;
    38                                  ;               Add FLUSH and MAPDEV calls; allow disk mapping in DSKCHG;
    39                                  ;               Lots of smaller improvements
    40                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
    41                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
    42                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character
    43                                  ;               Don't zero extent field in IBM version (back to 1.01!)
    44                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
    45                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
    46                                  ;
    47                                  ; *************************************************************
    48                                  
    49                                  
    50                                  ; Interrupt Entry Points:
    51                                  
    52                                  ; INTBASE:      ABORT
    53                                  ; INTBASE+4:    COMMAND
    54                                  ; INTBASE+8:    BASE EXIT ADDRESS
    55                                  ; INTBASE+C:    CONTROL-C ABORT
    56                                  ; INTBASE+10H:  FATAL ERROR ABORT
    57                                  ; INTBASE+14H:  BIOS DISK READ
    58                                  ; INTBASE+18H:  BIOS DISK WRITE
    59                                  ; INTBASE+40H:  Long jump to CALL entry point
    60                                  
    61                                  ESCCH   EQU     0
    62                                  CANCEL  EQU     1BH             ;Cancel with ESC
    63                                  NUMDEV  EQU     6               ;Include "COM1" as I/O device name
    64                                  
    65                                  MAXCALL EQU     36
    66                                  MAXCOM  EQU     46
    67                                  INTBASE EQU     80H
    68                                  INTTAB  EQU     20H
    69                                  ENTRYPOINTSEG   EQU     0CH
    70                                  ENTRYPOINT      EQU     INTBASE+40H
    71                                  CONTC   EQU     INTTAB+3
    72                                  EXIT    EQU     INTBASE+8
    73                                  LONGJUMP EQU    0EAH
    74                                  LONGCALL EQU    9AH
    75                                  MAXDIF  EQU     0FFFH
    76                                  SAVEXIT EQU     10
    77                                  
    78                                  ; Field definition for FCBs
    79                                  
    80                                  struc FCBLOCK
    81 00000000 <res 0000000C>                  resb	12	;Drive code and name
    82 0000000C <res 00000002>          .EXTENT: resw	1
    83 0000000E <res 00000002>          .RECSIZ: resw	1	;Size of record (user settable)
    84 00000010 <res 00000002>          .FILSIZ: resw	1	;Size of file in bytes
    85 00000012 <res 00000002>          .DRVBP:	resw	1	;BP for SEARCH FIRST and SEARCH NEXT
    86 00000014 <res 00000002>          .FDATE:	resw	1	;Date of last writing
    87 00000016 <res 00000002>          .FTIME:	resw	1	;Time of last writing
    88 00000018 <res 00000001>          .DEVID:	resb	1	;Device ID number, bits 0-5
    89                                                          ;bit 7=0 for file, bit 7=1 for I/O device
    90                                                          ;If file, bit 6=0 if dirty
    91                                                          ;If I/O device, bit 6=0 if EOF (input)
    92 00000019 <res 00000002>          .FIRCLUS: resw	1       ;First cluster of file
    93 0000001B <res 00000002>          .LSTCLUS: resw	1	;Last cluster accessed
    94 0000001D <res 00000002>          .CLUSPOS: resw	1	;Position of last cluster accessed
    95 0000001F <res 00000001>          	resb	1	;Forces NR to offset 32
    96 00000020 <res 00000001>          .NR:	resb	1	;Next record
    97 00000021 <res 00000003>          .RR:	resb	3	;Random record
    98                                  endstruc
    99                                  
   100                                  FCBLOCK.FILDIRENT equ FCBLOCK.FILSIZ
   101                                  			;Used only by SEARCH FIRST and SEARCH NEXT
   102                                  
   103                                  ; Description of 32-byte directory entry (same as returned by SEARCH FIRST
   104                                  ; and SEARCH NEXT, functions 17 and 18).
   105                                  ;
   106                                  ; Location      bytes   Description
   107                                  ;
   108                                  ;    0          11      File name and extension ( 0E5H if empty)
   109                                  ;   11           1      Attributes. Bits 1 or 2 make file hidden
   110                                  ;   12          10      Zero field (for expansion)
   111                                  ;   22           2      Time. Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   112                                  ;   24           2      Date. Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   113                                  ;   26           2      First allocation unit ( < 4080 )
   114                                  ;   28           4      File size, in bytes (LSB first, 30 bits max.)
   115                                  ;
   116                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   117                                  ; the disk. These entries are packed, two for every three bytes. The contents
   118                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   119                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word at
   120                                  ; this address; 4) If N was odd (so that N*1.5 was not an integer), shift the
   121                                  ; word right four bits; 5) mask to 12 bits (AND with 0FFF hex). Entry number
   122                                  ; zero is used as an end-of-file trap in the OS and as a flag for directory
   123                                  ; entry size (if SMALLDIR selected). Entry 1 is reserved for future use. The
   124                                  ; first available allocation unit is assigned entry number two, and even
   125                                  ; though it is the first, is called cluster 2. Entries greater than 0FF8H are
   126                                  ; end of file marks; entries of zero are unallocated. Otherwise, the contents
   127                                  ; of a FAT entry is the number of the next cluster in the file.
   128                                  
   129                                  
   130                                  ; Field definition for Drive Parameter Block
   131                                  
   132                                  struc	DPBLOCK
   133 00000000 <res 00000001>          .DEVNUM: resb	1	;I/O driver number
   134 00000001 <res 00000001>          .DRVNUM: resb	1	;Physical Unit number
   135 00000002 <res 00000002>          .SECSIZ: resw	1	;Size of physical sector in bytes
   136 00000004 <res 00000001>          .CLUSMSK: resb	1	;Sectors/cluster - 1
   137 00000005 <res 00000001>          .CLUSSHFT: resb 1	;Log2 of sectors/cluster
   138 00000006 <res 00000002>          .FIRFAT: resw	1	;Starting record of FATs
   139 00000008 <res 00000001>          .FATCNT: resb	1	;Number of FATs for this drive
   140 00000009 <res 00000002>          .MAXENT: resw	1	;Number of directory entries
   141 0000000B <res 00000002>          .FIRREC: resw	1	;First sector of first cluster
   142 0000000D <res 00000002>          .MAXCLUS: resw	1	;Number of clusters on drive + 1
   143 0000000F <res 00000001>          .FATSIZ: resb	1	;Number of records occupied by FAT
   144 00000010 <res 00000002>          .FIRDIR: resw	1	;Starting record of directory
   145 00000012 <res 00000002>          .FAT:	resw	1	;Pointer to start of FAT
   146                                  endstruc
   147                                  
   148                                  DPBSIZ	EQU	20	;Size of the structure in bytes
   149                                  DPBLOCK.DIRSEC	EQU DPBLOCK.FIRREC  ;Number of dir. sectors (init temporary)
   150                                  DPBLOCK.DSKSIZ	EQU DPBLOCK.MAXCLUS ;Size of disk (temp used during init only)
   151                                  
   152                                  ;The following are all of the segments used
   153                                  ;They are declared in the order that they should be placed in the executable
   154                                  
   155                                  ; Location of user registers relative user stack pointer
   156                                  
   157                                  struc STKPTRS
   158 00000000 <res 00000002>          .AXSAVE:  resw	1
   159 00000002 <res 00000002>          .BXSAVE:  resw	1
   160 00000004 <res 00000002>          .CXSAVE:  resw	1
   161 00000006 <res 00000002>          .DXSAVE:  resw	1
   162 00000008 <res 00000002>          .SISAVE:  resw	1
   163 0000000A <res 00000002>          .DISAVE:  resw	1
   164 0000000C <res 00000002>          .BPSAVE:  resw	1
   165 0000000E <res 00000002>          .DSSAVE:  resw	1
   166 00000010 <res 00000002>          .ESSAVE:  resw	1
   167 00000012 <res 00000002>          .IPSAVE:  resw	1
   168 00000014 <res 00000002>          .CSSAVE:  resw	1
   169 00000016 <res 00000002>          .FSAVE:   resw	1
   170                                  endstruc
   171                                  
   172                                  ;-------------------------------------------------------------------------------------
   173                                  BIOSSEG     EQU 60H 
   174                                  ;-------------------------------------------------------------------------------------
   175                                  
   176                                  BIOSSTAT    EQU	03H
   177                                  BIOSIN	    EQU	06H
   178                                  BIOSOUT     EQU	09H
   179                                  BIOSPRINT   EQU	0CH
   180                                  BIOSAUXIN   EQU	0FH
   181                                  BIOSAUXOUT  EQU	12H
   182                                  BIOSREAD    EQU	15H
   183                                  BIOSWRITE   EQU	18H
   184                                  BIOSDSKCHG  EQU	1BH
   185                                  BIOSSETDATE EQU 1EH
   186                                  BIOSSETTIME EQU 21H
   187                                  BIOSGETTIME EQU 24H
   188                                  BIOSFLUSH   EQU	27H
   189                                  BIOSMAPDEV  EQU	2AH
   190                                  
   191                                  ;-------------------------------------------------------------------------------------
   192                                  ; Start of code
   193                                  ;-------------------------------------------------------------------------------------
   194                                  
   195                                          [ORG 0]
   196                                  
   197                                  CODSTRT EQU     $
   198 00000000 E90D16                          JMP     DOSINIT
   199                                  
   200 00000003 00                      ESCCHAR: DB	ESCCH   ;Lead-in character for escape sequences
   201                                  ESCTAB: 
   202 00000004 40                              DB      64      ;Crtl-Z - F6
   203 00000005 4D                              DB      77      ;Copy one char - -->
   204 00000006 3B                              DB      59      ;Copy one char - F1
   205 00000007 53                              DB      83      ;Skip one char - DEL
   206 00000008 3C                              DB      60      ;Copy to char - F2
   207 00000009 3E                              DB      62      ;Skip to char - F4
   208 0000000A 3D                              DB      61      ;Copy line - F3
   209 0000000B 3D                              DB      61      ;Kill line (no change to template ) - Not used
   210 0000000C 3F                              DB      63      ;Reedit line (new template) - F5
   211 0000000D 4B                              DB      75      ;Backspace - <--
   212 0000000E 52                              DB      82      ;Enter insert mode - INS (toggle)
   213 0000000F 41                              DB      65      ;Escape character - F7
   214 00000010 41                              DB      65      ;End of table
   215                                  
   216                                  ESCTABLEN EQU   $-ESCTAB
   217                                  
   218                                  HEADER:
   219 00000011 0D0A4D532D444F5320-     	DB      13,10,"MS-DOS version 1.25"
   220 0000001A 76657273696F6E2031-
   221 00000023 2E3235             
   222 00000026 0D0A                    	DB      13,10
   223 00000028 436F70797269676874-             DB      "Copyright 1981,82 Microsoft, Inc.",13,10,"$"
   224 00000031 20313938312C383220-
   225 0000003A 4D6963726F736F6674-
   226 00000043 2C20496E632E0D0A24 
   227                                  QUIT:
   228 0000004C B400                            MOV     AH,0
   229 0000004E EB2B                            JMP     SHORT SAVREGS
   230                                  
   231                                  COMMAND: ;Interrupt call entry point
   232 00000050 80FC2E                          CMP     AH,MAXCOM
   233 00000053 7626                            JBE     SHORT SAVREGS
   234                                  	
   235                                  	;
   236                                  	; Retro DOS v1.0 - 11/02/2018
   237 00000055 80FCFF                  	CMP	AH, 0FFh
   238 00000058 7208                    	JB	SHORT BADCALL
   239                                  
   240 0000005A 60                      	PUSHA
   241 0000005B BE[E615]                	MOV     SI,RETRODOSMSG
   242 0000005E E84D12                          CALL    OUTMES
   243 00000061 61                      	POPA
   244                                  	;
   245                                  		
   246                                  BADCALL:
   247 00000062 B000                            MOV     AL,0
   248 00000064 CF                      IRET:   IRET
   249                                  
   250                                  ENTRY:  ;System call entry point and dispatcher
   251 00000065 58                              POP     AX              ;IP from the long call at 5
   252 00000066 58                              POP     AX              ;Segment from the long call at 5
   253 00000067 2E8F06[4217]                    POP     WORD [CS:TEMP]	;IP from the CALL 5
   254 0000006C 9C                              PUSHF                   ;Start re-ordering the stack
   255 0000006D FA                              CLI
   256 0000006E 50                              PUSH    AX              ;Save segment
   257 0000006F 2EFF36[4217]                    PUSH    WORD [CS:TEMP]	;Stack now ordered as if INT had been used
   258 00000074 80F924                          CMP     CL,MAXCALL      ;This entry point doesn't get as many calls
   259 00000077 77E9                            JA      SHORT BADCALL
   260 00000079 88CC                            MOV     AH,CL
   261                                  SAVREGS:
   262 0000007B 06                              PUSH    ES
   263 0000007C 1E                              PUSH    DS
   264 0000007D 55                              PUSH    BP
   265 0000007E 57                              PUSH    DI
   266 0000007F 56                              PUSH    SI
   267 00000080 52                              PUSH    DX
   268 00000081 51                              PUSH    CX
   269 00000082 53                              PUSH    BX
   270 00000083 50                              PUSH    AX
   271                                  
   272 00000084 2E8926[4217]                    MOV     [CS:SPSAVE],SP
   273 00000089 2E8C16[4417]                    MOV     [CS:SSSAVE],SS
   274 0000008E 8CCC                            MOV     SP,CS
   275 00000090 8ED4                            MOV     SS,SP
   276                                  REDISP:
   277 00000092 BC[EC17]                        MOV     SP, IOSTACK
   278 00000095 FB                              STI                     ;Stack OK now
   279 00000096 88E3                            MOV     BL,AH
   280 00000098 B700                            MOV     BH,0
   281 0000009A D1E3                            SHL     BX,1
   282 0000009C FC                              CLD
   283 0000009D 80FC0C                          CMP     AH,12
   284 000000A0 7E03                            JLE     SHORT SAMSTK
   285 000000A2 BC[6C18]                        MOV     SP,DSKSTACK
   286                                  SAMSTK:
   287 000000A5 2EFF97[C400]                    CALL    [CS:BX+DISPATCH]
   288                                  LEAVE:
   289 000000AA FA                              CLI
   290 000000AB 2E8B26[4217]                    MOV     SP,[CS:SPSAVE]
   291 000000B0 2E8E16[4417]                    MOV     SS,[CS:SSSAVE]
   292 000000B5 89E5                            MOV     BP,SP
   293 000000B7 884600                          MOV     [BP+STKPTRS.AXSAVE],AL
   294                                  
   295 000000BA 58                              POP     AX
   296 000000BB 5B                              POP     BX
   297 000000BC 59                              POP     CX
   298 000000BD 5A                              POP     DX
   299 000000BE 5E                              POP     SI
   300 000000BF 5F                              POP     DI
   301 000000C0 5D                              POP     BP
   302 000000C1 1F                              POP     DS
   303 000000C2 07                              POP     ES
   304 000000C3 CF                              IRET
   305                                  
   306                                  ; Standard Functions
   307                                  DISPATCH:
   308 000000C4 [C506]                  	DW	ABORT           ;0
   309 000000C6 [5D12]                          DW	CONIN
   310 000000C8 [B311]                          DW	CONOUT
   311 000000CA [4F01]                          DW	READER
   312 000000CC [5801]                          DW	PUNCH
   313 000000CE [9512]                          DW	LIST            ;5
   314 000000D0 [6C12]                          DW	RAWIO
   315 000000D2 [8912]                          DW	RAWINP
   316 000000D4 [6612]                          DW	IN
   317 000000D6 [A212]                          DW	PRTBUF
   318 000000D8 [D50F]                          DW	BUFIN           ;10
   319 000000DA [5312]                          DW	CONSTAT
   320 000000DC [2C01]                          DW	FLUSHKB
   321 000000DE [7C0F]                          DW	DSKRESET
   322 000000E0 [C70F]                          DW	SELDSK
   323 000000E2 [E103]                          DW	OPEN            ;15
   324 000000E4 [CF04]                          DW	CLOSE
   325 000000E6 [630E]                          DW	SRCHFRST
   326 000000E8 [C60E]                          DW	SRCHNXT
   327 000000EA [AF02]                          DW	DELETE
   328 000000EC [0A07]                          DW	SEQRD           ;20
   329 000000EE [1207]                          DW	SEQWRT
   330 000000F0 [8105]                          DW	CREATE
   331 000000F2 [0703]                          DW	RENAME
   332 000000F4 [2201]                          DW	INUSE
   333 000000F6 [AF0F]                          DW	GETDRV          ;25
   334 000000F8 [2A0F]                          DW	SETDMA
   335 000000FA [380F]                          DW	GETFATPT
   336 000000FC [3A0F]                          DW	GETFATPTDL
   337 000000FE [2201]                          DW	GETRDONLY
   338 00000100 [2201]                          DW	SETATTRIB       ;30
   339 00000102 [660F]                          DW	GETDSKPT
   340 00000104 [2201]                          DW	USERCODE
   341 00000106 [2207]                          DW	RNDRD
   342 00000108 [2A07]                          DW	RNDWRT
   343 0000010A [EA0E]                          DW	FILESIZE        ;35
   344 0000010C [B40F]                          DW	SETRNDREC
   345                                  ; Extended Functions
   346 0000010E [A213]                          DW	SETVECT
   347 00000110 [B413]                          DW	NEWBASE
   348 00000112 [3207]                          DW	BLKRD
   349 00000114 [3A07]                          DW	BLKWRT          ;40
   350 00000116 [BB12]                          DW	MAKEFCB
   351 00000118 [B714]                          DW	GETDATE
   352 0000011A [D514]                          DW	SETDATE
   353 0000011C [5715]                          DW	GETTIME
   354 0000011E [6915]                          DW	SETTIME         ;45
   355 00000120 [2501]                          DW	VERIFY
   356                                  
   357                                  INUSE:
   358                                  GETIO:
   359                                  SETIO:
   360                                  GETRDONLY:
   361                                  SETATTRIB:
   362                                  USERCODE:
   363 00000122 B000                            MOV     AL,0
   364 00000124 C3                              RET
   365                                  
   366                                  VERIFY:
   367 00000125 2401                            AND     AL,1
   368 00000127 2EA2[C615]                      MOV     [CS:VERFLG],AL
   369 0000012B C3                              RETN
   370                                  
   371                                  FLUSHKB:
   372 0000012C 50                              PUSH    AX
   373 0000012D 9A27006000                      CALL    BIOSSEG:BIOSFLUSH
   374 00000132 58                              POP     AX
   375 00000133 88C4                            MOV     AH,AL
   376 00000135 3C01                            CMP     AL,1
   377 00000137 7413                            JZ      SHORT REDISPJ
   378 00000139 3C06                            CMP     AL,6
   379 0000013B 740F                            JZ      SHORT REDISPJ
   380 0000013D 3C07                            CMP     AL,7
   381 0000013F 740B                            JZ      SHORT REDISPJ
   382 00000141 3C08                            CMP     AL,8
   383 00000143 7407                            JZ      SHORT REDISPJ
   384 00000145 3C0A                            CMP     AL,10
   385 00000147 7403                            JZ      SHORT REDISPJ
   386 00000149 B000                            MOV     AL,0
   387 0000014B C3                              RETN
   388                                  
   389                                  REDISPJ:
   390 0000014C E943FF                  	JMP     REDISP
   391                                  
   392                                  READER:
   393                                  AUXIN:
   394 0000014F E88810                          CALL    STATCHK
   395 00000152 9A0F006000                      CALL    BIOSSEG:BIOSAUXIN 
   396 00000157 C3                              RETN
   397                                  
   398                                  PUNCH:
   399 00000158 88D0                            MOV     AL,DL
   400                                  AUXOUT:
   401 0000015A 50                              PUSH    AX
   402 0000015B E87C10                          CALL    STATCHK
   403 0000015E 58                              POP     AX
   404 0000015F 9A12006000                      CALL    BIOSSEG:BIOSAUXOUT
   405 00000164 C3                              RETN
   406                                  
   407                                  
   408                                  UNPACK:
   409                                  
   410                                  ; Inputs:
   411                                  ;       DS = CS
   412                                  ;       BX = Cluster number
   413                                  ;       BP = Base of drive parameters
   414                                  ;       SI = Pointer to drive FAT
   415                                  ; Outputs:
   416                                  ;       DI = Contents of FAT for given cluster
   417                                  ;       Zero set means DI=0 (free cluster)
   418                                  ; No other registers affected. Fatal error if cluster too big.
   419                                  
   420 00000165 3B5E0D                          CMP     BX,[BP+DPBLOCK.MAXCLUS]
   421 00000168 7718                            JA      SHORT HURTFAT
   422 0000016A 8D38                            LEA     DI,[SI+BX]
   423 0000016C D1EB                            SHR     BX,1
   424 0000016E 8B39                            MOV     DI,[DI+BX]
   425 00000170 7309                            JNC     SHORT HAVCLUS
   426 00000172 D1EF                            SHR     DI,1
   427 00000174 D1EF                            SHR     DI,1
   428 00000176 D1EF                            SHR     DI,1
   429 00000178 D1EF                            SHR     DI,1
   430 0000017A F9                              STC
   431                                  HAVCLUS:
   432 0000017B D1D3                            RCL     BX,1
   433 0000017D 81E7FF0F                        AND     DI,0FFFH
   434 00000181 C3                              RETN
   435                                  HURTFAT:
   436 00000182 50                              PUSH    AX
   437 00000183 B480                            MOV     AH,80H          ;Signal Bad FAT to INT 24H handler
   438 00000185 BFFF0F                          MOV     DI,0FFFH        ;In case INT 24H returns (it shouldn't)
   439 00000188 E8C204                          CALL    FATAL
   440 0000018B 58                              POP     AX              ;Try to ignore bad FAT
   441 0000018C C3                              RETN
   442                                  
   443                                  PACK:
   444                                  
   445                                  ; Inputs:
   446                                  ;       DS = CS
   447                                  ;       BX = Cluster number
   448                                  ;       DX = Data
   449                                  ;       SI = Pointer to drive FAT
   450                                  ; Outputs:
   451                                  ;       The data is stored in the FAT at the given cluster.
   452                                  ;       BX,DX,DI all destroyed
   453                                  ;       No other registers affected
   454                                  
   455 0000018D 89DF                            MOV     DI,BX
   456 0000018F D1EB                            SHR     BX,1
   457 00000191 01F3                            ADD     BX,SI
   458 00000193 01FB                            ADD     BX,DI
   459 00000195 D1EF                            SHR     DI,1
   460 00000197 8B3F                            MOV     DI,[BX]
   461 00000199 730D                            JNC     ALIGNED
   462 0000019B D1E2                            SHL     DX,1
   463 0000019D D1E2                            SHL     DX,1
   464 0000019F D1E2                            SHL     DX,1
   465 000001A1 D1E2                            SHL     DX,1
   466 000001A3 83E70F                          AND     DI,0FH
   467 000001A6 EB04                            JMP     SHORT PACKIN
   468                                  ALIGNED:
   469 000001A8 81E700F0                        AND     DI,0F000H
   470                                  PACKIN:
   471 000001AC 09D7                            OR      DI,DX
   472 000001AE 893F                            MOV     [BX],DI
   473 000001B0 C3                              RETN
   474                                  
   475                                  DEVNAME:
   476 000001B1 BE[9415]                        MOV     SI,IONAME		;List of I/O devices with file names
   477 000001B4 B706                            MOV     BH,NUMDEV		;BH = number of device names
   478                                  LOOKIO:
   479 000001B6 BF[1B17]                        MOV     DI,NAME1
   480 000001B9 B90400                          MOV     CX,4                    ;All devices are 4 letters
   481 000001BC F3A6                            REPE    CMPSB                   ;Check for name in list
   482 000001BE 7408                            JZ      SHORT IOCHK		;If first 3 letters OK, check for the rest
   483 000001C0 01CE                            ADD     SI,CX                   ;Point to next device name
   484 000001C2 FECF                            DEC     BH
   485 000001C4 75F0                            JNZ     SHORT LOOKIO
   486                                  CRET:
   487 000001C6 F9                              STC                             ;Not found
   488 000001C7 C3                              RETN
   489                                  
   490                                  IOCHK:
   491 000001C8 80FF06                          CMP     BH,NUMDEV       ;Is it the first device?
   492 000001CB 7502                            JNZ     SHORT NOTCOM1
   493 000001CD B702                            MOV     BH,2            ;Make it the same as AUX
   494                                  NOTCOM1:
   495 000001CF F6DF                            NEG     BH
   496 000001D1 B90200                          MOV     CX,2            ;Check rest of name but not extension
   497 000001D4 B82020                          MOV     AX,2020H
   498 000001D7 F3AF                            REPE    SCASW           ;Make sure rest of name is blanks
   499 000001D9 75EB                            JNZ     SHORT CRET
   500 000001DB C3                      RET1:   RETN			;Zero set so CREATE works
   501                                  
   502                                  GETFILE:
   503                                  ; Same as GETNAME except ES:DI points to FCB on successful return
   504 000001DC E8A701                          CALL    MOVNAME
   505 000001DF 72FA                            JC      SHORT RET1
   506 000001E1 52                              PUSH    DX
   507 000001E2 1E                              PUSH    DS
   508 000001E3 E80800                          CALL    FINDNAME
   509 000001E6 07                              POP     ES
   510 000001E7 5F                              POP     DI
   511 000001E8 C3                      RET2:   RETN
   512                                  
   513                                  
   514                                  GETNAME:
   515                                  
   516                                  ; Inputs:
   517                                  ;       DS,DX point to FCB
   518                                  ; Function:
   519                                  ;       Find file name in disk directory. First byte is
   520                                  ;       drive number (0=current disk). "?" matches any
   521                                  ;       character.
   522                                  ; Outputs:
   523                                  ;       Carry set if file not found
   524                                  ;       ELSE
   525                                  ;       Zero set if attributes match (always except when creating)
   526                                  ;       BP = Base of drive parameters
   527                                  ;       DS = CS
   528                                  ;       ES = CS
   529                                  ;       BX = Pointer into directory buffer
   530                                  ;       SI = Pointer to First Cluster field in directory entry
   531                                  ;       [DIRBUF] has directory record with match
   532                                  ;       [NAME1] has file name
   533                                  ; All other registers destroyed.
   534                                  
   535 000001E9 E89A01                          CALL    MOVNAME
   536 000001EC 72FA                            JC      SHORT RET2		;Bad file name?
   537                                  FINDNAME:
   538 000001EE 8CC8                            MOV     AX,CS
   539 000001F0 8ED8                            MOV     DS,AX
   540 000001F2 E8BCFF                          CALL    DEVNAME
   541 000001F5 73F1                            JNC     SHORT RET2
   542 000001F7 E83D02                          CALL    STARTSRCH
   543                                  CONTSRCH:
   544 000001FA E85500                          CALL    GETENTRY
   545 000001FD 72E9                            JC      SHORT RET2
   546                                  SRCH:
   547 000001FF 8A27                            MOV     AH,[BX]
   548 00000201 08E4                            OR      AH,AH                   ;End of directory?
   549 00000203 741E                            JZ      SHORT FREE
   550 00000205 3A26[4117]                      CMP     AH,[DELALL]             ;Free entry?
   551 00000209 7418                            JZ      SHORT FREE
   552 0000020B 89DE                            MOV     SI,BX
   553 0000020D BF[1B17]                        MOV     DI,NAME1
   554 00000210 B90B00                          MOV     CX,11
   555                                  WILDCRD:
   556 00000213 F3A6                            REPE    CMPSB
   557 00000215 7423                            JZ      SHORT FOUND
   558 00000217 807DFF3F                        CMP     BYTE [DI-1],"?"
   559 0000021B 74F6                            JZ      SHORT WILDCRD
   560                                  NEXTENT:
   561 0000021D E86900                          CALL    NEXTENTRY
   562 00000220 73DD                            JNC     SHORT SRCH
   563 00000222 C3                      RET3:   RETN
   564                                  
   565                                  FREE:
   566 00000223 833E[6C17]FF                    CMP     WORD [ENTFREE],-1	;Found a free entry before?
   567 00000228 7508                            JNZ     SHORT TSTALL		;If so, ignore this one
   568 0000022A 8B0E[1317]                      MOV     CX,[LASTENT]
   569 0000022E 890E[6C17]                      MOV     [ENTFREE],CX
   570                                  TSTALL:
   571 00000232 3A26[4117]                      CMP     AH,[DELALL]             ;At end of directory?
   572 00000236 74E5                            JZ      SHORT NEXTENT		;No - continue search
   573 00000238 F9                              STC                             ;Report not found
   574 00000239 C3                              RETN
   575                                   
   576                                  FOUND:
   577                                  ;Check if attributes allow finding it
   578 0000023A 8A26[2617]                      MOV     AH,[ATTRIB]             ;Attributes of search
   579 0000023E F6D4                            NOT     AH
   580 00000240 2224                            AND     AH,[SI]                 ;Compare with attributes of file
   581 00000242 83C60F                          ADD     SI,15   
   582 00000245 80E406                          AND     AH,6                    ;Only look at bits 1 and 2
   583 00000248 74D8                            JZ      SHORT RET3
   584 0000024A F606[4017]FF                    TEST    BYTE [CREATING],-1	;Pass back mismatch if creating
   585 0000024F 74CC                            JZ      SHORT NEXTENT		;Otherwise continue searching
   586 00000251 C3                              RETN
   587                                  
   588                                  
   589                                  GETENTRY:
   590                                  
   591                                  ; Inputs:
   592                                  ;       [LASTENT] has previously searched directory entry
   593                                  ; Function:
   594                                  ;       Locates next sequential directory entry in preparation for search
   595                                  ; Outputs:
   596                                  ;       Carry set if none
   597                                  ;       ELSE
   598                                  ;       AL = Current directory block
   599                                  ;       BX = Pointer to next directory entry in [DIRBUF]
   600                                  ;       DX = Pointer to first byte after end of DIRBUF
   601                                  ;       [LASTENT] = New directory entry number
   602                                  
   603 00000252 A1[1317]                        MOV     AX,[LASTENT]
   604 00000255 40                              INC     AX                      ;Start with next entry
   605 00000256 3B4609                          CMP     AX,[BP+DPBLOCK.MAXENT]
   606 00000259 734F                            JAE     SHORT NONE
   607                                  GETENT:
   608 0000025B A3[1317]                        MOV     [LASTENT],AX
   609 0000025E B104                            MOV     CL,4
   610 00000260 D3E0                            SHL     AX,CL
   611 00000262 31D2                            XOR     DX,DX
   612 00000264 D1E0                            SHL     AX,1
   613 00000266 D1D2                            RCL     DX,1                    ;Account for overflow in last shift
   614 00000268 8B5E02                          MOV     BX,[BP+DPBLOCK.SECSIZ]
   615 0000026B 80E3E0                          AND     BL,255-31               ;Must be multiple of 32
   616 0000026E F7F3                            DIV     BX
   617 00000270 89D3                            MOV     BX,DX                   ;Position within sector
   618 00000272 8A6600                          MOV     AH,[BP+DPBLOCK.DEVNUM]	;AL=Directory sector no.
   619 00000275 3B06[D915]                      CMP     AX,[DIRBUFID]
   620 00000279 7405                            JZ      SHORT HAVDIRBUF
   621 0000027B 53                              PUSH    BX
   622 0000027C E87D03                          CALL    DIRREAD
   623 0000027F 5B                              POP     BX
   624                                  HAVDIRBUF:
   625 00000280 BA[6E18]                        MOV     DX,DIRBUF
   626 00000283 01D3                            ADD     BX,DX
   627 00000285 035602                          ADD     DX,[BP+DPBLOCK.SECSIZ]
   628 00000288 C3                              RETN
   629                                  
   630                                  NEXTENTRY:
   631                                  
   632                                  ; Inputs:
   633                                  ;       Same as outputs of GETENTRY, above
   634                                  ; Function:
   635                                  ;       Update AL, BX, and [LASTENT] for next directory entry.
   636                                  ;       Carry set if no more.
   637                                  
   638 00000289 8B3E[1317]                      MOV     DI,[LASTENT]
   639 0000028D 47                              INC     DI
   640 0000028E 3B7E09                          CMP     DI,[BP+DPBLOCK.MAXENT]
   641 00000291 7317                            JAE     SHORT NONE
   642 00000293 893E[1317]                      MOV     [LASTENT],DI
   643 00000297 83C320                          ADD     BX,32
   644 0000029A 39D3                            CMP     BX,DX
   645 0000029C 720A                            JB      SHORT HAVIT
   646 0000029E FEC0                            INC     AL                      ;Next directory sector
   647 000002A0 52                              PUSH    DX                      ;Save limit
   648 000002A1 E85803                          CALL    DIRREAD
   649 000002A4 5A                              POP     DX
   650 000002A5 BB[6E18]                        MOV     BX,DIRBUF
   651                                  HAVIT:
   652 000002A8 F8                              CLC
   653 000002A9 C3                              RETN
   654                                  
   655                                  NONE:
   656 000002AA E8E103                          CALL    CHKDIRWRITE
   657 000002AD F9                              STC
   658 000002AE C3                      RET4:   RETN
   659                                  
   660                                  
   661                                  DELETE: ; System call 19
   662 000002AF E8D400                          CALL    MOVNAME
   663 000002B2 B0FF                            MOV     AL,-1
   664 000002B4 72F8                            JC      SHORT RET4
   665 000002B6 2EA0[2617]                      MOV     AL,[CS:ATTRIB]
   666 000002BA 2406                            AND     AL,6                    ;Look only at hidden bits
   667 000002BC 3C06                            CMP     AL,6                    ;Both must be set
   668 000002BE 7512                            JNZ     SHORT NOTALL
   669 000002C0 B90B00                          MOV     CX,11
   670 000002C3 B03F                            MOV     AL,"?"
   671 000002C5 BF[1B17]                        MOV     DI,NAME1
   672 000002C8 F3AE                            REPE    SCASB                   ;See if name is *.*
   673 000002CA 7506                            JNZ     SHORT NOTALL
   674 000002CC 2EC606[4117]00                  MOV     BYTE [CS:DELALL],0	;DEL *.* - flag deleting all
   675                                  NOTALL:
   676 000002D2 E819FF                          CALL    FINDNAME
   677 000002D5 B0FF                            MOV     AL,-1
   678 000002D7 72D5                            JC      SHORT RET4
   679 000002D9 08FF                            OR      BH,BH			;Check if device name
   680 000002DB 78D1                            JS      SHORT RET4		;Can't delete I/O devices
   681                                  DELFILE:
   682 000002DD C606[C315]FF                    MOV     BYTE [DIRTYDIR],-1
   683 000002E2 8A26[4117]                      MOV     AH,[DELALL]
   684 000002E6 8827                            MOV     [BX],AH
   685 000002E8 8B1C                            MOV     BX,[SI]
   686 000002EA 8B7612                          MOV     SI,[BP+DPBLOCK.FAT]
   687 000002ED 09DB                            OR      BX,BX
   688 000002EF 7408                            JZ      SHORT DELNXT
   689 000002F1 3B5E0D                          CMP     BX,[BP+DPBLOCK.MAXCLUS]
   690 000002F4 7703                            JA      SHORT DELNXT
   691 000002F6 E8490B                          CALL    RELEASE
   692                                  DELNXT:
   693 000002F9 E8FEFE                          CALL    CONTSRCH
   694 000002FC 73DF                            JNC     SHORT DELFILE
   695 000002FE E83F02                          CALL    FATWRT
   696 00000301 E88A03                          CALL    CHKDIRWRITE
   697 00000304 30C0                            XOR     AL,AL
   698 00000306 C3                              RETN
   699                                  
   700                                  RENAME: ;System call 23
   701 00000307 E87C00                          CALL    MOVNAME
   702 0000030A 7277                            JC      SHORT ERRET
   703 0000030C 83C605                          ADD     SI,5
   704 0000030F BF[2717]                        MOV     DI,NAME2
   705 00000312 E89E00                          CALL    LODNAME
   706 00000315 726C                            JC      SHORT ERRET	;Report error if second name invalid
   707 00000317 E8D4FE                          CALL    FINDNAME
   708 0000031A 7267                            JC      SHORT ERRET
   709 0000031C 08FF                            OR      BH,BH           ;Check if I/O device name
   710 0000031E 7863                            JS      SHORT ERRET	;If so, can't rename it
   711 00000320 BE[1B17]                        MOV     SI,NAME1
   712 00000323 BF[3217]                        MOV     DI,NAME3
   713 00000326 B90600                          MOV     CX,6            ;6 words (12 bytes)--include attribute byte
   714 00000329 F3A5                            REP     MOVSW           ;Copy name to search for
   715                                  RENFIL:
   716 0000032B BF[1B17]                        MOV     DI,NAME1
   717 0000032E BE[2717]                        MOV     SI,NAME2
   718 00000331 B90B00                          MOV     CX,11
   719                                  NEWNAM:
   720 00000334 AC                              LODSB
   721 00000335 3C3F                            CMP     AL,"?"
   722 00000337 7502                            JNZ	SHORT NOCHG
   723 00000339 8A07                            MOV     AL,[BX]
   724                                  NOCHG:
   725 0000033B AA                              STOSB
   726 0000033C 43                              INC     BX
   727 0000033D E2F5                            LOOP    NEWNAM
   728 0000033F C60506                          MOV     BYTE [DI],6	;Stop duplicates with any attributes
   729 00000342 E86CFE                          CALL    DEVNAME         ;Check if giving it a device name
   730 00000345 7339                            JNC     SHORT RENERR
   731 00000347 FF36[1317]                      PUSH    WORD [LASTENT]	;Save position of match
   732 0000034B C706[1317]FFFF                  MOV     WORD [LASTENT],-1  ;Search entire directory for duplicate
   733 00000351 E8A6FE                          CALL    CONTSRCH        ;See if new name already exists
   734 00000354 58                              POP     AX
   735 00000355 7329                            JNC     SHORT RENERR	;Error if found
   736 00000357 E801FF                          CALL    GETENT		;Re-read matching entry
   737 0000035A 89DF                            MOV     DI,BX
   738 0000035C BE[1B17]                        MOV     SI,NAME1
   739 0000035F B90500                          MOV     CX,5
   740 00000362 A4                              MOVSB
   741 00000363 F3A5                            REP     MOVSW		;Replace old name with new one
   742 00000365 C606[C315]FF                    MOV     BYTE [DIRTYDIR],-1 ;Flag change in directory
   743 0000036A BE[3217]                        MOV     SI,NAME3
   744 0000036D BF[1B17]                        MOV     DI,NAME1
   745 00000370 B90600                          MOV     CX,6                    ;Include attribute byte
   746 00000373 F3A5                            REP     MOVSW                   ;Copy name back into search buffer
   747 00000375 E882FE                          CALL    CONTSRCH
   748 00000378 73B1                            JNC     SHORT RENFIL
   749 0000037A E81103                          CALL    CHKDIRWRITE
   750 0000037D 30C0                            XOR     AL,AL
   751 0000037F C3                              RETN
   752                                  
   753                                  RENERR:
   754 00000380 E80B03                          CALL    CHKDIRWRITE
   755                                  ERRET:
   756 00000383 B0FF                            MOV     AL,-1
   757 00000385 C3                      RET5:   RETN
   758                                  
   759                                  
   760                                  MOVNAME:
   761                                  
   762                                  ; Inputs:
   763                                  ;       DS, DX point to FCB or extended FCB
   764                                  ; Outputs:
   765                                  ;       DS:DX point to normal FCB
   766                                  ;       ES = CS
   767                                  ;       If file name OK:
   768                                  ;       BP has base of driver parameters
   769                                  ;       [NAME1] has name in upper case
   770                                  ; All registers except DX destroyed
   771                                  ; Carry set if bad file name or drive
   772                                  
   773 00000386 2EC706[4017]00E5                MOV     WORD [CS:CREATING],0E500H ;Not creating, not DEL *.*
   774 0000038D 8CC8                            MOV     AX,CS
   775 0000038F 8EC0                            MOV     ES,AX
   776 00000391 BF[1B17]                        MOV     DI,NAME1
   777 00000394 89D6                            MOV     SI,DX
   778 00000396 AC                              LODSB
   779 00000397 2EA2[3E17]                      MOV     [CS:EXTFCB],AL  ;Set flag if extended FCB in use
   780 0000039B B400                            MOV     AH,0            ;Set default attributes
   781 0000039D 3CFF                            CMP     AL,-1           ;Is it an extended FCB?
   782 0000039F 750A                            JNZ     SHORT HAVATTRB
   783 000003A1 83C207                          ADD     DX,7            ;Adjust to point to normal FCB
   784 000003A4 83C606                          ADD     SI,6            ;Point to drive select byte
   785 000003A7 8A64FF                          MOV     AH,[SI-1]       ;Get attribute byte
   786 000003AA AC                              LODSB			;Get drive select byte
   787                                  HAVATTRB:
   788 000003AB 2E8826[2617]                    MOV     [CS:ATTRIB],AH	;Save attributes
   789 000003B0 E81A00                          CALL    GETTHISDRV
   790                                  LODNAME:
   791                                  ; This entry point copies a file name from DS,SI
   792                                  ; to ES,DI converting to upper case.
   793 000003B3 803C20                          CMP     BYTE [SI]," "	;Don't allow blank as first letter
   794 000003B6 F9                              STC                     ;In case of error
   795 000003B7 74CC                            JZ      SHORT RET5
   796 000003B9 B90B00                          MOV     CX,11
   797                                  MOVCHK:
   798 000003BC E8A70F                          CALL    GETLET
   799 000003BF 72C4                            JB      SHORT RET5
   800 000003C1 7505                            JNZ     STOLET          ;Is it a delimiter?
   801 000003C3 3C20                            CMP     AL," "          ;This is the only delimiter allowed
   802 000003C5 F9                              STC                     ;In case of error
   803 000003C6 75BD                            JNZ     SHORT RET5
   804                                  STOLET:
   805 000003C8 AA                              STOSB
   806 000003C9 E2F1                            LOOP    MOVCHK
   807 000003CB F8                              CLC                     ;Got through whole name - no error
   808 000003CC C3                      RET6:   RETN
   809                                  
   810                                  GETTHISDRV:
   811 000003CD 2E3806[C415]                    CMP     [CS:NUMDRV],AL
   812 000003D2 72F8                            JC      SHORT RET6
   813 000003D4 FEC8                            DEC     AL
   814 000003D6 7904                            JNS     SHORT PHYDRV
   815 000003D8 2EA0[E215]                      MOV     AL,[CS:CURDRV]
   816                                  PHYDRV:
   817 000003DC 2EA2[4D17]                      MOV     [CS:THISDRV],AL
   818 000003E0 C3                              RETN
   819                                          
   820                                  
   821                                  OPEN:   ;System call 15
   822 000003E1 E8F8FD                          CALL    GETFILE
   823                                  DOOPEN:
   824                                  ; Enter here to perform OPEN on file already found
   825                                  ; in directory. DS=CS, BX points to directory
   826                                  ; entry in DIRBUF, SI points to First Cluster field, and
   827                                  ; ES:DI point to the FCB to be opened. This entry point
   828                                  ; is used by CREATE.
   829 000003E4 729D                            JC      SHORT ERRET
   830 000003E6 08FF                            OR      BH,BH           ;Check if file is I/O device
   831 000003E8 7829                            JS      SHORT OPENDEV	;Special handler if so
   832 000003EA A0[4D17]                        MOV     AL,[THISDRV]
   833 000003ED 40                              INC     AX
   834 000003EE AA                              STOSB
   835 000003EF 31C0                            XOR     AX,AX
   836 000003F1 83C70B                          ADD     DI,11
   837 000003F4 AB                              STOSW                   ;Zero low byte of extent field if IBM only
   838 000003F5 B080                            MOV     AL,128          ;Default record size
   839 000003F7 AB                              STOSW                   ;Set record size
   840 000003F8 AD                              LODSW                   ;Get starting cluster
   841 000003F9 89C2                            MOV     DX,AX           ;Save it for the moment
   842 000003FB A5                              MOVSW                   ;Transfer size to FCB
   843 000003FC A5                              MOVSW
   844 000003FD 8B44F8                          MOV     AX,[SI-8]       ;Get date
   845 00000400 AB                              STOSW                   ;Save date in FCB
   846 00000401 8B44F6                          MOV     AX,[SI-10]      ;Get time
   847 00000404 AB                              STOSW                   ;Save it in FCB
   848 00000405 8A4600                          MOV     AL,[BP+DPBLOCK.DEVNUM]
   849 00000408 0C40                            OR      AL,40H
   850 0000040A AA                              STOSB
   851 0000040B 89D0                            MOV     AX,DX           ;Restore starting cluster
   852 0000040D AB                              STOSW                   ; first cluster
   853 0000040E AB                              STOSW                   ; last cluster accessed
   854 0000040F 31C0                            XOR     AX,AX
   855 00000411 AB                              STOSW                   ; position of last cluster
   856 00000412 C3                              RETN
   857                                  
   858                                  OPENDEV:
   859 00000413 83C70D                          ADD     DI,13           ;point to 2nd half of extent field
   860 00000416 31C0                            XOR     AX,AX
   861 00000418 AA                              STOSB                   ;Set it to zero
   862 00000419 B080                            MOV     AL,128
   863 0000041B AB                              STOSW                   ;Set record size to 128
   864 0000041C 31C0                            XOR     AX,AX
   865 0000041E AB                              STOSW
   866 0000041F AB                              STOSW                   ;Set current size to zero
   867 00000420 E8EE0F                          CALL    DATE16
   868 00000423 AB                              STOSW                   ;Date is todays
   869 00000424 92                              XCHG    AX,DX
   870 00000425 AB                              STOSW                   ;Use current time
   871 00000426 88F8                            MOV     AL,BH           ;Get device number
   872 00000428 AA                              STOSB
   873 00000429 30C0                            XOR     AL,AL           ;No error
   874 0000042B C3                              RETN
   875                                  FATERR:
   876 0000042C 97                              XCHG    AX,DI           ;Put error code in DI
   877 0000042D B402                            MOV     AH,2            ;While trying to read FAT
   878 0000042F A0[4D17]                        MOV     AL,[THISDRV]    ;Tell which drive
   879 00000432 E81B02                          CALL    FATAL1
   880 00000435 EB09                            JMP     SHORT FATREAD
   881                                  STARTSRCH:
   882 00000437 B8FFFF                          MOV     AX,-1
   883 0000043A A3[1317]                        MOV     [LASTENT],AX
   884 0000043D A3[6C17]                        MOV     [ENTFREE],AX
   885                                  
   886                                  FATREAD:
   887                                  
   888                                  ; Inputs:
   889                                  ;       DS = CS
   890                                  ; Function:
   891                                  ;       If disk may have been changed, FAT is read in and buffers are
   892                                  ;       flagged invalid. If not, no action is taken.
   893                                  ; Outputs:
   894                                  ;       BP = Base of drive parameters
   895                                  ;       Carry set if invalid drive returned by MAPDEV
   896                                  ; All other registers destroyed
   897                                  
   898 00000440 A0[4D17]                        MOV     AL,[THISDRV]
   899 00000443 30E4                            XOR     AH,AH		;Set default response to zero & clear carry
   900 00000445 9A1B006000                      CALL    BIOSSEG:BIOSDSKCHG ;See what BIOS has to say
   901 0000044A 72E0                            JC      SHORT FATERR
   902 0000044C E85700                          CALL    GETBP
   903 0000044F A0[4D17]                        MOV     AL,[THISDRV]    ;Use physical unit number
   904 00000452 8B7612                          MOV     SI,[BP+DPBLOCK.FAT]
   905 00000455 0A64FF                          OR      AH,[SI-1]       ;Dirty byte for FAT
   906 00000458 780A                            JS      SHORT NEWDSK    ;If either say new disk, then it's so
   907 0000045A 7547                            JNZ     SHORT MAPDRV
   908 0000045C B401                            MOV     AH,1
   909 0000045E 3B06[D515]                      CMP     AX,[BUFDRVNO]  ;Does buffer have dirty sector of this drive?
   910 00000462 743F                            JZ      SHORT MAPDRV
   911                                  NEWDSK:
   912 00000464 3A06[D515]                      CMP     AL,[BUFDRVNO]   ;See if buffer is for this drive
   913 00000468 750C                            JNZ     SHORT BUFOK	;If not, don't touch it
   914 0000046A C706[D315]0000                  MOV     WORD [BUFSECNO], 0  ;Flag buffers invalid
   915 00000470 C706[D515]FF00                  MOV     WORD [BUFDRVNO],00FFH
   916                                  BUFOK:
   917 00000476 C706[D915]FFFF                  MOV     WORD [DIRBUFID],-1
   918 0000047C E8E600                          CALL    FIGFAT
   919                                  NEXTFAT:
   920 0000047F 50                              PUSH    AX
   921 00000480 E8FA01                          CALL    DSKREAD
   922 00000483 58                              POP     AX
   923 00000484 7236                            JC      SHORT BADFAT
   924 00000486 2A4608                          SUB     AL,[BP+DPBLOCK.FATCNT]
   925 00000489 7403                            JZ      SHORT NEWFAT
   926 0000048B E8B200                          CALL    FATWRT
   927                                  NEWFAT:
   928 0000048E 8B7612                          MOV     SI,[BP+DPBLOCK.FAT]
   929 00000491 8A4600                          MOV     AL,[BP+DPBLOCK.DEVNUM]
   930 00000494 8A24                            MOV     AH,[SI]         ;Get first byte of FAT
   931 00000496 80CCF8                          OR      AH,0F8H         ;Put in range
   932 00000499 9A2A006000                      CALL    BIOSSEG:BIOSMAPDEV
   933 0000049E B400                            MOV     AH,0
   934 000004A0 8944FE                          MOV     [SI-2],AX       ;Set device no. and reset dirty bit
   935                                  MAPDRV:
   936 000004A3 8A44FE                          MOV     AL,[SI-2]       ;Get device number
   937                                  GETBP:
   938 000004A6 8B2E[E315]                      MOV     BP,[DRVTAB]     ;Just in case drive isn't valid
   939 000004AA 243F                            AND     AL,3FH          ;Mask out dirty bit
   940 000004AC 3A06[C515]                      CMP     AL,[NUMIO]
   941 000004B0 F5                              CMC
   942 000004B1 7208                            JC      SHORT RET7
   943 000004B3 50                              PUSH    AX
   944 000004B4 B414                            MOV     AH,DPBSIZ
   945 000004B6 F6E4                            MUL     AH
   946 000004B8 01C5                            ADD     BP,AX
   947 000004BA 58                              POP     AX
   948                                  RET7:   
   949 000004BB C3                      	RETN
   950                                  
   951                                  BADFAT:
   952 000004BC 89F9                            MOV     CX,DI
   953 000004BE 01CA                            ADD     DX,CX
   954 000004C0 FEC8                            DEC     AL
   955 000004C2 75BB                            JNZ     NEXTFAT
   956 000004C4 E89E00                          CALL    FIGFAT                          ;Reset registers
   957 000004C7 E84601                          CALL    DREAD                           ;Try first FAT once more
   958 000004CA EBC2                            JMP     SHORT NEWFAT
   959                                  
   960                                  OKRET1:
   961 000004CC B000                            MOV     AL,0
   962 000004CE C3                              RETN
   963                                  
   964                                  CLOSE:  ;System call 16
   965 000004CF 89D7                            MOV     DI,DX
   966 000004D1 803DFF                          CMP     BYTE [DI],-1			;Check for extended FCB
   967 000004D4 7503                            JNZ     NORMFCB3
   968 000004D6 83C707                          ADD     DI,7
   969                                  NORMFCB3:
   970 000004D9 F64518C0                        TEST    BYTE [DI+FCBLOCK.DEVID],0C0H	;Allow only dirty files
   971 000004DD 75ED                            JNZ     SHORT OKRET1			;can't close if I/O device, or not writen
   972 000004DF 8A05                            MOV     AL,[DI]                         ;Get physical unit number
   973 000004E1 FEC8                            DEC     AL                              ;Make zero = drive A
   974 000004E3 B401                            MOV     AH,1                            ;Look for dirty buffer
   975 000004E5 2E3B06[D515]                    CMP     AX,[CS:BUFDRVNO]
   976 000004EA 751D                            JNZ     SHORT FNDDIR
   977                                  ;Write back dirty buffer if on same drive
   978 000004EC 52                              PUSH    DX
   979 000004ED 1E                              PUSH    DS
   980 000004EE 0E                              PUSH    CS
   981 000004EF 1F                              POP     DS
   982 000004F0 C606[D615]00                    MOV     BYTE [DIRTYBUF],0
   983 000004F5 8B1E[D115]                      MOV     BX,[BUFFER]
   984 000004F9 B90100                          MOV     CX,1
   985 000004FC 8B16[D315]                      MOV     DX,[BUFSECNO]
   986 00000500 8B2E[D715]                      MOV     BP,[BUFDRVBP]
   987 00000504 E89901                          CALL    DWRITE
   988 00000507 1F                              POP     DS
   989 00000508 5A                              POP     DX
   990                                  FNDDIR:
   991 00000509 E8D0FC                          CALL    GETFILE
   992                                  BADCLOSEJ:
   993 0000050C 724D                            JC      SHORT BADCLOSE
   994 0000050E 268B4D19                        MOV     CX,[ES:DI+FCBLOCK.FIRCLUS]
   995 00000512 890C                            MOV     [SI],CX
   996 00000514 268B5510                        MOV     DX,[ES:DI+FCBLOCK.FILSIZ]
   997 00000518 895402                          MOV     [SI+2],DX
   998 0000051B 268B5512                        MOV     DX,[ES:DI+FCBLOCK.FILSIZ+2]
   999 0000051F 895404                          MOV     [SI+4],DX
  1000 00000522 268B5514                        MOV     DX,[ES:DI+FCBLOCK.FDATE]
  1001 00000526 8954FE                          MOV     [SI-2],DX
  1002 00000529 268B5516                        MOV     DX,[ES:DI+FCBLOCK.FTIME]
  1003 0000052D 8954FC                          MOV     [SI-4],DX
  1004 00000530 E86201                          CALL    DIRWRITE
  1005                                  
  1006                                  CHKFATWRT:
  1007                                  ; Do FATWRT only if FAT is dirty and uses same I/O driver
  1008 00000533 8B7612                          MOV     SI,[BP+DPBLOCK.FAT]
  1009 00000536 8A4600                          MOV     AL,[BP+DPBLOCK.DEVNUM]
  1010 00000539 B401                            MOV     AH,1
  1011 0000053B 3944FE                          CMP     [SI-2],AX       ;See if FAT dirty and uses same driver
  1012 0000053E 7518                            JNZ     SHORT OKRET
  1013                                  
  1014                                  FATWRT:
  1015                                  
  1016                                  ; Inputs:
  1017                                  ;       DS = CS
  1018                                  ;       BP = Base of drive parameter table
  1019                                  ; Function:
  1020                                  ;       Write the FAT back to disk and reset FAT
  1021                                  ;       dirty bit.
  1022                                  ; Outputs:
  1023                                  ;       AL = 0
  1024                                  ;       BP unchanged
  1025                                  ; All other registers destroyed
  1026                                  
  1027 00000540 E82200                          CALL    FIGFAT
  1028 00000543 C647FF00                        MOV     BYTE [BX-1],0
  1029                                  EACHFAT:
  1030 00000547 52                              PUSH    DX
  1031 00000548 51                              PUSH    CX
  1032 00000549 53                              PUSH    BX
  1033 0000054A 50                              PUSH    AX
  1034 0000054B E85201                          CALL    DWRITE
  1035 0000054E 58                              POP     AX
  1036 0000054F 5B                              POP     BX
  1037 00000550 59                              POP     CX
  1038 00000551 5A                              POP     DX
  1039 00000552 01CA                            ADD     DX,CX
  1040 00000554 FEC8                            DEC     AL
  1041 00000556 75EF                            JNZ     SHORT EACHFAT
  1042                                  OKRET:
  1043 00000558 B000                            MOV     AL,0
  1044 0000055A C3                              RETN
  1045                                  
  1046                                  BADCLOSE:
  1047 0000055B 8B7612                          MOV     SI,[BP+DPBLOCK.FAT]
  1048 0000055E C644FF00                        MOV     BYTE [SI-1],0
  1049 00000562 B0FF                            MOV     AL,-1
  1050 00000564 C3                              RETN
  1051                                  
  1052                                  
  1053                                  FIGFAT:
  1054                                  ; Loads registers with values needed to read or
  1055                                  ; write a FAT.
  1056 00000565 8A4608                          MOV     AL,[BP+DPBLOCK.FATCNT]
  1057 00000568 8B5E12                          MOV     BX,[BP+DPBLOCK.FAT]
  1058 0000056B 8A4E0F                          MOV     CL,[BP+DPBLOCK.FATSIZ]  ;No. of records occupied by FAT
  1059 0000056E B500                            MOV     CH,0
  1060 00000570 8B5606                          MOV     DX,[BP+DPBLOCK.FIRFAT]  ;Record number of start of FATs
  1061 00000573 C3                              RETN
  1062                                  
  1063                                  
  1064                                  DIRCOMP:
  1065                                  ; Prepare registers for directory read or write
  1066 00000574 98                              CBW
  1067 00000575 034610                          ADD     AX,[BP+DPBLOCK.FIRDIR]
  1068 00000578 89C2                            MOV     DX,AX
  1069 0000057A BB[6E18]                        MOV     BX,DIRBUF
  1070 0000057D B90100                          MOV     CX,1
  1071 00000580 C3                              RETN
  1072                                  
  1073                                  
  1074                                  CREATE: ;System call 22
  1075 00000581 E802FE                          CALL    MOVNAME
  1076 00000584 7228                            JC      SHORT ERRET3
  1077 00000586 BF[1B17]                        MOV     DI,NAME1
  1078 00000589 B90B00                          MOV     CX,11
  1079 0000058C B03F                            MOV     AL,"?"
  1080 0000058E F2AE                            REPNE   SCASB
  1081 00000590 741C                            JZ      SHORT ERRET3
  1082 00000592 2EC606[4017]FF                  MOV     BYTE [CS:CREATING],-1
  1083 00000598 52                              PUSH    DX
  1084 00000599 1E                              PUSH    DS
  1085 0000059A E851FC                          CALL    FINDNAME
  1086 0000059D 7312                            JNC     SHORT EXISTENT
  1087 0000059F A1[6C17]                        MOV     AX,[ENTFREE]    ;First free entry found in FINDNAME
  1088 000005A2 83F8FF                          CMP     AX,-1
  1089 000005A5 7405                            JZ      SHORT ERRPOP
  1090 000005A7 E8B1FC                          CALL    GETENT          ;Point at that free entry
  1091 000005AA EB21                            JMP     SHORT FREESPOT
  1092                                  ERRPOP:
  1093 000005AC 1F                              POP     DS
  1094 000005AD 5A                              POP     DX
  1095                                  ERRET3:
  1096 000005AE B0FF                            MOV     AL,-1
  1097 000005B0 C3                              RETN
  1098                                  
  1099                                  EXISTENT:
  1100 000005B1 75F9                            JNZ     SHORT ERRPOP	;Error if attributes don't match
  1101 000005B3 08FF                            OR      BH,BH           ;Check if file is I/O device
  1102 000005B5 783F                            JS      SHORT OPENJMP	;If so, no action
  1103 000005B7 8B0C                            MOV     CX,[SI]         ;Get pointer to clusters
  1104 000005B9 E312                            JCXZ    FREESPOT
  1105 000005BB 3B4E0D                          CMP     CX,[BP+DPBLOCK.MAXCLUS]
  1106 000005BE 770D                            JA      SHORT FREESPOT
  1107 000005C0 53                              PUSH    BX
  1108 000005C1 89CB                            MOV     BX,CX
  1109 000005C3 8B7612                          MOV     SI,[BP+DPBLOCK.FAT]
  1110 000005C6 E87908                          CALL    RELEASE         ;Free any data already allocated
  1111 000005C9 E874FF                          CALL    FATWRT
  1112 000005CC 5B                              POP     BX
  1113                                  FREESPOT:
  1114 000005CD 89DF                            MOV     DI,BX
  1115 000005CF BE[1B17]                        MOV     SI,NAME1
  1116 000005D2 B90500                          MOV     CX,5
  1117 000005D5 A4                              MOVSB
  1118 000005D6 F3A5                            REP     MOVSW
  1119 000005D8 A0[2617]                        MOV     AL,[ATTRIB]
  1120 000005DB AA                              STOSB
  1121 000005DC 31C0                            XOR     AX,AX
  1122 000005DE B105                            MOV     CL,5
  1123 000005E0 F3AB                            REP     STOSW
  1124 000005E2 E82C0E                          CALL    DATE16
  1125 000005E5 92                              XCHG    AX,DX
  1126 000005E6 AB                              STOSW
  1127 000005E7 92                              XCHG    AX,DX
  1128 000005E8 AB                              STOSW
  1129 000005E9 31C0                            XOR     AX,AX
  1130 000005EB 57                              PUSH    DI
  1131 000005EC B106                            MOV     CL,6
  1132                                  SMALLENT:
  1133 000005EE F3AA                            REP     STOSB
  1134 000005F0 53                              PUSH    BX
  1135 000005F1 E8A100                          CALL    DIRWRITE
  1136 000005F4 5B                              POP     BX
  1137 000005F5 5E                              POP     SI
  1138                                  OPENJMP:
  1139 000005F6 F8                              CLC                     ;Clear carry so OPEN won't fail
  1140 000005F7 07                              POP     ES
  1141 000005F8 5F                              POP     DI
  1142 000005F9 E9E8FD                          JMP     DOOPEN
  1143                                  
  1144                                  DIRREAD:
  1145                                  
  1146                                  ; Inputs:
  1147                                  ;       DS = CS
  1148                                  ;       AL = Directory block number
  1149                                  ;       BP = Base of drive parameters
  1150                                  ; Function:
  1151                                  ;       Read the directory block into DIRBUF.
  1152                                  ; Outputs:
  1153                                  ;       AX,BP unchanged
  1154                                  ; All other registers destroyed.
  1155                                  
  1156 000005FC 50                              PUSH    AX
  1157 000005FD E88E00                          CALL    CHKDIRWRITE
  1158 00000600 58                              POP     AX
  1159 00000601 50                              PUSH    AX
  1160 00000602 8A6600                          MOV     AH,[BP+DPBLOCK.DEVNUM]
  1161 00000605 A3[D915]                        MOV     [DIRBUFID],AX
  1162 00000608 E869FF                          CALL    DIRCOMP
  1163 0000060B E80200                          CALL    DREAD
  1164 0000060E 58                              POP     AX
  1165 0000060F C3                      RET8:   RETN
  1166                                  
  1167                                  
  1168                                  DREAD:
  1169                                  
  1170                                  ; Inputs:
  1171                                  ;       BX,DS = Transfer address
  1172                                  ;       CX = Number of sectors
  1173                                  ;       DX = Absolute record number
  1174                                  ;       BP = Base of drive parameters
  1175                                  ; Function:
  1176                                  ;       Calls BIOS to perform disk read. If BIOS reports
  1177                                  ;       errors, will call HARDERR for further action.
  1178                                  ; BP preserved. All other registers destroyed.
  1179                                  
  1180 00000610 E86A00                          CALL    DSKREAD
  1181 00000613 73FA                            JNC     SHORT RET8
  1182 00000615 2EC606[4C17]00                  MOV     BYTE [CS:READOP],0
  1183 0000061B E80500                          CALL    HARDERR
  1184 0000061E 3C01                            CMP     AL,1            ;Check for retry
  1185 00000620 74EE                            JZ      SHORT DREAD
  1186 00000622 C3                              RETN                    ;Ignore otherwise
  1187                                  
  1188                                  
  1189                                  HARDERR:
  1190                                  
  1191                                  ;Hard disk error handler. Entry conditions:
  1192                                  ;       DS:BX = Original disk transfer address
  1193                                  ;       DX = Original logical sector number
  1194                                  ;       CX = Number of sectors to go (first one gave the error)
  1195                                  ;       AX = Hardware error code
  1196                                  ;       DI = Original sector transfer count
  1197                                  ;       BP = Base of drive parameters
  1198                                  ;       [READOP] = 0 for read, 1 for write
  1199                                  
  1200 00000623 97                              XCHG    AX,DI           ;Error code in DI, count in AX
  1201 00000624 29C8                            SUB     AX,CX           ;Number of sectors successfully transferred
  1202 00000626 01C2                            ADD     DX,AX           ;First sector number to retry
  1203 00000628 52                              PUSH    DX
  1204 00000629 F76602                          MUL     WORD [BP+DPBLOCK.SECSIZ] ;Number of bytes transferred
  1205 0000062C 5A                              POP     DX
  1206 0000062D 01C3                            ADD     BX,AX           ;First address for retry
  1207 0000062F B400                            MOV     AH,0            ;Flag disk section in error
  1208 00000631 3B5606                          CMP     DX,[BP+DPBLOCK.FIRFAT]  ;In reserved area?
  1209 00000634 7210                            JB      SHORT ERRINT
  1210 00000636 FEC4                            INC     AH              ;Flag for FAT
  1211 00000638 3B5610                          CMP     DX,[BP+DPBLOCK.FIRDIR]  ;In FAT?
  1212 0000063B 7209                            JB      SHORT ERRINT
  1213 0000063D FEC4                            INC     AH
  1214 0000063F 3B560B                          CMP     DX,[BP+DPBLOCK.FIRREC]  ;In directory?
  1215 00000642 7202                            JB      SHORT ERRINT
  1216 00000644 FEC4                            INC     AH              ;Must be in data area
  1217                                  ERRINT:
  1218 00000646 D0E4                            SHL     AH,1            ;Make room for read/write bit
  1219 00000648 2E0A26[4C17]                    OR      AH,[CS:READOP]
  1220                                  FATAL:
  1221 0000064D 8A4601                          MOV     AL,[BP+DPBLOCK.DRVNUM]  ;Get drive number
  1222                                  FATAL1:
  1223 00000650 55                              PUSH    BP              ;The only thing we preserve
  1224 00000651 2E8926[4617]                    MOV     [CS:CONTSTK],SP
  1225 00000656 FA                              CLI                     ;Prepare to play with stack
  1226 00000657 2E8E16[4417]                    MOV     SS,[CS:SSSAVE]
  1227 0000065C 2E8B26[4217]                    MOV     SP,[CS:SPSAVE]  ;User stack pointer restored
  1228 00000661 CD24                            INT     24H             ;Fatal error interrupt vector
  1229 00000663 2E8926[4217]                    MOV     [CS:SPSAVE],SP
  1230 00000668 2E8C16[4417]                    MOV     [CS:SSSAVE],SS
  1231 0000066D 8CCC                            MOV     SP,CS
  1232 0000066F 8ED4                            MOV     SS,SP
  1233 00000671 2E8B26[4617]                    MOV     SP,[CS:CONTSTK]
  1234 00000676 FB                              STI
  1235 00000677 5D                              POP     BP
  1236 00000678 3C02                            CMP     AL,2
  1237 0000067A 7461                            JZ	SHORT ERROR
  1238 0000067C C3                              RETN
  1239                                  
  1240                                  DSKREAD:
  1241 0000067D 8A4600                          MOV     AL,[BP+DPBLOCK.DEVNUM]
  1242 00000680 55                              PUSH    BP
  1243 00000681 53                              PUSH    BX
  1244 00000682 51                              PUSH    CX
  1245 00000683 52                              PUSH    DX
  1246 00000684 9A15006000                      CALL    BIOSSEG:BIOSREAD
  1247 00000689 5A                              POP     DX
  1248 0000068A 5F                              POP     DI
  1249 0000068B 5B                              POP     BX
  1250 0000068C 5D                              POP     BP
  1251 0000068D C3                      RET9:   RETN
  1252                                  
  1253                                  
  1254                                  CHKDIRWRITE:
  1255 0000068E F606[C315]FF                    TEST    BYTE [DIRTYDIR],-1
  1256 00000693 74F8                            JZ      SHORT RET9
  1257                                  
  1258                                  DIRWRITE:
  1259                                  
  1260                                  ; Inputs:
  1261                                  ;       DS = CS
  1262                                  ;       AL = Directory block number
  1263                                  ;       BP = Base of drive parameters
  1264                                  ; Function:
  1265                                  ;       Write the directory block into DIRBUF.
  1266                                  ; Outputs:
  1267                                  ;       BP unchanged
  1268                                  ; All other registers destroyed.
  1269                                  
  1270 00000695 C606[C315]00                    MOV     BYTE [DIRTYDIR],0
  1271 0000069A A0[D915]                        MOV     AL,BYTE [DIRBUFID]
  1272 0000069D E8D4FE                          CALL    DIRCOMP
  1273                                  
  1274                                  DWRITE:
  1275                                  
  1276                                  ; Inputs:
  1277                                  ;       BX,DS = Transfer address
  1278                                  ;       CX = Number of sectors
  1279                                  ;       DX = Absolute record number
  1280                                  ;       BP = Base of drive parameters
  1281                                  ; Function:
  1282                                  ;       Calls BIOS to perform disk write. If BIOS reports
  1283                                  ;       errors, will call HARDERR for further action.
  1284                                  ; BP preserved. All other registers destroyed.
  1285                                  
  1286 000006A0 8A4600                          MOV     AL,[BP+DPBLOCK.DEVNUM]
  1287 000006A3 2E8A26[C615]                    MOV     AH,[CS:VERFLG]
  1288 000006A8 55                              PUSH    BP
  1289 000006A9 53                              PUSH    BX
  1290 000006AA 51                              PUSH    CX
  1291 000006AB 52                              PUSH    DX
  1292 000006AC 9A18006000                      CALL    BIOSSEG:BIOSWRITE
  1293 000006B1 5A                              POP     DX
  1294 000006B2 5F                              POP     DI
  1295 000006B3 5B                              POP     BX
  1296 000006B4 5D                              POP     BP
  1297 000006B5 73D6                            JNC     SHORT RET9
  1298 000006B7 2EC606[4C17]01                  MOV     BYTE [CS:READOP],1
  1299 000006BD E863FF                          CALL    HARDERR
  1300 000006C0 3C01                            CMP     AL,1            ;Check for retry
  1301 000006C2 74DC                            JZ      SHORT DWRITE
  1302 000006C4 C3                              RETN
  1303                                  
  1304                                  ABORT:
  1305 000006C5 2EC536[4217]                    LDS     SI,[CS:SPSAVE]
  1306 000006CA 8E5C14                          MOV     DS,[SI+STKPTRS.CSSAVE]
  1307 000006CD 31C0                            XOR     AX,AX
  1308 000006CF 8EC0                            MOV     ES,AX
  1309 000006D1 BE0A00                          MOV     SI,SAVEXIT
  1310 000006D4 BF8800                          MOV     DI,EXIT
  1311 000006D7 A5                              MOVSW
  1312 000006D8 A5                              MOVSW
  1313 000006D9 A5                              MOVSW
  1314 000006DA A5                              MOVSW
  1315 000006DB A5                              MOVSW
  1316 000006DC A5                              MOVSW
  1317                                  ERROR:
  1318 000006DD 8CC8                            MOV     AX,CS
  1319 000006DF 8ED8                            MOV     DS,AX
  1320 000006E1 8EC0                            MOV     ES,AX
  1321 000006E3 E89808                          CALL    WRTFATS
  1322 000006E6 31C0                            XOR     AX,AX
  1323 000006E8 FA                              CLI
  1324 000006E9 8E16[4417]                      MOV     SS,[SSSAVE]
  1325 000006ED 8B26[4217]                      MOV     SP,[SPSAVE]
  1326 000006F1 8ED8                            MOV     DS,AX
  1327 000006F3 BE8800                          MOV     SI,EXIT
  1328 000006F6 BF[1517]                        MOV     DI,EXITHOLD
  1329 000006F9 A5                              MOVSW
  1330 000006FA A5                              MOVSW
  1331 000006FB 58                              POP     AX
  1332 000006FC 5B                              POP     BX
  1333 000006FD 59                              POP     CX
  1334 000006FE 5A                              POP     DX
  1335 000006FF 5E                              POP     SI
  1336 00000700 5F                              POP     DI
  1337 00000701 5D                              POP     BP
  1338 00000702 1F                              POP     DS
  1339 00000703 07                              POP     ES
  1340 00000704 FB                              STI             ;Stack OK now
  1341 00000705 2EFF2E[1517]                    JMP     FAR [CS:EXITHOLD]
  1342                                  
  1343                                  
  1344                                  SEQRD:  ;System call 20
  1345 0000070A E8A006                          CALL    GETREC
  1346 0000070D E82203                          CALL    LOAD
  1347 00000710 EB06                            JMP     SHORT FINSEQ
  1348                                  
  1349                                  SEQWRT: ;System call 21
  1350 00000712 E89806                          CALL    GETREC
  1351 00000715 E8A404                          CALL    STORE
  1352                                  FINSEQ:
  1353 00000718 E345                            JCXZ    SETNREX
  1354 0000071A 83C001                          ADD     AX,1
  1355 0000071D 83D200                          ADC     DX,0
  1356 00000720 EB3D                            JMP     SHORT SETNREX
  1357                                  
  1358                                  RNDRD:  ;System call 33
  1359 00000722 E85600                          CALL    GETRRPOS1
  1360 00000725 E80A03                          CALL    LOAD
  1361 00000728 EB25                            JMP     SHORT FINRND
  1362                                  
  1363                                  RNDWRT: ;System call 34
  1364 0000072A E84E00                          CALL    GETRRPOS1
  1365 0000072D E88C04                          CALL    STORE
  1366 00000730 EB1D                            JMP     SHORT FINRND
  1367                                  
  1368                                  BLKRD:  ;System call 39
  1369 00000732 E84900                          CALL    GETRRPOS
  1370 00000735 E8FA02                          CALL    LOAD
  1371 00000738 EB06                            JMP     SHORT FINBLK
  1372                                  
  1373                                  BLKWRT: ;System call 40
  1374 0000073A E84100                          CALL    GETRRPOS
  1375 0000073D E87C04                          CALL    STORE
  1376                                  FINBLK:
  1377 00000740 C536[4217]                      LDS     SI,[SPSAVE]
  1378 00000744 894C04                          MOV     [SI+STKPTRS.CXSAVE],CX
  1379 00000747 E306                            JCXZ    FINRND
  1380 00000749 83C001                          ADD     AX,1
  1381 0000074C 83D200                          ADC     DX,0
  1382                                  FINRND:
  1383 0000074F 26894521                        MOV     [ES:DI+FCBLOCK.RR],AX
  1384 00000753 26885523                        MOV     [ES:DI+FCBLOCK.RR+2],DL
  1385 00000757 08F6                            OR      DH,DH
  1386 00000759 7404                            JZ      SHORT SETNREX
  1387 0000075B 26887524                        MOV     [ES:DI+FCBLOCK.RR+3],DH 
  1388                                  				;Save 4 byte of RECPOS only if significant
  1389                                  SETNREX:
  1390 0000075F 89C1                            MOV     CX,AX
  1391 00000761 247F                            AND     AL,7FH
  1392 00000763 26884520                        MOV     [ES:DI+FCBLOCK.NR],AL
  1393 00000767 80E180                          AND     CL,80H
  1394 0000076A D1E1                            SHL     CX,1
  1395 0000076C D1D2                            RCL     DX,1
  1396 0000076E 88E8                            MOV     AL,CH
  1397 00000770 88D4                            MOV     AH,DL
  1398 00000772 2689450C                        MOV     [ES:DI+FCBLOCK.EXTENT],AX
  1399 00000776 2EA0[4917]                      MOV     AL,[CS:DSKERR]
  1400 0000077A C3                              RETN
  1401                                  
  1402                                  GETRRPOS1:
  1403 0000077B B90100                          MOV     CX,1
  1404                                  GETRRPOS:
  1405 0000077E 89D7                            MOV     DI,DX
  1406 00000780 803DFF                          CMP     BYTE [DI],-1
  1407 00000783 7503                            JNZ     SHORT NORMFCB1
  1408 00000785 83C707                          ADD     DI,7
  1409                                  NORMFCB1:
  1410 00000788 8B4521                          MOV     AX,[DI+FCBLOCK.RR]
  1411 0000078B 8B5523                          MOV     DX,[DI+FCBLOCK.RR+2]
  1412 0000078E C3                              RETN
  1413                                  
  1414                                  NOFILERR:
  1415 0000078F 31C9                            XOR     CX,CX
  1416 00000791 C606[4917]04                    MOV     BYTE [DSKERR],4
  1417 00000796 5B                              POP     BX
  1418 00000797 C3                              RETN
  1419                                  
  1420                                  SETUP:
  1421                                  
  1422                                  ; Inputs:
  1423                                  ;       DS:DI point to FCB
  1424                                  ;       DX:AX = Record position in file of disk transfer
  1425                                  ;       CX = Record count
  1426                                  ; Outputs:
  1427                                  ;       DS = CS
  1428                                  ;       ES:DI point to FCB
  1429                                  ;       BL = DEVID from FCB
  1430                                  ;       CX = No. of bytes to transfer
  1431                                  ;       BP = Base of drive parameters
  1432                                  ;       SI = FAT pointer
  1433                                  ;       [RECCNT] = Record count
  1434                                  ;       [RECPOS] = Record position in file
  1435                                  ;       [FCB] = DI
  1436                                  ;       [NEXTADD] = Displacement of disk transfer within segment
  1437                                  ;       [SECPOS] = Position of first sector
  1438                                  ;       [BYTPOS] = Byte position in file
  1439                                  ;       [BYTSECPOS] = Byte position in first sector
  1440                                  ;       [CLUSNUM] = First cluster
  1441                                  ;       [SECCLUSPOS] = Sector within first cluster
  1442                                  ;       [DSKERR] = 0 (no errors yet)
  1443                                  ;       [TRANS] = 0 (No transfers yet)
  1444                                  ;       [THISDRV] = Physical drive unit number
  1445                                  ; If SETUP detects no records will be transfered, it returns 1 level up 
  1446                                  ; with CX = 0.
  1447                                  
  1448 00000798 50                              PUSH    AX
  1449 00000799 8A05                            MOV     AL,[DI]
  1450 0000079B FEC8                            DEC     AL
  1451 0000079D 2EA2[4D17]                      MOV     [CS:THISDRV],AL
  1452 000007A1 8A4518                          MOV     AL,[DI+FCBLOCK.DEVID]
  1453 000007A4 8B750E                          MOV     SI,[DI+FCBLOCK.RECSIZ]
  1454 000007A7 09F6                            OR      SI,SI
  1455 000007A9 7506                            JNZ     SHORT HAVRECSIZ
  1456 000007AB BE8000                          MOV     SI,128
  1457 000007AE 89750E                          MOV     [DI+FCBLOCK.RECSIZ],SI
  1458                                  HAVRECSIZ:
  1459 000007B1 1E                              PUSH    DS
  1460 000007B2 07                              POP     ES              ;Set ES to DS
  1461 000007B3 0E                              PUSH    CS
  1462 000007B4 1F                              POP     DS              ;Set DS to CS
  1463 000007B5 08C0                            OR      AL,AL           ;Is it a device?
  1464 000007B7 7902                            JNS     SHORT NOTDEVICE
  1465 000007B9 B000                            MOV     AL,0            ;Fake in drive 0 so we can get SP
  1466                                  NOTDEVICE:
  1467 000007BB E8E8FC                          CALL    GETBP
  1468 000007BE 58                              POP     AX
  1469 000007BF 72CE                            JC      SHORT NOFILERR
  1470 000007C1 83FE40                          CMP     SI,64           ;Check if highest byte of RECPOS is significant
  1471 000007C4 7202                            JB      SHORT SMALREC
  1472 000007C6 B600                            MOV     DH,0            ;Ignore MSB if record >= 64 bytes
  1473                                  SMALREC:
  1474 000007C8 890E[5617]                      MOV     [RECCNT],CX
  1475 000007CC A3[5217]                        MOV     [RECPOS],AX
  1476 000007CF 8916[5417]                      MOV     [RECPOS+2],DX
  1477 000007D3 893E[4E17]                      MOV     [FCB],DI
  1478 000007D7 8B1E[C915]                      MOV     BX,[DMAADD]
  1479 000007DB 891E[5017]                      MOV     [NEXTADD],BX
  1480 000007DF C606[4917]00                    MOV     BYTE [DSKERR],0
  1481 000007E4 C606[4A17]00                    MOV     BYTE [TRANS],0
  1482 000007E9 89D3                            MOV     BX,DX
  1483 000007EB F7E6                            MUL     SI
  1484 000007ED A3[6217]                        MOV     [BYTPOS],AX
  1485 000007F0 52                              PUSH    DX
  1486 000007F1 89D8                            MOV     AX,BX
  1487 000007F3 F7E6                            MUL     SI
  1488 000007F5 5B                              POP     BX
  1489 000007F6 01D8                            ADD     AX,BX
  1490 000007F8 83D200                          ADC     DX,0            ;Ripple carry
  1491 000007FB 755A                            JNZ     SHORT EOFERR
  1492 000007FD A3[6417]                        MOV     [BYTPOS+2],AX
  1493 00000800 89C2                            MOV     DX,AX
  1494 00000802 A1[6217]                        MOV     AX,[BYTPOS]
  1495 00000805 8B5E02                          MOV     BX,[BP+DPBLOCK.SECSIZ]
  1496 00000808 39DA                            CMP     DX,BX           ;See if divide will overflow
  1497 0000080A 734B                            JNC     SHORT EOFERR
  1498 0000080C F7F3                            DIV     BX
  1499 0000080E A3[5C17]                        MOV     [SECPOS],AX
  1500 00000811 8916[6017]                      MOV     [BYTSECPOS],DX
  1501 00000815 89C2                            MOV     DX,AX
  1502 00000817 224604                          AND     AL,[BP+DPBLOCK.CLUSMSK]
  1503 0000081A A2[4817]                        MOV     [SECCLUSPOS],AL
  1504 0000081D 89C8                            MOV     AX,CX           ;Record count
  1505 0000081F 8A4E05                          MOV     CL,[BP+DPBLOCK.CLUSSHFT]
  1506 00000822 D3EA                            SHR     DX,CL
  1507 00000824 8916[5A17]                      MOV     [CLUSNUM],DX
  1508 00000828 F7E6                            MUL     SI              ;Multiply by bytes per record
  1509 0000082A 89C1                            MOV     CX,AX
  1510 0000082C 0306[C915]                      ADD     AX,[DMAADD]     ;See if it will fit in one segment
  1511 00000830 83D200                          ADC     DX,0
  1512 00000833 741A                            JZ      SHORT OK	;Must be less than 64K
  1513 00000835 A1[C915]                        MOV     AX,[DMAADD]
  1514 00000838 F7D8                            NEG     AX              ;Amount of room left in segment
  1515 0000083A 7501                            JNZ     SHORT PARTSEG	;All 64K available?
  1516 0000083C 48                              DEC     AX              ;If so, reduce by one
  1517                                  PARTSEG:
  1518 0000083D 31D2                            XOR     DX,DX
  1519 0000083F F7F6                            DIV     SI              ;How many records will fit?
  1520 00000841 A3[5617]                        MOV     [RECCNT],AX
  1521 00000844 F7E6                            MUL     SI              ;Translate that back into bytes
  1522 00000846 C606[4917]02                    MOV     BYTE [DSKERR],2	;Flag that trimming took place
  1523 0000084B 89C1                            MOV     CX,AX
  1524 0000084D E30F                            JCXZ    NOROOM
  1525                                  OK:
  1526 0000084F 268A5D18                        MOV     BL,[ES:DI+FCBLOCK.DEVID]
  1527 00000853 8B7612                          MOV     SI,[BP+DPBLOCK.FAT]
  1528 00000856 C3                              RETN
  1529                                  
  1530                                  EOFERR:
  1531 00000857 C606[4917]01                    MOV     BYTE [DSKERR],1
  1532 0000085C 31C9                            XOR     CX,CX
  1533                                  NOROOM:
  1534 0000085E 5B                              POP     BX              ;Kill return address
  1535 0000085F C3                              RETN
  1536                                  
  1537                                  BREAKDOWN:
  1538                                  
  1539                                  ;Inputs:
  1540                                  ;       DS = CS
  1541                                  ;       CX = Length of disk transfer in bytes
  1542                                  ;       BP = Base of drive parameters
  1543                                  ;       [BYTSECPOS] = Byte position witin first sector
  1544                                  ;Outputs:
  1545                                  ;       [BYTCNT1] = Bytes to transfer in first sector
  1546                                  ;       [SECCNT] = No. of whole sectors to transfer
  1547                                  ;       [BYTCNT2] = Bytes to transfer in last sector
  1548                                  ;AX, BX, DX destroyed. No other registers affected.
  1549                                  
  1550 00000860 A1[6017]                        MOV     AX,[BYTSECPOS]
  1551 00000863 89CB                            MOV     BX,CX
  1552 00000865 09C0                            OR      AX,AX
  1553 00000867 740D                            JZ      SHORT SAVFIR	;Partial first sector?
  1554 00000869 2B4602                          SUB     AX,[BP+DPBLOCK.SECSIZ]
  1555 0000086C F7D8                            NEG     AX              ;Max number of bytes left in first sector
  1556 0000086E 29C3                            SUB     BX,AX           ;Subtract from total length
  1557 00000870 7304                            JAE     SHORT SAVFIR
  1558 00000872 01D8                            ADD     AX,BX           ;Don't use all of the rest of the sector
  1559 00000874 31DB                            XOR     BX,BX           ;And no bytes are left
  1560                                  SAVFIR:
  1561 00000876 A3[6617]                        MOV     [BYTCNT1],AX
  1562 00000879 89D8                            MOV     AX,BX
  1563 0000087B 31D2                            XOR     DX,DX
  1564 0000087D F77602                          DIV     WORD [BP+DPBLOCK.SECSIZ]  ;How many whole sectors?
  1565 00000880 A3[6A17]                        MOV     [SECCNT],AX
  1566 00000883 8916[6817]                      MOV     [BYTCNT2],DX    ;Bytes remaining for last sector
  1567 00000887 C3                      RET10:  RETN
  1568                                  
  1569                                  
  1570                                  FNDCLUS:
  1571                                  
  1572                                  ; Inputs:
  1573                                  ;       DS = CS
  1574                                  ;       CX = No. of clusters to skip
  1575                                  ;       BP = Base of drive parameters
  1576                                  ;       SI = FAT pointer
  1577                                  ;       ES:DI point to FCB
  1578                                  ; Outputs:
  1579                                  ;       BX = Last cluster skipped to
  1580                                  ;       CX = No. of clusters remaining (0 unless EOF)
  1581                                  ;       DX = Position of last cluster
  1582                                  ; DI destroyed. No other registers affected.
  1583                                  
  1584 00000888 268B5D1B                        MOV     BX,[ES:DI+FCBLOCK.LSTCLUS]
  1585 0000088C 268B551D                        MOV     DX,[ES:DI+FCBLOCK.CLUSPOS]
  1586 00000890 09DB                            OR      BX,BX
  1587 00000892 741D                            JZ      SHORT NOCLUS
  1588 00000894 29D1                            SUB     CX,DX
  1589 00000896 7308                            JNB     SHORT FINDIT
  1590 00000898 01D1                            ADD     CX,DX
  1591 0000089A 31D2                            XOR     DX,DX
  1592 0000089C 268B5D19                        MOV     BX,[ES:DI+FCBLOCK.FIRCLUS]
  1593                                  FINDIT:
  1594 000008A0 E3E5                            JCXZ    RET10
  1595                                  SKPCLP:
  1596 000008A2 E8C0F8                          CALL    UNPACK
  1597 000008A5 81FFF80F                        CMP     DI,0FF8H
  1598 000008A9 73DC                            JAE     SHORT RET10
  1599 000008AB 87DF                            XCHG    BX,DI
  1600 000008AD 42                              INC     DX
  1601 000008AE E2F2                            LOOP    SKPCLP
  1602 000008B0 C3                              RETN
  1603                                  NOCLUS:
  1604 000008B1 41                              INC     CX
  1605 000008B2 4A                              DEC     DX
  1606 000008B3 C3                              RETN
  1607                                  
  1608                                  
  1609                                  BUFSEC:
  1610                                  ; Inputs:
  1611                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
  1612                                  ;       BP = Base of drive parameters
  1613                                  ;       [CLUSNUM] = Physical cluster number
  1614                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
  1615                                  ;       [BYTCNT1] = Size of transfer
  1616                                  ; Function:
  1617                                  ;       Insure specified sector is in buffer, flushing buffer before
  1618                                  ;       read if necessary.
  1619                                  ; Outputs:
  1620                                  ;       SI = Pointer to buffer
  1621                                  ;       DI = Pointer to transfer address
  1622                                  ;       CX = Number of bytes
  1623                                  ;       [NEXTADD] updated
  1624                                  ;       [TRANS] set to indicate a transfer will occur
  1625                                  
  1626 000008B4 8B16[5A17]                      MOV     DX,[CLUSNUM]
  1627 000008B8 8A1E[4817]                      MOV     BL,[SECCLUSPOS]
  1628 000008BC E8DF04                          CALL    FIGREC
  1629 000008BF A2[4B17]                        MOV     [PREREAD],AL
  1630 000008C2 3B16[D315]                      CMP     DX,[BUFSECNO]
  1631 000008C6 7509                            JNZ     SHORT GETSEC
  1632 000008C8 A0[D515]                        MOV     AL,[BUFDRVNO]
  1633 000008CB 3A06[4D17]                      CMP     AL,[THISDRV]
  1634 000008CF 744A                            JZ      SHORT FINBUF	;Already have it?
  1635                                  GETSEC:
  1636 000008D1 30C0                            XOR     AL,AL
  1637 000008D3 8606[D615]                      XCHG    [DIRTYBUF],AL   ;Read dirty flag and reset it
  1638 000008D7 08C0                            OR      AL,AL
  1639 000008D9 7416                            JZ      SHORT RDSEC
  1640 000008DB 52                              PUSH    DX
  1641 000008DC 55                              PUSH    BP
  1642 000008DD 8B2E[D715]                      MOV     BP,[BUFDRVBP]
  1643 000008E1 8B1E[D115]                      MOV     BX,[BUFFER]
  1644 000008E5 B90100                          MOV     CX,1
  1645 000008E8 8B16[D315]                      MOV     DX,[BUFSECNO]
  1646 000008EC E8B1FD                          CALL    DWRITE
  1647 000008EF 5D                              POP     BP
  1648 000008F0 5A                              POP     DX
  1649                                  RDSEC:
  1650 000008F1 F606[4B17]FF                    TEST    BYTE [PREREAD],-1
  1651 000008F6 7515                            JNZ     SHORT SETBUF
  1652 000008F8 31C0                            XOR     AX,AX
  1653 000008FA A3[D315]                        MOV     [BUFSECNO],AX           ;Set buffer valid in case of disk error
  1654 000008FD 48                              DEC     AX
  1655 000008FE A2[D515]                        MOV     [BUFDRVNO],AL
  1656 00000901 8B1E[D115]                      MOV     BX,[BUFFER]
  1657 00000905 B90100                          MOV     CX,1
  1658 00000908 52                              PUSH    DX
  1659 00000909 E804FD                          CALL    DREAD
  1660 0000090C 5A                              POP     DX
  1661                                  SETBUF:
  1662 0000090D 8916[D315]                      MOV     [BUFSECNO],DX
  1663 00000911 A0[4D17]                        MOV     AL,[THISDRV]
  1664 00000914 A2[D515]                        MOV     [BUFDRVNO],AL
  1665 00000917 892E[D715]                      MOV     [BUFDRVBP],BP
  1666                                  FINBUF:
  1667 0000091B C606[4A17]01                    MOV     BYTE [TRANS],1		;A transfer is taking place
  1668 00000920 8B3E[5017]                      MOV     DI,[NEXTADD]
  1669 00000924 89FE                            MOV     SI,DI
  1670 00000926 8B0E[6617]                      MOV     CX,[BYTCNT1]
  1671 0000092A 01CE                            ADD     SI,CX
  1672 0000092C 8936[5017]                      MOV     [NEXTADD],SI
  1673 00000930 8B36[D115]                      MOV     SI,[BUFFER]
  1674 00000934 0336[6017]                      ADD     SI,[BYTSECPOS]
  1675 00000938 C3                              RETN
  1676                                  
  1677                                  BUFRD:
  1678 00000939 30C0                            XOR     AL,AL           ;Pre-read necessary
  1679 0000093B E876FF                          CALL    BUFSEC
  1680 0000093E 06                              PUSH    ES
  1681 0000093F 8E06[CB15]                      MOV     ES,[DMAADD+2]
  1682 00000943 D1E9                            SHR     CX,1
  1683 00000945 7301                            JNC     SHORT EVENRD
  1684 00000947 A4                              MOVSB
  1685                                  EVENRD:
  1686 00000948 F3A5                            REP     MOVSW
  1687 0000094A 07                              POP     ES
  1688 0000094B C3                              RETN
  1689                                  
  1690                                  BUFWRT:
  1691 0000094C A1[5C17]                        MOV     AX,[SECPOS]
  1692 0000094F 40                              INC     AX              ;Set for next sector
  1693 00000950 A3[5C17]                        MOV     [SECPOS],AX
  1694 00000953 3B06[5E17]                      CMP     AX,[VALSEC]     ;Has sector been written before?
  1695 00000957 B001                            MOV     AL,1
  1696 00000959 7702                            JA      SHORT NOREAD	;Skip preread if SECPOS>VALSEC
  1697 0000095B B000                            MOV     AL,0
  1698                                  NOREAD:
  1699 0000095D E854FF                          CALL    BUFSEC
  1700 00000960 87FE                            XCHG    DI,SI
  1701 00000962 1E                              PUSH    DS
  1702 00000963 06                              PUSH    ES
  1703 00000964 0E                              PUSH    CS
  1704 00000965 07                              POP     ES
  1705 00000966 8E1E[CB15]                      MOV     DS,[DMAADD+2]
  1706 0000096A D1E9                            SHR     CX,1
  1707 0000096C 7301                            JNC     SHORT EVENWRT
  1708 0000096E A4                              MOVSB
  1709                                  EVENWRT:
  1710 0000096F F3A5                            REP     MOVSW
  1711 00000971 07                              POP     ES
  1712 00000972 1F                              POP     DS
  1713 00000973 C606[D615]01                    MOV     BYTE [DIRTYBUF],1
  1714 00000978 C3                              RETN
  1715                                  
  1716                                  NEXTSEC:
  1717 00000979 F606[4A17]FF                    TEST    BYTE [TRANS],-1
  1718 0000097E 7427                            JZ      SHORT CLRET
  1719 00000980 A0[4817]                        MOV     AL,[SECCLUSPOS]
  1720 00000983 FEC0                            INC     AL
  1721 00000985 3A4604                          CMP     AL,[BP+DPBLOCK.CLUSMSK]
  1722 00000988 761A                            JBE     SHORT SAVPOS
  1723 0000098A 8B1E[5A17]                      MOV     BX,[CLUSNUM]
  1724 0000098E 81FBF80F                        CMP     BX,0FF8H
  1725 00000992 7315                            JAE     SHORT NONEXT
  1726 00000994 8B7612                          MOV     SI,[BP+DPBLOCK.FAT]
  1727 00000997 E8CBF7                          CALL    UNPACK
  1728 0000099A 893E[5A17]                      MOV     [CLUSNUM],DI
  1729 0000099E FF06[5817]                      INC     WORD [LASTPOS]
  1730 000009A2 B000                            MOV     AL,0
  1731                                  SAVPOS:
  1732 000009A4 A2[4817]                        MOV     [SECCLUSPOS],AL
  1733                                  CLRET:
  1734 000009A7 F8                              CLC
  1735 000009A8 C3                              RETN
  1736                                  NONEXT:
  1737 000009A9 F9                              STC
  1738 000009AA C3                              RETN
  1739                                  
  1740                                  TRANBUF:
  1741 000009AB AC                              LODSB
  1742 000009AC AA                              STOSB
  1743 000009AD 3C0D                            CMP     AL,13           ;Check for carriage return
  1744 000009AF 7503                            JNZ     SHORT NORMCH
  1745 000009B1 C6040A                          MOV     BYTE [SI],10
  1746                                  NORMCH:
  1747 000009B4 3C0A                            CMP     AL,10
  1748 000009B6 E0F3                            LOOPNZ  TRANBUF
  1749 000009B8 750B                            JNZ     SHORT ENDRDCON
  1750 000009BA E8F807                          CALL    OUT             ;Transmit linefeed
  1751 000009BD 31F6                            XOR     SI,SI
  1752 000009BF 09C9                            OR      CX,CX
  1753 000009C1 7547                            JNZ     SHORT GETBUF
  1754 000009C3 0C01                            OR      AL,1            ;Clear zero flag--not end of file
  1755                                  ENDRDCON:
  1756 000009C5 8936[C715]                      MOV     [CONTPOS],SI
  1757                                  ENDRDDEV:
  1758 000009C9 893E[5017]                      MOV     [NEXTADD],DI
  1759 000009CD 07                              POP     ES
  1760 000009CE 7509                            JNZ     SHORT SETFCBJ         ;Zero set if Ctrl-Z found in input
  1761 000009D0 8B3E[4E17]                      MOV     DI,[FCB]
  1762 000009D4 26806518BF                      AND     BYTE [ES:DI+FCBLOCK.DEVID],0FFH-40H 
  1763                                  					;Mark as no more data available
  1764                                  SETFCBJ:
  1765 000009D9 E90501                          JMP     SETFCB
  1766                                  
  1767                                  READDEV:
  1768 000009DC 06                              PUSH    ES
  1769 000009DD C43E[C915]                      LES     DI,[DMAADD]
  1770 000009E1 FEC3                            INC     BL
  1771 000009E3 740E                            JZ      SHORT READCON
  1772 000009E5 FEC3                            INC     BL
  1773 000009E7 75E0                            JNZ     SHORT ENDRDDEV
  1774                                  READAUX:
  1775 000009E9 E863F7                          CALL    AUXIN
  1776 000009EC AA                              STOSB
  1777 000009ED 3C1A                            CMP     AL,1AH
  1778 000009EF E0F8                            LOOPNZ  READAUX
  1779 000009F1 EBD6                            JMP     SHORT ENDRDDEV
  1780                                  
  1781                                  READCON:
  1782 000009F3 0E                              PUSH    CS
  1783 000009F4 1F                              POP     DS
  1784 000009F5 8B36[C715]                      MOV     SI,[CONTPOS]
  1785 000009F9 09F6                            OR      SI,SI
  1786 000009FB 75AE                            JNZ     SHORT TRANBUF
  1787 000009FD 803E[9016]80                    CMP     BYTE [CONBUF],128
  1788 00000A02 7406                            JZ      SHORT GETBUF
  1789 00000A04 C706[9016]80FF                  MOV     WORD [CONBUF],0FF80H	;Set up 128-byte buffer with no template
  1790                                  GETBUF:
  1791 00000A0A 51                              PUSH    CX
  1792 00000A0B 06                              PUSH    ES
  1793 00000A0C 57                              PUSH    DI
  1794 00000A0D BA[9016]                        MOV     DX,CONBUF
  1795 00000A10 E8C205                          CALL    BUFIN           ;Get input buffer
  1796 00000A13 5F                              POP     DI
  1797 00000A14 07                              POP     ES
  1798 00000A15 59                              POP     CX
  1799 00000A16 BE[9216]                        MOV     SI,2 + CONBUF
  1800 00000A19 803C1A                          CMP     BYTE [SI],1AH	;Check for Ctrl-Z in first character
  1801 00000A1C 758D                            JNZ     SHORT TRANBUF
  1802 00000A1E B01A                            MOV     AL,1AH
  1803 00000A20 AA                              STOSB
  1804 00000A21 B00A                            MOV     AL,10
  1805 00000A23 E88F07                          CALL    OUT             ;Send linefeed
  1806 00000A26 31F6                            XOR     SI,SI
  1807 00000A28 EB9B                            JMP     SHORT ENDRDCON
  1808                                  
  1809                                  RDERR:
  1810 00000A2A 31C9                            XOR     CX,CX
  1811 00000A2C E97701                          JMP     WRTERR
  1812                                  
  1813 00000A2F E90F01                  RDLASTJ:JMP     RDLAST
  1814                                  
  1815                                  LOAD:
  1816                                  
  1817                                  ; Inputs:
  1818                                  ;       DS:DI point to FCB
  1819                                  ;       DX:AX = Position in file to read
  1820                                  ;       CX = No. of records to read
  1821                                  ; Outputs:
  1822                                  ;       DX:AX = Position of last record read
  1823                                  ;       CX = No. of bytes read
  1824                                  ;       ES:DI point to FCB
  1825                                  ;       LSTCLUS, CLUSPOS fields in FCB set
  1826                                  
  1827 00000A32 E863FD                          CALL    SETUP
  1828 00000A35 08DB                            OR      BL,BL           ;Check for named device I/O
  1829 00000A37 78A3                            JS      SHORT READDEV
  1830 00000A39 268B4510                        MOV     AX,[ES:DI+FCBLOCK.FILSIZ]
  1831 00000A3D 268B5D12                        MOV     BX,[ES:DI+FCBLOCK.FILSIZ+2]
  1832 00000A41 2B06[6217]                      SUB     AX,[BYTPOS]
  1833 00000A45 1B1E[6417]                      SBB     BX,[BYTPOS+2]
  1834 00000A49 72DF                            JB      SHORT RDERR
  1835 00000A4B 750A                            JNZ     SHORT ENUF
  1836 00000A4D 09C0                            OR      AX,AX
  1837 00000A4F 74D9                            JZ      SHORT RDERR
  1838 00000A51 39C8                            CMP     AX,CX
  1839 00000A53 7302                            JAE     SHORT ENUF
  1840 00000A55 89C1                            MOV     CX,AX
  1841                                  ENUF:
  1842 00000A57 E806FE                          CALL    BREAKDOWN
  1843 00000A5A 8B0E[5A17]                      MOV     CX,[CLUSNUM]
  1844 00000A5E E827FE                          CALL    FNDCLUS
  1845 00000A61 09C9                            OR      CX,CX
  1846 00000A63 75C5                            JNZ     SHORT RDERR
  1847 00000A65 8916[5817]                      MOV     [LASTPOS],DX
  1848 00000A69 891E[5A17]                      MOV     [CLUSNUM],BX
  1849 00000A6D 833E[6617]00                    CMP     WORD [BYTCNT1],0
  1850 00000A72 7403                            JZ      SHORT RDMID
  1851 00000A74 E8C2FE                          CALL    BUFRD
  1852                                  RDMID:
  1853 00000A77 833E[6A17]00                    CMP     WORD [SECCNT],0
  1854 00000A7C 74B1                            JZ      SHORT RDLASTJ
  1855 00000A7E E8F8FE                          CALL    NEXTSEC
  1856 00000A81 725E                            JC      SHORT SETFCB
  1857 00000A83 C606[4A17]01                    MOV     BYTE [TRANS],1      ;A transfer is taking place
  1858                                  ONSEC:
  1859 00000A88 8A16[4817]                      MOV     DL,[SECCLUSPOS]
  1860 00000A8C 8B0E[6A17]                      MOV     CX,[SECCNT]
  1861 00000A90 8B1E[5A17]                      MOV     BX,[CLUSNUM]
  1862                                  RDLP:
  1863 00000A94 E89102                          CALL    OPTIMIZE
  1864 00000A97 57                              PUSH    DI
  1865 00000A98 50                              PUSH    AX
  1866 00000A99 1E                              PUSH    DS
  1867 00000A9A 8E1E[CB15]                      MOV     DS,[DMAADD+2]
  1868 00000A9E 52                              PUSH    DX
  1869 00000A9F 53                              PUSH    BX
  1870 00000AA0 9C                              PUSHF                   ;Save carry flag
  1871 00000AA1 E86CFB                          CALL	DREAD
  1872 00000AA4 9D                              POPF                    ;Restore carry flag
  1873 00000AA5 5F                              POP     DI              ;Initial transfer address
  1874 00000AA6 58                              POP     AX              ;First sector transfered
  1875 00000AA7 1F                              POP     DS
  1876 00000AA8 7225                            JC      SHORT NOTBUFFED	;Was one of those sectors in the buffer?
  1877 00000AAA 803E[D615]00                    CMP     BYTE [DIRTYBUF],0 ;Is buffer dirty?
  1878 00000AAF 741E                            JZ      SHORT NOTBUFFED	;If not no problem
  1879                                  ;We have transfered in a sector from disk when a dirty copy of it is in the buffer.
  1880                                  ;We must transfer the sector from the buffer to correct memory address
  1881 00000AB1 2B06[D315]                      SUB     AX,[BUFSECNO]   ;How many sectors into the transfer?
  1882 00000AB5 F7D8                            NEG     AX
  1883 00000AB7 8B4E02                          MOV     CX,[BP+DPBLOCK.SECSIZ]
  1884 00000ABA F7E1                            MUL     CX              ;How many bytes into the transfer?
  1885 00000ABC 01C7                            ADD     DI,AX
  1886 00000ABE 8B36[D115]                      MOV     SI,[BUFFER]
  1887 00000AC2 06                              PUSH    ES
  1888 00000AC3 8E06[CB15]                      MOV     ES,[DMAADD+2]   ;Get disk transfer segment
  1889 00000AC7 D1E9                            SHR     CX,1
  1890 00000AC9 F3A5                            REP     MOVSW
  1891 00000ACB 7301                            JNC     SHORT EVENMOV
  1892 00000ACD A4                              MOVSB
  1893                                  EVENMOV:
  1894 00000ACE 07                              POP     ES
  1895                                  NOTBUFFED:
  1896 00000ACF 59                              POP     CX
  1897 00000AD0 5B                              POP     BX
  1898 00000AD1 E36E                            JCXZ    RDLAST
  1899 00000AD3 81FBF80F                        CMP     BX,0FF8H
  1900 00000AD7 7308                            JAE     SHORT SETFCB
  1901 00000AD9 B200                            MOV     DL,0
  1902 00000ADB FF06[5817]                      INC     WORD [LASTPOS]	;We'll be using next cluster
  1903 00000ADF EBB3                            JMP     SHORT RDLP
  1904                                  
  1905                                  SETFCB:
  1906 00000AE1 8B36[4E17]                      MOV     SI,[FCB]
  1907 00000AE5 A1[5017]                        MOV     AX,[NEXTADD]
  1908 00000AE8 89C7                            MOV     DI,AX
  1909 00000AEA 2B06[C915]                      SUB     AX,[DMAADD]     ;Number of bytes transfered
  1910 00000AEE 31D2                            XOR     DX,DX
  1911 00000AF0 268B4C0E                        MOV     CX,[ES:SI+FCBLOCK.RECSIZ]
  1912 00000AF4 F7F1                            DIV     CX              ;Number of records
  1913 00000AF6 3B06[5617]                      CMP     AX,[RECCNT]     ;Check if all records transferred
  1914 00000AFA 7422                            JZ      SHORT FULLREC
  1915 00000AFC C606[4917]01                    MOV     BYTE [DSKERR],1
  1916 00000B01 09D2                            OR      DX,DX
  1917 00000B03 7419                            JZ      SHORT FULLREC	;If remainder 0, then full record transfered
  1918 00000B05 C606[4917]03                    MOV     BYTE [DSKERR],3	;Flag partial last record
  1919 00000B0A 29D1                            SUB     CX,DX           ;Bytes left in last record
  1920 00000B0C 06                              PUSH    ES
  1921 00000B0D 8E06[CB15]                      MOV     ES,[DMAADD+2]
  1922 00000B11 93                              XCHG    AX,BX           ;Save the record count temporarily
  1923 00000B12 31C0                            XOR     AX,AX           ;Fill with zeros
  1924 00000B14 D1E9                            SHR     CX,1
  1925 00000B16 7301                            JNC     SHORT EVENFIL
  1926 00000B18 AA                              STOSB
  1927                                  EVENFIL:
  1928 00000B19 F3AB                            REP     STOSW
  1929 00000B1B 93                              XCHG    AX,BX           ;Restore record count to AX
  1930 00000B1C 07                              POP     ES
  1931 00000B1D 40                              INC     AX              ;Add last (partial) record to total
  1932                                  FULLREC:
  1933 00000B1E 89C1                            MOV     CX,AX
  1934 00000B20 89F7                            MOV     DI,SI           ;ES:DI point to FCB
  1935                                  SETCLUS:
  1936 00000B22 A1[5A17]                        MOV     AX,[CLUSNUM]
  1937 00000B25 2689451B                        MOV     [ES:DI+FCBLOCK.LSTCLUS],AX
  1938 00000B29 A1[5817]                        MOV     AX,[LASTPOS]
  1939 00000B2C 2689451D                        MOV     [ES:DI+FCBLOCK.CLUSPOS],AX
  1940                                  ADDREC:
  1941 00000B30 A1[5217]                        MOV     AX,[RECPOS]
  1942 00000B33 8B16[5417]                      MOV     DX,[RECPOS+2]
  1943 00000B37 E307                            JCXZ    RET28           ;If no records read, don't change position
  1944 00000B39 49                              DEC     CX
  1945 00000B3A 01C8                            ADD     AX,CX           ;Update current record position
  1946 00000B3C 83D200                          ADC     DX,0
  1947 00000B3F 41                              INC     CX      
  1948                                  RET28:  
  1949 00000B40 C3                      	RETN
  1950                                  
  1951                                  RDLAST:
  1952 00000B41 A1[6817]                        MOV     AX,[BYTCNT2]
  1953 00000B44 09C0                            OR      AX,AX
  1954 00000B46 7499                            JZ      SHORT SETFCB
  1955 00000B48 A3[6617]                        MOV     [BYTCNT1],AX
  1956 00000B4B E82BFE                          CALL    NEXTSEC
  1957 00000B4E 7291                            JC      SHORT SETFCB
  1958 00000B50 C706[6017]0000                  MOV     WORD [BYTSECPOS],0
  1959 00000B56 E8E0FD                          CALL    BUFRD
  1960 00000B59 EB86                            JMP     SHORT SETFCB
  1961                                  
  1962                                  WRTDEV:
  1963 00000B5B 1E                              PUSH    DS
  1964 00000B5C C536[C915]                      LDS     SI,[DMAADD]
  1965 00000B60 80CB40                          OR      BL,40H
  1966 00000B63 FEC3                            INC     BL
  1967 00000B65 741E                            JZ      SHORT WRTCON
  1968 00000B67 FEC3                            INC     BL
  1969 00000B69 7410                            JZ      SHORT WRTAUX
  1970 00000B6B FEC3                            INC     BL
  1971 00000B6D 7420                            JZ      SHORT ENDWRDEV	;Done if device is NUL
  1972                                  WRTLST:
  1973 00000B6F AC                              LODSB
  1974 00000B70 3C1A                            CMP     AL,1AH
  1975 00000B72 741B                            JZ      SHORT ENDWRDEV
  1976 00000B74 E82007                          CALL    LISTOUT
  1977 00000B77 E2F6                            LOOP    WRTLST
  1978 00000B79 EB14                            JMP     SHORT ENDWRDEV
  1979                                  
  1980                                  WRTAUX:
  1981 00000B7B AC                              LODSB
  1982 00000B7C E8DBF5                          CALL    AUXOUT
  1983 00000B7F 3C1A                            CMP     AL,1AH
  1984 00000B81 E0F8                            LOOPNZ  WRTAUX
  1985 00000B83 EB0A                            JMP     SHORT ENDWRDEV
  1986                                  
  1987                                  WRTCON:
  1988 00000B85 AC                              LODSB
  1989 00000B86 3C1A                            CMP     AL,1AH
  1990 00000B88 7405                            JZ      SHORT ENDWRDEV
  1991 00000B8A E82806                          CALL    OUT
  1992 00000B8D E2F6                            LOOP    WRTCON
  1993                                  ENDWRDEV:
  1994 00000B8F 1F                              POP     DS
  1995 00000B90 8B0E[5617]                      MOV     CX,[RECCNT]
  1996 00000B94 8B3E[4E17]                      MOV     DI,[FCB]
  1997 00000B98 EB96                            JMP     SHORT ADDREC
  1998                                  
  1999                                  HAVSTART:
  2000 00000B9A 89C1                            MOV     CX,AX
  2001 00000B9C E803FD                          CALL    SKPCLP
  2002 00000B9F E316                            JCXZ    DOWRTJ
  2003 00000BA1 E82902                          CALL    ALLOCATE
  2004 00000BA4 7311                            JNC     SHORT DOWRTJ
  2005                                  WRTERR:
  2006 00000BA6 C606[4917]01                    MOV     BYTE [DSKERR],1
  2007                                  LVDSK:
  2008 00000BAB A1[5217]                        MOV     AX,[RECPOS]
  2009 00000BAE 8B16[5417]                      MOV     DX,[RECPOS+2]
  2010 00000BB2 8B3E[4E17]                      MOV     DI,[FCB]
  2011 00000BB6 C3                              RETN
  2012                                  
  2013                                  DOWRTJ: 
  2014 00000BB7 EB7E                    	JMP     SHORT DOWRT
  2015                                  
  2016                                  WRTEOFJ:
  2017 00000BB9 E91A01                          JMP     WRTEOF
  2018                                  
  2019                                  STORE:
  2020                                  
  2021                                  ; Inputs:
  2022                                  ;       DS:DI point to FCB
  2023                                  ;       DX:AX = Position in file of disk transfer
  2024                                  ;       CX = Record count
  2025                                  ; Outputs:
  2026                                  ;       DX:AX = Position of last record written
  2027                                  ;       CX = No. of records written
  2028                                  ;       ES:DI point to FCB
  2029                                  ;       LSTCLUS, CLUSPOS fields in FCB set
  2030                                  
  2031 00000BBC E8D9FB                          CALL    SETUP
  2032 00000BBF E84F08                          CALL    DATE16
  2033 00000BC2 26894514                        MOV     [ES:DI+FCBLOCK.FDATE],AX
  2034 00000BC6 26895516                        MOV     [ES:DI+FCBLOCK.FTIME],DX
  2035 00000BCA 08DB                            OR      BL,BL
  2036 00000BCC 788D                            JS      SHORT WRTDEV
  2037 00000BCE 80E33F                          AND     BL,3FH          ;Mark file as dirty
  2038 00000BD1 26885D18                        MOV     [ES:DI+FCBLOCK.DEVID],BL
  2039 00000BD5 E888FC                          CALL    BREAKDOWN
  2040 00000BD8 A1[6217]                        MOV     AX,[BYTPOS]
  2041 00000BDB 8B16[6417]                      MOV     DX,[BYTPOS+2]
  2042 00000BDF E3D8                            JCXZ    WRTEOFJ
  2043 00000BE1 49                              DEC     CX
  2044 00000BE2 01C8                            ADD     AX,CX
  2045 00000BE4 83D200                          ADC     DX,0            ;AX:DX=last byte accessed
  2046 00000BE7 F77602                          DIV     WORD [BP+DPBLOCK.SECSIZ]    ;AX=last sector accessed
  2047 00000BEA 8A4E05                          MOV     CL,[BP+DPBLOCK.CLUSSHFT]
  2048 00000BED D3E8                            SHR     AX,CL           ;Last cluster to be accessed
  2049 00000BEF 50                              PUSH    AX
  2050 00000BF0 268B4510                        MOV     AX,[ES:DI+FCBLOCK.FILSIZ]
  2051 00000BF4 268B5512                        MOV     DX,[ES:DI+FCBLOCK.FILSIZ+2]
  2052 00000BF8 F77602                          DIV     WORD [BP+DPBLOCK.SECSIZ]
  2053 00000BFB 09D2                            OR      DX,DX
  2054 00000BFD 7401                            JZ      SHORT NORNDUP
  2055 00000BFF 40                              INC     AX              ;Round up if any remainder
  2056                                  NORNDUP:
  2057 00000C00 A3[5E17]                        MOV     [VALSEC],AX     ;Number of sectors that have been written
  2058 00000C03 58                              POP     AX
  2059 00000C04 8B0E[5A17]                      MOV     CX,[CLUSNUM]    ;First cluster accessed
  2060 00000C08 E87DFC                          CALL    FNDCLUS
  2061 00000C0B 891E[5A17]                      MOV     [CLUSNUM],BX
  2062 00000C0F 8916[5817]                      MOV     [LASTPOS],DX
  2063 00000C13 29D0                            SUB     AX,DX           ;Last cluster minus current cluster
  2064 00000C15 7420                            JZ      SHORT DOWRT	;If we have last clus, we must have first
  2065 00000C17 E381                            JCXZ    HAVSTART        ;See if no more data
  2066 00000C19 51                              PUSH    CX              ;No. of clusters short of first
  2067 00000C1A 89C1                            MOV     CX,AX
  2068 00000C1C E8AE01                          CALL    ALLOCATE
  2069 00000C1F 58                              POP     AX
  2070 00000C20 7284                            JC      SHORT WRTERR
  2071 00000C22 89C1                            MOV     CX,AX
  2072 00000C24 8B16[5817]                      MOV     DX,[LASTPOS]
  2073 00000C28 42                              INC     DX
  2074 00000C29 49                              DEC     CX
  2075 00000C2A 7403                            JZ      SHORT NOSKIP
  2076 00000C2C E873FC                          CALL    SKPCLP
  2077                                  NOSKIP:
  2078 00000C2F 891E[5A17]                      MOV     [CLUSNUM],BX
  2079 00000C33 8916[5817]                      MOV     [LASTPOS],DX
  2080                                  DOWRT:
  2081 00000C37 833E[6617]00                    CMP     WORD [BYTCNT1],0
  2082 00000C3C 7407                            JZ      SHORT WRTMID
  2083 00000C3E 8B1E[5A17]                      MOV     BX,[CLUSNUM]
  2084 00000C42 E807FD                          CALL    BUFWRT  
  2085                                  WRTMID:
  2086 00000C45 A1[6A17]                        MOV     AX,[SECCNT]
  2087 00000C48 09C0                            OR      AX,AX
  2088 00000C4A 7440                            JZ      SHORT WRTLAST
  2089 00000C4C 0106[5C17]                      ADD     [SECPOS],AX
  2090 00000C50 E826FD                          CALL    NEXTSEC
  2091 00000C53 C606[4A17]01                    MOV     BYTE [TRANS],1	;A transfer is taking place
  2092 00000C58 8A16[4817]                      MOV     DL,[SECCLUSPOS]
  2093 00000C5C 8B1E[5A17]                      MOV     BX,[CLUSNUM]
  2094 00000C60 8B0E[6A17]                      MOV     CX,[SECCNT]
  2095                                  WRTLP:
  2096 00000C64 E8C100                          CALL    OPTIMIZE
  2097 00000C67 720C                            JC      SHORT NOTINBUF	;Is one of the sectors buffered?
  2098 00000C69 C706[D315]0000                  MOV     WORD [BUFSECNO],0	
  2099                                  				;If so, invalidate the buffer since we're
  2100 00000C6F C706[D515]FF00                  MOV     WORD [BUFDRVNO],0FFH	;       completely rewritting it
  2101                                  NOTINBUF:
  2102 00000C75 57                              PUSH    DI
  2103 00000C76 50                              PUSH    AX
  2104 00000C77 1E                              PUSH    DS
  2105 00000C78 8E1E[CB15]                      MOV     DS,[DMAADD+2]
  2106 00000C7C E821FA                          CALL    DWRITE
  2107 00000C7F 1F                              POP     DS
  2108 00000C80 59                              POP     CX
  2109 00000C81 5B                              POP     BX
  2110 00000C82 E308                            JCXZ    WRTLAST
  2111 00000C84 B200                            MOV     DL,0
  2112 00000C86 FF06[5817]                      INC     WORD [LASTPOS]		;We'll be using next cluster
  2113 00000C8A EBD8                            JMP     SHORT WRTLP
  2114                                  WRTLAST:
  2115 00000C8C A1[6817]                        MOV     AX,[BYTCNT2]
  2116 00000C8F 09C0                            OR      AX,AX
  2117 00000C91 740F                            JZ      SHORT FINWRT
  2118 00000C93 A3[6617]                        MOV     [BYTCNT1],AX
  2119 00000C96 E8E0FC                          CALL    NEXTSEC
  2120 00000C99 C706[6017]0000                  MOV     WORD [BYTSECPOS],0
  2121 00000C9F E8AAFC                          CALL    BUFWRT
  2122                                  FINWRT:
  2123 00000CA2 A1[5017]                        MOV     AX,[NEXTADD]
  2124 00000CA5 2B06[C915]                      SUB     AX,[DMAADD]
  2125 00000CA9 0306[6217]                      ADD     AX,[BYTPOS]
  2126 00000CAD 8B16[6417]                      MOV     DX,[BYTPOS+2]
  2127 00000CB1 83D200                          ADC     DX,0
  2128 00000CB4 89D1                            MOV     CX,DX
  2129 00000CB6 8B3E[4E17]                      MOV     DI,[FCB]
  2130 00000CBA 263B4510                        CMP     AX,[ES:DI+FCBLOCK.FILSIZ]
  2131 00000CBE 261B4D12                        SBB     CX,[ES:DI+FCBLOCK.FILSIZ+2]
  2132 00000CC2 7208                            JB      SHORT SAMSIZ
  2133 00000CC4 26894510                        MOV     [ES:DI+FCBLOCK.FILSIZ],AX
  2134 00000CC8 26895512                        MOV     [ES:DI+FCBLOCK.FILSIZ+2],DX
  2135                                  SAMSIZ:
  2136 00000CCC 8B0E[5617]                      MOV     CX,[RECCNT]
  2137 00000CD0 E94FFE                          JMP     SETCLUS
  2138                                  
  2139                                  WRTERRJ:
  2140 00000CD3 E9D0FE                  	JMP     WRTERR
  2141                                  
  2142                                  WRTEOF:
  2143 00000CD6 89C1                            MOV     CX,AX
  2144 00000CD8 09D1                            OR      CX,DX
  2145 00000CDA 743D                            JZ      SHORT KILLFIL
  2146 00000CDC 83E801                          SUB     AX,1
  2147 00000CDF 83DA00                          SBB     DX,0
  2148 00000CE2 F77602                          DIV     WORD [BP+DPBLOCK.SECSIZ]
  2149 00000CE5 8A4E05                          MOV     CL,[BP+DPBLOCK.CLUSSHFT]
  2150 00000CE8 D3E8                            SHR     AX,CL
  2151 00000CEA 89C1                            MOV     CX,AX
  2152 00000CEC E899FB                          CALL    FNDCLUS
  2153 00000CEF E31C                            JCXZ    RELFILE
  2154 00000CF1 E8D900                          CALL    ALLOCATE
  2155 00000CF4 72DD                            JC      SHORT WRTERRJ
  2156                                  UPDATE:
  2157 00000CF6 8B3E[4E17]                      MOV     DI,[FCB]
  2158 00000CFA A1[6217]                        MOV     AX,[BYTPOS]
  2159 00000CFD 26894510                        MOV     [ES:DI+FCBLOCK.FILSIZ],AX
  2160 00000D01 A1[6417]                        MOV     AX,[BYTPOS+2]
  2161 00000D04 26894512                        MOV     [ES:DI+FCBLOCK.FILSIZ+2],AX
  2162 00000D08 31C9                            XOR     CX,CX
  2163 00000D0A E923FE                          JMP     ADDREC
  2164                                  
  2165                                  RELFILE:
  2166 00000D0D BAFF0F                          MOV     DX,0FFFH
  2167 00000D10 E83101                          CALL    RELBLKS
  2168                                  SETDIRT:
  2169 00000D13 C644FF01                        MOV     BYTE [SI-1],1
  2170 00000D17 EBDD                            JMP     SHORT UPDATE
  2171                                  
  2172                                  KILLFIL:
  2173 00000D19 31DB                            XOR     BX,BX
  2174 00000D1B 26875D19                        XCHG    BX,[ES:DI+FCBLOCK.FIRCLUS]
  2175 00000D1F 09DB                            OR      BX,BX
  2176 00000D21 74D3                            JZ      SHORT UPDATE
  2177 00000D23 E81C01                          CALL    RELEASE
  2178 00000D26 EBEB                            JMP     SHORT SETDIRT
  2179                                  
  2180                                  
  2181                                  OPTIMIZE:
  2182                                  
  2183                                  ; Inputs:
  2184                                  ;       DS = CS
  2185                                  ;       BX = Physical cluster
  2186                                  ;       CX = No. of records
  2187                                  ;       DL = sector within cluster
  2188                                  ;       BP = Base of drives parameters
  2189                                  ;       [NEXTADD] = transfer address
  2190                                  ; Outputs:
  2191                                  ;       AX = No. of records remaining
  2192                                  ;       BX = Transfer address
  2193                                  ;       CX = No. or records to be transferred
  2194                                  ;       DX = Physical sector address
  2195                                  ;       DI = Next cluster
  2196                                  ;       Carry clear if a sector to transfer is in the buffer
  2197                                  ;       Carry set otherwise
  2198                                  ;       [CLUSNUM] = Last cluster accessed
  2199                                  ;       [NEXTADD] updated
  2200                                  ; BP unchanged. Note that segment of transfer not set.
  2201                                  
  2202 00000D28 52                              PUSH    DX
  2203 00000D29 53                              PUSH    BX
  2204 00000D2A 8A4604                          MOV     AL,[BP+DPBLOCK.CLUSMSK]
  2205 00000D2D FEC0                            INC     AL              ;Number of sectors per cluster
  2206 00000D2F 88C4                            MOV     AH,AL
  2207 00000D31 28D0                            SUB     AL,DL           ;AL = Number of sectors left in first cluster
  2208 00000D33 89CA                            MOV     DX,CX
  2209 00000D35 8B7612                          MOV     SI,[BP+DPBLOCK.FAT]
  2210 00000D38 B90000                          MOV     CX,0
  2211                                  OPTCLUS:
  2212                                  ;AL has number of sectors available in current cluster
  2213                                  ;AH has number of sectors available in next cluster
  2214                                  ;BX has current physical cluster
  2215                                  ;CX has number of sequential sectors found so far
  2216                                  ;DX has number of sectors left to transfer
  2217                                  ;SI has FAT pointer
  2218 00000D3B E827F4                          CALL    UNPACK
  2219 00000D3E 00C1                            ADD     CL,AL
  2220 00000D40 80D500                          ADC     CH,0
  2221 00000D43 39D1                            CMP     CX,DX
  2222 00000D45 7349                            JAE     SHORT BLKDON
  2223 00000D47 88E0                            MOV     AL,AH
  2224 00000D49 43                              INC     BX
  2225 00000D4A 39DF                            CMP     DI,BX
  2226 00000D4C 74ED                            JZ      SHORT OPTCLUS
  2227 00000D4E 4B                              DEC     BX
  2228                                  FINCLUS:
  2229 00000D4F 891E[5A17]                      MOV     [CLUSNUM],BX    ;Last cluster accessed
  2230 00000D53 29CA                            SUB     DX,CX           ;Number of sectors still needed
  2231 00000D55 52                              PUSH    DX
  2232 00000D56 89C8                            MOV     AX,CX
  2233 00000D58 F76602                          MUL     WORD [BP+DPBLOCK.SECSIZ] 
  2234                                  				;Number of sectors times sector size
  2235 00000D5B 8B36[5017]                      MOV     SI,[NEXTADD]
  2236 00000D5F 01F0                            ADD     AX,SI           ;Adjust by size of transfer
  2237 00000D61 A3[5017]                        MOV     [NEXTADD],AX
  2238 00000D64 58                              POP     AX              ;Number of sectors still needed
  2239 00000D65 5A                              POP     DX              ;Starting cluster
  2240 00000D66 29D3                            SUB     BX,DX           ;Number of new clusters accessed
  2241 00000D68 011E[5817]                      ADD     [LASTPOS],BX
  2242 00000D6C 5B                              POP     BX              ;BL = sector postion within cluster
  2243 00000D6D E82E00                          CALL    FIGREC
  2244 00000D70 89F3                            MOV     BX,SI
  2245                                  ;Now let's see if any of these sectors are already in the buffer
  2246 00000D72 3916[D315]                      CMP     [BUFSECNO],DX
  2247 00000D76 7217                            JC      SHORT RET100	;If DX > [BUFSECNO] then not in buffer
  2248 00000D78 89D6                            MOV     SI,DX
  2249 00000D7A 01CE                            ADD     SI,CX           ;Last sector + 1
  2250 00000D7C 3936[D315]                      CMP     [BUFSECNO],SI
  2251 00000D80 F5                              CMC
  2252 00000D81 720C                            JC	SHORT RET100	;If SI <= [BUFSECNO] then not in buffer
  2253 00000D83 50                              PUSH    AX
  2254 00000D84 8A4600                          MOV     AL,[BP+DPBLOCK.DEVNUM]
  2255 00000D87 3A06[D515]                      CMP     AL,[BUFDRVNO]   ;Is buffer for this drive?
  2256 00000D8B 58                              POP     AX
  2257 00000D8C 7401                            JZ	SHORT RET100	;If so, then we match 
  2258 00000D8E F9                              STC                     ;No match
  2259                                  RET100: 
  2260 00000D8F C3                      	RETN
  2261                                  BLKDON:
  2262 00000D90 29D1                            SUB     CX,DX           ;Number of sectors in cluster we don't want
  2263 00000D92 28CC                            SUB     AH,CL           ;Number of sectors in cluster we accepted
  2264 00000D94 FECC                            DEC     AH              ;Adjust to mean position within cluster
  2265 00000D96 8826[4817]                      MOV     [SECCLUSPOS],AH
  2266 00000D9A 89D1                            MOV     CX,DX           ;Anyway, make the total equal to the request
  2267 00000D9C EBB1                            JMP     SHORT FINCLUS
  2268                                  
  2269                                  FIGREC:
  2270                                  
  2271                                  ;Inputs:
  2272                                  ;       DX = Physical cluster number
  2273                                  ;       BL = Sector position within cluster
  2274                                  ;       BP = Base of drive parameters
  2275                                  ;Outputs:
  2276                                  ;       DX = physical sector number
  2277                                  ;No other registers affected.
  2278                                  
  2279 00000D9E 51                              PUSH    CX
  2280 00000D9F 8A4E05                          MOV     CL,[BP+DPBLOCK.CLUSSHFT]
  2281 00000DA2 4A                              DEC     DX
  2282 00000DA3 4A                              DEC     DX
  2283 00000DA4 D3E2                            SHL     DX,CL
  2284 00000DA6 08DA                            OR      DL,BL
  2285 00000DA8 03560B                          ADD     DX,[BP+DPBLOCK.FIRREC]
  2286 00000DAB 59                              POP     CX
  2287 00000DAC C3                              RETN
  2288                                  
  2289                                  GETREC:
  2290                                  
  2291                                  ; Inputs:
  2292                                  ;       DS:DX point to FCB
  2293                                  ; Outputs:
  2294                                  ;       CX = 1
  2295                                  ;       DX:AX = Record number determined by EXTENT and NR fields
  2296                                  ;       DS:DI point to FCB
  2297                                  ; No other registers affected.
  2298                                  
  2299 00000DAD 89D7                            MOV     DI,DX
  2300 00000DAF 803DFF                          CMP     BYTE [DI],-1	;Check for extended FCB
  2301 00000DB2 7503                            JNZ     SHORT NORMFCB2
  2302 00000DB4 83C707                          ADD     DI,7
  2303                                  NORMFCB2:
  2304 00000DB7 B90100                          MOV     CX,1
  2305 00000DBA 8A4520                          MOV     AL,[DI+FCBLOCK.NR]
  2306 00000DBD 8B550C                          MOV     DX,[DI+FCBLOCK.EXTENT]
  2307 00000DC0 D0E0                            SHL     AL,1
  2308 00000DC2 D1EA                            SHR     DX,1
  2309 00000DC4 D0D8                            RCR     AL,1
  2310 00000DC6 88D4                            MOV     AH,DL
  2311 00000DC8 88F2                            MOV     DL,DH
  2312 00000DCA B600                            MOV     DH,0
  2313 00000DCC C3                              RETN
  2314                                  
  2315                                  
  2316                                  ALLOCATE:
  2317                                  
  2318                                  ; Inputs:
  2319                                  ;       DS = CS
  2320                                  ;       ES = Segment of FCB
  2321                                  ;       BX = Last cluster of file (0 if null file)
  2322                                  ;       CX = No. of clusters to allocate
  2323                                  ;       DX = Position of cluster BX
  2324                                  ;       BP = Base of drive parameters
  2325                                  ;       SI = FAT pointer
  2326                                  ;       [FCB] = Displacement of FCB within segment
  2327                                  ; Outputs:
  2328                                  ;       IF insufficient space
  2329                                  ;         THEN
  2330                                  ;       Carry set
  2331                                  ;       CX = max. no. of records that could be added to file
  2332                                  ;         ELSE
  2333                                  ;       Carry clear
  2334                                  ;       BX = First cluster allocated
  2335                                  ;       FAT is fully updated including dirty bit
  2336                                  ;       FIRCLUS field of FCB set if file was null
  2337                                  ; SI,BP unchanged. All other registers destroyed.
  2338                                  
  2339 00000DCD FF34                            PUSH    WORD [SI]
  2340 00000DCF 52                              PUSH    DX
  2341 00000DD0 51                              PUSH    CX
  2342 00000DD1 53                              PUSH    BX
  2343 00000DD2 89D8                            MOV     AX,BX
  2344                                  ALLOC:
  2345 00000DD4 89DA                            MOV     DX,BX
  2346                                  FINDFRE:
  2347 00000DD6 43                              INC     BX
  2348 00000DD7 3B5E0D                          CMP     BX,[BP+DPBLOCK.MAXCLUS]
  2349 00000DDA 7E29                            JLE     SHORT TRYOUT
  2350 00000DDC 83F801                          CMP     AX,1
  2351 00000DDF 7F29                            JG      SHORT TRYIN
  2352 00000DE1 5B                              POP     BX
  2353 00000DE2 BAFF0F                          MOV     DX,0FFFH
  2354 00000DE5 E85C00                          CALL    RELBLKS
  2355 00000DE8 58                              POP     AX              ;No. of clusters requested
  2356 00000DE9 29C8                            SUB     AX,CX           ;AX=No. of clusters allocated
  2357 00000DEB 5A                              POP     DX
  2358 00000DEC 8F04                            POP     WORD [SI]
  2359 00000DEE 42                              INC     DX              ;Position of first cluster allocated
  2360 00000DEF 01D0                            ADD     AX,DX           ;AX=max no. of cluster in file
  2361 00000DF1 8A5604                          MOV     DL,[BP+DPBLOCK.CLUSMSK]
  2362 00000DF4 B600                            MOV     DH,0
  2363 00000DF6 42                              INC     DX              ;DX=records/cluster
  2364 00000DF7 F7E2                            MUL     DX              ;AX=max no. of records in file
  2365 00000DF9 89C1                            MOV     CX,AX
  2366 00000DFB 2B0E[5217]                      SUB     CX,[RECPOS]	;CX=max no. of records that could be written
  2367 00000DFF 7702                            JA      SHORT MAXREC
  2368 00000E01 31C9                            XOR     CX,CX           ;If CX was negative, zero it
  2369                                  MAXREC:
  2370 00000E03 F9                              STC
  2371                                  RET11:  
  2372 00000E04 C3                      	RETN
  2373                                  
  2374                                  TRYOUT:
  2375 00000E05 E85DF3                          CALL    UNPACK
  2376 00000E08 740C                            JZ      SHORT HAVFRE
  2377                                  TRYIN:
  2378 00000E0A 48                              DEC     AX
  2379 00000E0B 7EC9                            JLE     SHORT FINDFRE
  2380 00000E0D 93                              XCHG    AX,BX
  2381 00000E0E E854F3                          CALL    UNPACK
  2382 00000E11 7403                            JZ      SHORT HAVFRE
  2383 00000E13 93                              XCHG    AX,BX
  2384 00000E14 EBC0                            JMP     SHORT FINDFRE
  2385                                  HAVFRE:
  2386 00000E16 87DA                            XCHG    BX,DX
  2387 00000E18 89D0                            MOV     AX,DX
  2388 00000E1A E870F3                          CALL    PACK
  2389 00000E1D 89C3                            MOV     BX,AX
  2390 00000E1F E2B3                            LOOP    ALLOC
  2391 00000E21 BAFF0F                          MOV     DX,0FFFH
  2392 00000E24 E866F3                          CALL    PACK
  2393 00000E27 C644FF01                        MOV     BYTE [SI-1],1
  2394 00000E2B 5B                              POP     BX
  2395 00000E2C 59                              POP     CX              ;Don't need this stuff since we're successful
  2396 00000E2D 5A                              POP     DX
  2397 00000E2E E834F3                          CALL    UNPACK
  2398 00000E31 8F04                            POP     WORD [SI]
  2399 00000E33 87DF                            XCHG    BX,DI
  2400 00000E35 09FF                            OR      DI,DI
  2401 00000E37 75CB                            JNZ     SHORT RET11
  2402 00000E39 8B3E[4E17]                      MOV     DI,[FCB]
  2403 00000E3D 26895D19                        MOV     [ES:DI+FCBLOCK.FIRCLUS],BX
  2404                                  RET12:  
  2405 00000E41 C3                      	RETN
  2406                                  
  2407                                  
  2408                                  RELEASE:
  2409                                  
  2410                                  ; Inputs:
  2411                                  ;       DS = CS
  2412                                  ;       BX = Cluster in file
  2413                                  ;       SI = FAT pointer
  2414                                  ;       BP = Base of drive parameters
  2415                                  ; Function:
  2416                                  ;       Frees cluster chain starting with [BX]
  2417                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
  2418                                  
  2419 00000E42 31D2                            XOR     DX,DX
  2420                                  RELBLKS:
  2421                                  ; Enter here with DX=0FFFH to put an end-of-file mark
  2422                                  ; in the first cluster and free the rest in the chain.
  2423 00000E44 E81EF3                          CALL    UNPACK
  2424 00000E47 74F8                            JZ      SHORT RET12
  2425 00000E49 89F8                            MOV     AX,DI
  2426 00000E4B E83FF3                          CALL    PACK
  2427 00000E4E 3DF80F                          CMP     AX,0FF8H
  2428 00000E51 89C3                            MOV     BX,AX
  2429 00000E53 72ED                            JB      SHORT RELEASE
  2430                                  RET13:  
  2431 00000E55 C3                      	RETN
  2432                                  
  2433                                  
  2434                                  GETEOF:
  2435                                  
  2436                                  ; Inputs:
  2437                                  ;       BX = Cluster in a file
  2438                                  ;       SI = Base of drive FAT
  2439                                  ;       DS = CS
  2440                                  ; Outputs:
  2441                                  ;       BX = Last cluster in the file
  2442                                  ; DI destroyed. No other registers affected.
  2443                                  
  2444 00000E56 E80CF3                          CALL    UNPACK
  2445 00000E59 81FFF80F                        CMP     DI,0FF8H
  2446 00000E5D 73F6                            JAE     SHORT RET13
  2447 00000E5F 89FB                            MOV     BX,DI
  2448 00000E61 EBF3                            JMP     SHORT GETEOF
  2449                                  
  2450                                  
  2451                                  SRCHFRST: ;System call 17
  2452 00000E63 E876F3                          CALL    GETFILE
  2453                                  SAVPLCE:
  2454                                  ; Search-for-next enters here to save place and report
  2455                                  ; findings.
  2456 00000E66 7235                            JC      SHORT KILLSRCH
  2457 00000E68 08FF                            OR      BH,BH
  2458 00000E6A 783A                            JS      SHORT SRCHDEV
  2459 00000E6C A1[1317]                        MOV     AX,[LASTENT]
  2460 00000E6F 26894510                        MOV     [ES:DI+FCBLOCK.FILDIRENT],AX
  2461 00000E73 26896D12                        MOV     [ES:DI+FCBLOCK.DRVBP],BP
  2462                                  ;Information in directory entry must be copied into the first
  2463                                  ; 33 bytes starting at the disk transfer address.
  2464 00000E77 89DE                            MOV     SI,BX
  2465 00000E79 C43E[C915]                      LES     DI,[DMAADD]
  2466 00000E7D B8FF00                          MOV     AX,00FFH
  2467 00000E80 3A06[3E17]                      CMP     AL,[EXTFCB]
  2468 00000E84 7509                            JNZ     SHORT NORMFCB
  2469 00000E86 AB                              STOSW
  2470 00000E87 FEC0                            INC     AL
  2471 00000E89 AB                              STOSW
  2472 00000E8A AB                              STOSW
  2473 00000E8B A0[2617]                        MOV     AL,[ATTRIB]
  2474 00000E8E AA                              STOSB
  2475                                  NORMFCB:
  2476 00000E8F A0[4D17]                        MOV     AL,[THISDRV]
  2477 00000E92 FEC0                            INC     AL
  2478 00000E94 AA                              STOSB   ;Set drive number
  2479 00000E95 B91000                          MOV     CX,16
  2480 00000E98 F3A5                            REP     MOVSW   ;Copy remaining 10 characters of name
  2481 00000E9A 30C0                            XOR     AL,AL
  2482 00000E9C C3                              RETN
  2483                                  
  2484                                  KILLSRCH:
  2485                                  KILLSRCH1       EQU     KILLSRCH+1
  2486                                  ;The purpose of the KILLSRCH1 label is to provide a jump label to the following
  2487                                  ;   instruction which leaves out the segment override.
  2488 00000E9D 26C74510FFFF                    MOV     WORD [ES:DI+FCBLOCK.FILDIRENT],-1
  2489 00000EA3 B0FF                            MOV     AL,-1
  2490 00000EA5 C3                              RETN
  2491                                  
  2492                                  SRCHDEV:
  2493 00000EA6 26895D10                        MOV     [ES:DI+FCBLOCK.FILDIRENT],BX
  2494 00000EAA C43E[C915]                      LES     DI,[DMAADD]
  2495 00000EAE 31C0                            XOR     AX,AX
  2496 00000EB0 AA                              STOSB           ;Zero drive byte
  2497 00000EB1 83EE04                          SUB     SI,4            ;Point to device name
  2498 00000EB4 A5                              MOVSW
  2499 00000EB5 A5                              MOVSW
  2500 00000EB6 B82020                          MOV     AX,2020H
  2501 00000EB9 AA                              STOSB
  2502 00000EBA AB                              STOSW
  2503 00000EBB AB                              STOSW
  2504 00000EBC AB                              STOSW                   ;Fill with 8 blanks
  2505 00000EBD 31C0                            XOR     AX,AX
  2506 00000EBF B90A00                          MOV     CX,10
  2507 00000EC2 F3AB                            REP     STOSW
  2508 00000EC4 AA                              STOSB
  2509 00000EC5 C3                      RET14:  RETN
  2510                                  
  2511                                  SRCHNXT: ;System call 18
  2512 00000EC6 E8BDF4                          CALL    MOVNAME
  2513 00000EC9 89D7                            MOV     DI,DX
  2514 00000ECB 0F82CFFF                        JC      NEAR KILLSRCH1
  2515 00000ECF 8B6D12                          MOV     BP,[DI+FCBLOCK.DRVBP]
  2516 00000ED2 8B4510                          MOV     AX,[DI+FCBLOCK.FILDIRENT]
  2517 00000ED5 09C0                            OR      AX,AX
  2518 00000ED7 0F88C3FF                        JS      NEAR KILLSRCH1
  2519 00000EDB 52                              PUSH    DX
  2520 00000EDC 1E                              PUSH    DS
  2521 00000EDD 0E                              PUSH    CS
  2522 00000EDE 1F                              POP     DS
  2523 00000EDF A3[1317]                        MOV     [LASTENT],AX
  2524 00000EE2 E815F3                          CALL    CONTSRCH
  2525 00000EE5 07                              POP     ES
  2526 00000EE6 5F                              POP     DI
  2527 00000EE7 E97CFF                          JMP     SAVPLCE
  2528                                  
  2529                                  
  2530                                  FILESIZE: ;System call 35
  2531 00000EEA E8EFF2                          CALL    GETFILE
  2532 00000EED B0FF                            MOV     AL,-1
  2533 00000EEF 72D4                            JC      SHORT RET14
  2534 00000EF1 83C721                          ADD     DI,33           ;Write size in RR field
  2535 00000EF4 268B4DED                        MOV     CX,[ES:DI+FCBLOCK.RECSIZ-33]
  2536 00000EF8 09C9                            OR      CX,CX
  2537 00000EFA 7503                            JNZ     SHORT RECOK
  2538 00000EFC B98000                          MOV     CX,128
  2539                                  RECOK:
  2540 00000EFF 31C0                            XOR     AX,AX
  2541 00000F01 31D2                            XOR     DX,DX           ;Intialize size to zero
  2542 00000F03 08FF                            OR      BH,BH           ;Check for named I/O device
  2543 00000F05 7814                            JS      SHORT DEVSIZ
  2544 00000F07 46                              INC     SI
  2545 00000F08 46                              INC     SI              ;Point to length field
  2546 00000F09 8B4402                          MOV     AX,[SI+2]       ;Get high word of size
  2547 00000F0C F7F1                            DIV     CX
  2548 00000F0E 50                              PUSH    AX              ;Save high part of result
  2549 00000F0F AD                              LODSW			;Get low word of size
  2550 00000F10 F7F1                            DIV     CX
  2551 00000F12 09D2                            OR      DX,DX           ;Check for zero remainder
  2552 00000F14 5A                              POP     DX
  2553 00000F15 7404                            JZ      SHORT DEVSIZ
  2554 00000F17 40                              INC     AX              ;Round up for partial record
  2555 00000F18 7501                            JNZ     SHORT DEVSIZ	;Propagate carry?
  2556 00000F1A 42                              INC     DX
  2557                                  DEVSIZ:
  2558 00000F1B AB                              STOSW
  2559 00000F1C 89D0                            MOV     AX,DX
  2560 00000F1E AA                              STOSB
  2561 00000F1F B000                            MOV     AL,0
  2562 00000F21 83F940                          CMP     CX,64
  2563 00000F24 739F                            JAE     SHORT RET14	;Only 3-byte field if RECSIZ >= 64
  2564 00000F26 268825                          MOV     [ES:DI],AH
  2565 00000F29 C3                              RETN
  2566                                  
  2567                                  
  2568                                  SETDMA: ;System call 26
  2569 00000F2A 2E8916[C915]                    MOV     [CS:DMAADD],DX
  2570 00000F2F 2E8C1E[CB15]                    MOV     [CS:DMAADD+2],DS
  2571 00000F34 C3                              RETN
  2572                                  
  2573                                  NOSUCHDRV:
  2574 00000F35 B0FF                            MOV     AL,-1
  2575 00000F37 C3                              RETN
  2576                                  
  2577                                  GETFATPT: ;System call 27
  2578 00000F38 B200                            MOV     DL,0                    ;Use default drive
  2579                                  
  2580                                  GETFATPTDL:     ;System call 28
  2581 00000F3A 0E                              PUSH    CS
  2582 00000F3B 1F                              POP     DS
  2583 00000F3C 88D0                            MOV     AL,DL
  2584 00000F3E E88CF4                          CALL    GETTHISDRV
  2585 00000F41 72F2                            JC      SHORT NOSUCHDRV
  2586 00000F43 E8FAF4                          CALL    FATREAD
  2587 00000F46 8B5E12                          MOV     BX,[BP+DPBLOCK.FAT]
  2588 00000F49 8A4604                          MOV     AL,[BP+DPBLOCK.CLUSMSK]
  2589 00000F4C FEC0                            INC     AL
  2590 00000F4E 8B560D                          MOV     DX,[BP+DPBLOCK.MAXCLUS]
  2591 00000F51 4A                              DEC     DX
  2592 00000F52 8B4E02                          MOV     CX,[BP+DPBLOCK.SECSIZ]
  2593 00000F55 C536[4217]                      LDS     SI,[SPSAVE]
  2594 00000F59 895C02                          MOV     [SI+STKPTRS.BXSAVE],BX
  2595 00000F5C 895406                          MOV     [SI+STKPTRS.DXSAVE],DX
  2596 00000F5F 894C04                          MOV     [SI+STKPTRS.CXSAVE],CX
  2597 00000F62 8C4C0E                          MOV     [SI+STKPTRS.DSSAVE],CS
  2598 00000F65 C3                              RETN
  2599                                  
  2600                                  
  2601                                  GETDSKPT: ;System call 31
  2602 00000F66 0E                              PUSH    CS
  2603 00000F67 1F                              POP     DS
  2604 00000F68 A0[E215]                        MOV     AL,[CURDRV]
  2605 00000F6B A2[4D17]                        MOV     [THISDRV],AL
  2606 00000F6E E8CFF4                          CALL    FATREAD
  2607 00000F71 C536[4217]                      LDS     SI,[SPSAVE]
  2608 00000F75 896C02                          MOV     [SI+STKPTRS.BXSAVE],BP
  2609 00000F78 8C4C0E                          MOV     [SI+STKPTRS.DSSAVE],CS
  2610 00000F7B C3                              RETN
  2611                                  
  2612                                  
  2613                                  DSKRESET: ;System call 13
  2614 00000F7C 0E                              PUSH    CS
  2615 00000F7D 1F                              POP     DS
  2616                                  WRTFATS:
  2617                                  ; DS=CS. Writes back all dirty FATs. All registers destroyed.
  2618 00000F7E 30C0                            XOR     AL,AL
  2619 00000F80 8606[D615]                      XCHG    AL,[DIRTYBUF]
  2620 00000F84 08C0                            OR      AL,AL
  2621 00000F86 7412                            JZ      SHORT NOBUF
  2622 00000F88 8B2E[D715]                      MOV     BP,[BUFDRVBP]
  2623 00000F8C 8B16[D315]                      MOV     DX,[BUFSECNO]
  2624 00000F90 8B1E[D115]                      MOV     BX,[BUFFER]
  2625 00000F94 B90100                          MOV     CX,1
  2626 00000F97 E806F7                          CALL    DWRITE
  2627                                  NOBUF:
  2628 00000F9A 8A0E[C515]                      MOV     CL,[NUMIO]
  2629 00000F9E B500                            MOV     CH,0
  2630 00000FA0 8B2E[E315]                      MOV     BP,[DRVTAB]
  2631                                  WRTFAT:
  2632 00000FA4 51                              PUSH    CX
  2633 00000FA5 E88BF5                          CALL    CHKFATWRT
  2634 00000FA8 59                              POP     CX
  2635 00000FA9 83C514                          ADD     BP,DPBSIZ
  2636 00000FAC E2F6                            LOOP    WRTFAT
  2637 00000FAE C3                              RETN
  2638                                  
  2639                                  
  2640                                  GETDRV: ;System call 25
  2641 00000FAF 2EA0[E215]                      MOV     AL,[CS:CURDRV]
  2642 00000FB3 C3                      RET15:  RETN
  2643                                  
  2644                                  
  2645                                  SETRNDREC: ;System call 36
  2646 00000FB4 E8F6FD                          CALL    GETREC
  2647 00000FB7 894521                          MOV     [DI+33],AX
  2648 00000FBA 885523                          MOV     [DI+35],DL
  2649 00000FBD 837D0E40                        CMP     WORD [DI+FCBLOCK.RECSIZ],64
  2650 00000FC1 73F0                            JAE     SHORT RET15
  2651 00000FC3 887524                          MOV     [DI+36],DH      ;Set 4th byte only if record size < 64
  2652 00000FC6 C3                      RET16:  RETN
  2653                                  
  2654                                  
  2655                                  SELDSK: ;System call 14
  2656 00000FC7 2EA0[C415]                      MOV     AL,[CS:NUMDRV]
  2657 00000FCB 38C2                            CMP     DL,AL
  2658 00000FCD 7305                            JNB     SHORT RET17
  2659 00000FCF 2E8816[E215]                    MOV     [CS:CURDRV],DL
  2660 00000FD4 C3                      RET17:  RETN
  2661                                  
  2662                                  BUFIN:  ;System call 10
  2663 00000FD5 8CC8                            MOV     AX,CS
  2664 00000FD7 8EC0                            MOV     ES,AX
  2665 00000FD9 89D6                            MOV     SI,DX
  2666 00000FDB B500                            MOV     CH,0
  2667 00000FDD AD                              LODSW
  2668 00000FDE 08C0                            OR      AL,AL
  2669 00000FE0 74F2                            JZ      SHORT RET17
  2670 00000FE2 88E3                            MOV     BL,AH
  2671 00000FE4 88EF                            MOV     BH,CH
  2672 00000FE6 38D8                            CMP     AL,BL
  2673 00000FE8 7605                            JBE     SHORT NOEDIT
  2674 00000FEA 80380D                          CMP     BYTE [BX+SI],0DH
  2675 00000FED 7402                            JZ      SHORT EDITON
  2676                                  NOEDIT:
  2677 00000FEF 88EB                            MOV     BL,CH
  2678                                  EDITON:
  2679 00000FF1 88C2                            MOV     DL,AL
  2680 00000FF3 4A                              DEC     DX
  2681                                  NEWLIN:
  2682 00000FF4 2EA0[C015]                      MOV     AL,[CS:CARPOS]
  2683 00000FF8 2EA2[C115]                      MOV     [CS:STARTPOS],AL
  2684 00000FFC 56                              PUSH    SI
  2685 00000FFD BF[1016]                        MOV     DI,INBUF
  2686 00001000 88EC                            MOV     AH,CH
  2687 00001002 88EF                            MOV     BH,CH
  2688 00001004 88EE                            MOV     DH,CH
  2689                                  GETCH:
  2690 00001006 E85D02                          CALL    IN
  2691 00001009 3C06                            CMP     AL,"F"-"@"      ;Ignore ^F
  2692 0000100B 74F9                            JZ      SHORT GETCH
  2693 0000100D 2E3A06[0300]                    CMP     AL,[CS:ESCCHAR]
  2694 00001012 7432                            JZ      SHORT ESC
  2695 00001014 3C7F                            CMP     AL,7FH
  2696 00001016 747E                            JZ      SHORT BACKSP
  2697 00001018 3C08                            CMP     AL,8
  2698 0000101A 747A                            JZ      SHORT BACKSP
  2699 0000101C 3C0D                            CMP     AL,13
  2700 0000101E 743A                            JZ      SHORT ENDLIN
  2701 00001020 3C0A                            CMP     AL,10
  2702 00001022 745A                            JZ      SHORT PHYCRLF
  2703 00001024 3C1B                            CMP     AL,CANCEL
  2704 00001026 745B                            JZ      SHORT KILNEW
  2705                                  SAVCH:
  2706 00001028 38D6                            CMP     DH,DL
  2707 0000102A 7313                            JAE     SHORT BUFFUL
  2708 0000102C AA                              STOSB
  2709 0000102D FEC6                            INC     DH
  2710 0000102F E86501                          CALL    BUFOUT
  2711 00001032 08E4                            OR      AH,AH
  2712 00001034 75D0                            JNZ     SHORT GETCH
  2713 00001036 38DF                            CMP     BH,BL
  2714 00001038 73CC                            JAE     SHORT GETCH
  2715 0000103A 46                              INC     SI
  2716 0000103B FEC7                            INC     BH
  2717 0000103D EBC7                            JMP     SHORT GETCH
  2718                                  
  2719                                  BUFFUL:
  2720 0000103F B007                            MOV     AL,7
  2721 00001041 E87101                          CALL    OUT
  2722 00001044 EBC0                            JMP     SHORT GETCH
  2723                                  
  2724                                  ESC:
  2725 00001046 E81D02                          CALL    IN
  2726 00001049 B10D                            MOV     CL,ESCTABLEN
  2727 0000104B 57                              PUSH    DI
  2728 0000104C BF[0400]                        MOV     DI,ESCTAB
  2729 0000104F F2AE                            REPNE   SCASB
  2730 00001051 5F                              POP     DI
  2731 00001052 D1E1                            SHL     CX,1
  2732 00001054 89CD                            MOV     BP,CX
  2733 00001056 FFA6[7811]                      JMP     WORD [BP+ESCFUNC]
  2734                                  
  2735                                  ENDLIN:
  2736 0000105A AA                              STOSB
  2737 0000105B E85701                          CALL    OUT
  2738 0000105E 5F                              POP     DI
  2739 0000105F 8875FF                          MOV     [DI-1],DH
  2740 00001062 FEC6                            INC     DH
  2741                                  COPYNEW:
  2742 00001064 8CC5                            MOV     BP,ES
  2743 00001066 8CDB                            MOV     BX,DS
  2744 00001068 8EC3                            MOV     ES,BX
  2745 0000106A 8EDD                            MOV     DS,BP
  2746 0000106C BE[1016]                        MOV     SI,INBUF
  2747 0000106F 88F1                            MOV     CL,DH
  2748 00001071 F3A4                            REP     MOVSB
  2749 00001073 C3                              RETN
  2750                                  CRLF:
  2751 00001074 B00D                            MOV     AL,13
  2752 00001076 E83C01                          CALL    OUT
  2753 00001079 B00A                            MOV     AL,10
  2754 0000107B E93701                          JMP     OUT
  2755                                  
  2756                                  PHYCRLF:
  2757 0000107E E8F3FF                          CALL    CRLF
  2758 00001081 EB83                            JMP     SHORT GETCH
  2759                                  
  2760                                  KILNEW:
  2761 00001083 B05C                            MOV     AL,"\"
  2762 00001085 E82D01                          CALL    OUT
  2763 00001088 5E                              POP     SI
  2764                                  PUTNEW:
  2765 00001089 E8E8FF                          CALL    CRLF
  2766 0000108C 2EA0[C115]                      MOV     AL,[CS:STARTPOS]
  2767 00001090 E89F01                          CALL    TAB
  2768 00001093 E95EFF                          JMP     NEWLIN
  2769                                  
  2770                                  BACKSP:
  2771 00001096 08F6                            OR      DH,DH
  2772 00001098 7411                            JZ      SHORT OLDBAK
  2773 0000109A E84E00                          CALL    BACKUP
  2774 0000109D 268A05                          MOV     AL,[ES:DI]
  2775 000010A0 3C20                            CMP     AL," "
  2776 000010A2 7307                            JAE     SHORT OLDBAK
  2777 000010A4 3C09                            CMP     AL,9
  2778 000010A6 7411                            JZ      SHORT BAKTAB
  2779 000010A8 E84300                          CALL    BACKMES
  2780                                  OLDBAK:
  2781 000010AB 08E4                            OR      AH,AH
  2782 000010AD 7507                            JNZ     SHORT GETCH1
  2783 000010AF 08FF                            OR      BH,BH
  2784 000010B1 7403                            JZ      SHORT GETCH1
  2785 000010B3 FECF                            DEC     BH
  2786 000010B5 4E                              DEC     SI
  2787                                  GETCH1:
  2788 000010B6 E94DFF                          JMP     GETCH
  2789                                  BAKTAB:
  2790 000010B9 57                              PUSH    DI
  2791 000010BA 4F                              DEC     DI
  2792 000010BB FD                              STD
  2793 000010BC 88F1                            MOV     CL,DH
  2794 000010BE B020                            MOV     AL," "
  2795 000010C0 53                              PUSH    BX
  2796 000010C1 B307                            MOV     BL,7
  2797 000010C3 E30E                            JCXZ    FIGTAB
  2798                                  FNDPOS:
  2799 000010C5 AE                              SCASB
  2800 000010C6 7609                            JNA     SHORT CHKCNT
  2801 000010C8 26807D0109                      CMP     BYTE [ES:DI+1],9
  2802 000010CD 7409                            JZ      SHORT HAVTAB
  2803 000010CF FECB                            DEC     BL
  2804                                  CHKCNT:
  2805 000010D1 E2F2                            LOOP    FNDPOS
  2806                                  FIGTAB:
  2807 000010D3 2E2A1E[C115]                    SUB     BL,[CS:STARTPOS]
  2808                                  HAVTAB:
  2809 000010D8 28F3                            SUB     BL,DH
  2810 000010DA 00D9                            ADD     CL,BL
  2811 000010DC 80E107                          AND     CL,7
  2812 000010DF FC                              CLD
  2813 000010E0 5B                              POP     BX
  2814 000010E1 5F                              POP     DI
  2815 000010E2 74C7                            JZ      SHORT OLDBAK
  2816                                  TABBAK:
  2817 000010E4 E80700                          CALL    BACKMES
  2818 000010E7 E2FB                            LOOP    TABBAK
  2819 000010E9 EBC0                            JMP     SHORT OLDBAK
  2820                                  BACKUP:
  2821 000010EB FECE                            DEC     DH
  2822 000010ED 4F                              DEC     DI
  2823                                  BACKMES:
  2824 000010EE B008                            MOV     AL,8
  2825 000010F0 E8C200                          CALL    OUT
  2826 000010F3 B020                            MOV     AL," "
  2827 000010F5 E8BD00                          CALL    OUT
  2828 000010F8 B008                            MOV     AL,8
  2829 000010FA E9B800                          JMP     OUT
  2830                                  
  2831                                  TWOESC:
  2832 000010FD B000                            MOV     AL,ESCCH
  2833 000010FF E926FF                          JMP     SAVCH
  2834                                  
  2835                                  COPYLIN:
  2836 00001102 88D9                            MOV     CL,BL
  2837 00001104 28F9                            SUB     CL,BH
  2838 00001106 EB07                            JMP     SHORT COPYEACH
  2839                                  
  2840                                  COPYSTR:
  2841 00001108 E83000                          CALL    FINDOLD
  2842 0000110B EB02                            JMP     SHORT COPYEACH
  2843                                  
  2844                                  COPYONE:
  2845 0000110D B101                            MOV     CL,1
  2846                                  COPYEACH:
  2847 0000110F B400                            MOV     AH,0
  2848 00001111 38D6                            CMP     DH,DL
  2849 00001113 740F                            JZ      SHORT GETCH2
  2850 00001115 38DF                            CMP     BH,BL
  2851 00001117 740B                            JZ      SHORT GETCH2
  2852 00001119 AC                              LODSB
  2853 0000111A AA                              STOSB
  2854 0000111B E87900                          CALL    BUFOUT
  2855 0000111E FEC7                            INC     BH
  2856 00001120 FEC6                            INC     DH
  2857 00001122 E2EB                            LOOP    COPYEACH
  2858                                  GETCH2:
  2859 00001124 E9DFFE                          JMP     GETCH
  2860                                  
  2861                                  SKIPONE:
  2862 00001127 38DF                            CMP     BH,BL
  2863 00001129 74F9                            JZ      SHORT GETCH2
  2864 0000112B FEC7                            INC     BH
  2865 0000112D 46                              INC     SI
  2866 0000112E E9D5FE                          JMP     GETCH
  2867                                  
  2868                                  SKIPSTR:
  2869 00001131 E80700                          CALL    FINDOLD
  2870 00001134 01CE                            ADD     SI,CX
  2871 00001136 00CF                            ADD     BH,CL
  2872 00001138 E9CBFE                          JMP     GETCH
  2873                                  
  2874                                  FINDOLD:
  2875 0000113B E82801                          CALL    IN
  2876 0000113E 88D9                            MOV     CL,BL
  2877 00001140 28F9                            SUB     CL,BH
  2878 00001142 7417                            JZ      SHORT NOTFND
  2879 00001144 49                              DEC     CX
  2880 00001145 7414                            JZ      SHORT NOTFND
  2881 00001147 06                              PUSH    ES
  2882 00001148 1E                              PUSH    DS
  2883 00001149 07                              POP     ES
  2884 0000114A 57                              PUSH    DI
  2885 0000114B 89F7                            MOV     DI,SI
  2886 0000114D 47                              INC     DI
  2887 0000114E F2AE                            REPNE   SCASB
  2888 00001150 5F                              POP     DI
  2889 00001151 07                              POP     ES
  2890 00001152 7507                            JNZ     SHORT NOTFND
  2891 00001154 F6D1                            NOT     CL
  2892 00001156 00D9                            ADD     CL,BL
  2893 00001158 28F9                            SUB     CL,BH
  2894 0000115A C3                      RET30:  RETN
  2895                                  NOTFND:
  2896 0000115B 5D                              POP     BP
  2897 0000115C E9A7FE                          JMP     GETCH
  2898                                  
  2899                                  REEDIT:
  2900 0000115F B040                            MOV     AL,"@"
  2901 00001161 E85100                          CALL    OUT
  2902 00001164 5F                              POP     DI
  2903 00001165 57                              PUSH    DI
  2904 00001166 06                              PUSH    ES
  2905 00001167 1E                              PUSH    DS
  2906 00001168 E8F9FE                          CALL    COPYNEW
  2907 0000116B 1F                              POP     DS
  2908 0000116C 07                              POP     ES
  2909 0000116D 5E                              POP     SI
  2910 0000116E 88F3                            MOV     BL,DH
  2911 00001170 E916FF                          JMP     PUTNEW
  2912                                  
  2913                                  ENTERINS:
  2914 00001173 F6D4                            NOT     AH
  2915 00001175 E98EFE                          JMP     GETCH
  2916                                  
  2917                                  ESCFUNC:
  2918 00001178 [0610]                  	DW      GETCH
  2919 0000117A [FD10]                          DW      TWOESC
  2920 0000117C [7311]                          DW      ENTERINS
  2921 0000117E [9610]                          DW      BACKSP
  2922 00001180 [5F11]                          DW      REEDIT
  2923 00001182 [8310]                          DW      KILNEW
  2924 00001184 [0211]                          DW      COPYLIN
  2925 00001186 [3111]                          DW      SKIPSTR
  2926 00001188 [0811]                          DW      COPYSTR
  2927 0000118A [2711]                          DW      SKIPONE
  2928 0000118C [0D11]                          DW      COPYONE
  2929 0000118E [0D11]                          DW      COPYONE
  2930 00001190 [9211]                          DW      CTRLZ
  2931                                  CTRLZ:
  2932 00001192 B01A                            MOV     AL,"Z"-"@"
  2933 00001194 E991FE                          JMP     SAVCH
  2934                                  BUFOUT:
  2935 00001197 3C20                            CMP     AL," "
  2936 00001199 731A                            JAE     SHORT OUT
  2937 0000119B 3C09                            CMP     AL,9
  2938 0000119D 7416                            JZ      SHORT OUT
  2939 0000119F 50                              PUSH    AX
  2940 000011A0 B05E                            MOV     AL,"^"
  2941 000011A2 E81000                          CALL    OUT
  2942 000011A5 58                              POP     AX
  2943 000011A6 0C40                            OR      AL,40H
  2944 000011A8 EB0B                            JMP     SHORT OUT
  2945                                  
  2946                                  NOSTOP:
  2947 000011AA 3C10                            CMP     AL,"P"-"@"
  2948 000011AC 743C                            JZ      SHORT INCHK
  2949 000011AE 3C03                            CMP     AL,"C"-"@"
  2950 000011B0 7438                            JZ      SHORT INCHK
  2951 000011B2 C3                              RETN
  2952                                  
  2953                                  CONOUT: ;System call 2
  2954 000011B3 88D0                            MOV     AL,DL
  2955                                  OUT:
  2956 000011B5 3C20                            CMP     AL,20H
  2957 000011B7 7265                            JB      SHORT CTRLOUT
  2958 000011B9 3C7F                            CMP     AL,7FH
  2959 000011BB 7405                            JZ      SHORT OUTCH
  2960 000011BD 2EFE06[C015]                    INC     BYTE [CS:CARPOS]
  2961                                  OUTCH:
  2962 000011C2 50                              PUSH    AX
  2963 000011C3 E81400                          CALL    STATCHK
  2964 000011C6 58                              POP     AX
  2965 000011C7 9A09006000                      CALL    BIOSSEG:BIOSOUT
  2966 000011CC 2EF606[C215]FF                  TEST    BYTE [CS:PFLAG],-1
  2967 000011D2 7405                            JZ      SHORT RET18
  2968 000011D4 9A0C006000                      CALL    BIOSSEG:BIOSPRINT
  2969                                  RET18:  
  2970 000011D9 C3                      	RETN
  2971                                  
  2972                                  STATCHK:
  2973 000011DA 9A03006000                      CALL    BIOSSEG:BIOSSTAT 
  2974 000011DF 74F8                            JZ      SHORT RET18
  2975 000011E1 3C13                            CMP     AL,'S'-'@'
  2976 000011E3 75C5                            JNZ     SHORT NOSTOP
  2977 000011E5 9A06006000                      CALL    BIOSSEG:BIOSIN		;Eat Cntrl-S
  2978                                  INCHK:
  2979 000011EA 9A06006000                      CALL    BIOSSEG:BIOSIN
  2980 000011EF 3C10                            CMP     AL,'P'-'@'
  2981 000011F1 7425                            JZ      SHORT PRINTON
  2982 000011F3 3C03                            CMP     AL,'C'-'@'
  2983 000011F5 75E2                            JNZ     SHORT RET18
  2984                                  ; Ctrl-C handler.
  2985                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
  2986                                  ; user CTRL-C handler is executed. At this point the top of the stack has
  2987                                  ; 1) the interrupt return address should the user CTRL-C handler wish to
  2988                                  ; allow processing to continue; 2) the original interrupt return address
  2989                                  ; to the code that performed the function call in the first place. If the
  2990                                  ; user CTRL-C handler wishes to continue, it must leave all registers
  2991                                  ; unchanged and IRET. The function that was interrupted will simply be
  2992                                  ; repeated.
  2993 000011F7 B003                            MOV     AL,3            ;Display "^C"
  2994 000011F9 E89BFF                          CALL    BUFOUT
  2995 000011FC E875FE                          CALL    CRLF
  2996 000011FF FA                              CLI                     ;Prepare to play with stack
  2997 00001200 2E8E16[4417]                    MOV     SS,[CS:SSSAVE]
  2998 00001205 2E8B26[4217]                    MOV     SP,[CS:SPSAVE]  ;User stack now restored
  2999 0000120A 58                              POP     AX
  3000 0000120B 5B                              POP     BX
  3001 0000120C 59                              POP     CX
  3002 0000120D 5A                              POP     DX
  3003 0000120E 5E                              POP     SI
  3004 0000120F 5F                              POP     DI
  3005 00001210 5D                              POP     BP
  3006 00001211 1F                              POP     DS
  3007 00001212 07                              POP     ES              ;User registers now restored
  3008 00001213 CD23                            INT     CONTC           ;Execute user Ctrl-C handler
  3009 00001215 E938EE                          JMP     COMMAND		;Repeat command otherwise
  3010                                  
  3011                                  PRINTON:
  3012 00001218 2EF616[C215]                    NOT     BYTE [CS:PFLAG]
  3013 0000121D C3                              RETN
  3014                                  
  3015                                  CTRLOUT:
  3016 0000121E 3C0D                            CMP     AL,13
  3017 00001220 7420                            JZ      SHORT ZERPOS
  3018 00001222 3C08                            CMP     AL,8
  3019 00001224 7425                            JZ      SHORT BACKPOS
  3020 00001226 3C09                            CMP     AL,9
  3021 00001228 751E                            JNZ     SHORT OUTCHJ
  3022 0000122A 2EA0[C015]                      MOV     AL,[CS:CARPOS]
  3023 0000122E 0CF8                            OR      AL,0F8H
  3024 00001230 F6D8                            NEG     AL
  3025                                  TAB:
  3026 00001232 51                              PUSH    CX
  3027 00001233 88C1                            MOV     CL,AL
  3028 00001235 B500                            MOV     CH,0
  3029 00001237 E307                            JCXZ    POPTAB
  3030                                  TABLP:
  3031 00001239 B020                            MOV     AL," "
  3032 0000123B E877FF                          CALL    OUT
  3033 0000123E E2F9                            LOOP    TABLP
  3034                                  POPTAB:
  3035 00001240 59                              POP     CX
  3036                                  RET19:  
  3037 00001241 C3                      	RETN
  3038                                  
  3039                                  ZERPOS:
  3040 00001242 2EC606[C015]00                  MOV     BYTE [CS:CARPOS],0
  3041                                  OUTCHJ: 
  3042 00001248 E977FF                  	JMP     OUTCH
  3043                                  
  3044                                  BACKPOS:
  3045 0000124B 2EFE0E[C015]                    DEC     BYTE [CS:CARPOS]
  3046 00001250 E96FFF                          JMP     OUTCH
  3047                                  
  3048                                  
  3049                                  CONSTAT: ;System call 11
  3050 00001253 E884FF                          CALL    STATCHK
  3051 00001256 B000                            MOV     AL,0 
  3052 00001258 74E7                            JZ      SHORT RET19
  3053 0000125A 0CFF                            OR      AL,-1
  3054 0000125C C3                              RETN
  3055                                  
  3056                                  
  3057                                  CONIN:  ;System call 1
  3058 0000125D E80600                          CALL    IN
  3059 00001260 50                              PUSH    AX
  3060 00001261 E851FF                          CALL    OUT
  3061 00001264 58                              POP     AX
  3062 00001265 C3                              RETN
  3063                                  
  3064                                  
  3065                                  IN:     ;System call 8
  3066 00001266 E881FF                          CALL    INCHK
  3067 00001269 74FB                            JZ      SHORT IN
  3068 0000126B C3                      RET29:  RETN
  3069                                  
  3070                                  RAWIO:  ;System call 6
  3071 0000126C 88D0                            MOV     AL,DL
  3072 0000126E 3CFF                            CMP     AL,-1
  3073 00001270 751D                            JNZ     SHORT RAWOUT
  3074 00001272 2EC536[4217]                    LDS     SI,[CS:SPSAVE]		;Get pointer to register save area
  3075 00001277 9A03006000                      CALL    BIOSSEG:BIOSSTAT
  3076 0000127C 7507                            JNZ     SHORT RESFLG
  3077 0000127E 804C1640                        OR      BYTE [SI+STKPTRS.FSAVE],40H	;Set user's zero flag
  3078 00001282 30C0                            XOR     AL,AL
  3079 00001284 C3                              RETN
  3080                                  
  3081                                  RESFLG:
  3082 00001285 806416BF                        AND     BYTE [SI+STKPTRS.FSAVE],0FFH-40H ;Reset user's zero flag
  3083                                  RAWINP: ;System call 7
  3084 00001289 9A06006000                      CALL    BIOSSEG:BIOSIN 
  3085 0000128E C3                              RETN
  3086                                  RAWOUT:
  3087 0000128F 9A09006000                      CALL    BIOSSEG:BIOSOUT
  3088 00001294 C3                              RETN
  3089                                  
  3090                                  LIST:   ;System call 5
  3091 00001295 88D0                            MOV     AL,DL
  3092                                  LISTOUT:
  3093 00001297 50                              PUSH    AX
  3094 00001298 E83FFF                          CALL    STATCHK
  3095 0000129B 58                              POP     AX
  3096 0000129C 9A0C006000                      CALL    BIOSSEG:BIOSPRINT
  3097 000012A1 C3                      RET20:  RETN
  3098                                  
  3099                                  PRTBUF: ;System call 9
  3100 000012A2 89D6                            MOV     SI,DX
  3101                                  OUTSTR:
  3102 000012A4 AC                              LODSB
  3103 000012A5 3C24                            CMP     AL,"$"
  3104 000012A7 74F8                            JZ      SHORT RET20
  3105 000012A9 E809FF                          CALL    OUT
  3106 000012AC EBF6                            JMP     SHORT OUTSTR
  3107                                  
  3108                                  OUTMES: ;String output for internal messages
  3109 000012AE 2E8A04                          MOV	AL, [CS:SI]
  3110 000012B1 46                      	INC	SI	
  3111 000012B2 3C24                            CMP     AL,"$"
  3112 000012B4 74EB                            JZ      SHORT RET20
  3113 000012B6 E8FCFE                          CALL    OUT
  3114 000012B9 EBF3                            JMP     SHORT OUTMES
  3115                                  
  3116                                  
  3117                                  MAKEFCB: ;Interrupt call 41
  3118                                  DRVBIT  EQU     2
  3119                                  NAMBIT  EQU     4
  3120                                  EXTBIT  EQU     8
  3121 000012BB B200                            MOV     DL,0            ;Flag--not ambiguous file name
  3122 000012BD A802                            TEST    AL,DRVBIT       ;Use current drive field if default?
  3123 000012BF 7504                            JNZ     SHORT DEFDRV
  3124 000012C1 26C60500                        MOV     BYTE [ES:DI],0	;No - use default drive
  3125                                  DEFDRV:
  3126 000012C5 47                              INC     DI
  3127 000012C6 B90800                          MOV     CX,8
  3128 000012C9 A804                            TEST    AL,NAMBIT       ;Use current name fiels as defualt?
  3129 000012CB 93                              XCHG    AX,BX           ;Save bits in BX
  3130 000012CC B020                            MOV     AL," "
  3131 000012CE 7404                            JZ      SHORT FILLB	;If not, go fill with blanks
  3132 000012D0 01CF                            ADD     DI,CX
  3133 000012D2 31C9                            XOR     CX,CX           ;Don't fill any
  3134                                  FILLB:
  3135 000012D4 F3AA                            REP     STOSB
  3136 000012D6 B103                            MOV     CL,3
  3137 000012D8 F6C308                          TEST    BL,EXTBIT       ;Use current extension as default
  3138 000012DB 7404                            JZ      SHORT FILLB2
  3139 000012DD 01CF                            ADD     DI,CX
  3140 000012DF 31C9                            XOR     CX,CX
  3141                                  FILLB2:
  3142 000012E1 F3AA                            REP     STOSB
  3143 000012E3 91                              XCHG    AX,CX           ;Put zero in AX
  3144 000012E4 AB                              STOSW
  3145 000012E5 AB                              STOSW                   ;Initialize two words after to zero
  3146 000012E6 83EF10                          SUB     DI,16           ;Point back at start
  3147 000012E9 F6C301                          TEST    BL,1            ;Scan off separators if not zero
  3148 000012EC 7409                            JZ      SHORT SKPSPC
  3149 000012EE E86D00                          CALL    SCANB           ;Peel off blanks and tabs
  3150 000012F1 E89300                          CALL    DELIM           ;Is it a one-time-only delimiter?
  3151 000012F4 7504                            JNZ     SHORT NOSCAN
  3152 000012F6 46                              INC     SI              ;Skip over the delimiter
  3153                                  SKPSPC:
  3154 000012F7 E86400                          CALL    SCANB           ;Always kill preceding blanks and tabs
  3155                                  NOSCAN:
  3156 000012FA E86900                          CALL    GETLET
  3157 000012FD 7616                            JBE     SHORT NODRV	;Quit if termination character
  3158 000012FF 803C3A                          CMP     BYTE [SI],":"	;Check for potential drive specifier
  3159 00001302 7511                            JNZ     SHORT NODRV
  3160 00001304 46                              INC     SI              ;Skip over colon
  3161 00001305 2C40                            SUB     AL,"@"          ;Convert drive letter to binary drive number
  3162 00001307 7607                            JBE     SHORT BADDRV	;Valid drive numbers are 1-15
  3163 00001309 2E3A06[C415]                    CMP     AL,[CS:NUMDRV]
  3164 0000130E 7602                            JBE     SHORT HAVDRV
  3165                                  BADDRV:
  3166 00001310 B2FF                            MOV     DL,-1
  3167                                  HAVDRV:
  3168 00001312 AA                              STOSB           ;Put drive specifier in first byte
  3169 00001313 46                              INC     SI
  3170 00001314 4F                              DEC     DI      ;Counteract next two instructions
  3171                                  NODRV:
  3172 00001315 4E                              DEC     SI      ;Back up
  3173 00001316 47                              INC     DI      ;Skip drive byte
  3174 00001317 B90800                          MOV     CX,8
  3175 0000131A E81B00                          CALL    GETWORD         ;Get 8-letter file name
  3176 0000131D 803C2E                          CMP     BYTE [SI],"."
  3177 00001320 7507                            JNZ     SHORT NODOT
  3178 00001322 46                              INC     SI              ;Skip over dot if present
  3179 00001323 B90300                          MOV     CX,3            ;Get 3-letter extension
  3180 00001326 E81500                          CALL    MUSTGETWORD
  3181                                  NODOT:
  3182 00001329 2EC51E[4217]                    LDS     BX,[CS:SPSAVE]
  3183 0000132E 897708                          MOV     [BX+STKPTRS.SISAVE],SI
  3184 00001331 88D0                            MOV     AL,DL
  3185 00001333 C3                              RETN
  3186                                  
  3187                                  NONAM:
  3188 00001334 01CF                            ADD     DI,CX
  3189 00001336 4E                              DEC     SI
  3190 00001337 C3                              RETN
  3191                                  
  3192                                  GETWORD:
  3193 00001338 E82B00                          CALL    GETLET
  3194 0000133B 76F7                            JBE     SHORT NONAM	;Exit if invalid character
  3195 0000133D 4E                              DEC     SI
  3196                                  MUSTGETWORD:
  3197 0000133E E82500                          CALL    GETLET
  3198 00001341 7615                            JBE     SHORT FILLNAM
  3199 00001343 E3F9                            JCXZ    MUSTGETWORD
  3200 00001345 49                              DEC     CX
  3201 00001346 3C2A                            CMP     AL,"*"		;Check for ambiguous file specifier
  3202 00001348 7504                            JNZ     SHORT NOSTAR
  3203 0000134A B03F                            MOV     AL,"?"
  3204 0000134C F3AA                            REP     STOSB
  3205                                  NOSTAR:
  3206 0000134E AA                              STOSB
  3207 0000134F 3C3F                            CMP     AL,"?"
  3208 00001351 75EB                            JNZ     SHORT MUSTGETWORD
  3209 00001353 80CA01                          OR      DL,1            ;Flag ambiguous file name
  3210 00001356 EBE6                            JMP     SHORT MUSTGETWORD
  3211                                  FILLNAM:
  3212 00001358 B020                            MOV     AL," "
  3213 0000135A F3AA                            REP     STOSB
  3214 0000135C 4E                              DEC     SI
  3215                                  RET21:  
  3216 0000135D C3                      	RETN
  3217                                  
  3218                                  SCANB:
  3219 0000135E AC                              LODSB
  3220 0000135F E83900                          CALL    SPCHK
  3221 00001362 74FA                            JZ      SHORT SCANB
  3222 00001364 4E                              DEC     SI
  3223 00001365 C3                              RETN
  3224                                  
  3225                                  GETLET:
  3226                                  ;Get a byte from [SI], convert it to upper case, and compare for delimiter.
  3227                                  ;ZF set if a delimiter, CY set if a control character (other than TAB).
  3228 00001366 AC                              LODSB
  3229 00001367 247F                            AND     AL,7FH
  3230 00001369 3C61                            CMP     AL,"a"
  3231 0000136B 7206                            JB      SHORT CHK
  3232 0000136D 3C7A                            CMP     AL,"z"
  3233 0000136F 7702                            JA      SHORT CHK
  3234 00001371 2C20                            SUB     AL,20H          ;Convert to upper case
  3235                                  CHK:
  3236 00001373 3C2E                            CMP     AL,"."
  3237 00001375 74E6                            JZ      SHORT RET21
  3238 00001377 3C22                            CMP     AL,'"'
  3239 00001379 74E2                            JZ      SHORT RET21
  3240 0000137B 3C2F                            CMP     AL,"/"
  3241 0000137D 74DE                            JZ      SHORT RET21
  3242 0000137F 3C5B                            CMP     AL,"["
  3243 00001381 74DA                            JZ      SHORT RET21
  3244 00001383 3C5D                            CMP     AL,"]"
  3245 00001385 74D6                            JZ      SHORT RET21
  3246                                  DELIM:
  3247 00001387 3C3A                            CMP     AL,":"          ;Allow ":" as separator in IBM version
  3248 00001389 74D2                            JZ      SHORT RET21
  3249                                  
  3250 0000138B 3C2B                            CMP     AL,"+"
  3251 0000138D 7412                            JZ      SHORT RET101
  3252 0000138F 3C3D                            CMP     AL,"="
  3253 00001391 740E                            JZ      SHORT RET101
  3254 00001393 3C3B                            CMP     AL,";"
  3255 00001395 740A                            JZ      SHORT RET101
  3256 00001397 3C2C                            CMP     AL,","
  3257 00001399 7406                            JZ      SHORT RET101
  3258                                  SPCHK:
  3259 0000139B 3C09                            CMP     AL,9            ;Filter out tabs too
  3260 0000139D 7402                            JZ      SHORT RET101
  3261                                  ;WARNING! " " MUST be the last compare
  3262 0000139F 3C20                            CMP     AL," "
  3263                                  RET101: 
  3264 000013A1 C3                      	RETN
  3265                                  
  3266                                  SETVECT: ; Interrupt call 37
  3267 000013A2 31DB                            XOR     BX,BX
  3268 000013A4 8EC3                            MOV     ES,BX
  3269 000013A6 88C3                            MOV     BL,AL
  3270 000013A8 D1E3                            SHL     BX,1
  3271 000013AA D1E3                            SHL     BX,1
  3272 000013AC 268917                          MOV     [ES:BX],DX
  3273 000013AF 268C5F02                        MOV     [ES:BX+2],DS
  3274 000013B3 C3                              RETN
  3275                                  
  3276                                  
  3277                                  NEWBASE: ; Interrupt call 38
  3278 000013B4 8EC2                            MOV     ES,DX
  3279 000013B6 2EC536[4217]                    LDS     SI,[CS:SPSAVE]
  3280 000013BB 8E5C14                          MOV     DS,[SI+STKPTRS.CSSAVE]
  3281 000013BE 31F6                            XOR     SI,SI
  3282 000013C0 89F7                            MOV     DI,SI
  3283 000013C2 3EA10200                        MOV     AX,[DS:2]
  3284 000013C6 B98000                          MOV     CX,80H
  3285 000013C9 F3A5                            REP     MOVSW
  3286                                  
  3287                                  SETMEM:
  3288                                  
  3289                                  ; Inputs:
  3290                                  ;       AX = Size of memory in paragraphs
  3291                                  ;       DX = Segment
  3292                                  ; Function:
  3293                                  ;       Completely prepares a program base at the 
  3294                                  ;       specified segment.
  3295                                  ; Outputs:
  3296                                  ;       DS = DX
  3297                                  ;       ES = DX
  3298                                  ;       [0] has INT 20H
  3299                                  ;       [2] = First unavailable segment ([ENDMEM])
  3300                                  ;       [5] to [9] form a long call to the entry point
  3301                                  ;       [10] to [13] have exit address (from INT 22H)
  3302                                  ;       [14] to [17] have ctrl-C exit address (from INT 23H)
  3303                                  ;       [18] to [21] have fatal error address (from INT 24H)
  3304                                  ; DX,BP unchanged. All other registers destroyed.
  3305                                  
  3306 000013CB 31C9                            XOR     CX,CX
  3307 000013CD 8ED9                            MOV     DS,CX
  3308 000013CF 8EC2                            MOV     ES,DX
  3309 000013D1 BE8800                          MOV     SI,EXIT
  3310 000013D4 BF0A00                          MOV     DI,SAVEXIT
  3311 000013D7 A5                              MOVSW
  3312 000013D8 A5                              MOVSW
  3313 000013D9 A5                              MOVSW
  3314 000013DA A5                              MOVSW
  3315 000013DB A5                              MOVSW
  3316 000013DC A5                              MOVSW
  3317 000013DD 26A30200                        MOV     [ES:2],AX
  3318 000013E1 29D0                            SUB     AX,DX
  3319 000013E3 3DFF0F                          CMP     AX,MAXDIF
  3320 000013E6 7603                            JBE     SHORT HAVDIF
  3321 000013E8 B8FF0F                          MOV     AX,MAXDIF
  3322                                  HAVDIF:
  3323 000013EB BB0C00                          MOV     BX,ENTRYPOINTSEG
  3324 000013EE 29C3                            SUB     BX,AX
  3325 000013F0 D1E0                            SHL     AX,1
  3326 000013F2 D1E0                            SHL     AX,1
  3327 000013F4 D1E0                            SHL     AX,1
  3328 000013F6 D1E0                            SHL     AX,1
  3329 000013F8 8EDA                            MOV     DS,DX
  3330 000013FA 3EA30600                        MOV     [DS:6],AX
  3331 000013FE 3E891E0800                      MOV     [DS:8],BX
  3332 00001403 3EC7060000CD20                  MOV     WORD [DS:0],20CDH  ;"INT INTTAB"
  3333 0000140A 3EC60605009A                    MOV     BYTE [DS:5],LONGCALL
  3334 00001410 C3                              RETN
  3335                                  
  3336                                  DATE16:
  3337 00001411 51                              PUSH    CX
  3338 00001412 E82300                          CALL    READTIME
  3339 00001415 D0E1                            SHL     CL,1            ;Minutes to left part of byte
  3340 00001417 D0E1                            SHL     CL,1
  3341 00001419 D1E1                            SHL     CX,1            ;Push hours and minutes to left end
  3342 0000141B D1E1                            SHL     CX,1
  3343 0000141D D1E1                            SHL     CX,1
  3344 0000141F D0EE                            SHR     DH,1            ;Count every two seconds
  3345 00001421 08F1                            OR      CL,DH           ;Combine seconds with hours and minutes
  3346 00001423 89CA                            MOV     DX,CX
  3347 00001425 59                              POP     CX
  3348 00001426 A1[DC15]                        MOV     AX,[MONTH]	;Fetch month and year
  3349 00001429 D0E0                            SHL     AL,1		;Push month to left to make room for day
  3350 0000142B D0E0                            SHL     AL,1
  3351 0000142D D0E0                            SHL     AL,1
  3352 0000142F D0E0                            SHL     AL,1
  3353 00001431 D1E0                            SHL     AX,1
  3354 00001433 0A06[DB15]                      OR      AL,[DAY]
  3355 00001437 C3                      RET22:  RETN
  3356                                  
  3357                                  FOURYEARS	EQU     3*365+366
  3358                                  
  3359                                  READTIME:
  3360                                  ;Gets time in CX:DX. Figures new date if it has changed.
  3361                                  ;Uses AX, CX, DX.
  3362 00001438 9A24006000                      CALL    BIOSSEG:BIOSGETTIME
  3363 0000143D 3B06[DF15]                      CMP     AX,[DAYCNT]     ;See if day count is the same
  3364 00001441 74F4                            JZ      SHORT RET22
  3365 00001443 3D36AB                          CMP     AX,FOURYEARS*30 ;Number of days in 120 years
  3366 00001446 73EF                            JAE     SHORT RET22	;Ignore if too large
  3367 00001448 A3[DF15]                        MOV     [DAYCNT],AX
  3368 0000144B 56                              PUSH    SI
  3369 0000144C 51                              PUSH    CX
  3370 0000144D 52                              PUSH    DX              ;Save time
  3371 0000144E 31D2                            XOR     DX,DX
  3372 00001450 B9B505                          MOV     CX,FOURYEARS    ;Number of days in 4 years
  3373 00001453 F7F1                            DIV     CX              ;Compute number of 4-year units
  3374 00001455 D1E0                            SHL     AX,1
  3375 00001457 D1E0                            SHL     AX,1
  3376 00001459 D1E0                            SHL     AX,1            ;Multiply by 8 (no. of half-years)
  3377 0000145B 89C1                            MOV     CX,AX           ;<240 implies AH=0
  3378 0000145D BE[A314]                        MOV     SI,YRTAB	;Table of days in each year
  3379 00001460 E82300                          CALL    DSLIDE          ;Find out which of four years we're in
  3380 00001463 D1E9                            SHR     CX,1            ;Convert half-years to whole years
  3381 00001465 7304                            JNC     SHORT SK	;Extra half-year?
  3382 00001467 81C2C800                        ADD     DX,200
  3383                                  SK:
  3384 0000146B E82400                          CALL    SETYEAR
  3385 0000146E B101                            MOV     CL,1            ;At least at first month in year
  3386 00001470 BE[AB14]                        MOV     SI,MONTAB       ;Table of days in each month
  3387 00001473 E81000                          CALL    DSLIDE          ;Find out which month we're in
  3388 00001476 880E[DC15]                      MOV     [MONTH],CL
  3389 0000147A 42                              INC     DX              ;Remainder is day of month (start with one)
  3390 0000147B 8816[DB15]                      MOV     [DAY],DL
  3391 0000147F E8B800                          CALL    WKDAY           ;Set day of week
  3392 00001482 5A                              POP     DX
  3393 00001483 59                              POP     CX
  3394 00001484 5E                              POP     SI
  3395 00001485 C3                      RET23:  RETN
  3396                                  
  3397                                  DSLIDE:
  3398 00001486 B400                            MOV     AH,0
  3399                                  DSLIDE1:
  3400 00001488 AC                              LODSB			;Get count of days
  3401 00001489 39C2                            CMP     DX,AX           ;See if it will fit
  3402 0000148B 72F8                            JB	SHORT RET23	;If not, done
  3403 0000148D 29C2                            SUB     DX,AX
  3404 0000148F 41                              INC     CX              ;Count one more month/year
  3405 00001490 EBF6                            JMP     SHORT DSLIDE1
  3406                                  
  3407                                  SETYEAR:
  3408                                  ;Set year with value in CX. Adjust length of February for this year.
  3409 00001492 880E[DD15]                      MOV     [YEAR],CL
  3410                                  CHKYR:
  3411 00001496 F6C103                          TEST    CL,3            ;Check for leap year
  3412 00001499 B01C                            MOV     AL,28
  3413 0000149B 7502                            JNZ     SHORT SAVFEB	;28 days if no leap year
  3414 0000149D FEC0                            INC     AL              ;Add leap day
  3415                                  SAVFEB:
  3416 0000149F A2[AC14]                        MOV     [MONTAB+1],AL   ;Store for February
  3417 000014A2 C3                              RETN
  3418                                  
  3419                                  ;Days in year
  3420 000014A3 C8A6                    YRTAB:  DB      200,166         ;Leap year
  3421 000014A5 C8A5                            DB      200,165
  3422 000014A7 C8A5                            DB      200,165
  3423 000014A9 C8A5                            DB      200,165
  3424                                  
  3425                                  ;Days of each month
  3426 000014AB 1F                      MONTAB: DB      31              ;January
  3427 000014AC 1C                              DB      28              ;February--reset each time year changes
  3428 000014AD 1F                              DB      31              ;March
  3429 000014AE 1E                              DB      30              ;April
  3430 000014AF 1F                              DB      31              ;May
  3431 000014B0 1E                              DB      30              ;June
  3432 000014B1 1F                              DB      31              ;July
  3433 000014B2 1F                              DB      31              ;August
  3434 000014B3 1E                              DB      30              ;September
  3435 000014B4 1F                              DB      31              ;October
  3436 000014B5 1E                              DB      30              ;November
  3437 000014B6 1F                              DB      31              ;December
  3438                                  
  3439                                  GETDATE: ;Function call 42
  3440 000014B7 0E                              PUSH    CS
  3441 000014B8 1F                              POP     DS
  3442 000014B9 E87CFF                          CALL    READTIME        ;Check for rollover to next day
  3443 000014BC A1[DD15]                        MOV     AX,[YEAR]
  3444 000014BF 8B1E[DB15]                      MOV     BX,[DAY]
  3445 000014C3 C536[4217]                      LDS     SI,[SPSAVE]	;Get pointer to user registers
  3446 000014C7 895C06                          MOV     [SI+STKPTRS.DXSAVE],BX  ;DH=month, DL=day
  3447 000014CA 05BC07                          ADD     AX,1980         ;Put bias back
  3448 000014CD 894404                          MOV     [SI+STKPTRS.CXSAVE],AX  ;CX=year
  3449 000014D0 2EA0[E115]                      MOV     AL,[CS:WEEKDAY]
  3450 000014D4 C3                      RET24:  RETN
  3451                                  
  3452                                  SETDATE: ;Function call 43
  3453 000014D5 B0FF                            MOV     AL,-1           ;Be ready to flag error
  3454 000014D7 81E9BC07                        SUB     CX,1980         ;Fix bias in year
  3455 000014DB 72F7                            JC	SHORT RET24	;Error if not big enough
  3456 000014DD 83F977                          CMP     CX,119          ;Year must be less than 2100
  3457 000014E0 77F2                            JA	SHORT RET24
  3458 000014E2 08F6                            OR      DH,DH
  3459 000014E4 74EE                            JZ	SHORT RET24
  3460 000014E6 08D2                            OR      DL,DL
  3461 000014E8 74EA                            JZ	SHORT RET24	;Error if either month or day is 0
  3462 000014EA 80FE0C                          CMP     DH,12           ;Check against max. month
  3463 000014ED 77E5                            JA	SHORT RET24
  3464 000014EF 0E                              PUSH    CS
  3465 000014F0 1F                              POP     DS
  3466 000014F1 E8A2FF                          CALL    CHKYR           ;Set Feb. up for new year
  3467 000014F4 88F0                            MOV     AL,DH
  3468 000014F6 BB[AA14]                        MOV     BX,MONTAB-1
  3469 000014F9 D7                              XLAT                    ;Look up days in month
  3470 000014FA 38D0                            CMP     AL,DL
  3471 000014FC B0FF                            MOV     AL,-1           ;Restore error flag, just in case
  3472 000014FE 72D4                            JB	SHORT RET24	;Error if too many days
  3473 00001500 E88FFF                          CALL    SETYEAR
  3474 00001503 8916[DB15]                      MOV     [DAY],DX	;Set both day and month
  3475 00001507 D1E9                            SHR     CX,1
  3476 00001509 D1E9                            SHR     CX,1
  3477 0000150B B8B505                          MOV     AX,FOURYEARS
  3478 0000150E 89D3                            MOV     BX,DX
  3479 00001510 F7E1                            MUL     CX
  3480 00001512 8A0E[DD15]                      MOV     CL,[YEAR]
  3481 00001516 80E103                          AND     CL,3
  3482 00001519 BE[A314]                        MOV     SI,YRTAB
  3483 0000151C 89C2                            MOV     DX,AX
  3484 0000151E D1E1                            SHL     CX,1            ;Two entries per year, so double count
  3485 00001520 E82A00                          CALL    DSUM            ;Add up the days in each year
  3486 00001523 88F9                            MOV     CL,BH           ;Month of year
  3487 00001525 BE[AB14]                        MOV     SI,MONTAB
  3488 00001528 49                              DEC     CX              ;Account for months starting with one
  3489 00001529 E82100                          CALL    DSUM            ;Add up days in each month
  3490 0000152C 88D9                            MOV     CL,BL           ;Day of month
  3491 0000152E 49                              DEC     CX              ;Account for days starting with one
  3492 0000152F 01CA                            ADD     DX,CX           ;Add in to day total
  3493 00001531 92                              XCHG    AX,DX           ;Get day count in AX
  3494 00001532 A3[DF15]                        MOV     [DAYCNT],AX
  3495 00001535 9A1E006000                      CALL    BIOSSEG:BIOSSETDATE
  3496                                  WKDAY:
  3497 0000153A A1[DF15]                        MOV     AX,[DAYCNT]
  3498 0000153D 31D2                            XOR     DX,DX
  3499 0000153F B90700                          MOV     CX,7
  3500 00001542 40                              INC     AX
  3501 00001543 40                              INC     AX              ;First day was Tuesday
  3502 00001544 F7F1                            DIV     CX              ;Compute day of week
  3503 00001546 8816[E115]                      MOV     [WEEKDAY],DL
  3504 0000154A 30C0                            XOR     AL,AL           ;Flag OK
  3505 0000154C C3                      RET25:  RETN
  3506                                  
  3507                                  DSUM:
  3508 0000154D B400                            MOV     AH,0
  3509 0000154F E3FB                            JCXZ    RET25
  3510                                  DSUM1:
  3511 00001551 AC                              LODSB
  3512 00001552 01C2                            ADD     DX,AX
  3513 00001554 E2FB                            LOOP    DSUM1
  3514 00001556 C3                              RETN
  3515                                  
  3516                                  GETTIME: ;Function call 44
  3517 00001557 0E                              PUSH    CS
  3518 00001558 1F                              POP     DS
  3519 00001559 E8DCFE                          CALL    READTIME
  3520 0000155C C536[4217]                      LDS     SI,[SPSAVE]	;Get pointer to user registers
  3521 00001560 895406                          MOV     [SI+STKPTRS.DXSAVE],DX
  3522 00001563 894C04                          MOV     [SI+STKPTRS.CXSAVE],CX
  3523 00001566 30C0                            XOR     AL,AL
  3524 00001568 C3                      RET26:  RETN
  3525                                  
  3526                                  SETTIME: ;Function call 45
  3527                                  ;Time is in CX:DX in hours, minutes, seconds, 1/100 sec.
  3528 00001569 B0FF                            MOV     AL,-1           ;Flag in case of error
  3529 0000156B 80FD18                          CMP     CH,24           ;Check hours
  3530 0000156E 73F8                            JAE     SHORT RET26
  3531 00001570 80F93C                          CMP     CL,60           ;Check minutes
  3532 00001573 73F3                            JAE     SHORT RET26
  3533 00001575 80FE3C                          CMP     DH,60           ;Check seconds
  3534 00001578 73EE                            JAE     SHORT RET26
  3535 0000157A 80FA64                          CMP     DL,100          ;Check 1/100's
  3536 0000157D 73E9                            JAE     SHORT RET26
  3537 0000157F 9A21006000                      CALL    BIOSSEG:BIOSSETTIME
  3538 00001584 30C0                            XOR     AL,AL
  3539 00001586 C3                              RETN
  3540                                  
  3541                                  
  3542                                  ; Default handler for division overflow trap
  3543                                  DIVOV:
  3544 00001587 56                              PUSH    SI
  3545 00001588 50                              PUSH    AX
  3546 00001589 BE[AC15]                        MOV     SI,DIVMES
  3547 0000158C E81FFD                          CALL    OUTMES
  3548 0000158F 58                              POP     AX
  3549 00001590 5E                              POP     SI
  3550 00001591 CD23                            INT     23H             ;Use Ctrl-C abort on divide overflow
  3551 00001593 CF                              IRET
  3552                                  
  3553                                  CODSIZ  EQU	$-CODSTRT       ;Size of code segment
  3554                                  
  3555                                  ALIGN 2
  3556                                  
  3557                                  ;-------------------------------------------------------------------------------------
  3558                                  ;***** DATA AREA *****
  3559                                  ;-------------------------------------------------------------------------------------
  3560                                  
  3561                                  CONSTRT EQU     $		;Start of constants segment
  3562                                  
  3563                                  IONAME:
  3564 00001594 434F4D3150524E204C-             DB 	"COM1","PRN ","LPT1","NUL ","AUX ","CON "
  3565 0000159D 5054314E554C204155-
  3566 000015A6 5820434F4E20       
  3567                                  
  3568                                  DIVMES:
  3569 000015AC 0D0A44697669646520-     	DB	13,10,"Divide overflow",13,10,"$"
  3570 000015B5 6F766572666C6F770D-
  3571 000015BE 0A24               
  3572                                  CARPOS:
  3573 000015C0 00                      	DB	0
  3574                                  STARTPOS:
  3575 000015C1 00                      	DB	0
  3576                                  PFLAG:
  3577 000015C2 00                      	DB	0
  3578                                  DIRTYDIR:
  3579 000015C3 00                      	DB	0		;Dirty buffer flag
  3580                                  NUMDRV:
  3581 000015C4 00                      	DB	0		;Number of drives
  3582                                  NUMIO:
  3583 000015C5 00                      	DB	0		;Number of disk tables
  3584                                  VERFLG:
  3585 000015C6 00                      	DB	0		;Initialize with verify off
  3586                                  CONTPOS:
  3587 000015C7 0000                    	DW	0
  3588                                  DMAADD:
  3589 000015C9 8000                    	DW	80H		;User's disk transfer address (disp/seg)
  3590 000015CB 0000                            DW	0
  3591                                  ENDMEM:
  3592 000015CD 0000                    	DW	0
  3593                                  MAXSEC:
  3594 000015CF 0000                    	DW	0
  3595                                  BUFFER:
  3596 000015D1 0000                    	DW	0
  3597                                  BUFSECNO:
  3598 000015D3 0000                    	DW	0
  3599                                  BUFDRVNO:
  3600 000015D5 FF                      	DB	-1
  3601                                  DIRTYBUF:
  3602 000015D6 00                      	DB	0
  3603                                  BUFDRVBP:
  3604 000015D7 0000                    	DW	0
  3605                                  DIRBUFID:
  3606 000015D9 FFFF                    	DW	-1
  3607                                  DAY:
  3608 000015DB 00                      	DB	0
  3609                                  MONTH:
  3610 000015DC 00                      	DB	0
  3611                                  YEAR:
  3612 000015DD 0000                    	DW	0
  3613                                  DAYCNT:
  3614 000015DF FFFF                    	DW	-1
  3615                                  WEEKDAY:
  3616 000015E1 00                      	DB	0
  3617                                  CURDRV:
  3618 000015E2 00                      	DB	0		;Default to drive A
  3619                                  DRVTAB :
  3620 000015E3 0000                    	DW	0		;Address of start of DPBs
  3621                                  
  3622                                  ;-------------------------------------------------------------------------------------
  3623 000015E5 00                      	db	0
  3624                                  ;-------------------------------------------------------------------------------------
  3625                                  RETRODOSMSG:
  3626 000015E6 0D0A                    	DB	13,10
  3627 000015E8 526574726F20444F53-     	db	"Retro DOS v1.0 by Erdogan Tan [2018]"
  3628 000015F1 2076312E3020627920-
  3629 000015FA 4572646F67616E2054-
  3630 00001603 616E205B323031385D 
  3631 0000160C 0D0A2400                	db	13,10,"$", 0 
  3632                                  ;-------------------------------------------------------------------------------------
  3633                                  
  3634                                  ALIGN 16
  3635                                  
  3636                                  DOSLEN  EQU     CODSIZ+($-CONSTRT) ;Size of CODE + CONSTANTS segments
  3637                                  
  3638                                  ;-------------------------------------------------------------------------------------
  3639                                  ; DATA	SEGMENT WORD
  3640                                  ; Init code overlaps with data area below
  3641                                  ;-------------------------------------------------------------------------------------
  3642                                  DATASEGMENT EQU $
  3643                                  
  3644                                  INBUF	EQU DATASEGMENT		; DB 128 DUP (?)
  3645                                  CONBUF	EQU DATASEGMENT+128	; DB 131 DUP (?) ;The rest of INBUF and console buffer
  3646                                  LASTENT	EQU DATASEGMENT+259	; DW ?
  3647                                  EXITHOLD EQU DATASEGMENT+261	; DB 4 DUP (?)
  3648                                  FATBASE	EQU DATASEGMENT+265	; DW ?
  3649                                  NAME1	EQU DATASEGMENT+267	; DB 11 DUP (?)	;File name buffer
  3650                                  ATTRIB	EQU DATASEGMENT+278	; DB ?
  3651                                  NAME2	EQU DATASEGMENT+279	; DB 11 DUP (?)
  3652                                  NAME3	EQU DATASEGMENT+290	; DB 12 DUP (?)
  3653                                  EXTFCB	EQU DATASEGMENT+302	; DB ?
  3654                                  ;WARNING - the following two items are accessed as a word
  3655                                  CREATING EQU DATASEGMENT+304	; DB ?
  3656                                  DELALL	EQU DATASEGMENT+305	; DB ?
  3657                                  TEMP	EQU DATASEGMENT+306	; LABEL WORD
  3658                                  SPSAVE  EQU DATASEGMENT+306	; DW ?
  3659                                  SSSAVE	EQU DATASEGMENT+308	; DW ?
  3660                                  CONTSTK	EQU DATASEGMENT+310	; DW ?
  3661                                  SECCLUSPOS EQU DATASEGMENT+312  ; DB ?	;Position of first sector within cluster
  3662                                  DSKERR	EQU DATASEGMENT+313	; DB ?
  3663                                  TRANS   EQU DATASEGMENT+314	; DB ?
  3664                                  PREREAD EQU DATASEGMENT+315	; DB ?	;0 means preread; 1 means optional
  3665                                  READOP	EQU DATASEGMENT+316	; DB ?
  3666                                  THISDRV EQU DATASEGMENT+317	; DB ?
  3667                                  
  3668                                  ;ALING 2	; EVEN
  3669                                  
  3670                                  FCB	EQU DATASEGMENT+318	; DW ?	;Address of user FCB
  3671                                  NEXTADD	EQU DATASEGMENT+320	; DW ?
  3672                                  RECPOS	EQU DATASEGMENT+322	; DB 4 DUP (?)
  3673                                  RECCNT	EQU DATASEGMENT+326	; DW ?
  3674                                  LASTPOS	EQU DATASEGMENT+328	; DW ?
  3675                                  CLUSNUM	EQU DATASEGMENT+330	; DW ?
  3676                                  SECPOS	EQU DATASEGMENT+332	; DW ?	;Position of first sector accessed
  3677                                  VALSEC  EQU DATASEGMENT+334	; DW ?  ;Number of valid (previously written) sectors
  3678                                  BYTSECPOS EQU DATASEGMENT+336	; DW ?	;Position of first byte within sector
  3679                                  BYTPOS	EQU DATASEGMENT+338	; DB 4 DUP (?)	;Byte position in file of access
  3680                                  BYTCNT1 EQU DATASEGMENT+342	; DW ?	;No. of bytes in first sector
  3681                                  BYTCNT2	EQU DATASEGMENT+344	; DW ?	;No. of bytes in last sector
  3682                                  SECCNT	EQU DATASEGMENT+346	; DW ?	;No. of whole sectors
  3683                                  ENTFREE	EQU DATASEGMENT+348	; DW ?
  3684                                  				; DB 80H DUP (?)     ;Stack space
  3685                                  IOSTACK EQU DATASEGMENT+476	; LABEL   BYTE
  3686                                          			; DB 80H DUP (?)
  3687                                  DSKSTACK EQU DATASEGMENT+604	; LABEL  BYTE 
  3688                                  
  3689                                  DIRBUF	EQU DATASEGMENT+606	; LABEL WORD
  3690                                  
  3691                                  ;-------------------------------------------------------------------------------------
  3692                                  ;Init code below overlaps with data area above
  3693                                  ;-------------------------------------------------------------------------------------
  3694                                  
  3695                                  DOSINIT:
  3696 00001610 FA                              CLI
  3697 00001611 FC                              CLD
  3698 00001612 0E                              PUSH    CS
  3699 00001613 07                              POP     ES
  3700 00001614 268916[CD15]                    MOV     [ES:ENDMEM],DX
  3701 00001619 AC                              LODSB                   ;Get no. of drives & no. of I/O drivers
  3702 0000161A 26A2[C515]                      MOV     [ES:NUMIO],AL
  3703 0000161E BF[3018]                        MOV     DI,MEMSTRT
  3704                                  PERDRV:
  3705 00001621 89FD                            MOV     BP,DI
  3706 00001623 26A0[2C18]                      MOV     AL,[ES:DRVCNT]
  3707 00001627 AA                              STOSB           ;DEVNUM
  3708 00001628 AC                              LODSB           ;Physical unit no.
  3709 00001629 AA                              STOSB           ;DRVNUM
  3710 0000162A 3C0F                            CMP     AL,15
  3711 0000162C 0F878500                        JA      BADINIT
  3712 00001630 98                              CBW             ;Index into FAT size table
  3713 00001631 D1E0                            SHL     AX,1
  3714 00001633 05[0C18]                        ADD     AX,FATSIZTAB
  3715 00001636 93                              XCHG    BX,AX
  3716 00001637 AD                              LODSW           ;Pointer to DPT
  3717 00001638 56                              PUSH    SI
  3718 00001639 89C6                            MOV     SI,AX
  3719 0000163B AD                              LODSW
  3720 0000163C AB                              STOSW           ;SECSIZ
  3721 0000163D 89C2                            MOV     DX,AX
  3722 0000163F 263B06[CF15]                    CMP     AX,[ES:MAXSEC]
  3723 00001644 7604                            JBE     SHORT NOTMAX
  3724 00001646 26A3[CF15]                      MOV     [ES:MAXSEC],AX
  3725                                  NOTMAX:
  3726 0000164A AC                              LODSB
  3727 0000164B FEC8                            DEC     AL
  3728 0000164D AA                              STOSB           ;CLUSMSK
  3729 0000164E 7409                            JZ      SHORT HAVSHFT
  3730 00001650 98                              CBW
  3731                                  FIGSHFT:
  3732 00001651 FEC4                            INC     AH
  3733 00001653 D0F8                            SAR     AL,1
  3734 00001655 75FA                            JNZ     SHORT FIGSHFT
  3735 00001657 88E0                            MOV     AL,AH
  3736                                  HAVSHFT:
  3737 00001659 AA                              STOSB           ;CLUSSHFT
  3738 0000165A A5                              MOVSW           ;FIRFAT (= number of reserved sectors)
  3739 0000165B A4                              MOVSB           ;FATCNT
  3740 0000165C A5                              MOVSW           ;MAXENT
  3741 0000165D 89D0                            MOV     AX,DX 	;SECSIZ again
  3742 0000165F B105                            MOV     CL,5
  3743 00001661 D3E8                            SHR     AX,CL
  3744 00001663 89C1                            MOV     CX,AX	;Directory entries per sector
  3745 00001665 48                              DEC     AX
  3746 00001666 26034609                        ADD     AX,[ES:BP+DPBLOCK.MAXENT]
  3747 0000166A 31D2                            XOR     DX,DX
  3748 0000166C F7F1                            DIV     CX
  3749 0000166E AB                              STOSW		;DIRSEC (temporarily)
  3750 0000166F A5                              MOVSW		;DSKSIZ (temporarily)
  3751                                  
  3752                                  ;FNDFATSIZ:
  3753                                  ;       MOV     AL,1
  3754                                  ;       MOV     DX,1
  3755                                  ;GETFATSIZ:
  3756                                  ;       PUSH    DX
  3757                                  ;       CALL    FIGFATSIZ
  3758                                  ;       POP     DX
  3759                                  ;       CMP     AL,DL           ;Compare newly computed FAT size with trial
  3760                                  ;       JZ      SHORT HAVFATSIZ ;Has sequence converged?
  3761                                  ;       CMP     AL,DH           ;Compare with previous trial
  3762                                  ;       MOV     DH,DL
  3763                                  ;       MOV     DL,AL           ;Shuffle trials
  3764                                  ;       JNZ     SHORT GETFATSIZ ;Continue iterations if not oscillating
  3765                                  ;       DEC     WORD [ES:BP.DSKSIZ] ;Damp those oscillations
  3766                                  ;       JMP     SHORT FNDFATSIZ ;Try again
  3767                                  
  3768                                  	;	
  3769                                  	; Retro DOS v1.0 - 12/02/2018
  3770 00001670 AC                      	LODSB	; Media Descriptor byte
  3771 00001671 AD                      	LODSW	; FAT size in sectors
  3772                                  	;
  3773                                  
  3774                                  HAVFATSIZ:
  3775 00001672 AA                              STOSB                   ;FATSIZ
  3776 00001673 26F66608                        MUL     BYTE [ES:BP+DPBLOCK.FATCNT]  ;Space occupied by all FATs
  3777 00001677 26034606                        ADD     AX,[ES:BP+DPBLOCK.FIRFAT]
  3778 0000167B AB                              STOSW                   ;FIRDIR
  3779 0000167C 2603460B                        ADD     AX,[ES:BP+DPBLOCK.DIRSEC]
  3780 00001680 2689460B                        MOV     [ES:BP+DPBLOCK.FIRREC],AX	;Destroys DIRSEC
  3781 00001684 E85001                          CALL    FIGMAX
  3782 00001687 26894E0D                        MOV     [ES:BP+DPBLOCK.MAXCLUS],CX
  3783 0000168B 89D8                            MOV     AX,BX           ;Pointer into FAT size table
  3784 0000168D AB                              STOSW                   ;Allocate space for FAT pointer
  3785 0000168E 268A460F                        MOV     AL,[ES:BP+DPBLOCK.FATSIZ]
  3786 00001692 30E4                            XOR     AH,AH
  3787 00001694 26F76602                        MUL     WORD [ES:BP+DPBLOCK.SECSIZ]
  3788 00001698 263B07                          CMP     AX,[ES:BX]      ;Bigger than already allocated
  3789 0000169B 7603                            JBE     SHORT SMFAT
  3790 0000169D 268907                          MOV     [ES:BX],AX
  3791                                  SMFAT:
  3792 000016A0 5E                              POP     SI              ;Restore pointer to init. table
  3793 000016A1 26A0[2C18]                      MOV     AL,[ES:DRVCNT]
  3794 000016A5 FEC0                            INC     AL
  3795 000016A7 26A2[2C18]                      MOV     [ES:DRVCNT],AL
  3796 000016AB 263A06[C515]                    CMP     AL,[ES:NUMIO]
  3797 000016B0 730B                            JAE	SHORT CONTINIT
  3798 000016B2 E96CFF                          JMP	PERDRV  
  3799                                  
  3800                                  BADINIT:
  3801 000016B5 BE[F917]                        MOV     SI,BADMES
  3802 000016B8 E8F3FB                          CALL    OUTMES
  3803 000016BB FB                              STI
  3804 000016BC F4                              HLT
  3805                                  
  3806                                  CONTINIT:
  3807 000016BD 0E                              PUSH    CS
  3808 000016BE 1F                              POP     DS
  3809                                  ;Calculate true address of buffers, FATs, free space
  3810 000016BF 8B2E[CF15]                      MOV     BP,[MAXSEC]
  3811 000016C3 B8[6E18]                        MOV     AX,DIRBUF
  3812 000016C6 01E8                            ADD     AX,BP
  3813 000016C8 A3[D115]                        MOV     [BUFFER],AX     ;Start of buffer
  3814 000016CB 01E8                            ADD     AX,BP
  3815 000016CD A3[E315]                        MOV     [DRVTAB],AX     ;Start of DPBs
  3816 000016D0 D1E5                            SHL     BP,1            ;Two sectors - directory and buffer
  3817 000016D2 01FD                            ADD     BP,DI           ;Allocate buffer space
  3818 000016D4 83C53E                          ADD     BP,ADJFAC       ;True address of FATs
  3819 000016D7 55                              PUSH    BP
  3820 000016D8 BE[0C18]                        MOV     SI,FATSIZTAB
  3821 000016DB 89F7                            MOV     DI,SI
  3822 000016DD B91000                          MOV     CX,16
  3823                                  TOTFATSIZ:
  3824 000016E0 45                              INC     BP              ;Add one for Dirty byte
  3825 000016E1 45                              INC     BP              ;Add one for I/O device number
  3826 000016E2 AD                              LODSW                   ;Get size of this FAT
  3827 000016E3 95                              XCHG    AX,BP
  3828 000016E4 AB                              STOSW                   ;Save address of this FAT
  3829 000016E5 01C5                            ADD     BP,AX           ;Compute size of next FAT
  3830 000016E7 39E8                            CMP     AX,BP           ;If size was zero done
  3831 000016E9 E0F5                            LOOPNZ  TOTFATSIZ
  3832 000016EB B00F                            MOV     AL,15
  3833 000016ED 28C8                            SUB     AL,CL           ;Compute number of FATs used
  3834 000016EF A2[C415]                        MOV     [NUMDRV],AL
  3835 000016F2 31C0                            XOR     AX,AX           ;Set zero flag
  3836 000016F4 F3AF                            REPZ    SCASW           ;Make sure all other entries are zero
  3837 000016F6 75BD                            JNZ     SHORT BADINIT
  3838 000016F8 83C50F                          ADD     BP,15           ;True start of free space
  3839 000016FB B104                            MOV     CL,4
  3840 000016FD D3ED                            SHR     BP,CL           ;First free segment
  3841 000016FF 8CCA                            MOV     DX,CS
  3842 00001701 01EA                            ADD     DX,BP
  3843 00001703 BB0F00                          MOV     BX,0FH
  3844 00001706 8B0E[CD15]                      MOV     CX,[ENDMEM]
  3845 0000170A 83F901                          CMP     CX,1            ;Use memory scan?
  3846 0000170D 751A                            JNZ     SHORT SETEND
  3847 0000170F 89D1                            MOV     CX,DX           ;Start scanning just after DOS
  3848                                  MEMSCAN:
  3849 00001711 41                              INC     CX
  3850                                          ;JZ	SHORT SETEND
  3851 00001712 7410                            JZ	SHORT SETEND0
  3852 00001714 8ED9                    	MOV     DS,CX
  3853 00001716 8A07                            MOV     AL,[BX]
  3854 00001718 F6D0                            NOT     AL
  3855 0000171A 8807                            MOV     [BX],AL
  3856 0000171C 3A07                            CMP     AL,[BX]
  3857 0000171E F6D0                            NOT     AL
  3858 00001720 8807                            MOV     [BX],AL
  3859 00001722 74ED                            JZ      SHORT MEMSCAN
  3860                                  SETEND0:
  3861 00001724 2E890E[CD15]                    MOV	[CS:ENDMEM],CX
  3862                                  SETEND:
  3863 00001729 8CCD                            MOV     BP,CS
  3864                                  ; BP has segment of DOS (whether to load high or run in place)
  3865                                  ; DX has program segment (whether after DOS or overlaying DOS)
  3866                                  ; CX has size of memory in paragraphs (reduced by DOS size if HIGHMEM)
  3867                                          ;MOV	[CS:ENDMEM],CX
  3868 0000172B 31C0                            XOR     AX,AX
  3869 0000172D 8ED8                            MOV     DS,AX
  3870 0000172F 8EC0                            MOV     ES,AX
  3871 00001731 BF8000                          MOV     DI,INTBASE
  3872 00001734 B8[4C00]                        MOV     AX,QUIT
  3873 00001737 AB                              STOSW			;Set abort address--displacement
  3874 00001738 89E8                            MOV     AX,BP
  3875 0000173A C606C000EA                      MOV     BYTE [ENTRYPOINT],LONGJUMP
  3876 0000173F C706C100[6500]                  MOV     WORD [ENTRYPOINT+1],ENTRY
  3877 00001745 A3C300                          MOV     WORD [ENTRYPOINT+3],AX
  3878 00001748 C7060000[8715]                  MOV     WORD [0],DIVOV   ;Set default divide trap address
  3879 0000174E A30200                          MOV     [2],AX
  3880 00001751 B90900                          MOV     CX,9
  3881 00001754 F3AB                            REP	STOSW		;Set 5 segments (skip 2 between each)
  3882 00001756 C7068400[5000]                  MOV     WORD [INTBASE+4],COMMAND
  3883 0000175C C7068C00[6400]                  MOV     WORD [INTBASE+12],IRET   ;Ctrl-C exit
  3884 00001762 C7069000[6400]                  MOV     WORD [INTBASE+16],IRET   ;Fatal error exit
  3885 00001768 B81500                          MOV     AX,BIOSREAD
  3886 0000176B AB                              STOSW
  3887 0000176C B86000                          MOV     AX,BIOSSEG
  3888 0000176F AB                              STOSW
  3889 00001770 AB                              STOSW			;Add 2 to DI
  3890 00001771 AB                              STOSW
  3891 00001772 B81800                  	MOV	AX,BIOSWRITE
  3892 00001775 A39800                          MOV     WORD [INTBASE+18H],AX
  3893 00001778 C70688000001                    MOV     WORD [EXIT],100H
  3894 0000177E 89168A00                        MOV     WORD [EXIT+2],DX
  3895 00001782 BE[1100]                        MOV     SI,HEADER
  3896 00001785 E826FB                          CALL    OUTMES
  3897 00001788 0E                              PUSH    CS
  3898 00001789 1F                              POP     DS
  3899 0000178A 0E                              PUSH    CS
  3900 0000178B 07                              POP     ES
  3901                                  ;Move the FATs into position
  3902 0000178C A0[C515]                        MOV     AL,[NUMIO]
  3903 0000178F 98                              CBW
  3904 00001790 91                              XCHG    AX,CX
  3905 00001791 BF[4218]                        MOV     DI,MEMSTRT+DPBLOCK.FAT
  3906                                  FATPOINT:
  3907 00001794 8B35                            MOV     SI,[DI]			;Get address within FAT address table
  3908 00001796 A5                              MOVSW                           ;Set address of this FAT
  3909 00001797 83C712                          ADD     DI,DPBSIZ-2             ;Point to next DPB
  3910 0000179A E2F8                            LOOP    FATPOINT
  3911 0000179C 59                              POP     CX                      ;True address of first FAT
  3912 0000179D BE[3018]                        MOV     SI,MEMSTRT		;Place to move DPBs from
  3913 000017A0 8B3E[E315]                      MOV     DI,[DRVTAB]             ;Place to move DPBs to
  3914 000017A4 29F9                            SUB     CX,DI                   ;Total length of DPBs
  3915 000017A6 39F7                            CMP     DI,SI
  3916 000017A8 7607                            JBE     SHORT MOVJMP		;Are we moving to higher or lower memory?
  3917 000017AA 49                              DEC     CX                      ;Move backwards to higher memory
  3918 000017AB 01CF                            ADD     DI,CX
  3919 000017AD 01CE                            ADD     SI,CX
  3920 000017AF 41                              INC     CX
  3921 000017B0 FD                              STD
  3922                                  MOVJMP:
  3923 000017B1 8EC5                            MOV     ES,BP
  3924                                          ;JMP	SHORT MOVFAT
  3925                                  
  3926                                  MOVFAT:
  3927                                  ;This section of code is safe from being overwritten by block move
  3928 000017B3 F3A4                            REP     MOVSB
  3929 000017B5 FC                              CLD
  3930 000017B6 268916[CB15]                    MOV     [ES:DMAADD+2],DX
  3931 000017BB 8B36[E315]                      MOV     SI,[DRVTAB]     ;Address of first DPB
  3932 000017BF B0FF                            MOV     AL,-1
  3933 000017C1 8A0E[C515]                      MOV     CL,[NUMIO]      ;Number of DPBs
  3934                                  FLGFAT:
  3935 000017C5 268B7C12                        MOV     DI,[ES:SI+DPBLOCK.FAT]  ;get pointer to FAT
  3936 000017C9 4F                              DEC     DI              ;Point to dirty byte
  3937 000017CA AA                              STOSB                   ;Flag as unused
  3938 000017CB 83C614                          ADD     SI,DPBSIZ       ;Point to next DPB
  3939 000017CE E2F5                            LOOP    FLGFAT
  3940 000017D0 A1[CD15]                        MOV     AX,[ENDMEM]
  3941 000017D3 E8F5FB                          CALL    SETMEM          ;Set up segment
  3942                                  
  3943 000017D6 CB                              RETF
  3944                                  
  3945                                  ;FIGFATSIZ:
  3946                                  ;	MUL     BYTE [ES:BP+DPBLOCK.FATCNT]
  3947                                  ;	ADD     AX,[ES:BP+DPBLOCK.FIRFAT]
  3948                                  ;	ADD     AX,[ES:BP+DPBLOCK.DIRSEC]
  3949                                  
  3950                                  FIGMAX:
  3951                                  ;AX has equivalent of FIRREC
  3952 000017D7 262B460D                        SUB     AX,[ES:BP+DPBLOCK.DSKSIZ]
  3953 000017DB F7D8                            NEG     AX
  3954 000017DD 268A4E05                        MOV     CL,[ES:BP+DPBLOCK.CLUSSHFT]
  3955 000017E1 D3E8                            SHR     AX,CL
  3956 000017E3 40                              INC     AX
  3957 000017E4 89C1                            MOV     CX,AX           ;MAXCLUS
  3958 000017E6 40                              INC     AX
  3959 000017E7 89C2                            MOV     DX,AX
  3960 000017E9 D1EA                            SHR     DX,1
  3961 000017EB 11D0                            ADC     AX,DX           ;Size of FAT in bytes
  3962 000017ED 268B7602                        MOV     SI,[ES:BP+DPBLOCK.SECSIZ]
  3963 000017F1 01F0                            ADD     AX,SI
  3964 000017F3 48                              DEC     AX
  3965 000017F4 31D2                            XOR     DX,DX
  3966 000017F6 F7F6                            DIV     SI
  3967 000017F8 C3                              RETN
  3968                                  
  3969                                  BADMES:
  3970 000017F9 0D0A494E4954205441-             DB      13,10,"INIT TABLE BAD",13,10,"$"
  3971 00001802 424C45204241440D0A-
  3972 0000180B 24                 
  3973                                  
  3974                                  FATSIZTAB:
  3975 0000180C 000000000000000000-             DW      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  3976 00001815 000000000000000000-
  3977 0000181E 000000000000000000-
  3978 00001827 0000000000         
  3979                                  
  3980 0000182C 00                      DRVCNT  DB      0
  3981                                  
  3982 0000182D 90<rept>                ALIGN 16
  3983                                  
  3984                                  MEMSTRT:
  3985                                  ADJFAC  EQU     DIRBUF-MEMSTRT
