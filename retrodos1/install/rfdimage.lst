     1                                  ; ****************************************************************************
     2                                  ; RFDIMAGE.ASM (RFDIMAGE.COM) - Retro DOS v1.0 Floppy Disk Image Formatting
     3                                  ;						  Utility for MSDOS/WINDOWS
     4                                  ; ----------------------------------------------------------------------------
     5                                  ; Only for 1.44MB (3.5") Floppy Disks
     6                                  ; ****************************************************************************
     7                                  ; Last Update: 20/02/2018
     8                                  ; ----------------------------------------------------------------------------
     9                                  ; Beginning: 11/02/2018
    10                                  ; ----------------------------------------------------------------------------
    11                                  ; Assembler: NASM version 2.11
    12                                  ; ----------------------------------------------------------------------------
    13                                  ; Retro DOS Operating System Project by ERDOGAN TAN (Beginning: 04/02/2018)
    14                                  ; ----------------------------------------------------------------------------
    15                                  ; Derived from 'fdimage.s'(FDIMAGE.COM) source code by Erdogan Tan
    16                                  ; (02/12/2017)
    17                                  ; ****************************************************************************
    18                                  ; nasm rfdimage.s -l rfdimage.lst -o RFDIMAGE.COM
    19                                  
    20                                  bsDriveNumber   equ RETRODOS_FAT12_FDBS + 36
    21                                  bsVolumeID      equ RETRODOS_FAT12_FDBS + 39
    22                                  bsVolumeLabel   equ RETRODOS_FAT12_FDBS + 43
    23                                  
    24                                  ; DTA (PSP+80h= Offset 128)
    25                                  DTA_Attrib equ 149 ; PDP+21
    26                                  DTA_Time equ 150 ; PSP+22
    27                                  DTA_Date equ 152 ; PSP 24
    28                                  DTA_FileSize equ 154 ; PSP + 26
    29                                  DTA_FileName equ 158 ; PSP + 30
    30                                  
    31                                  [BITS 16]
    32                                  [ORG 100h]
    33                                  
    34                                  	;cli
    35                                  	;cld
    36                                  	;push	cs
    37                                  	;pop	ss
    38                                  	;mov	sp, 0FFFEh
    39                                  	;sti
    40                                  	
    41 00000000 BB[5F0B]                	mov	bx, SizeOfFile+100
    42 00000003 83C30F                          add	bx, 15
    43 00000006 D1EB                            shr	bx, 1
    44 00000008 D1EB                            shr	bx, 1
    45 0000000A D1EB                    	shr	bx, 1
    46 0000000C D1EB                    	shr	bx, 1
    47 0000000E B44A                            mov	ah, 4Ah ; modify memory allocation
    48                                          ;push	cs
    49                                          ;pop	es
    50 00000010 CD21                            int	21h 
    51                                  
    52                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    53                                  ; get fd image file name
    54                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    55                                  
    56 00000012 BE8000                  	mov	si, 80h			; PSP command tail
    57 00000015 AC                       	lodsb
    58 00000016 08C0                    	or	al, al 			; command tail length                            
    59 00000018 0F84C700                	jz	R_17			; jump if zero
    60                                  R_01:
    61 0000001C AC                      	lodsb
    62 0000001D 3C20                    	cmp	al, ' '			; is it SPACE ?
    63 0000001F 74FB                    	je	short R_01 		
    64 00000021 0F82BE00                	jb	R_17
    65                                  	
    66                                  	; check fd image file name
    67                                  R_02:
    68 00000025 BF[520B]                       	mov	di, img_file_name
    69 00000028 AA                      	stosb
    70                                  R_03:
    71 00000029 AC                      	lodsb
    72                                  	;cmp	al, 0Dh ; ENTER (CR) key
    73 0000002A 3C20                    	cmp	al, 20h ; ' '
    74 0000002C 760C                    	jna	short R_04
    75 0000002E AA                      	stosb
    76 0000002F 81FF[5E0B]              	cmp	di, img_file_name + 12
    77 00000033 72F4                    	jb	short R_03
    78 00000035 803C20                  	cmp	byte [si], 20h 
    79 00000038 773F                    	ja	short R_11
    80                                  R_04:
    81                                  	;sub	al, al
    82                                  	;stosb
    83                                  
    84                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    85                                  ; File name capitalization
    86                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    87                                  
    88 0000003A BE[520B]                	mov	si, img_file_name
    89 0000003D 89F7                    	mov	di, si
    90 0000003F 89F3                    	mov	bx, si
    91                                  R_05:
    92 00000041 AC                      	lodsb
    93 00000042 3C61                    	cmp	al, 'a'
    94 00000044 730D                    	jnb	short R_07
    95 00000046 20C0                    	and	al, al
    96 00000048 7412                    	jz	short R_08
    97 0000004A 3C2E                    	cmp	al, '.'
    98 0000004C 7502                    	jne	short R_06
    99 0000004E 89FB                    	mov	bx, di ; dot position	
   100                                  R_06:
   101 00000050 AA                      	stosb
   102 00000051 EBEE                    	jmp	short R_05 		
   103                                  R_07:
   104 00000053 3C7A                    	cmp	al, 'z'
   105 00000055 77F9                    	ja	short R_06
   106 00000057 24DF                    	and	al, 0DFh ; NOT 32
   107 00000059 AA                      	stosb
   108 0000005A EBE5                    	jmp	short R_05	
   109                                  R_08:
   110 0000005C 8805                    	mov	[di], al
   111 0000005E 4F                      	dec	di
   112 0000005F 39FB                    	cmp	bx, di
   113 00000061 7316                    	jnb	short R_11
   114 00000063 29DF                    	sub	di, bx
   115 00000065 81EB[520B]              	sub	bx, img_file_name
   116 00000069 83FF03                  	cmp	di, 3
   117 0000006C 7606                    	jna	short R_09
   118 0000006E 21DB                    	and	bx, bx
   119 00000070 7507                    	jnz	short R_11
   120 00000072 EB0D                    	jmp	short R_10		
   121                                  R_09:
   122 00000074 83FB08                  	cmp	bx, 8
   123 00000077 7608                    	jna	short R_10
   124                                  R_11:
   125 00000079 BE[CB05]                	mov	si, msg_inv_file_name
   126                                  R_12:	
   127 0000007C E8B201                  	call	print_msg
   128 0000007F EB57                    	jmp	short R_16
   129                                  
   130                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   131                                  ; Find image file
   132                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   133                                  	
   134                                  R_10:
   135 00000081 BA[520B]                	mov	dx, img_file_name
   136 00000084 B93F00                  	mov	cx, 3Fh ; File Attributes
   137 00000087 B44E                    	mov	ah, 4Eh ; MS-DOS Function = Find First File
   138 00000089 CD21                    	int	21h
   139 0000008B 726B                    	jc	R_20
   140                                  
   141                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   142                                  ; Check image file features
   143                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   144                                  
   145                                  R_14:
   146 0000008D BE9500                  	mov	si, DTA_Attrib
   147 00000090 8A04                    	mov	al, [si]
   148 00000092 241F                    	and	al, 1Fh ; directory, volume label, system, hidden, read only
   149 00000094 755D                    	jnz	short R_19     
   150 00000096 BE9A00                  	mov	si, DTA_FileSize
   151 00000099 AD                      	lodsw
   152 0000009A 833C16                  	cmp	word [SI], 16h
   153 0000009D 7554                    	jne	short R_19
   154 0000009F 3D0080                  	cmp	ax, 8000h ; 1.44 MB floppy disk image (168000h bytes)
   155 000000A2 754F                    	jne	short R_19
   156                                  
   157                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   158                                  ; Overwrite question
   159                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   160                                  
   161 000000A4 BE[5706]                	mov	si, msg_overwrite_question1
   162 000000A7 E88701                  	call	print_msg
   163 000000AA BE9E00                  	mov	si, DTA_FileName
   164 000000AD E88101                  	call	print_msg
   165 000000B0 BE[7406]                	mov	si, msg_overwrite_question2
   166 000000B3 E87B01                  	call	print_msg
   167 000000B6 BE[7C06]                	mov	si, msg_yes_no
   168 000000B9 E87501                  	call	print_msg
   169                                  
   170                                  	; get answer
   171                                  R_15:
   172 000000BC 31C0                    	xor	ax, ax
   173 000000BE CD16                    	int	16h			; wait for keyboard command
   174 000000C0 3C03                    	cmp	al, 'C'-40h
   175 000000C2 7414                    	je	short R_16 ; Exit                   
   176 000000C4 3C1B                    	cmp	al, 27
   177 000000C6 7410                    	je	short R_16 ; Exit
   178 000000C8 24DF                    	and	al, 0DFh
   179 000000CA 3C59                    	cmp	al, 'Y'			; Yes?
   180 000000CC 741D                    	je	short R_18		; write
   181 000000CE 3C4E                    	cmp	al, 'N'			; No?
   182 000000D0 75EA                    	jne	short R_15      
   183                                  					; no write (exit)  
   184 000000D2 BE[2607]                	mov	si, Msg_NO
   185 000000D5 E85901                  	call	print_msg 
   186                                  
   187                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   188                                  ; Nextline & Exit
   189                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   190                                  
   191                                  R_16:
   192 000000D8 BE[1E07]                	mov	si, CRLF
   193 000000DB E85301                  	call	print_msg
   194 000000DE B8004C                  	mov	ax, 4C00h		; terminate
   195 000000E1 CD21                    	int	21h
   196                                  
   197                                  R_17:
   198 000000E3 BE[4705]                	mov	si, RetroDOS_Welcome
   199 000000E6 E84801                  	call	print_msg
   200 000000E9 EBED                    	jmp	short R_16 ; Exit
   201                                  
   202                                  R_18:
   203 000000EB BE[2107]                	mov	si, Msg_YES
   204 000000EE E84001                  	call	print_msg
   205 000000F1 EB10                    	jmp	short R_21
   206                                  
   207                                  R_19:
   208 000000F3 BE[0D06]                	mov	si, msg_inv_image_file
   209 000000F6 EB84                    	jmp	short R_12
   210                                  
   211                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   212                                  ; Create image file
   213                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   214                                  
   215                                  R_20:
   216                                  	; create a new fd image file
   217                                  	;mov	dx, img_file_name
   218 000000F8 B90000                  	mov	cx, 0 ; File Attributes
   219 000000FB B43C                    	mov	ah, 3Ch ; MS-DOS Function = Create File
   220 000000FD CD21                    	int	21h
   221 000000FF 0F8276FF                	jc	R_11
   222                                  
   223                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   224                                  ; writing root directory sectors
   225                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   226                                  
   227                                  R_21:
   228 00000103 BE[1E07]                	mov	si, CRLF
   229 00000106 E82801                  	call	print_msg
   230                                  
   231                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   232                                  ; Open image file for writing
   233                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   234                                  
   235 00000109 B002                    	mov	al, 2 ; open for reading and writing
   236                                  	;mov	dx, img_file_name
   237 0000010B B43D                    	mov	ah, 3Dh ; open file
   238 0000010D CD21                    	int	21h
   239 0000010F 0F8266FF                	jc	R_11
   240                                  
   241 00000113 A3[4505]                	mov	[img_file_handle], ax
   242                                  
   243 00000116 BE[A706]                	mov	si, Msg_Writing_Root_Dir
   244 00000119 E81501                  	call	print_msg
   245                                  
   246 0000011C B81300                  	mov	ax, 19  ; Root Directory Address
   247 0000011F BB[3E09]                	mov	bx, FDFORMAT_FATBUFFER_S9
   248                                  R_22:
   249 00000122 E81B01                  	call	write_fd_sector
   250 00000125 0F82E500                	jc	R_29
   251 00000129 40                      	inc	ax
   252 0000012A 83F820                   	cmp	ax, 32 ; 19+14 = 33 (14 sectors, 224 entries)
   253 0000012D 76F3                    	jna	short R_22
   254                                  
   255 0000012F BE[1A07]                	mov	si, Msg_OK
   256 00000132 E8FC00                  	call	print_msg
   257                                  
   258                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   259                                  ; writing data sectors
   260                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   261                                  
   262 00000135 BE[C906]                	mov	si, Msg_Writing_Data_Sectors
   263 00000138 E8F600                  	call	print_msg
   264 0000013B B403                    	mov	ah, 3
   265 0000013D BB0700                  	mov	bx, 7
   266 00000140 CD10                    	int	10h ; Return Cursor Position
   267                                  	; DL = Column, DH= Line
   268 00000142 8916[E406]              	mov	[Cursor_Pos], dx
   269 00000146 B82100                  	mov	ax, 33  ; First Data Sector
   270                                  R_23:
   271 00000149 50                      	push	ax
   272 0000014A 40                      	inc	ax ; 1 based printing of 0 based sectors
   273 0000014B BE[E206]                	mov	si, Sector_Str + 3
   274 0000014E E81401                  	call	bin_to_decimal
   275 00000151 8B16[E406]              	mov	dx, [Cursor_Pos]
   276 00000155 B402                    	mov	ah, 2
   277 00000157 CD10                    	int	10h  ; Set Cursor Position
   278 00000159 E8D500                  	call	print_msg
   279 0000015C 58                      	pop	ax
   280 0000015D BB[3B07]                	mov	bx, FDFORMAT_SECBUFFER
   281 00000160 E8DD00                  	call	write_fd_sector
   282 00000163 0F82A700                	jc	R_29
   283                                  
   284 00000167 BB0700                  	mov	bx, 7
   285 0000016A 40                      	inc	ax
   286 0000016B 3D400B                  	cmp	ax, 2880
   287 0000016E 72D9                    	jb	short R_23
   288                                  
   289 00000170 BE[1707]                	mov	si, Msg_3dot_OK
   290 00000173 E8BB00                  	call	print_msg
   291                                  
   292                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   293                                  ; writing FAT sectors
   294                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   295                                  
   296 00000176 BE[E606]                	mov	si, Msg_Writing_FAT_Sectors
   297 00000179 E8B500                  	call	print_msg
   298 0000017C B80100                  	mov	ax, 1  ; FAT Beginning Address
   299 0000017F BB[3B09]                	mov	bx, FDFORMAT_FATBUFFER
   300 00000182 E8BB00                  	call	write_fd_sector
   301 00000185 0F828500                	jc	R_29
   302 00000189 BB[3E09]                	mov	bx, FDFORMAT_FATBUFFER_S9
   303                                  R_24:
   304 0000018C 40                      	inc	ax
   305 0000018D E8B000                  	call	write_fd_sector
   306 00000190 727C                     	jc	short R_29
   307 00000192 83F809                  	cmp	ax, 9
   308 00000195 72F5                    	jb	short R_24
   309 00000197 BB[3B09]                	mov	bx, FDFORMAT_FATBUFFER
   310 0000019A 40                      	inc	ax
   311 0000019B E8A200                  	call	write_fd_sector
   312 0000019E 726E                    	jc	short R_29
   313 000001A0 BB[3E09]                	mov	bx, FDFORMAT_FATBUFFER_S9
   314                                  R_25:
   315 000001A3 40                      	inc	ax 
   316 000001A4 E89900                          call	write_fd_sector
   317 000001A7 7265                    	jc	short R_29
   318 000001A9 83F812                  	cmp	ax, 18
   319 000001AC 72F5                    	jb	short R_25
   320                                  
   321 000001AE BE[1A07]                	mov	si, Msg_OK
   322 000001B1 E87D00                  	call	print_msg
   323                                  
   324 000001B4 BE[0907]                	mov	si, Msg_Volume_Name
   325 000001B7 E87700                  	call	print_msg
   326 000001BA E8DD00                  	call	rw_char
   327 000001BD 7219                    	jc	short R_28
   328 000001BF 8A04                    	mov	al, [si]
   329 000001C1 3C20                    	cmp	al, 20h
   330 000001C3 7613                    	jna	short R_28
   331 000001C5 BF[5F03]                	mov	di, bsVolumeLabel
   332 000001C8 B90B00                  	mov	cx, 11
   333 000001CB 46                      	inc	si  
   334 000001CC EB06                    	jmp	short R_27  
   335                                  
   336                                  R_26:
   337 000001CE AC                      	lodsb
   338 000001CF 47                      	inc	di
   339 000001D0 3C20                    	cmp	al, 20h
   340 000001D2 7655                    	jna	short R_32
   341                                  R_27:
   342 000001D4 8805                    	mov 	[di], al
   343 000001D6 E2F6                    	loop	R_26
   344                                  
   345                                  R_28:
   346 000001D8 BE[8706]                	mov	si, Msg_Writing_Boot_Sector
   347 000001DB E85300                  	call	print_msg
   348                                  
   349 000001DE BE[5B03]                	mov	si, bsVolumeID
   350                                  
   351 000001E1 31C0                    	xor	ax, ax
   352 000001E3 CD1A                    	int	1Ah			; get time of day
   353 000001E5 8914                    	mov	[si], dx
   354 000001E7 894C02                  	mov	[si+2], cx		; set unique volume ID
   355                                  
   356 000001EA B402                    	mov	ah, 02h			; Return Current Time
   357 000001EC CD1A                    	int	1Ah
   358 000001EE 86E9                    	xchg	ch, cl
   359 000001F0 86F2                    	xchg	dh, dl
   360                                  
   361 000001F2 01D1                    	add	cx, dx  
   362 000001F4 014C02                  	add	[si+2], cx
   363                                                 
   364 000001F7 B404                    	mov	ah, 04h			; Return Current Date
   365 000001F9 CD1A                    	int	1Ah
   366 000001FB 86E9                    	xchg	ch,cl
   367 000001FD 86F2                    	xchg	dh,dl
   368                                  
   369 000001FF 01D1                    	add	cx, dx  
   370 00000201 014C02                  	add	[si+2], cx
   371                                  
   372 00000204 31C0                    	xor	ax, ax ; Boot sector
   373 00000206 BB[3403]                	mov	bx, RETRODOS_FAT12_FDBS	; location of boot code
   374                                  
   375 00000209 E83400                  	call	write_fd_sector
   376 0000020C 7313                    	jnc	short R_30
   377                                  R_29:
   378 0000020E 88E0                    	mov	al, ah ;  error code
   379 00000210 E86700                  	call	bin_to_hex
   380 00000213 A3[3507]                	mov 	[error_code], ax
   381                                  
   382 00000216 BE[1E07]                	mov	si, CRLF
   383 00000219 E81500                  	call	print_msg
   384                                  
   385 0000021C BE[2A07]                	mov	si, Msg_Error
   386 0000021F EB03                    	jmp	short R_31
   387                                  
   388                                  R_30:
   389 00000221 BE[1A07]                	mov	si, Msg_OK
   390                                  R_31:
   391 00000224 E80A00                  	call	print_msg
   392                                  
   393 00000227 CD20                    	int	20h	; Exit
   394                                  
   395                                  R_32:
   396 00000229 C60520                  	mov	byte [di], 20h
   397 0000022C 47                      	inc	di
   398 0000022D E2FA                    	loop	R_32
   399 0000022F EBA7                    	jmp	short R_28
   400                                  
   401                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   402                                  ; Print messages
   403                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   404                                  
   405                                  print_msg:
   406                                  
   407                                  print_msg_LOOP:
   408 00000231 AC                      	lodsb                           ; Load byte at DS:SI to AL
   409 00000232 20C0                    	and     al, al            
   410 00000234 7409                    	jz      short print_msg_OK       
   411 00000236 B40E                    	mov	ah, 0Eh			
   412 00000238 BB0700                  	mov     bx, 07h             
   413 0000023B CD10                    	int	10h			; BIOS Service func ( ah ) = 0Eh
   414                                  					; Write char as TTY
   415                                  					; AL-char BH-page BL-color
   416 0000023D EBF2                    	jmp     short print_msg_LOOP           
   417                                  
   418                                  print_msg_OK:
   419 0000023F C3                      	retn
   420                                  
   421                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   422                                  ; Writing a block (sector) to floppy disk image file
   423                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   424                                  
   425                                  write_fd_sector:
   426                                  	; writing a block (sector) to floppy disk image file
   427                                  	; Only for 1.44 MB FAT12 Floppy Disks
   428                                  	; INPUT -> AX = Logical Block (Sector) Address
   429                                  	; ES:BX = Sector Buffer
   430                                  	; OUTPUT ->
   431                                  	; cf = 0 -> AX = Logical Block (Sector) Address
   432                                  	; cf = 1 -> AH = Error Number
   433                                  	;
   434 00000240 50                      	push	ax ; sector
   435 00000241 53                      	push	bx ; buffer
   436 00000242 BA0002                  	mov	dx, 512
   437 00000245 F7E2                    	mul	dx
   438 00000247 89D1                    	mov	cx, dx
   439 00000249 89C2                    	mov	dx, ax
   440 0000024B 28C0                    	sub	al, al ; specified offset is from the beginning of the file
   441 0000024D B442                    	mov	ah, 42h ; seek (move file pointer)
   442 0000024F 8B1E[4505]              	mov 	bx, [img_file_handle]
   443 00000253 CD21                    	int	21h
   444                                  	;mov	bx, [img_file_handle]
   445 00000255 B90002                  	mov	cx, 512
   446 00000258 5A                      	pop	dx  ; buffer address
   447 00000259 B440                    	mov	ah, 40h ; write to file	
   448 0000025B CD21                    	int	21h
   449 0000025D 89D3                    	mov	bx, dx
   450 0000025F 7202                    	jc	short image_file_wr_err
   451 00000261 58                      	pop	ax ; sector
   452 00000262 C3                      	retn
   453                                  	
   454                                  image_file_wr_err:
   455 00000263 5A                      	pop	dx ; sector
   456 00000264 C3                      	retn
   457                                  	
   458                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   459                                  ; Convert byte to decimal number
   460                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   461                                  
   462                                  bin_to_decimal:
   463                                  	; INPUT: DS:SI = Target location
   464                                  	;        AX= Binary Number (Integer)
   465                                  	; OUTPUT: Decimal char at DS:SI
   466                                  	; SI decremented after every division
   467                                  	; till AX<10.
   468                                  	; CX, DX will be changed.
   469                                  	;
   470 00000265 B90A00                  	mov	cx, 10
   471                                  loc_btd_re_divide:
   472 00000268 31D2                    	xor	dx, dx
   473 0000026A F7F1                    	div	cx
   474 0000026C 80C230                  	add	dl,"0"
   475 0000026F 8814                    	mov	[si], dl
   476 00000271 83F800                  	cmp	ax, 0
   477 00000274 7603                    	jna	short pass_btd_re_divide
   478 00000276 4E                      	dec	si
   479 00000277 EBEF                    	jmp	short loc_btd_re_divide
   480                                  pass_btd_re_divide:
   481 00000279 C3                      	retn
   482                                  
   483                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   484                                  ; Convert byte to hexadecimal number
   485                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   486                                  
   487                                  bin_to_hex:
   488                                  	; INPUT ->
   489                                  	; 	AL = byte (binary number)
   490                                  	; OUTPUT ->
   491                                  	;	AX = hexadecimal string
   492                                  	;
   493 0000027A 6653                    	push	ebx
   494 0000027C 6631DB                  	xor	ebx, ebx
   495 0000027F 88C3                    	mov	bl, al
   496 00000281 C0EB04                  	shr	bl, 4
   497 00000284 678A9B[35050000]        	mov	bl, [ebx+hexchrs] 	 	
   498 0000028B 86D8                    	xchg	bl, al
   499 0000028D 80E30F                  	and	bl, 0Fh
   500 00000290 678AA3[35050000]        	mov	ah, [ebx+hexchrs] 
   501 00000297 665B                    	pop	ebx	
   502 00000299 C3                      	retn
   503                                  
   504                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   505                                  ; Read & Write characters
   506                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   507                                  
   508                                  rw_char:
   509                                  	; OUTPUT -> DS:SI = Entered String (ASCIIZ)
   510 0000029A BE[FD06]                	mov     si, StrVolumeName
   511 0000029D BB0700                  	mov     bx, 7
   512 000002A0 B403                    	mov     ah, 3
   513 000002A2 CD10                    	int     10h
   514 000002A4 8916[E406]              	mov     [Cursor_Pos], dx
   515                                  read_next_char:
   516 000002A8 30E4                    	xor     ah, ah
   517 000002AA CD16                    	int     16h
   518 000002AC 20C0                    	and     al, al
   519 000002AE 7439                    	jz      short loc_arrow    
   520 000002B0 3CE0                    	cmp     al, 0E0h          
   521 000002B2 7435                    	je      short loc_arrow
   522 000002B4 3C08                    	cmp     al, 8
   523 000002B6 753D                    	jne     short char_return
   524                                  loc_back:
   525 000002B8 B403                    	mov     ah, 3
   526 000002BA CD10                    	int     10h
   527 000002BC 3A16[E406]              	cmp     dl, byte [Cursor_Pos]
   528 000002C0 761F                    	jna     short loc_beep
   529                                  prev_column:
   530 000002C2 FECA                    	dec     dl
   531                                  set_cursor_pos:
   532 000002C4 B402                    	mov     ah, 2
   533 000002C6 CD10                    	int     10h
   534 000002C8 88D3                    	mov     bl, dl
   535 000002CA 2A1E[E406]              	sub     bl, byte [Cursor_Pos] 
   536 000002CE B90100                  	mov     cx,1
   537 000002D1 B409                    	mov     ah, 9
   538 000002D3 B020                    	mov     al, 20h
   539 000002D5 8800                    	mov     [si+bx], al
   540                                  loc_write_it:
   541 000002D7 B307                    	mov     bl, 7
   542 000002D9 CD10                    	int     10h
   543 000002DB 8B16[E406]              	mov     dx, [Cursor_Pos]
   544 000002DF EBC7                    	jmp     short read_next_char
   545                                  loc_beep:
   546 000002E1 B40E                    	mov     ah, 0Eh
   547 000002E3 B007                    	mov     al, 7
   548 000002E5 CD10                    	int     10h
   549 000002E7 EBBF                    	jmp     short read_next_char
   550                                  loc_arrow:    
   551 000002E9 80FC4B                  	cmp     ah, 4Bh
   552 000002EC 74CA                    	je      short loc_back
   553 000002EE 80FC53                  	cmp     ah, 53h
   554 000002F1 74C5                    	je      short loc_back
   555 000002F3 EBB3                    	jmp     short read_next_char
   556                                  char_return:
   557 000002F5 B403                    	mov     ah, 3
   558 000002F7 CD10                    	int     10h
   559                                  check_char_type:
   560 000002F9 3C20                    	cmp     al, 20h
   561 000002FB 7230                    	jb      short loc_escape
   562 000002FD 88D4                    	mov     ah, dl
   563 000002FF 2A26[E406]              	sub     ah, byte [Cursor_Pos] 
   564 00000303 80FC0A                  	cmp     ah, 10
   565 00000306 77D9                    	ja      short loc_beep
   566 00000308 3C7A                    	cmp     al, "z"
   567 0000030A 779C                    	ja      short read_next_char
   568 0000030C 3C61                    	cmp     al, "a"
   569 0000030E 7202                    	jb      short pass_capitalize
   570 00000310 24DF                    	and     al, 0DFh
   571                                  pass_capitalize:
   572 00000312 88E3                    	mov     bl, ah  ; 30/07/2011
   573 00000314 30E4                    	xor     ah, ah
   574 00000316 8900                    	mov     [si+bx], ax
   575 00000318 B307                    	mov     bl, 7
   576 0000031A B40E                    	mov     ah, 0Eh
   577 0000031C CD10                    	int     10h
   578 0000031E EB88                    	jmp     short read_next_char
   579                                  pass_escape:
   580 00000320 3C0D                    	cmp     al, 0Dh
   581 00000322 7584                    	jne     short read_next_char
   582 00000324 B40E                    	mov     ah, 0Eh
   583 00000326 CD10                    	int     10h
   584 00000328 B00A                    	mov     al, 0Ah
   585 0000032A CD10                    	int     10h
   586 0000032C C3                      	retn
   587                                  loc_escape:
   588 0000032D 3C1B                    	cmp     al, 1Bh
   589 0000032F 75EF                    	jne     short pass_escape
   590 00000331 F9                      	stc
   591 00000332 C3                      	retn
   592                                  
   593                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   594                                  ;  Data
   595                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   596                                  
   597 00000333 00                      	db	0
   598                                  
   599                                  RETRODOS_FAT12_FDBS:
   600 00000334 <incbin>                	incbin 'RDOSFDBS.BIN'
   601                                  
   602 00000534 00                      	db	0
   603                                  
   604                                  hexchrs:
   605 00000535 303132333435363738-     	db	'0123456789ABCDEF'
   606 0000053E 39414243444546     
   607                                  
   608                                  img_file_handle:
   609 00000545 0000                    	dw	0
   610                                  
   611                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   612                                  ;  Messages
   613                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   614                                  
   615                                  RetroDOS_Welcome:
   616 00000547 0D0A                    	db	0Dh, 0Ah
   617 00000549 524554524F20444F53-     	db	'RETRO DOS 1.44 MB FAT12 Floppy Disk Image Format Utility'
   618 00000552 20312E3434204D4220-
   619 0000055B 464154313220466C6F-
   620 00000564 707079204469736B20-
   621 0000056D 496D61676520466F72-
   622 00000576 6D6174205574696C69-
   623 0000057F 7479               
   624 00000581 0D0A                    	db	0Dh, 0Ah
   625 00000583 76312E302E32303032-     	db	"v1.0.200218  (c) Erdogan TAN 2018"
   626 0000058C 313820202863292045-
   627 00000595 72646F67616E205441-
   628 0000059E 4E2032303138       
   629 000005A4 0D0A                    	db	0Dh,0Ah
   630 000005A6 0D0A                    	db	0Dh,0Ah
   631 000005A8 55736167653A207266-     	db	'Usage: rfdimage <image file name> '
   632 000005B1 64696D616765203C69-
   633 000005BA 6D6167652066696C65-
   634 000005C3 206E616D653E20     
   635 000005CA 00                      	db	0
   636                                  
   637                                  msg_inv_file_name: 
   638 000005CB 0D0A                    	db	0Dh, 0Ah
   639 000005CD 496E76616C69642066-     	db	"Invalid file name !", 0Dh, 0Ah
   640 000005D6 696C65206E616D6520-
   641 000005DF 210D0A             
   642 000005E2 2846696C65206E616D-     	db	"(File name must fit to 8.3 DOS format) !"
   643 000005EB 65206D757374206669-
   644 000005F4 7420746F20382E3320-
   645 000005FD 444F5320666F726D61-
   646 00000606 74292021           
   647 0000060A 0D0A00                  	db	0Dh, 0Ah, 0
   648                                  
   649                                  msg_inv_image_file:
   650 0000060D 0D0A                    	db	0Dh, 0Ah
   651 0000060F 496E76616C69642066-     	db	"Invalid floppy disk image file !", 0Dh, 0Ah
   652 00000618 6C6F70707920646973-
   653 00000621 6B20696D6167652066-
   654 0000062A 696C6520210D0A     
   655 00000631 2846696C652073697A-     	db	"(File size must be 1474560 bytes) !"
   656 0000063A 65206D757374206265-
   657 00000643 203134373435363020-
   658 0000064C 6279746573292021   
   659 00000654 0D0A00                  	db	0Dh, 0Ah, 0  
   660                                  
   661                                  msg_overwrite_question1:
   662 00000657 0D0A                    	db	0Dh, 0Ah
   663 00000659 446F20796F75207761-     	db	'Do you want to overwrite '
   664 00000662 6E7420746F206F7665-
   665 0000066B 72777269746520     
   666 00000672 27                      	db	27h
   667 00000673 00                      	db	0
   668                                  
   669                                  msg_overwrite_question2: 
   670 00000674 27                      	db	27h
   671 00000675 2066696C6520            	db	' file '
   672 0000067B 00                      	db	0
   673                                  
   674                                  msg_yes_no:
   675 0000067C 285965732F4E6F293F-     	db	'(Yes/No)? ', 0		
   676 00000685 2000               
   677                                  
   678                                  Msg_Writing_Boot_Sector:
   679 00000687 57726974696E672072-     	db	"Writing retrodos boot sector...", 0
   680 00000690 6574726F646F732062-
   681 00000699 6F6F7420736563746F-
   682 000006A2 722E2E2E00         
   683                                  
   684                                  Msg_Writing_Root_Dir:
   685 000006A7 57726974696E672072-     	db	"Writing root directory sectors...", 0
   686 000006B0 6F6F74206469726563-
   687 000006B9 746F72792073656374-
   688 000006C2 6F72732E2E2E00     
   689                                  
   690                                  Msg_Writing_Data_Sectors:
   691 000006C9 57726974696E672064-     	db	"Writing data sector: ", 0
   692 000006D2 61746120736563746F-
   693 000006DB 723A2000           
   694                                  
   695                                  Sector_Str:
   696 000006DF 3030303000              	db	"0000", 0
   697                                  Cursor_Pos:
   698 000006E4 0000                    	dw	0
   699                                  
   700                                  Msg_Writing_FAT_Sectors:
   701 000006E6 57726974696E672046-     	db	"Writing FAT sectors...", 0
   702 000006EF 415420736563746F72-
   703 000006F8 732E2E2E00         
   704                                  
   705                                  StrVolumeName:
   706 000006FD 00<rept>                	times 	12 db  0
   707                                  
   708                                  Msg_Volume_Name:
   709 00000709 566F6C756D65204E61-     	db	"Volume Name: ", 0
   710 00000712 6D653A2000         
   711                                  
   712                                  Msg_3dot_OK:
   713 00000717 2E2E2E                  	db	"..."
   714                                  Msg_OK:
   715 0000071A 204F4B2E                	db	' OK.'
   716                                  CRLF:
   717 0000071E 0D0A00                  	db	0Dh, 0Ah, 0
   718                                  Msg_YES:
   719 00000721 2059455300              	db	' YES', 0
   720                                  Msg_NO:
   721 00000726 204E4F00                	db	' NO', 0
   722                                  
   723                                  Msg_Error:
   724 0000072A 0D0A                    	db	0Dh, 0Ah
   725 0000072C 4572726F72202120        	db	'Error ! '
   726 00000734 28                      	db	'('
   727                                  error_code:
   728 00000735 3030                    	dw	3030h
   729 00000737 68                      	db	'h'
   730 00000738 2920                    	db	') '
   731 0000073A 00                      	db	0
   732                                  
   733                                  FDFORMAT_SECBUFFER:
   734 0000073B F6<rept>                	times	512 db 0F6h
   735                                  FDFORMAT_FATBUFFER:
   736 0000093B F0                      	db	0F0h
   737 0000093C FF                      	db	0FFh
   738 0000093D FF                      	db	0FFh
   739                                  FDFORMAT_FATBUFFER_S9:
   740 0000093E 00<rept>                	times	512 db 0
   741                                  
   742 00000B3E 286329204572646F67-     	db	'(c) Erdogan TAN 2018'
   743 00000B47 616E2054414E203230-
   744 00000B50 3138               
   745                                  
   746                                  img_file_name:  
   747 00000B52 00<rept>                	times	13 db 0
   748                                  
   749                                  SizeOfFile equ $-100
