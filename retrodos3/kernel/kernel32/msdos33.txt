     1                                  ; ****************************************************************************
     2                                  ; MSDOS3.BIN (MSDOS 3.3 Kernel) - RETRO DOS v3.2 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 16/01/2024 (BugFix) - (Previous: 16/12/2022)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2019 (Retro DOS 3.0), 29/06/2019 (Retro DOS 3.1)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.14  
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	    ((nasm msdos3.asm -l msdos3.txt -o MSDOS3.BIN)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    15                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    16                                  ; ****************************************************************************
    17                                  ; main file: 'retrodos3.s'
    18                                  ; incbin 'MSDOS3.BIN' ; (DOSGROUP CODE SEGMENT)
    19                                  ; ----------------------------------------------------------------------------
    20                                  ; 07/07/2018 - Erdogan Tan
    21                                  ; (Note: I have not got MSDOS 3.3 kernel source files; so, I need to continue
    22                                  ; by using disassembled MSDOS.SYS -v3.3- and MSDOS 6.0 kernel source files.)
    23                                  ; ----------------------------------------------------------------------------
    24                                  ; MSDOS 6.0 Kernel source files:
    25                                  ;	MSDATA.ASM, 
    26                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    27                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC)
    28                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    29                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    30                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    31                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    32                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    33                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    34                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    35                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    36                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    37                                  ;
    38                                  ; MSDOS 2.0 Kernel source files:
    39                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    40                                  ;	MSCODE.ASM
    41                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    42                                  
    43                                  ; -----------------------------------------
    44                                  ; 20/05/2019 - MSDOS3.S - Retro DOS v3.0
    45                                  ; 29/06/2019 - MSDOS3.ASM - Retro DOS v3.1
    46                                  ; 17/07/2019 - MSDOS33.ASM - Retro DOS v3.2
    47                                  ; -----------------------------------------
    48                                  
    49                                  ;============================================================================
    50                                  ; DOSLINK
    51                                  ;============================================================================
    52                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    53                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    54                                  ;stdio time xenix xenix2
    55                                  
    56                                  ;============================================================================
    57                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    58                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    59                                  ;============================================================================
    60                                  ;
    61                                  ; ###########################################################################
    62                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    63                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    64                                  ; #			 Licensed to: Freeware version			    #
    65                                  ; ###########################################################################
    66                                  ;
    67                                  ; Input	MD5   :	EF2ADCA1CB3882118FD247DD4C672C81
    68                                  
    69                                  ; ---------------------------------------------------------------------------
    70                                  ; File Name   :	D:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS33.BIN
    71                                  ; Format      :	Binary file
    72                                  ; Base Address:	0000h Range: 0000h - 75CFh Loaded length: 75CFh
    73                                  ;============================================================================
    74                                  ; MSDOS33.BIN = IBMDOS.COM, 17/03/1987, 30159 bytes (IBM PC DOS 3.30 kernel)
    75                                  
    76                                  ;============================================================================
    77                                  ; MSDOS.ASM
    78                                  ;============================================================================
    79                                  
    80                                  ;TITLE   Standard MSDOS
    81                                  ;NAME    MSDOS_2
    82                                  
    83                                  ; Number of disk I/O buffers
    84                                  
    85                                  ;	INCLUDE STDSW.ASM
    86                                  ;       INCLUDE MSHEAD.ASM
    87                                  ;       INCLUDE MSDATA.ASM
    88                                  
    89                                  ;	END
    90                                  
    91                                  ;============================================================================
    92                                  ; STDSW.ASM
    93                                  ;============================================================================
    94                                  
    95                                  TRUE    EQU     0FFFFH
    96                                  FALSE   EQU     ~TRUE ; NOT TRUE
    97                                  
    98                                  ; Use the switches below to produce the standard Microsoft version or the IBM
    99                                  ; version of the operating system
   100                                  ;MSVER   EQU     false
   101                                  ;IBM     EQU     true
   102                                  ;WANG    EQU     FALSE
   103                                  ;ALTVECT EQU     FALSE
   104                                  
   105                                  ; Set this switch to cause DOS to move itself to the end of memory
   106                                  ;HIGHMEM EQU     FALSE
   107                                  
   108                                  ;	IF      IBM
   109                                  ESCCH   EQU     0			; character to begin escape seq.
   110                                  CANCEL  EQU     27			;Cancel with escape
   111                                  TOGLINS EQU     TRUE			;One key toggles insert mode
   112                                  TOGLPRN EQU     TRUE			;One key toggles printer echo
   113                                  ZEROEXT EQU     TRUE
   114                                  ;       ELSE
   115                                  ;       IF      WANG			;Are we assembling for WANG?
   116                                  ;ESCCH   EQU     1FH			;Yes. Use 1FH for escape character
   117                                  ;       ELSE
   118                                  ;ESCCH   EQU     1BH
   119                                  ;       ENDIF
   120                                  ;CANCEL  EQU     "X"-"@"		;Cancel with Ctrl-X
   121                                  ;TOGLINS EQU     WANG			;Separate keys for insert mode on
   122                                  					;and off if not WANG
   123                                  ;TOGLPRN EQU     FALSE			;Separate keys for printer echo on
   124                                  					;and off
   125                                  ;ZEROEXT EQU     TRUE
   126                                  ;        ENDIF
   127                                  
   128                                  ;============================================================================
   129                                  ; MSHEAD.ASM
   130                                  ;============================================================================
   131                                  
   132                                  ;--------------------------------------------------------------
   133                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   134                                  ;--------------------------------------------------------------
   135                                  
   136                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   137                                  ;        by Microsoft MSDOS development group:
   138                                  ;           Tim Paterson (Ret.)
   139                                  ;           Aaron Reynolds
   140                                  ;           Nancy Panners (Parenting)
   141                                  ;           Mark Zbikowski
   142                                  ;           Chris Peters (BIOS) (ret.)
   143                                  
   144                                  ; ****************** Revision History *************************
   145                                  ;          >> EVERY change must noted below!! <<
   146                                  ;
   147                                  ; 0.34 12/29/80 General release, updating all past customers
   148                                  ; 0.42 02/25/81 32-byte directory entries added
   149                                  ; 0.56 03/23/81 Variable record and sector sizes
   150                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   151                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   152                                  ; 0.75 04/17/81 Improve and correct buffer handling
   153                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   154                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   155                                  ; 1.00 04/28/81 Renumber for general release
   156                                  ; 1.01 05/12/81 Fix bug in `STORE'
   157                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   158                                  ;               RENAME fix, general cleanup
   159                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   160                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   161                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   162                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   163                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   164                                  ;               of smaller improvements
   165                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   166                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   167                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   168                                  ;               zero extent field in IBM version (back to 1.01!)
   169                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   170                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   171                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   172                                  ;               is searched first when possible to minimize I/O
   173                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   174                                  ;               full sector write when file is growing
   175                                  ;      03/09/82 Multiple I/O buffers
   176                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   177                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   178                                  ;               must invalidate all buffers (disk and directory).
   179                                  ; 1.27 03/31/82 Installable device drivers
   180                                  ;                 Function call 47 - Get pointer to device table list
   181                                  ;                 Function call 48 - Assign CON AUX LIST
   182                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   183                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   184                                  ;               call entries.  Most CS relative references changed to SS
   185                                  ;               relative with an eye toward putting a portion of the DOS in
   186                                  ;               ROM.  DOS source also broken into header, data and code pieces
   187                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   188                                  ;               return the current values.
   189                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   190                                  ;               call to return flag location (call 29)
   191                                  ;      04/15/82 Volume ID attribute added
   192                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   193                                  ;               avoid a CS relative reference.
   194                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   195                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   196                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   197                                  ;               call 49.
   198                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   199                                  ;               address of DPB
   200                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   201                                  ;               writting to console device via file I/O.  Added a console
   202                                  ;               output attribute to devices.
   203                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   204                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   205                                  ;               as devices....  pipes, redirection now possible
   206                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   207                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   208                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   209                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   210                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   211                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   212                                  ;               out back about 1.27 or so (oops).  ARR
   213                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   214                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   215                                  ;               RMDIR Xenix calls
   216                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   217                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   218                                  ;               Frees up lots of memory.
   219                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   220                                  ;               system buffers
   221                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   222                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   223                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   224                                  ;               changed to set file handle environment.
   225                                  ; 2.00 08/01/82 Number for IBM release
   226                                  ;      01/19/83 No environ bug in EXEC
   227                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   228                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   229                                  ;      01/27/83 Growcnt fixed for 32-bits
   230                                  ;      01/27/83 Find-first problem after create
   231                                  ; 2.01 02/17/83 International DOS
   232                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   233                                  ;               an IBM PC
   234                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   235                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   236                                  ; 2.10 03/09/83 Start of NETWORK support
   237                                  ;		New Buffer structure
   238                                  ;		New Sytem file table structure
   239                                  ;		FCB moved to internal representation
   240                                  ;		DOS re-organized
   241                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   242                                  ;		device interface.
   243                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   244                                  ;               an IBM PC
   245                                  ; 2.50 09/12/83 More network stuff
   246                                  ;
   247                                  ; *************************************************************
   248                                  
   249                                  ; ----------------------------------------------------------------------------
   250                                  ; EQUATES
   251                                  
   252                                  ; Interrupt Entry Points:
   253                                  
   254                                  ; INTBASE:      ABORT
   255                                  ; INTBASE+4:    COMMAND
   256                                  ; INTBASE+8:    BASE EXIT ADDRESS
   257                                  ; INTBASE+C:    CONTROL-C ABORT
   258                                  ; INTBASE+10H:  FATAL ERROR ABORT
   259                                  ; INTBASE+14H:  BIOS DISK READ
   260                                  ; INTBASE+18H:  BIOS DISK WRITE
   261                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   262                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   263                                  ; INTBASE+40H:  Long jump to CALL entry point
   264                                  
   265                                  ENTRYPOINTSEG   EQU     0CH
   266                                  MAXDIF          EQU     0FFFH
   267                                  SAVEXIT         EQU     10
   268                                  ;08/07/2018 - Retro DOS v3.0
   269                                  ;WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   270                                  
   271                                         ; INCLUDE DOSSYM.ASM
   272                                         ; INCLUDE DEVSYM.ASM
   273                                  
   274                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   275                                  ; PAGE
   276                                  ; There are three kinds of context resets that can occur during normal DOS
   277                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   278                                  ; be handles in a clean fashion that allows nested executions along with the
   279                                  ; ability to trap one's own errors.
   280                                  ;
   281                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   282                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   283                                  ;           follows:
   284                                  ;
   285                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   286                                  ;           Save it in static memory.
   287                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   288                                  ;
   289                                  ;           The interrupt service routine must preserve all registers and
   290                                  ;           return carry set iff the operation is to be aborted (via abort
   291                                  ;           system call), otherwise, carry is reset and the operation is
   292                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   293                                  ;           RESULTS.
   294                                  ;
   295                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   296                                  ;           restore INT int_ctrl_c from the saved vector.
   297                                  ;
   298                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   299                                  ;           also preserve registers and return one of three values in AL: 0 and
   300                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   301                                  ;           himself is not to issue the abort, rather, the dos will do it for
   302                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   303                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   304                                  ;
   305                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   306                                  ;           abort call.  This is reserved for knowledgeable system programs.
   307                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   308                                  
   309                                  ;SUBTTL SEGMENT DECLARATIONS
   310                                  
   311                                  ; The following are all of the segments used.  They are declared in the order
   312                                  ; that they should be placed in the executable
   313                                  
   314                                  ;
   315                                  ; segment ordering for MSDOS
   316                                  ;
   317                                  
   318                                  ;START           SEGMENT BYTE PUBLIC 'START'
   319                                  ;START           ENDS
   320                                  
   321                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   322                                  ;CONSTANTS       ENDS
   323                                  
   324                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   325                                  ;DATA            ENDS
   326                                  
   327                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   328                                  ;CODE            ENDS
   329                                  
   330                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   331                                  ;LAST            ENDS
   332                                  
   333                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   334                                  
   335                                  ; The following segment is defined such that the data/const classes appear
   336                                  ; before the code class for ROMification
   337                                  
   338                                  ;START		SEGMENT BYTE PUBLIC 'START'
   339                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   340                                  ;		JMP     DOSINIT
   341                                  ;START		ENDS
   342                                  
   343                                  ;============================================================================
   344                                  ; DOSSYM.ASM
   345                                  ;============================================================================
   346                                  
   347                                  ;<Control character definitions>
   348                                  
   349                                  c_DEL       EQU     7Fh         ;    ASCII rubout or delete previous char
   350                                  c_BS        EQU     08h         ; ^H ASCII backspace
   351                                  c_CR        EQU     0Dh         ; ^M ASCII carriage return
   352                                  c_LF        EQU     0Ah         ; ^J ASCII linefeed
   353                                  c_ETB       EQU     17h         ; ^W ASCII end of transmission
   354                                  c_NAK       EQU     15h         ; ^U ASCII negative acknowledge
   355                                  c_ETX       EQU     03h         ; ^C ASCII end of text
   356                                  c_HT        EQU     09h         ; ^I ASCII tab
   357                                  
   358                                  ;============================================================================
   359                                  ; BPB.INC, MSDOS 3.3, 1987
   360                                  ;============================================================================
   361                                  ; 09/07/2018 - Retro DOS v3.0
   362                                  
   363                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   364                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   365                                  ;									   ;
   366                                  
   367                                  ; BIOS PARAMETER BLOCK DEFINITION
   368                                  ; THIS STRUCTURE IS USED TO BUILD A FULL DPB
   369                                  
   370                                  struc BPBLOCK
   371 00000000 ????                    .SECSZ: resw 1		; Size in bytes of physical sector
   372 00000002 ??                      .CLUS:  resb 1		; Sectors/Alloc unit
   373 00000003 ????                    .RES:   resw 1		; Number of reserved sectors
   374 00000005 ??                      .FTCNT: resb 1		; Number of FATs
   375 00000006 ????                    .DRCNT: resw 1		; Number of directory entries
   376 00000008 ????                    .SCCNT: resw 1		; Total number of sectors
   377 0000000A ??                      .MEDIA: resb 1		; Media descriptor byte
   378 0000000B ????                    .FTSEC:	resw 1		; Number of sectors taken up by one FAT
   379                                  .size:
   380                                  endstruc
   381                                  
   382                                  ; 09/07/2018 - Retro DOS v3.0
   383                                  ; (BPB.INC, MSDOS 6.0, 1991)
   384                                  
   385                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   386                                  ;
   387                                  ;	The BPB contains information about the disk structure. It dates
   388                                  ;	back to the earliest FAT systems and so FAT information is
   389                                  ;	intermingled with physical driver information.
   390                                  ;
   391                                  ;	A boot sector contains a BPB for its device; for other disks
   392                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   393                                  ;	information in the DPB.
   394                                  ;
   395                                  ;	The BDS structure contains a BPB within it. 
   396                                  
   397                                  struc A_BPB
   398 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   399 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   400 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   401 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   402 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   403 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   404 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   405 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   406 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   407 0000000F ????                    .BPB_HEADS:		resw	1
   408 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   409 00000013 ????                    			resw	1
   410 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   411 00000017 ????                    			resw	1
   412 00000019 ????????????            			resb	6	; NOTE:  many times these
   413                                  ;					; 	 6 bytes are omitted
   414                                  ;					;	 when BPB manipulations
   415                                  ;					;	 are performed!
   416                                  .size:
   417                                  endstruc
   418                                  
   419                                  ;                                                                          ;
   420                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   421                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   422                                  
   423                                  ;============================================================================
   424                                  ; BUFFER.INC, MSDOS 6.0, 1991
   425                                  ;============================================================================
   426                                  ; 04/05/2019 - Retro DOS v4.0
   427                                  
   428                                  ; 22/07/2019 - Retro DOS v3.2
   429                                  
   430                                  ; <Disk I/O Buffer Header>
   431                                  
   432                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   433                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   434                                  ;									   ;
   435                                  
   436                                  ; Field definition for I/O buffer information
   437                                  
   438                                  struc BUFFINFO
   439                                  ; MSDOS 3.3
   440 00000000 ????????                .buf_link:	resd 1		; Pointer to next buffer in list  ; Retro DOS v3.2
   441                                  ; MSDOS 6.0
   442                                  ;.buf_next:	resw 1		; Pointer to next buffer in list
   443                                  ;.buf_prev:	resw 1		; Pointer to prev buffer in list
   444 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   445                                  				; SFT table index (bit 7 = 1)
   446                                  				; = FFH if buffer free
   447 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   448                                  				;	= 0 if Local device buffer
   449                                  				; Bit 6 = 1 if buffer dirty
   450                                  				; Bit 5 = Reserved
   451                                  				; Bit 4 = Search bit (bit 7 = 1)
   452                                  				; Bit 3 = 1 if buffer is DATA
   453                                  				; Bit 2 = 1 if buffer is DIR
   454                                  				; Bit 1 = 1 if buffer is FAT
   455                                  				; Bit 0 = Reserved
   456 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   457                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   458 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   459 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   460 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   461 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   462 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   463                                  .size:	; 20 bytes
   464                                  endstruc
   465                                  
   466                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   467                                  				;For buf_flags bit 7 = 1, this is the byte
   468                                  				;offset of the start of the buffer in
   469                                  				;the file pointed to by buf_ID. Thus
   470                                  				;the buffer starts at location
   471                                  				;buf_offset in the file and contains
   472                                  				;buf_fill bytes.
   473                                  
   474                                  BUFINSIZ        EQU     BUFFINFO.size
   475                                  
   476                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   477                                  
   478                                  ;Flag byte masks
   479                                  buf_isnet	EQU	10000000b
   480                                  buf_dirty	EQU	01000000b
   481                                  ;***
   482                                  buf_visit	EQU	00100000b
   483                                  ;***
   484                                  buf_snbuf	EQU	00010000b
   485                                  
   486                                  buf_isDATA	EQU	00001000b
   487                                  buf_isDIR	EQU	00000100b
   488                                  buf_isFAT	EQU	00000010b
   489                                  buf_type_0	EQU	11110001b	; AND sets type to "none"
   490                                  
   491                                  buf_NetID	EQU	BUFINSIZ
   492                                  
   493                                  ;                                                                          ;
   494                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   495                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   496                                  
   497                                  ; <User stack inside of system call>
   498                                  ; Location of user registers relative user stack pointer
   499                                  
   500                                  struc	user_env   ; user_environ
   501 00000000 ????                    .user_AX: resw 1
   502 00000002 ????                    .user_BX: resw 1
   503 00000004 ????                    .user_CX: resw 1
   504 00000006 ????                    .user_DX: resw 1
   505 00000008 ????                    .user_SI: resw 1
   506 0000000A ????                    .user_DI: resw 1
   507 0000000C ????                    .user_BP: resw 1
   508 0000000E ????                    .user_DS: resw 1
   509 00000010 ????                    .user_ES: resw 1
   510 00000012 ????                    .user_IP: resw 1
   511 00000014 ????                    .user_CS: resw 1
   512 00000016 ????                    .user_F:  resw 1
   513                                  .size:
   514                                  endstruc
   515                                  
   516                                  ; 09/07/2018 - Retro DOS v3.0
   517                                  ; (VECTOR.INC, MSDOS 3.3, 1987)
   518                                  ; ----------------------------------------------------------------------------
   519                                  
   520                                  ; <interrupt definitions>
   521                                  
   522                                  INTTAB          EQU     20H
   523                                  INTBASE         EQU     4 * INTTAB
   524                                  ENTRYPOINT      EQU     INTBASE+40H
   525                                  
   526                                  ;	IF      ALTVECT
   527                                  ;ALTTAB  EQU     0F0H
   528                                  ;ALTBASE EQU     4 * ALTTAB
   529                                  ;	ENDIF
   530                                  
   531                                  ;
   532                                  ; interrupt assignments
   533                                  ;
   534                                  ;	IF	NOT ALTVECT
   535                                  int_abort	    EQU     INTTAB	; abort process
   536                                  int_command	    EQU     int_abort+1 ; call MSDOS
   537                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   538                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   539                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   540                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   541                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   542                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   543                                  					; resident
   544                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   545                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   546                                  ;									   ;
   547                                  int_spooler	    EQU     int_abort+8 ; spooler call
   548                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   549                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   550                                  ;									   ;
   551                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   552                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   553                                  ;	ELSE
   554                                  ;int_abort	    EQU     INTTAB	; abort process
   555                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   556                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   557                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   558                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   559                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   560                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   561                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   562                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   563                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   564                                  ;									   ;
   565                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   566                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   567                                  ;									   ;
   568                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   569                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   570                                  ;	ENDIF
   571                                  
   572                                  addr_int_abort		EQU    4 * int_abort
   573                                  addr_int_command	EQU    4 * int_command
   574                                  addr_int_terminate	EQU    4 * int_terminate
   575                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   576                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   577                                  addr_int_disk_read	EQU    4 * int_disk_read
   578                                  addr_int_disk_write	EQU    4 * int_disk_write
   579                                  addr_int_keep_process	EQU    4 * int_keep_process
   580                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   581                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   582                                  ;									   ;
   583                                  addr_int_spooler	EQU    4 * int_spooler
   584                                  addr_int_fastcon	EQU    4 * int_fastcon
   585                                  addr_int_IBM		EQU    4 * int_IBM
   586                                  ;									   ;
   587                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   588                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   589                                  
   590                                  
   591                                  ; <Disk map>
   592                                  ;  MSDOS partitions the disk into 4 sections:
   593                                  ;
   594                                  ;  phys sector 0:   +-------------------+
   595                                  ;       |           | boot/reserved     |
   596                                  ;       |           +-------------------+
   597                                  ;       |           |  File allocation  |
   598                                  ;       v           |      table(s)     |
   599                                  ;                   |  (multiple copies |
   600                                  ;                   |     are kept)     |
   601                                  ;                   +-------------------+
   602                                  ;                   |     Directory     |
   603                                  ;                   +-------------------+
   604                                  ;                   |     File space    |
   605                                  ;                   +-------------------+
   606                                  ;                   |   Unaddressable   |
   607                                  ;                   |  (to end of disk) |
   608                                  ;                   +-------------------+
   609                                  ;
   610                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   611                                  ; adjusted to maximize the file space addressable.
   612                                  
   613                                  ; BREAK <Directory entry>
   614                                  
   615                                  ;
   616                                  ;       +---------------------------+
   617                                  ;       |  (12 BYTE) filename/ext   |       0       0
   618                                  ;       +---------------------------+
   619                                  ;       |     (BYTE) attributes     |       11      B
   620                                  ;       +---------------------------+
   621                                  ;       |    (10 BYTE) reserved     |       12      C
   622                                  ;       +---------------------------+
   623                                  ;       | (WORD) time of last write |       22      16
   624                                  ;       +---------------------------+
   625                                  ;       | (WORD) date of last write |       24      18
   626                                  ;       +---------------------------+
   627                                  ;       |   (WORD) First cluster    |       26      1A
   628                                  ;       +---------------------------+
   629                                  ;       |     (DWORD) file size     |       28      1C
   630                                  ;       +---------------------------+
   631                                  ;
   632                                  ;   First byte of filename  = E5 -> free directory entry
   633                                  ;                           = 00 -> end of allocated directory
   634                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   635                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   636                                  ;
   637                                  struc dir_entry
   638 00000000 <res Bh>                .dir_name:	resb 11			; file name
   639 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   640 0000000C <res Ah>                .dir_pad:	resb 10			; reserved for expansion
   641 00000016 ????                    .dir_time:	resw 1			; time of last write
   642 00000018 ????                    .dir_date:	resw 1			; date of last write
   643 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   644 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   645 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   646                                  .size:
   647                                  endstruc
   648                                  
   649                                  attr_read_only      EQU      1h
   650                                  attr_hidden         EQU      2h
   651                                  attr_system         EQU      4h
   652                                  attr_volume_id      EQU      8h
   653                                  attr_directory      EQU     10h
   654                                  attr_archive        EQU     20h
   655                                  ;09/07/2018 - Retro DOS v3.0
   656                                  ;(DIRENT.INC, MSDOS 3.3, 1987)
   657                                  attr_device	    EQU     40h	; This is a VERY special bit.
   658                                  				;   NO directory entry on a disk EVER
   659                                  				;   has this bit set. It is set non-zero
   660                                  				;   when a device is found by GETPATH
   661                                  
   662                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   663                                                                          ; OR of hard attributes for FINDENTRY
   664                                  
   665                                  attr_ignore         EQU     attr_read_only+attr_archive
   666                                                                          ; ignore this(ese) attribute(s)
   667                                                                          ; during search first/next
   668                                  
   669                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   670                                                                          ; changeable via CHMOD
   671                                  
   672                                  ; 09/08/2018 - Retro DOS v3.0
   673                                  ; (DIRENT.INC, MSDOS 6,0, 1991)
   674                                  DIRFREE 	equ	0E5h	; stored in dir_name[0] to indicate free slot
   675                                  
   676                                  ; <File allocation Table information>
   677                                  ;
   678                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on the
   679                                  ; disk.  These entries are packed, two for every three bytes.  The contents of
   680                                  ; entry number N is found by 1) multiplying N by 1.5; 2) adding the result to
   681                                  ; the base address of the Allocation Table; 3) fetching the 16-bit word at this
   682                                  ; address; 4) If N was odd (so that N*1.5 was not an integer), shift the word
   683                                  ; right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry number zero
   684                                  ; is used as an end-of-file trap in the OS and is passed to the BIOS to help
   685                                  ; determine disk format.  Entry 1 is reserved for future use.  The first
   686                                  ; available allocation unit is assigned entry number two, and even though it is
   687                                  ; the first, is called cluster 2.  Entries greater than 0FF8H are end of file
   688                                  ; marks; entries of zero are unallocated.  Otherwise, the contents of a FAT
   689                                  ; entry is the number of the next cluster in the file.
   690                                  ;
   691                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would do
   692                                  ; because these clusters show as allocated, but are not part of any allocation
   693                                  ; chain and thus will never be allocated to a file.  A particular number is
   694                                  ; selected so that disk checking programs know what to do (ie.  a cluster with
   695                                  ; entry FF7H which is not in a chain is not an error).
   696                                  
   697                                  ;DIRSTRLEN       EQU     64	; Max length in bytes of directory strings
   698                                  
   699                                  ;============================================================================
   700                                  ; DPB.INC, MSDOS 6.0, 1991
   701                                  ;============================================================================
   702                                  ; 24/04/2019 - Retro DOS v4.0
   703                                  
   704                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   705                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   706                                  
   707                                  ; 24/07/2019 - Retro DOS v3.2
   708                                  
   709                                  ; ---------------------------------------------------------------------------
   710                                  ;**	DPB - Drive Parameter Block
   711                                  ;
   712                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   713                                  ;	possibly inaccurate deductions from code study... - jgl
   714                                  ;
   715                                  ;	The DPB is DOS's main structure for describing block devices.
   716                                  ;	It contains info about the "Drive" intermingled with info about
   717                                  ;	the FAT file system which is presumably on the drive.  I don't know
   718                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   719                                  ;
   720                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   721                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   722                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   723                                  ; ---------------------------------------------------------------------------
   724                                  
   725                                  struc	DPB
   726 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   727 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   728 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   729 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   730 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   731 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   732 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   733 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   734 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   735 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   736                                  ; MSDOS 3.3
   737                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   738                                  ; MSDOS 6.0
   739 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   740 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   741 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   742 00000017 ??                      .MEDIA:		resb 1		; Media byte
   743 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   744                                  				; check the first time this DPB is used
   745 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   746 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   747 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   748                                  .size:
   749                                  endstruc
   750                                  
   751                                  DPBSIZ  EQU     DPB.size ; = 33	; Size of the structure in bytes
   752                                  
   753                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   754                                  
   755                                  ;                                                                          ;
   756                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   757                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   758                                  
   759                                  ; 12/07/2018 - Retro DOS v3.0 
   760                                  ; (DOSSYM.INC, MSDOS 6.0, 1991)
   761                                  
   762                                  ;**	Character Type Flags
   763                                  ;
   764                                  ;	These flags are used in a lookup table indexed by the character code.
   765                                  ;	They're used to quickly classify characters when parsing paths.
   766                                  ;	I think that these are only used to parse FCBs - jgl
   767                                  
   768                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   769                                  FDELIM	equ 2		; is a delimiter
   770                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   771                                  FFCB	equ 8		; is valid in an FCB
   772                                  
   773                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   774                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   775                                  ;                                                                          ;
   776                                  devid_file_clean        EQU     40h     ; true if file and not written
   777                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   778                                  
   779                                  devid_device            EQU     80h     ; true if a device
   780                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   781                                  devid_device_raw        EQU     20h     ; true if in raw mode
   782                                  devid_device_special    EQU     10h     ; true if special device
   783                                  devid_device_clock      EQU     08h     ; true if clock device
   784                                  devid_device_null       EQU     04h     ; true if null device
   785                                  devid_device_con_out    EQU     02h     ; true if console output
   786                                  devid_device_con_in     EQU     01h     ; true if consle input
   787                                  
   788                                  ;
   789                                  ; structure of devid field as returned by IOCTL is:
   790                                  ;
   791                                  ;       BIT     7   6   5   4   3   2   1   0
   792                                  ;             |---|---|---|---|---|---|---|---|
   793                                  ;             | I | E | R | S | I | I | I | I |
   794                                  ;             | S | O | A | P | S | S | S | S |
   795                                  ;             | D | F | W | E | C | N | C | C |
   796                                  ;             | E |   |   | C | L | U | O | I |
   797                                  ;             | V |   |   | L | K | L | T | N |
   798                                  ;             |---|---|---|---|---|---|---|---|
   799                                  ;       ISDEV = 1 if this channel is a device
   800                                  ;             = 0 if this channel is a disk file
   801                                  ;
   802                                  ;       If ISDEV = 1
   803                                  ;
   804                                  ;             EOF = 0 if End Of File on input
   805                                  ;             RAW = 1 if this device is in Raw mode
   806                                  ;                 = 0 if this device is cooked
   807                                  ;             ISCLK = 1 if this device is the clock device
   808                                  ;             ISNUL = 1 if this device is the null device
   809                                  ;             ISCOT = 1 if this device is the console output
   810                                  ;             ISCIN = 1 if this device is the console input
   811                                  ;
   812                                  ;       If ISDEV = 0
   813                                  ;             EOF = 0 if channel has been written
   814                                  ;             Bits 0-5  are  the  block  device  number  for
   815                                  ;                 the channel (0 = A, 1 = B, ...)
   816                                  ;
   817                                  devid_ISDEV     EQU     80h
   818                                  devid_EOF       EQU     40h
   819                                  devid_RAW       EQU     20h
   820                                  devid_SPECIAL   EQU     10H
   821                                  devid_ISCLK     EQU     08h
   822                                  devid_ISNUL     EQU     04h
   823                                  devid_ISCOT     EQU     02h
   824                                  devid_ISCIN     EQU     01h
   825                                  
   826                                  devid_block_dev EQU     1Fh             ; mask for block device number
   827                                  
   828                                  ; 08/07/2018 - Retro DOS v3.0
   829                                  ; (PDB.INC, MSDOS 6.0, 1991)
   830                                  ; ----------------------------------------------------------------------------
   831                                  ; BREAK <Process data block>
   832                                  ;
   833                                  ;**	Process data block (otherwise known as program header)
   834                                  ;
   835                                  
   836                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
   837                                  ;	can be rearranged here, ever.  Reserved areas are probably safe
   838                                  ;	for use.
   839                                  
   840                                  FILPERPROC	EQU     20
   841                                  
   842                                  struc PDB	; Process_data_block
   843 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   844 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   845 00000004 ??                                      resb 1
   846 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   847 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   848 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   849 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   850 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   851 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   852 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   853 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   854 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
   855 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
   856 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
   857 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
   858 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
   859 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
   860 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
   861 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
   862 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   863 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
   864                                  				;  an extended FCB
   865                                  ;endstruc 	; MSDOS 3.3
   866                                  	  	; MSDOS 6.0
   867 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
   868 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
   869 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
   870 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
   871                                  endstruc
   872                                  
   873                                  ; BREAK <EXEC and EXE file structures>
   874                                  ;
   875                                  ; EXEC arg block - load/go program
   876                                  ;
   877                                  
   878                                  ;
   879                                  ; The following get used as arguments to the EXEC system call. They indicate
   880                                  ; whether or not the program is executed or whether or not a program header
   881                                  ; gets created.
   882                                  ;
   883                                  exec_func_no_execute    EQU 1           ; no execute bit
   884                                  exec_func_overlay       EQU 2           ; overlay bit
   885                                  
   886                                  struc EXEC0
   887 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
   888 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
   889 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
   890 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
   891                                  .size:
   892                                  endstruc
   893                                  
   894                                  struc EXEC1
   895 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
   896 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
   897 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
   898 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
   899 0000000E ????                    .SP:		resw 1		; stack pointer of program
   900 00000010 ????                    .SS:		resw 1		; stack seg register of program
   901 00000012 ????                    .IP:		resw 1		; entry point IP
   902 00000014 ????                    .CS:		resw 1		; entry point CS
   903                                  .size:
   904                                  endstruc
   905                                  
   906                                  struc EXEC3
   907 00000000 ????                    .load_addr:	resw 1		; seg address of load point
   908 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
   909                                  endstruc
   910                                  
   911                                  ; 02/08/2018 (MSDOS 6.0, EXEC.INC, 1991)
   912                                  ;**	Exit codes (in upper byte) for terminating programs
   913                                  
   914                                  EXIT_TERMINATE		EQU	0
   915                                  EXIT_ABORT		EQU	0
   916                                  EXIT_CTRL_C		EQU	1
   917                                  EXIT_HARD_ERROR 	EQU	2
   918                                  EXIT_KEEP_PROCESS	EQU	3
   919                                  
   920                                  ;
   921                                  ; EXE file header
   922                                  ;
   923                                  
   924                                  struc EXE
   925 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
   926 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
   927 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
   928 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
   929 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
   930 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
   931 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
   932 0000000E ????                    .SS:          resw 1		; stack of image
   933 00000010 ????                    .SP:          resw 1		; SP of image
   934 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
   935 00000014 ????                    .IP:          resw 1		; IP of entry
   936 00000016 ????                    .CS:          resw 1		; CS of entry
   937 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
   938 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
   939 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
   940                                  .size:
   941                                  endstruc
   942                                  
   943                                  exe_valid_signature     EQU 5A4Dh
   944                                  exe_valid_old_signature EQU 4D5Ah
   945                                  
   946                                  struc symbol_entry
   947 00000000 ????????                .value:	resd 1
   948 00000004 ????                    .type:	resw 1
   949 00000006 ??                      .len:	resb 1
   950 00000007 <res FFh>               .name:	resb 255
   951                                  endstruc
   952                                  
   953                                  ; 07/07/2018 - Retro DOS v3.0
   954                                  ; MSDOS 6.0 (SF.INC, 1991)
   955                                  ; ----------------------------------------------------------------------------
   956                                  ;**	SF.INC - System File Table
   957                                  ;
   958                                  ;   AN000   version 4.00   Jan. 1988
   959                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   960                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   961                                  
   962                                  ;**	System File Table SuperStructure
   963                                  ;
   964                                  ;	The system file table entries are allocated in contiguous groups.
   965                                  ;	There may be more than one such groups; the SF "superstructure"
   966                                  ;	tracks the groups.
   967                                  
   968                                  struc	SFT
   969 00000000 ????????                .SFLink:	resd 1
   970 00000004 ????                    .SFCount:	resw 1		; number of entries
   971 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   972                                  .size:
   973                                  endstruc
   974                                  
   975                                  ; 07/07/2018 - Retro DOS v3.0
   976                                  ; MSDOS 6.0 (SF.INC, 1991)
   977                                  
   978                                  ; ---------------------------------------------------------------------------
   979                                  ;**	System file table entry
   980                                  ;
   981                                  ;	These are the structures which are at SFTABLE in the SF structure.
   982                                  ; ---------------------------------------------------------------------------
   983                                  
   984                                  ; 25/04/2019 - Retro DOS v4.0
   985                                  ; 24/04/2019 - Retro DOS v3.2
   986                                  
   987                                  struc SF_ENTRY
   988 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   989                                  				;   if FCB then ref count
   990 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   991 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   992 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   993                                  				; Bit 15 = 1 if remote file
   994                                  				;	 = 0 if local file or device
   995                                  				; Bit 14 = 1 if date/time is not to be
   996                                  				;   set from clock at CLOSE.  Set by
   997                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   998                                  				;   other reseters of the dirty bit
   999                                  				;   (WRITE)
  1000                                  				; Bit 13 = Pipe bit (reserved)
  1001                                  				;
  1002                                  				; Bits 0-7 (old FCB_devid bits)
  1003                                  				; If remote file or local file, bit
  1004                                  				; 6=0 if dirty Device ID number, bits
  1005                                  				; 0-5 if local file.
  1006                                  				; bit 7=0 for local file, bit 7
  1007                                  				;      =1 for local I/O device
  1008                                  				; If local I/O device, bit 6=0 if EOF (input)
  1009                                  				;		Bit 5=1 if Raw mode
  1010                                  				;		Bit 0=1 if console input device
  1011                                  				;		Bit 1=1 if console output device
  1012                                  				;		Bit 2=1 if null device
  1013                                  				;		Bit 3=1 if clock device
  1014 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
  1015                                  				; to device header if local device,
  1016                                  				; points to net device header if
  1017                                  				; remote
  1018 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
  1019 0000000D ????                    .sf_time:	resw	1	; Time associated with file
  1020 0000000F ????                    .sf_date:	resw	1	; Date associated with file
  1021 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
  1022 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
  1023                                  
  1024                                  ; Starting here, the next 7 bytes may be used by the file system to store
  1025                                  ; an ID
  1026                                  
  1027                                  ; 09/07/2018 - Retro DOS v3.0
  1028                                  
  1029                                  ; MSDOS 3.3 SF.INC, 1987
  1030                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
  1031                                  ;.sf_lstclus	resw	1	; Last cluster accessed
  1032                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
  1033                                  ;				; for this file
  1034                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
  1035                                  
  1036                                  ; MSDOS 6.0, SF.INC, 1991
  1037 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
  1038 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
  1039                                  				; for this file
  1040 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
  1041                                  
  1042                                  ; End of 7 bytes of file-system specific info.
  1043                                  
  1044 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
  1045                                  				; directory entry.  This is used by
  1046                                  				; close to detect file deleted and
  1047                                  				; disk changed errors.
  1048                                  ; SHARING INFO
  1049 0000002B ????????                .sf_chain:	resd	1	; link to next SF
  1050 0000002F ????                    .sf_UID:	resw	1
  1051 00000031 ????                    .sf_PID:	resw	1
  1052 00000033 ????                    .sf_MFT:	resw	1
  1053                                  
  1054                                  ; MSDOS 6.0, SF.INC, 1991
  1055 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
  1056 00000037 ????????                .sf_IFS_HDR:	resd	1
  1057                                  
  1058                                  .size:
  1059                                  endstruc
  1060                                  
  1061                                  ; 20/07/2018
  1062                                  ; MSDOS 3.3, SF.INC, 1987
  1063                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
  1064                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
  1065                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
  1066                                  ; MSDOS 6.0, SF.INC, 1991
  1067                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
  1068                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
  1069                                  
  1070                                  ; 19/07/2018
  1071                                  
  1072                                  ; MSDOS 3.3, SF.INC, 1987
  1073                                  
  1074                                  sf_default_number  EQU	5
  1075                                  
  1076                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE. This is
  1077                                  ; because an INT 24 may prevent us from 'freeing' it. We mark this as such
  1078                                  ; by placing a -1 in the ref_count field.
  1079                                  
  1080                                  sf_busy EQU -1
  1081                                  
  1082                                  ; mode mask for FCB detection
  1083                                  sf_isFCB		EQU	1000000000000000B
  1084                                  
  1085                                  ; Flag word masks
  1086                                  sf_isnet		EQU	1000000000000000B
  1087                                  sf_close_nodate 	EQU	0100000000000000B
  1088                                  sf_pipe 		EQU	0010000000000000B
  1089                                  sf_no_inherit		EQU	0001000000000000B
  1090                                  sf_net_spool		EQU	0000100000000000B
  1091                                  
  1092                                  ; 19/04/2018
  1093                                  sf_entry_size equ SF_ENTRY.size ; 53
  1094                                  
  1095                                  ;                                                                          ;
  1096                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1097                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1098                                  
  1099                                  ; 09/07/2018 - Retro DOS v3.0
  1100                                  ; (ARENA.INC, MSDOS 3.3, 1987)
  1101                                  ; ----------------------------------------------------------------------------
  1102                                  ;BREAK <Memory arena structure>
  1103                                  
  1104                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1105                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1106                                  ;                                                                          ;
  1107                                  ;
  1108                                  ; arena item
  1109                                  ;
  1110                                  
  1111                                  struc ARENA
  1112 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1113 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1114 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1115                                  ; MSDOS 6.0
  1116 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1117 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1118                                  .headersize:			
  1119                                  endstruc
  1120                                  
  1121                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1122                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1123                                  ; Change them and change ALLOC.ASM.
  1124                                  
  1125                                  arena_owner_system  EQU 0               ; free block indication
  1126                                  
  1127                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1128                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1129                                  
  1130                                  ; 04/08/2018 - Retro DOS v3.0
  1131                                  ; (ARENA.INC, MSDOS 6.0, 1991)
  1132                                  
  1133                                  FIRST_FIT	EQU	00000000B
  1134                                  BEST_FIT	EQU	00000001B
  1135                                  LAST_FIT	EQU	00000010B
  1136                                  
  1137                                  ; MSDOS 6.0
  1138                                  ;LOW_FIRST	EQU	00000000B	; M001
  1139                                  ;HIGH_FIRST	EQU	10000000B	; M001
  1140                                  ;HIGH_ONLY	EQU	01000000B	; M001
  1141                                  
  1142                                  ;LINKSTATE	EQU	00000001B	; M002
  1143                                  
  1144                                  ;HF_MASK		EQU	~HIGH_FIRST	; M001
  1145                                  ;HO_MASK		EQU	~HIGH_ONLY	; M001
  1146                                  
  1147                                  ;STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1148                                  						; M026: used to mask of bits
  1149                                  						; M026: 6 & 7 of AllocMethod
  1150                                  ; 07/07/2018 - Retro DOS v3.0
  1151                                  ; (MI.INC, MSDOS 6.0, 1991)
  1152                                  ; ----------------------------------------------------------------------------
  1153                                  ;BREAK <Machine instruction, flag definitions and character types>
  1154                                  
  1155                                  mi_INT		EQU	0CDh
  1156                                  mi_Long_JMP	EQU	0EAh
  1157                                  mi_Long_CALL	EQU	09Ah
  1158                                  mi_Long_RET	EQU	0CBh
  1159                                  mi_Near_RET	EQU	0C3h
  1160                                  
  1161                                  ;			xxxxoditszxaxpxc
  1162                                  f_Overflow	EQU	0000100000000000B
  1163                                  f_Direction	EQU	0000010000000000B
  1164                                  f_Interrupt	EQU	0000001000000000B
  1165                                  f_Trace 	EQU	0000000100000000B
  1166                                  f_Sign		EQU	0000000010000000B
  1167                                  f_Zero		EQU	0000000001000000B
  1168                                  f_Aux		EQU	0000000000010000B
  1169                                  f_Parity	EQU	0000000000000100B
  1170                                  f_Carry 	EQU	0000000000000001B
  1171                                  
  1172                                  ; <Standard I/O assignments>
  1173                                  
  1174                                  stdin       EQU     0
  1175                                  stdout      EQU     1
  1176                                  stderr      EQU     2
  1177                                  stdaux      EQU     3
  1178                                  stdprn      EQU     4
  1179                                  
  1180                                  ; <Xenix subfunction assignments>
  1181                                  
  1182                                  open_for_read   EQU 0
  1183                                  open_for_write  EQU 1
  1184                                  open_for_both   EQU 2
  1185                                  
  1186                                  ; 13/07/2018 - Retro DOS v3.0
  1187                                  ; (FILEMODE.INC, MSDOS 6.0, 1991)
  1188                                  
  1189                                  access_mask	EQU 0Fh ; 09/08/2018
  1190                                  
  1191                                  EXEC_OPEN	EQU 3		; access code of 3 indicates that open was 
  1192                                  				; made from exec
  1193                                  SHARING_MASK	    equ 0F0h
  1194                                  SHARING_COMPAT	    equ 000h
  1195                                  SHARING_DENY_BOTH   equ 010h
  1196                                  SHARING_DENY_WRITE  equ 020h
  1197                                  SHARING_DENY_READ   equ 030h
  1198                                  SHARING_DENY_NONE   equ 040h
  1199                                  SHARING_NET_FCB     equ 070h
  1200                                  SHARING_NO_INHERIT  equ 080h
  1201                                  
  1202                                  ; 09/07/2018 - Retro DOS v3.0
  1203                                  ; (SYSCALL.INC, MSDOS 3.3, 1987)
  1204                                  ; ----------------------------------------------------------------------------
  1205                                  
  1206                                  ; <system call definitions>
  1207                                  
  1208                                  ABORT                           EQU 0   ;  0      0
  1209                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1210                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1211                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1212                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1213                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1214                                  RAW_CON_IO                      EQU 6   ;  6      6
  1215                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1216                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1217                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1218                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1219                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1220                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1221                                  DISK_RESET                      EQU 13  ; 13      D
  1222                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1223                                  FCB_OPEN                        EQU 15  ; 15      F
  1224                                  FCB_CLOSE                       EQU 16  ; 16     10
  1225                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1226                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1227                                  FCB_DELETE                      EQU 19  ; 19     13
  1228                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1229                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1230                                  FCB_CREATE                      EQU 22  ; 22     16
  1231                                  FCB_RENAME                      EQU 23  ; 23     17
  1232                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1233                                  SET_DMA                         EQU 26  ; 26     1A
  1234                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1235                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1236                                  ;                                                                          ;
  1237                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1238                                  ;                                                                          ;
  1239                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1240                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1241                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1242                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1243                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1244                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1245                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1246                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1247                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1248                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1249                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1250                                  GET_DATE                        EQU 42  ; 42     2A
  1251                                  SET_DATE                        EQU 43  ; 43     2B
  1252                                  GET_TIME                        EQU 44  ; 44     2C
  1253                                  SET_TIME                        EQU 45  ; 45     2D
  1254                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1255                                  ; Extended functionality group
  1256                                  GET_DMA                         EQU 47  ; 47     2F
  1257                                  GET_VERSION                     EQU 48  ; 48     30
  1258                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1259                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1260                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1261                                  ;                                                                          ;
  1262                                  GET_DPB                         EQU 50  ; 50     32
  1263                                  ;                                                                          ;
  1264                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1265                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1266                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1267                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1268                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1269                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1270                                  CHAR_OPER                       EQU 55  ; 55     37
  1271                                  INTERNATIONAL                   EQU 56  ; 56     38
  1272                                  ; XENIX CALLS
  1273                                  ;   Directory Group
  1274                                  MKDIR                           EQU 57  ; 57     39
  1275                                  RMDIR                           EQU 58  ; 58     3A
  1276                                  CHDIR                           EQU 59  ; 59     3B
  1277                                  ;   File Group
  1278                                  CREAT                           EQU 60  ; 60     3C
  1279                                  OPEN                            EQU 61  ; 61     3D
  1280                                  CLOSE                           EQU 62  ; 62     3E
  1281                                  READ                            EQU 63  ; 63     3F
  1282                                  WRITE                           EQU 64  ; 64     40
  1283                                  UNLINK                          EQU 65  ; 65     41
  1284                                  LSEEK                           EQU 66  ; 66     42
  1285                                  CHMOD                           EQU 67  ; 67     43
  1286                                  IOCTL                           EQU 68  ; 68     44
  1287                                  XDUP                            EQU 69  ; 69     45
  1288                                  XDUP2                           EQU 70  ; 70     46
  1289                                  CURRENT_DIR                     EQU 71  ; 71     47
  1290                                  ;    Memory Group
  1291                                  ALLOC                           EQU 72  ; 72     48
  1292                                  DEALLOC                         EQU 73  ; 73     49
  1293                                  SETBLOCK                        EQU 74  ; 74     4A
  1294                                  ;    Process Group
  1295                                  EXEC                            EQU 75  ; 75     4B
  1296                                  EXIT                            EQU 76  ; 76     4C
  1297                                  _WAIT				EQU 77  ; 77     4D
  1298                                  FIND_FIRST                      EQU 78  ; 78     4E
  1299                                  ;   Special Group
  1300                                  FIND_NEXT                       EQU 79  ; 79     4F
  1301                                  ; SPECIAL SYSTEM GROUP
  1302                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1303                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1304                                  ;                                                                          ;
  1305                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1306                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1307                                  GET_IN_VARS                     EQU 82  ; 82     52
  1308                                  SETDPB                          EQU 83  ; 83     53
  1309                                  ;                                                                          ;
  1310                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1311                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1312                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1313                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1314                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1315                                  ;                                                                          ;
  1316                                  DUP_PDB                         EQU 85  ; 85     55
  1317                                  ;                                                                          ;
  1318                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1319                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1320                                  RENAME                          EQU 86  ; 86     56
  1321                                  FILE_TIMES                      EQU 87  ; 87     57
  1322                                  ALLOCOPER			EQU 88	; 88	 58
  1323                                  ; Network extention system calls
  1324                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1325                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1326                                  CREATENEWFILE			EQU 91	; 91	 5B
  1327                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1328                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1329                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1330                                  ;									   ;
  1331                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1332                                  					;	    CloseByName, CloseUser,
  1333                                  					;	    CloseUserProcess,
  1334                                  					;	    GetOpenFileList
  1335                                  ;									   ;
  1336                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1337                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1338                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1339                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1340                                  XNAMETRANS			EQU 96	; 96	 60
  1341                                  PATHPARSE			EQU 97	; 97	 61
  1342                                  GETCURRENTPSP			EQU 98	; 98	 62
  1343                                  HONGEUL 			EQU 99	; 99	 63
  1344                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1345                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1346                                  ;									   ;
  1347                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1348                                  ;									   ;
  1349                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1350                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1351                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1352                                  GETSETCDPG			EQU 102 ; 102	 66
  1353                                  EXTHANDLE			EQU 103 ; 103	 67
  1354                                  COMMIT				EQU 104 ; 104	 68
  1355                                  
  1356                                  ; 09/07/2018 - Retro DOS v3.0
  1357                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1358                                  
  1359                                  ;GetSetMediaID			EQU 105 ; 105	 69
  1360                                  ;IFS_IOCTL			EQU 107 ; 107	 6B
  1361                                  ;ExtOpen 			EQU 108 ; 108	 6C
  1362                                  
  1363                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1364                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1365                                  ;                                                                          ;
  1366                                  ;ifdef ROMEXEC
  1367                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1368                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1369                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1370                                  ;endif
  1371                                  ;                                                                          ;
  1372                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1373                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1374                                  
  1375                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1376                                  ;OEM_C1				EQU 249 ; 249    F9
  1377                                  ;OEM_C2				EQU 250 ; 250    FA
  1378                                  ;OEM_C3				EQU 251 ; 251    FB
  1379                                  ;OEM_C4				EQU 252 ; 252    FC
  1380                                  ;OEM_C5				EQU 253 ; 253    FD
  1381                                  ;OEM_C6				EQU 254 ; 254    FE
  1382                                  ;OEM_C7				EQU 255 ; 255    FF
  1383                                  
  1384                                  ;============================================================================
  1385                                  ; VERSIONA.INC (MSDOS 3.3, 24/07/1987)
  1386                                  ;============================================================================
  1387                                  ; 08/07/2018 - Retro DOS 3.0
  1388                                  
  1389                                  MAJOR_VERSION   EQU     3
  1390                                  MINOR_VERSION   EQU     30
  1391                                  
  1392                                  ;============================================================================
  1393                                  ; DOSSYM_V211.ASM (-*-)
  1394                                  ;============================================================================
  1395                                  
  1396                                  ;DOS_MAJOR_VERSION   EQU      2
  1397                                  ;DOS_MINOR_VERSION   EQU     11
  1398                                  
  1399                                  ;============================================================================
  1400                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1401                                  ;============================================================================
  1402                                  ; 09/07/2018 - Retro DOS 3.0
  1403                                  
  1404                                  ;
  1405                                  ; Current structure of the data returned by the international call
  1406                                  ;
  1407                                  
  1408                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1409                                  .Date_tim_format:
  1410 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1411                                  .Currency_sym:
  1412 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1413                                  .Thous_sep:
  1414 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1415                                  .Decimal_sep:
  1416 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1417                                  .Date_sep:
  1418 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1419                                  .Time_sep:
  1420 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1421                                  .Bit_field:	
  1422 0000000F ??                      		RESB 1		; Bit values
  1423                                                                     ;   Bit 0 = 0 if currency symbol first
  1424                                                                     ;         = 1 if currency symbol last
  1425                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1426                                                                     ;         = 1 if space after currency symbol
  1427                                  .Currency_cents:
  1428 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1429                                  .Time_24:
  1430 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1431                                  .Map_call:
  1432 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1433 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1434                                  				;  in pieces.
  1435                                  .Data_sep:
  1436 00000016 ????                    		RESB	2	; Data list separator character
  1437                                  .size:		
  1438                                  endstruc
  1439                                  
  1440                                  ;
  1441                                  ; Max size of the block returned by the INTERNATIONAL call
  1442                                  ;
  1443                                  internat_block_max	EQU	32
  1444                                  
  1445                                  ;============================================================================
  1446                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1447                                  ;============================================================================
  1448                                  ; 08/07/2018 - Retro DOS v3.0
  1449                                  
  1450                                  ;SysInitVars STRUC
  1451                                  struc SYSI
  1452 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1453 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1454 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1455 0000000C ????????                .CON:	    resd 1		; CON device
  1456 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1457 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1458 00000016 ????????                .CDS:	    resd 1		; CDS list
  1459 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1460 0000001E ????                    .Keep:	    resw 1		; keep count
  1461 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1462 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1463 00000022 ????????                .DEV:	    resd 1		; device list
  1464                                  ; 09/07/2018
  1465                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1466                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1467 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1468 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1469 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1470 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1471 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splices being done
  1472 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1473 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1474 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1475 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1476 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1477 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1478 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1479                                  endstruc
  1480                                  ;SysInitVars ENDS
  1481                                  
  1482                                  ;This is added for more information exchange between DOS, BIOS.
  1483                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1484                                  
  1485                                  ;SysInitVars_Ext struc
  1486                                  struc SYSI_EXT
  1487 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1488 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1489                                  endstruc
  1490                                  ;SysInitVars_Ext ends
  1491                                  
  1492                                  ;============================================================================
  1493                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1494                                  ;============================================================================
  1495                                  ; 09/07/2018 - Retro DOS v3.0
  1496                                  
  1497                                  ;*** J.K.
  1498                                  ;General Guide -
  1499                                  ;Category Code:
  1500                                  ; 0... .... DOS Defined
  1501                                  ; 1... .... User defined
  1502                                  ; .xxx xxxx Code
  1503                                  
  1504                                  ;Function Code:
  1505                                  ; 0... .... Return error if unsupported
  1506                                  ; 1... .... Ignore if unsupported
  1507                                  ; .0.. .... Intercepted by DOS
  1508                                  ; .1.. .... Passed to driver
  1509                                  ; ..0. .... Sends data/commands to device
  1510                                  ; ..1. .... Quries data/info from device
  1511                                  ; ...x .... Subfunction
  1512                                  ;
  1513                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1514                                  ; function set.  It plays no critical role; some functions may contain both
  1515                                  ; command and query elements. The convention is that such commands are
  1516                                  ; defined as "sends data".
  1517                                  
  1518                                  ;*****************************;*
  1519                                  ; BLOCK DRIVERS 	      ;*
  1520                                  ;*****************************;*
  1521                                  
  1522                                  ; IOCTL SUB-FUNCTIONS
  1523                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1524                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1525                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1526                                  IOCTL_READ_HANDLE	EQU	2
  1527                                  IOCTL_WRITE_HANDLE	EQU	3
  1528                                  IOCTL_READ_DRIVE	EQU	4
  1529                                  IOCTL_WRITE_DRIVE	EQU	5
  1530                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1531                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1532                                  IOCTL_CHANGEABLE?	EQU	8
  1533                                  IOCTL_DeviceLocOrRem?	EQU	9
  1534                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1535                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1536                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1537                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1538                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1539                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1540                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1541                                  ; (MSDOS 6.0)
  1542                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1543                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1544                                  
  1545                                  ; GENERIC IOCTL CATEGORY CODES
  1546                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1547                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1548                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1549                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1550                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1551                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1552                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1553                                  
  1554                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1555                                  RAWIO			EQU	8
  1556                                  
  1557                                  ; RAWIO SUB-FUNCTIONS
  1558                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1559                                  GET_DEVICE_PARAMETERS	EQU	60H
  1560                                  SET_DEVICE_PARAMETERS	EQU	40H
  1561                                  READ_TRACK		EQU	61H
  1562                                  WRITE_TRACK		EQU	41H
  1563                                  VERIFY_TRACK		EQU	62H
  1564                                  FORMAT_TRACK		EQU	42H
  1565                                  ; (MSDOS 6.0)
  1566                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1567                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1568                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1569                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1570                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1571                                  
  1572                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1573                                  BUILD_DEVICE_BPB	EQU	000000001B
  1574                                  
  1575                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1576                                  INSTALL_FAKE_BPB	EQU	000000001B
  1577                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1578                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1579                                  
  1580                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1581                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1582                                  STATUS_FOR_FORMAT	EQU	000000001B
  1583                                  ; (MSDOS 6.0)
  1584                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1585                                  
  1586                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1587                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1588                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1589                                  
  1590                                  ; DEVICETYPE VALUES
  1591                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1592                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1593                                  DEV_5INCH		EQU	0
  1594                                  DEV_5INCH96TPI		EQU	1
  1595                                  DEV_3INCH720KB		EQU	2
  1596                                  DEV_8INCHSS		EQU	3
  1597                                  DEV_8INCHDS		EQU	4
  1598                                  DEV_HARDDISK		EQU	5
  1599                                  DEV_OTHER		EQU	7
  1600                                  ; (MSDOS 6.0)
  1601                                  ;DEV_3INCH1440KB	EQU	7
  1602                                  DEV_3INCH2880KB		EQU	9
  1603                                  ; Retro DOS v2.0 - 26/03/2018
  1604                                  ;;DEV_TAPE		EQU	6
  1605                                  ;;DEV_ERIMO		EQU	8
  1606                                  ;DEV_3INCH2880KB	EQU	9
  1607                                  DEV_3INCH1440KB		EQU	10
  1608                                  
  1609                                  ; (MSDOS 3.3)
  1610                                  ;MAX_DEV_TYPE		EQU	7
  1611                                  
  1612                                  ; (MSDOS 6.0)
  1613                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1614                                  					; CURRENTLY SUPPORT.
  1615                                  
  1616                                  struc A_SECTORTABLE
  1617 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1618 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1619                                  .size:
  1620                                  endstruc
  1621                                  
  1622                                  ;============================================================================
  1623                                  ; DEVSYM.ASM
  1624                                  ;============================================================================
  1625                                  
  1626                                  ;SUBTTL DEVICE TABLE AND SRH DEFINITION
  1627                                  ;PAGE
  1628                                  
  1629                                  ; 07/07/2018 - Retro DOS v3.0
  1630                                  ; (DEVSYM.INC, MSDOS 6.0, 1991)
  1631                                  
  1632                                  ;**	DevSym.inc - Device Symbols
  1633                                  
  1634                                  ; The device table list has the form:
  1635                                  struc	SYSDEV
  1636 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1637 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1638 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1639 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1640 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1641                                  .size:
  1642                                  endstruc
  1643                                  
  1644                                  ;
  1645                                  ; ATTRIBUTE BIT MASKS
  1646                                  ;
  1647                                  ; CHARACTER DEVICES:
  1648                                  ;
  1649                                  ; BIT 15 -> MUST BE 1
  1650                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1651                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1652                                  ;     12 -> UNUSED
  1653                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1654                                  ;     10 -> MUST BE 0
  1655                                  ;      9 -> MUST BE 0
  1656                                  ;      8 -> UNUSED
  1657                                  ;      7 -> UNUSED
  1658                                  ;      6 -> UNUSED
  1659                                  ;      5 -> UNUSED
  1660                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1661                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1662                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1663                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1664                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1665                                  ;
  1666                                  ; BLOCK DEVICES:
  1667                                  ;
  1668                                  ; BIT 15 -> MUST BE 0
  1669                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1670                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1671                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1672                                  ;	    THE SAME PLACE.
  1673                                  ;     12 -> UNUSED
  1674                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1675                                  ;     10 -> MUST BE 0
  1676                                  ;      9 -> MUST BE 0
  1677                                  ;      8 -> UNUSED
  1678                                  ;      7 -> UNUSED
  1679                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1680                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1681                                  ;      5 -> UNUSED
  1682                                  ;      4 -> UNUSED
  1683                                  ;      3 -> UNUSED
  1684                                  ;      2 -> UNUSED
  1685                                  ;      1 -> UNUSED
  1686                                  ;      0 -> UNUSED
  1687                                  ;
  1688                                  
  1689                                  ;Attribute bit masks
  1690                                  DEVTYP  EQU     8000H           ;Bit 15 - 1  if Char, 0 if block
  1691                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1692                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1693                                  
  1694                                  ; 09/07/2018 - Retro DOS
  1695                                  ; (DEVSYM.INC, MSDOS 3.3, 1987) 
  1696                                  
  1697                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1698                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1699                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1700                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1701                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1702                                  				;  ENTRY POINTS, 0 IF NOT
  1703                                  
  1704                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1705                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1706                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1707                                  				;  ITS CURRENT FORM.
  1708                                  
  1709                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1710                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1711                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1712                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1713                                  
  1714                                  ; 18/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
  1715                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query M017
  1716                                  
  1717                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1718                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1719                                  				;LOGICAL DRIVES, AND SUPPORTS
  1720                                  				;GENERIC IOCTL CALLS.
  1721                                  				;FOR CHARACTER DEVICES, THIS
  1722                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1723                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1724                                  
  1725                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1726                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1727                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1728                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1729                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1730                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1731                                  ; 23/07/2019 - Retro DOS v3.2
  1732                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1733                                  				; (MSDOS 6.0, DEVSYM.INC, 1991)
  1734                                  
  1735                                  ;Static Reguest Header
  1736                                  struc	SRHEAD
  1737 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1738 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1739 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1740 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1741 00000005 ????????????????                	resb 8		;Reserved for queue links
  1742                                  .size:
  1743                                  endstruc
  1744                                  
  1745                                  ;Status word masks
  1746                                  STERR   EQU     8000H           ;Bit 15 - Error
  1747                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1748                                  STDON   EQU     0100H           ;Bit 8 - Done
  1749                                  STECODE EQU     00FFH           ;Error code
  1750                                  WRECODE EQU     0
  1751                                  
  1752                                  ;Function codes
  1753                                  DEVINIT EQU     0               ;Initialization
  1754                                  DINITHL EQU     26              ;Size of init header
  1755                                  DEVMDCH EQU     1               ;Media check
  1756                                  DMEDHL  EQU     15              ;Size of media check header
  1757                                  DEVBPB  EQU     2               ;Get BPB
  1758                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1759                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1760                                  DEVRD   EQU     4               ;Read
  1761                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1762                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1763                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1764                                  DEVIST  EQU     6               ;Input status
  1765                                  DSTATHL EQU     13              ;Size of status header
  1766                                  DEVIFL  EQU     7               ;Input flush
  1767                                  DFLSHL  EQU     15              ;Size of flush header
  1768                                  DEVWRT  EQU     8               ;Write
  1769                                  DEVWRTV EQU     9               ;Write with verify
  1770                                  DEVOST  EQU     10              ;Output status
  1771                                  DEVOFL  EQU     11              ;Output flush
  1772                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1773                                  
  1774                                  ; 09/07/2018 - Retro DOS v3.0
  1775                                  ; (DEVSYM.INC, MSDOS 3.3, 1987) 
  1776                                  
  1777                                  DEVOPN	EQU	13		;DEVICE OPEN
  1778                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1779                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1780                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1781                                  ; 07/08/2018 - Retro DOS v3.0
  1782                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1783                                  GENIOCTL EQU	19
  1784                                  
  1785                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1786                                  ;		     20
  1787                                  ;		     21
  1788                                  ;		     22
  1789                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1790                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1791                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1792                                  
  1793                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1794                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1795                                  
  1796                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1797                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1798                                  ;
  1799                                  
  1800                                  struc IOCTL_REQ
  1801 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1802                                  				; GENERIC IOCTL ADDITION.
  1803 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1804 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1805 0000000F ????                    .REG_SI:	resw 1
  1806 00000011 ????                    .REG_DI:	resw 1
  1807 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1808                                  .size: ; 07/08/2018
  1809                                  endstruc
  1810                                  
  1811                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1812                                  GEN_IOCTL_WRT_TRK EQU	40H
  1813                                  GEN_IOCTL_RD_TRK  EQU	60H
  1814                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1815                                  
  1816                                  ; 24/07/2019 - Retro DOS v3.2
  1817                                  
  1818                                  ;; 32-bit absolute read/write input list structure
  1819                                  
  1820                                  struc ABS_32RW
  1821 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1822 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1823 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1824                                  .size:
  1825                                  endstruc
  1826                                  
  1827                                  ;============================================================================
  1828                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1829                                  ;============================================================================
  1830                                  ; 16/07/2018 - Retro DOS v3.0 
  1831                                  
  1832                                  ;**	ERROR.INC - DOS Error Codes
  1833                                  ;
  1834                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1835                                  ;    return error codes through AX. If an error occurred then
  1836                                  ;    the carry bit will be set and the error code is in AX. If no error
  1837                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1838                                  ;
  1839                                  ;    Since the set of error codes is being extended as we extend the operating
  1840                                  ;    system, we have provided a means for applications to ask the system for a
  1841                                  ;    recommended course of action when they receive an error.
  1842                                  ;
  1843                                  ;    The GetExtendedError system call returns a universal error, an error
  1844                                  ;    location and a recommended course of action. The universal error code is
  1845                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1846                                  ;    is issued.
  1847                                  
  1848                                  
  1849                                  ;	2.0 error codes
  1850                                  
  1851                                  error_invalid_function		EQU	1
  1852                                  error_file_not_found		EQU	2
  1853                                  error_path_not_found		EQU	3
  1854                                  error_too_many_open_files	EQU	4
  1855                                  error_access_denied		EQU	5
  1856                                  error_invalid_handle		EQU	6
  1857                                  error_arena_trashed		EQU	7
  1858                                  error_not_enough_memory 	EQU	8
  1859                                  error_invalid_block		EQU	9
  1860                                  error_bad_environment		EQU	10
  1861                                  error_bad_format		EQU	11
  1862                                  error_invalid_access		EQU	12
  1863                                  error_invalid_data		EQU	13
  1864                                  ;**** reserved			EQU	14	; *****
  1865                                  error_invalid_drive		EQU	15
  1866                                  error_current_directory 	EQU	16
  1867                                  error_not_same_device		EQU	17
  1868                                  error_no_more_files		EQU	18
  1869                                  
  1870                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1871                                  
  1872                                  error_write_protect		EQU	19
  1873                                  error_bad_unit			EQU	20
  1874                                  error_not_ready 		EQU	21
  1875                                  error_bad_command		EQU	22
  1876                                  error_CRC			EQU	23
  1877                                  error_bad_length		EQU	24
  1878                                  error_seek			EQU	25
  1879                                  error_not_DOS_disk		EQU	26
  1880                                  error_sector_not_found		EQU	27
  1881                                  error_out_of_paper		EQU	28
  1882                                  error_write_fault		EQU	29
  1883                                  error_read_fault		EQU	30
  1884                                  error_gen_failure		EQU	31
  1885                                  
  1886                                  ;	the new 3.0 error codes reported through INT 24
  1887                                  
  1888                                  error_sharing_violation 	EQU	32
  1889                                  error_lock_violation		EQU	33
  1890                                  error_wrong_disk		EQU	34
  1891                                  error_FCB_unavailable		EQU	35
  1892                                  error_sharing_buffer_exceeded	EQU	36
  1893                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  1894                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  1895                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  1896                                  
  1897                                  ;	New OEM network-related errors are 50-79
  1898                                  
  1899                                  error_not_supported		EQU	50
  1900                                  
  1901                                  error_net_access_denied		EQU	65	;M028
  1902                                  
  1903                                  ;	End of INT 24 reportable errors
  1904                                  
  1905                                  error_file_exists		EQU	80
  1906                                  error_DUP_FCB			EQU	81	; *****
  1907                                  error_cannot_make		EQU	82
  1908                                  error_FAIL_I24			EQU	83
  1909                                  
  1910                                  ;	New 3.0 network related error codes
  1911                                  
  1912                                  error_out_of_structures 	EQU	84
  1913                                  error_already_assigned		EQU	85
  1914                                  error_invalid_password		EQU	86
  1915                                  error_invalid_parameter 	EQU	87
  1916                                  error_NET_write_fault		EQU	88
  1917                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  1918                                  
  1919                                  ;	BREAK <Interrupt 24 error codes>
  1920                                  
  1921                                  ;**	Int24 Error Codes
  1922                                  
  1923                                  error_I24_write_protect 	EQU	0
  1924                                  error_I24_bad_unit		EQU	1
  1925                                  error_I24_not_ready		EQU	2
  1926                                  error_I24_bad_command		EQU	3
  1927                                  error_I24_CRC			EQU	4
  1928                                  error_I24_bad_length		EQU	5
  1929                                  error_I24_Seek			EQU	6
  1930                                  error_I24_not_DOS_disk		EQU	7
  1931                                  error_I24_sector_not_found	EQU	8
  1932                                  error_I24_out_of_paper		EQU	9
  1933                                  error_I24_write_fault		EQU	0Ah
  1934                                  error_I24_read_fault		EQU	0Bh
  1935                                  error_I24_gen_failure		EQU	0Ch
  1936                                  ; NOTE: Code 0DH is used by MT-DOS.
  1937                                  error_I24_wrong_disk		EQU	0Fh
  1938                                  
  1939                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  1940                                  ;
  1941                                  ;	NOTE: ABORT is ALWAYS allowed
  1942                                  
  1943                                  Allowed_FAIL			EQU	00001000B
  1944                                  Allowed_RETRY			EQU	00010000B
  1945                                  Allowed_IGNORE			EQU	00100000B
  1946                                  
  1947                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  1948                                  I24_area			EQU	00000110B  ; 00 if DOS
  1949                                  						   ; 01 if FAT
  1950                                  						   ; 10 if root DIR
  1951                                  						   ; 11 if DATA
  1952                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  1953                                  
  1954                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  1955                                  
  1956                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  1957                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  1958                                  ;	to take for error codes that they don't explicitly understand.
  1959                                  
  1960                                  ;	Values for error CLASS
  1961                                  
  1962                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  1963                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  1964                                  errCLASS_Auth		EQU	3	; Permission problem
  1965                                  errCLASS_Intrn		EQU	4	; Internal System Error
  1966                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  1967                                  errCLASS_SysFail	EQU	6	; System Failure
  1968                                  errCLASS_Apperr 	EQU	7	; Application Error
  1969                                  errCLASS_NotFnd 	EQU	8	; Not Found
  1970                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  1971                                  errCLASS_Locked 	EQU	10	; Locked
  1972                                  errCLASS_Media		EQU	11	; Media Failure
  1973                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  1974                                  errCLASS_Unk		EQU	13	; Unknown/other
  1975                                  
  1976                                  ;	Values for error ACTION
  1977                                  
  1978                                  errACT_Retry		EQU	1	; Retry
  1979                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  1980                                  errACT_User		EQU	3	; Ask user to regive info
  1981                                  errACT_Abort		EQU	4	; abort with clean up
  1982                                  errACT_Panic		EQU	5	; abort immediately
  1983                                  errACT_Ignore		EQU	6	; ignore
  1984                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  1985                                  
  1986                                  ;	Values for error LOCUS
  1987                                  
  1988                                  errLOC_Unk		EQU	1	; No appropriate value
  1989                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  1990                                  errLOC_Net		EQU	3	; Network
  1991                                  errLOC_SerDev		EQU	4	; Serial Device
  1992                                  errLOC_Mem		EQU	5	; Memory
  1993                                  
  1994                                  ;============================================================================
  1995                                  ; MULT.INC (MSDOS 3.3, 1987)
  1996                                  ;============================================================================
  1997                                  
  1998                                  ;Break <Critical section and Multiplex channels>
  1999                                  
  2000                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2001                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2002                                  ;									   ;
  2003                                  ; Critical section definitions
  2004                                  ;
  2005                                  ; These below are subject to leave-all sections
  2006                                  critDisk    EQU     1			; Disk I/O critical section
  2007                                  critDevice  EQU     2			; Device I/O critical section
  2008                                  critShare   EQU     1			; Sharer I/O critical section
  2009                                  critMem     EQU     1			; memory maintenance critical section
  2010                                  critNet     EQU     5			; network critical section
  2011                                  critSFT     EQU     1			; sft table allocation
  2012                                  ; These below are not subject to leave-all sections
  2013                                  critASSIGN  EQU     8			; Assign has munged a system call
  2014                                  ;									   ;
  2015                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2016                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2017                                  
  2018                                  ;
  2019                                  ; The current set of defined multiplex channels is (* means documented):
  2020                                  ;
  2021                                  ;   Channel(h)	Issuer		Receiver    Function
  2022                                  ;      00	server		PSPRINT     print job control
  2023                                  ;     *01	print/apps	PRINT	    Queueing of files
  2024                                  ;      02	BIOS		REDIR	    signal open/close of printers
  2025                                  ;
  2026                                  ;      05	command 	REDIR	    obtain text of net int 24 message
  2027                                  ;     *06	server/assign	ASSIGN	    Install check
  2028                                  ;
  2029                                  ;      08	external driver IBMBIO	    interface to internal routines
  2030                                  ;
  2031                                  ;      10	sharer/server	Sharer	    install check
  2032                                  ;      11	DOS/server	Redir	    install check/redirection funcs
  2033                                  ;      12	sharer/redir	DOS	    dos functions and structure maint
  2034                                  ;      13	MSNET		MSNET	    movement of NCBs
  2035                                  ;      14	DOS		NLSFUNC     down load NLS country info,DOS 3.3
  2036                                  ;      14	Apps		Popup	    DOS 4.XX popup screen functions
  2037                                  ;	  ***> NOTE <***  Yes there are 2 users of 14h but since DOS 4.XX
  2038                                  ;			  doesn't use NLSFUNC, there is no conflict
  2039                                  ;      15	Apps		MSCDEX	    CD-ROM redirector interface
  2040                                  ;      16	Winoldap (?)	WIN386	    Private Windows communication
  2041                                  ;      17	Winoldap (?)	WIN386	    Win386 clipboard interface
  2042                                  ;      18	Apps		MS-Manager  Toggle interface to manager
  2043                                  ;      19,(13h) external driver IBMBIO	    Reset_Int_13, allows installation
  2044                                  ;					    of alternative INT_13 drivers after
  2045                                  ;					    boot_up
  2046                                  ;      B0	GRAFTABL	GRAFTABL
  2047                                  ;
  2048                                  
  2049                                  MultSHARE   EQU     10h 		; sharer
  2050                                      ;	1   MFT_enter
  2051                                      ;	2   MFTClose
  2052                                      ;	3   MFTclU
  2053                                      ;	4   MFTCloseP
  2054                                      ;	5   MFTCloN
  2055                                      ;	6   set_block
  2056                                      ;	7   clr_block
  2057                                      ;	8   chk_block
  2058                                      ;	9   MFT_get
  2059                                      ;	10  ShSave
  2060                                      ;	11  ShChk
  2061                                      ;	12  ShCol
  2062                                      ;	13  ShCloseFile
  2063                                  
  2064                                  MultNET     EQU     11h 		; Network support
  2065                                      ;	1   NET_RMDIR
  2066                                      ;	2   NET_SEQ_RMDIR
  2067                                      ;	3   NET_MKDIR
  2068                                      ;	4   NET_SEQ_MKDIR
  2069                                      ;	5   NET_CHDIR
  2070                                      ;	6   NET_CLOSE
  2071                                      ;	7   NET_COMMIT
  2072                                      ;	8   NET_READ
  2073                                      ;	9   NET_WRITE
  2074                                      ;	10  NET_LOCK
  2075                                      ;	11  NET_UNLOCK
  2076                                      ;	12  NET_DISK_INFO
  2077                                      ;	13  NET_SET_FILE_ATTRIBUTE
  2078                                      ;	14  NET_SEQ_SET_FILE_ATTRIBUTE
  2079                                      ;	15  NET_GET_FILE_INFO
  2080                                      ;	16  NET_SEQ_GET_FILE_INFO
  2081                                      ;	17  NET_RENAME
  2082                                      ;	18  NET_SEQ_RENAME
  2083                                      ;	19  NET_DELETE
  2084                                      ;	20  NET_SEQ_DELETE
  2085                                      ;	21  NET_OPEN
  2086                                      ;	22  NET_SEQ_OPEN
  2087                                      ;	23  NET_CREATE
  2088                                      ;	24  NET_SEQ_CREATE
  2089                                      ;	25  NET_SEQ_SEARCH_FIRST
  2090                                      ;	26  NET_SEQ_SEARCH_NEXT
  2091                                      ;	27  NET_SEARCH_FIRST
  2092                                      ;	28  NET_SEARCH_NEXT
  2093                                      ;	29  NET_ABORT
  2094                                      ;	30  NET_ASSOPER
  2095                                      ;	31  Printer_SET_STRING
  2096                                      ;	32  NetFlushBuf
  2097                                      ;	33  NetBufWrite
  2098                                      ;	34  NetResetEnvironment
  2099                                      ;	35  NetSpoolCheck
  2100                                      ;	36  NetSpoolClose
  2101                                  
  2102                                  MultDOS     EQU     12h 		; DOS call back
  2103                                      ;	1   DOS_CLOSE
  2104                                      ;	2   RECSET
  2105                                      ;	3   Get DOSGROUP
  2106                                      ;	4   PATHCHRCMP
  2107                                      ;	5   OUT
  2108                                      ;	6   NET_I24_ENTRY
  2109                                      ;	7   PLACEBUF
  2110                                      ;	8   FREE_SFT
  2111                                      ;	9   BUFWRITE
  2112                                      ;	10  SHARE_VIOLATION
  2113                                      ;	11  SHARE_ERROR
  2114                                      ;	12  SET_SFT_MODE
  2115                                      ;	13  DATE16
  2116                                      ;	14  SETVISIT
  2117                                      ;	15  SCANPLACE
  2118                                      ;	16  SKIPVISIT
  2119                                      ;	17  StrCpy
  2120                                      ;	18  StrLen
  2121                                      ;	19  UCase
  2122                                      ;	20  POINTCOMP
  2123                                      ;	21  CHECKFLUSH
  2124                                      ;	22  SFFromSFN
  2125                                      ;	23  GetCDSFromDrv
  2126                                      ;	24  Get_User_Stack
  2127                                      ;	25  GetThisDrv
  2128                                      ;	26  DriveFromText
  2129                                      ;	27  SETYEAR
  2130                                      ;	28  DSUM
  2131                                      ;	29  DSLIDE
  2132                                      ;	30  StrCmp
  2133                                      ;	31  initcds
  2134                                      ;	32  pjfnfromhandle
  2135                                      ;	33  $NameTrans
  2136                                      ;	34  CAL_LK
  2137                                      ;	35  DEVNAME
  2138                                      ;	36  Idle
  2139                                      ;
  2140                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2141                                      ;	0   NLSInstall
  2142                                      ;	1   ChgCodePage
  2143                                      ;	2   GetExtInfo
  2144                                      ;	3   SetCodePage
  2145                                      ;	4   GetCntry
  2146                                      ;
  2147                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2148                                  ;	  it calls Multdos 42 to set up an entry routine address
  2149                                      ;	0   Install status  (reserved)
  2150                                      ;	1   Lookup
  2151                                      ;	2   Insert
  2152                                      ;	3   Delete
  2153                                      ;	4   Purge	    (reserved)
  2154                                  
  2155                                  ;============================================================================
  2156                                  ; FIND.INC (MSDOS 3.3, 1987)
  2157                                  ;============================================================================
  2158                                  ; 09/07/2018 - Retro DOS v3.0
  2159                                  
  2160                                  ;Break	<find first/next buffer>
  2161                                  
  2162                                  struc find_buf
  2163 00000000 ??                      .drive:	    resb 1		; drive of search
  2164 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2165 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2166 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2167 0000000F ????                    .DirStart:  resw 1		; DirStart
  2168 00000011 ??                      .attr:	    resb 1		; attribute found
  2169 00000012 ????                    .time:	    resw 1		; time
  2170 00000014 ????                    .date:	    resw 1		; date
  2171 00000016 ????                    .size_l:    resw 1		; low(size)
  2172 00000018 ????                    .size_h:    resw 1		; high(size)
  2173 0000001A <res Dh>                .pname:	    resb 13		; packed name
  2174                                  .size:
  2175                                  endstruc
  2176                                  
  2177                                  ;============================================================================
  2178                                  ; DOSCNTRY.INC (MSDOS 3.3, 1987)
  2179                                  ;============================================================================
  2180                                  ; 09/07/2018 - Retro DOS v3.0
  2181                                  
  2182                                  ;Equates for COUNTRY INFORMATION.
  2183                                  SetCountryInfo	EQU	1	;country info
  2184                                  SetUcase	EQU	2	;uppercase table
  2185                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2186                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2187                                  SetFileList	EQU	5	;valid file character list
  2188                                  SetCollate	EQU	6	;collating sequence
  2189                                  SetDBCS 	EQU	7	;double byte character set
  2190                                  SetALL		EQU	-1	;all the entries
  2191                                  
  2192                                  
  2193                                  ;DOS country and code page information table structure.
  2194                                  ;Internally, IBMDOS gives a pointer to this table.
  2195                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2196                                  ;this structure.
  2197                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2198 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2199 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2200 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2201 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 5)
  2202 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2203 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2204                                  
  2205 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2206 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2207                                  
  2208 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2209 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2210                                  
  2211 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2212 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2213                                  
  2214 00000060 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2215 00000061 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2216 00000063 ????                    .ccDosCountry:		resw 1	;system country code id
  2217 00000065 ????                    .ccDosCodePage:		resw 1	;system code page id
  2218 00000067 ????                    .ccDFormat:		resw 1	;date format
  2219 00000069 ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2220 0000006E ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2221 00000070 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2222 00000072 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2223 00000074 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2224 00000076 ??                      .ccCFormat:		resb 1	;currency format flags
  2225 00000077 ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2226 00000078 ??                      .ccTFormat:		resb 1	;time format
  2227 00000079 ????????                .ccMono_Ptr:		resd 1	;monocase routine entry point
  2228 0000007D ????                    .ccListSep:		resb 2	;data list separator
  2229 0000007F <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2230                                  .size:
  2231                                  endstruc
  2232                                  
  2233                                  ;Ucase table
  2234                                  struc CC_UCASE_TAB
  2235 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2236 00000002 <res 80h>               .ccUcase_data:		resb 128
  2237                                  endstruc
  2238                                  
  2239                                  ;File Ucase table
  2240                                  struc CC_FILE_UCASE_TAB
  2241 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2242 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2243                                  endstruc
  2244                                  
  2245                                  ;File char list
  2246                                  struc CC_FILE_CHAR_TAB
  2247 00000000 ????                    .ccFilechar_leng:	resw 1
  2248 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2249                                  endstruc
  2250                                  
  2251                                  ;collate table
  2252                                  struc CC_COLLATE_TAB
  2253 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2254 00000002 <res 100h>              .ccCollate_data:	resb 256
  2255                                  endstruc
  2256                                  
  2257                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2258                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) 
  2259                                  
  2260                                  ; 06/08/2018
  2261                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2262                                  
  2263                                  ;CAPITALIZATION equates
  2264                                  CAP_ONE_CHAR	equ	20H
  2265                                  CAP_STRING	equ	21H
  2266                                  CAP_ASCIIZ	equ	22H
  2267                                  CHECK_YES_NO	equ	23H
  2268                                  UPPER_TABLE	equ	80H
  2269                                  
  2270                                  ;NLS_YES	equ	59H  ; 'Y'
  2271                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2272                                  ;NLS_NO		equ	4EH  ; 'N'	
  2273                                  ;NLS_no2	equ	6EH  ; 'n'	
  2274                                  
  2275                                  ;============================================================================
  2276                                  ; CURDIR.INC (MSDOS 3.3, 1987)
  2277                                  ;============================================================================
  2278                                  ; 09/07/2018 - Retro DOS v3.0
  2279                                  
  2280                                  ;BREAK <Current directory list structure>
  2281                                  
  2282                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2283                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2284                                  ;									   ;
  2285                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2286                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2287                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2288                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2289                                  ; of the disk being changed or if the path must be recracked.  The END	   ;
  2290                                  ; field is the location of the end of the definition.  No .. is allowed    ;
  2291                                  ; past this point							   ;
  2292                                  
  2293                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2294                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2295                                  
  2296                                  struc curdir	; curdir_list
  2297 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2298 00000043 ????                    .flags:		resw 1			; various flags
  2299 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2300 00000049 ????                    .ID:		resw 1			; cluster of current dir (net ID)
  2301 0000004B ????                    		resw 1
  2302 0000004D ????                    .user_word:	resw 1
  2303 0000004F ????                    .end:		resw 1			; end of assignment
  2304                                  .size:
  2305                                  endstruc
  2306                                  
  2307                                  curdirLen	EQU curdir.size		; Needed for screwed up
  2308                                  
  2309                                  %define curdir_netID curdir_ID  ; dword
  2310                                  
  2311                                  ;Flag word masks
  2312                                  curdir_isnet	EQU	1000000000000000B
  2313                                  curdir_inuse	EQU	0100000000000000B
  2314                                  curdir_splice	EQU	0010000000000000B
  2315                                  curdir_local	EQU	0001000000000000B
  2316                                  ;									   ;
  2317                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2318                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2319                                  
  2320                                  ;============================================================================
  2321                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2322                                  ;============================================================================
  2323                                  ; 09/07/2018 - Retro DOS v3.0
  2324                                  
  2325                                  ;BREAK <File Control Block definition>
  2326                                  
  2327                                  ;
  2328                                  ; Field definition for FCBs
  2329                                  ; The FCB has the following structure:
  2330                                  ;
  2331                                  ;	+---------------------------+
  2332                                  ;	|   Drive indicator(byte)   |
  2333                                  ;	+---------------------------+
  2334                                  ;	|    Filename (8 chars)     |
  2335                                  ;	+---------------------------+
  2336                                  ;	|    Extension (3 chars)    |
  2337                                  ;	+---------------------------+
  2338                                  ;	|   Current Extent(word)    |
  2339                                  ;	+---------------------------+
  2340                                  ;	|    Record size (word)     |
  2341                                  ;	+---------------------------+
  2342                                  ;	|    File Size (2 words)    |
  2343                                  ;	+---------------------------+
  2344                                  ;	|	Date of write	    |
  2345                                  ;	+---------------------------+
  2346                                  ;	|	Time of write	    |
  2347                                  ;	+---------------------------+
  2348                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2349                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2350                                  ;									   ;
  2351                                  ;	+---------------------------+
  2352                                  ;	|   8 bytes reserved	    |
  2353                                  ;	+---------------------------+
  2354                                  ;									   ;
  2355                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2356                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2357                                  ;	|    next record number     |
  2358                                  ;	+---------------------------+
  2359                                  ;	|   random record number    |
  2360                                  ;	+---------------------------+
  2361                                  ;
  2362                                  
  2363                                  struc	SYS_FCB
  2364 00000000 ??                      .drive:	resb 1
  2365 00000001 ????????????????        .name:	resb 8
  2366 00000009 ??????                  .ext:	resb 3
  2367 0000000C ????                    .EXTENT: resw 1
  2368 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2369 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2370                                  				; following word
  2371 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2372 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2373 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2374                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2375                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2376                                  ;									   ;
  2377 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2378                                  ;									   ;
  2379                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2380                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2381 00000020 ??                      .NR:	resb 1			; Next record
  2382 00000021 ????????                .RR:	resb 4			; Random record
  2383                                  endstruc
  2384                                  
  2385                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2386                                  				; NEXT
  2387                                  ; 20/07/2018
  2388                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2389                                  
  2390                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2391                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2392                                  ; NOTE about this byte (fcb_nsl_drive)
  2393                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2394                                  ;	00 means a local file or device with sharing loaded
  2395                                  ;	10 means a remote (network) file
  2396                                  ;	01 means a local file with no sharing loaded
  2397                                  ;	11 means a local device with no sharing loaded
  2398                                  
  2399                                  ; 20/07/2018
  2400                                  
  2401                                  ;
  2402                                  ; Network FCB
  2403                                  ;
  2404                                  
  2405                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2406                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2407                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2408                                  
  2409                                  ;
  2410                                  ; No sharing local file FCB
  2411                                  ;
  2412                                  
  2413                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2414                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2415                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2416                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2417                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2418                                  
  2419                                  ;
  2420                                  ; No sharing local device FCB
  2421                                  ;
  2422                                  
  2423                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2424                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2425                                  
  2426                                  ;
  2427                                  ; Sharing local FCB
  2428                                  ;
  2429                                  
  2430                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2431                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2432                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2433                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2434                                  
  2435                                  ;
  2436                                  ; Bogusness:  the four cases are:
  2437                                  ;
  2438                                  ;   local file	    00
  2439                                  ;   local device    40
  2440                                  ;   local sharing   C0
  2441                                  ;   network	    80
  2442                                  ;
  2443                                  ; Since sharing and network collide, we cannot use a test instruction for
  2444                                  ; deciding whether a network or a share check in involved
  2445                                  ;
  2446                                  FCBDEVICE   EQU 040h
  2447                                  FCBNETWORK  EQU 080h
  2448                                  FCBSHARE    EQU 0C0h
  2449                                  
  2450                                  ; FCBSPECIAL must be able to mask off both net and share
  2451                                  FCBSPECIAL  EQU 080h
  2452                                  FCBMASK     EQU 0C0h
  2453                                  
  2454                                  ;============================================================================
  2455                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2456                                  ;============================================================================
  2457                                  ; 11/07/2018 - Retro DOS v3.0
  2458                                  
  2459                                  ; 22/07/2019 - Retro DOS v3.2
  2460                                  
  2461                                  struc	FEI	; FASTOPEN_EXTENDED_INFO
  2462 00000000 ??                      .dirpos:	resb 1
  2463 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2464                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2465 00000005 ????                    .clusnum:	resw 1
  2466 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2467 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2468                                  .size:
  2469                                  endstruc
  2470                                  
  2471                                  ; 23/07/2018
  2472                                  ;FASTOPEN NAME CACHING Subfunctions
  2473                                  FONC_Look_up	equ	1
  2474                                  FONC_insert	equ	2
  2475                                  FONC_delete	equ	3
  2476                                  FONC_update	equ	4
  2477                                  FONC_purge	equ	5	;reserved for the future use.
  2478                                  FONC_Rename	equ	6	;AN001
  2479                                  
  2480                                  ; 27/07/2018
  2481                                  ;FastOpen Data Structure
  2482                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2483 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2484 00000002 ????????                .name_caching:	resd 1
  2485                                  ; MSDOS 6.0
  2486                                  ;.fatchain_caching: resd 1	;reserved for future use
  2487                                  .size:
  2488                                  endstruc
  2489                                  
  2490                                  ; 27/07/2018
  2491                                  ;Equates used in DOS.
  2492                                  FastOpen_Set	       equ     00000001b
  2493                                  FastOpen_Reset	       equ     11111110b
  2494                                  Lookup_Success	       equ     00000010b
  2495                                  Lookup_Reset	       equ     11111101b
  2496                                  Special_Fill_Set       equ     00000100b
  2497                                  Special_Fill_Reset     equ     11111011b
  2498                                  No_Lookup	       equ     00001000b
  2499                                  Set_For_Search	       equ     00010000b	;DCR 167
  2500                                  
  2501                                  ; 09/08/2018 
  2502                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2503                                  ; Fastxxx equates
  2504                                  FastOpen_ID	   equ	   1
  2505                                  FastSeek_ID	   equ	   2
  2506                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2507                                  
  2508                                  ;Structure definitions
  2509                                  ;
  2510                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2511 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2512 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2513                                  endstruc
  2514                                  
  2515                                  ;============================================================================
  2516                                  ; LOCK.INC, MSDOS 6.0, 1991
  2517                                  ;============================================================================
  2518                                  ; 14/07/2018 - Retro DOS v3.0
  2519                                  
  2520                                  ;**	LOCK.INC - Definitions for Record Locking
  2521                                  
  2522                                  ;**	LOCK functions
  2523                                  
  2524                                  LOCK_ALL	    equ    0
  2525                                  UNLOCK_ALL	    equ    1
  2526                                  LOCK_MUL_RANGE	    equ    2
  2527                                  UNLOCK_MUL_RANGE    equ    3
  2528                                  LOCK_READ	    equ    4
  2529                                  WRITE_UNLOCK	    equ    5
  2530                                  LOCK_ADD	    equ    6
  2531                                  
  2532                                  ;**	Structure for Lock buffer
  2533                                  
  2534                                  struc LockBuf
  2535 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2536 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2537                                  endstruc
  2538                                  
  2539                                  ;============================================================================
  2540                                  ; DPL.ASM, MSDOS 6.0, 1991
  2541                                  ;============================================================================
  2542                                  ; 04/08/2018 - Retro DOS v3.0
  2543                                  
  2544                                  ; (SRVCALL.ASM)
  2545                                  
  2546                                  struc DPL
  2547 00000000 ????                    .AX:	resw	1	; AX register
  2548 00000002 ????                    .BX:	resw	1	; BX register
  2549 00000004 ????                    .CX:	resw	1	; CX register
  2550 00000006 ????                    .DX:	resw	1	; DX register
  2551 00000008 ????                    .SI:	resw	1	; SI register
  2552 0000000A ????                    .DI:	resw	1	; DI register
  2553 0000000C ????                    .DS:	resw	1	; DS register
  2554 0000000E ????                    .ES:	resw	1	; ES register
  2555 00000010 ????                    .rsrvd: resw	1	; Reserved
  2556 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2557 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2558                                  .size:
  2559                                  endstruc
  2560                                   
  2561                                  ;============================================================================
  2562                                  ; MSDATA.ASM
  2563                                  ;============================================================================
  2564                                  ;============================================================================
  2565                                  ; MS_DATA.ASM (MSDOS 6.0, 1991) (1)
  2566                                  ;============================================================================
  2567                                  ; 16/07/2018 - Retro DOS 3.0	
  2568                                  
  2569                                  ;Break <Uninitialized data overlayed by initialization code>
  2570                                  
  2571                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
  2572                                  ; Init code overlaps with data area below
  2573                                  
  2574                                  		; Offset 0358h in IBMDOS.COM (MSDOS 3.3)
  2575                                  
  2576                                  ;	I_am    TIMEBUF,6               ; Time read from clock device
  2577                                  ;	I_am    DEVIOBUF,2              ; Buffer for I/O under file assignment
  2578                                  
  2579                                  TIMEBUF		EQU 	DATASEGMENT	; Offset 0358h (in IBMDOS.COM 3.3)
  2580                                  DEVIOBUF	EQU	TIMEBUF+6
  2581                                  ;
  2582                                  ; The following areas are used as temp buffer in EXEC system call
  2583                                  ;
  2584                                  ;       I_am    OPENBUF,128             ; buffer for name operations
  2585                                  ;       I_am    RenBuf,128              ; buffer for rename destination
  2586                                  
  2587                                  OPENBUF		EQU	DEVIOBUF+2	; DATASEGMENT+8 
  2588                                  RENBUF		EQU	OPENBUF+128	; DATASEGMENT+136
  2589                                  
  2590                                  ; Buffer for search calls
  2591                                  ;        I_am    SEARCHBUF,53		; internal search buffer
  2592                                  ;        I_am    DummyCDS,curdirLen
  2593                                  
  2594                                  SEARCHBUF	EQU	RENBUF+128	; DATASEGMENT+264
  2595                                  DUMMYCDS	EQU	SEARCHBUF+53	; DATASEGMENT+317 
  2596                                  						; Offset 495h in MSDOS 3.3
  2597                                  ;
  2598                                  ; End of contiguous buffer
  2599                                  ;
  2600                                  
  2601                                  ; Temporary directory entry for use by many routines. Device directory
  2602                                  ; entries (bogus) are built here.
  2603                                  ;
  2604                                  ;        PUBLIC  DevFCB
  2605                                  ;DEVFCB  LABEL   BYTE                    ; Uses NAME1, NAME2, combined
  2606                                  ; WARNING.. do not alter position of NAME1 relative to DEVFCB
  2607                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
  2608                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
  2609                                  
  2610                                  DEVFCB		EQU	DUMMYCDS+curdirLen ; DATASEGMENT+398
  2611                                  
  2612                                  ;	I_am    NAME1,12                ; File name buffer
  2613                                  ;       I_am    NAME2,13                ;
  2614                                  ;	I_am    DESTSTART,WORD          ;
  2615                                  ;	DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
  2616                                  
  2617                                  NAME1		EQU	DEVFCB		; Offset 04E6h in IBMDOS.COM 3.3
  2618                                  NAME2		EQU	NAME1+12	; DATASEGMENT+410
  2619                                  DESTSTART	EQU	NAME2+13	; DATASEGMENT+423
  2620                                  
  2621                                  ;
  2622                                  ; End Temporary directory entry.
  2623                                  ;
  2624                                  
  2625                                  ;       I_am    ATTRIB,BYTE             ; storage for file attributes
  2626                                  ;	I_am    EXTFCB,BYTE             ; TRUE => extended FCB in use
  2627                                  
  2628                                  ATTRIB		EQU	DEVFCB + dir_entry.size ; Offset 0506h
  2629                                  	; Offset 0507h in IBMDOS.COM (MSDOS 3.3) 
  2630                                  EXTFCB		EQU	ATTRIB+1	; DATASEGMENT+431
  2631                                  
  2632                                  ;       I_am    SATTRIB,BYTE            ; Storage for search attributes
  2633                                  ;       I_AM    open_access,BYTE        ; access of open system call
  2634                                  ;       I_am    FoundDel,BYTE           ; true => file was deleted
  2635                                  ;       I_am    Found_dev,BYTE          ; true => search found a device
  2636                                  ;       I_am    fSplice,BYTE            ; true => do a splice in transpath
  2637                                  ;       I_am    fSharing,BYTE           ; TRUE => no redirection
  2638                                  ;       I_am    SECCLUSPOS,BYTE         ; Position of first sector within cluster
  2639                                  ;       I_am    TRANS,BYTE              ;
  2640                                  ;       I_am    READOP,BYTE             ;
  2641                                  ;       I_am    THISDRV,BYTE            ;
  2642                                  ;       I_am    CLUSFAC,BYTE            ;
  2643                                  ;       I_am    CLUSSPLIT,BYTE          ;
  2644                                  ;       I_am    INSMODE,BYTE            ; true => insert mode in buffered read
  2645                                  ;       I_am    cMeta,BYTE              ; count of meta'ed components found
  2646                                  ;       I_am    VOLID,BYTE              ;
  2647                                  ;       I_am    exit_type,BYTE          ; type of exit...
  2648                                  
  2649                                  SATTRIB		EQU	EXTFCB+1	; DATASEGMENT+432
  2650                                  OPEN_ACCESS	EQU	SATTRIB+1	; DATASEGMENT+433
  2651                                  FOUNDDEL	EQU	OPEN_ACCESS+1	; DATASEGMENT+434
  2652                                  FOUND_DEV	EQU	FOUNDDEL+1	; DATASEGMENT+435
  2653                                  FSPLICE		EQU	FOUND_DEV+1	; DATASEGMENT+436
  2654                                  FSHARING	EQU	FSPLICE+1	; DATASEGMENT+437
  2655                                  SECCLUSPOS	EQU	FSHARING+1	; DATASEGMENT+438
  2656                                  TRANS		EQU	SECCLUSPOS+1	; DATASEGMENT+439
  2657                                  READOP		EQU	TRANS+1		; DATASEGMENT+440	
  2658                                  THISDRV		EQU	READOP+1	; DATASEGMENT+441
  2659                                  CLUSFAC		EQU	THISDRV+1	; DATASEGMENT+442
  2660                                  CLUSSPLIT	EQU	CLUSFAC+1	; DATASEGMENT+443
  2661                                  INSMODE		EQU	CLUSSPLIT+1	; DATASEGMENT+444
  2662                                  CMETA		EQU	INSMODE+1	; DATASEGMENT+445
  2663                                  VOLID		EQU	CMETA+1		; DATASEGMENT+446
  2664                                  EXIT_TYPE	EQU	VOLID+1		; DATASEGMENT+447
  2665                                          
  2666                                  ;	EVEN
  2667                                  
  2668                                  ; WARNING - the following two items are accessed as a word
  2669                                  
  2670                                  ;	I_am    CREATING,BYTE           ; true => creating a file
  2671                                  ;	I_am	DELALL,BYTE		; = 0 iff BUGBUG
  2672                                  ;					; = DIRFREE iff BUGBUG
  2673                                  ;	I_am    EXITHOLD,DWORD          ; Temp location for proc terminate
  2674                                  ;	I_am    user_SP,WORD            ; User SP for system call
  2675                                  ;	I_am    user_SS,WORD            ; User SS for system call
  2676                                  ;	I_am    CONTSTK,WORD            ;
  2677                                  ;	I_am    THISDPB,DWORD           ;
  2678                                  ;	I_am    CLUSSAVE,WORD           ;
  2679                                  ; MSDOS 3.3
  2680                                  ;	I_am    CLUSSEC,WORD		;	
  2681                                  ;; MSDOS 6.0
  2682                                  ;;	I_am    CLUSSEC,DWORD           ;>32mb         ; AC0000
  2683                                  
  2684                                  	; Offset 0518h in IBMDOS.COM (MSDOS 3.3) 
  2685                                  
  2686                                  CREATING	EQU	EXIT_TYPE+1 	; DATASEGMENT+448
  2687                                  	; (End of 'MOVDPB' (in MSINIT) - Offset 0519h (just after 'retf'))
  2688                                  DELALL		EQU	CREATING+1	; DATASEGMENT+449
  2689                                  EXITHOLD	EQU	DELALL+1	; DATASEGMENT+450
  2690                                  USER_SP		EQU	EXITHOLD+4	; DATASEGMENT+454
  2691                                  USER_SS		EQU	USER_SP+2	; DATASEGMENT+456
  2692                                  CONTSTK		EQU	USER_SS+2	; DATASEGMENT+458	
  2693                                  THISDPB		EQU	CONTSTK+2	; DATASEGMENT+460
  2694                                  CLUSSAVE	EQU	THISDPB+4	; DATASEGMENT+464
  2695                                  CLUSSEC		EQU	CLUSSAVE+2	; Offset 052Ah ; DATASEGMENT+466
  2696                                  
  2697                                  ;       I_am    PREREAD,WORD            ; 0 means preread; 1 means optional
  2698                                  ;       I_am    FATBYT,WORD             ; Used by ALLOCATE
  2699                                  ;       I_am    FATBYTE,WORD            ; Used by $SLEAZEFUNC
  2700                                  ;       I_am    DEVPT,DWORD             ;
  2701                                  ;       I_am    THISSFT,DWORD           ; Address of user SFT
  2702                                  ;       I_am    THISCDS,DWORD           ; Address of current CDS
  2703                                  ;       I_am    THISFCB,DWORD           ; Address of user FCB
  2704                                  
  2705                                  ; 27/07/2019 - Retro DOS v3.2
  2706                                  ; MSDOS 3.3
  2707                                  ;PREREAD	EQU	CLUSSEC+2	; OffseT 052Ch ; DATASEGMENT+468
  2708                                  ; MSDOS 6.0
  2709                                  PREREAD		EQU	CLUSSEC+4	; DATASEGMENT+470 (27/07/2019)
  2710                                  
  2711                                  FATBYT		EQU	PREREAD+2	; DATASEGMENT+472 (27/07/2019) 
  2712                                  FATBYTE		EQU	FATBYT+2	; DATASEGMENT+474 (27/07/2019)
  2713                                  DEVPT		EQU	FATBYTE+2	; DATASEGMENT+476 (27/07/2019)	
  2714                                  THISSFT		EQU	DEVPT+4		; DATASEGMENT+480 (27/07/2019)
  2715                                  THISCDS		EQU	THISSFT+4	; DATASEGMENT+484 (27/07/2019)	
  2716                                  THISFCB		EQU	THISCDS+4	; DATASEGMENT+488 (27/07/2019)
  2717                                  
  2718                                  ; DATASEGMENT+490 :  ; *!!!*
  2719                                  	; Here is offset 0542h in IBMDOS.COM, 1987 (MSDOS 3.3 kernel) 
  2720                                  
  2721                                  ; 27/07/2019 - Retro DOS v3.2
  2722                                  ; Here is...
  2723                                  ; DATASEGMENT+492 :  ; *!!!*
  2724                                  
  2725                                  ;SFN		EQU	THISFCB+4	; DATASEGMENT + 0542h - 0358h
  2726                                  
  2727                                  ;       I_am    SFN,WORD,<-1>           ; SystemFileNumber found for accessfile
  2728                                  ;       I_am    JFN,WORD                ; JobFileNumber found for accessfile
  2729                                  ;       I_am    PJFN,DWORD              ; PointerJobFileNumber found for accessfile
  2730                                  ;       I_am    WFP_START,WORD          ;
  2731                                  ;       I_am    REN_WFP,WORD            ;
  2732                                  ;       I_am    CURR_DIR_END,WORD       ;
  2733                                  ;       I_am    NEXTADD,WORD            ;
  2734                                  ;       I_am    LASTPOS,WORD            ;
  2735                                  ;       I_am    CLUSNUM,WORD            ;
  2736                                  ;       I_am    DIRSEC,DWORD            ;>32mb 		; AC0000
  2737                                  ;       I_am    DIRSTART,WORD           ;
  2738                                  ;       I_am    SECPOS,DWORD		;>32mb Position of first sector accessed
  2739                                  ;       I_am    VALSEC,DWORD		;>32mb Number of valid (previously written)
  2740                                  ;                                       ; sectors
  2741                                  ;       I_am    BYTSECPOS,WORD          ; Position of first byte within sector
  2742                                  ;       I_am    BYTPOS,4                ; Byte position in file of access
  2743                                  ;       I_am    BYTCNT1,WORD            ; No. of bytes in first sector
  2744                                  ;       I_am    BYTCNT2,WORD            ; No. of bytes in last sector
  2745                                  ;       I_am    SECCNT,WORD             ; No. of whole sectors
  2746                                  ;       I_am    ENTFREE,WORD            ;
  2747                                  ;       I_am    ENTLAST,WORD            ;
  2748                                  ;       I_am    NXTCLUSNUM,WORD         ;
  2749                                  ;       I_am    GROWCNT,DWORD           ;
  2750                                  ;       I_am    CURBUF,DWORD            ;
  2751                                  ;       I_am    CONSft,DWORD            ; SFT of console swapped guy.
  2752                                  ;       I_am    SAVEBX,WORD             ;
  2753                                  ;       I_am    SAVEDS,WORD             ;
  2754                                  ;       I_am    restore_tmp,WORD        ; return address for restore world
  2755                                  ;       I_am    NSS,WORD
  2756                                  ;       I_am    NSP,WORD	
  2757                                  
  2758                                  ;	....  [ MS_DATA.ASM (MSDOS 6.0, 1991) (2) ] ; $$$
  2759                                  
  2760                                  ;DOSDATA ENDS
  2761                                  
  2762                                  ;============================================================================
  2763                                  ; MSHEAD.ASM
  2764                                  ;============================================================================
  2765                                  
  2766                                  [BITS 16]
  2767                                  [ORG 0]
  2768                                  
  2769                                  START:
  2770 00000000 E9CE76                          JMP     DOSINIT
  2771                                  
  2772                                  ;============================================================================
  2773                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2774                                  ;============================================================================
  2775                                  ; 16/07/2018 - Retro DOS 3.0
  2776                                  
  2777                                  	; MSDOS 6.0
  2778                                  ;	dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  2779                                  ;BioDataSeg:
  2780                                  ;	dw	0070h		; Bios data segment fixed at 70h
  2781                                  
  2782                                  	; MSDOS 3.3
  2783 00000003 0000                    	dw	0
  2784 00000005 00                      	db	0 ; 12/08/2018
  2785 00000006 42554720                	db	"BUG "
  2786 0000000A 0000                    	dw	0
  2787 0000000C 0000                    	dw	0
  2788                                  
  2789                                  ;============================================================================
  2790                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
  2791                                  ;============================================================================
  2792                                  ; 16/07/2018 - Retro DOS 3.0	
  2793                                  
  2794                                  	; MSDOS 3.3
  2795                                  MYNUM:			; Offset 000Eh
  2796 0000000E 0000                    	dw	0	
  2797                                  FCBLRU: 
  2798 00000010 0000                    	dw	0
  2799                                  OpenLRU:
  2800 00000012 0000                    	dw	0
  2801                                  OEM_HANDLER: 		; Pointer to OEM handler code	
  2802 00000014 FFFFFFFF                	dd	-1
  2803                                  LeaveAddr:
  2804                                  	;dd	LeaveDOS
  2805 00000018 [FA15]                  	dw	LeaveDOS ; 12/08/2018
  2806                                  RetryCount:		; Share retries
  2807 0000001A 0300                    	dw	3
  2808                                  RetryLoop:
  2809 0000001C 0100                    	dw	1
  2810                                  LastBuffer:
  2811 0000001E FFFFFFFF                	dd	-1	; Buffer queue recency pointer
  2812                                  CONTPOS:
  2813 00000022 0000                    	dw	0	; location in buffer of next read
  2814                                  arena_head:
  2815 00000024 0000                    	dw	0	; Segment # of first arena in memory
  2816                                  
  2817                                  ;; 16/07/2018
  2818                                  ;;****************************************************************************
  2819                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
  2820                                  ;;****************************************************************************
  2821                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
  2822                                  ;;
  2823                                  ;;	AH = 52h
  2824                                  ;;
  2825                                  ;;	on return:
  2826                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
  2827                                  ;;		Known "invars" fields follow (varies with DOS version):
  2828                                  ;;
  2829                                  ;;	Offset Size		 Description
  2830                                  ;;
  2831                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
  2832                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
  2833                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
  2834                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
  2835                                  ;;		      0 indicates no unread input (DOS 3.x)
  2836                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
  2837                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
  2838                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
  2839                                  ;;	  08   dword  pointer to $CLOCK device driver
  2840                                  ;;	  0C   dword  pointer to CON device driver
  2841                                  ;;	  10   byte   number of logical drives in system
  2842                                  ;;	  11   word   maximum bytes/block of any block device
  2843                                  ;;	  13   dword  pointer to DOS cache buffer header
  2844                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
  2845                                  ;;		      point to the next device in device chain
  2846                                  ;;
  2847                                  ;;****************************************************************************
  2848                                  
  2849                                  ; The following block of data is used by SYSINIT. 
  2850                                  ; Do not change the order or size of this block
  2851                                  
  2852                                  ;SYSINITVAR:
  2853                                  SYSINITVARS:
  2854                                  DPBHEAD:
  2855 00000026 00000000                	dd	0	; Pointer to head of DPB-FAT list
  2856                                  SFT_ADDR:
  2857 0000002A [98000000]              	dd	SFTABL	; Pointer to first SFT table
  2858                                  BCLOCK:
  2859 0000002E 00000000                	dd	0	; The CLOCK device
  2860                                  BCON:
  2861 00000032 00000000                	dd	0	; Console device entry points
  2862                                  MAXSEC:
  2863 00000036 8000                    	dw	128	; Maximum allowed sector size
  2864                                  BUFFHEAD:
  2865 00000038 00000000                	dd	0	; Pointer to head of buffer queue
  2866                                  CDSADDR:
  2867 0000003C 00000000                	dd	0	; Pointer to curdir structure table
  2868                                  SFTFCB:
  2869 00000040 00000000                	dd	0	; pointer to FCB cache table
  2870                                  KEEPCOUNT:
  2871 00000044 0000                    	dw	0	; count of FCB opens to keep
  2872                                  NUMIO:
  2873 00000046 00                      	db	0	; Number of disk tables
  2874                                  CDSCOUNT:
  2875 00000047 00                      	db	0	; Number of CDS structures in above
  2876                                  ; A fake header for the NUL device
  2877                                  NULDEV:
  2878 00000048 00000000                	dd	0	; Link to rest of device list
  2879                                  	;dw	8004h
  2880 0000004C 0480                    	dw	DEVTYP | ISNULL	; Null device attributes
  2881 0000004E [6A16]                  	dw	SNULDEV	; Strategy entry point
  2882 00000050 [7016]                  	dw	INULDEV	; Interrupt entry point
  2883 00000052 4E554C2020202020        	db	"NUL     " ; Name of null device
  2884                                  SPLICES:
  2885 0000005A 00                      	db	0	; TRUE => splices being done
  2886                                  
  2887                                  	; MSDOS 6.0 
  2888                                  ;Special_Entries:
  2889                                  ;	dw	0	; address of special entries	;AN000;
  2890                                  ;UU_IFS_DOS_CALL:
  2891                                  ;	dd	0	; entry for IFS DOS service	;AN000;
  2892                                  ;; 
  2893                                  ;; UU_IFS_HEADER:
  2894                                  ;; 	dd	0	; IFS header chain		;AN000;
  2895                                  ;;
  2896                                  ;ChkCopyProt:
  2897                                  ;	dw	0	; M068
  2898                                  ;A20OFF_PSP:
  2899                                  ;	dw	0	; M068
  2900                                  ;BUFFERS_PARM1:
  2901                                  ;	dw	0	; value of BUFFERS= ,m 	;AN000;
  2902                                  ;BUFFERS_PARM2:
  2903                                  ;	dw	0	; value of BUFFERS= ,n 	;AN000
  2904                                  ;BOOTDRIVE:
  2905                                  ;	db	0	; the boot drive	;AN000;
  2906                                  ;DDMOVE:
  2907                                  ;	db	0 	; 1 if we need DWORD move ;AN000;
  2908                                  ;EXT_MEM_SIZE:
  2909                                  ;	dw	0	; extended memory size 	;AN000;
  2910                                  
  2911                                  ;HASHINITVAR: ; LABEL   WORD	; AN000;
  2912                                  ;;
  2913                                  ;; Replaced by next two declarations
  2914                                  ;;
  2915                                  ;;UU_BUF_HASH_PTR:
  2916                                  ;;	dd	0	; buffer Hash table addr
  2917                                  ;;UU_BUF_HASH_COUNT:
  2918                                  ;;	dw	1	; number of Hash entries
  2919                                  ;
  2920                                  ;BufferQueue:
  2921                                  ;	dd	0	; Head of the buffer Queue
  2922                                  ;DirtyBufferCount:
  2923                                  ;	dw	0	; Count of Dirty buffers in the Que
  2924                                  ;			; BUGBUG ---- change to byte
  2925                                  ;SC_CACHE_PTR:
  2926                                  ;	dd	0	; secondary cache pointer
  2927                                  ;SC_CACHE_COUNT:
  2928                                  ;	dw	0 	; secondary cache count
  2929                                  ;BuffInHMA:
  2930                                  ;	db	0	; Flag to indicate that buffs are in HMA
  2931                                  ;LoMemBuff:
  2932                                  ;	dd	0	; Ptr to intermediate buffer
  2933                                  ;			;  in Low mem when buffs are in HMA
  2934                                  ;;
  2935                                  ;; All variables which have UU_ as prefix can be reused for other
  2936                                  ;; purposes and can be renamed. All these variables were used for
  2937                                  ;; EMS support of Buffer Manager. Now they are useless for Buffer
  2938                                  ;; manager ---- MOHANS
  2939                                  ;;
  2940                                  ;
  2941                                  ;	I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
  2942                                  ;UU_BUF_EMS_FIRST_PAGE:	
  2943                                  ;	db	0,0,0	; holds the first page above 640K
  2944                                  ;
  2945                                  ;;	I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
  2946                                  ;;					   ; above 640K
  2947                                  ;;UU_BUF_EMS_NPA640:
  2948                                  ;;	dw	0			
  2949                                  ;
  2950                                  ;CL0FATENTRY:
  2951                                  ;	dw	-1	; M014:	Holds the data that
  2952                                  ;			; is used in pack/unpack rts.
  2953                                  ;			; in fat.asm if cluster 0 is specified.
  2954                                  ;			; SR;
  2955                                  ;IoStatFail:
  2956                                  ;	db	0	; IoStatFail has been added to 
  2957                                  ;			; record a fail on an I24 
  2958                                  ;			; issued from IOFUNC on a status call. 
  2959                                  ;
  2960                                  ;;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
  2961                                  ;;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
  2962                                  ;;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
  2963                                  ;;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
  2964                                  ;;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
  2965                                  ;;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
  2966                                  ;
  2967                                  ;;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
  2968                                  ;						; state of the 	buffers page.
  2969                                  ;						; This one byte is retained to 
  2970                                  ;						; keep the size of this data 
  2971                                  ;						; block the same.;
  2972                                  ;ALLOCMSAVE:
  2973                                  ;	db	0	; M063: temp var. used to 
  2974                                  ;			; M063: save alloc method in
  2975                                  ;			; M063: msproc.asm
  2976                                  ;A20OFF_COUNT:
  2977                                  ;	db	0	; M068: indiactes the # of 
  2978                                  ;			; M068: int 21 calls for 
  2979                                  ;			; M068: which A20 is off
  2980                                  ;DOS_FLAG:
  2981                                  ;	db	0	; see DOSSYM.INC for Bit 
  2982                                  ;			; definitions
  2983                                  ;UNPACK_OFFSET:
  2984                                  ;	dw	0	; saves pointer to the start
  2985                                  ;			; of unpack code in exepatch.
  2986                                  ;			; asm.
  2987                                  ;UMBFLAG:
  2988                                  ;	db	0 	; M003: bit 0 indicates the 
  2989                                  ;			; M003: link state of the UMBs
  2990                                  ;			; M003: whether linked or not 
  2991                                  ;			; M003: to the DOS arena chain
  2992                                  ;SAVE_AX:
  2993                                  ;	dw	0	; M000: temp varibale to store ax
  2994                                  ;			; M000: in msproc.asm
  2995                                  ;UMB_HEAD:
  2996                                  ;	dw	-1	; M000: this is initialized to  
  2997                                  ;			; M000: the first umb arena by 
  2998                                  ;			; M000: BIOS sysinit.
  2999                                  ;START_ARENA:
  3000                                  ;	dw	1	; M000: this is the first arena 
  3001                                  ;			; M000: from which DOS will 
  3002                                  ;			; M000: start its scan for alloc.
  3003                                  
  3004                                  ; End of SYSINITVar block
  3005                                  
  3006                                  ; 16/07/2018
  3007                                  ; MSDOS 3.3 (& MDOS 6.0)
  3008                                  
  3009                                  ;
  3010                                  ; Sharer jump table
  3011                                  ;
  3012                                  
  3013                                  ;PUBLIC	JShare
  3014                                  	;EVEN
  3015 0000005B 90                      align 2
  3016                                  
  3017                                  JShare: ; LABEL	DWORD
  3018 0000005C [5618]0000              		DW	BadCall,0
  3019 00000060 [5A18]0000              MFT_enter	DW	OKCall, 0  ; 1   MFT_enter
  3020 00000064 [5A18]0000              MFTClose	DW	OKCall, 0  ; 2   MFTClose
  3021 00000068 [5618]0000              MFTclU		DW	BadCall,0  ; 3   MFTclU
  3022 0000006C [5618]0000              MFTCloseP	DW	BadCall,0  ; 4   MFTCloseP
  3023 00000070 [5618]0000              MFTCloN		DW	BadCall,0  ; 5   MFTCloN
  3024 00000074 [5618]0000              set_block	DW	BadCall,0  ; 6   set_block
  3025 00000078 [5618]0000              clr_block	DW	BadCall,0  ; 7   clr_block
  3026 0000007C [5A18]0000              chk_block	DW	OKCall, 0  ; 8   chk_block
  3027 00000080 [5618]0000              MFT_get		DW	BadCall,0  ; 9   MFT_get
  3028 00000084 [5618]0000              ShSave		DW	BadCall,0  ; 10  ShSave
  3029 00000088 [5618]0000              ShChk		DW	BadCall,0  ; 11  ShChk
  3030 0000008C [5A18]0000              ShCol		DW	OKCall, 0  ; 12  ShCol
  3031 00000090 [5618]0000              ShCloseFile	DW	BadCall,0  ; 13  ShCloseFile
  3032 00000094 [5618]0000              ShSU		DW	BadCall,0  ; 14  ShSU
  3033                                  
  3034                                  ;============================================================================
  3035                                  ; CONST2.ASM (MSDOS 6.0, 1991)
  3036                                  ;============================================================================
  3037                                  ; 16/07/2018 - Retro DOS 3.0	
  3038                                  
  3039                                  ;Break <Initialized data and data used at DOS initialization>
  3040                                  
  3041                                  ;
  3042                                  ; We need to identify the parts of the data area that are relevant to tasks
  3043                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
  3044                                  ; data will be gathered with the system code.  The process data under 2.x will
  3045                                  ; be available for swapping and under 3.0 it will be allocated per-process.
  3046                                  ;
  3047                                  ; The data that is system data will be identified by [SYSTEM] in the comments
  3048                                  ; describing that data item.
  3049                                  
  3050                                  ;	AsmVars <Debug, Redirector, ShareF>
  3051                                  
  3052                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
  3053                                  
  3054                                  ;
  3055                                  ; Table of routines for assignable devices
  3056                                  ;
  3057                                  ; MSDOS allows assignment if the following standard devices:
  3058                                  ;   stdin  (usually CON input)
  3059                                  ;   stdout (usually CON output)
  3060                                  ;   auxin  (usually AUX input)
  3061                                  ;   auxout (usually AUX output)
  3062                                  ;   stdlpt (usually PRN output)
  3063                                  ;
  3064                                  ; SPECIAL NOTE:
  3065                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
  3066                                  ;   If we're not at end-of-file, then we always say that we have a character.
  3067                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
  3068                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
  3069                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
  3070                                  ;   as EOF).
  3071                                  
  3072                                  ; Default SFTs for boot up
  3073                                  
  3074                                  		;PUBLIC	SFTABL
  3075                                  
  3076                                  SFTABL:	   ; LABEL   DWORD		; file table
  3077 00000098 FFFF                    		DW -1			; link to next table
  3078 0000009A FFFF                    		DW -1			; link seg to next table
  3079 0000009C 0500                    		DW sf_default_number	; Number of entries in table
  3080 0000009E 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
  3081                                  
  3082                                  ; the next two variables relate to the position of the logical stdout/stdin
  3083                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
  3084                                  ; console.
  3085                                  
  3086                                  		; Offset 01A7h in IBMDOS.COM (MSDOS 3.3)
  3087 000001C5 00                      CARPOS:		db 0			; cursor position in stdin
  3088 000001C6 00                      STARTPOS:	db 0			; position of cursor at beginning
  3089 000001C7 00<rep 80h>             INBUF:		times 128 db 0		; general device input buffer
  3090 00000247 00<rep 83h>             CONBUF:		times 131 db 0		; The rest of INBUF and console buffer
  3091                                  		; Offset 02ACh in IBMDOS.COM (MSDOS 3.3)
  3092 000002CA 00                      PFLAG:		db 0			; printer echoing flag
  3093 000002CB 00                      VERFLG:		db 0			; Initialize with verify off
  3094 000002CC 03                      CHARCO:		db 00000011b		; Allows statchks every 4 chars...
  3095                                  switch_character:
  3096 000002CD 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
  3097 000002CE 00                      AllocMethod:	db 0			; how to alloc first(best)last
  3098 000002CF 00                      fShare:		db 0			; TRUE => sharing installed
  3099 000002D0 01                      DIFFNAM:	db 1			; Indicates when MYNAME has changed                                        ; of buffered input call
  3100 000002D1 20<rep 10h>             MYNAME:		times 16 db 20h		; My network name
  3101                                  
  3102                                  ;
  3103                                  ; The following table is a list of addresses that the sharer patches to be
  3104                                  ; PUSH AX to enable the critical sections
  3105                                  ;
  3106                                  		; Offset 02C3h in IBMDOS.COM (MSDOS 3.3)
  3107                                  
  3108                                  ;PUBLIC	CritPatch
  3109                                  
  3110                                  CritPatch:	; LABEL WORD
  3111                                  
  3112                                  ;IRP sect,<critDisk,critDevice>
  3113                                  
  3114                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
  3115                                  ;
  3116                                  ;SR; Change code patch address to a variable in data segment
  3117                                  ;
  3118                                  ;       dw OFFSET DOSDATA: redir_patch
  3119                                  ;       dw OFFSET DOSDATA: redir_patch
  3120                                  ;
  3121                                  ;;hkn	Short_Addr  E&sect
  3122                                  ;;hkn	Short_Addr  L&sect
  3123                                  ;
  3124                                  ;ELSE
  3125                                  ;	DW	0
  3126                                  ;	DW	0
  3127                                  ;ENDIF
  3128                                  ;ENDM
  3129                                  ;	DW	0
  3130                                  
  3131                                  	; 16/07/2018 - Retro DOS v3.0
  3132                                  	; IBMDOS.COM (MSDOS 3.3), offset 02C3h
  3133                                   
  3134 000002E1 [0F21]                  	dw 	EcritDisk
  3135 000002E3 [1721]                  	dw 	LcritDisk			
  3136 000002E5 [1F21]                  	dw	EcritDevice
  3137 000002E7 [2721]                  	dw 	LcritDevice
  3138                                  
  3139 000002E9 0000                    	dw	0
  3140                                  
  3141                                  ;
  3142                                  ; WARNING!!!  PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
  3143                                  ; Also, IBM server 1.0 requires this also.
  3144                                  ;
  3145                                  	;EVEN			; Force swap area to start on word boundry
  3146 000002EB 90                      align 2
  3147                                  	;PUBLIC	SWAP_START
  3148                                  SWAP_START:	; LABEL BYTE
  3149 000002EC 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
  3150 000002ED 00                      INDOS:		db 0		; DOS status for interrupt processing
  3151 000002EE FF                      WPERR:		db -1		; Write protect error flag
  3152 000002EF 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
  3153 000002F0 0000                    EXTERR:		dw 0		; Extended Error code
  3154                                  
  3155                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
  3156 000002F2 00                      EXTERR_ACTION:	db 0		; Extended Error Action
  3157 000002F3 00                      EXTERR_CLASS:	db 0		; Extended Error Class
  3158                                  ; end warning
  3159                                   
  3160 000002F4 00000000                EXTERRPT:	dd 0		; Extended Error pointer
  3161                                  
  3162 000002F8 8000                    DMAADD:		dw 80H		; User's disk transfer address (disp/seg)
  3163 000002FA 0000                                    dw 0	
  3164 000002FC 0000                    CurrentPDB:	dw 0		; Current process identifier
  3165 000002FE 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
  3166 00000300 0000                    exit_code:	dw 0		; exit code of last proc.
  3167 00000302 00                      CURDRV:		db 0		; Default drive (init A)
  3168 00000303 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
  3169                                  ;				; F.C. 2/17/86
  3170                                  ;CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
  3171                                  ;CPSWSAVE:	db 0		; copy of above in case of ABORT
  3172                                  SWAP_ALWAYS:	; 05/08/2018
  3173 00000304 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
  3174                                  				;   extended error type stuff.
  3175                                  				;   NOTE: does not have Correct value on
  3176                                  				;   1-12, OEM, Get/Set CurrentPDB,
  3177                                  				;   GetExtendedError system calls)
  3178 00000306 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
  3179 00000308 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
  3180 0000030A 0000                    FirstArena:	dw 0		; first free block found
  3181 0000030C 0000                    BestArena:	dw 0		; best free block found
  3182 0000030E 0000                    LastArena:	dw 0		; last free block found
  3183 00000310 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
  3184 00000312 0000                    LASTENT:	dw 0		; Last entry for directory search
  3185 00000314 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
  3186 00000315 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
  3187 00000316 00                      NoSetDir:	db 0		; true -> do not set directory
  3188 00000317 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
  3189 00000318 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
  3190                                  
  3191                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
  3192                                  	;EVEN
  3193 00000319 90                      align 2
  3194                                  	; Offset 02FCh in IBMDOS.COM (MSDOS 3.3); 
  3195 0000031A 00                      DAY:		db 0		; Day of month
  3196 0000031B 00                      MONTH:		db 0		; Month of year
  3197 0000031C 0000                    YEAR:		dw 0		; Year (with century)
  3198 0000031E FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
  3199 00000320 00                      WEEKDAY:	db 0		; Day of week
  3200                                  ; end warning
  3201                                  
  3202 00000321 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
  3203 00000322 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
  3204 00000323 00                      fAborting:	db 0		; TRUE => abort in progress
  3205                                  
  3206                                  ; Combination of all device call parameters
  3207                                  	;PUBLIC	DEVCALL 	;
  3208                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
  3209                                  DEVCALL: ; 08/08/2018
  3210 00000324 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
  3211 00000325 00                      DEVCALL_REQUNIT: db 0		;Device unit number
  3212 00000326 00                      DEVCALL_REQFUNC: db 0		;Type of request
  3213 00000327 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
  3214 00000329 00<rep 8h>                       times 8 db 0		;Reserved for queue links
  3215                                  
  3216                                  	;PUBLIC	CALLUNIT
  3217                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
  3218                                  CALLFLSH: ; LABEL   WORD	;
  3219 00000331 00                      CALLMED:	db 0		; media byte
  3220                                  CALLBR:	  ; LABEL   DWORD	;
  3221                                  	;PUBLIC	CALLXAD 	;
  3222                                  CALLXAD:  ; LABEL   DWORD	;
  3223 00000332 00                      CALLRBYT:	db 0		;
  3224                                  	;PUBLIC	CALLVIDM	;
  3225                                  CALLVIDM: ; LABEL   DWORD	;
  3226 00000333 00<rep 3h>              	times 3 db 0	;
  3227                                  	;PUBLIC CallBPB		;
  3228                                  CALLBPB:  ; LABEL   DWORD	;
  3229                                  CALLSCNT:			;
  3230 00000336 0000                    		dw 0		;
  3231                                  	;PUBLIC	CALLSSEC	;
  3232                                  CALLSSEC: ; LABEL   WORD	;
  3233 00000338 0000                    		dw 0		;
  3234 0000033A 00000000                CALLVIDRW:	dd 0		;
  3235                                  		; 24/07/2019
  3236                                  ;MSDOS 6.0
  3237 0000033E 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
  3238 00000342 00000000                CALLDEVAD:	dd 0		; stash for device entry point
  3239                                  
  3240                                  ; Same as above for I/O calls	;
  3241                                  				;
  3242                                  	;PUBLIC	IOCall		;
  3243                                  ;IOCALL	SRHEAD	<>		;
  3244                                  IOCALL:	; 07/08/2018
  3245 00000346 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
  3246 00000347 00                      IOCALL_REQUNIT:	db 0		;Device unit number
  3247 00000348 00                      IOCALL_REQFUNC: db 0		;Type of request
  3248 00000349 0000                    IOCALL_REQSTAT: dw 0		;Status Word
  3249 0000034B 00<rep 8h>              	times 8	db 0		;Reserved for queue links
  3250                                  IOFLSH:	  ; LABEL   WORD	;
  3251                                          ;PUBLIC  IORCHR		;
  3252                                  IORCHR:	  ; LABEL   BYTE	;
  3253 00000353 00                      IOMED:		db 0		;
  3254 00000354 00000000                IOXAD:		dd 0		;
  3255 00000358 0000                    IOSCNT:		dw 0		;	
  3256 0000035A 0000                    IOSSEC:		dw 0		;
  3257                                  
  3258                                  ; Call struct for DSKSTATCHK	;
  3259 0000035C 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
  3260 0000035D 00                      		db 0
  3261 0000035E 05                      DSKSTCOM:	db DEVRDND	; = 5
  3262 0000035F 0000                    DSKSTST:	dw 0		;
  3263 00000361 00<rep 8h>              	times 8	db 0		;
  3264 00000369 00                      DSKCHRET:	db 0		;
  3265                                  
  3266                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
  3267                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
  3268                                  ;hkn   short_addr  DEVIOBUF	;
  3269                                  	
  3270 0000036A [8003]                  DEVIOBUF_PTR	dw DEVIOBUF
  3271 0000036C 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
  3272 0000036E 0100                    DSKSTCNT:	dw 1		;
  3273 00000370 0000                    		dw 0		;
  3274                                  
  3275 00000372 00                      CreatePDB:	db 0		; flag for creating a process
  3276                                  
  3277                                  ;* MSDOS 6.0
  3278                                  ;*	;PUBLIC	Lock_Buffer	;
  3279                                  ;*Lock_Buffer: ; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
  3280                                  ;*	    	dd 0		;MS. position
  3281                                  ;*	 	dd 0		;MS. length
  3282                                  
  3283                                  ;hkn; the foll. was moved from dosmes.asm.
  3284                                  
  3285                                  	;EVEN
  3286 00000373 90                      align 2				; needed to maintain offsets
  3287                                  
  3288                                  	; Offset 0352h in IBMDOS.COM (MSDOS 3.3)
  3289                                  	;PUBLIC  UserNum, OEMNum
  3290                                  USERNUM:
  3291 00000374 0000                     		dw 0		; 24 bit user number
  3292 00000376 00                      		db 0
  3293                                  ;IF IBM
  3294                                  ;IF IBMCOPYRIGHT
  3295 00000377 00                      OEMNUM:		DB 0		; 8 bit OEM number
  3296                                  ;ELSE
  3297                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
  3298                                  ;ENDIF
  3299                                  ;ELSE
  3300                                  ;OEMNUM:	DB 0FFh
  3301                                  ;ENDIF
  3302                                  
  3303                                  ; 17/07/2018
  3304                                  ;----------------------------------------------------------------------------
  3305                                  ; (MSDOS 3.3, DOSMES.INC, 1987)
  3306                                  
  3307                                  ; The next variable points to the country table for the current country
  3308                                  ;	(the table returned by the AL=0 INTERNATIONAL call).
  3309                                  
  3310 00000378 [2210]                  CurrentCounry:	dw USTABLE			
  3311                                  
  3312                                  
  3313                                  ;DOSDATA ENDS
  3314                                  
  3315                                  ;----------------------------------------------------------------------------
  3316                                  
  3317                                  ; 16/07/2018 - Retro DOS v3.0
  3318                                  
  3319                                  align 2
  3320                                  
  3321                                  DATASEGMENT EQU $ ; 17/04/2018
  3322                                  
  3323                                  ;============================================================================
  3324                                  ; MSINIT.ASM
  3325                                  ;============================================================================
  3326                                  ; 16/07/2018 - Retro DOS v3.0
  3327                                  ;	      (MSINIT code order/reference: MSDOS 3.3, IBMDOS.COM, 1987)
  3328                                  	
  3329                                  ; 15/04/2018 - Retro DOS v2.0 (DATA adaption for NASM)
  3330                                  
  3331                                  ; TITLE MSINIT.ASM -- MS-DOS INITIALIZATION CODE
  3332                                  
  3333                                  ;       ORG     0                       ; reset to beginning of data segment
  3334                                  ; Init code below overlaps with data area
  3335                                  	
  3336                                  	; Offset 0358h in IBMDOS.COM (MSDOS 3.3)
  3337                                  
  3338                                  ;INITBLOCK DB	110H DUP(0)     ; Allow for segment round up
  3339 0000037A 00<rep 110h>            INITBLOCK:	TIMES 272 DB 0
  3340                                  
  3341                                  	; Offset 0468h in IBMDOS.COM (MSDOS 3.3)
  3342                                  
  3343 0000048A 0000                    INITSP:		DW 0
  3344 0000048C 0000                    INITSS:		DW 0
  3345                                  ;BUFFSTRT:	DW 0
  3346                                  
  3347                                  	; Offset 046Ch in IBMDOS.COM (MSDOS 3.3)	
  3348                                  
  3349                                  ;ASSUME  CS:DOSGROUP,DS:DOSGROUP,ES:DOSGROUP,SS:NOTHING
  3350                                  ;
  3351                                  ;        EXTRN   QUIT:NEAR,IRET:NEAR,ABSDRD:FAR,ABSDWRT:FAR
  3352                                  ;        EXTRN   COMMAND:NEAR,CALL_ENTRY:NEAR
  3353                                  ;        IF      NOT IBM
  3354                                  ;        EXTRN   HEADER:BYTE
  3355                                  ;        ENDIF
  3356                                  
  3357                                  MOVDPB:
  3358                                  	; 08/07/2018 - Retro DOS v3.0
  3359                                  ; This section of code is safe from being overwritten by block move
  3360                                          ;MOV     SP,[CS:INITSP]
  3361                                          ;MOV     SS,[CS:INITSS]
  3362                                          ; 30/03/2018
  3363 0000048E 8B26[8A04]              	MOV     SP,[INITSP]
  3364 00000492 8E16[8C04]                      MOV     SS,[INITSS]
  3365 00000496 F3A4                    	REP     MOVSB
  3366 00000498 FC                              CLD
  3367                                          ; 15/07/2018
  3368                                  	;MOV	[ES:DMAADD+2],DX
  3369 00000499 8916[FA02]              	MOV	[DMAADD+2],DX
  3370 0000049D 8B36[2600]                      MOV     SI,[DPBHEAD]	; Address of first DPB
  3371                                  	;MOV	[ES:DPBHEAD+2],ES
  3372 000004A1 8C06[2800]                      MOV	[DPBHEAD+2],ES
  3373                                  	;MOV	[ES:SFT_ADDR+2],ES
  3374 000004A5 8C06[2C00]              	MOV     [SFT_ADDR+2],ES
  3375 000004A9 8A0E[4600]                      MOV     CL,[NUMIO]	; Number of DPBs
  3376 000004AD 30ED                            XOR     CH,CH
  3377                                  SETFINDPB:
  3378                                  	; 24/07/2019 - Retro DOS v3.2
  3379                                  	; 06/07/2019 - Retro DOS v3.1
  3380                                          ;MOV	[ES:SI+1AH],ES
  3381                                  	;mov	[si+1Ah],es ; MSDOS 3.3
  3382                                  	;mov	[si+1Bh],es ; MSDOS 6.0
  3383 000004AF 8C441B                          mov	[si+DPB.NEXT_DPB+2],es
  3384                                  	;MOV	BYTE [ES:SI+17H],-1  ; Never accessed before
  3385                                  	;mov	byte [si+17h],-1 ; MSDOS 3.3
  3386                                  	;mov	byte [si+18h],-1 ; MSDOS 6.0
  3387 000004B2 C64418FF                	mov	byte [si+DPB.FIRST_ACCESS],-1
  3388                                  	;add	si,32 ; MSDOS 3.3
  3389                                  	;add	si,33 ; MSDOS 6.0
  3390 000004B6 83C621                          ADD     SI,DPBSIZ ; Point to next DPB
  3391 000004B9 E2F4                    	LOOP    SETFINDPB
  3392                                  	;sub	si,32 ; MSDOS 3.3
  3393                                  	;sub	si,33 ; MSDOS 6.0
  3394 000004BB 83EE21                          SUB     SI,DPBSIZ
  3395                                  	;MOV	WORD [ES:SI+1AH],-1
  3396                                  	;mov	word [SI+1Ah],-1 ; MSDOS 3.3 
  3397                                  	;mov	word [si+1Bh],-1 ; MSDOS 6.0
  3398 000004BE C7441BFFFF              	mov	word [si+DPB.NEXT_DPB+2],-1
  3399                                  
  3400                                          ; 15/07/2018 - Retro DOS v3.0
  3401                                  	;; MSDOS 2.11
  3402                                          ;MOV	DI,[BUFFSTRT]		; Set up one default buffer
  3403                                  	;MOV	[ES:BUFFHEAD+2],ES
  3404                                          ;MOV	[ES:BUFFHEAD],DI
  3405                                  	; MSDOS 3.3
  3406 000004C3 06                      	push	es ; *
  3407 000004C4 BF[DF76]                	mov	di,SYSBUF+15  ; 721Fh for MSDOS 3.3 kernel (MSDOS.SYS)
  3408 000004C7 D1DF                    	rcr	di,1
  3409 000004C9 D1EF                    	shr	di,1
  3410 000004CB D1EF                    	shr	di,1
  3411 000004CD D1EF                    	shr	di,1
  3412 000004CF 8CC0                    	mov	ax,es
  3413 000004D1 01F8                    	add	ax,di
  3414 000004D3 8EC0                    	mov	es,ax
  3415 000004D5 31FF                    	xor	di,di
  3416 000004D7 8C06[3A00]              	mov     [BUFFHEAD+2],es
  3417 000004DB 893E[3800]              	mov     [BUFFHEAD],di
  3418                                  	;	
  3419 000004DF 26C74504FF00                    MOV     WORD [ES:DI+4],00FFH
  3420 000004E5 26C705FFFF                      MOV     WORD [ES:DI],-1
  3421 000004EA 26C74502FFFF                    MOV     WORD [ES:DI+2],-1
  3422 000004F0 07                      	pop	es ; * ; 15/07/2018
  3423 000004F1 06                              PUSH    ES
  3424 000004F2 42                              INC     DX ; **			; Leave enough room for the ARENA
  3425 000004F3 8B36[1003]              	mov	si,[ENDMEM] ; 15/07/2018
  3426                                  
  3427                                  	; 11/08/2018 - Retro DOS v3.0
  3428                                          ;invoke _$DUP_PDB		; create jfns and set CurrentPDB
  3429 000004F7 E8F419                  	CALL	_$DUP_PDB
  3430 000004FA 07                              POP	ES
  3431                                  
  3432                                  	; [CurrentPDB] = dx ; **
  3433                                  	; ds = previous [CurrentPDB]
  3434                                  	; es = cs
  3435                                  
  3436                                  ; set up memory arena
  3437                                  ;SPECIAL NOTE FOR HIGHMEM VERSION
  3438                                  ; At this point a process header has been built where the start of the 
  3439                                  ; CONSTANTS segment as refed by CS is. From this point until the return 
  3440                                  ; below be careful about references off of CS.
  3441                                  
  3442                                  	; 13/04/2018 ; *
  3443                                          ;PUSH	AX ; *
  3444                                          ;MOV	AX,[CurrentPDB]
  3445                                         	
  3446                                  	; 06/07/2019
  3447                                  	;MOV	AX,[CS:CurrentPDB] ; 15/03/2018
  3448                                  	;MOV    [ES:CurrentPDB],AX	; Put it in the REAL location
  3449                                          ;MOV	BYTE [ES:CreatePDB],0	; reset flag in REAL location
  3450                                          
  3451 000004FB 2EA1[FC02]              	mov	ax,[cs:CurrentPDB]  ; es = cs
  3452                                  
  3453 000004FF 48                      	DEC     AX
  3454 00000500 26A3[2400]                      MOV     [ES:arena_head],AX
  3455 00000504 1E                              PUSH    DS
  3456 00000505 8ED8                            MOV     DS,AX
  3457 00000507 C60600005A                      MOV     BYTE [ARENA.SIGNATURE],arena_signature_end
  3458 0000050C C70601000000                    MOV     WORD [ARENA.OWNER],arena_owner_system
  3459 00000512 262B06[1003]                    SUB     AX,[ES:ENDMEM]
  3460 00000517 F7D8                            NEG     AX
  3461 00000519 48                              DEC     AX
  3462 0000051A A30300                          MOV     [ARENA.SIZE],AX
  3463 0000051D 1F                              POP     DS
  3464                                          ;POP	AX ; *
  3465                                  
  3466 0000051E BF[9E00]                        MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
  3467                                  	; 15/07/2018
  3468 00000521 B80300                          MOV     AX,3
  3469 00000524 AB                              STOSW		; Adjust Refcount
  3470                                  	;MOV	DI,SYSINITVAR	; 16/03/2018 (Retro DOS v2.0)
  3471 00000525 BF[6B0F]                	MOV     DI,SysInitTable ; 15/07/2018 (Retro DOS v3.0)
  3472 00000528 CB                              RETF
  3473                                  	
  3474                                  	; 18/04/2018
  3475                                  FILL1	equ	$ - DATASEGMENT
  3476                                  ; ---------------------------------------------------------------------------
  3477                                  ; 16/07/2018 - Retro DOS v3.0
  3478                                  	;times (490-FILL1) db 0	; *!!!*
  3479                                  ; 27/07/2019 - Retro DOS v3.2
  3480 00000529 00<rep 3Dh>             	times (492-FILL1) db 0	; *!!!*
  3481                                  
  3482                                  ;============================================================================
  3483                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)  (2)
  3484                                  ;============================================================================
  3485                                  ; 16/07/2018 - Retro DOS 3.0	
  3486                                  ; 27/07/2019 - Retro DOS 3.2
  3487                                  
  3488                                  ;  MS_DATA.ASM (MSDOS 6.0, 1991) (1) ... $$$
  3489                                   
  3490                                  ; (continues from 'SFN' ..) - from offset 0542h in IBMDOS.COM, 1987 -
  3491                                  
  3492                                  ; DATASEGMENT + 490 ; Retro DOS v3.0
  3493                                  ; DATASEGMENT + 492 ; Retro DOS v3.2
  3494                                  
  3495                                  ;       I_am    SFN,WORD,<-1>           ; SystemFileNumber found for accessfile
  3496                                  ;       I_am    JFN,WORD                ; JobFileNumber found for accessfile
  3497                                  ;       I_am    PJFN,DWORD              ; PointerJobFileNumber found for accessfile
  3498                                  ;       I_am    WFP_START,WORD          ;
  3499                                  ;       I_am    REN_WFP,WORD            ;
  3500                                  ;       I_am    CURR_DIR_END,WORD       ;
  3501                                  ;       I_am    NEXTADD,WORD            ;
  3502                                  ;       I_am    LASTPOS,WORD            ;
  3503                                  ;       I_am    CLUSNUM,WORD            ;
  3504                                  ; MSDOS 3.3
  3505                                  ;	I_am	DIRSEC,WORD
  3506                                  ;; MSDOS 6.0
  3507                                  ;;      I_am    DIRSEC,DWORD            ;>32mb		; AC0000
  3508                                  ;       I_am    DIRSTART,WORD           ;
  3509                                  ;       I_am    SECPOS,DWORD		;>32mb Position of first sector accessed
  3510                                  ;       I_am    VALSEC,DWORD		;>32mb Number of valid (previously written)
  3511                                  ;                                       ; sectors
  3512                                  ;       I_am    BYTSECPOS,WORD          ; Position of first byte within sector
  3513                                  ;       I_am    BYTPOS,4                ; Byte position in file of access
  3514                                  ;       I_am    BYTCNT1,WORD            ; No. of bytes in first sector
  3515                                  ;       I_am    BYTCNT2,WORD            ; No. of bytes in last sector
  3516                                  ;       I_am    SECCNT,WORD             ; No. of whole sectors
  3517                                  
  3518 00000566 FFFF                    SFN:		dw -1
  3519 00000568 0000                    JFN:		dw 0
  3520 0000056A 00000000                PJFN:		dd 0
  3521 0000056E 0000                    WFP_START: 	dw 0
  3522 00000570 0000                    REN_WFP: 	dw 0
  3523 00000572 0000                    CURR_DIR_END: 	dw 0
  3524 00000574 0000                    NEXTADD: 	dw 0
  3525 00000576 0000                    LASTPOS: 	dw 0
  3526 00000578 0000                    CLUSNUM: 	dw 0
  3527                                  ; MSDOS 3.3
  3528                                  ;DIRSEC: 	dw 0
  3529                                  ; MSDOS 6.0
  3530 0000057A 00000000                DIRSEC:		dd 0 ; 24/07/2019	;>32mb
  3531 0000057E 0000                    DIRSTART: 	dw 0
  3532                                  ; MSDOS 3.3
  3533                                  ;SECPOS: 	dw 0
  3534                                  ; MSDOS 6.0
  3535 00000580 00000000                SECPOS: 	dd 0 ; 24/07/2019	;>32mb Position of first sector accessed
  3536                                  ; MSDOS 3.3
  3537                                  ;VALSEC: 	dw 0
  3538                                  ; MSDOS 6.0
  3539 00000584 00000000                VALSEC: 	dd 0 ; 24/07/2019  ;>32mb Num of valid (previously written) sectors	
  3540 00000588 0000                    BYTSECPOS: 	dw 0
  3541 0000058A 00000000                BYTPOS:		dd 0
  3542 0000058E 0000                    BYTCNT1: 	dw 0
  3543 00000590 0000                    BYTCNT2: 	dw 0
  3544 00000592 0000                    SECCNT: 	dw 0
  3545                                  
  3546                                  	; Offset 056Ah in IBMDOS.COM (MSDOS 3.3)
  3547                                  ; DATASEGMENT + 530 (in Retro DOS v3.0)
  3548                                  
  3549                                  ;       I_am    ENTFREE,WORD            ;
  3550                                  ;       I_am    ENTLAST,WORD            ;
  3551                                  ;       I_am    NXTCLUSNUM,WORD         ;
  3552                                  ;       I_am    GROWCNT,DWORD           ;
  3553                                  ;       I_am    CURBUF,DWORD            ;
  3554                                  ;       I_am    CONSft,DWORD            ; SFT of console swapped guy.
  3555                                  ;       I_am    SAVEBX,WORD             ;
  3556                                  ;       I_am    SAVEDS,WORD             ;
  3557                                  ;       I_am    restore_tmp,WORD        ; return address for restore world
  3558                                  ;       I_am    NSS,WORD
  3559                                  ;       I_am    NSP,WORD
  3560                                  
  3561 00000594 0000                    ENTFREE:	dw 0
  3562 00000596 0000                    ENTLAST:	dw 0
  3563 00000598 0000                    NXTCLUSNUM:	dw 0
  3564 0000059A 00000000                GROWCNT:	dd 0
  3565 0000059E 00000000                CURBUF:		dd 0
  3566 000005A2 00000000                CONSFT:		dd 0
  3567 000005A6 0000                    SAVEBX:		dw 0
  3568 000005A8 0000                    SAVEDS:		dw 0
  3569 000005AA 0000                    RESTORE_TMP:	dw 0
  3570 000005AC 0000                    NSS:		dw 0
  3571 000005AE 0000                    NSP:		dw 0	 ; Offset 0584h in IBMDOS.COM (MSDOS 3.3)
  3572                                  
  3573                                  ; DATASEGMENT+558 :  ; *!!!*
  3574                                  	; Here is offset 0586h in IBMDOS.COM, 1987 (MSDOS 3.3 kernel) 
  3575                                  
  3576                                  ; MSDOS 6.0
  3577                                  ;       I_am    EXTOPEN_FLAG,WORD,<0>   ;FT. extended open input flag       ;AN000;
  3578                                  ;       I_am    EXTOPEN_ON,BYTE,<0>     ;FT. extended open conditional flag ;AN000;
  3579                                  ;       I_am    EXTOPEN_IO_MODE,WORD,<0>;FT. extended open io mode          ;AN000;
  3580                                  ;       I_am    SAVE_DI,WORD            ;FT. extended open saved DI         ;AN000;
  3581                                  ;       I_am    SAVE_ES,WORD            ;FT. extended open saved ES         ;AN000;
  3582                                  ;       I_am    SAVE_DX,WORD            ;FT. extended open saved DX         ;AN000;
  3583                                  ;       I_am    SAVE_CX,WORD            ;FT. extended open saved CX         ;AN000;
  3584                                  ;       I_am    SAVE_BX,WORD            ;FT. extended open saved BX         ;AN000;
  3585                                  ;       I_am    SAVE_SI,WORD            ;FT. extended open saved SI         ;AN000;
  3586                                  ;       I_am    SAVE_DS,WORD            ;FT. extended open saved DS         ;AN000;
  3587                                  
  3588                                  ;	HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
  3589                                  ;	we used to just pass 16 bits in a register.  Now High_SECTOR holds
  3590                                  ;	the high 16, the low 16 are still in the register.
  3591                                  ;
  3592                                  ;       I_am    HIGH_SECTOR,WORD,<0>    ;>32mb higher sector #		    ;AN000;
  3593                                  ;
  3594                                  ;       ;I_am    UU_HIGH_SECTOR_TEMP,WORD,<0> ;M019: Unused
  3595                                  ;       I_am    OffsetMagicPatch,WORD,<offset MagicPatch> ;scottq 8/6/92
  3596                                  ;                                                         ;see dos\mpatch.asm
  3597                                  ;
  3598                                  ;       I_am    DISK_FULL,BYTE          ;>32mb indicating disk full when 1  ;AN000;
  3599                                  ;       I_am    TEMP_VAR,WORD           ; temporary variable for everyone   ;AN000;
  3600                                  ;       I_am    TEMP_VAR2,WORD          ; temporary variable 2 for everyone ;AN000;
  3601                                  ;       I_am    DrvErr,BYTE             ; used to save drive error          ;AN000;
  3602                                  ;       I_am    DOS34_FLAG,WORD,<0>     ; common flag for DOS 3.4           ;AN000;
  3603                                  ;       I_am    NO_FILTER_PATH,DWORD    ; pointer to orignal path           ;AN000;
  3604                                  ;       I_am    NO_FILTER_DPATH,DWORD   ; pointer to orignal path of destination;AN000;
  3605                                  ;; M008
  3606                                  ;       I_am   AbsRdWr_SS,WORD         ; INT 25/26 user stack segment
  3607                                  ;       I_am   AbsRdWr_SP,WORD         ; INT 25/26 user stack offset
  3608                                  ;       I_am   UU_Callback_flag,BYTE,<0>  ; Unused
  3609                                  ;; M008
  3610                                  
  3611                                  ; 23/07/2019 - Retro DOS v3.2
  3612                                  
  3613                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
  3614                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
  3615                                  ; the high 16, the low 16 are still in the register.
  3616                                  
  3617                                  HIGH_SECTOR:	
  3618 000005B0 0000                    	dw	0		;>32mb higher sector #		;AN000;
  3619                                  ; 24/07/2019
  3620                                  ;DISK_FULL:
  3621                                  ;	db	0		;>32mb indicating disk full when 1 ;AN000;
  3622                                  ;	db	0 ; reserved
  3623                                  TEMP_VAR:
  3624 000005B2 0000                    	dw	0		; temporary variable for everyone ;AN000;
  3625                                  TEMP_VAR2:
  3626 000005B4 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
  3627                                   
  3628                                  ; make those pushes fast!!!
  3629                                  	;.EVEN
  3630                                  align 2
  3631                                  
  3632                                  ; MSDOS 3.3 (& MSDOS 6.0)
  3633                                  StackSize equ 180h			; gross but effective
  3634                                  
  3635                                  ;;;StackSize = 300h			; This is a "trial" change IBM hasn't
  3636                                  ;;;					; made up their minds about
  3637                                   
  3638                                  ;
  3639                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
  3640                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
  3641                                  ;
  3642                                          ;PUBLIC  RENAMEDMA,AuxStack,DskStack,IOStack
  3643                                  RENAMEDMA:  ; LABEL   BYTE		; See DOS_RENAME
  3644                                  	;DB	StackSize DUP (?)       ;
  3645 000005B6 00<rep 180h>            	times	StackSize db 0
  3646                                  AUXSTACK:   ; LABEL   BYTE		;  Offset 0706h in IBMDOS.COM, 1987
  3647                                   	;DB	StackSize DUP (?)       ;
  3648 00000736 00<rep 180h>            	times	StackSize db 0
  3649                                  DSKSTACK:   ; LABEL   BYTE		;  Offset 0886h in IBMDOS.COM, 1987
  3650                                   	;DB	StackSize DUP (?)       ;
  3651 000008B6 00<rep 180h>            	times	StackSize db 0
  3652                                  IOSTACK:    ; LABEL   BYTE		;  Offset 0A06h in IBMDOS.COM, 1987
  3653                                   
  3654                                  ; patch space for Boca folks.
  3655                                  ; Say What????!!! This does NOT go into the swappable area!
  3656                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
  3657                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
  3658                                   
  3659                                  ;PUBLIC  IBMPATCH
  3660                                  ;IBMPATCH label byte
  3661                                  ;	I_am    PRINTER_FLAG,BYTE,<0>   ; status of PRINT utility
  3662                                  ;	I_am    VOLCHNG_FLAG,BYTE,<0>   ; true if volume label created
  3663                                  ;	I_am    VIRTUAL_OPEN,BYTE,<0>   ; non-zero if we opened a virtual file
  3664                                  
  3665                                  IBMPATCH:
  3666 00000A36 00                      PRINTER_FLAG:	db 0
  3667 00000A37 00                      VOLCHNG_FLAG:	db 0
  3668 00000A38 00                      VIRTUAL_OPEN:	db 0
  3669                                  
  3670                                  ; MSDOS 6.0
  3671                                  ;; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
  3672                                  ;      I_am     FSeek_drive,BYTE         ;AN000; fastseek drive #
  3673                                  ;      I_am     FSeek_firclus,WORD       ;AN000; fastseek first cluster #
  3674                                  ;      I_am     FSeek_logclus,WORD       ;AN000; fastseek logical cluster #
  3675                                  ;      I_am     FSeek_logsave,WORD       ;AN000; fastseek returned log clus #
  3676                                  ;      I_am     UU_ACT_PAGE,WORD,<-1>    ;;;;;;; ;BL ; active EMS page ;AN000;
  3677                                  ;      I_am     TEMP_DOSLOC,WORD,<-1>    ;stores the temporary location of dos
  3678                                  					 ;at SYSINIT time.
  3679                                  ;SWAP_END LABEL   BYTE
  3680                                  ;PUBLIC  SWAP_END
  3681                                  
  3682                                  SWAP_END:
  3683                                   
  3684                                  ;; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
  3685                                  ;;   BE USED. If the size of the swap data area is ODD, it will be rounded up
  3686                                  ;;   to include this byte.
  3687                                  ;       DB      ?
  3688                                  
  3689 00000A39 00                      	db	0
  3690                                   
  3691                                  ;;hkn;	DB      (512+80+32-(SWAP_END-ibmpatch)) DUP (?)
  3692                                  
  3693                                  ;DOSDATA    ENDS
  3694                                  
  3695                                  ; 08/09/2018
  3696 00000A3A 00<rep 243h>            	times 579 db 0
  3697                                  
  3698                                  ;12/08/2018 - Retro DOS v3.0
  3699                                  ;15/07/2018
  3700                                  ;============================================================================
  3701                                  ; 	Retro DOS v3.0
  3702                                  ;============================================================================
  3703 00000C7D 00                      	db 	0
  3704                                  RETRODOSMSG:
  3705 00000C7E 0D0A                    	db	13,10
  3706                                  	;;;;db	"Retro DOS v3.0 by Erdogan Tan [2018]"
  3707                                  	;;;db	"Retro DOS v3.1 by Erdogan Tan [2019]" ; 29/06/2019
  3708                                  	;;db	"Retro DOS v3.2 by Erdogan Tan [2019]" ; 17/07/2019
  3709                                  	;db	"Retro DOS v3.2 by Erdogan Tan [2019-2022]" ; 22/11/2022
  3710 00000C80 526574726F20444F53-     	db	"Retro DOS v3.2 by Erdogan Tan [2019-2024]" ; 16/01/2024
  3710 00000C89 2076332E3220627920-
  3710 00000C92 4572646F67616E2054-
  3710 00000C9B 616E205B323031392D-
  3710 00000CA4 323032345D         
  3711 00000CA9 0D0A2400                	db	13,10,"$", 0 
  3712                                  
  3713                                  ;============================================================================
  3714                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3715                                  ;============================================================================
  3716                                  ; 16/07/2018 - Retro DOS 3.0
  3717                                  
  3718                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3719                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3720 00000CAD 03                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3721 00000CAE 1E                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3722                                  
  3723                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3724                                  ;        I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3725                                  ;        I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3726                                  
  3727                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3728                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3729                                  ;
  3730                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3731                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3732                                  
  3733                                  ; Days in year
  3734                                  
  3735                                  YRTAB:   
  3736 00000CAF C8A6                    	DB	200,166			; Leap year
  3737 00000CB1 C8A5                    	DB	200,165
  3738 00000CB3 C8A5                    	DB	200,165
  3739 00000CB5 C8A5                    	DB	200,165
  3740                                  
  3741                                  ; Days of each month
  3742                                  
  3743                                  MONTAB:        
  3744 00000CB7 1F                      	DB      31                      ; January
  3745                                  february:
  3746 00000CB8 1C                      	DB	28 			; February--reset each 
  3747                                  					; time year changes
  3748 00000CB9 1F                              DB      31                      ; March
  3749 00000CBA 1E                              DB      30                      ; April
  3750 00000CBB 1F                              DB      31                      ; May
  3751 00000CBC 1E                              DB      30                      ; June
  3752 00000CBD 1F                              DB      31                      ; July
  3753 00000CBE 1F                              DB      31                      ; August
  3754 00000CBF 1E                              DB      30                      ; September
  3755 00000CC0 1F                              DB      31                      ; October
  3756 00000CC1 1E                              DB      30                      ; November
  3757 00000CC2 1F                              DB      31                      ; December
  3758                                  
  3759                                  ;
  3760                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3761                                  ; those error codes which are "allowed" for each system call. If the error
  3762                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3763                                  ; is to return the "real" error via Extended error, and one of the allowed
  3764                                  ; errors on the actual call.
  3765                                  ;
  3766                                  ; The table is organized as follows:
  3767                                  ;
  3768                                  ;    Each entry in the table is of variable size, but the first
  3769                                  ;       two bytes are always:
  3770                                  ;
  3771                                  ;       Call#,Cnt of bytes following this byte
  3772                                  ;
  3773                                  ; EXAMPLE:
  3774                                  ;       Call 61 (OPEN)
  3775                                  ;
  3776                                  ;       DB      61,5,12,3,2,4,5
  3777                                  ;
  3778                                  ;       61 is the AH INT 21 call value for OPEN.
  3779                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3780                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3781                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3782                                  ;       this case 5). The last value will be the one returned on the call if
  3783                                  ;       the "real" error is not one of the allowed ones.
  3784                                  ;
  3785                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3786                                  ;   there is NO entry. This means that NO error codes are returned on this
  3787                                  ;   call, so set up an Extended error and leave the current error code alone.
  3788                                  ;
  3789                                  ; The table is terminated by a call value of 0FFh
  3790                                  
  3791                                  ;PUBLIC I21_MAP_E_TAB
  3792                                  	; 10/08/2018
  3793                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3794 00000CC3 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3795 00000CC7 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3796 00000CCC 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3797 00000CD0 0205                        DB          error_file_not_found,error_access_denied
  3798 00000CD2 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3799 00000CD6 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3800 00000CDA 04                          DB          error_too_many_open_files
  3801 00000CDB 05                          DB          error_access_denied
  3802                                      ; MSDOS 6.0
  3803                                      ;DB  OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3804                                      ;DB          error_too_many_open_files
  3805                                      ;DB          error_not_dos_disk,error_access_denied
  3806                                      ; MSDOS 3.3
  3807 00000CDC 3D0503020C                  DB  OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3808 00000CE1 0405                        DB          error_too_many_open_files,error_access_denied
  3809 00000CE3 3E0106                      DB  CLOSE,1,error_invalid_handle
  3810 00000CE6 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3811 00000CEA 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3812 00000CEE 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3813 00000CF3 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3814 00000CF7 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3815 00000CFC 05                          DB          error_access_denied
  3816 00000CFD 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3817 00000D02 0605                        DB          error_invalid_handle,error_access_denied
  3818 00000D04 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3819 00000D08 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3820                                      ; MSDOS 6.0	
  3821                                      ;DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3822                                      ; MSDOS 3.3	
  3823 00000D0C 47010F                      DB  CURRENT_DIR,1,error_invalid_drive
  3824 00000D0F 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3825 00000D13 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3826 00000D17 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3827 00000D1C 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3828 00000D21 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3829 00000D24 0805                        DB          error_not_enough_memory,error_access_denied
  3830 00000D26 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3831 00000D2B 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3832                                      ; MSDOS 6.0
  3833                                      ;DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3834                                      ;DB          error_current_directory,error_access_denied
  3835                                      ; MSDOS 3.3
  3836 00000D2E 5604110302                  DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3837 00000D33 05                          DB          error_access_denied
  3838                                      ; MSDOS 6.0	
  3839                                      ;DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3840                                      ;DB             error_invalid_data,error_invalid_function
  3841                                      ; MSDOS 3.03	
  3842 00000D34 57020601                    DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3843 00000D38 580101                      DB  ALLOCOPER,1,error_invalid_function
  3844 00000D3B 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3845 00000D3F 0405                        DB          error_too_many_open_files,error_access_denied
  3846 00000D41 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3847 00000D45 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3848 00000D48 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3849 00000D4C 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3850 00000D4E 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3851 00000D52 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3852 00000D56 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3853 00000D59 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3854 00000D5D 01                          DB              error_invalid_function
  3855                                      ; MSDOS 6.0		
  3856                                      ;DB	ExtOpen,10
  3857                                      ;DB   error_path_not_found,error_file_not_found,error_invalid_access
  3858                                      ;DB         error_too_many_open_files,error_file_exists,error_not_enough_memory
  3859                                      ;DB         error_not_dos_disk,error_invalid_data
  3860                                      ;DB             error_invalid_function,error_access_denied
  3861                                      ;DB GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3862                                      ;DB         error_invalid_function,error_access_denied
  3863 00000D5E FF                          DB  0FFh
  3864                                  
  3865                                  ;============================================================================
  3866                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3867                                  ;============================================================================
  3868                                  ; 16/07/2018 - Retro DOS 3.0
  3869                                  
  3870                                  ;**
  3871                                  ;
  3872                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
  3873                                  ; errors.  Each entry is 4 bytes long:
  3874                                  ;
  3875                                  ;       Err#,Class,Action,Locus
  3876                                  ;
  3877                                  ; A value of 0FFh indicates a call specific value (ie.  should already
  3878                                  ; be set).  AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
  3879                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
  3880                                  ;
  3881                                  
  3882                                  ;PUBLIC  ERR_TABLE_21
  3883                                  ERR_TABLE_21: ; LABEL   BYTE
  3884 00000D5F 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,     0FFh
  3885 00000D63 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3886 00000D67 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3887 00000D6B 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,     errLOC_Unk
  3888 00000D6F 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,      0FFh
  3889 00000D73 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3890 00000D77 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,     errLOC_Mem
  3891 00000D7B 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3892 00000D7F 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,     errLOC_Mem
  3893 00000D83 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,     errLOC_Mem
  3894 00000D87 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,      errLOC_Unk
  3895 00000D8B 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3896 00000D8F 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,     errLOC_Unk
  3897 00000D93 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3898 00000D97 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,      errLOC_Disk
  3899 00000D9B 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,      errLOC_Disk
  3900 00000D9F 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3901 00000DA3 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,      errLOC_Disk
  3902 00000DA7 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3903 00000DAB 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3904 00000DAF 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,     0FFh
  3905 00000DB3 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,      errLOC_Unk
  3906 00000DB7 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,     errLOC_Disk
  3907 00000DBB 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,      errLOC_Net
  3908 00000DBF 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,      errLOC_Net
  3909 00000DC3 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,      errLOC_Unk
  3910 00000DC7 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,     errLOC_Unk
  3911 00000DCB 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3912                                      ; MSDOS 6.0
  3913                                      ;DB  error_handle_EOF,            errCLASS_OutRes,    errACT_Abort,     errLOC_Unk ;AN000;
  3914                                      ;DB  error_handle_Disk_Full,      errCLASS_OutRes,    errACT_Abort,     errLOC_Unk ;AN000;
  3915                                      ;DB  error_sys_comp_not_loaded,   errCLASS_Unk,       errACT_Abort,     errLOC_Disk ;AN001;
  3916 00000DCF FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	    0FFh
  3917                                  
  3918                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
  3919                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
  3920                                  ;		db 2,8,3,2
  3921                                  ;		db 3,8,3,2
  3922                                  ;		db 4,1,4,1
  3923                                  ;		db 5,3,3,0FFh
  3924                                  ;		db 6,7,4,1
  3925                                  ;		db 7,7,5,5
  3926                                  ;		db 8,1,4,5
  3927                                  ;		db 9,7,4,5
  3928                                  ;		db 0Ah,7,4,5
  3929                                  ;		db 0Bh,9,3,1
  3930                                  ;		db 0Ch,7,4,1
  3931                                  ;		db 0Dh,9,4,1
  3932                                  ;		db 0Fh,8,3,2
  3933                                  ;		db 10h,3,3,2
  3934                                  ;		db 11h,0Dh,3,2
  3935                                  ;		db 12h,8,3,2
  3936                                  ;		db 50h,0Ch,3,2
  3937                                  ;		db 20h,0Ah,2,2
  3938                                  ;		db 21h,0Ah,2,2
  3939                                  ;		db 54h,1,4,0FFh
  3940                                  ;		db 56h,3,3,1
  3941                                  ;		db 52h,1,4,2
  3942                                  ;		db 32h,9,3,3
  3943                                  ;		db 55h,0Ch,3,3
  3944                                  ;		db 57h,9,3,1
  3945                                  ;		db 53h,0Dh,4,1
  3946                                  ;		db 24h,1,4,5
  3947                                  ;		db 0FFh,0FFh,0FFh,0FFh
  3948                                  
  3949                                  ;
  3950                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
  3951                                  ; errors.  Each entry is 4 bytes long:
  3952                                  ;
  3953                                  ;       Err#,Class,Action,Locus
  3954                                  ;
  3955                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
  3956                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
  3957                                  ; THE END.
  3958                                  
  3959                                  ;PUBLIC  ERR_TABLE_24
  3960                                  ERR_TABLE_24: ; LABEL   BYTE
  3961 00000DD3 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3962 00000DD7 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3963 00000DDB 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,    0FFh
  3964 00000DDF 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3965 00000DE3 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,     errLOC_Disk
  3966 00000DE7 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3967 00000DEB 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,     errLOC_Disk
  3968 00000DEF 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3969 00000DF3 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,     errLOC_Disk
  3970 00000DF7 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,    errLOC_SerDev
  3971 00000DFB 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,     0FFh
  3972 00000DFF 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,     0FFh
  3973 00000E03 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,     0FFh
  3974 00000E07 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3975 00000E0B 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3976 00000E0F 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3977 00000E13 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,      errLOC_Net
  3978 00000E17 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3979 00000E1B 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3980 00000E1F FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,     0FFh
  3981                                  
  3982                                  
  3983                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
  3984                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
  3985                                  ;		db 14h,4,5,1
  3986                                  ;		db 15h,5,7,0FFh
  3987                                  ;		db 16h,4,5,1
  3988                                  ;		db 17h,0Bh,4,2
  3989                                  ;		db 18h,4,5,1
  3990                                  ;		db 19h,5,1,2
  3991                                  ;		db 1Ah,0Bh,7,2
  3992                                  ;		db 1Bh,0Bh,4,2
  3993                                  ;		db 1Ch,2,7,4
  3994                                  ;		db 1Dh,5,4,0FFh
  3995                                  ;		db 1Eh,5,4,0FFh
  3996                                  ;		db 1Fh,0Dh,4,0FFh
  3997                                  ;		db 20h,0Ah,2,2
  3998                                  ;		db 21h,0Ah,2,2
  3999                                  ;		db 22h,0Bh,7,2
  4000                                  ;		db 32h,9,3,3
  4001                                  ;		db 23h,7,4,1
  4002                                  ;		db 24h,1,4,5
  4003                                  ;		db 0FFh,0Dh,5,0FFh
  4004                                  
  4005                                  ;
  4006                                  ; We need to map old int 24 errors and device driver errors into the new set
  4007                                  ; of errors. The following table is indexed by the new errors
  4008                                  ;
  4009                                  
  4010                                  ;Public  ErrMap24
  4011                                  ErrMap24: ; Label   BYTE
  4012 00000E23 13                          DB  error_write_protect	; 0
  4013 00000E24 14                          DB  error_bad_unit		; 1
  4014 00000E25 15                          DB  error_not_ready		; 2
  4015 00000E26 16                          DB  error_bad_command	; 3
  4016 00000E27 17                          DB  error_CRC		; 4
  4017 00000E28 18                          DB  error_bad_length	; 5
  4018 00000E29 19                          DB  error_seek		; 6
  4019 00000E2A 1A                          DB  error_not_DOS_disk	; 7
  4020 00000E2B 1B                          DB  error_sector_not_found	; 8
  4021 00000E2C 1C                          DB  error_out_of_paper	; 9
  4022 00000E2D 1D                          DB  error_write_fault	; A
  4023 00000E2E 1E                          DB  error_read_fault	; B
  4024 00000E2F 1F                          DB  error_gen_failure	; C
  4025 00000E30 1F                          DB  error_gen_failure	; D  RESERVED
  4026 00000E31 1F                          DB  error_gen_failure	; E  RESERVED
  4027 00000E32 22                          DB  error_wrong_disk	; F
  4028                                  
  4029                                  ;Public  ErrMap24End
  4030                                  ErrMap24End: ; LABEL   BYTE
  4031                                  
  4032                                  ; 16/07/2018 - Retro DOS v3.0
  4033                                  ;_MAXCALL:	db 	36
  4034                                  ;_MAXCOM:	db	104
  4035                                  
  4036                                  ; 08/09/2018
  4037 00000E33 24                          db  36
  4038 00000E34 68                          db  104
  4039                                  
  4040                                  ;============================================================================
  4041                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  4042                                  ;============================================================================
  4043                                  ; 11/07/2018 - Retro DOS v3.0
  4044                                  
  4045                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  4046                                  
  4047 00000E35 90                      align 2
  4048                                  
  4049                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  4050                                  
  4051                                  ; Standard Functions
  4052                                  ;DISPATCH    LABEL WORD
  4053                                  DISPATCH:
  4054                                  	; 16/07/2018 - Retro DOS v3.0
  4055                                  	; (MSDOS 3.3)
  4056                                  
  4057 00000E36 [1268]                          short_addr  _$ABORT			    ;  0      0
  4058 00000E38 [0A24]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  4059 00000E3A [1324]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  4060 00000E3C [CC24]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  4061 00000E3E [E924]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  4062 00000E40 [EF24]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  4063 00000E42 [5C23]                          short_addr  _$RAW_CON_IO		    ;  6      6
  4064 00000E44 [8823]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  4065 00000E46 [2F21]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  4066 00000E48 [8921]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  4067 00000E4A [9521]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  4068 00000E4C [0325]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  4069 00000E4E [0D25]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  4070 00000E50 [F01D]                          short_addr  _$DISK_RESET		    ; 13      D
  4071 00000E52 [EC1C]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  4072 00000E54 [EC2B]                          short_addr  _$FCB_OPEN			    ; 15      F
  4073 00000E56 [B625]                          short_addr  _$FCB_CLOSE			    ; 16     10
  4074 00000E58 [002D]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  4075 00000E5A [952D]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  4076 00000E5C [5225]                          short_addr  _$FCB_DELETE		    ; 19     13
  4077 00000E5E [EC2C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  4078 00000E60 [F12C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  4079 00000E62 [D22C]                          short_addr  _$FCB_CREATE		    ; 22     16
  4080 00000E64 [2726]                          short_addr  _$FCB_RENAME		    ; 23     17
  4081                                  	; 16/07/2018
  4082                                          ;short_addr _CPMFUNC			    ; 24     18	
  4083 00000E66 [B717]                          short_addr  NO_OP			    ; 24     18
  4084 00000E68 [E71C]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  4085 00000E6A [DC1C]                          short_addr  _$SET_DMA			    ; 26     1A
  4086                                  
  4087                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4088                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4089                                  ;                                                                          ;
  4090 00000E6C [791D]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  4091 00000E6E [7B1D]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  4092                                  ;                                                                          ;
  4093                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4094                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4095                                  
  4096                                          ;short_addr  _CPMFUNC			    ; 29     1D
  4097                                          ;short_addr  _CPMFUNC			    ; 30     1E
  4098                                  
  4099                                  ; 08/07/2018 - Retro DOS v3.0
  4100                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4101                                  
  4102 00000E70 [B717]                  	short_addr  NO_OP			    ; 29     1D
  4103 00000E72 [B717]                  	short_addr  NO_OP			    ; 30     1E
  4104                                  
  4105                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4106                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4107                                  ;                                                                          ;
  4108 00000E74 [BF1D]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  4109                                  ;                                                                          ;
  4110                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4111                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4112                                          ;short_addr _CPMFUNC			    ; 32     20
  4113                                  
  4114                                  ; 08/07/2018 - Retro DOS v3.0
  4115                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4116                                  
  4117 00000E76 [B717]                  	short_addr  NO_OP			    ; 32     20
  4118                                  
  4119 00000E78 [F62C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  4120 00000E7A [FB2C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  4121 00000E7C [6725]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  4122 00000E7E [3A25]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  4123                                  
  4124                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  4125                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  4126                                  
  4127                                  ; Extended Functions
  4128 00000E80 [0E1D]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  4129                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4130                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4131                                  ;                                                                          ;
  4132 00000E82 [FC1E]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  4133                                  ;                                                                          ;
  4134                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4135                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4136 00000E84 [E72C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  4137 00000E86 [E22C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  4138 00000E88 [6E1D]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  4139 00000E8A [BF18]                          short_addr  _$GET_DATE                      ; 42     2A
  4140 00000E8C [DC18]                          short_addr  _$SET_DATE                      ; 43     2B
  4141 00000E8E [FC18]                          short_addr  _$GET_TIME                      ; 44     2C
  4142 00000E90 [0D19]                          short_addr  _$SET_TIME                      ; 45     2D
  4143 00000E92 [BA1A]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  4144                                  
  4145                                  ; Extended functionality group
  4146 00000E94 [C81C]                          short_addr  _$GET_DMA                       ; 47     2F
  4147 00000E96 [9C1A]                          short_addr  _$GET_VERSION                   ; 48     30
  4148 00000E98 [B667]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  4149                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4150                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4151                                  ;                                                                          ;
  4152 00000E9A [C11D]                          short_addr  _$GET_DPB			    ; 50     32
  4153                                  ;                                                                          ;
  4154                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4155                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4156 00000E9C [9D14]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  4157 00000E9E [A71D]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  4158 00000EA0 [FE1C]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  4159 00000EA2 [9D1C]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  4160 00000EA4 [261D]                          short_addr  _$CHAR_OPER                     ; 55     37
  4161 00000EA6 [C11A]                          short_addr  _$INTERNATIONAL                 ; 56     38
  4162                                  ; XENIX CALLS
  4163                                  ;   Directory Group
  4164 00000EA8 [D42F]                          short_addr  _$MKDIR			    ; 57     39
  4165 00000EAA [262F]                          short_addr  _$RMDIR			    ; 58     3A
  4166 00000EAC [622F]                          short_addr  _$CHDIR			    ; 59     3B
  4167                                  ;   File Group
  4168 00000EAE [3874]                          short_addr  _$CREAT			    ; 60     3C
  4169 00000EB0 [7E73]                          short_addr  _$OPEN			    ; 61     3D
  4170 00000EB2 [0B71]                          short_addr  _$CLOSE		 	    ; 62     3E
  4171 00000EB4 [2372]                          short_addr  _$READ			    ; 63     3F
  4172 00000EB6 [7872]                          short_addr  _$WRITE			    ; 64     40
  4173 00000EB8 [8D74]                          short_addr  _$UNLINK			    ; 65     41
  4174 00000EBA [7D72]                          short_addr  _$LSEEK			    ; 66     42
  4175 00000EBC [4574]                          short_addr  _$CHMOD			    ; 67     43
  4176 00000EBE [3130]                          short_addr  _$IOCTL			    ; 68     44
  4177 00000EC0 [3973]                          short_addr  _$DUP			    ; 69     45
  4178 00000EC2 [5B73]                          short_addr  _$DUP2			    ; 70     46
  4179 00000EC4 [C92E]                          short_addr  _$CURRENT_DIR		    ; 71     47
  4180                                  ;   Memory Group
  4181 00000EC6 [9768]                          short_addr  _$ALLOC			    ; 72     48
  4182 00000EC8 [B469]                          short_addr  _$DEALLOC                       ; 73     49
  4183 00000ECA [9069]                          short_addr  _$SETBLOCK                      ; 74     4A
  4184                                  ;   Process Group
  4185 00000ECC [2B63]                          short_addr  _$EXEC			    ; 75     4B
  4186 00000ECE [EE67]                          short_addr  _$EXIT			    ; 76     4C
  4187 00000ED0 [2163]                          short_addr  _$WAIT			    ; 77     4D
  4188 00000ED2 [082E]                          short_addr  _$FIND_FIRST		    ; 78     4E
  4189                                  ;   Special Group
  4190 00000ED4 [612E]                          short_addr  _$FIND_NEXT			    ; 79     4F
  4191                                  ; SPECIAL SYSTEM GROUP
  4192                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4193                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4194                                  ;                                                                          ;
  4195 00000ED6 [9114]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  4196 00000ED8 [9714]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  4197 00000EDA [B31D]                          short_addr  _$GET_IN_VARS                   ; 82     52
  4198 00000EDC [201E]                          short_addr  _$SETDPB			    ; 83     53
  4199                                  ;                                                                          ;
  4200                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4201                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4202 00000EDE [B51A]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  4203                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4204                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4205                                  ;                                                                          ;
  4206 00000EE0 [EE1E]                          short_addr  _$DUP_PDB                       ; 85     55
  4207                                  ;                                                                          ;
  4208                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4209                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4210 00000EE2 [B574]                          short_addr  _$RENAME			    ; 86     56
  4211 00000EE4 [E972]                          short_addr  _$FILE_TIMES                    ; 87     57
  4212 00000EE6 [D569]                          short_addr  _$ALLOCOPER                     ; 88     58
  4213                                  
  4214                                  ; 08/07/2018 - Retro DOS v3.0
  4215                                  ; -------------------------------------------------------------------------;
  4216                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4217                                  
  4218                                  ; Network extention system calls
  4219 00000EE8 [4B1D]                          short_addr  _$GetExtendedError              ; 89     59
  4220 00000EEA [4275]                          short_addr  _$CreateTempFile                ; 90     5A
  4221 00000EEC [2A75]                          short_addr  _$CreateNewFile                 ; 91     5B
  4222 00000EEE [DA75]                          short_addr  _$LockOper                      ; 92     5C
  4223 00000EF0 [F769]                          short_addr  _$ServerCall                    ; 93     5D
  4224 00000EF2 [4C6C]                          short_addr  _$UserOper                      ; 94     5E
  4225 00000EF4 [DB6B]                          short_addr  _$AssignOper                    ; 95     5F
  4226 00000EF6 [A470]                          short_addr  _$NameTrans                     ; 96     60
  4227 00000EF8 [B717]                  	short_addr  NO_OP			    ; 97     61
  4228 00000EFA [9714]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  4229                                  ; the next call is reserved for hangool sys call
  4230                                  	; 16/07/2018
  4231                                  	;short_addr  _$ECS_Call			    ; 99     63
  4232 00000EFC [B717]                  	short_addr  NO_OP			    ; 99     63
  4233                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4234                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4235                                  ;                                                                          ;
  4236 00000EFE [C414]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  4237                                  ;                                                                          ;
  4238                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4239                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4240 00000F00 [471B]                          short_addr  _$GetExtCntry                   ; 101    65
  4241 00000F02 [461C]                          short_addr  _$GetSetCdPg                    ; 102    66
  4242 00000F04 [5A71]                          short_addr  _$ExtHandle                     ; 103    67
  4243 00000F06 [3E71]                          short_addr  _$COMMIT                        ; 104    68
  4244                                  
  4245                                  ; 08/07/2018
  4246                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  4247                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  4248                                  
  4249                                  ;	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  4250                                  ;	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  4251                                  ;	short_addr  NO_OP                           ; 107    6B   
  4252                                  ;						    ; IFS_IOCTL no longer 
  4253                                  ;						    ; supported
  4254                                  ;	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  4255                                  
  4256                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4257                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4258                                  ;                                                                          ;
  4259                                  ;ifdef ROMEXEC
  4260                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  4261                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  4262                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  4263                                  ;endif
  4264                                  ;                                                                          ;
  4265                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4266                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4267                                  
  4268                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  4269                                  
  4270                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  4271                                  
  4272                                  ; 08/07/2018 - Retro DOS v3.0
  4273                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4274                                  
  4275                                  ;	If	Installed
  4276                                  
  4277                                  align 2
  4278                                  
  4279                                  ;PUBLIC FOO
  4280                                  
  4281                                  FOO:	; LABEL WORD
  4282 00000F08 [6918]                          short_addr  Leave2F
  4283                                  
  4284 00000F0A [0C0F]                  DTab:	DW  DOSTable
  4285                                  
  4286                                  	;PUBLIC FOO,DTAB
  4287                                  
  4288                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  4289                                         
  4290                                  DOSTable:  ; LABEL  WORD
  4291 00000F0C 2F                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  46
  4292 00000F0D [9618]                          short_addr  DOSInstall          ;   0 install check
  4293 00000F0F [333B]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  4294 00000F11 [1B1D]                          short_addr  RECSET              ;   2   RECSET
  4295 00000F13 [9318]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  4296 00000F15 [2D59]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  4297 00000F17 [1524]                          short_addr  OUTT                ;   5   OUT
  4298 00000F19 [995B]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  4299 00000F1B [FB60]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  4300 00000F1D [2B3C]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  4301 00000F1F [BF62]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  4302 00000F21 [7476]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  4303 00000F23 [DD38]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  4304 00000F25 [C638]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  4305 00000F27 [5419]                          short_addr  DATE16              ;   13  DATE16
  4306 00000F29 [2C20]                          short_addr  Idle		;   14      empty slot
  4307 00000F2B [EF60]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  4308 00000F2D [2C20]                          short_addr  Idle		;   16      empty slot
  4309 00000F2F [F51F]                          short_addr  StrCpy              ;   17  StrCpy
  4310 00000F31 [0D20]                          short_addr  StrLen              ;   18  StrLen
  4311 00000F33 [F158]                          short_addr  UCase		;   19  UCase
  4312 00000F35 [9361]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  4313 00000F37 [9662]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  4314 00000F39 [5B6B]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  4315 00000F3B [0C6D]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  4316 00000F3D [4916]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  4317 00000F3F [B96C]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  4318 00000F41 [C970]                          short_addr  DriveFromText       ;   26  DriveFromText
  4319 00000F43 [FB19]                          short_addr  SETYEAR             ;   27  SETYEAR
  4320 00000F45 [921A]                          short_addr  DSUM                ;   28  DSUM
  4321 00000F47 [EF19]                          short_addr  DSLIDE              ;   29  DSLIDE
  4322 00000F49 [D71F]                          short_addr  StrCmp              ;   30  StrCmp
  4323 00000F4B [FF6B]                          short_addr  InitCDS             ;   31  initcds
  4324 00000F4D [2D6B]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  4325 00000F4F [A470]                          short_addr  _$NameTrans		;   33  $NameTrans
  4326 00000F51 [DE17]                          short_addr  CAL_LK              ;   34  CAL_LK
  4327 00000F53 [D94C]                          short_addr  DEVNAME             ;   35  DEVNAME
  4328 00000F55 [2C20]                          short_addr  Idle                ;   36  Idle
  4329 00000F57 [1B20]                          short_addr  DStrLen             ;   37  DStrLen
  4330 00000F59 [AE20]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  4331 00000F5B [0B71]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  4332 00000F5D [B420]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  4333 00000F5F [2372]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  4334 00000F61 [8D20]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  4335 00000F63 [ED20]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  4336 00000F65 [E020]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  4337 00000F67 [0A21]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  4338                                          
  4339                                  	; 10/08/2018
  4340                                  	;short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  4341                                  
  4342 00000F69 [B717]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  4343                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  4344                                  
  4345                                  DOSTableEnd:  ; LABEL BYTE
  4346                                  
  4347                                  	;ENDIF
  4348                                  
  4349                                  ;============================================================================
  4350                                  ; DOSTAB.ASM, MSDOS 6.0, 1991
  4351                                  ;============================================================================
  4352                                  ; 16/07/2018 - Retro DOS v3.0
  4353                                  
  4354                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
  4355                                  
  4356                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
  4357                                  ;
  4358                                  	;PUBLIC	SysInitTable
  4359                                  
  4360                                  SysInitTable:	; label  byte
  4361 00000F6B [2600]                  	dw      SYSINITVARS			; pointer to sysinit var
  4362 00000F6D 0000                            dw      0                             	; segment
  4363 00000F6F [3B10]                          dw      COUNTRY_CDPG		   	; pointer to country tabl
  4364 00000F71 0000                            dw      0                            	; segment of pointer
  4365                                  
  4366                                  ; DOS 3.3 F.C. 6/12/86
  4367                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
  4368                                  ;
  4369                                  	;PUBLIC	FastOpenTable
  4370                                  	;PUBLIC	FastTable		; a better name
  4371                                  	;EXTRN	FastRet:FAR		; defined in misc2.asm
  4372                                  
  4373                                  ; MSDOS 6.0
  4374                                  ;FastTable:     ;label  byte		; a better name
  4375                                  ;FastOpenTable: ;label  byte
  4376                                  ;	dw      2                       ; number of entries
  4377                                  ;	dw      FastRet			; pointer to ret instr.
  4378                                  ;	dw      0                       ; and will be modified by
  4379                                  ;	dw      FastRet			; FASTxxx when loaded in
  4380                                  ;	dw      0                       
  4381                                  
  4382                                  ;
  4383                                  ; DOS 3.3 F.C. 6/12/86
  4384                                  ;
  4385                                  
  4386                                  ;	PUBLIC	FastFlg                 ; flags
  4387                                  ;FastFlg:	;label  byte		; don't change the foll: order
  4388                                  ;FastOpenFlg:
  4389                                  ;	db	0  ; I_am    FastOpenFlg,BYTE,<0>
  4390                                  
  4391                                  ; MSDOS 3.3
  4392                                  FastTable:
  4393                                  FastOpenTable:
  4394 00000F73 0400                    	dw	4 
  4395 00000F75 [AA20]                  	dw	FastRet
  4396 00000F77 0000                    	dw	0  ; (('FastRet' segment will be set to CS by DOSINIT))
  4397                                  
  4398                                  	;PUBLIC	FastOpen_Ext_Info
  4399                                  
  4400                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
  4401                                  ; and clusnum  which are filled by DOS 3.ncwhen calling FastOpen Insert
  4402                                  ; or filled by FastOPen when calling FastOpen Lookup
  4403                                  
  4404                                  FastOpen_Ext_Info: ;label  byte		;dirpos
  4405 00000F79 00<rep Bh>              	times	FEI.size db 0	; 5 (for MSDOS 3.3), 11 (for MSDOS 6.0)
  4406                                  
  4407                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
  4408                                  ; when calling FastOpen Lookup
  4409                                  
  4410                                  	;PUBLIC	Dir_Info_Buff
  4411                                  
  4412                                  Dir_Info_Buff:	; label  byte
  4413 00000F84 00<rep 20h>             	times	dir_entry.size db 0 ; 32 ; segment of pointer
  4414                                  
  4415                                  ; MSDOS 3.3 (IBMDOS.COM, 1987)
  4416                                  FastFlg:
  4417                                  FastOpenFlg:
  4418 00000FA4 00                      	db	0
  4419                                  
  4420                                  	;I_am	Next_Element_Start,WORD	; save next element start offset
  4421                                  Next_Element_Start:
  4422 00000FA5 0000                    	dw	0
  4423                                  
  4424                                  	; MSDOS 6.0
  4425                                  	;I_am    Del_ExtCluster,WORD     ; for dos_delete                       
  4426                                  
  4427                                  ; 17/07/2018
  4428                                  
  4429                                  ; The following is a stack and its pointer for interrupt 2F which is uesd
  4430                                  ; by NLSFUNC.  There is no significant use of this stack, we are just trying
  4431                                  ; not to destroy the INT 21 stack saved for the user.
  4432                                  
  4433                                  	;PUBLIC	USER_SP_2F
  4434                                  
  4435                                  USER_SP_2F:	; LABEL  WORD
  4436 00000FA7 [A90F]                  	dw	FAKE_STACK_2F
  4437                                  
  4438                                  	;PUBLIC	Packet_Temp
  4439                                  ;Packet_Temp	label  word		; temporary packet used by readtime
  4440                                  	;PUBLIC  DOS_TEMP		; temporary word
  4441                                  ;DOS_TEMP	label  word
  4442                                  FAKE_STACK_2F:
  4443                                  	;dw	14 dup (0)
  4444 00000FA9 0000<rep Ch>            	times	12 dw 0			; 12 register temporary storage
  4445                                  
  4446                                  	;PUBLIC	Hash_Temp		; temporary word
  4447                                  ;Hash_Temp	label  word              
  4448                                  	;dw	4 dup (0)		; temporary hash table during config.sys
  4449                                  
  4450                                  	;PUBLIC  SCAN_FLAG             	; flag to indicate key ALT_Q
  4451                                  SCAN_FLAG:	; label  byte
  4452 00000FC1 00                      	db	0
  4453                                  
  4454                                  ; MSDOS 3.3
  4455                                  DISK_FULL:
  4456 00000FC2 00                      	db	0
  4457                                  
  4458                                  	;PUBLIC  DATE_FLAG
  4459                                  DATE_FLAG:   	;label  word 		; flag to
  4460 00000FC3 0000                    	dw     0                	; to update the date
  4461                                  
  4462                                  ;FETCHI_TAG:	;label  word		; OBSOLETE - no longer used
  4463                                  ;	dw     0			; formerly part of IBM's piracy protection
  4464                                  
  4465                                  ; 24/07/2019 - Retro DOS v3.2
  4466                                  ; (MSDOS 6.0)
  4467                                  ;*** New FCB Implementation
  4468                                  ; This variable is used as a cache in the new FCB implementation to remember
  4469                                  ;the address of a local SFT that can be recycled for a regenerate operation
  4470                                  
  4471                                  LocalSFT: 
  4472 00000FC5 00000000                	dd	0			; 0 to indicate invalid pointer
  4473                                  OLD_FIRSTCLUS:
  4474 00000FC9 0000                    	dw	0			; save old first cluster for fastopen
  4475                                  CL0FATENTRY:
  4476 00000FCB FFFF                    	dw	-1			; M014:	Holds the data that
  4477                                  					; is used in pack/unpack rts.
  4478                                  					; in fat.asm if cluster 0 is specified.
  4479                                  					; SR;
  4480                                  ; MSDOS 6.0
  4481                                  ;      PUBLIC	MSG_EXTERROR 		; for system message addr              
  4482                                  ;MSG_EXTERROR	label  DWORD                                                     
  4483                                  ;               dd     0                ; for extended error                   
  4484                                  ;               dd     0                ; for parser                           
  4485                                  ;              	dd     0                ; for critical errror                  
  4486                                  ;              	dd     0                ; for IFS                              
  4487                                  ;              	dd     0                ; for code reduction                   
  4488                                  ;
  4489                                  ;      PUBLIC  	SEQ_SECTOR              ; last sector read                     
  4490                                  ;SEQ_SECTOR    	label  DWORD                                                     
  4491                                  ;              	dd     -1                                                        
  4492                                  ;
  4493                                  ;;      I_am    ACT_PAGE,WORD,<-1>      ; active EMS page                       
  4494                                  ;	I_am    SC_SECTOR_SIZE,WORD     ; sector size for SC                 
  4495                                  ;       I_am    SC_DRIVE,BYTE           ; drive # for secondary cache        
  4496                                  ;       I_am    CurSC_DRIVE,BYTE,<-1>   ; current SC drive                   
  4497                                  ;       I_am    CurSC_SECTOR,DWORD      ; current SC starting sector         
  4498                                  ;       I_am    SC_STATUS,WORD,<0>      ; SC status word                     
  4499                                  ;       I_am    SC_FLAG,BYTE,<0>        ; SC flag                            
  4500                                  ;       I_am    AbsDskErr,WORD,<0>	; Storage for Abs dsk read/write err
  4501                                  ;
  4502                                  ;	PUBLIC 	NO_NAME_ID                                                           
  4503                                  ;NO_NAME_ID	label byte                                                           
  4504                                  ;		db   'NO NAME    '	; null media id                      
  4505                                  ;
  4506                                  ;;hkn; moved from TABLE segment in kstrin.asm
  4507                                  ;
  4508                                  ;Public	KISTR001S,KISTR001E,LOOKSIZ	; 2/17/KK
  4509                                  ;KISTR001S	label	byte		; 2/17/KK
  4510                                  ;LOOKSIZ DB	0			; 0 if byte, NZ if word	2/17/KK
  4511                                  ;KISTR001E	label	byte		; 2/17/KK
  4512                                  ;
  4513                                  ;; the nul device driver used to be part of the code. However, since the 
  4514                                  ;; header is in the data, and the entry points are only given as an offset,
  4515                                  ;; the strategy and interrupt entry points must also be in the data now.
  4516                                  ;;
  4517                                  ;
  4518                                  ;procedure   snuldev,far
  4519                                  ;assume ds:nothing,es:nothing,ss:nothing, cs:dosdata
  4520                                  ; 	or	es:[bx.reqstat],stdon	; set done bit
  4521                                  ;entry inuldev
  4522                                  ;	ret				; must not be a return!
  4523                                  ;endproc snuldev
  4524                                  ;
  4525                                  
  4526                                  ; 24/07/2019
  4527                                  AbsDskErr:
  4528 00000FCD 0000                    	dw	0			; Storage for Abs dsk read/write err
  4529                                  
  4530                                  ;============================================================================
  4531                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  4532                                  ;============================================================================
  4533                                  ; 17/07/2018 - Retro DOS v3.0
  4534                                  
  4535                                  ; ----------------------------------------------------------------------------
  4536                                  ; BREAK   <Copyright notice and version>
  4537                                  ; ----------------------------------------------------------------------------
  4538                                  
  4539                                  ;CODSTRT EQU     $
  4540                                  
  4541                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  4542                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  4543                                  
  4544                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  4545                                  ;       module. The reason is so that the data alignments are the same in
  4546                                  ;       IBM-DOS and MS-DOS up through header.
  4547                                  
  4548                                  	;PUBLIC	HEADER
  4549                                  
  4550                                  HEADER:	; LABEL	BYTE
  4551                                          ;IF	DEBUG
  4552                                          ;DB	13,10,"Debugging DOS version "
  4553                                          ;DB	MAJOR_VERSION + "0"
  4554                                          ;DB	"."
  4555                                          ;DB	(MINOR_VERSION / 10) + "0"
  4556                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  4557                                          ;ENDIF
  4558                                  
  4559                                          ;IF	NOT IBM
  4560 00000FCF 0D0A4D532D444F5320-             DB	13,10,"MS-DOS version "
  4560 00000FD8 76657273696F6E20   
  4561 00000FE0 33                              DB	MAJOR_VERSION + "0"
  4562 00000FE1 2E                              DB	"."
  4563 00000FE2 33                              DB	(MINOR_VERSION / 10) + "0"
  4564                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  4565 00000FE3 30                              DB	(MINOR_VERSION % 10) + "0"
  4566                                  
  4567                                          ;IF	HIGHMEM
  4568                                          ;DB	"H"
  4569                                          ;ENDIF
  4570                                  
  4571 00000FE4 0D0A436F7079726967-     	DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  4571 00000FED 687420313938312C38-
  4571 00000FF6 322C38332C38342C38-
  4571 00000FFF 38204D6963726F736F-
  4571 00001008 667420436F72702E0D-
  4571 00001011 0A24               
  4572                                  	;ENDIF
  4573                                  
  4574                                  ;IF DEBUG
  4575                                  ;	DB	13,10,"$"
  4576                                  ;ENDIF
  4577                                  
  4578                                  ;include copyrigh.inc
  4579                                  
  4580                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  4581                                  	;DB	"Licensed Material - Property of Microsoft "
  4582                                  	;DB	"All rights reserved "
  4583                                  
  4584                                  ;============================================================================
  4585                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4586                                  ;============================================================================
  4587                                  ; 17/07/2018 - Retro DOS v3.0
  4588                                  
  4589                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4590                                  ;	NAME	IBMCODE
  4591                                  
  4592                                  ;BREAK <NullDev -- Driver for null device>
  4593                                  
  4594                                  ; ROMDOS note:
  4595                                  ;	NUL device driver used to be here, but it was removed and placed in
  4596                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4597                                  ;	header, which is also in DOSDATA.
  4598                                  
  4599                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4600                                  
  4601                                  ;Public MSC001S,MSC001E
  4602                                  ;MSC001S label byte
  4603                                  	;IF	IBM
  4604                                  ; Codes returned by BIOS
  4605                                  ERRIN:
  4606 00001013 02                      	DB	2			; NO RESPONSE
  4607 00001014 06                      	DB	6			; SEEK FAILURE
  4608 00001015 0C                      	DB	12			; GENERAL ERROR
  4609 00001016 04                      	DB	4			; BAD CRC
  4610 00001017 08                      	DB	8			; SECTOR NOT FOUND
  4611 00001018 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4612                                  ERROUT:
  4613                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4614 00001019 80                      	DB	80H			; NO RESPONSE
  4615 0000101A 40                      	DB	40H			; Seek failure
  4616 0000101B 02                      	DB	2			; Address Mark not found
  4617 0000101C 10                      	DB	10H			; BAD CRC
  4618 0000101D 04                      	DB	4			; SECTOR NOT FOUND
  4619 0000101E 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4620                                  
  4621                                  NUMERR	EQU	$-ERROUT
  4622                                  	;ENDIF
  4623                                  ;MSC001E label byte
  4624                                  
  4625                                  ;============================================================================
  4626                                  ; DOSMES.INC (MSDOS 3.3, 1987)
  4627                                  ;============================================================================
  4628                                  ; 17/07/2018 - Retro DOS v3.0
  4629                                  
  4630                                  ;TABLE	SEGMENT BYTE PUBLIC 'TABLE'
  4631                                  
  4632                                  ; The international table(s). Used for DOS 3.x  (x < 3)
  4633                                  ; This is simply a sequence of tables of the following form:
  4634                                  ;
  4635                                  ; Offset
  4636                                  ;		BYTE  Size of this table excluding this byte and the next
  4637                                  ;		WORD  Country code represented by this table
  4638                                  ;			A sequence of n bytes, where n is the number specified
  4639                                  ;			by the first byte above and is not > internat_block_max,
  4640                                  ;			in the correct order for being returned by the
  4641                                  ;			INTERNATIONAL call as follows:
  4642                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  4643                                  ;		5 BYTE	Currency symbol null terminated
  4644                                  ;		2 BYTE	thousands separator null terminated
  4645                                  ;		2 BYTE	Decimal point null terminated
  4646                                  ;		2 BYTE	Date separator null terminated
  4647                                  ;		2 BYTE	Time separator null terminated
  4648                                  ;		1 BYTE	Bit field.  Currency format.
  4649                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  4650                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  4651                                  ;			Bit 2.	=1 imbedded at decimal point, & no spaces;
  4652                                  ;		1 BYTE	No. of significant decimal digits in currency
  4653                                  ;		1 BYTE	Bit field.  Time format.
  4654                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  4655                                  ;		WORD	Segment offset for address of case conversion routine
  4656                                  ;		WORD	RESERVED. Filled in by DOS. Segment value for above routine
  4657                                  ;		2 BYTE	Data list separator null terminated.
  4658                                  ;		   NOTE: The segment part of the DWORD Map_call is set
  4659                                  ;			by the INTERNATIONAL call. Do not try to initialize
  4660                                  ;			it to anything meaningful.
  4661                                  ;
  4662                                  ; The list of tables is terminated by putting a byte of -1 after the last
  4663                                  ;	table (a table with length -1).
  4664                                  
  4665                                  	; PUBLIC  international_table
  4666                                  
  4667                                  ; Offset 0F95h in IBMDOS.COM (MSDOS 3.3), 1987
  4668                                  
  4669                                  international_table:	; LABEL BYTE
  4670                                  
  4671 0000101F 18                      	DB 	INTERNAT_BLOCK.size  ; = 24 ; Size in bytes of this table
  4672 00001020 0100                    	DW 	1		; Country code
  4673                                  USTABLE:
  4674 00001022 0000                    	dw	0		; 0-USA, 1-EUR, 2-JAP
  4675 00001024 2400000000              	db	'$',0,0,0,0	; Currency Symbol 5 bytes
  4676 00001029 2C00                    	db	',',0		; Thousands separator 2 bytes
  4677 0000102B 2E00                    	db	'.',0		; Decimal separator 2 bytes
  4678 0000102D 2D00                    	db	'-',0		; Date separator 2 bytes
  4679 0000102F 3A00                    	db	':',0		; Time separator 2 bytes
  4680 00001031 00                      	db	0		; Bit values
  4681                                                                 	;   Bit 0 = 0 if currency symbol first
  4682                                                                 	;         = 1 if currency symbol last
  4683                                                                 	;   Bit 1 = 0 if No space after currency symbol
  4684                                                                 	;         = 1 if space after currency symbol
  4685 00001032 02                      	db	2		; Number of places after currency dec point
  4686 00001033 00                      	db	0		; if 24 hour time, 0 if 12 hour time
  4687 00001034 [9918]                  	dw	MAP_CASE	; Address of case mapping call (DWORD)
  4688 00001036 0000                            dw	0		; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  4689                                  				;  in pieces.
  4690 00001038 2C00                    	db	',',0		; Data list separator character
  4691                                  
  4692                                  ;	Tables for the IBM PC character set follow. The values
  4693                                  ;	associated with some of the currency symbols may change with
  4694                                  ;	other character sets. You may wish to add or delete country
  4695                                  ;	entries. NOTE: It is not a mistake that the JAPANESE entry
  4696                                  ;	has different currency symbols for the KANJI and
  4697                                  ;	non-KANJI versions.
  4698                                  	
  4699 0000103A FF                      	DB	-1		; end of table
  4700                                  
  4701                                  ; The following table is used for DOS 3.3
  4702                                  ;DOS country and code page information is defined here for DOS 3.3.
  4703                                  ;The initial value for ccDosCountry is 1 (USA).
  4704                                  ;The initial value for ccDosCodepage is 850.
  4705                                  ;
  4706                                  ;
  4707                                  	;PUBLIC  COUNTRY_CDPG,UCASE_TAB,FILE_UCASE_TAB
  4708                                  	;PUBLIC  FILE_CHAR_TAB
  4709                                  
  4710                                  ; country and code page infomation
  4711                                  
  4712                                  COUNTRY_CDPG:	; label  byte
  4713 0000103B 0000000000000000        	db	0,0,0,0,0,0,0,0		; reserved words
  4714 00001043 5C434F554E5452592E-     	db	'\COUNTRY.SYS',0	; path name of country.sys
  4714 0000104C 53595300           
  4715 00001050 00<rep 33h>             	times	51 db 0
  4716 00001083 B501                    	dw	437			; system code page id
  4717 00001085 0500                    	dw	5			; number of entries
  4718 00001087 02                      	db	SetUcase		; Ucase type
  4719 00001088 [C410]                  	dw	UCASE_TAB		; pointer to upper case table
  4720 0000108A 0000                    	dw	0			; segment of poiter
  4721 0000108C 04                      	db	SetUcaseFile		; Ucase file char type
  4722 0000108D [4611]                  	dw	FILE_UCASE_TAB		; pointer to file upper case table
  4723 0000108F 0000                    	dw	0			; segment of poiter
  4724 00001091 05                      	db	SetFileList		; valid file chars type
  4725 00001092 [C811]                  	dw	FILE_CHAR_TAB		; pointer to valid file char tab
  4726 00001094 0000                    	dw	0			; segment of poiter
  4727 00001096 06                      	db	SetCollate		; collate type
  4728 00001097 [F811]                  	dw	COLLATE_TAB		; pointer to collate table
  4729 00001099 0000                    	dw	0			; segment of pointer
  4730 0000109B 01                      	db	SetCountryInfo		; country info type
  4731 0000109C 2600                    	dw	NEW_COUNTRY_SIZE	; extended country info size
  4732 0000109E 0100                    	dw	1			; USA country id
  4733 000010A0 B501                    	dw	437			; USA system code page id
  4734 000010A2 0000                    	dw	0			; date format
  4735 000010A4 2400000000              	db	'$',0,0,0,0		; currency symbol
  4736 000010A9 2C00                    	db	',',0			; thousand separator
  4737 000010AB 2E00                    	db	'.',0			; decimal separator
  4738 000010AD 2D00                    	db	'-',0			; date separator
  4739 000010AF 3A00                    	db	':',0			; time separator
  4740 000010B1 00                      	db	0			; currency format flag
  4741 000010B2 02                      	db	2			; # of disgit in currency
  4742 000010B3 00                      	db	0			; time format
  4743 000010B4 [9918]                  	dw	MAP_CASE		;mono case routine entry point
  4744 000010B6 0000                    	dw	0			; segment of entry point
  4745 000010B8 2C00                    	db	',',0			; data list separator
  4746 000010BA 000000000000000000-     	dw	0,0,0,0,0		; reserved
  4746 000010C3 00                 
  4747                                  
  4748                                  ; upper case table
  4749                                  
  4750                                  UCASE_TAB: 	; label   byte
  4751 000010C4 8000                    	dw	128
  4752 000010C6 809A45418E418F80        	db	128,154,069,065,142,065,143,128
  4753 000010CE 4545454949498E8F        	db	069,069,069,073,073,073,142,143
  4754 000010D6 9092924F994F5555        	db	144,146,146,079,153,079,085,085
  4755 000010DE 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
  4756 000010E6 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
  4757 000010EE A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
  4758 000010F6 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4759 000010FE B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4760 00001106 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4761 0000110E C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4762 00001116 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4763 0000111E D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4764 00001126 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
  4765 0000112E E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4766 00001136 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4767 0000113E F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4768                                  
  4769                                  ; file upper case table
  4770                                  
  4771                                  FILE_UCASE_TAB: ; label  byte
  4772 00001146 8000                    	dw	128
  4773 00001148 809A45418E418F80        	db	128,154,069,065,142,065,143,128
  4774 00001150 4545454949498E8F        	db	069,069,069,073,073,073,142,143
  4775 00001158 9092924F994F5555        	db	144,146,146,079,153,079,085,085
  4776 00001160 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
  4777 00001168 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
  4778 00001170 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
  4779 00001178 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4780 00001180 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4781 00001188 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4782 00001190 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4783 00001198 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4784 000011A0 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4785 000011A8 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
  4786 000011B0 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4787 000011B8 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4788 000011C0 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4789                                  
  4790                                  ; file char list
  4791                                  
  4792                                  FILE_CHAR_TAB:	; label  byte
  4793 000011C8 1600                    	dw	22				; length
  4794 000011CA 0100FF                  	db	1,0,255 			; include all
  4795 000011CD 000020                  	db	0,0,20h 			; exclude 0 - 20h
  4796 000011D0 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
  4796 000011D9 7C3C3E2B3D3B2C     
  4797                                  	;db	24 dup (?)			; reserved
  4798 000011E0 00<rep 18h>             	times	24 db 0
  4799                                  
  4800                                  ; collate table
  4801                                  
  4802                                  COLLATE_TAB:	; label   byte
  4803 000011F8 0001                    	dw	256
  4804 000011FA 0001020304050607        	db	0,1,2,3,4,5,6,7
  4805 00001202 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
  4806 0000120A 1011121314151617        	db	16,17,18,19,20,21,22,23
  4807 00001212 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
  4808 0000121A 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
  4809 00001222 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
  4810 0000122A 3031323334353637        	db	"0","1","2","3","4","5","6","7"
  4811 00001232 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
  4812 0000123A 4041424344454647        	db	"@","A","B","C","D","E","F","G"
  4813 00001242 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
  4814 0000124A 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
  4815 00001252 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
  4816 0000125A 6041424344454647        	db	"`","A","B","C","D","E","F","G"
  4817 00001262 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
  4818 0000126A 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
  4819 00001272 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
  4820 0000127A 4355454141414143        	db	"C","U","E","A","A","A","A","C"
  4821 00001282 4545454949494141        	db	"E","E","E","I","I","I","A","A"
  4822 0000128A 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
  4823 00001292 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
  4824 0000129A 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
  4825 000012A2 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
  4826 000012AA B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4827 000012B2 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4828 000012BA C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4829 000012C2 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4830 000012CA D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4831 000012D2 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4832 000012DA E053                    	db	224,"S"
  4833 000012DC E2E3E4E5E6E7            	db	226,227,228,229,230,231
  4834 000012E2 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4835 000012EA F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4836 000012F2 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4837                                  
  4838                                  ;include divmes.inc
  4839                                  
  4840                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  4841                                  	;PUBLIC	DIVMES
  4842                                  
  4843 000012FA 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  4843 00001303 6F766572666C6F770D-
  4843 0000130C 0A                 
  4844                                  
  4845                                  	;PUBLIC	DivMesLen
  4846                                  DivMesLen:
  4847 0000130D 1300                    	DW	$-DIVMES	; Length of the above message in bytes
  4848                                  
  4849                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  4850                                  
  4851                                  ; The following two tables implement the current buffered input editing
  4852                                  ; routines. The tables are pairwise associated in reverse order for ease
  4853                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  4854                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  4855                                  
  4856                                  	;PUBLIC	CANCHAR
  4857                                  CANCHAR:
  4858 0000130F 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  4859                                  	
  4860                                  	;PUBLIC	ESCCHAR
  4861                                  ESCCHAR:
  4862 00001310 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  4863                                  	
  4864                                  	;IF	NOT Rainbow
  4865                                  
  4866                                  ESCTAB:	; LABEL BYTE
  4867                                  
  4868                                  	;IF	IBM
  4869 00001311 40                      	DB	64		; Ctrl-Z - F6
  4870 00001312 4D                      	DB	77		; Copy one char - -->
  4871 00001313 3B                      	DB	59		; Copy one char - F1
  4872 00001314 53                      	DB	83		; Skip one char - DEL
  4873 00001315 3C                      	DB	60		; Copy to char - F2
  4874 00001316 3E                      	DB	62		; Skip to char - F4
  4875 00001317 3D                      	DB	61		; Copy line - F3
  4876 00001318 3D                      	DB	61		; Kill line (no change to template ) - Not used
  4877 00001319 3F                      	DB	63		; Reedit line (new template) - F5
  4878 0000131A 4B                      	DB	75		; Backspace - <--
  4879 0000131B 52                      	DB	82		; Enter insert mode - INS (toggle)
  4880 0000131C 52                      	DB	82		; Exit insert mode - INS (toggle)
  4881 0000131D 41                      	DB	65		; Escape character - F7
  4882 0000131E 41                      	DB	65		; End of table
  4883                                  	;ENDIF
  4884                                  
  4885                                  ESCEND: ; LABEL BYTE
  4886                                  
  4887                                  ESCTABLEN EQU ESCEND-ESCTAB
  4888                                  
  4889                                  ESCFUNC: ; LABEL WORD
  4890                                  	
  4891 0000131F [D021]                  	short_addr  GETCH	; Ignore the escape sequence
  4892 00001321 [BD22]                  	short_addr  TWOESC
  4893 00001323 [4523]                  	short_addr  EXITINS
  4894 00001325 [4523]                  	short_addr  ENTERINS
  4895 00001327 [4722]                  	short_addr  BACKSP
  4896 00001329 [3123]                  	short_addr  REEDIT
  4897 0000132B [3422]                  	short_addr  KILNEW
  4898 0000132D [C422]                  	short_addr  COPYLIN
  4899 0000132F [F722]                  	short_addr  SKIPSTR
  4900 00001331 [CA22]                  	short_addr  COPYSTR
  4901 00001333 [ED22]                  	short_addr  SKIPONE
  4902 00001335 [CF22]                  	short_addr  COPYONE
  4903 00001337 [CF22]                  	short_addr  COPYONE
  4904 00001339 [4D23]                  	short_addr  CTRLZ
  4905                                  
  4906                                  	;ENDIF
  4907                                  
  4908                                  ;TABLE	ENDS
  4909                                  
  4910                                  ; 17/07/2018
  4911                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
  4912                                  
  4913                                  ;CRTERRTAB: ; 19/07/2018	
  4914                                  ;	db	0,5,52h,50h,3,5,20h
  4915                                  
  4916                                  ; 08/08/2018
  4917                                  
  4918                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
  4919 0000133B 00                      	DB	0			; none
  4920 0000133C 05                      	DB	error_access_denied	; MakeNode error 1
  4921 0000133D 52                      	DB	error_cannot_make	; MakeNode error 2
  4922 0000133E 50                      	DB	error_file_exists	; MakeNode error 3
  4923 0000133F 03                      	DB	error_path_not_found	; MakeNode error 4
  4924 00001340 05                      	DB	error_access_denied	; MakeNode error 5
  4925 00001341 20                      	DB	error_sharing_violation ; MakeNode error 6
  4926                                  	; MSDOS 6.0
  4927                                  	;DB	error_file_not_found	; MakeNode error 7
  4928                                  
  4929                                  ;============================================================================
  4930                                  ; DEV.ASM (MSDOS 6.0, 1987)
  4931                                  ;============================================================================
  4932                                  ; 17/07/2018 - Retro DOS v3.0
  4933                                  
  4934                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
  4935                                  
  4936                                  ;Public DEV001S, DEV001E 		; Pathgen labels
  4937                                  ;DEV001s:
  4938                                  ;		length of packets
  4939 00001342 160E160D0F0E            LenTab:		DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
  4940                                  ;LenTab:	db	22,14,22,13,15,14
  4941                                  
  4942                                  ;	       Error Function
  4943                                  
  4944                                  CmdTab:
  4945 00001348 8604                    	DB	86h, DEVRD	; 0 input
  4946 0000134A 8605                    	DB	86h, DEVRDND	; 1 input status
  4947 0000134C 8708                    	DB	87h, DEVWRT	; 2 output
  4948 0000134E 870A                    	DB	87h, DEVOST	; 3 output status
  4949 00001350 8607                    	DB	86h, DEVIFL	; 4 input flush
  4950 00001352 8605                    	DB	86H, DEVRDND	; 5 input status with system WAIT
  4951                                  
  4952                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
  4953                                  
  4954                                  ;CmdTab:
  4955                                  ;	db	86h, 4
  4956                                  ;	db	86h, 5
  4957                                  ;	db	87h, 8
  4958                                  ;	db	87h, 10
  4959                                  ;	db	86h, 7
  4960                                  ;	db	86h, 5
  4961                                  
  4962                                  ;DEV001E:
  4963                                  
  4964                                  ;============================================================================
  4965                                  ; FCB.ASM (MSDOS 6.0, 1987)
  4966                                  ;============================================================================
  4967                                  ; 17/07/2018 - Retro DOS v3.0
  4968                                  
  4969                                  ; Character type table for file name scanning
  4970                                  ; Table provides a mapping of characters to validity bits.
  4971                                  ; Four bits are provided for each character.  Values 7Dh and above
  4972                                  ; have all bits set, so that part of the table is chopped off, and
  4973                                  ; the translation routine is responsible for screening these values.
  4974                                  ; The bit values are defined in DOSSYM.INC
  4975                                  
  4976                                  ;	      ; ^A and NUL
  4977                                  ;CharType:
  4978                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4979                                  ;
  4980                                  ;	      ; ^C and ^B
  4981                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4982                                  ;
  4983                                  ;	      ; ^E and ^D
  4984                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4985                                  ;
  4986                                  ;	      ; ^G and ^F
  4987                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4988                                  ;
  4989                                  ;	      ; TAB and BS
  4990                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4991                                  ;
  4992                                  ;	      ; ^K and ^J
  4993                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4994                                  ;
  4995                                  ;	      ; ^M and ^L
  4996                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4997                                  ;
  4998                                  ;	      ; ^O and ^N
  4999                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5000                                  ;
  5001                                  ;	      ; ^Q and ^P
  5002                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5003                                  ;
  5004                                  ;	      ; ^S and ^R
  5005                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5006                                  ;
  5007                                  ;	      ; ^U and ^T
  5008                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5009                                  ;
  5010                                  ;	      ; ^W and ^V
  5011                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5012                                  ;
  5013                                  ;	      ; ^Y and ^X
  5014                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5015                                  ;
  5016                                  ;	      ; ESC and ^Z
  5017                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5018                                  ;
  5019                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5021                                  ;
  5022                                  ;	      ; ^_ and ^^
  5023                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5024                                  ;
  5025                                  ;	      ; ! and SPACE
  5026                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
  5027                                  ;
  5028                                  ;	      ; # and "
  5029                                  ;	 db   LOW (NOT FFCB+FCHK)
  5030                                  ;
  5031                                  ;	      ; $ - )
  5032                                  ;	 db   3 dup (0FFh)
  5033                                  ;
  5034                                  ;	      ; + and *
  5035                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
  5036                                  ;
  5037                                  ;	      ; - and '
  5038                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
  5039                                  ;
  5040                                  ;	      ; / and .
  5041                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
  5042                                  ;
  5043                                  ;	      ; 0 - 9
  5044                                  ;	 db   5 dup (0FFh)
  5045                                  ;
  5046                                  ;	      ; ; and :
  5047                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
  5048                                  ;
  5049                                  ;	      ; = and <
  5050                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
  5051                                  ;
  5052                                  ;	      ; ? and >
  5053                                  ;	 db   NOT FFCB+FCHK+FDELIM
  5054                                  ;
  5055                                  ;	      ; A - Z
  5056                                  ;	 db   13 dup (0FFh)
  5057                                  ;
  5058                                  ;	      ; \ and [
  5059                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
  5060                                  ;
  5061                                  ;	      ; ^ and ]
  5062                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5063                                  ;
  5064                                  ;	      ; _ - {
  5065                                  ;	 db   15 dup (0FFh)
  5066                                  ;
  5067                                  ;	      ; } and |
  5068                                  ;	 db   NOT FFCB+FCHK+FDELIM
  5069                                  
  5070                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
  5071                                  ;					; character in the table
  5072                                  
  5073                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
  5074                                  
  5075                                  CharType:
  5076 00001354 F6F6F6F6F6F6F6F6                db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  5077 0000135C F6F0F6F6F6F6F6F6        	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  5078 00001364 F6F6F6F6F6F6F6F6        	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  5079 0000136C F6F6F6F6F6F6F6F6        	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  5080 00001374 F8FFF6FFFFFFFFFF        	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
  5081 0000137C FFFFFFF4F4FFFEF6        	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
  5082 00001384 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5083 0000138C FFFFF4F4F4F4F4FF        	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
  5084 00001394 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5085 0000139C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5086 000013A4 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5087 000013AC FFFFFFF6F6F6FFFF        	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
  5088 000013B4 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5089 000013BC FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5090 000013C4 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5091 000013CC FFFFFFFFF4FFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
  5092 000013D4 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5093 000013DC FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5094 000013E4 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5095 000013EC FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5096 000013F4 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5097 000013FC FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5098 00001404 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5099 0000140C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5100 00001414 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5101 0000141C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5102 00001424 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5103 0000142C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5104 00001434 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5105 0000143C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5106 00001444 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5107 0000144C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5108                                  
  5109                                  ; 02/08/2018 - Retro DOS v3.0
  5110                                  ; DOSTAB.ASM - MSDOS 6.0 - 1991
  5111                                  
  5112                                  ; Offset 13CAh of IBMDOS.COM (MSDOS 3.3), 1987
  5113                                  
  5114 00001454 0000                    exec_init_SP:	dw 0
  5115 00001456 0000                    exec_init_SS:	dw 0
  5116 00001458 0000                    exec_init_IP:	dw 0
  5117 0000145A 0000                    exec_init_CS:	dw 0
  5118                                  
  5119 0000145C 0000                    exec_signature:	dw 0	; must contain 4D5A  (yay zibo!)
  5120 0000145E 0000                    exec_len_mod_512: dw 0	; low 9 bits of length
  5121 00001460 0000                    exec_pages:	dw 0	; number of 512b pages in file
  5122 00001462 0000                    exec_rle_count:	dw 0	; count of reloc entries
  5123 00001464 0000                    exec_par_dir:	dw 0	; number of paragraphs before image
  5124 00001466 0000                    exec_min_BSS:	dw 0	; minimum number of para of BSS
  5125 00001468 0000                    exec_max_BSS:	dw 0	; max number of para of BSS
  5126 0000146A 0000                    exec_SS:	dw 0	; stack of image
  5127 0000146C 0000                    exec_SP:	dw 0	; SP of image
  5128 0000146E 0000                    exec_chksum:	dw 0	; checksum  of file (ignored)
  5129 00001470 0000                    exec_IP:	dw 0	; IP of entry
  5130 00001472 0000                    exec_CS:	dw 0	; CS of entry
  5131 00001474 0000                    exec_rle_table:	dw 0	; byte offset of reloc table
  5132                                  
  5133                                  Exec_Header_Len	EQU $-exec_signature
  5134                                  
  5135                                  ; 02/08/2018 - Retro DOS v3.0
  5136                                  ; SRVCALL.ASM - MSDOS 6.0 - 1991
  5137                                  ;** Server DOS call functions
  5138                                  
  5139 00001476 [7A14]                  SERVERTAB:      dw SERVER_DISP
  5140 00001478 [2A6A]                  SERVERLEAVE:	dw SERVERRETURN
  5141 0000147A 0B                      SERVER_DISP:	db (SERVER_DISP_END-SERVER_DISP-1)/2
  5142 0000147B [956A]                  		dw SRV_CALL	; 0
  5143 0000147D [2B6A]                  		dw COMMIT_ALL	; 1
  5144 0000147F [626A]                  		dw CLOSE_NAME	; 2
  5145 00001481 [6E6A]                  		dw CLOSE_UID	; 3
  5146 00001483 [756A]                  		dw CLOSE_UID_PID ; 4
  5147 00001485 [7C6A]                  		dw GET_LIST	; 5
  5148 00001487 [D66A]                  		dw GET_DOS_DATA	; 6
  5149 00001489 [FA6A]                  		dw SPOOL_OPER	; 7
  5150 0000148B [FA6A]                  		dw SPOOL_OPER	; 8
  5151 0000148D [FA6A]                  		dw SPOOL_OPER	; 9
  5152 0000148F [096B]                  		dw _$SetExtendedError ; 10
  5153                                  SERVER_DISP_END:
  5154                                  
  5155                                  ;============================================================================
  5156                                  ; MSCODE.ASM
  5157                                  ;============================================================================
  5158                                  
  5159                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  5160                                  ; 03/03/2018
  5161                                  
  5162                                  ;
  5163                                  ; MSCODE.ASM -- MSDOS code
  5164                                  ;
  5165                                  
  5166                                  ;INCLUDE DOSSEG.ASM
  5167                                  ;INCLUDE STDSW.ASM
  5168                                  
  5169                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  5170                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5171                                  
  5172                                  ;.xcref
  5173                                  ;INCLUDE DOSSYM.ASM
  5174                                  ;INCLUDE DEVSYM.ASM
  5175                                  ;.cref
  5176                                  ;.list
  5177                                  
  5178                                  ;IFNDEF  KANJI
  5179                                  ;KANJI   EQU     0       ; FALSE
  5180                                  ;ENDIF
  5181                                  
  5182                                  ;IFNDEF  IBM
  5183                                  ;IBM     EQU     0
  5184                                  ;ENDIF
  5185                                  
  5186                                  ;IFNDEF  HIGHMEM
  5187                                  ;HIGHMEM  EQU     0
  5188                                  ;ENDIF
  5189                                  
  5190                                          ;i_need  USER_SP,WORD
  5191                                          ;i_need  USER_SS,WORD
  5192                                          ;i_need  SAVEDS,WORD
  5193                                          ;i_need  SAVEBX,WORD
  5194                                          ;i_need  INDOS,BYTE
  5195                                          ;i_need  NSP,WORD
  5196                                          ;i_need  NSS,WORD
  5197                                          ;i_need  CURRENTPDB,WORD
  5198                                          ;i_need  AUXSTACK,BYTE
  5199                                          ;i_need  CONSWAP,BYTE
  5200                                          ;i_need  IDLEINT,BYTE
  5201                                          ;i_need  NOSETDIR,BYTE
  5202                                          ;i_need  ERRORMODE,BYTE
  5203                                          ;i_need  IOSTACK,BYTE
  5204                                          ;i_need  WPERR,BYTE
  5205                                          ;i_need  DSKSTACK,BYTE
  5206                                          ;i_need  CNTCFLAG,BYTE
  5207                                          ;i_need  LEAVEADDR,WORD
  5208                                          ;i_need  NULLDEVPT,DWORD
  5209                                  
  5210                                          ;IF NOT IBM
  5211                                          ;i_need  OEM_HANDLER,DWORD
  5212                                          ;ENDIF
  5213                                  
  5214                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  5215                                  
  5216                                  ;============================================================================
  5217                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  5218                                  ;============================================================================
  5219                                  ; 11/07/2018 - Retro DOS v3.0
  5220                                  
  5221                                  ; 18/07/2018
  5222                                  
  5223                                  ; The following two routines are dispatched to directly with ints disabled
  5224                                  ; immediately after the int 21h entry.	no DIS state is set.
  5225                                  
  5226                                  ; ---------------------------------------------------------------------------
  5227                                  ; $Set_current_PDB takes BX and sets it to be the current process
  5228                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  5229                                  ;
  5230                                         ;procedure   $SET_CURRENT_PDB,NEAR
  5231                                  _$SET_CURRENT_PDB:
  5232                                          ;ASSUME	DS:NOTHING,SS:NOTHING
  5233 00001491 2E891E[FC02]                    MOV     [CS:CurrentPDB],BX ; 12/03/2018
  5234 00001496 CF                      	iret ; 08/07/2018 - Retro DOS v3.0
  5235                                  ;$SET_CURRENT_PDB    ENDP
  5236                                  
  5237                                  ; ---------------------------------------------------------------------------
  5238                                  ; $get_current_PDB returns in BX the current process
  5239                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  5240                                  ;
  5241                                          ;procedure $GET_CURRENT_PDB,NEAR
  5242                                  _$GET_CURRENT_PDB:
  5243                                          ;ASSUME	DS:NOTHING,SS:NOTHING
  5244 00001497 2E8B1E[FC02]            	mov	BX,[CS:CurrentPDB] ; 11/07/2018
  5245 0000149C CF                      	iret ; 08/07/2018 - Retro DOS v3.0
  5246                                  ;$GET_CURRENT_PDB    ENDP
  5247                                  ; ---------------------------------------------------------------------------
  5248                                  
  5249                                  ; 11/07/2018 - Retro DOS v3.0
  5250                                  
  5251                                  ;BREAK <$Set_CTRL_C_Trapping -- En/Disable ^C check in dispatcher>
  5252                                  
  5253                                  _$SET_CTRL_C_TRAPPING:
  5254                                  
  5255                                  ; Inputs:
  5256                                  ;       AL = 0 read ^C status
  5257                                  ;       AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  5258                                  ;	AL = 2 Set ^C status to contents of DL.	Output is old state.
  5259                                  ;	     (MSDISP.ASM,MSDOS 6.0, 1991)
  5260                                  ; Function:
  5261                                  ;       Enable disable ^C checking in dispatcher
  5262                                  ; Outputs:
  5263                                  ;       If AL = 0 then DL = 0/1 for ^C off/on
  5264                                  
  5265                                  	; 08/07/2018 - Retro DOS v3.0
  5266                                  
  5267 0000149D 08C0                            OR      AL,AL
  5268 0000149F 7506                            JNZ     SHORT CTRL_C_set
  5269                                  
  5270                                  	; 11/07/2018
  5271 000014A1 2E8A16[0303]            	mov	dl,[CS:CNTCFLAG]
  5272 000014A6 CF                      	iret
  5273                                  
  5274                                  CTRL_C_set:
  5275                                  	; 08/07/2018
  5276 000014A7 3C02                    	cmp	al,2
  5277 000014A9 7716                    	ja	short bad_val
  5278 000014AB 740B                    	je	short scct_3
  5279                                  
  5280 000014AD 52                      	push    dx
  5281 000014AE 80E201                  	and     dl,1
  5282 000014B1 2E8816[0303]            	mov     [cs:CNTCFLAG],dl
  5283 000014B6 5A                      	pop     dx
  5284 000014B7 CF                      	iret
  5285                                  
  5286                                  scct_3:
  5287 000014B8 80E201                  	and	dl,1
  5288 000014BB 2E8616[0303]                    xchg	dl,[CS:CNTCFLAG]
  5289 000014C0 CF                              iret
  5290                                  
  5291                                  bad_val:
  5292 000014C1 B0FF                    	MOV	AL,0FFH
  5293 000014C3 CF                      	iret
  5294                                  
  5295                                  ; 11/07/2018
  5296                                  
  5297                                  _$SET_PRINTER_FLAG:
  5298                                  	; 08/07/2018 - Retro DOS v3.0
  5299                                  	;mov 	[cs:IOSTACK],al
  5300 000014C4 2EA2[360A]              	mov	[cs:PRINTER_FLAG],al
  5301 000014C8 CF                      	iret
  5302                                  
  5303                                  ; 08/07/2018 - Retro DOS v3.0
  5304                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  5305                                  
  5306                                  ; ----------------------------------------------------------------------------
  5307                                  ; BREAK   <System call entry points and dispatcher>
  5308                                  ; ----------------------------------------------------------------------------
  5309                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5310                                  
  5311                                          ;procedure   SYSTEM_CALL,NEAR
  5312                                  SYSTEM_CALL:
  5313                                  ;entry	QUIT				; INT 20H entry point
  5314                                  QUIT:
  5315                                  	;MOV	AH,0
  5316 000014C9 30E4                    	xor	ah,ah ; 08/07/2018
  5317 000014CB EB47                    	JMP     SHORT SAVREGS
  5318                                  
  5319                                  ; ---------------------------------------------------------------------------
  5320                                  
  5321                                  ;COMMAND:
  5322                                  ;	;IF	NOT IBM
  5323                                  ;       CMP	AH,SET_OEM_HANDLER
  5324                                  ;       JB      SHORT NOTOEM
  5325                                  ;	; 18/07/2018
  5326                                  ;	je	_$SET_OEM_HANDLER	
  5327                                  ;
  5328                                  ;	; 20/04/2018
  5329                                  ;       ;JMP	_$SET_OEM_HANDLER
  5330                                  ;
  5331                                  ;	; Retro DOS v2.0 - 20/04/2018
  5332                                  ;	CMP	AX, 0FFFFh
  5333                                  ;	;JNE	_$SET_OEM_HANDLER
  5334                                  ;	; 18/07/2018
  5335                                  ;	jne	DO_OEM_FUNC
  5336                                  ;
  5337                                  ;	PUSHA
  5338                                  ;	MOV     SI,RETRODOSMSG
  5339                                  ;       ;CALL	OUTMES
  5340                                  ;wrdosmsg:
  5341                                  ;	mov	ah, 0Eh
  5342                                  ;	mov	bx, 7
  5343                                  ;wrdosmsg_nxt:
  5344                                  ;	cs	lodsb
  5345                                  ;	cmp	al, '$'
  5346                                  ;	je	short wrdosmsg_ok		
  5347                                  ;	int	10h
  5348                                  ;	jmp	short wrdosmsg_nxt
  5349                                  ;wrdosmsg_ok:
  5350                                  ;	POPA
  5351                                  ;	JMP	SHORT BADCALL 
  5352                                  ;	;
  5353                                  ;NOTOEM:
  5354                                  ;	;ENDIF
  5355                                  ;
  5356                                  ;       CMP     AH,MAXCOM
  5357                                  ;       JBE     SHORT SAVREGS
  5358                                  
  5359                                  	; The system call in AH is out of the range that we know how
  5360                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  5361                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  5362                                  	; error as this may break some programs compatability.
  5363                                  
  5364                                  BADCALL:
  5365                                          ;MOV	AL,0
  5366 000014CD 30C0                    	xor	al,al ; 08/07/2018
  5367                                  ;entry	IRET
  5368                                  _IRET:
  5369 000014CF CF                              IRET
  5370                                  
  5371                                  ; ---------------------------------------------------------------------------
  5372                                  
  5373                                  ;entry	CALL_ENTRY                      ; System call entry point and dispatcher
  5374                                  CALL_ENTRY:
  5375 000014D0 58                              POP     AX                      ; IP from the long call at 5
  5376 000014D1 58                              POP     AX                      ; Segment from the long call at 5
  5377                                          ;POP	WORD [USER_SP]		; IP from the CALL 5
  5378 000014D2 2E8F06[4005]                    POP	WORD [CS:USER_SP] ; 12/03/2018
  5379 000014D7 9C                      	PUSHF                           ; Start re-ordering the stack
  5380 000014D8 FA                              CLI
  5381 000014D9 50                              PUSH    AX                      ; Save segment
  5382                                          ;PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  5383 000014DA 2EFF36[4005]                    PUSH	WORD [CS:USER_SP] ; 12/03/2018
  5384 000014DF 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  5385 000014E2 77E9                            JA      SHORT BADCALL
  5386 000014E4 88CC                            MOV     AH,CL
  5387                                  	; 08/07/2018
  5388 000014E6 EB2C                    	jmp	short SAVREGS 
  5389                                  
  5390                                  COMMAND:
  5391                                  	; 08/07/2018 - Retro DOS v3.0
  5392                                  
  5393                                  	;IF	NOT IBM
  5394 000014E8 80FCF8                          CMP	AH,SET_OEM_HANDLER
  5395 000014EB 7221                            JB      SHORT NOTOEM
  5396                                  	; 18/07/2018
  5397 000014ED 0F845E01                	je	_$SET_OEM_HANDLER	
  5398                                  
  5399                                  	; 20/04/2018
  5400                                          ;JMP	_$SET_OEM_HANDLER
  5401                                  
  5402                                  	; Retro DOS v2.0 - 20/04/2018
  5403 000014F1 83F8FF                  	CMP	AX,0FFFFh
  5404                                  	;JNE	_$SET_OEM_HANDLER
  5405                                  	; 18/07/2018
  5406 000014F4 0F856201                	jne	DO_OEM_FUNC
  5407                                  
  5408 000014F8 60                      	PUSHA
  5409 000014F9 BE[7E0C]                	MOV     SI,RETRODOSMSG
  5410                                          ;CALL	OUTMES
  5411                                  wrdosmsg:
  5412 000014FC B40E                    	mov	ah,0Eh
  5413 000014FE BB0700                  	mov	bx,7
  5414                                  wrdosmsg_nxt:
  5415 00001501 2EAC                    	cs	lodsb
  5416 00001503 3C24                    	cmp	al,'$'
  5417 00001505 7404                    	je	short wrdosmsg_ok		
  5418 00001507 CD10                    	int	10h
  5419 00001509 EBF6                    	jmp	short wrdosmsg_nxt
  5420                                  wrdosmsg_ok:
  5421 0000150B 61                      	POPA
  5422 0000150C EBBF                    	JMP	SHORT BADCALL 
  5423                                  	;
  5424                                  
  5425                                  NOTOEM:
  5426                                  	;ENDIF
  5427                                  
  5428 0000150E FA                      	cli	; 08/07/2018
  5429                                  
  5430                                  _COMMAND: ; MSDOS 3.3 (IBM)
  5431                                  
  5432 0000150F 80FC68                          CMP     AH,MAXCOM
  5433                                  	;JBE	SHORT SAVREGS
  5434 00001512 77B9                            JA	SHORT BADCALL ; 08/07/2018
  5435                                  
  5436                                  SAVREGS:
  5437                                  	; 10/08/2018
  5438                                  	; 08/07/2018 - Retro DOS v3.0
  5439 00001514 80FC33                  	cmp	ah,33h
  5440 00001517 7484                    	jz	short _$SET_CTRL_C_TRAPPING
  5441 00001519 721C                    	jb	short SaveAllRegs
  5442 0000151B 80FC64                  	cmp	ah,64h
  5443 0000151E 7717                    	ja	short SaveAllRegs
  5444 00001520 74A2                    	jz	short _$SET_PRINTER_FLAG
  5445 00001522 80FC51                  	cmp	ah,51h
  5446 00001525 0F846EFF                	jz	_$GET_CURRENT_PDB
  5447 00001529 80FC62                  	cmp	ah,62h
  5448 0000152C 0F8467FF                	jz	_$GET_CURRENT_PDB
  5449 00001530 80FC50                  	cmp     ah,50h
  5450 00001533 0F845AFF                	jz	_$SET_CURRENT_PDB
  5451                                  SaveAllRegs:
  5452 00001537 E8FC00                          CALL    save_world
  5453 0000153A 2E8C1E[A805]                    MOV	[CS:SAVEDS],DS	; 12/03/2018
  5454 0000153F 2E891E[A605]                    MOV	[CS:SAVEBX],BX	; 12/03/2018
  5455 00001544 8CCB                            MOV     BX,CS
  5456 00001546 8EDB                            MOV     DS,BX
  5457                                  ;ASSUME  DS:DOSGROUP
  5458 00001548 FE06[ED02]                      INC     BYTE [INDOS]		; Flag that we're in the DOS
  5459                                  	
  5460                                  	; 08/07/2018 - Retro DOS v3.0        
  5461 0000154C 31C0                    	xor     ax, ax
  5462 0000154E A3[0803]                	mov     [USER_ID],ax
  5463 00001551 A1[FC02]                	mov     ax,[CurrentPDB]
  5464 00001554 A3[0603]                	mov     [PROC_ID],ax
  5465                                  
  5466 00001557 A1[4005]                	MOV     AX,[USER_SP]
  5467 0000155A A3[AE05]                        MOV     [NSP],AX
  5468 0000155D A1[4205]                        MOV     AX,[USER_SS]
  5469 00001560 A3[AC05]                        MOV     [NSS],AX
  5470 00001563 58                              POP     AX
  5471 00001564 50                              PUSH    AX
  5472 00001565 8926[4005]                      MOV     [USER_SP],SP
  5473 00001569 8C16[4205]                      MOV     [USER_SS],SS
  5474                                  ;
  5475                                  ; save user stack in his area for later returns (possibly from EXEC)
  5476                                  ; Here comes multitasking!!!
  5477                                  ;
  5478 0000156D 8E1E[FC02]                      MOV     DS,[CurrentPDB]
  5479 00001571 89262E00                        MOV     [PDB.USER_STACK],SP
  5480 00001575 8C163000                        MOV     [PDB.USER_STACK+2],SS
  5481                                  	; 18/07/2018
  5482 00001579 2EC606[2F05]00          	mov	byte [CS:FSHARING], 0
  5483                                  
  5484 0000157F 8CCB                            MOV     BX,CS                   ; no holes here.
  5485 00001581 8ED3                            MOV     SS,BX
  5486                                  ;ASSUME  SS:DOSGROUP
  5487                                  
  5488                                  ;entry	REDISP
  5489                                  REDISP:
  5490 00001583 BC[3607]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  5491 00001586 FB                              STI                             ; Stack OK now
  5492                                  	; 08/07/2018
  5493                                          ;PUSH	CS
  5494                                          ;POP	DS
  5495 00001587 8CCB                    	mov	bx,cs
  5496 00001589 8EDB                    	mov	ds,bx
  5497 0000158B 30FF                            XOR     BH,BH
  5498 0000158D 883E[2103]                      MOV     [CONSWAP],BH
  5499 00001591 C606[2203]01                    MOV     BYTE [IDLEINT],1
  5500 00001596 883E[1603]                      MOV     BYTE [NoSetDir],bh ; 0	; set directories on search
  5501 0000159A 883E[1403]                      mov	byte [FAILERR],bh ; 0	
  5502 0000159E 88E3                    	MOV     BL,AH
  5503 000015A0 D1E3                            SHL     BX,1
  5504 000015A2 FC                              CLD
  5505 000015A3 08E4                            OR      AH,AH
  5506 000015A5 7416                            JZ      SHORT DSKROUT		; ABORT
  5507                                  
  5508                                          ;CMP	AH,12
  5509                                          ;JBE	SHORT IOROUT		; Character I/O
  5510                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  5511                                          ;JZ	SHORT IOROUT
  5512                                          ;CMP	AH,SET_CURRENT_PDB
  5513                                          ;JNZ	SHORT DSKROUT
  5514                                  
  5515                                  	; 10/08/2018
  5516 000015A7 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  5517 000015AA 743D                    	jz      short DISPCALL
  5518 000015AC 80FC0C                  	cmp     ah,STD_CON_INPUT_FLUSH ; 0Ch
  5519 000015AF 770C                    	ja      short DSKROUT
  5520                                  
  5521                                  IOROUT:
  5522 000015B1 803E[EC02]00                    CMP     BYTE [ERRORMODE],0
  5523 000015B6 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  5524 000015B8 BC[360A]                        MOV     SP,IOSTACK
  5525 000015BB EB2C                            JMP     SHORT DISPCALL
  5526                                  
  5527                                  DSKROUT:
  5528                                  	; 08/07/2018 - Retro DOS v3.0
  5529 000015BD A3[0403]                        mov     [USER_IN_AX],ax
  5530 000015C0 C606[EF02]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk  (Default)
  5531                                  
  5532 000015C5 C606[EC02]00                    MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  5533 000015CA C606[EE02]FF                    MOV     BYTE [WPERR],-1		; error mode, so good place to
  5534                                                                          ; make sure flags are reset
  5535 000015CF 50                      	push    ax
  5536 000015D0 B482                    	mov     ah,82h
  5537 000015D2 CD2A                    	int     2Ah 		; Microsoft Networks 
  5538                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  5539 000015D4 58                      	pop     ax
  5540 000015D5 C606[2203]00            	mov     byte [IDLEINT],0
  5541                                  
  5542 000015DA BC[B608]                        MOV     SP,DSKSTACK
  5543 000015DD F606[0303]FF                    TEST    BYTE [CNTCFLAG],-1
  5544 000015E2 7405                            JZ      SHORT DISPCALL
  5545 000015E4 50                              PUSH    AX
  5546                                          ;invoke	DSKSTATCHK
  5547 000015E5 E85243                          CALL	DSKSTATCHK
  5548 000015E8 58                      	POP     AX
  5549                                  DISPCALL:
  5550                                  	; 08/07/2018 -Retro DOS v3.0
  5551                                  	;;;PUSH	WORD [LEAVEADDR] ; (***)
  5552                                          ;;;PUSH	WORD [CS:BX+DISPATCH]
  5553                                          ;;;;PUSH WORD [BX+DISPATCH]
  5554                                  
  5555                                  	; 11/07/2018	
  5556                                  	;mov	bx,[CS:BX+DISPATCH]
  5557 000015E9 8B9F[360E]               	mov	bx,[bx+DISPATCH] 
  5558                                  
  5559                                  	;;;MOV	BX,[SAVEBX]
  5560 000015ED 871E[A605]              	xchg    bx,[SAVEBX]        
  5561                                  
  5562 000015F1 8E1E[A805]              	MOV     DS,[SAVEDS]
  5563                                  ;ASSUME	DS:NOTHING
  5564                                          ;return
  5565                                  ;;;	RETN	
  5566                                  
  5567 000015F5 36FF16[A605]            	call	word [SS:SAVEBX]
  5568                                  
  5569                                  ;entry LEAVE
  5570                                  ;;;_LEAVE:				; Exit from a system call
  5571                                  LeaveDOS: ; 18/07/2018 
  5572                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  5573 000015FA FA                      	CLI
  5574                                          ; 12/03/2018
  5575 000015FB 2EFE0E[ED02]            	DEC     BYTE [CS:INDOS]
  5576 00001600 2E8B26[4005]                    MOV     SP,[CS:USER_SP]
  5577 00001605 2E8E16[4205]                    MOV     SS,[CS:USER_SS]
  5578 0000160A 89E5                    	MOV     BP,SP
  5579                                  	;MOV	[BP.user_AX],AL	
  5580                                          ;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  5581 0000160C 884600                          MOV     [BP],AL
  5582 0000160F 2EA1[AE05]              	MOV     AX,[CS:NSP]
  5583 00001613 2EA3[4005]                      MOV     [CS:USER_SP],AX
  5584 00001617 2EA1[AC05]                      MOV     AX,[CS:NSS]
  5585 0000161B 2EA3[4205]                      MOV     [CS:USER_SS],AX
  5586 0000161F E80100                  	CALL    restore_world
  5587                                  
  5588 00001622 CF                              IRET
  5589                                  
  5590                                  ;SYSTEM_CALL ENDP
  5591                                  
  5592                                  ;
  5593                                  ; restore_world restores all registers ('cept SS:SP, CS:IP, flags) from
  5594                                  ; the stack prior to giving the user control
  5595                                  ;
  5596                                  
  5597                                  ; 11/07/2018 - Retro DOS v3.0
  5598                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  5599                                  ;;restore_tmp DW  ?
  5600                                  ;restore_tmp: 
  5601                                  ;	dw	0
  5602                                          ;procedure restore_world,NEAR
  5603                                  restore_world:
  5604 00001623 2E8F06[AA05]                    POP	WORD [CS:RESTORE_TMP] ; 12/03/2018
  5605 00001628 58                              POP     AX              ; PUSH    ES
  5606 00001629 5B                              POP     BX              ; PUSH    DS
  5607 0000162A 59                              POP     CX              ; PUSH    BP
  5608 0000162B 5A                              POP     DX              ; PUSH    DI
  5609 0000162C 5E                              POP     SI              ; PUSH    SI
  5610 0000162D 5F                              POP     DI              ; PUSH    DX
  5611 0000162E 5D                              POP     BP              ; PUSH    CX
  5612 0000162F 1F                              POP     DS              ; PUSH    BX
  5613 00001630 07                              POP     ES              ; PUSH    AX
  5614                                  	; 07/07/2018 - Retro DOS v3.0
  5615 00001631 2EFF26[AA05]                   	jmp	word [CS:RESTORE_TMP]
  5616                                  
  5617                                  ;restore_world	ENDP
  5618                                  
  5619                                  ;
  5620                                  ; save_world saves complete registers on the stack
  5621                                  ;
  5622                                          ;procedure save_world,NEAR
  5623                                  save_world:
  5624 00001636 2E8F06[AA05]                    POP	WORD [CS:RESTORE_TMP] ; 12/03/2018
  5625 0000163B 06                              PUSH    ES
  5626 0000163C 1E                              PUSH    DS
  5627 0000163D 55                              PUSH    BP
  5628 0000163E 57                              PUSH    DI
  5629 0000163F 56                              PUSH    SI
  5630 00001640 52                              PUSH    DX
  5631 00001641 51                              PUSH    CX
  5632 00001642 53                              PUSH    BX
  5633 00001643 50                              PUSH    AX
  5634                                  	; 07/07/2018 - Retro DOS v3.0
  5635 00001644 2EFF26[AA05]                   	jmp	word [CS:RESTORE_TMP]
  5636                                  
  5637                                  ;save_world	ENDP
  5638                                  
  5639                                  ;
  5640                                  ; get_user_stack returns the user's stack (and hence registers) in DS:SI
  5641                                  ;
  5642                                          ;procedure get_user_stack,NEAR
  5643                                  Get_User_Stack:
  5644                                          ;LDS	SI,DWORD PTR [USER_SP]
  5645                                          ;LDS	SI,[USER_SP]
  5646 00001649 2EC536[4005]                    LDS	SI,[CS:USER_SP] ; 12/03/2018
  5647                                  	;return
  5648 0000164E C3                      	RETN
  5649                                  
  5650                                  ;get_user_stack  ENDP
  5651                                  
  5652                                  ; ---------------------------------------------------------------------------
  5653                                  ;
  5654                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  5655                                  ; Inputs:
  5656                                  ;	User registers, User Stack, INTS disabled
  5657                                  ;	If CALL F8, DS:DX is new handler address
  5658                                  ; Function:
  5659                                  ;	Process OEM INT 21 extensions
  5660                                  ; Outputs:
  5661                                  ;	Jumps to OEM_HANDLER if appropriate
  5662                                  ;
  5663                                  ; ---------------------------------------------------------------------------
  5664                                  
  5665                                  ;IF	NOT IBM
  5666                                  
  5667                                  _$SET_OEM_HANDLER:
  5668                                  	; 18/07/2018
  5669                                  
  5670                                  	;JNE	short DO_OEM_FUNC	; If above F8 try to jump to handler
  5671 0000164F 2E8916[1400]            	MOV     [CS:OEM_HANDLER],DX	; Set Handler
  5672 00001654 2E8C1E[1600]            	MOV     [CS:OEM_HANDLER+2],DS
  5673 00001659 CF                      	IRET                            ; Quick return, Have altered no registers
  5674                                  
  5675                                  DO_OEM_FUNC:
  5676 0000165A 2E833E[1400]FF          	CMP     WORD [CS:OEM_HANDLER],-1
  5677 00001660 7503                    	JNZ     short OEM_JMP
  5678 00001662 E968FE                  	JMP     BADCALL                 ; Handler not initialized
  5679                                  
  5680                                  OEM_JMP:
  5681 00001665 2EFF2E[1400]            	JMP     FAR [CS:OEM_HANDLER]
  5682                                  
  5683                                  ;       ENDIF
  5684                                  
  5685                                  ;============================================================================
  5686                                  ; DOSTAB.ASM - MSDOS 6.0 - 1991
  5687                                  ;============================================================================
  5688                                  ; 11/07/2018 - Retro DOS v3.0
  5689                                  
  5690                                  ; the nul device driver used to be part of the code.  However, since the 
  5691                                  ; header is in the data, and the entry points are only given as an offset,
  5692                                  ; the strategy and interrupt entry points must also be in the data now.
  5693                                  ;
  5694                                  
  5695                                  ;procedure	snuldev,far
  5696                                  SNULDEV:
  5697                                  ;assume ds:nothing,es:nothing,ss:nothing, cs:dosdata
  5698                                  ; Offset 1599h in IBMDOS.COM (MSDOS 3.3), 1987
  5699                                  	;or	word [ES:BX+3],0100h
  5700 0000166A 26814F030001             	OR	word [ES:BX+SRHEAD.REQSTAT],STDON ; set done bit
  5701                                  ;entry inuldev
  5702                                  INULDEV:
  5703 00001670 CB                      	retf				; must not be a return!
  5704                                  ;endproc snuldev
  5705                                  
  5706                                  ;============================================================================
  5707                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  5708                                  ;============================================================================
  5709                                  ; 18/07/2018 - Retro DOS v3.0
  5710                                  ; 15/05/2019 - Retro DOS v4.0
  5711                                  
  5712                                  ; 23/07/2019 - Retro DOS v3.2
  5713                                  
  5714                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  5715                                  
  5716                                  ;   AbsSetup - setup for abs disk functions
  5717                                  ;----------------------------------------------------------------------------
  5718                                  
  5719                                  AbsSetup:
  5720 00001671 36FE06[ED02]            	INC	byte [SS:INDOS]		; SS override
  5721 00001676 FB                      	STI
  5722 00001677 FC                      	CLD
  5723 00001678 1E                      	PUSH	DS
  5724 00001679 16                      	push	ss
  5725 0000167A 1F                      	pop	ds
  5726 0000167B E8DE00                  	CALL	GETBP
  5727 0000167E 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  5728 00001680 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  5729                                  errdriv:
  5730 00001686 1F                      	POP	DS
  5731 00001687 7301                    	jnc	short AbsSetup2
  5732                                  AbsSetup_retn:
  5733 00001689 C3                      	retn
  5734                                  
  5735                                  AbsSetup2:
  5736                                  	; 10/07/2019 - Retro DOS v3.1
  5737                                  	; 23/07/2019 - Retro DOS v3.2
  5738                                  	; MSDOS 6.0
  5739                                  	;				; SS override
  5740 0000168A 36C706[B005]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  5741 00001691 E82700                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  5742 00001694 72F3                    	jc	short AbsSetup_retn
  5743                                  	;call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  5744                                  
  5745                                  	; MSDOS 3.3 (& MSDOS 6.0)
  5746 00001696 1E                      	PUSH	DS
  5747 00001697 56                      	PUSH	SI
  5748 00001698 50                      	PUSH	AX
  5749                                  
  5750 00001699 16                      	push	ss
  5751 0000169A 1F                      	pop	ds
  5752                                  	
  5753 0000169B BE[8203]                	MOV	SI,OPENBUF
  5754 0000169E 8804                    	MOV	[SI],AL
  5755 000016A0 800441                  	ADD	BYTE [SI],"A"
  5756 000016A3 C744013A00              	MOV	WORD [SI+1],003Ah ; ":",0
  5757 000016A8 B80003                  	MOV	AX,0300h
  5758 000016AB F8                      	CLC
  5759 000016AC CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  5760 000016AE 58                      	POP	AX
  5761 000016AF 5E                      	POP	SI
  5762 000016B0 1F                      	POP	DS
  5763 000016B1 73D6                    	jnc	short AbsSetup_retn
  5764                                  
  5765                                  	;mov	word [ss:EXTERR],32h
  5766 000016B3 36C706[F002]3200        	MOV	word [ss:EXTERR],error_not_supported
  5767 000016BA C3                      	retn
  5768                                  
  5769                                  ; 15/05/2019 - Retro DOS v4.0
  5770                                  
  5771                                  ;------------------------------------------------------------------------
  5772                                  ;
  5773                                  ; Procedure Name : RW32_CONVERT
  5774                                  ;
  5775                                  ;Input: same as ABSDRD and ABSDWRT
  5776                                  ;	 ES:BP -> DPB
  5777                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  5778                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  5779                                  ;	 carry clear, parms ok
  5780                                  ;
  5781                                  ;------------------------------------------------------------------------
  5782                                  
  5783                                  ; 23/07/2019 - Retro DOS v3.2
  5784                                  
  5785                                  RW32_CONVERT:
  5786 000016BB 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  5787 000016BE 7424                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  5788 000016C0 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  5789 000016C1 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  5790 000016C2 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  5791 000016C6 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  5792 000016CA 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  5793 000016CD 7408                    	JZ	short letold		;>32mb  yes		;AN000;
  5794 000016CF FEC2                    	INC	DL			;>32mb			;AN000;
  5795 000016D1 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  5796 000016D3 F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  5797 000016D5 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  5798                                  letold:
  5799 000016D7 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  5800 000016D8 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  5801 000016D9 7419                    	JZ	short old_style		;>32mb  no 		;AN000;
  5802                                  
  5803                                  	;push	ds
  5804                                  	;;getdseg <ds>
  5805                                  	;mov	ds,[cs:DosDSeg]
  5806                                  	;mov	word [AbsDskErr],207h	;>32mb  bad address mark
  5807                                  	;pop	ds
  5808                                  
  5809                                  	; 23/07/2019
  5810 000016DB 2EC706[CD0F]0702        	mov	word [cs:AbsDskErr],207h ;>32mb  bad address mark
  5811                                  
  5812 000016E2 F9                      	STC				;>32mb			;AN000;
  5813 000016E3 C3                      	retn				;>32mb			;AN000;
  5814                                  
  5815                                  new32format:
  5816                                  	;mov	dx,[bx+2]
  5817 000016E4 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  5818                                  
  5819                                  	;push	ds			; set up ds to DOSDATA
  5820                                  	;;getdseg <ds>
  5821                                  	;mov	ds,[cs:DosDSeg]
  5822                                  	;MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  5823                                  	;pop	ds
  5824                                  
  5825                                  	; 23/07/2019
  5826 000016E7 2E8916[B005]            	mov	[cs:HIGH_SECTOR],dx
  5827                                  
  5828 000016EC 8B17                    	mov	dx,[bx]
  5829                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  5830                                  	;mov	cx,[bx+4]
  5831 000016EE 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  5832                                  	;lds	bx,[bx+6]
  5833 000016F1 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  5834                                  old_style:				;>32mb			;AN000;
  5835 000016F4 F8                      	CLC				;>32mb			;AN000;
  5836 000016F5 C3                      	retn				;>32mb			;AN000;
  5837                                  
  5838                                  ;---------------------------------------------------------------------------
  5839                                  ;
  5840                                  ; Procedure Name : ABSDRD
  5841                                  ;
  5842                                  ; Interrupt 25 handler. Performs absolute disk read.
  5843                                  ; Inputs:	AL - 0-based drive number
  5844                                  ;		DS:BX point to destination buffer
  5845                                  ;		CX number of logical sectors to read
  5846                                  ;		DX starting logical sector number (0-based)
  5847                                  ; Outputs:	Original flags still on stack
  5848                                  ;		Carry set
  5849                                  ;		    AH error from BIOS
  5850                                  ;		    AL same as low byte of DI from INT 24
  5851                                  ;
  5852                                  ;---------------------------------------------------------------------------
  5853                                          ;procedure   ABSDRD,FAR
  5854                                  ABSDRD:
  5855                                  	; 23/07/2019 - Retro DOS v3.2
  5856                                  	; 15/07/2018
  5857                                  ;ASSUME DS:NOTHING,ES:NOTHING,SS:NOTHING
  5858 000016F6 FA                              CLI
  5859                                  	; 15/03/2018
  5860 000016F7 2E8C16[4205]                    MOV	[CS:USER_SS],SS
  5861 000016FC 2E8926[4005]                    MOV	[CS:USER_SP],SP        
  5862 00001701 0E                      	PUSH    CS
  5863 00001702 17                              POP     SS
  5864                                  ;ASSUME SS:DOSGROUP
  5865 00001703 BC[B608]                        MOV	SP,DSKSTACK
  5866                                  
  5867                                  	;; MSDOS 2.11
  5868                                  
  5869                                          ;;;INC	BYTE [INDOS]
  5870                                          ;;INC	BYTE [SS:INDOS]
  5871                                  	;;STI
  5872                                          ;;CLD
  5873                                          ;;PUSH	ES
  5874                                          ;;PUSH	DS
  5875                                          ;;PUSH	SS
  5876                                          ;;POP	DS
  5877                                  ;;;ASSUME DS:DOSGROUP
  5878                                          ;;;invoke GETBP
  5879                                  	;;CALL	GETBP
  5880                                          ;;POP	DS
  5881                                  ;;;ASSUME DS:NOTHING
  5882                                  
  5883                                  	; 15/07/2018 - Retro DOS v3.0
  5884                                  	; MSDOS 3.3 (& MSDOS 6.0, MSCODE.ASM, 1991)
  5885 00001706 06                              PUSH    ES ; **
  5886 00001707 E867FF                  	call    AbsSetup
  5887                                  	;	
  5888 0000170A 721E                            JC      SHORT ILEAVE
  5889                                          ;invoke	DSKREAD
  5890 0000170C E89D2B                  	CALL	DSKREAD
  5891                                  TLEAVE:
  5892 0000170F 7419                            JZ      SHORT ILEAVE
  5893                                  
  5894                                  	; 15/07/2018 - Retro DOS v3.0
  5895                                          ;IF	IBM
  5896                                  ; Translate the error code to ancient 1.1 codes
  5897 00001711 06                              PUSH    ES ; *
  5898 00001712 0E                              PUSH    CS
  5899 00001713 07                              POP     ES
  5900 00001714 30E4                            XOR     AH,AH			; Nul error code
  5901                                  	;mov	cx,6
  5902 00001716 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  5903 00001719 BF[1310]                        MOV     DI,ERRIN		; Point to error conditions
  5904 0000171C F2AE                            REPNE   SCASB
  5905 0000171E 7504                            JNZ     SHORT LEAVECODE		; Not found
  5906                                  	;mov	ah,[ES:DI+5]
  5907 00001720 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  5908                                  LEAVECODE:
  5909 00001724 07                              POP     ES ; *
  5910                                  	; 15/05/2019 - Retro DOS v4.0
  5911 00001725 2EA3[CD0F]              	mov	[cs:AbsDskErr],ax
  5912                                          ;ENDIF
  5913                                  
  5914 00001729 F9                              STC
  5915                                  ILEAVE:
  5916 0000172A 07                              POP     ES ; **
  5917 0000172B FA                              CLI
  5918                                  	; 23/07/2019
  5919 0000172C 2EA1[CD0F]              	mov     ax,[cs:AbsDskErr]	; restore error
  5920                                          ; 15/03/2018
  5921 00001730 2EFE0E[ED02]            	DEC	BYTE [CS:INDOS]
  5922                                  	; 15/08/2018
  5923 00001735 2E8E16[4205]                    MOV	SS,[CS:USER_SS]
  5924 0000173A 2E8B26[4005]            	MOV	SP,[CS:USER_SP]
  5925                                  ;ASSUME SS:NOTHING
  5926 0000173F FB                              STI
  5927                                          ;return
  5928 00001740 CB                      	RETF   ; ! FAR return !
  5929                                  
  5930                                  ;ABSDRD	ENDP
  5931                                  
  5932                                  ;---------------------------------------------------------------------------
  5933                                  ;
  5934                                  ; Procedure Name : ABSDWRT
  5935                                  ;
  5936                                  ; Interrupt 26 handler. Performs absolute disk write.
  5937                                  ; Inputs:	AL - 0-based drive number
  5938                                  ;		DS:BX point to source buffer
  5939                                  ;		CX number of logical sectors to write
  5940                                  ;		DX starting logical sector number (0-based)
  5941                                  ; Outputs:	Original flags still on stack
  5942                                  ;		Carry set
  5943                                  ;		    AH error from BIOS
  5944                                  ;		    AL same as low byte of DI from INT 24
  5945                                  ;
  5946                                  ;---------------------------------------------------------------------------
  5947                                          ;procedure   ABSDWRT,FAR
  5948                                  ABSDWRT:
  5949                                  		; 23/07/2019 - Retro DOS v3.2
  5950                                  	; 15/07/2018
  5951                                  ;ASSUME	DS:NOTHING,ES:NOTHING,SS:NOTHING
  5952                                  
  5953 00001741 FA                              CLI
  5954                                  	; 15/08/2018
  5955                                  	; 15/03/2018
  5956 00001742 2E8C16[4205]            	MOV	[CS:USER_SS],SS
  5957 00001747 2E8926[4005]                    MOV	[CS:USER_SP],SP
  5958 0000174C 0E                              PUSH    CS
  5959 0000174D 17                              POP     SS
  5960                                  ;ASSUME	SS:DOSGROUP
  5961                                          ;MOV	SP,OFFSET DOSGROUP:DSKSTACK
  5962 0000174E BC[B608]                        MOV	SP,DSKSTACK
  5963                                  
  5964                                  	;; MSDOS 2.11
  5965                                  
  5966                                          ;;;INC	BYTE [INDOS]
  5967                                          ;;INC	BYTE [SS:INDOS]
  5968                                  	;;STI
  5969                                          ;;CLD
  5970                                          ;;PUSH	ES
  5971                                          ;;PUSH	DS
  5972                                          ;;PUSH	SS
  5973                                          ;;POP	DS
  5974                                  ;;;ASSUME DS:DOSGROUP
  5975                                          ;;;invoke GETBP
  5976                                  	;;CALL	GETBP
  5977                                          ;;POP	DS
  5978                                  ;;;ASSUME DS:NOTHING
  5979                                  
  5980                                  	; 15/07/2018 - Retro DOS v3.0
  5981                                  	; MSDOS 3.3 (& MSDOS 6.0, MSCODE.ASM, 1991)
  5982 00001751 06                              PUSH    ES ; **
  5983 00001752 E81CFF                  	call    AbsSetup
  5984                                  	;
  5985 00001755 72D3                            JC      SHORT ILEAVE
  5986                                          ;invoke DSKWRITE
  5987 00001757 E87B2B                          CALL	DSKWRITE
  5988 0000175A EBB3                    	JMP     SHORT TLEAVE
  5989                                  
  5990                                  ;ABSDWRT ENDP
  5991                                  
  5992                                  ;----------------------------------------------------------------------------
  5993                                  ;
  5994                                  ; Procedure Name : GETBP
  5995                                  ;
  5996                                  ; Inputs:
  5997                                  ;	AL = Logical unit number (A = 0)
  5998                                  ; Function:
  5999                                  ;	Find Drive Parameter Block
  6000                                  ; Outputs:
  6001                                  ;	ES:BP points to DPB
  6002                                  ;	[THISDPB] = ES:BP
  6003                                  ;	Carry set if unit number bad or unit is a NET device.
  6004                                  ;		Later case sets extended error error_I24_not_supported
  6005                                  ; No other registers altered
  6006                                  ;
  6007                                  ;----------------------------------------------------------------------------
  6008                                  
  6009                                  GETBP:
  6010                                  	; 23/07/2019 - Retro DOS v3.2
  6011                                  	; 15/05/2019 - Retro DOS v4.0
  6012                                  	; 11/07/2018 - Retro DOS v3.0
  6013 0000175C 50                      	PUSH	AX
  6014 0000175D 0401                    	ADD	AL, 1		; No increment; need carry flag
  6015 0000175F 7216                    	JC	SHORT SKIPGET
  6016 00001761 E85555                  	CALL	GETTHISDRV
  6017                                  	; MSDOS 6.0
  6018 00001764 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  6019 00001766 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  6020 00001768 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  6021 0000176B 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  6022 0000176D F9                      	STC				;DCR.			;AN000;
  6023 0000176E A3[F002]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  6024 00001771 C706[CD0F]0102          	MOV	WORD [AbsDskErr],201h
  6025                                  SKIPGET:
  6026 00001777 58                      	POP	AX
  6027 00001778 7213                    	JC	SHORT GETBP_RETN
  6028                                  
  6029 0000177A C42E[5E05]              	LES	BP,[THISCDS]
  6030                                  	;TEST	WORD [ES:BP+43h],8000H
  6031 0000177E 26F746430080            	TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  6032 00001784 7408                    	JZ	SHORT GETBP_CDS
  6033 00001786 C706[F002]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  6034 0000178C F9                      	STC
  6035                                  GETBP_RETN:
  6036 0000178D C3                      	RETN
  6037                                  
  6038                                  GETBP_CDS:
  6039                                  	;LES	BP,[ES:BP+45h]
  6040 0000178E 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  6041                                  GOTDPB:
  6042                                  	; Load THISDPB from ES:BP
  6043 00001792 892E[4605]              	MOV	[THISDPB],BP
  6044 00001796 8C06[4805]              	MOV	[THISDPB+2],ES
  6045 0000179A C3                      	RETN
  6046                                  
  6047                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  6048                                  
  6049                                  ;----------------------------------------------------------------------------
  6050                                  ;
  6051                                  ; Procedure Name : SYS_RETURN
  6052                                  ;
  6053                                  ; These are the general system call exit mechanisms. All internal system
  6054                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  6055                                  ; is to set the user's flags and set his AX register for return.
  6056                                  ;
  6057                                  ;----------------------------------------------------------------------------
  6058                                  
  6059                                          ;procedure   SYS_RETURN,NEAR
  6060                                  SYS_RETURN:        
  6061                                          ;entry	SYS_RET_OK
  6062                                  SYS_RET_OK:   
  6063                                  	; 18/07/2018
  6064                                  	; Offset 1666h in IBMDOS.COM (MSDOS 3.3), 1987
  6065                                  	; 23/07/2019 - Retro DOS v3.2
  6066                                  	;call	FETCHI_CHECK ; MSDOS 3.3 ! IBMDOS feature ! 
  6067                                  	     
  6068 0000179B E8ABFE                  	call    Get_User_Stack
  6069                                  		; turn off user's carry flag
  6070                                  SYS_RET_OK_clc: ; 26/07/2019 
  6071                                          ;and	word [SI+16h],0FFFEh 
  6072 0000179E 836416FE                        and	word [SI+user_env.user_F],~f_Carry 
  6073 000017A2 EB10                            JMP     SHORT DO_RET
  6074                                  
  6075                                          ;entry	SYS_RET_ERR
  6076                                  SYS_RET_ERR:        
  6077 000017A4 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  6078 000017A6 E86900                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  6079 000017A9 E81A00                  	CALL	ErrorMap
  6080                                  
  6081                                  	;entry	From_GetSet
  6082                                  From_GetSet:
  6083 000017AC E89AFE                          call    Get_User_Stack
  6084                                  		; signal carry to user
  6085                                  	;or	word [SI+16h],1
  6086 000017AF 834C1601                	OR	word [SI+user_env.user_F],f_Carry
  6087 000017B3 F9                      	STC			; also, signal internal error
  6088                                  DO_RET:
  6089                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  6090 000017B4 8904                    	MOV	[SI],AX
  6091 000017B6 C3                      	RETN
  6092                                  
  6093                                  	;entry	FCB_RET_OK
  6094                                  FCB_RET_OK:
  6095                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  6096                                  NO_OP:
  6097 000017B7 30C0                    	XOR	AL,AL
  6098 000017B9 C3                      	retn
  6099                                  
  6100                                  	;entry	FCB_RET_ERR
  6101                                  FCB_RET_ERR:
  6102 000017BA 30E4                    	XOR	AH,AH
  6103 000017BC 36A3[F002]              	mov	[ss:EXTERR],AX
  6104 000017C0 E80300                  	CALL	ErrorMap
  6105 000017C3 B0FF                    	MOV	AL,-1
  6106 000017C5 C3                      	retn
  6107                                  
  6108                                  	;entry	ErrorMap
  6109                                  ErrorMap:
  6110 000017C6 56                      	PUSH	SI
  6111                                  				; ERR_TABLE_21 is now in DOSDATA
  6112 000017C7 BE[5F0D]                	MOV	SI,ERR_TABLE_21
  6113                                  				; SS override for FAILERR and EXTERR
  6114 000017CA 36803E[1403]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  6115 000017D0 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  6116                                  		 ; Ooops, this is the REAL reason
  6117                                  	;mov	word [SS:EXTERR],53h
  6118 000017D2 36C706[F002]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  6119                                  EXTENDED_NORMAL:
  6120 000017D9 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  6121 000017DC 5E                      	POP	SI
  6122 000017DD C3                      	retn
  6123                                  
  6124                                  	;EndProc SYS_RETURN
  6125                                  
  6126                                  ;---------------------------------------------------------------------------
  6127                                  ;
  6128                                  ; Procedure Name : CAL_LK
  6129                                  ;
  6130                                  ; Inputs:
  6131                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  6132                                  ;		(DS NEED not be DOSDATA)
  6133                                  ;	[EXTERR] is set with error
  6134                                  ; Function:
  6135                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  6136                                  ; Outputs:
  6137                                  ;	[EXTERR_CLASS] set
  6138                                  ;	[EXTERR_ACTION] set
  6139                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  6140                                  ; Destroys SI, FLAGS
  6141                                  ;
  6142                                  ;---------------------------------------------------------------------------
  6143                                  
  6144                                  	;procedure CAL_LK,NEAR
  6145                                  CAL_LK:
  6146 000017DE 1E                      	PUSH	DS
  6147 000017DF 50                      	PUSH	AX
  6148 000017E0 53                      	PUSH	BX
  6149                                  
  6150                                  ;M048	Context DS		; DS:SI -> Table
  6151                                  ;
  6152                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6153                                  ; is DOSDATA
  6154                                  
  6155                                  	;getdseg	<ds>	; M048: DS:SI -> Table
  6156                                  
  6157                                  	; 18/07/2018
  6158 000017E1 16                      	push	ss
  6159 000017E2 1F                      	pop	ds
  6160                                  
  6161 000017E3 8B1E[F002]              	MOV	BX,[EXTERR]	; Get error in BL
  6162                                  TABLK1:
  6163 000017E7 AC                      	LODSB
  6164                                  
  6165 000017E8 3CFF                    	CMP	AL,0FFH
  6166 000017EA 7409                    	JZ	short GOT_VALS	; End of table
  6167 000017EC 38D8                    	CMP	AL,BL
  6168 000017EE 7405                    	JZ	short GOT_VALS	; Got entry
  6169 000017F0 83C603                  	ADD	SI,3		; Next table entry
  6170                                  	; 15/08/2018
  6171 000017F3 EBF2                    	JMP	short TABLK1
  6172                                  
  6173                                  GOT_VALS:
  6174 000017F5 AD                      	LODSW			; AL is CLASS, AH is ACTION
  6175                                  
  6176 000017F6 80FCFF                  	CMP	AH,0FFH
  6177 000017F9 7404                    	JZ	short NO_SET_ACT
  6178 000017FB 8826[F202]              	MOV	[EXTERR_ACTION],AH	; Set ACTION
  6179                                  NO_SET_ACT:
  6180 000017FF 3CFF                    	CMP	AL,0FFH
  6181 00001801 7403                    	JZ	short NO_SET_CLS
  6182 00001803 A2[F302]                	MOV	[EXTERR_CLASS],AL	; Set CLASS
  6183                                  NO_SET_CLS:
  6184 00001806 AC                      	LODSB			; Get LOCUS
  6185                                  
  6186 00001807 3CFF                    	CMP	AL,0FFH
  6187 00001809 7403                    	JZ	short NO_SET_LOC
  6188 0000180B A2[EF02]                	MOV	[EXTERR_LOCUS],AL
  6189                                  NO_SET_LOC:
  6190 0000180E 5B                      	POP	BX
  6191 0000180F 58                      	POP	AX
  6192 00001810 1F                      	POP	DS
  6193 00001811 C3                      	retn
  6194                                  
  6195                                  	;EndProc CAL_LK
  6196                                  
  6197                                  ;---------------------------------------------------------------------------
  6198                                  ;
  6199                                  ; Procedure Name : ETAB_LK
  6200                                  ;
  6201                                  ; Inputs:
  6202                                  ;	AX is error code
  6203                                  ;	[USER_IN_AX] has AH value of system call involved
  6204                                  ; Function:
  6205                                  ;	Make sure error code is appropriate to this call.
  6206                                  ; Outputs:
  6207                                  ;	AX MAY be mapped error code
  6208                                  ;	[EXTERR] = Input AX
  6209                                  ; Destroys ONLY AX and FLAGS
  6210                                  ;
  6211                                  ;---------------------------------------------------------------------------
  6212                                  
  6213                                  	;procedure ETAB_LK,NEAR
  6214                                  
  6215                                  ETAB_LK: ; 10/08/2018
  6216 00001812 1E                      	PUSH	DS
  6217 00001813 56                      	PUSH	SI
  6218 00001814 51                      	PUSH	CX
  6219 00001815 53                      	PUSH	BX
  6220                                  
  6221                                  	;Context DS			; SS is DOSDATA
  6222                                  
  6223 00001816 16                      	push	ss
  6224 00001817 1F                      	pop	ds
  6225                                  
  6226 00001818 A3[F002]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  6227                                  
  6228                                  					; I21_MAP_E_TAB is now in DOSCODE
  6229 0000181B BE[C30C]                	MOV	SI,I21_MAP_E_TAB
  6230 0000181E 88C7                    	MOV	BH,AL			; Real code to BH
  6231 00001820 8A1E[0503]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  6232                                  TABLK2:
  6233                                  ;;hkn;	LODSW
  6234                                  ;	LODS	word ptr cs:[si] ; MSDOS 6.0
  6235                                  	
  6236                                  	; 18/07/2018
  6237 00001824 AD                      	lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  6238                                  
  6239 00001825 3CFF                    	CMP	AL,0FFH 		; End of table?
  6240 00001827 740C                    	JZ	short NOT_IN_TABLE	; Yes
  6241 00001829 38D8                    	CMP	AL,BL			; Found call?
  6242 0000182B 740C                    	JZ	short GOT_CALL		; Yes
  6243 0000182D 86E0                    	XCHG	AH,AL			; Count to AL
  6244 0000182F 30E4                    	XOR	AH,AH			; Make word for add
  6245 00001831 01C6                    	ADD	SI,AX			; Next table entry
  6246 00001833 EBEF                    	JMP	short TABLK2
  6247                                  
  6248                                  NOT_IN_TABLE:
  6249 00001835 88F8                    	MOV	AL,BH			; Restore original code
  6250 00001837 EB0B                    	JMP	SHORT NO_MAP
  6251                                  
  6252                                  GOT_CALL:
  6253 00001839 88E1                    	MOV	CL,AH
  6254 0000183B 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  6255                                  CHECK_CODE:
  6256                                  ;;hkn;	LODSB
  6257                                  ;	LODS	byte ptr cs:[si]
  6258                                  
  6259                                  	; 18/07/2018
  6260 0000183D AC                      	lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  6261                                  
  6262 0000183E 38F8                    	CMP	AL,BH			; Code OK?
  6263 00001840 7402                    	JZ	short NO_MAP		; Yes
  6264 00001842 E2F9                    	LOOP	CHECK_CODE
  6265                                  NO_MAP:
  6266 00001844 30E4                    	XOR	AH,AH			; AX is now valid code
  6267 00001846 5B                      	POP	BX
  6268 00001847 59                      	POP	CX
  6269 00001848 5E                      	POP	SI
  6270 00001849 1F                      	POP	DS
  6271 0000184A C3                      	retn
  6272                                  
  6273                                  	;EndProc ETAB_LK
  6274                                  
  6275                                  ; 18/07/2018 - Retro DOS v3.0
  6276                                  ;---------------------------------------------------------------------------
  6277                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  6278                                  
  6279                                  ;IF installed
  6280                                  ;---------------------------------------------------------------------------
  6281                                  ;
  6282                                  ; Procedure Name : SetBad
  6283                                  ;
  6284                                  ; SetBad sets up info for bad functions
  6285                                  ;
  6286                                  ;---------------------------------------------------------------------------
  6287                                  
  6288                                  SetBad:
  6289                                  	;mov	ax,1
  6290 0000184B B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  6291                                  
  6292                                  ;	set up ds to point to DOSDATA
  6293                                  
  6294                                  	; MSDOS 6.0
  6295                                  	;push	ds
  6296                                  
  6297                                  	;getdseg <ds>
  6298                                  	;MOV	[EXTERR_LOCUS],errLOC_Unk	
  6299                                  
  6300                                  	; MSDOS 3.3
  6301                                  	;mov	byte [cs:EXTERR_LOCUS],1
  6302 0000184E 2EC606[EF02]01          	MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  6303                                  
  6304                                  	;pop	ds	  		;hkn; restore ds
  6305                                  
  6306 00001854 F9                      	STC
  6307 00001855 C3                      	retn
  6308                                  
  6309                                  ;--------------------------------------------------------------------------
  6310                                  ;
  6311                                  ; Procedure Name : BadCall
  6312                                  ;
  6313                                  ; BadCall is the initial routine for bad function calls
  6314                                  ;
  6315                                  ;--------------------------------------------------------------------------
  6316                                  
  6317                                  BadCall:
  6318 00001856 E8F2FF                  	call	SetBad
  6319 00001859 CB                      	retf
  6320                                  
  6321                                  ;--------------------------------------------------------------------------
  6322                                  ;
  6323                                  ; OKCall always sets carry to off.
  6324                                  ;
  6325                                  ;-----------------------------------------------------------------------
  6326                                  
  6327                                  OKCall:
  6328 0000185A F8                      	CLC
  6329 0000185B CB                      	retf
  6330                                  
  6331                                  ;---------------------------------------------------------------------------
  6332                                  ;
  6333                                  ; Procedure Name : INT2F
  6334                                  ;
  6335                                  ; INT 2F handler works as follows:
  6336                                  ;   PUSH    AX
  6337                                  ;   MOV     AX,multiplex:function
  6338                                  ;   INT     2F
  6339                                  ;   POP     ...
  6340                                  ; The handler itself needs to make the AX available for the various routines.
  6341                                  ;
  6342                                  ;----------------------------------------------------------------------------
  6343                                  
  6344                                  ;PUBLIC	Int2F
  6345                                  ;INT2F	PROC	FAR
  6346                                  
  6347                                  	; 18/07/2018 - Retro DOS v3.0
  6348                                  
  6349                                  INT2F:
  6350                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  6351                                  INT2FNT:
  6352                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  6353 0000185C FB                      	STI
  6354                                  	;cmp	ah,11h
  6355 0000185D 80FC11                  	CMP	AH,MultNET
  6356 00001860 750A                    	JNZ	short INT2FSHR
  6357                                  TestInstall:
  6358 00001862 08C0                    	OR	AL,AL
  6359 00001864 7403                    	JZ	short Leave2F
  6360                                  BadFunc:
  6361 00001866 E8E2FF                  	CALL	SetBad
  6362                                  
  6363                                  	;entry	Leave2F
  6364                                  Leave2F:
  6365 00001869 CA0200                  	RETF	2			; long return + clear flags off stack
  6366                                  
  6367                                  INT2FSHR:
  6368                                  	;cmp	ah,10h
  6369 0000186C 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  6370 0000186F 74F1                    	JZ	short TestInstall	; yes, check for installation
  6371                                  INT2FNLS:
  6372                                  	;cmp	ah,14h
  6373 00001871 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  6374 00001874 74EC                    	JZ	short TestInstall	; yes check for installation
  6375                                  INT2FDOS:
  6376                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  6377                                  
  6378                                  	; 18/07/2018
  6379                                  	; MSDOS 6.0
  6380                                  	;CMP	AH,MultDOS
  6381                                  	;JNZ	check_win		;check if win386 broadcast
  6382                                  	;jmp	DispatchDOS
  6383                                  
  6384                                  	; .... win386 .... 
  6385                                  	
  6386                                  	; 18/07/2018
  6387                                  	; MSDOS 3.3
  6388                                  	;cmp	ah,12h	
  6389 00001876 80FC12                  	CMP	AH,MultDOS
  6390 00001879 7401                    	jz	short DispatchDOS
  6391 0000187B CF                      	iret
  6392                                  
  6393                                  ;INT2F	ENDP
  6394                                  	
  6395                                  DispatchDOS:
  6396 0000187C 2EFF36[080F]            	PUSH	word [CS:FOO]		; push return address
  6397 00001881 2EFF36[0A0F]            	PUSH	word [CS:DTab]		; push table address
  6398 00001886 50                      	PUSH	AX			; push index
  6399 00001887 55                      	PUSH	BP
  6400 00001888 89E5                    	MOV	BP,SP
  6401                                  		; stack looks like:
  6402                                  		;   0	BP
  6403                                  		;   2	DISPATCH
  6404                                  		;   4	TABLE
  6405                                  		;   6	RETURN
  6406                                  		;   8	LONG-RETURN
  6407                                  		;   c	FLAGS
  6408                                  		;   e	AX
  6409                                  	
  6410 0000188A 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6411 0000188D 5D                      	POP	BP
  6412 0000188E E8B507                  	call	TableDispatch
  6413 00001891 EBD3                    	JMP	short BadFunc 		; return indicates invalid function
  6414                                  
  6415                                  INT2F_etcetera:
  6416                                  	;entry	DosGetGroup
  6417                                  DosGetGroup:
  6418                                  	; MSDOS 6.0
  6419                                  ;SR; Cannot use CS now
  6420                                  ;
  6421                                  ;	PUSH	CS
  6422                                  ;	POP	DS
  6423                                  
  6424                                  	;getdseg <ds>
  6425                                  	;retn
  6426                                  
  6427                                  	; MSDOS 3.3
  6428 00001893 0E                      	push	cs
  6429 00001894 1F                      	pop	ds
  6430 00001895 C3                      	retn
  6431                                  
  6432                                  	;entry	DOSInstall
  6433                                  DOSInstall:
  6434 00001896 B0FF                    	MOV	AL,0FFh
  6435 00001898 C3                      	retn
  6436                                  
  6437                                  ;ENDIF
  6438                                  
  6439                                  ;============================================================================
  6440                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  6441                                  ;============================================================================
  6442                                  ; 18/07/2018 - Retro DOS 3.0
  6443                                  
  6444                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
  6445                                  ;     ENTRY: AL = Character to map
  6446                                  ;     EXIT:  AL = The converted character
  6447                                  ; Alters no registers except AL and flags.
  6448                                  ; The routine should do nothing to chars below 80H.
  6449                                  ;
  6450                                  ; Example:
  6451                                  
  6452                                  ;Procedure   MAP_CASE,FAR
  6453                                  
  6454                                  MAP_CASE:
  6455                                  	; Offset 176Ch in IBMDOS.COM (MSDOS 3.3), 1987
  6456                                  	
  6457 00001899 3C80                    	CMP	AL,80H
  6458 0000189B 7301                    	JAE	short Map1	;Map no chars below 80H ever
  6459 0000189D CB                      	RETF
  6460                                  Map1:
  6461 0000189E 2C80                    	SUB	AL,80H		;Turn into index value
  6462 000018A0 1E                      	PUSH	DS
  6463 000018A1 53                      	PUSH	BX
  6464 000018A2 BB[C610]                	MOV	BX,UCASE_TAB+2
  6465                                  FINISH:
  6466 000018A5 0E                      	PUSH	CS		;Move to DS
  6467 000018A6 1F                      	POP	DS
  6468 000018A7 D7                      	XLAT			; Get upper case character
  6469 000018A8 5B                      	POP	BX
  6470 000018A9 1F                      	POP	DS
  6471                                  L_RET:	
  6472 000018AA CB                      	RETF
  6473                                  
  6474                                  ;EndProc MAP_CASE
  6475                                  
  6476                                  ;============================================================================
  6477                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6478                                  ;============================================================================
  6479                                  ; 18/07/2018 - Retro DOS v3.0
  6480                                  
  6481                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6482                                  
  6483                                  ; OEMFunction key is expected to process a single function
  6484                                  ;   key input from a device and dispatch to the proper
  6485                                  ;   routines leaving all registers UNTOUCHED.
  6486                                  ;
  6487                                  ; Inputs:   CS, SS are DOSGROUP
  6488                                  ; Outputs:  None. This function is expected to JMP to onw of
  6489                                  ;           the following labels:
  6490                                  ;
  6491                                  ;           GetCh       - ignore the sequence
  6492                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6493                                  ;           ExitIns     - toggle insert mode
  6494                                  ;           EnterIns    - toggle insert mode
  6495                                  ;           BackSp      - move backwards one space
  6496                                  ;           ReEdit      - reedit the line with a new template
  6497                                  ;           KilNew      - discard the current line and start from scratch
  6498                                  ;           CopyLin     - copy the rest of the template into the line
  6499                                  ;           SkipStr     - read the next character and skip to it in the template
  6500                                  ;           CopyStr     - read next char and copy from template to line until char
  6501                                  ;           SkipOne     - advance position in template one character
  6502                                  ;           CopyOne     - copy next character in template into line
  6503                                  ;           CtrlZ       - place a ^Z into the template
  6504                                  ; Registers that are allowed to be modified by this function are:
  6505                                  ;           AX, CX, BP
  6506                                  
  6507                                  OEMFunctionKey:
  6508 000018AB E88108                  	CALL	_$STD_CON_INPUT_NO_ECHO  ; Get the second byte of the sequence
  6509 000018AE B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6510 000018B0 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6511 000018B1 BF[1113]                	MOV     DI,ESCTAB		; offset of second byte table
  6512 000018B4 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6513 000018B6 5F                      	POP     DI                      ; restore DI
  6514 000018B7 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6515 000018B9 89CD                    	MOV     BP,CX                   ; move to indexable register
  6516                                  	;JMP	word [SS:BP+ESCFUNC]	; Go to the right routine
  6517 000018BB FFA6[1F13]              	JMP	word [BP+ESCFUNC]
  6518                                  	
  6519                                  ;============================================================================
  6520                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6521                                  ;============================================================================
  6522                                  ; Retro DOS v3.0 - 18/07/2018
  6523                                  
  6524                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6525                                  ;----------------------------------------------------------------------------
  6526                                  ; Retro DOS v2.0 - 13/03/2018
  6527                                  
  6528                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6529                                  
  6530                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6531                                  
  6532                                  ;**	$GET_DATE - Get Current Date
  6533                                  ;
  6534                                  ;	ENTRY	none
  6535                                  ;	EXIT	(cx:dx) = current date
  6536                                  ;	USES	all
  6537                                  
  6538                                  _$GET_DATE:	;System call 42
  6539                                  
  6540 000018BF 16                              PUSH    SS
  6541 000018C0 1F                              POP     DS
  6542 000018C1 E8B700                          CALL	READTIME        ;Check for rollover to next day
  6543 000018C4 A1[1C03]                        MOV     AX,[YEAR]
  6544                                  
  6545                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6546                                  
  6547 000018C7 8B1E[1A03]                      MOV     BX,[DAY]	; fetch both day and month
  6548 000018CB E87BFD                  	CALL	Get_User_Stack	;Get pointer to user registers
  6549                                          ;MOV    [SI+6],BX  	;DH=month, DL=day
  6550 000018CE 895C06                  	MOV	[SI+user_env.user_DX],BX
  6551 000018D1 05BC07                          ADD     AX,1980         ;Put bias back
  6552                                          ;MOV    [SI+4],AX  	;CX=year
  6553 000018D4 894404                  	MOV	[SI+user_env.user_CX],AX
  6554                                          ;MOV	AL,[WEEKDAY]
  6555 000018D7 36A0[2003]                      MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6556 000018DB C3                      	RETN
  6557                                  
  6558                                  ;**	$SET_DATE - Set Current Date
  6559                                  ;
  6560                                  ;	ENTRY	(cx:dx) = current date
  6561                                  ;	EXIT	(al) = -1 iff bad date
  6562                                  ;		(al) = 0 if ok
  6563                                  ;	USES	all
  6564                                  
  6565                                  _$SET_DATE:			;System call 43
  6566                                  
  6567 000018DC B0FF                            MOV     AL,-1           ;Be ready to flag error
  6568 000018DE 81E9BC07                        SUB     CX,1980         ;Fix bias in year
  6569 000018E2 7217                            JC      SHORT RET24	;Error if not big enough
  6570 000018E4 83F977                          CMP     CX,119          ;Year must be less than 2100
  6571 000018E7 7712                            JA      SHORT RET24
  6572 000018E9 08F6                            OR      DH,DH
  6573 000018EB 740E                            JZ      SHORT RET24
  6574 000018ED 08D2                            OR      DL,DL
  6575 000018EF 740A                            JZ      SHORT RET24	;Error if either month or day is 0
  6576 000018F1 80FE0C                          CMP     DH,12           ;Check against max. month
  6577 000018F4 7705                            JA      SHORT RET24
  6578 000018F6 16                              PUSH    SS
  6579 000018F7 1F                              POP     DS
  6580 000018F8 E81301                  	CALL	DODATE
  6581                                  RET24:  
  6582 000018FB C3                      	RETN
  6583                                  
  6584                                  
  6585                                  ;**	$GET_TIME - Get Current Time
  6586                                  ;
  6587                                  ;	ENTRY	none
  6588                                  ;	EXIT	(cx:dx) = current time
  6589                                  ;	USES	all
  6590                                  
  6591                                  _$GET_TIME:			;System call 44
  6592                                  
  6593 000018FC 16                              PUSH    SS
  6594 000018FD 1F                              POP     DS
  6595 000018FE E87A00                  	CALL	READTIME
  6596 00001901 E845FD                  	CALL	Get_User_Stack           ;Get pointer to user registers
  6597                                         ;MOV     [SI+6],DX
  6598 00001904 895406                  	MOV	[SI+user_env.user_DX],DX
  6599                                         ;MOV     [SI+4],CX
  6600 00001907 894C04                  	MOV	[SI+user_env.user_CX],CX
  6601 0000190A 30C0                            XOR     AL,AL
  6602                                  RET26:  
  6603 0000190C C3                      	RETN
  6604                                  
  6605                                  ;**	$SET_TIME - Set Current Time
  6606                                  ;
  6607                                  ;	ENTRY	(cx:dx) = time
  6608                                  ;	EXIT	(al) = 0 if 0k
  6609                                  ;		(al) = -1 if invalid
  6610                                  ;	USES	ALL
  6611                                  
  6612                                  _$SET_TIME:			;System call 45
  6613                                  
  6614 0000190D B0FF                            MOV     AL,-1           ;Flag in case of error
  6615 0000190F 80FD18                          CMP     CH,24           ;Check hours
  6616 00001912 73F8                            JAE     SHORT RET26
  6617 00001914 80F93C                          CMP     CL,60           ;Check minutes
  6618 00001917 73F3                            JAE     SHORT RET26
  6619 00001919 80FE3C                          CMP     DH,60           ;Check seconds
  6620 0000191C 73EE                            JAE     SHORT RET26
  6621 0000191E 80FA64                          CMP     DL,100          ;Check 1/100's
  6622 00001921 73E9                            JAE     SHORT RET26
  6623 00001923 51                              PUSH    CX
  6624 00001924 52                              PUSH    DX
  6625 00001925 16                              PUSH    SS
  6626 00001926 1F                              POP     DS
  6627 00001927 BB[7A03]                        MOV     BX,TIMEBUF
  6628 0000192A B90600                          MOV     CX,6
  6629 0000192D 31D2                            XOR     DX,DX
  6630 0000192F 89D0                            MOV     AX,DX
  6631 00001931 53                              PUSH    BX
  6632 00001932 E87138                  	CALL	SETREAD
  6633 00001935 1E                              PUSH    DS
  6634 00001936 C536[2E00]                      LDS     SI,[BCLOCK]
  6635 0000193A E8F737                  	CALL	DEVIOCALL2      ;Get correct day count
  6636 0000193D 1F                              POP     DS
  6637 0000193E 5B                              POP     BX
  6638 0000193F E89738                  	CALL	SETWRITE
  6639 00001942 8F06[7E03]                      POP     WORD [TIMEBUF+4]
  6640 00001946 8F06[7C03]                      POP     WORD [TIMEBUF+2]
  6641 0000194A C536[2E00]                      LDS     SI,[BCLOCK]
  6642 0000194E E8E337                  	CALL	DEVIOCALL2      ;Set the time
  6643 00001951 30C0                            XOR     AL,AL
  6644 00001953 C3                              RETN
  6645                                  
  6646                                  ; 11/07/2018 - Retro DOS v3.0
  6647                                  ; Retro DOS v2.0 - 14/03/2018
  6648                                  
  6649                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6650                                  
  6651                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6652                                  
  6653                                  ;
  6654                                  ; Date16 returns the current date in AX, current time in DX
  6655                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6656                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6657                                  ;
  6658                                  
  6659                                  DATE16:
  6660                                  	
  6661                                  ;M048	Context DS
  6662                                  ;
  6663                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6664                                  ; is DOSDATA
  6665                                  
  6666                                  	;getdseg	<ds>			; M048
  6667                                  
  6668                                  	;PUSH	SS
  6669 00001954 0E                      	PUSH	CS
  6670 00001955 1F                      	POP	DS
  6671                                  
  6672 00001956 51                              PUSH    CX
  6673 00001957 06                              PUSH    ES
  6674 00001958 E82000                          CALL    READTIME
  6675 0000195B 07                              POP     ES
  6676 0000195C D0E1                            SHL     CL,1            ;Minutes to left part of byte
  6677 0000195E D0E1                            SHL     CL,1
  6678 00001960 D1E1                            SHL     CX,1            ;Push hours and minutes to left end
  6679 00001962 D1E1                            SHL     CX,1
  6680 00001964 D1E1                            SHL     CX,1
  6681 00001966 D0EE                            SHR     DH,1            ;Count every two seconds
  6682 00001968 08F1                            OR      CL,DH           ;Combine seconds with hours and minutes
  6683 0000196A 89CA                            MOV     DX,CX
  6684                                  
  6685                                  ;	WARNING!  MONTH and YEAR must be adjacently allocated
  6686                                  
  6687 0000196C A1[1B03]                        MOV     AX,[MONTH]	;Fetch month and year
  6688 0000196F B104                            MOV     CL,4
  6689 00001971 D2E0                            SHL     AL,CL		;Push month to left to make room for day
  6690 00001973 D1E0                            SHL     AX,1
  6691 00001975 59                              POP     CX
  6692 00001976 0A06[1A03]                      OR      AL,[DAY]
  6693                                  RET21:
  6694 0000197A C3                              RETN
  6695                                  
  6696                                  READTIME:
  6697                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6698                                  ;Uses AX, CX, DX.
  6699                                  
  6700 0000197B C706[C30F]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6701 00001981 56                              PUSH    SI
  6702 00001982 53                              PUSH    BX
  6703                                  
  6704 00001983 BB[7A03]                        MOV     BX,TIMEBUF
  6705                                  
  6706 00001986 B90600                          MOV     CX,6
  6707 00001989 31D2                            XOR     DX,DX
  6708 0000198B 89D0                            MOV     AX,DX
  6709 0000198D E81638                  	CALL	SETREAD
  6710 00001990 1E                              PUSH    DS
  6711 00001991 C536[2E00]                      LDS     SI,[BCLOCK]
  6712 00001995 E89C37                  	CALL	DEVIOCALL2      ;Get correct date and time
  6713 00001998 1F                              POP     DS
  6714 00001999 5B                              POP     BX
  6715 0000199A 5E                              POP     SI
  6716 0000199B A1[7A03]                        MOV     AX,[TIMEBUF]
  6717 0000199E 8B0E[7C03]                      MOV     CX,[TIMEBUF+2]
  6718 000019A2 8B16[7E03]                      MOV     DX,[TIMEBUF+4]
  6719 000019A6 3B06[1E03]                      CMP     AX,[DAYCNT]     ;See if day count is the same
  6720                                          ;JZ	SHORT RET22
  6721 000019AA 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6722                                  	;cmp	ax,43830
  6723 000019AC 3D36AB                          CMP     AX,FOURYEARS*30 ;Number of days in 120 years
  6724 000019AF 733D                            JAE     SHORT RET22	;Ignore if too large
  6725 000019B1 A3[1E03]                        MOV     [DAYCNT],AX
  6726 000019B4 56                              PUSH    SI
  6727 000019B5 51                              PUSH    CX
  6728 000019B6 52                              PUSH    DX              ;Save time
  6729 000019B7 31D2                            XOR     DX,DX
  6730                                  	;mov	cx,1461
  6731 000019B9 B9B505                          MOV     CX,FOURYEARS    ;Number of days in 4 years
  6732 000019BC F7F1                            DIV     CX              ;Compute number of 4-year units
  6733 000019BE D1E0                            SHL     AX,1
  6734 000019C0 D1E0                            SHL     AX,1
  6735 000019C2 D1E0                            SHL     AX,1            ;Multiply by 8 (no. of half-years)
  6736 000019C4 89C1                            MOV     CX,AX           ;<240 implies AH=0
  6737                                  
  6738 000019C6 BE[AF0C]                        MOV     SI,YRTAB        ;Table of days in each year
  6739                                  
  6740 000019C9 E82300                          CALL    DSLIDE          ;Find out which of four years we're in
  6741 000019CC D1E9                            SHR     CX,1            ;Convert half-years to whole years
  6742 000019CE 7304                            JNC     SHORT SK	;Extra half-year?
  6743 000019D0 81C2C800                        ADD     DX,200
  6744                                  SK:
  6745 000019D4 E82400                          CALL    SETYEAR
  6746 000019D7 B101                            MOV     CL,1            ;At least at first month in year
  6747                                  
  6748 000019D9 BE[B70C]                        MOV     SI,MONTAB       ;Table of days in each month
  6749                                          
  6750 000019DC E81000                  	CALL    DSLIDE          ;Find out which month we're in
  6751 000019DF 880E[1B03]                      MOV     [MONTH],CL
  6752 000019E3 42                              INC     DX              ;Remainder is day of month (start with one)
  6753 000019E4 8816[1A03]                      MOV     [DAY],DL
  6754 000019E8 E89400                          CALL    WKDAY           ;Set day of week
  6755 000019EB 5A                              POP     DX
  6756 000019EC 59                              POP     CX
  6757 000019ED 5E                              POP     SI
  6758                                  RET22:  
  6759 000019EE C3                      	RETN
  6760                                  
  6761                                  DSLIDE:
  6762 000019EF B400                            MOV     AH,0
  6763                                  DSLIDE1:
  6764 000019F1 AC                              LODSB			;Get count of days
  6765 000019F2 39C2                            CMP     DX,AX           ;See if it will fit
  6766 000019F4 7217                            JB      SHORT RET23	;If not, done
  6767 000019F6 29C2                            SUB     DX,AX
  6768 000019F8 41                              INC     CX              ;Count one more month/year
  6769 000019F9 EBF6                            JMP     SHORT DSLIDE1
  6770                                  
  6771                                  SETYEAR:
  6772                                  ;Set year with value in CX. Adjust length of February for this year.
  6773                                  
  6774                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6775                                  ;       set DS to DOSDATA. Since the only guy calling this should be the DOS
  6776                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6777                                  ;	preserve DS as CHKYR is also called as a routine.
  6778                                  
  6779                                  
  6780                                  	; MSDOS 6.0 (18/07/2018) ; *
  6781                                  
  6782                                  	;GETDSEG DS
  6783                                  
  6784 000019FB 0E                      	PUSH	CS  ; *
  6785 000019FC 1F                      	POP	DS  ; *
  6786                                  
  6787                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987 
  6788                                  
  6789 000019FD 880E[1C03]                      MOV     [YEAR],CL
  6790                                  CHKYR:
  6791 00001A01 F6C103                          TEST    CL,3            ;Check for leap year
  6792 00001A04 B01C                            MOV     AL,28
  6793 00001A06 7502                            JNZ     SHORT SAVFEB	;28 days if no leap year
  6794 00001A08 FEC0                            INC     AL              ;Add leap day
  6795                                  SAVFEB:
  6796                                  	;mov	[february],al
  6797 00001A0A A2[B80C]                        MOV     [MONTAB+1],AL   ;Store for February
  6798                                  RET23:  
  6799 00001A0D C3                      	RETN
  6800                                  
  6801                                  DODATE:
  6802 00001A0E E8F0FF                          CALL    CHKYR           ;Set Feb. up for new year
  6803 00001A11 88F0                            MOV     AL,DH
  6804                                  
  6805 00001A13 BB[B60C]                        MOV     BX,MONTAB-1
  6806                                  
  6807 00001A16 D7                              XLAT                    ;Look up days in month
  6808 00001A17 38D0                            CMP     AL,DL
  6809 00001A19 B0FF                            MOV     AL,-1           ;Restore error flag, just in case
  6810                                          ;JB	SHORT RET25	;Error if too many days
  6811 00001A1B 72F0                            jb	short RET23 ; 18/07/2018
  6812 00001A1D E8DBFF                  	CALL    SETYEAR
  6813                                  ;
  6814                                  ; WARNING!  DAY and MONTH must be adjacently allocated
  6815                                  ;
  6816 00001A20 8916[1A03]                      MOV     [DAY],DX	;Set both day and month
  6817 00001A24 D1E9                            SHR     CX,1
  6818 00001A26 D1E9                            SHR     CX,1
  6819                                  	;mov	ax,1461
  6820 00001A28 B8B505                          MOV     AX,FOURYEARS
  6821 00001A2B 89D3                            MOV     BX,DX
  6822 00001A2D F7E1                            MUL     CX
  6823 00001A2F 8A0E[1C03]                      MOV     CL,[YEAR]
  6824 00001A33 80E103                          AND     CL,3
  6825                                  
  6826 00001A36 BE[AF0C]                        MOV     SI,YRTAB
  6827                                  
  6828 00001A39 89C2                            MOV     DX,AX
  6829 00001A3B D1E1                            SHL     CX,1            ;Two entries per year, so double count
  6830 00001A3D E85200                          CALL    DSUM            ;Add up the days in each year
  6831 00001A40 88F9                            MOV     CL,BH           ;Month of year
  6832                                  
  6833 00001A42 BE[B70C]                        MOV     SI,MONTAB
  6834                                  
  6835 00001A45 49                              DEC     CX              ;Account for months starting with one
  6836 00001A46 E84900                          CALL    DSUM            ;Add up days in each month
  6837 00001A49 88D9                            MOV     CL,BL           ;Day of month
  6838 00001A4B 49                              DEC     CX              ;Account for days starting with one
  6839 00001A4C 01CA                            ADD     DX,CX           ;Add in to day total
  6840 00001A4E 92                              XCHG    AX,DX           ;Get day count in AX
  6841 00001A4F A3[1E03]                        MOV     [DAYCNT],AX
  6842 00001A52 56                              PUSH    SI
  6843 00001A53 53                              PUSH    BX
  6844 00001A54 50                              PUSH    AX
  6845                                  
  6846 00001A55 BB[7A03]                        MOV     BX,TIMEBUF
  6847                                  
  6848 00001A58 B90600                          MOV     CX,6
  6849 00001A5B 31D2                            XOR     DX,DX
  6850 00001A5D 89D0                            MOV     AX,DX
  6851 00001A5F 53                              PUSH    BX
  6852 00001A60 E84337                  	CALL	SETREAD
  6853                                  
  6854 00001A63 1E                              PUSH    DS
  6855 00001A64 C536[2E00]                      LDS     SI,[BCLOCK]
  6856 00001A68 E8C936                  	CALL	DEVIOCALL2	;Get correct date and time
  6857 00001A6B 1F                              POP     DS
  6858 00001A6C 5B                              POP     BX
  6859 00001A6D E86937                  	CALL	SETWRITE
  6860 00001A70 8F06[7A03]                      POP     WORD [TIMEBUF]
  6861 00001A74 1E                              PUSH    DS
  6862 00001A75 C536[2E00]                      LDS     SI,[BCLOCK]
  6863 00001A79 E8B836                  	CALL	DEVIOCALL2      ;Set the date
  6864 00001A7C 1F                              POP     DS
  6865 00001A7D 5B                              POP     BX
  6866 00001A7E 5E                              POP     SI
  6867                                  WKDAY:
  6868 00001A7F A1[1E03]                        MOV     AX,[DAYCNT]
  6869 00001A82 31D2                            XOR     DX,DX
  6870 00001A84 B90700                          MOV     CX,7
  6871 00001A87 40                              INC     AX
  6872 00001A88 40                              INC     AX              ;First day was Tuesday
  6873 00001A89 F7F1                            DIV     CX              ;Compute day of week
  6874 00001A8B 8816[2003]                      MOV     [WEEKDAY],DL
  6875 00001A8F 30C0                            XOR     AL,AL           ;Flag OK
  6876                                  RET25:
  6877 00001A91 C3                      	RETN
  6878                                  
  6879                                  ;**	DSUM - Compute the sum of a string of bytes
  6880                                  ;
  6881                                  ;	ENTRY	(cx) = byte count
  6882                                  ;		(ds:si) = byte address
  6883                                  ;		(dx) = sum register, initialized by caller
  6884                                  ;	EXIT	(dx) updated
  6885                                  ;	USES	ax, cx, dx, si, flags
  6886                                  
  6887                                  DSUM:
  6888 00001A92 B400                            MOV     AH,0
  6889                                  	;JCXZ	DSUM9
  6890 00001A94 E3FB                            JCXZ	RET25 ; 18/07/2018
  6891                                  DSUM1:
  6892 00001A96 AC                              LODSB
  6893 00001A97 01C2                            ADD     DX,AX
  6894 00001A99 E2FB                            LOOP    DSUM1
  6895                                  DSUM9:
  6896 00001A9B C3                              RETN
  6897                                  
  6898                                  ;============================================================================
  6899                                  ; GETSET.ASM
  6900                                  ;============================================================================
  6901                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6902                                  ; Retro DOS v2.0 - 12/03/2018
  6903                                  
  6904                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6905                                  ;NAME	GETSET
  6906                                  
  6907                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6908                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6909                                  
  6910                                  ;USERNUM:
  6911                                  ;	DW	0			; 24 bit user number
  6912                                  ;       DB      0
  6913                                  ;;	IF      IBM
  6914                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6915                                  ;;	ELSE
  6916                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6917                                  ;;	ENDIF
  6918                                  
  6919                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6920                                  ;; 08/07/2018 - Retro DOS v3.0
  6921                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6922                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6923                                  
  6924                                  
  6925                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6926                                  
  6927                                  _$GET_VERSION:
  6928                                  
  6929                                  ; Inputs:
  6930                                  ;       None
  6931                                  ; Function:
  6932                                  ;       Return MS-DOS version number
  6933                                  ; Outputs:
  6934                                  ;       OEM number in BH
  6935                                  ;       User number in BL:CX (24 bits)
  6936                                  ;       Version number as AL.AH in binary
  6937                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6938                                  
  6939                                  ; MSDOS 6.0
  6940                                  ;		if input al = 00
  6941                                  ;		  (bh) = OEM number			
  6942                                  ;		else if input al = 01
  6943                                  ;		  (bh) = version flags
  6944                                  ;		 
  6945                                  ;		       	 bits 0-2 = DOS internal revision
  6946                                  ;		       	 bits 3-7 = DOS type flags
  6947                                  ;		              bit 3    = DOS is in ROM
  6948                                  ;		              bit 4    = DOS in in HMA
  6949                                  ;		              bits 5-7 = reserved
  6950                                  ;               M007 change - only bit 3 is now valid. Other bits
  6951                                  ;               are 0 when AL = 1
  6952                                  
  6953                                  	
  6954                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6955                                  
  6956 00001A9C 16                              PUSH    SS
  6957 00001A9D 1F                              POP     DS
  6958 00001A9E 8B1E[7603]                      MOV     BX,[USERNUM+2]
  6959 00001AA2 8B0E[7403]                      MOV     CX,[USERNUM]
  6960 00001AA6 A1[AD0C]                        MOV     AX,[MSVERS]
  6961 00001AA9 E89DFB                          call	Get_User_Stack
  6962                                          ;MOV	[SI+2],BX
  6963 00001AAC 895C02                  	mov	[SI+user_env.user_BX],BX
  6964                                          ;MOV	[SI+4],CX
  6965 00001AAF 894C04                  	mov	[SI+user_env.user_CX],CX
  6966                                          ;MOV	[SI+user_env.user_AX],AX  ; Really only sets AH
  6967 00001AB2 8904                            MOV	[SI],AX ; 31/03/2018
  6968 00001AB4 C3                      	RETN
  6969                                  
  6970                                  ; 18/07/2018 - Retro DOS v3.0
  6971                                  
  6972                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6973                                  
  6974                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6975                                  ;
  6976                                  ;	ENTRY	none
  6977                                  ;	EXIT	(al) = value of VERIFY flag
  6978                                  ;	USES	all
  6979                                  
  6980                                  
  6981                                  _$GET_VERIFY_ON_WRITE:
  6982                                  
  6983                                  ;hkn; SS override
  6984 00001AB5 36A0[CB02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6985 00001AB9 C3                      	retn
  6986                                  
  6987                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6988                                  ;
  6989                                  ;	ENTRY	(al) = value of VERIFY flag
  6990                                  ;	EXIT	none
  6991                                  ;	USES	all
  6992                                  
  6993                                  _$SET_VERIFY_ON_WRITE:
  6994                                  
  6995 00001ABA 2401                    	AND	AL,1
  6996                                  ;hkn; SS override
  6997 00001ABC 36A2[CB02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6998                                  RET27:	; 18/07/2018
  6999 00001AC0 C3                      	retn
  7000                                  
  7001                                  ; 19/07/2018 - Retro DOS v3.0
  7002                                  
  7003                                  ;BREAK <$International - return country-dependent information>
  7004                                  
  7005                                  ;----------------------------------------------------------------------------
  7006                                  ;
  7007                                  ; Procedure Name : $INTERNATIONAL
  7008                                  ;
  7009                                  ; Inputs:
  7010                                  ;	MOV	AH,International
  7011                                  ;	MOV	AL,country	(al = 0 => current country)
  7012                                  ;      [MOV	BX,country]
  7013                                  ;	LDS	DX,block
  7014                                  ;	INT	21
  7015                                  ; Function:
  7016                                  ;	give users an idea of what country the application is running
  7017                                  ; Outputs:
  7018                                  ;	IF DX != -1 on input (get country)
  7019                                  ;	  AL = 0 means return current country table.
  7020                                  ;	  0<AL<0FFH means return country table for country AL
  7021                                  ;	  AL = 0FF means return country table for country BX
  7022                                  ;	  No Carry:
  7023                                  ;	     Register BX will contain the 16-bit country code.
  7024                                  ;	     Register AL will contain the low 8 bits of the country code.
  7025                                  ;	     The block pointed to by DS:DX is filled in with the information
  7026                                  ;	     for the particular country.
  7027                                  ;		BYTE  Size of this table excluding this byte and the next
  7028                                  ;		BYTE  Country code represented by this table
  7029                                  ;			A sequence of n bytes, where n is the number specified
  7030                                  ;			by the first byte above and is not > internat_block_max,
  7031                                  ;			in the correct order for being returned by the
  7032                                  ;			INTERNATIONAL call as follows:
  7033                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  7034                                  ;		5 BYTE	Currency symbol null terminated
  7035                                  ;		2 BYTE	thousands separator null terminated
  7036                                  ;		2 BYTE	Decimal point null terminated
  7037                                  ;		2 BYTE	Date separator null terminated
  7038                                  ;		2 BYTE	Time separator null terminated
  7039                                  ;		1 BYTE	Bit field.  Currency format.
  7040                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  7041                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  7042                                  ;		1 BYTE	No. of significant decimal digits in currency
  7043                                  ;		1 BYTE	Bit field.  Time format.
  7044                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  7045                                  ;		DWORD	Call address of case conversion routine
  7046                                  ;		2 BYTE	Data list separator null terminated.
  7047                                  ;	  Carry:
  7048                                  ;	     Register AX has the error code.
  7049                                  ;	IF DX = -1 on input (set current country)
  7050                                  ;	  AL = 0 is an error
  7051                                  ;	  0<AL<0FFH means set current country to country AL
  7052                                  ;	  AL = 0FF means set current country to country BX
  7053                                  ;	  No Carry:
  7054                                  ;	    Current country SET
  7055                                  ;	    Register AL will contain the low 8 bits of the country code.
  7056                                  ;	  Carry:
  7057                                  ;	     Register AX has the error code.
  7058                                  ;-----------------------------------------------------------------------------
  7059                                  
  7060                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  7061                                  
  7062                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  7063                                  	 
  7064 00001AC1 3CFF                    	CMP	AL,0FFH
  7065 00001AC3 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  7066 00001AC5 88C3                    	MOV	BL,AL			; Put AL country code in BX
  7067 00001AC7 30FF                    	XOR	BH,BH
  7068                                  BX_HAS_CODE:
  7069 00001AC9 1E                      	PUSH	DS
  7070 00001ACA 07                      	POP	ES
  7071 00001ACB 52                      	PUSH	DX
  7072 00001ACC 5F                      	POP	DI			; User buffer to ES:DI
  7073                                  
  7074                                  ;hkn; SS is DOSDATA
  7075                                  ;	context DS
  7076                                  
  7077 00001ACD 16                      	push	ss
  7078 00001ACE 1F                      	pop	ds
  7079                                  
  7080 00001ACF 83FFFF                  	CMP	DI,-1
  7081 00001AD2 745F                    	JZ	short international_set
  7082 00001AD4 09DB                    	OR	BX,BX
  7083 00001AD6 7505                    	JNZ	short international_find
  7084                                  
  7085                                  ;hkn; country_cdpg is in DOSDATA segment.
  7086 00001AD8 BE[3B10]                	MOV	SI,COUNTRY_CDPG
  7087                                  
  7088 00001ADB EB40                    	JMP	SHORT international_copy
  7089                                  
  7090                                  international_find:
  7091 00001ADD BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  7092 00001AE0 E80B00                  	CALL	international_get
  7093 00001AE3 7256                    	JC	short errtn
  7094 00001AE5 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  7095 00001AE8 7533                    	JNZ	SHORT international_copy ; no, copy by myself
  7096 00001AEA 89D3                    	MOV	BX,DX			 ; put country back
  7097 00001AEC EB3A                    	JMP	SHORT international_ok3
  7098                                  
  7099                                  international_get:
  7100                                  
  7101                                  ;hkn; country_cdpg is in DOSDATA segment.
  7102                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7103 00001AEE BE[3B10]                	MOV	SI,COUNTRY_CDPG
  7104                                  
  7105                                  	; MSDOS 6.0
  7106                                  	;CMP	BX,ss:[SI.ccDosCountry]	 ; = current country id;smr;SS Override
  7107                                  	;retz				 ; return if equal
  7108                                  
  7109                                  	; MSDOS 3.3
  7110                                  	;cmp	bx,[SI+63h]
  7111 00001AF1 3B5C63                  	CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7112 00001AF4 74CA                    	jz	short RET27
  7113                                  
  7114 00001AF6 89DA                    	MOV	DX,BX
  7115 00001AF8 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7116                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7117                                  
  7118 00001AFA B80014                  	mov	ax,1400h
  7119 00001AFD CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7120                                  			; Return: AL = 00h not installed, OK to install
  7121                                  			; 01h not installed, not OK
  7122                                  			; FFh installed
  7123                                  	
  7124 00001AFF 3CFF                    	CMP	AL,0FFH
  7125 00001B01 7516                    	JNZ	short interr		; not in memory
  7126                                  	;cmp	bp,0
  7127 00001B03 09ED                    	or	bp,bp			; GetCntry ?
  7128 00001B05 7507                    	JNZ	short stcdpg
  7129                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7130                                  
  7131 00001B07 B80414                  	mov     ax,1404h
  7132 00001B0A CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7133                                  			; BX = code page, DX = country code,
  7134                                  			; DS:SI -> internal code page structure
  7135                                  			; ES:DI -> user buffer
  7136                                  			; Return: AL = status
  7137                                  
  7138 00001B0C EB05                    	JMP	short chkok
  7139                                  	
  7140                                  	;nop
  7141                                  
  7142                                  stcdpg:
  7143                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7144                                  
  7145 00001B0E B80314                  	mov     ax,1403h
  7146 00001B11 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7147                                  			; DS:SI -> internal code page structure
  7148                                  			; BX = code page, DX = country code
  7149                                  			; Return: AL = status
  7150                                  chkok:
  7151 00001B13 08C0                    	or	al,al			; success ?
  7152                                  	;retz				; yes
  7153 00001B15 74A9                    	jz	short RET27
  7154                                  
  7155                                  setcarry:
  7156 00001B17 F9                      	STC				; set carry
  7157 00001B18 C3                      	retn
  7158                                  interr:
  7159 00001B19 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7160 00001B1B EBFA                    	JMP	short setcarry
  7161                                  
  7162                                  international_copy:
  7163                                  
  7164                                  ;hkn; country_cdpg is in DOSDATA segment.
  7165                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7166                                  	; MSDOS 6.0
  7167                                  	;MOV	BX,ss:[SI.ccDosCountry]	 ; = current country id;smr;SS Override
  7168                                  	;MOV	SI,OFFSET DOSDATA:COUNTRY_CDPG.ccDFormat
  7169                                  
  7170                                  	; MSDOS 3.3
  7171                                  	;mov	bx,[SI+63h]
  7172 00001B1D 8B5C63                  	mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7173 00001B20 BE[A210]                	mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7174                                  
  7175                                  	;mov	cx,24
  7176 00001B23 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7177                                  
  7178                                  	; MSDOS 6.0
  7179                                  ;hkn;	must set up DS to SS so that international info can be copied
  7180                                  	;push	ds
  7181                                  	;push	ss					; cs -> ss
  7182                                  	;pop	ds
  7183                                  
  7184 00001B26 F3A4                    	REP	MOVSB			;copy country info
  7185                                  
  7186                                  	; MSDOS 6.0
  7187                                  ;hkn;	restore ds
  7188                                  	;pop	ds
  7189                                  
  7190                                  international_ok3:
  7191 00001B28 E81EFB                  	call	Get_User_Stack
  7192                                  ;ASSUME	DS:NOTHING
  7193                                  	;MOV	[SI+2],BX
  7194 00001B2B 895C02                  	MOV	[SI+user_env.user_BX],BX
  7195                                  international_ok:
  7196 00001B2E 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7197 00001B30 E968FC                  	jmp	SYS_RET_OK
  7198                                  
  7199                                  international_set:
  7200                                  
  7201                                  ;hkn; ASSUME	DS:DOSGROUP
  7202                                  ;ASSUME	DS:DOSDATA
  7203                                  
  7204 00001B33 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7205 00001B36 E8B5FF                  	CALL	international_get
  7206 00001B39 73F3                    	JNC	short international_ok
  7207                                  errtn:
  7208 00001B3B 3CFF                    	CMP	AL,0FFH
  7209 00001B3D 7403                    	JZ	short errtn2
  7210                                  errtn1:
  7211 00001B3F E962FC                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7212                                  errtn2:
  7213                                  	;error	error_invalid_function	; NLSFUNC not existent
  7214                                  
  7215                                  	;mov	al,1
  7216 00001B42 B001                    	mov	al,error_invalid_function 
  7217                                  	;jmp	short errtn1
  7218                                  errtn3:
  7219 00001B44 E95DFC                  	jmp	SYS_RET_ERR
  7220                                  
  7221                                  ;EndProc $INTERNATIONAL
  7222                                  
  7223                                  ; 19/07/2018
  7224                                  
  7225                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7226                                  
  7227                                  ;---------------------------------------------------------------------------
  7228                                  ;
  7229                                  ; Procedure Name : $GetExtCntry
  7230                                  ;
  7231                                  ; Inputs:
  7232                                  ;	if AL >= 20H
  7233                                  ;	  AL= 20H    capitalize single char, DL= char
  7234                                  ;	      21H    capitalize string, CX= string length
  7235                                  ;	      22H    capitalize ASCIIZ string
  7236                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7237                                  ;	      80H bit 0 = use normal upper case table
  7238                                  ;		      1 = use file upper case table
  7239                                  ;	   DS:DX points to string
  7240                                  ;
  7241                                  ;	else
  7242                                  ;
  7243                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7244                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7245                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7246                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7247                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7248                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7249                                  ;	INT	21
  7250                                  ; Function:
  7251                                  ;	give users extended country dependent information
  7252                                  ;	or capitalize chars
  7253                                  ; Outputs:
  7254                                  ;	  No Carry:
  7255                                  ;	     extended country info is succesfully returned
  7256                                  ;	  Carry:
  7257                                  ;	     Register AX has the error code.
  7258                                  ;	     AX=0, NO	 for YES/NO CHECK
  7259                                  ;		1, YES
  7260                                  ;-------------------------------------------------------------------------------
  7261                                  
  7262                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7263                                  
  7264                                  	; MSDOS 6.0
  7265                                  _$GetExtCntry:
  7266 00001B47 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7267 00001B49 7264                    	JB	short notcap
  7268                                  capcap: 				;
  7269 00001B4B A880                    	TEST	AL,UPPER_TABLE  ; 80h	; which upper case table
  7270 00001B4D 7505                    	JNZ	short fileupper		; file upper case
  7271                                  
  7272                                  ;hkn; UCASE_TAB in DOSDATA
  7273 00001B4F BB[C610]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7274 00001B52 EB05                    	JMP	SHORT capit
  7275                                  
  7276                                  fileupper:
  7277                                  	; 16/01/2024 (MSDOS 3.3-6.22 MSDOS.SYS has a bug here)
  7278                                  	; (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7279                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7280                                  	; AL >= 80h
  7281 00001B54 247F                    	and	al,7Fh
  7282                                  
  7283                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7284 00001B56 BB[4811]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7285                                  capit:					;
  7286 00001B59 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7287 00001B5B 750D                    	JNZ	short chkyes		; no
  7288 00001B5D 88D0                    	MOV	AL,DL			; set up AL
  7289 00001B5F E8B03D                  	call	GETLET3 		; upper case it
  7290 00001B62 E8E4FA                  	call	Get_User_Stack		; get user stack
  7291 00001B65 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7292 00001B68 EB1C                    	JMP	SHORT nono		; done
  7293                                  chkyes: 				;
  7294 00001B6A 3C23                    	CMP	AL,CHECK_YES_NO		; check YES or NO ?
  7295 00001B6C 751B                    	JNZ	short capstring		; no
  7296 00001B6E 31C0                    	XOR	AX,AX			; presume NO
  7297                                  		      
  7298                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7299                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7300                                  
  7301                                  	; 06/08/2018 - Retro DOS v3.0
  7302                                  	;CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7303 00001B70 80FA59                  	cmp	DL,'Y'
  7304 00001B73 7410                    	JZ	short yesyes		; yes
  7305                                  	;CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7306 00001B75 80FA79                  	cmp	dl,'y'
  7307 00001B78 740B                    	JZ	short yesyes		; yes
  7308 00001B7A 80FA4E                  	cmp	dl,'N'
  7309                                  	;CMP	DL,[cs:NLS_NO]		; is  'N'?
  7310 00001B7D 7407                    	JZ	short nono		; no
  7311 00001B7F 80FA6E                  	CMP	DL,'n'
  7312                                  	;CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7313 00001B82 7402                    	JZ	short nono		; no
  7314                                  ;dbcs_char:				;
  7315 00001B84 40                      	INC	AX			; not YES or NO
  7316                                  yesyes: 				;
  7317 00001B85 40                      	INC	AX			; return 1
  7318                                  nono:					;
  7319 00001B86 E912FC                  	jmp	SYS_RET_OK		; done
  7320                                  capstring:				;
  7321 00001B89 89D6                    	MOV	SI,DX			; si=dx
  7322 00001B8B 3C21                    	CMP	AL,CAP_STRING		; cap string ?
  7323 00001B8D 750F                    	JNZ	short capascii		; no
  7324 00001B8F 09C9                    	OR	CX,CX			; check count 0
  7325 00001B91 74F3                    	JZ	short nono		; yes finished
  7326                                  concap: 				;
  7327 00001B93 AC                      	LODSB				; get char
  7328 00001B94 E87B3D                  	call	GETLET3 		; upper case it
  7329 00001B97 8844FF                  	MOV	byte [SI-1],AL		; store back
  7330                                  next99: 				;
  7331 00001B9A E2F7                    	LOOP	concap			; continue
  7332 00001B9C EBE8                    	JMP	short nono		; done
  7333                                  capascii:				;
  7334 00001B9E 3C22                    	CMP	AL,CAP_ASCIIZ		; cap ASCIIZ string ?
  7335 00001BA0 7545                    	JNZ	short capinval		; no
  7336                                  concap2:				;
  7337 00001BA2 AC                      	LODSB				; get char
  7338 00001BA3 08C0                    	or	al,al			; end of string ?
  7339 00001BA5 74DF                    	JZ	short nono		; yes
  7340 00001BA7 E8683D                  	call	GETLET3 		; upper case it
  7341 00001BAA 8844FF                  	MOV	[SI-1],AL		; store back
  7342 00001BAD EBF3                    	JMP	short concap2 		; continue
  7343                                  
  7344                                  	; MSDOS 3.3 ($ MSDOS 6.0)
  7345                                  
  7346                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7347                                  ; _$GetExtCntry:
  7348                                  
  7349                                  notcap:
  7350 00001BAF 83F905                  	CMP	CX,5			; minimum size is 5
  7351 00001BB2 7279                    	jb	short sizeerror
  7352                                  
  7353                                  GEC_CONT:
  7354                                  ;hkn; SS is DOSDATA
  7355                                  	;context DS
  7356                                  
  7357 00001BB4 16                      	push	ss
  7358                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7359 00001BB5 1F                      	pop	ds  ; 17/05/2019 - BugFix
  7360                                  	
  7361                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7362 00001BB6 BE[3B10]                	MOV	SI,COUNTRY_CDPG
  7363                                  
  7364 00001BB9 83FAFF                  	CMP	DX,-1			; active country ?
  7365 00001BBC 7503                    	JNZ	short GETCDPG 		; no
  7366                                  
  7367                                  ;hkn; use DS override to accesss country_cdpg fields
  7368                                  	;mov	dx,[si+63h]
  7369 00001BBE 8B5463                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7370                                  					; get active country id;smr;use DS
  7371                                  GETCDPG:
  7372 00001BC1 83FBFF                  	CMP	BX,-1			; active code page?
  7373 00001BC4 7503                    	JNZ	short CHKAGAIN		; no, check again
  7374                                  
  7375                                  ;hkn; use DS override to accesss country_cdpg fields
  7376                                  	;mov	bx,[si+65h]
  7377 00001BC6 8B5C65                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7378                                  					; get active code page id;smr;Use DS
  7379                                  CHKAGAIN:
  7380                                  	;cmp	dx,[si+63h]
  7381 00001BC9 3B5463                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7382                                  					; same as active country id?;smr;use DS
  7383 00001BCC 7552                    	JNZ	short CHKNLS		; no
  7384                                  	;cmp	bx,[si+65h]
  7385 00001BCE 3B5C65                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7386                                  					; same as active code pg id?;smr;use DS
  7387 00001BD1 754D                    	JNZ	short CHKNLS		; no
  7388                                  CHKTYPE:
  7389                                  	;mov	bx,[si+48h]
  7390 00001BD3 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7391                                  					; bx = sys code page id;smr;use DS
  7392                                  ;	CMP	AL,SetALL		; select all?
  7393                                  ;	JNZ	short SELONE
  7394                                  ;	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccNumber_of_entries
  7395                                  ;SELONE:
  7396 00001BD6 51                      	PUSH	CX			; save cx
  7397                                  	;mov	cx,[si+4Ah]
  7398 00001BD7 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]	;smr;use DS
  7399 00001BDA BE[8710]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7400                                  NXTENTRY:
  7401 00001BDD 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7402 00001BDF 740B                    	JZ	short FOUNDIT
  7403 00001BE1 83C605                  	ADD	SI,5			; next entry
  7404 00001BE4 E2F7                    	LOOP	NXTENTRY
  7405 00001BE6 59                      	POP	CX
  7406                                  capinval:
  7407                                  	;error	error_invalid_function	; info type not found
  7408                                  	;mov	al,1
  7409 00001BE7 B001                    	mov	al,error_invalid_function
  7410 00001BE9 E9B8FB                  	jmp	SYS_RET_ERR
  7411                                  
  7412                                  FOUNDIT:
  7413 00001BEC A4                      	MOVSB				; move info id byte
  7414 00001BED 59                      	POP	CX			; retsore char count
  7415                                  	;cmp	al,1
  7416 00001BEE 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7417 00001BF0 7415                    	JZ	short setsize
  7418 00001BF2 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7419 00001BF5 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7420                                  OK_RETN:
  7421 00001BF8 F3A4                    	REP	MOVSB			; copy info
  7422 00001BFA 89C1                    	MOV	CX,AX			; CX = actual length returned
  7423 00001BFC 89D8                    	MOV	AX,BX			; return sys code page in ax
  7424                                  GETDONE:
  7425 00001BFE E848FA                  	call	Get_User_Stack		; return actual length to user's CX
  7426                                  	;mov	[si+4],cx 
  7427 00001C01 894C04                  	MOV	[SI+user_env.user_CX],CX
  7428                                  	; 26/07/2019
  7429                                  	;jmp	SYS_RET_OK
  7430 00001C04 E997FB                  	jmp	SYS_RET_OK_clc
  7431                                  setsize:
  7432 00001C07 83E903                  	SUB	CX,3			; size after length field
  7433 00001C0A 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7434 00001C0C 7302                    	JAE	short setsize2		; no
  7435 00001C0E 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7436                                  setsize2:
  7437 00001C10 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7438 00001C13 83C702                  	ADD	DI,2			; update index
  7439 00001C16 83C602                  	ADD	SI,2
  7440 00001C19 89C8                    	MOV	AX,CX
  7441 00001C1B 83C003                  	ADD	AX,3			; AX has the actual length
  7442 00001C1E EBD8                    	JMP	short OK_RETN 		; go move it
  7443                                  CHKNLS:
  7444 00001C20 30E4                    	XOR	AH,AH
  7445 00001C22 50                      	PUSH	AX			; save info type
  7446 00001C23 5D                      	POP	BP			; bp = info type
  7447                                  	
  7448                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7449                                  
  7450 00001C24 B80014                  	mov     ax, 1400h
  7451 00001C27 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7452                                  			; Return: AL = 00h not installed, OK to install
  7453                                  			; 01h not installed, not OK
  7454                                  			; FFh installed
  7455                                  	
  7456 00001C29 3CFF                    	CMP	AL,0FFH
  7457 00001C2B 7405                    	JZ	short NLSNXT		; in memory
  7458                                  
  7459                                  sizeerror:
  7460                                  	;error	error_invalid_function
  7461                                  	;mov	al,1
  7462 00001C2D B001                    	mov	al,error_invalid_function
  7463 00001C2F E972FB                  	jmp	SYS_RET_ERR
  7464                                  
  7465                                  NLSNXT: 
  7466                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7467                                  
  7468 00001C32 B80214                  	mov     ax, 1402h
  7469 00001C35 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7470                                  			; BP = subfunction, BX = code page
  7471                                  			; DX = country code, DS:SI -> internal code page structure
  7472                                  			; ES:DI -> user buffer, CX = size of user buffer
  7473                                  			; Return: AL = status
  7474                                  			; 00h successful
  7475                                  			; else DOS error code
  7476                                  
  7477 00001C37 3C00                    	CMP	AL,0			; success ?
  7478 00001C39 7508                    	JNZ	short NLSERROR
  7479 00001C3B 8B4448                  	mov     ax,[si+48h]
  7480 00001C3E 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7481                                  			; ax = sys code page id;smr;use ds;
  7482                                  			;BUGBUG;check whether DS is OK after the above calls
  7483 00001C41 EBBB                    	JMP	short GETDONE
  7484                                  NLSERROR:
  7485 00001C43 E95EFB                  	jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7486                                  
  7487                                  ;EndProc $GetExtCntry
  7488                                  
  7489                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7490                                  
  7491                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7492                                  ;
  7493                                  ;   System call format:
  7494                                  ;
  7495                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7496                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7497                                  ;	MOV	BX,CODE_PAGE	( set code page only)
  7498                                  ;	INT	21
  7499                                  ;
  7500                                  ;	ENTRY	(al) = n
  7501                                  ;		(bx) = code page
  7502                                  ;	EXIT	'C' clear
  7503                                  ;		  global code page is set	(set global code page)
  7504                                  ;		  (BX) = active code page id	(get global code page)
  7505                                  ;		  (DX) = system code page id	(get global code page)
  7506                                  ;		'C' set
  7507                                  ;		  (AX) = error code
  7508                                  
  7509                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7510                                  
  7511                                  _$GetSetCdPg:
  7512                                  
  7513                                  ;hkn; SS is DOSDATA
  7514                                  	;context DS
  7515                                  
  7516 00001C46 16                      	push	ss
  7517 00001C47 1F                      	pop	ds
  7518                                  
  7519                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7520 00001C48 BE[3B10]                	MOV	SI,COUNTRY_CDPG
  7521                                  
  7522 00001C4B 3C01                    	CMP	AL,1		       ; get global code page
  7523 00001C4D 7512                    	JNZ	short setglpg 	       ; set global cod epage
  7524                                  	;mov	bx,[si+65h]
  7525 00001C4F 8B5C65                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7526                                  					; get active code page id;smr;use ds
  7527                                  	;mov	dx,[si+48h]
  7528 00001C52 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7529                                  				  	; get sys code page id;smr;use ds
  7530 00001C55 E8F1F9                  	call	Get_User_Stack
  7531                                  ;ASSUME DS:NOTHING
  7532                                  	;mov	[si+2],bx
  7533 00001C58 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7534                                  	;mov	[si+6],dx
  7535 00001C5B 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7536                                  OK_RETURN:
  7537                                  	;transfer SYS_RET_OK
  7538 00001C5E E93AFB                  	jmp	SYS_RET_OK
  7539                                  
  7540                                  ;hkn; ASSUME DS:DOSGROUP
  7541                                  ;ASSUME	DS:DOSDATA
  7542                                  
  7543                                  setglpg:
  7544 00001C61 3C02                    	CMP	AL,2
  7545 00001C63 7534                    	JNZ	short nomem
  7546                                  ;;;;;;; CMP	BX,[SI+DOS_CCDPG.ccDosCodePage] ; same as active code page
  7547                                  ;;;;;;; JZ	short OK_RETURN		; yes
  7548                                  	;mov	dx,[si+63h]
  7549 00001C65 8B5463                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7550                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7551 00001C68 B80014                  	mov     ax, 1400h
  7552 00001C6B CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7553                                  			; Return: AL = 00h not installed, OK to install
  7554                                  			; 01h not installed, not OK
  7555                                  			; FFh installed
  7556 00001C6D 3CFF                    	CMP	AL,0FFH
  7557 00001C6F 7528                    	JNZ	short nomem		; not in memory
  7558                                  	;CallInstall SetCodePage,NLSFUNC,1  ;set the code page
  7559 00001C71 B80114                  	mov     ax, 1401h
  7560 00001C74 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7561                                  			; DS:SI -> internal code page structure
  7562                                  			; BX = new code page, DX = country code???
  7563                                  			; Return: AL = status
  7564                                  			; 00h successful
  7565                                  			; else DOS error code
  7566                                  	;cmp	al,0
  7567 00001C76 08C0                    	or	al,al			   ; success ?
  7568 00001C78 74E4                    	JZ	short OK_RETURN		   ; yes
  7569 00001C7A 3C41                    	CMP	AL,65			   ; set device code page failed
  7570 00001C7C 7518                    	JNZ	short seterr
  7571 00001C7E B84100                  	MOV	AX,65
  7572 00001C81 A3[F002]                	MOV	[EXTERR],AX
  7573                                  	;mov	byte [EXTERR_ACTION],6
  7574                                  	;mov	byte [EXTERR_CLASS],5
  7575                                  	;mov	byte [EXTERR_LOCUS],4
  7576 00001C84 C606[F202]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7577 00001C89 C606[F302]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7578 00001C8E C606[EF02]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7579                                  	;transfer From_GetSet
  7580 00001C93 E916FB                  	jmp	From_GetSet
  7581                                  
  7582                                  seterr:
  7583                                  	;transfer SYS_RET_ERR
  7584 00001C96 E90BFB                  	jmp	SYS_RET_ERR
  7585                                  
  7586                                  nomem:
  7587                                  	;error	error_invalid_function ; function not defined
  7588                                  	;mov	al,1
  7589 00001C99 B001                    	mov	al,error_invalid_function
  7590 00001C9B EBF9                    	jmp	short seterr
  7591                                  
  7592                                  ;EndProc $GetSetCdPg
  7593                                  
  7594                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7595                                  
  7596                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7597                                  ;
  7598                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7599                                  ;		drive.
  7600                                  ;
  7601                                  ;	This call returns the same info in the same registers (except for the
  7602                                  ;	FAT pointer) as the old FAT pointer calls
  7603                                  ;
  7604                                  ;	ENTRY	DL = Drive number
  7605                                  ;	EXIT	AX = Sectors per allocation unit
  7606                                  ;		   = -1 if bad drive specified
  7607                                  ;		On User Stack
  7608                                  ;		    BX = Number of free allocation units
  7609                                  ;		    DX = Total Number of allocation units on disk
  7610                                  ;		    CX = Sector size
  7611                                  
  7612                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7613                                  
  7614                                  _$GET_DRIVE_FREESPACE:
  7615                                  
  7616                                  ;hkn; SS is DOSDATA
  7617                                  	;context DS
  7618 00001C9D 16                      	push	ss
  7619 00001C9E 1F                      	pop	ds
  7620                                  
  7621 00001C9F 88D0                    	MOV	AL,DL
  7622                                  	;invoke	GetThisDrv		; Get drive
  7623 00001CA1 E81550                  	call	GETTHISDRV
  7624                                  SET_AX_RET:
  7625 00001CA4 7218                    	JC	short BADFDRV
  7626                                  	;invoke	DISK_INFO
  7627 00001CA6 E87F1C                  	call	DISK_INFO
  7628 00001CA9 87D3                    	XCHG	DX,BX
  7629 00001CAB 72F7                    	JC	short SET_AX_RET	; User FAILed to I 24
  7630 00001CAD 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7631                                  DoSt:
  7632 00001CAF E897F9                  	call	Get_User_Stack
  7633                                  ;ASSUME	DS:NOTHING
  7634                                  	;mov	[si+6],dx
  7635                                  	;mov	[si+4],cx
  7636                                  	;mov	[si+2],bx
  7637 00001CB2 895406                  	MOV	[SI+user_env.user_DX],DX
  7638 00001CB5 894C04                  	MOV	[SI+user_env.user_CX],CX
  7639 00001CB8 895C02                  	MOV	[SI+user_env.user_BX],BX
  7640                                  	;MOV	[SI+user_env.user_AX],AX
  7641 00001CBB 8904                    	mov     [si],ax
  7642                                  	;return
  7643 00001CBD C3                      	retn
  7644                                  
  7645                                  BADFDRV:
  7646                                  	; MSDOS 3.3
  7647                                  	;mov	al,0Fh
  7648 00001CBE B00F                    	mov	al,error_invalid_drive	; Assume error
  7649                                  
  7650                                  	;invoke	FCB_RET_ERR
  7651 00001CC0 E8F7FA                  	call	FCB_RET_ERR
  7652 00001CC3 B8FFFF                  	MOV	AX,-1
  7653 00001CC6 EBE7                    	JMP	short DoSt
  7654                                  
  7655                                  ;EndProc $GET_DRIVE_FREESPACE
  7656                                  
  7657                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7658                                  
  7659                                  ;**	$Get_DMA - Get Disk Transfer Address
  7660                                  ;
  7661                                  ;	ENTRY	none
  7662                                  ;	EXIT	ES:BX is current transfer address
  7663                                  ;	USES	all
  7664                                  
  7665                                  _$GET_DMA:
  7666 00001CC8 368B1E[F802]            	MOV	BX,[SS:DMAADD]
  7667 00001CCD 368B0E[FA02]            	MOV	CX,[SS:DMAADD+2]
  7668 00001CD2 E874F9                  	call	Get_User_Stack
  7669                                  	;mov	[si+2],bx
  7670                                  	;mov	[si+10h],cx
  7671 00001CD5 895C02                  	MOV	[SI+user_env.user_BX],BX
  7672 00001CD8 894C10                  	MOV	[SI+user_env.user_ES],CX
  7673 00001CDB C3                      	retn
  7674                                  
  7675                                  ;**	$Set_DMA - Set Disk Transfer Address
  7676                                  ;
  7677                                  ;	ENTRY	DS:DX is current transfer address
  7678                                  ;	EXIT	none
  7679                                  ;	USES	all
  7680                                  
  7681                                  _$SET_DMA:
  7682 00001CDC 368916[F802]            	MOV	[SS:DMAADD],DX
  7683 00001CE1 368C1E[FA02]            	MOV	[SS:DMAADD+2],DS
  7684 00001CE6 C3                      	retn
  7685                                  
  7686                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7687                                  
  7688                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7689                                  ;
  7690                                  ;	ENTRY	none
  7691                                  ;	EXIT	(AL) = drive number
  7692                                  ;	USES	all
  7693                                  
  7694                                  _$GET_DEFAULT_DRIVE:
  7695 00001CE7 36A0[0203]              	MOV	AL,[SS:CURDRV]
  7696 00001CEB C3                      	retn
  7697                                  
  7698                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7699                                  ;
  7700                                  ;	ENTRY	(DL) = Drive number for new default drive
  7701                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7702                                  
  7703                                  _$SET_DEFAULT_DRIVE:
  7704 00001CEC 88D0                    	MOV	AL,DL
  7705 00001CEE FEC0                    	INC	AL			; A=1, B=2...
  7706 00001CF0 E8AF4F                  	call	GetVisDrv		; see if visible drive
  7707 00001CF3 7204                    	JC	short SETRET		; errors do not set
  7708 00001CF5 36A2[0203]              	MOV	[SS:CURDRV],AL		; no, set
  7709                                  
  7710                                  SETRET:
  7711 00001CF9 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7712 00001CFD C3                      	retn
  7713                                  
  7714                                  
  7715                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7716                                  
  7717                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7718                                  ;
  7719                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7720                                  ;	contents of an interrupt vector.
  7721                                  ;
  7722                                  ;	ENTRY	(AL) = interrupt number
  7723                                  ;	EXIT	(ES:BX) = current interrupt vector
  7724                                  
  7725                                  _$GET_INTERRUPT_VECTOR:
  7726 00001CFE E81A00                  	CALL	RECSET
  7727 00001D01 26C41F                  	LES	BX,[ES:BX]
  7728 00001D04 E842F9                  	call	Get_User_Stack
  7729                                  	;mov	[si+2],bx
  7730                                  	;mov	[si+10h],es
  7731 00001D07 895C02                  	MOV	[SI+user_env.user_BX],BX
  7732 00001D0A 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7733 00001D0D C3                      	retn
  7734                                  
  7735                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7736                                  ;
  7737                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7738                                  ;	contents of an interrupt vector.
  7739                                  ;
  7740                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7741                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7742                                  ;	for explanation.
  7743                                  ;
  7744                                  ;	ENTRY	(AL) = interrupt number
  7745                                  ;		(ds:dx) = desired new vector value
  7746                                  ;	EXIT	none
  7747                                  ;	USES	all
  7748                                  
  7749                                  _$SET_INTERRUPT_VECTOR:
  7750 00001D0E E80A00                  	CALL	RECSET
  7751 00001D11 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7752 00001D12 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7753 00001D15 268C5F02                	MOV	[ES:BX+2],DS
  7754 00001D19 FB                      	STI
  7755                                  					; M004, M068 - Start
  7756                                  	; MSDOS 6.0
  7757                                  	;test	byte [DOS_FLAG],EXECA20OFF
  7758                                  					; Q: was the previous call an int 21
  7759                                  					;    exec call
  7760                                  	;jnz	short siv_1		; Y: go set count
  7761 00001D1A C3                      	retn				; N: return
  7762                                  
  7763                                  ;siv_1:	
  7764                                  	;cmp	byte [A20OFF_COUNT],0	; Q: is count 0
  7765                                  	;jne	short siv_2		; N: done 
  7766                                  	;mov	byte [A20OFF_COUNT],1	; Y: set it to 1 to indicate to dos 
  7767                                  					; dispatcher to turn A20 Off before 
  7768                                  					; returning to user.
  7769                                  ;siv_2:
  7770                                  	;retn				; M004, M068 - End
  7771                                  	
  7772                                  RECSET:
  7773 00001D1B 31DB                    	XOR	BX,BX
  7774 00001D1D 8EC3                    	MOV	ES,BX
  7775 00001D1F 88C3                    	MOV	BL,AL
  7776 00001D21 D1E3                    	SHL	BX,1
  7777 00001D23 D1E3                    	SHL	BX,1
  7778 00001D25 C3                      	retn
  7779                                  
  7780                                  
  7781                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7782                                  
  7783                                  ;**	$Char_Oper - Manipulate Switch Character
  7784                                  ;
  7785                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7786                                  ;
  7787                                  ;	ENTRY	AL = function:
  7788                                  ;		    0 - read switch char
  7789                                  ;		    1 - set switch char (char in DL)
  7790                                  ;		    2 - read device availability
  7791                                  ;			Always returns available
  7792                                  ;		    3 - set device availability
  7793                                  ;			No longer supported (NOP)
  7794                                  ;	EXIT	(al) = 0xff iff error
  7795                                  ;		(al) != 0xff if ok
  7796                                  ;		  (dl) = character/flag, iff "read switch char" subfunction
  7797                                  ;	USES	AL, DL
  7798                                  ;
  7799                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7800                                  ;		The character / is always returned for subfunction 0,
  7801                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7802                                  
  7803                                  _$CHAR_OPER:
  7804                                  	; MSDOS 6.0
  7805                                  	;or	al,al				; get switch?
  7806                                  	;mov	dl,'/'				; assume yes
  7807                                  	;jz	short chop_1			; jump if yes
  7808                                  	;cmp	al,2				; check device availability?
  7809                                  	;mov	dl,-1				; assume yes
  7810                                  	;jz	short chop_1				; jump if yes
  7811                                  	;retn					; otherwise just quit
  7812                                  
  7813                                  ; subfunctions requiring return of value to user come here. DL holds
  7814                                  ; value to return
  7815                                  
  7816                                  ;chop_1:
  7817                                  	;call	Get_User_Stack
  7818                                  	;mov	[SI+user_env.user_DX],dx	; store value for user
  7819                                  	;retn
  7820                                  
  7821                                  	; MSDOS 3.3
  7822                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7823 00001D26 16                      	push    ss
  7824 00001D27 1F                      	pop     ds
  7825 00001D28 3C01                    	cmp     al, 1
  7826 00001D2A 720B                    	jb      short chop_1
  7827 00001D2C 740F                    	jz      short chop_2
  7828 00001D2E 3C03                    	cmp     al, 3
  7829 00001D30 7210                    	jb      short chop_3
  7830 00001D32 7416                    	jz      short chop_5
  7831 00001D34 B0FF                    	mov     al, 0FFh
  7832 00001D36 C3                      	retn
  7833                                  chop_1:
  7834 00001D37 8A16[CD02]              	mov     dl,[chSwitch]
  7835 00001D3B EB07                    	jmp     short chop_4
  7836                                  chop_2:
  7837 00001D3D 8816[CD02]              	mov     [chSwitch], dl
  7838 00001D41 C3                      	retn
  7839                                  chop_3:
  7840 00001D42 B2FF                    	mov     dl, 0FFh
  7841                                  chop_4:
  7842 00001D44 E802F9                  	call    Get_User_Stack
  7843 00001D47 895406                  	mov     [si+6],dx
  7844                                  chop_5:
  7845 00001D4A C3                      	retn
  7846                                  
  7847                                  ;**	$GetExtendedError - Return Extended error code
  7848                                  ;
  7849                                  ;	This function reads up the extended error info from the static
  7850                                  ;	variables where it was stored.
  7851                                  ;
  7852                                  ;	ENTRY	none
  7853                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7854                                  ;		BL = recommended action
  7855                                  ;		BH = class of error
  7856                                  ;		CH = locus of error
  7857                                  ;		ES:DI = may be pointer
  7858                                  ;	USES	ALL
  7859                                  
  7860                                  _$GetExtendedError:
  7861 00001D4B 16                      	push	ss
  7862 00001D4C 1F                      	pop	ds
  7863 00001D4D A1[F002]                	MOV	AX,[EXTERR]
  7864 00001D50 C43E[F402]              	LES	DI,[EXTERRPT]
  7865 00001D54 8B1E[F202]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7866 00001D58 8A2E[EF02]              	MOV	CH,[EXTERR_LOCUS]
  7867 00001D5C E8EAF8                  	call	Get_User_Stack
  7868                                  	;mov	[si+0Ah],di
  7869 00001D5F 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7870                                  	;mov	[si+10h],es
  7871 00001D62 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7872                                  	;mov	[si+2],bx
  7873 00001D65 895C02                  	MOV	[SI+user_env.user_BX],BX
  7874                                  	;mov	[si+4],cx
  7875 00001D68 894C04                  	MOV	[SI+user_env.user_CX],CX
  7876                                  	;jmp	SYS_RET_OK
  7877                                  	; 26/07/2019
  7878 00001D6B E930FA                  	jmp	SYS_RET_OK_clc
  7879                                  
  7880                                  ;============================================================================
  7881                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7882                                  ;============================================================================
  7883                                  ; 19/07/2018 - Retro DOS v3.0
  7884                                  
  7885                                  ; System calls for parsing command lines
  7886                                  ;
  7887                                  ;   $PARSE_FILE_DESCRIPTOR
  7888                                  ;
  7889                                  ;   Modification history:
  7890                                  ;
  7891                                  ;       Created: ARR 30 March 1983
  7892                                  ;               EE PathParse 10 Sept 1983
  7893                                  ;
  7894                                  
  7895                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7896                                  ;---------------------------------------------------------------------------
  7897                                  ; Inputs:
  7898                                  ;       DS:SI Points to a command line
  7899                                  ;       ES:DI Points to an empty FCB
  7900                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7901                                  ;                   = 0 Parse stops if separator encountered
  7902                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7903                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7904                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7905                                  ;                   = 0  "       "      "       - put blanks in FCB
  7906                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7907                                  ;                   = 0  "       "      "        - put blanks in FCB
  7908                                  ; Function:
  7909                                  ;       Parse command line into FCB
  7910                                  ; Returns:
  7911                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7912                                  ;       DS:SI points to first character after filename
  7913                                  ;---------------------------------------------------------------------------
  7914                                  
  7915                                  _$PARSE_FILE_DESCRIPTOR:
  7916 00001D6E E89B3A                  	call	MAKEFCB
  7917 00001D71 56                      	PUSH    SI
  7918 00001D72 E8D4F8                  	call	Get_User_Stack
  7919                                  	;pop	word [si+8]
  7920 00001D75 8F4408                  	POP     word [SI+user_env.user_SI]
  7921 00001D78 C3                      	retn
  7922                                  
  7923                                  ;============================================================================
  7924                                  ; MISC.ASM, MSDOS 6.0, 1991
  7925                                  ;============================================================================
  7926                                  ; 19/07/2018 - Retro DOS v3.0
  7927                                  
  7928                                  ;ENTRYPOINTSEG	EQU	0CH
  7929                                  ;MAXDIF		EQU	0FFFH
  7930                                  ;SAVEXIT 	EQU	10
  7931                                  ;WRAPOFFSET	EQU	0FEF0h
  7932                                  
  7933                                  ;
  7934                                  ;----------------------------------------------------------------------------
  7935                                  ;
  7936                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7937                                  ;
  7938                                  ;	Return Stuff sort of like old get fat call
  7939                                  ;
  7940                                  ;	ENTRY	none
  7941                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7942                                  ;			GOD help anyone who tries to do ANYTHING except
  7943                                  ;			READ this ONE byte.
  7944                                  ;		DX = Total Number of allocation units on disk
  7945                                  ;		CX = Sector size
  7946                                  ;		AL = Sectors per allocation unit
  7947                                  ;		   = -1 if bad drive specified
  7948                                  ;	USES	all
  7949                                  ;
  7950                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7951                                  ;
  7952                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7953                                  ;
  7954                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7955                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7956                                  ;			GOD help anyone who tries to do ANYTHING except
  7957                                  ;			READ this ONE byte.
  7958                                  ;		DX = Total Number of allocation units on disk
  7959                                  ;		CX = Sector size
  7960                                  ;		AL = Sectors per allocation unit
  7961                                  ;		   = -1 if bad drive specified
  7962                                  ;	USES	all
  7963                                  ;
  7964                                  ;----------------------------------------------------------------------------
  7965                                  ;
  7966                                  
  7967                                  _$SLEAZEFUNC:
  7968 00001D79 B200                    	MOV	DL,0
  7969                                  
  7970                                  _$SLEAZEFUNCDL:
  7971 00001D7B 16                      	push	ss
  7972 00001D7C 1F                      	pop	ds
  7973                                  	
  7974 00001D7D 88D0                    	MOV	AL,DL
  7975 00001D7F E8374F                  	call	GETTHISDRV		; Get CDS structure
  7976                                  SET_AL_RET:
  7977                                  	; MSDOS 3.3
  7978                                  	;mov	al,0Fh
  7979 00001D82 B00F                    	MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7980                                  
  7981 00001D84 721E                    	JC	short BADSLDRIVE
  7982                                  
  7983 00001D86 E89F1B                  	call	DISK_INFO
  7984 00001D89 72F7                    	JC	short SET_AL_RET	; User FAILed to I 24
  7985 00001D8B 8826[5405]              	MOV	[FATBYTE],AH
  7986                                  
  7987                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7988                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7989                                  ; CALL AGAIN
  7990                                  
  7991 00001D8F BF[5405]                	MOV	DI,FATBYTE
  7992 00001D92 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7993 00001D94 E8B2F8                  	call	Get_User_Stack
  7994                                  	;mov	[si+4],cx
  7995                                  	;mov	[si+6],bx
  7996                                  	;mov	[si+2],di
  7997 00001D97 894C04                  	MOV	[SI+user_env.user_CX],CX
  7998 00001D9A 895C06                  	MOV	[SI+user_env.user_DX],BX
  7999 00001D9D 897C02                  	MOV	[SI+user_env.user_BX],DI
  8000                                  	
  8001                                  	;mov	[si+0Eh],cs
  8002                                  	;mov	[SI+user_env.user_DS],SS
  8003 00001DA0 8C4C0E                  	MOV     [SI+user_env.user_DS],CS ; stash correct pointer
  8004                                  
  8005 00001DA3 C3                      	retn
  8006                                  
  8007                                  BADSLDRIVE:
  8008 00001DA4 E913FA                  	jmp	FCB_RET_ERR
  8009                                  
  8010                                  ;
  8011                                  ;----------------------------------------------------------------------------
  8012                                  ;
  8013                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8014                                  ;
  8015                                  ;	Returns location of DOS status for interrupt routines
  8016                                  ;									   ;
  8017                                  ;	ENTRY	none
  8018                                  ;	EXIT	(es:bx) = flag location
  8019                                  ;	USES	all
  8020                                  ;
  8021                                  ;----------------------------------------------------------------------------
  8022                                  ;
  8023                                  
  8024                                  _$GET_INDOS_FLAG:
  8025 00001DA7 E89FF8                          CALL	Get_User_Stack
  8026                                          ;MOV	WORD [SI+2],INDOS
  8027 00001DAA C74402[ED02]            	MOV     word [SI+user_env.user_BX],INDOS
  8028                                          ;MOV	[SI+10H],SS
  8029 00001DAF 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8030 00001DB2 C3                      	RETN 
  8031                                  
  8032                                  ;
  8033                                  ;----------------------------------------------------------------------------
  8034                                  ;
  8035                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8036                                  ;
  8037                                  ;	Return a pointer to interesting DOS variables This call is version
  8038                                  ;	dependent and is subject to change without notice in future versions.
  8039                                  ;	Use at risk.
  8040                                  ;
  8041                                  ;	ENTRY	none
  8042                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8043                                  ;	uses	ALL
  8044                                  ;
  8045                                  ;----------------------------------------------------------------------------
  8046                                  ;
  8047                                  
  8048                                  _$GET_IN_VARS:
  8049 00001DB3 E893F8                          CALL	Get_User_Stack
  8050                                          ;MOV	WORD [SI+2],SYSINITVAR
  8051                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8052 00001DB6 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8053                                          ;MOV	[SI+10H],SS
  8054 00001DBB 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8055 00001DBE C3                      	RETN
  8056                                  
  8057                                  ;
  8058                                  ;----------------------------------------------------------------------------
  8059                                  ;
  8060                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8061                                  ;
  8062                                  ;	Return pointer to drive parameter table for default drive
  8063                                  ;
  8064                                  ;	ENTRY	none
  8065                                  ;	EXIT	(ds:bx) = DPB address
  8066                                  ;	USES	all
  8067                                  ;
  8068                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8069                                  ;
  8070                                  ;	Return pointer to a specified drive parameter table
  8071                                  ;
  8072                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8073                                  ;	EXIT	(al) = 0 iff ok
  8074                                  ;		  (ds:bx) = DPB address
  8075                                  ;		(al) = -1 if bad drive
  8076                                  ;	USES	all
  8077                                  ;
  8078                                  ;----------------------------------------------------------------------------
  8079                                  ;
  8080                                  
  8081                                  _$GET_DEFAULT_DPB:
  8082 00001DBF B200                    	MOV	DL,0
  8083                                  _$GET_DPB:
  8084 00001DC1 16                      	push	ss
  8085 00001DC2 1F                      	pop	ds
  8086                                  
  8087 00001DC3 88D0                    	MOV	AL,DL
  8088 00001DC5 E8F14E                  	call	GETTHISDRV		; Get CDS structure
  8089 00001DC8 7223                    	JC	short ISNODRV 		; no valid drive
  8090 00001DCA C43E[5E05]              	LES	DI,[THISCDS]		; check for net CDS
  8091                                  	;test	word [es:di+43h],8000h
  8092 00001DCE 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
  8093 00001DD4 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8094 00001DD6 E83603                  	call	EcritDisk
  8095 00001DD9 E8F740                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8096 00001DDC E83803                  	call	LcritDisk
  8097 00001DDF 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8098                                  					;   have.
  8099 00001DE1 E865F8                  	call	Get_User_Stack
  8100                                  	;mov	[si+2],bp
  8101                                  	;mov	[si+0Eh],es
  8102 00001DE4 896C02                  	MOV	[SI+user_env.user_BX],BP
  8103 00001DE7 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8104 00001DEA 30C0                    	XOR	AL,AL
  8105 00001DEC C3                      	retn
  8106                                  ISNODRV:
  8107 00001DED B0FF                    	MOV	AL,-1
  8108 00001DEF C3                      	retn
  8109                                  
  8110                                  ;
  8111                                  ;----------------------------------------------------------------------------
  8112                                  ;
  8113                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8114                                  ;
  8115                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8116                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8117                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8118                                  ;
  8119                                  ;	ENTRY	none
  8120                                  ;	EXIT	none
  8121                                  ;	USES	all
  8122                                  ;
  8123                                  ;----------------------------------------------------------------------------
  8124                                  ;
  8125                                  
  8126                                  _$DISK_RESET:
  8127 00001DF0 16                      	push	ss
  8128 00001DF1 1F                      	pop	ds
  8129 00001DF2 B0FF                    	MOV	AL,-1
  8130 00001DF4 E81803                  	call	EcritDisk
  8131                                  	; MSDOS 6.0
  8132                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8133 00001DF7 E87644                  	call	FLUSHBUF
  8134                                  	; MSDOS 6.0
  8135                                  	;AND	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8136                                  	;mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8137                                  ;
  8138                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8139                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8140                                  ; let's do it.
  8141                                  ;
  8142                                  ; Invalidate 'last-buffer' used
  8143                                  ;
  8144 00001DFA BBFFFF                  	MOV	BX,-1
  8145 00001DFD 891E[2000]              	MOV	[LastBuffer+2],BX
  8146 00001E01 891E[1E00]              	MOV	[LastBuffer],BX
  8147                                  
  8148                                  	; MSDOS 3.3 
  8149                                  	; IBMDOS.COM, Offset 1C66h
  8150                                  	;;;;
  8151 00001E05 C536[3800]              	lds     si,[BUFFHEAD]
  8152 00001E09 B8FF20                  	mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8153                                  				; .buf_flags, AH = 0, reset/clear
  8154                                  DRST_1:
  8155                                  	; 25/07/2019 - Retro DOS v3.2
  8156                                  	;;mov	[si+4],ax
  8157                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8158                                  	;lds	si,[SI]
  8159                                  	;cmp	si,bx ; -1
  8160                                  	;je	short DRST_2
  8161                                  
  8162                                  	;mov	[si+4],ax
  8163 00001E0C 894404                  	mov	[si+BUFFINFO.buf_ID],ax
  8164 00001E0F C534                    	lds	si,[SI]
  8165 00001E11 39DE                    	cmp	si,bx
  8166 00001E13 75F7                    	jne	short DRST_1
  8167                                  	;;;;
  8168                                  DRST_2:
  8169 00001E15 E8FF02                  	call	LcritDisk
  8170                                  
  8171                                  	; 20/05/2019
  8172                                  	;MOV	AX,-1
  8173                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8174                                  	;mov	ax,0FFFFh
  8175                                  
  8176 00001E18 B82011                  	mov     ax,1120h
  8177 00001E1B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8178                                  			; DS = DOS CS
  8179                                  			; Return: CF clear (successful)
  8180 00001E1D C3                      	retn
  8181                                  
  8182                                  	; 19/07/2018 - Retro DOS v3.0
  8183                                  
  8184                                  ;
  8185                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8186                                  ;
  8187                                  ;----------------------------------------------------------------------------
  8188                                  ;
  8189                                  ;**	$SetDPB - Create a DPB
  8190                                  ;
  8191                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8192                                  ;
  8193                                  ;	ENTRY	ES:BP Points to DPB
  8194                                  ;		DS:SI Points to BPB
  8195                                  ;	EXIT	DPB setup
  8196                                  ;	USES	ALL but BP, DS, ES
  8197                                  ;
  8198                                  ;----------------------------------------------------------------------------
  8199                                  ;
  8200                                  
  8201                                  ; 10/05/2019 - Retro DOS v4.0
  8202                                  
  8203                                  ; MSDOS 6.0
  8204 00001E1E 0300                    word3:	dw	3			; M008 -- word value for divides
  8205                                  
  8206                                  ;procedure   $SETDPB,NEAR
  8207                                  
  8208                                  _$SETDPB:
  8209                                  	; 25/07/2019 - Retro DOS v3.2
  8210 00001E20 89EF                    	MOV	DI,BP
  8211 00001E22 83C702                  	ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8212 00001E25 AD                      	LODSW
  8213 00001E26 AB                      	STOSW				; dpb_sector_size
  8214                                  	; MSDOS 6.0
  8215 00001E27 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8216 00001E2B 7507                    	JNZ	short yesfat			     ; yes		;AN000;
  8217 00001E2D 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8218 00001E32 EB76                    	JMP	short setend			     ; NO		;AN000;
  8219                                  yesfat: ; 10/08/2018
  8220 00001E34 89C2                    	MOV	DX,AX
  8221 00001E36 AC                      	LODSB
  8222 00001E37 FEC8                    	DEC	AL
  8223 00001E39 AA                      	STOSB				; dpb_cluster_mask
  8224 00001E3A FEC0                    	INC	AL
  8225 00001E3C 30E4                    	XOR	AH,AH
  8226                                  LOG2LOOP:
  8227 00001E3E A801                    	test	AL,1
  8228 00001E40 7506                    	JNZ	short SAVLOG
  8229 00001E42 FEC4                    	INC	AH
  8230 00001E44 D0E8                    	SHR	AL,1
  8231 00001E46 EBF6                    	JMP	SHORT LOG2LOOP
  8232                                  SAVLOG:
  8233 00001E48 88E0                    	MOV	AL,AH
  8234 00001E4A AA                      	STOSB				; dpb_cluster_shift
  8235 00001E4B 88C3                    	MOV	BL,AL
  8236 00001E4D A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8237 00001E4E AC                      	LODSB
  8238 00001E4F AA                      	STOSB				; dpb_FAT_count Number of FATs
  8239                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8240                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8241 00001E50 88C7                    	MOV	BH,AL
  8242 00001E52 AD                      	LODSW
  8243 00001E53 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8244 00001E54 B105                    	MOV	CL,5
  8245 00001E56 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8246 00001E58 48                      	DEC	AX
  8247 00001E59 01D0                    	ADD	AX,DX			; Cause Round Up
  8248 00001E5B 89D1                    	MOV	CX,DX
  8249 00001E5D 31D2                    	XOR	DX,DX
  8250 00001E5F F7F1                    	DIV	CX
  8251 00001E61 89C1                    	MOV	CX,AX			; Number of directory sectors
  8252 00001E63 47                      	INC	DI
  8253 00001E64 47                      	INC	DI			; Skip dpb_first_sector
  8254 00001E65 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8255 00001E66 AC                      	LODSB
  8256                                  	;mov	[es:bp+16h],al
  8257                                  	;mov	[es:bp+17h],al ; MSDOS 6.0
  8258 00001E67 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8259 00001E6B AD                      	LODSW				; Number of sectors in a FAT
  8260                                  
  8261                                  	; 25/07/2019
  8262                                  	;;;
  8263                                  	; MSDOS 3.3
  8264                                  	;STOSB		; DPB.FAT_SIZE
  8265                                  	;MUL	BH
  8266                                  	; MSDOS 6.0
  8267 00001E6C AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8268 00001E6D 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8269 00001E6F 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8270 00001E71 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8271                                  	;;;
  8272                                  	;add	ax,[es:bp+6]
  8273 00001E73 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8274 00001E77 AB                      	STOSW				; dpb_dir_sector
  8275 00001E78 01C8                    	ADD	AX,CX			; Add number of directory sectors
  8276                                  	;mov	[es:bp+0Bh],ax
  8277 00001E7A 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8278                                  	
  8279                                  	; MSDOS 6.0
  8280 00001E7E 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8281                                  	;cmp	word [es:bp+0Dh],0
  8282                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8283                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8284                                  	; 28/07/2019
  8285 00001E80 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8286 00001E84 09DB                    	or	bx,bx
  8287 00001E86 751C                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8288                                  	
  8289 00001E88 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8290                                  	;mov	bx,[si+8]
  8291 00001E8A 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8292                                  	;mov	dx,[si+10]
  8293 00001E8D 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8294 00001E90 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8295 00001E92 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8296 00001E95 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8297 00001E97 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8298                                  rott:					;AN000;;F.C. >32mb
  8299 00001E99 F8                      	CLC				;AN000;;F.C. >32mb
  8300 00001E9A D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8301 00001E9C D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8302 00001E9E E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8303                                  norot:					;AN000;
  8304 00001EA0 89D8                    	MOV	AX,BX			;AN000;;F.C. >32mb
  8305 00001EA2 EB06                    	JMP	short setend		;AN000;;F.C. >32mb
  8306                                  normal_dpb:
  8307                                  	;sub	ax,[es:bp+0Dh]
  8308                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8309 00001EA4 29D8                    	sub	ax,bx ; 28/07/2019
  8310 00001EA6 F7D8                    	NEG	AX			; Sectors in data area
  8311                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8312 00001EA8 D3E8                    	SHR	AX,CL			; Div by sectors/cluster
  8313                                  setend:
  8314                                  
  8315                                  ;	M008 - CAS
  8316                                  ;
  8317 00001EAA 40                      	INC	AX			; +2 (reserved), -1 (count -> max)
  8318                                  ;
  8319                                  ;	There has been a bug in our fatsize calculation for so long
  8320                                  ;	  that we can't correct it now without causing some user to
  8321                                  ;	  experience data loss. There are even cases where allowing
  8322                                  ;	  the number of clusters to exceed the fats is the optimal
  8323                                  ;	  case -- where adding 2 more fat sectors would make the
  8324                                  ;	  data field smaller so that there's nothing to use the extra
  8325                                  ;	  fat sectors for.
  8326                                  ;
  8327                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8328                                  ;	  still report that there was a cluster left when the disk was
  8329                                  ;	  actually full. Very graceful failure for a corrupt system
  8330                                  ;	  configuration. There may be worse cases that were never
  8331                                  ;	  properly traced back to this bug. The problem cases only
  8332                                  ;	  occurred when partition sizes were very near FAT sector
  8333                                  ;	  rounding boundaries, which were rare cases.
  8334                                  ;
  8335                                  ;	Also, it's possible that some third-party partition program might
  8336                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8337                                  ;	  scheme. In this hypothetical case, the number of allocation
  8338                                  ;	  clusters which don't actually have FAT entries to represent
  8339                                  ;	  them might be larger and might create a more catastrophic
  8340                                  ;	  failure. So we'll provide the safeguard of limiting the
  8341                                  ;	  max_cluster to the amount that will fit in the FATs.
  8342                                  ;
  8343                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8344                                  
  8345                                  ;	make sure the number of fat sectors is actually enough to
  8346                                  ;	  hold that many clusters. otherwise, back the number of
  8347                                  ;	  clusters down
  8348                                  
  8349                                  	; 19/07/2018 - Retro DOS v3.0
  8350                                  	; 25/07/2019 - Retro DOS v3.2
  8351                                  	; MSDOS 6.0
  8352 00001EAB 89C3                    	mov	bx,ax			; remember calculated # clusters
  8353                                  
  8354                                  	; 01/08/2018 (MSDOS 3.3)
  8355                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8356                                  	;xor	ah,ah 
  8357                                  
  8358                                  	; 10/05/2019 - Retro DOS v4.0
  8359                                  	;mov	ax,[ES:BP+0Fh]
  8360 00001EAD 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8361                                  
  8362                                  	;mul	word [es:bp+2]	
  8363 00001EB1 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8364 00001EB5 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8365 00001EB9 720D                    	jb	short setend_fat12
  8366 00001EBB D1EA                    	shr	dx,1
  8367                                  ;cs3 7/2/92
  8368 00001EBD 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8369                                  ;					; than enough for the maximum FAT,
  8370                                  ;					; so go ahead and use the calculated
  8371                                  ;					; number of clusters.
  8372                                  ;cs3 7/2/92
  8373                                  
  8374 00001EBF D1D8                    	rcr	ax,1			; find number of entries
  8375 00001EC1 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8376                                  ;					;  into 12-bit fatland?
  8377 00001EC4 7215                    	jb	short setend_faterr	; then go ahead and let the
  8378                                  ;					;  inconsistency pass through
  8379                                  ;					;  rather than lose data by
  8380                                  ;					;  correcting the fat type
  8381 00001EC6 EB0E                    	jmp	short setend_fat16
  8382                                  
  8383                                  setend_fat12:
  8384 00001EC8 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8385 00001ECA 11D2                    	adc	dx,dx
  8386                                  ;cs3 7/2/92
  8387 00001ECC 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8388 00001ECF 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8389                                  ;					; here. Check for it and use
  8390                                  ;					; the calculated size in this case.
  8391                                  ;cs3 7/2/92
  8392 00001ED1 2EF736[1E1E]            	div	word [cs:word3]
  8393                                  
  8394                                  setend_fat16:
  8395 00001ED6 48                      	dec	ax			; limit at 1
  8396 00001ED7 39D8                    	cmp	ax,bx			; is fat big enough?
  8397 00001ED9 7602                    	jbe	short setend_fat	; use max value that'll fit
  8398                                  
  8399                                  setend_faterr:
  8400 00001EDB 89D8                    	mov	ax,bx			; use calculated value
  8401                                  
  8402                                  setend_fat:
  8403                                  
  8404                                  ;	now ax = maximum legal cluster
  8405                                  
  8406                                  ;	end M008
  8407                                  
  8408                                  	;mov	[es:bp+0Dh], ax
  8409 00001EDD 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8410                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8411                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8412 00001EE1 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8413                                  					; Init so first ALLOC starts at
  8414                                  					; begining of FAT
  8415                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8416                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8417 00001EE7 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8418                                  
  8419 00001EED C3                      	retn
  8420                                  
  8421                                  ;EndProc $SETDPB
  8422                                  
  8423                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8424                                  
  8425                                  ;
  8426                                  ;----------------------------------------------------------------------------
  8427                                  ;
  8428                                  ;**	$Dup_PDB
  8429                                  ;
  8430                                  ; Inputs:   DX is new segment address of process
  8431                                  ;	    SI is end of new allocation block
  8432                                  ;
  8433                                  ;----------------------------------------------------------------------------
  8434                                  ;
  8435                                  
  8436                                  _$DUP_PDB:
  8437                                  
  8438                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8439                                  ;hkn;	Must set up ds in order to access CreatePDB. Also SS is 
  8440                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8441                                  
  8442 00001EEE 2EC606[7203]FF          	MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8443 00001EF4 2E8E1E[FC02]            	MOV	DS,[CS:CurrentPDB]
  8444 00001EF9 56                      	PUSH	SI
  8445 00001EFA EB0A                    	JMP	SHORT CreateCopy
  8446                                  
  8447                                  ;
  8448                                  ;----------------------------------------------------------------------------
  8449                                  ;
  8450                                  ; Inputs:
  8451                                  ;	DX = Segment number of new base
  8452                                  ; Function:
  8453                                  ;	Set up program base and copy term and ^C from int area
  8454                                  ; Returns:
  8455                                  ;	None
  8456                                  ; Called at DOS init
  8457                                  ;
  8458                                  ;----------------------------------------------------------------------------
  8459                                  ;
  8460                                  
  8461                                  _$CREATE_PROCESS_DATA_BLOCK:
  8462                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8463 00001EFC E84AF7                  	CALL	Get_User_Stack
  8464                                  	;mov	ds,[si+14h]
  8465 00001EFF 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8466                                  	;push	word [2]
  8467 00001F02 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8468                                  CreateCopy:
  8469 00001F06 8EC2                    	MOV	ES,DX
  8470                                  
  8471 00001F08 31F6                    	XOR	SI,SI			; copy entire PDB
  8472 00001F0A 89F7                    	MOV	DI,SI
  8473 00001F0C B98000                  	MOV	CX,128
  8474 00001F0F F3A5                    	REP	MOVSW
  8475                                  
  8476                                  ; DOS 3.3 7/9/86
  8477                                  
  8478                                  	;mov	cx,20
  8479                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8480 00001F11 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8481                                  	;mov	di,18h
  8482 00001F13 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8483                                  
  8484                                  	; 28/07/2019
  8485                                  	;PUSH	DS
  8486                                  	;lds	si,[34h]
  8487 00001F16 C5363400                	LDS	SI,[PDB.JFN_Pointer]
  8488 00001F1A F3A4                    	REP	MOVSB
  8489                                  	;POP	DS
  8490                                  
  8491 00001F1C 0E                      	push	cs
  8492 00001F1D 1F                      	pop	ds
  8493                                  
  8494                                  ; DOS 3.3 7/9/86
  8495                                  
  8496                                  	;test	byte [cs:CreatePDB],0FFh
  8497                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8498 00001F1E 803E[7203]00            	cmp	byte [CreatePDB],0
  8499 00001F23 7446                    	JZ	short Create_PDB_cont 	; nope, old style call
  8500                                  ;
  8501                                  ; Here we set up for a new process...
  8502                                  ;
  8503                                  	;PUSH    CS			; Called at DOSINIT time, NO SS
  8504                                  	;POP     DS
  8505                                  
  8506 00001F25 31DB                    	XOR	BX,BX			; dup all jfns
  8507                                  	;mov	cx,20
  8508                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8509 00001F27 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8510                                  
  8511                                  Create_dup_jfn:
  8512 00001F29 06                      	PUSH	ES ;**			; save new PDB
  8513 00001F2A E8184C                  	call	SFFromHandle		; get sf pointer
  8514 00001F2D B0FF                    	MOV	AL,-1			; unassigned JFN
  8515 00001F2F 7225                    	JC	short CreateStash	; file was not really open
  8516                                  	;test	word [es:di+5],1000h
  8517 00001F31 26F745050010            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8518 00001F37 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8519                                  ;
  8520                                  ; We do not inherit network file handles.
  8521                                  ;
  8522                                  	;mov	ah,[es:di+2]
  8523 00001F39 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8524                                  	;and	ah,0F0h
  8525 00001F3D 80E4F0                  	AND	AH,SHARING_MASK
  8526                                  	;cmp	ah,70h
  8527 00001F40 80FC70                  	CMP	AH,SHARING_NET_FCB
  8528 00001F43 7411                    	jz	short CreateStash
  8529                                  ;
  8530                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8531                                  ; duplication operation.
  8532                                  ;
  8533 00001F45 893E[5A05]              	MOV	[THISSFT],DI
  8534 00001F49 8C06[5C05]              	MOV	[THISSFT+2],ES
  8535 00001F4D E8FC17                  	call	DOS_DUP 		; signal duplication
  8536                                  ;
  8537                                  ; get the old sfn for copy
  8538                                  ;
  8539 00001F50 E8DA4B                  	call	pJFNFromHandle		; ES:DI is jfn
  8540 00001F53 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8541                                  ;
  8542                                  ; Take AL (old sfn or -1) and stash it into the new position
  8543                                  ;
  8544                                  CreateStash:
  8545 00001F56 07                      	POP	ES ;**
  8546                                  	;mov	[es:bx+18h],al
  8547 00001F57 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8548 00001F5B 43                      	INC	BX			; next jfn...
  8549 00001F5C E2CB                    	LOOP	Create_dup_jfn
  8550                                  
  8551 00001F5E 8B1E[FC02]              	MOV	BX,[CurrentPDB]		; get current process
  8552                                  	;mov	[es:bx+16h]
  8553 00001F62 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8554 00001F67 8C06[FC02]              	MOV	[CurrentPDB],ES
  8555                                  	;MOV	DS,BX ; 28/07/2019
  8556                                  ;
  8557                                  ; end of new process create
  8558                                  ;
  8559                                  Create_PDB_cont:
  8560                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8561                                  	; 28/07/2019
  8562 00001F6B C606[7203]00            	MOV	byte [CreatePDB],0	; reset flag
  8563 00001F70 58                      	POP	AX  ;*
  8564                                  
  8565                                  	;entry	SETMEM
  8566                                  
  8567                                  ;---------------------------------------------------------------------------
  8568                                  ; Inputs:
  8569                                  ;	AX = Size of memory in paragraphs
  8570                                  ;	DX = Segment
  8571                                  ; Function:
  8572                                  ;	Completely prepares a program base at the
  8573                                  ;	specified segment.
  8574                                  ; Called at DOS init
  8575                                  ; Outputs:
  8576                                  ;	DS = DX
  8577                                  ;	ES = DX
  8578                                  ;	[0] has INT int_abort
  8579                                  ;	[2] = First unavailable segment
  8580                                  ;	[5] to [9] form a long call to the entry point
  8581                                  ;	[10] to [13] have exit address (from int_terminate)
  8582                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8583                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8584                                  ; DX,BP unchanged. All other registers destroyed.
  8585                                  ;---------------------------------------------------------------------------
  8586                                  
  8587                                  SETMEM:
  8588 00001F71 31C9                    	XOR	CX,CX
  8589 00001F73 8ED9                    	MOV	DS,CX
  8590 00001F75 8EC2                    	MOV	ES,DX
  8591                                  	;mov	si,88h
  8592 00001F77 BE8800                  	MOV	SI,addr_int_terminate
  8593                                  	;mov	di,10
  8594 00001F7A BF0A00                  	MOV	DI,SAVEXIT
  8595                                  	;MOV	CX,6
  8596 00001F7D B106                    	mov	cl,6 ; 06/07/2019
  8597 00001F7F F3A5                    	REP	MOVSW
  8598 00001F81 26A30200                	MOV	[ES:2],AX
  8599 00001F85 29D0                    	SUB	AX,DX
  8600 00001F87 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8601 00001F8A 7603                    	JBE	short HAVDIF
  8602 00001F8C B8FF0F                  	MOV	AX,MAXDIF
  8603                                  HAVDIF:
  8604 00001F8F 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8605 00001F92 BB0C00                  	MOV	BX,ENTRYPOINTSEG	;	in .COM files
  8606 00001F95 29C3                    	SUB	BX,AX
  8607 00001F97 B104                    	MOV	CL,4
  8608 00001F99 D3E0                    	SHL	AX,CL
  8609 00001F9B 8EDA                    	MOV	DS,DX
  8610                                  
  8611                                  	; (MSDOS 6.0 note)
  8612                                  	;
  8613                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8614                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8615                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8616                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8617                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8618                                  	; making this equvalence valid for this particular case. If however
  8619                                  	; there is less than 64K remaining the address in BX:AX will not 
  8620                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8621                                  	; into the PSP.
  8622                                  	;
  8623                                  	; Therefore for the case where there is less than 64K remaining in 
  8624                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8625                                  	; requirements will not work. Call 5, however will continue to work
  8626                                  	; for all cases.
  8627                                  	;
  8628                                  
  8629                                  	;mov	[6],ax
  8630                                  	;mov	[8],bx
  8631                                  
  8632 00001F9D A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8633 00001FA0 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8634                                  
  8635                                  	;cmp	ax,WRAPOFFSET		; Q: does the system have >= 64k of
  8636                                  	;				;    memory left
  8637                                  	;je	short addr_ok		; Y: the above calculated address is
  8638                                  	;				;    OK
  8639                                  	;				; N: 
  8640                                  
  8641                                  	;MOV	WORD [PDB.CPM_CALL+1],0C0h
  8642                                  	;MOV	WORD [PDB.CPM_CALL+3],0
  8643                                  
  8644                                  ;addr_ok:
  8645                                  	;mov	word [0],20CDh
  8646 00001FA4 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8647                                  	;mov	byte [5],9Ah
  8648 00001FAA C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8649                                  	;mov	word [50h],21CDh
  8650 00001FAF C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8651                                  	;mov	byte [52h],0CBh
  8652 00001FB5 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8653                                  	;mov	word [34h],18h
  8654 00001FBA C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8655                                  	;mov	word [36h],ds
  8656 00001FC0 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8657                                  	;mov	word [32h],20
  8658 00001FC4 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8659                                  ;
  8660                                  ; The server runs several PDB's without creating them VIA EXEC. We need to
  8661                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8662                                  ; particular SFT. We perform this by requiring that the server link together
  8663                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8664                                  ; initialize this pointer.
  8665                                  ;
  8666                                   	;mov	word [38h],-1
  8667 00001FCA C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8668                                  	;mov	word [3Ah],-1
  8669 00001FD0 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8670                                  			; Set the real version number in the PSP - 5.00
  8671                                  	;mov	[ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8672                                  
  8673 00001FD6 C3                      	retn
  8674                                  
  8675                                  ; 23/07/2019 - Retro DOS v3.2
  8676                                  
  8677                                  ;============================================================================
  8678                                  ; IBMDOS.COM (MSDOS 3.3 KERNEL), 1987 - Offset 1DE6h
  8679                                  ;============================================================================
  8680                                  ; 19/07/2018 - Retro DOS v3.0
  8681                                  
  8682                                  ;FETCHI_CHECK:
  8683                                  ;	pushf
  8684                                  ;	cmp	word [cs:FETCHI_TAG],5872h
  8685                                  ;	jz      short FETCHI_CHK_RETN
  8686                                  ;	call    DOSINIT
  8687                                  ;FETCHI_CHK_RETN:
  8688                                  ;	popf
  8689                                  ;	retn
  8690                                  
  8691                                  ;============================================================================
  8692                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8693                                  ;============================================================================
  8694                                  ; 20/07/2018 - Retro DOS v3.0
  8695                                  
  8696                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8697                                  ;----------------------------------------------------------------------------
  8698                                  ;
  8699                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8700                                  ;		Strings of different lengths don't match.
  8701                                  ;   Inputs:	DS:SI - pointer to source string  ES:DI - pointer to dest string
  8702                                  ;   Outputs:	Z if strings same, NZ if different
  8703                                  ;   Registers modified: NONE
  8704                                  ;----------------------------------------------------------------------------
  8705                                  
  8706                                  StrCmp:
  8707 00001FD7 56                      	push	si
  8708 00001FD8 57                      	push	di
  8709 00001FD9 50                      	push	ax
  8710                                  
  8711                                  Cmplp:
  8712 00001FDA AC                      	LODSB
  8713 00001FDB E81339                  	call	UCase			; convert to upper case
  8714 00001FDE E84C39                  	call	PATHCHRCMP		; convert / to 	MOV	AH,AL
  8716 00001FE1 268A05                  	MOV	AL,[ES:DI]
  8717 00001FE4 47                      	INC	DI
  8718 00001FE5 E80939                  	call	UCase			; convert to upper case
  8719 00001FE8 E84239                  	call	PATHCHRCMP		; convert / to 	CMP	AH,AL
  8721 00001FEB 7504                    	JNZ	short PopRet		; Strings dif
  8722                                  Tend:
  8723 00001FED 08C0                    	OR	AL,AL
  8724 00001FEF 75E9                    	JNZ	short Cmplp		; More string
  8725                                  PopRet:
  8726 00001FF1 58                      	pop	ax
  8727 00001FF2 5F                      	pop	di
  8728 00001FF3 5E                      	pop	si
  8729 00001FF4 C3                      	retn
  8730                                  
  8731                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8732                                  ;----------------------------------------------------------------------------
  8733                                  ;
  8734                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8735                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI.  no modification of
  8736                                  ;	characters.
  8737                                  ;
  8738                                  ;   Inputs:	DS:SI - pointer to source string
  8739                                  ;		ES:DI - pointer to destination string
  8740                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8741                                  ;		DS:SI point byte after nul byte at end of source string
  8742                                  ;   Registers modified: SI,DI
  8743                                  ;----------------------------------------------------------------------------
  8744                                  
  8745                                  StrCpy:
  8746 00001FF5 50                      	push	ax
  8747                                  CPYLoop:
  8748 00001FF6 AC                      	LODSB
  8749 00001FF7 E8F738                  	call	UCase			; convert to upper case
  8750 00001FFA E83039                  	call	PATHCHRCMP		; convert / to \ ;
  8751 00001FFD AA                      	STOSB
  8752                                  Tend2:
  8753 00001FFE 08C0                    	OR	AL,AL
  8754 00002000 75F4                    	JNZ	short CPYLoop
  8755 00002002 58                      	pop	ax
  8756 00002003 C3                      	retn
  8757                                  
  8758                                  ;----------------------------------------------------------------------------
  8759                                  ; Procedure Name : FStrCpy
  8760                                  ;----------------------------------------------------------------------------
  8761                                  
  8762                                  FStrCpy:
  8763 00002004 50                      	push	ax
  8764                                  FCPYLoop:
  8765 00002005 AC                      	LODSB
  8766 00002006 AA                      	STOSB
  8767 00002007 08C0                    	OR	AL,AL
  8768 00002009 75FA                    	JNZ	short FCPYLoop
  8769 0000200B 58                      	pop	ax
  8770 0000200C C3                      	retn
  8771                                  
  8772                                  ; 20/07/2018 - Retro DOS v3.0
  8773                                  ;----------------------------------------------------------------------------
  8774                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8775                                  ;----------------------------------------------------------------------------
  8776                                  ;
  8777                                  ;UCase:	
  8778                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8779                                  ;	retn
  8780                                  
  8781                                  ;Break <StrLen - compute length of string ES:DI>
  8782                                  ;----------------------------------------------------------------------------
  8783                                  ;**	StrLen - Compute Length of String
  8784                                  ;
  8785                                  ;	StrLen computes the length of a string, including the trailing 00
  8786                                  ;
  8787                                  ;	ENTRY	(es:di) = address of string
  8788                                  ;	EXIT	(cx) = size of string
  8789                                  ;	USES	cx, flags
  8790                                  ;----------------------------------------------------------------------------
  8791                                  
  8792                                  StrLen:
  8793 0000200D 57                      	push	di
  8794 0000200E 50                      	push	ax
  8795                                  	;MOV	CX,-1
  8796 0000200F B9FFFF                  	mov	cx,65535
  8797 00002012 30C0                    	XOR	AL,AL
  8798 00002014 F2AE                    	REPNE	SCASB
  8799 00002016 F7D1                    	NOT	CX
  8800 00002018 58                      	pop	ax
  8801 00002019 5F                      	pop	di
  8802 0000201A C3                      	retn
  8803                                  
  8804                                  ;----------------------------------------------------------------------------
  8805                                  ;**	DStrLen - Compute Length of String
  8806                                  ;
  8807                                  ;	ENTRY	(ds:si) = address of string
  8808                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8809                                  ;	USES	cx, flags
  8810                                  ;----------------------------------------------------------------------------
  8811                                  
  8812                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8813 0000201B E80700                  	CALL	XCHGP
  8814 0000201E E8ECFF                  	CALL	StrLen
  8815 00002021 E80100                  	CALL	XCHGP
  8816 00002024 C3                      	retn
  8817                                  
  8818                                  ;----------------------------------------------------------------------------
  8819                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8820                                  ;
  8821                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8822                                  ;
  8823                                  ;	ENTRY	none
  8824                                  ;	EXIT	pairs exchanged
  8825                                  ;	USES	SI, DI, DS, ES
  8826                                  ;----------------------------------------------------------------------------
  8827                                  
  8828                                  XCHGP:
  8829 00002025 1E                      	push	ds
  8830 00002026 06                      	push	es
  8831 00002027 1F                      	pop	ds
  8832 00002028 07                      	pop	es
  8833 00002029 87F7                    	XCHG	SI,DI
  8834                                  xchgp_retn:
  8835 0000202B C3                      	retn
  8836                                  
  8837                                  ;Break	<Idle - wait for a specified amount of time>
  8838                                  ;----------------------------------------------------------------------------
  8839                                  ;
  8840                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  8841                                  ;   	   we spin until RetryLoop is exhausted.
  8842                                  ;
  8843                                  ;   Inputs:	RetryLoop is the number of times we spin
  8844                                  ;   Outputs:	Wait
  8845                                  ;   Registers modified: none
  8846                                  ;----------------------------------------------------------------------------
  8847                                  
  8848                                  Idle:
  8849                                  	;test	byte [SS:FSHARING],0FFh
  8850 0000202C 36803E[2F05]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  8851                                  	;retnz
  8852 00002032 75F7                    	jnz	short xchgp_retn
  8853                                  	;SAVE	<CX>
  8854 00002034 51                      	push	cx
  8855 00002035 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  8856 0000203A E308                    	JCXZ	Idle3
  8857                                  Idle1:	
  8858 0000203C 51                      	PUSH	CX
  8859 0000203D 31C9                    	XOR	CX,CX
  8860                                  Idle2:	
  8861 0000203F E2FE                    	LOOP	Idle2
  8862 00002041 59                      	POP	CX
  8863 00002042 E2F8                    	LOOP	Idle1
  8864                                  Idle3:	
  8865                                  	;RESTORE <CX>
  8866 00002044 59                      	pop	cx
  8867 00002045 C3                      	retn
  8868                                  
  8869                                  ;Break	<TableDispatch - dispatch to a table>
  8870                                  ;----------------------------------------------------------------------------
  8871                                  ;
  8872                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  8873                                  ;   routine.  Preserve all input registers to the routine.
  8874                                  ;
  8875                                  ;   Inputs:	Push	return address
  8876                                  ;		Push	Table address
  8877                                  ;		Push	index (byte)
  8878                                  ;   Outputs:	appropriate routine gets jumped to.
  8879                                  ;		return indicates invalid index
  8880                                  ;   Registers modified: none.
  8881                                  ;----------------------------------------------------------------------------
  8882                                  
  8883                                  struc TFrame	 ; TableFrame
  8884 00000000 ????                    .OldBP:	 resw 1  ; 0
  8885 00000002 ????                    .OldRet: resw 1  ; 2
  8886 00000004 ??                      .Index:	 resb 1  ; 4
  8887 00000005 ??                      .Pad:	 resb 1  ; 5  
  8888 00000006 ????                    .Tab:	 resw 1  ; 6
  8889 00000008 ????                    .NewRet: resw 1  ; 8
  8890                                  endstruc
  8891                                  
  8892                                  TableDispatch:
  8893 00002046 55                      	PUSH	BP
  8894 00002047 89E5                    	MOV	BP,SP
  8895 00002049 53                      	PUSH	BX			; save BX
  8896                                  	;mov	bx,[bp+6]
  8897 0000204A 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  8898 0000204D 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  8899                                  	;cmp	[bp+4],bl
  8900 00002050 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  8901 00002053 7317                    	JAE	short TableError	; yes
  8902                                  	;mov	bl,[bp+4]
  8903 00002055 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  8904 00002058 30FF                    	XOR	BH,BH			; convert to word
  8905 0000205A D1E3                    	SHL	BX,1			; convert to word pointer
  8906 0000205C 43                      	INC	BX			; point past first length byte
  8907                                  	; 17/08/2018
  8908                                  	;add	bx,[bp+6]
  8909 0000205D 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  8910 00002060 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  8911                                  	;mov	[bp+6],bx
  8912 00002063 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  8913 00002066 5B                      	POP	BX			; restore BX
  8914 00002067 5D                      	POP	BP			; restore BP
  8915 00002068 83C404                  	ADD	SP,4			; clean off Index and our return addr
  8916 0000206B C3                      	retn				; do operation
  8917                                  TableError:
  8918 0000206C 5B                      	POP	BX			; restore BX
  8919 0000206D 5D                      	POP	BP			; restore BP
  8920 0000206E C20600                  	RETN	6			; clean off Index, Table and RetAddr
  8921                                  
  8922                                  
  8923                                  ;Break	<TestNet - determine if a CDS is for the network>
  8924                                  ;----------------------------------------------------------------------------
  8925                                  ;
  8926                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  8927                                  ;	network CDS.  This will handle NULL cds also.
  8928                                  ;
  8929                                  ;   Inputs:	ThisCDS points to CDS or NULL
  8930                                  ;   Outputs:	ES:DI = ThisCDS
  8931                                  ;		carry Set => network
  8932                                  ;		carry Clear => local
  8933                                  ;   Registers modified: none.
  8934                                  ;----------------------------------------------------------------------------
  8935                                  
  8936                                  TestNet:
  8937 00002071 2EC43E[5E05]            	LES	DI,[CS:THISCDS]
  8938 00002076 83FFFF                  	CMP	DI,-1
  8939 00002079 7409                    	JZ	short CMCRet		; UNC? carry is clear
  8940                                  	;test	word [es:di+43h],8000h
  8941 0000207B 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
  8942 00002081 7501                    	JNZ	short CMCRet		; jump has carry clear
  8943 00002083 C3                      	retn				; carry is clear
  8944                                  CMCRet: 
  8945 00002084 F5                      	CMC
  8946 00002085 C3                      	retn
  8947                                  
  8948                                  ;Break	<IsSFTNet - see if an sft is for the network>
  8949                                  ;----------------------------------------------------------------------------
  8950                                  ;
  8951                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  8952                                  ;	network file.
  8953                                  ;
  8954                                  ;   Inputs:	ES:DI point to SFT
  8955                                  ;   Outputs:	Zero set if not network sft
  8956                                  ;		zero reset otherwise
  8957                                  ;		Carry CLEAR!!!
  8958                                  ;   Registers modified: none.
  8959                                  ;----------------------------------------------------------------------------
  8960                                  
  8961                                  IsSFTNet:
  8962                                  	;test	word [es:di+5],8000h
  8963 00002086 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  8964 0000208C C3                      	retn
  8965                                  
  8966                                  ;Break	<FastInit - Initialize FastTable entries >
  8967                                  ;----------------------------------------------------------------------------
  8968                                  ;   DOS 4.00   2/9/87
  8969                                  ;   FastInit  - initialize the FASTXXX routine entry
  8970                                  ;		  in the FastTable
  8971                                  ;
  8972                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  8973                                  ;		DS:SI = address of FASTXXX routine entry
  8974                                  ;		   SI = -1 for query only
  8975                                  ;   Outputs:	Carry flag clear, if success
  8976                                  ;		Carry flag set,   if failure
  8977                                  ;
  8978                                  ;
  8979                                  ;----------------------------------------------------------------------------
  8980                                  
  8981                                  ;Procedure FastInit,NEAR
  8982                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  8983                                  ;FastInit:
  8984                                  	; MSDOS 6.0
  8985                                  	;hkn; set up es to dosdataseg.
  8986                                  	;push	es
  8987                                  	;getdseg <es>			; es -> dosdata
  8988                                  
  8989                                  	;hkn; FastTable is in DOSDATA
  8990                                  	;MOV	DI,OFFSET DOSDATA:FastTable + 2 ;AN000;FO. points to fastxxx entry
  8991                                  	;DEC	BX				;AN000;FO.;; decrement index
  8992                                  	;MOV	DX,BX				;AN000;FO.;; save bx
  8993                                  	;SHL	BX,1				;AN000;FO.;; times 4 , each entry is DWORD
  8994                                  	;SHL	BX,1				;AN000;FO.
  8995                                  	;ADD	DI,BX				;AN000;FO. index to the entry
  8996                                  	;MOV	AX,WORD PTR ES:[DI+2]		;AN000;FO. get entry segment
  8997                                  ;fcheck: 					;AN000;
  8998                                  	;MOV	CX,CS				;AN000;FO.;; get DOS segment
  8999                                  	;CMP	AX,CX				;AN000;FO.;; first time installed ?
  9000                                  	;JZ	short ok_install			;AN000;FO.;; yes
  9001                                  	;OR	AX,AX				;AN000;FO.;
  9002                                  	;JZ	short ok_install		;AN000;FO.;
  9003                                  	;STC					;AN000;FO.;; already installed !
  9004                                  	;JMP	SHORT FSret			;AN000;FO. set carry
  9005                                  ;ok_install:					;AN000;
  9006                                  	;CMP	SI,-1				;AN000;FO.; Query only ?
  9007                                  	;JZ	short FSret			;AN000;FO.; yes
  9008                                  	;MOV	CX,DS				;AN000;FO.; get FASTXXX entry segment
  9009                                  	;MOV	WORD PTR ES:[DI+2],CX		;AN000;FO.; initialize routine entry
  9010                                  	;MOV	WORD PTR ES:[DI],SI		;AN000;FO.; initialize routine offset
  9011                                  
  9012                                  ;hkn; FastFlg moved to DOSDATA
  9013                                  	;MOV	DI,OFFSET DOSDATA:FastFlg	;AN000;FO.; get addr of FASTXXX flags
  9014                                  	;ADD	DI,DX				;AN000;FO.; index to a FASTXXX flag
  9015                                  	;OR	byte ptr ES:[DI],Fast_yes	;AN000;FO.; indicate installed
  9016                                  FSret:						;AN000;
  9017                                  	;pop	es
  9018                                  	;return					;AN000;FO.
  9019                                  ;EndProc FastInit				;AN000;FO.
  9020                                  
  9021                                  	; MSDOS 3.3
  9022                                  	; IBMDOS.COM (1987) - Offset 1EB3h
  9023                                  FastInit:
  9024 0000208D BF[730F]                	mov	di,FastTable ; FastOpenTable
  9025 00002090 2E8B4504                	mov	ax,[cs:di+4]		; Entry segment
  9026 00002094 8CCB                    	mov	bx,cs			; get DOS segment
  9027 00002096 39D8                    	cmp	ax,bx			; first time installed ?	
  9028 00002098 7402                    	je	short ok_install	; yes
  9029 0000209A F9                      	stc				; set carry
  9030 0000209B C3                      	retn				; (cf=1 means) already installed !
  9031                                  
  9032                                  ok_install:
  9033 0000209C BB[730F]                	mov	bx,FastTable ; FastOpenTable
  9034 0000209F 8CD9                    	mov	cx,ds
  9035                                  	; set address of FASTXXX (FASTOPEN) routine entry
  9036 000020A1 2E894F04                	mov	[cs:bx+4],cx
  9037 000020A5 2E897702                	mov	[cs:bx+2],si
  9038 000020A9 C3                      	retn
  9039                                  
  9040                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9041                                  ;----------------------------------------------------------------------------
  9042                                  ;   DOS 3.3   6/10/86
  9043                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9044                                  ;
  9045                                  ;   Inputs:	None
  9046                                  ;   Outputs:	AX = -1 and carry flag set
  9047                                  ;
  9048                                  ;   Registers modified: none.
  9049                                  ;----------------------------------------------------------------------------
  9050                                  
  9051                                  FastRet:
  9052                                  	;mov	ax,-1
  9053                                  	;stc
  9054                                  	;retf
  9055 000020AA F9                      	STC
  9056 000020AB 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9057 000020AD CB                      	RETF
  9058                                  
  9059                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9060                                  ;----------------------------------------------------------------------------
  9061                                  ;   DOS 3.3   6/10/86
  9062                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9063                                  ;
  9064                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9065                                  ;   Outputs:	same output as $OPEN
  9066                                  ;
  9067                                  ;----------------------------------------------------------------------------
  9068                                  
  9069                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9070                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9071                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9072                                  
  9073                                  NLS_OPEN:
  9074                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9075                                  ;	MOV	BYTE [CPSWFLAG],0
  9076                                  ;	PUSH	BX		 ; save current state
  9077                                  
  9078 000020AE 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9079 000020B0 E8CB52                  	call	_$OPEN
  9080                                  
  9081                                   ;	POP	BX		 ; restore current state
  9082                                   ;	MOV	[CPSWFLAG],BL
  9083 000020B3 C3                      	RETN
  9084                                  
  9085                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9086                                  ;----------------------------------------------------------------------------
  9087                                  ;   DOS 3.3   6/10/86
  9088                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9089                                  ;
  9090                                  ;   Inputs:	BP = open mode
  9091                                  ;   Outputs:	same output as $LSEEK
  9092                                  ;
  9093                                  ;----------------------------------------------------------------------------
  9094                                  
  9095                                  NLS_LSEEK:
  9096                                  	;PUSH	word [SS:USER_SP] ; save user stack
  9097                                  	;PUSH	word [SS:USER_SS]
  9098 000020B4 2EFF36[4005]            	PUSH	word [CS:USER_SP] ; save user stack
  9099 000020B9 2EFF36[4205]            	PUSH	word [CS:USER_SS]
  9100 000020BE E81000                  	CALL	Fake_User_Stack
  9101 000020C1 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9102 000020C3 E8B751                  	call	_$LSEEK
  9103                                  	;POP	word [SS:USER_SS] ; restore user stack
  9104                                  	;POP	word [SS:USER_SP]
  9105 000020C6 2E8F06[4205]            	POP	word [cs:USER_SS] ; restore user stack
  9106 000020CB 2E8F06[4005]            	POP	word [cs:USER_SP]
  9107 000020D0 C3                      	RETN
  9108                                  
  9109                                  ;Break	<Fake_User_Stack - save user stack>
  9110                                  ;----------------------------------------------------------------------------
  9111                                  ;   DOS 3.3   6/10/86
  9112                                  ;   Fake_User_Stack - save user stack pointer
  9113                                  ;
  9114                                  ;----------------------------------------------------------------------------
  9115                                  
  9116                                  Fake_User_Stack:
  9117                                  	;MOV	AX,[ss:USER_SP_2F] ; replace with INT 2F stack
  9118 000020D1 2EA1[A70F]              	MOV	AX,[cs:USER_SP_2F]
  9119                                  	;MOV	[SS:USER_SP],AX
  9120 000020D5 2EA3[4005]              	MOV	[CS:USER_SP],AX
  9121 000020D9 8CC8                    	MOV	AX,CS
  9122                                  	;mov	ax,ss
  9123                                  	;MOV	[SS:USER_SS],AX
  9124 000020DB 2EA3[4205]              	MOV	[CS:USER_SS],AX
  9125 000020DF C3                      	RETN
  9126                                  
  9127                                  ;Break	<GetDevList - get device header list pointer>
  9128                                  ;----------------------------------------------------------------------------
  9129                                  ;   DOS 3.3   7/25/86
  9130                                  ;   GetDevList - get device header list pointer
  9131                                  ;
  9132                                  ;   Output: AX:BX points to the device header list
  9133                                  ;----------------------------------------------------------------------------
  9134                                  
  9135                                  GetDevList:
  9136 000020E0 BE[6B0F]                	MOV	SI,SysInitTable
  9137                                  	;LDS	SI,[CS:SI+SYSINITVARS]
  9138 000020E3 2EC534                  	LDS	SI,[CS:SI]
  9139                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9140                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9141 000020E6 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9142 000020E9 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9143 000020EC C3                      	RETN
  9144                                  
  9145                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC   >
  9146                                  ;----------------------------------------------------------------------------
  9147                                  ;   DOS 3.3   7/25/86
  9148                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9149                                  ;
  9150                                  ;   Inputs:	BP = function code 0CH
  9151                                  ;   Outputs:	same output as generic $IOCTL
  9152                                  ;
  9153                                  ;----------------------------------------------------------------------------
  9154                                  
  9155                                  NLS_IOCTL:
  9156                                  	;PUSH	word [SS:USER_SP] ; save user stack
  9157                                  	;PUSH	word [SS:USER_SS]
  9158 000020ED 2EFF36[4005]            	PUSH	word [CS:USER_SP] ; save user stack
  9159 000020F2 2EFF36[4205]            	PUSH	word [CS:USER_SS]
  9160 000020F7 E8D7FF                  	CALL	Fake_User_Stack
  9161 000020FA 89E8                    	MOV	AX,BP	     ; set up correct interface for $LSEEK
  9162 000020FC E8320F                  	call	_$IOCTL
  9163                                  	;POP	word [SS:USER_SS] ; restore user stack
  9164                                  	;POP	word [SS:USER_SP]
  9165 000020FF 2E8F06[4205]            	POP	word [CS:USER_SS] ; restore user stack
  9166 00002104 2E8F06[4005]            	POP	word [CS:USER_SP]
  9167 00002109 C3                      	RETN
  9168                                  
  9169                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9170                                  ;----------------------------------------------------------------------------
  9171                                  ;   DOS 3.3   7/25/86
  9172                                  ;   NLS_GETEXT	-
  9173                                  ;
  9174                                  ;   Inputs:	none
  9175                                  ;   Outputs:	AX = extended error
  9176                                  ;
  9177                                  ;----------------------------------------------------------------------------
  9178                                  
  9179                                  NLS_GETEXT:
  9180                                  	;MOV	AX,[SS:EXTERR]	 ; return extended error
  9181 0000210A 2EA1[F002]              	mov	AX,[CS:EXTERR]
  9182 0000210E C3                      	RETN
  9183                                  
  9184                                  ;============================================================================
  9185                                  ; EcritDisk, LcritDisk, EcritDevice, LCritDevice
  9186                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9187                                  ;============================================================================
  9188                                  ; 20/07/2018 - Retro DOS v3.0
  9189                                  
  9190                                  	; MSDOS 3.3
  9191                                  	; 08/08/2018 - Retro DSOS v3.0
  9192                                  EcritMem:
  9193                                  EcritSFT:
  9194                                  	;
  9195                                  EcritDisk:
  9196                                  	;push	ax
  9197 0000210F C3                      	retn
  9198                                  	
  9199 00002110 B80180                  	mov	ax,8001h
  9200 00002113 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9201                                  			; AL = critical section number (00h-0Fh)
  9202 00002115 58                      	pop	ax
  9203 00002116 C3                      	retn
  9204                                  
  9205                                  	; MSDOS 3.3
  9206                                  	; 08/08/2018 - Retro DSOS v3.0
  9207                                  LcritMem:
  9208                                  LcritSFT:
  9209                                  	;
  9210                                  LcritDisk:
  9211                                  	;push	ax
  9212 00002117 C3                      	retn
  9213                                  	
  9214 00002118 B80181                  	mov	ax,8101h
  9215 0000211B CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9216                                  			; AL = critical section number (00h-0Fh)
  9217 0000211D 58                      	pop	ax
  9218 0000211E C3                      	retn
  9219                                  
  9220                                  EcritDevice:
  9221                                  	;push	ax
  9222 0000211F C3                      	retn
  9223                                  	
  9224 00002120 B80280                  	mov	ax,8002h
  9225 00002123 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9226                                  			; AL = critical section number (00h-0Fh)
  9227 00002125 58                      	pop	ax
  9228 00002126 C3                      	retn
  9229                                  
  9230                                  LcritDevice:
  9231                                  	;push	ax
  9232 00002127 C3                      	retn
  9233                                  	
  9234 00002128 B80281                  	mov	ax,8102h
  9235 0000212B CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9236                                  			; AL = critical section number (00h-0Fh)
  9237 0000212D 58                      	pop	ax
  9238 0000212E C3                      	retn
  9239                                  
  9240                                  ;============================================================================
  9241                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9242                                  ;============================================================================
  9243                                  ; 20/07/2018 - Retro DOS v3.0
  9244                                  
  9245                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9246                                  
  9247                                  ; Some old versions of the 80286 have a bug in the chip.  The popf
  9248                                  ; instruction will enable interrupts.  Therefore in a section of code with
  9249                                  ; interrupts disabled and you need a popf instruction use the 'popff'
  9250                                  ; macro instead.
  9251                                  ;
  9252                                  
  9253                                  ;%macro POPFF 0
  9254                                  ;	jmp	$+3
  9255                                  ;	iret
  9256                                  ;	push	cs
  9257                                  ;	call	$-2
  9258                                  ;%endmacro
  9259                                  
  9260                                  ;**	CRIT.ASM - Critical Section Routines
  9261                                  ;
  9262                                  ;	Critical section handlers
  9263                                  ;
  9264                                  ;	Modification history:
  9265                                  ;
  9266                                  ;	    Created: ARR 30 March 1983
  9267                                  
  9268                                  ;
  9269                                  ;SR; This variable is set when the redir installs itself
  9270                                  ;
  9271                                  	;I_need redir_patch,BYTE
  9272                                  
  9273                                  ; Break	<Critical section handlers>
  9274                                  
  9275                                  ;   Each handler must leave everything untouched; including flags!
  9276                                  ;
  9277                                  ;   Sleaze for time savings:  first instruction is a return.  This is patched
  9278                                  ;   by the sharer to be a PUSH AX to complete the correct routines.
  9279                                  
  9280                                  ;Procedure  EcritDisk,NEAR
  9281                                  	;public  EcritMem
  9282                                  	;public  EcritSFT
  9283                                  ;ECritMEM    LABEL   NEAR
  9284                                  ;ECritSFT    LABEL   NEAR
  9285                                  
  9286                                  ;
  9287                                  ;SR; Check if critical section is to be entered
  9288                                  ;
  9289                                  
  9290                                  ;	pushf
  9291                                  ;	cmp	ss:[redir_patch],0
  9292                                  ;	jz	@f
  9293                                  ;	popff
  9294                                  ;
  9295                                  ;       PUSH    AX
  9296                                  ;	MOV     AX,8000h+critDisk
  9297                                  ;	INT     int_ibm
  9298                                  ;	POP     AX
  9299                                  ;	return
  9300                                  ;@@:
  9301                                  ;	popff
  9302                                  ;	ret
  9303                                  ;EndProc EcritDisk
  9304                                  
  9305                                  ;Procedure   LcritDisk,NEAR
  9306                                  ;	public  LcritMem
  9307                                  ;	public  LcritSFT
  9308                                  ;LCritMEM    LABEL   NEAR
  9309                                  ;LCritSFT    LABEL   NEAR
  9310                                  
  9311                                  ;
  9312                                  ;SR; Check if critical section is to be entered
  9313                                  ;
  9314                                  
  9315                                  ;	pushf
  9316                                  ;	cmp	ss:[redir_patch],0
  9317                                  ;	jz	@f
  9318                                  ;	popff
  9319                                  
  9320                                  ;       PUSH    AX
  9321                                  ;	MOV     AX,8100h+critDisk
  9322                                  ;	INT     int_ibm
  9323                                  ;	POP     AX
  9324                                  ;	return
  9325                                  ;@@:
  9326                                  ;	popff
  9327                                  ;	ret
  9328                                  
  9329                                  ;EndProc LcritDisk
  9330                                  
  9331                                  ;Procedure   EcritDevice,NEAR
  9332                                  ;
  9333                                  ;SR; Check if critical section is to be entered
  9334                                  ;
  9335                                  
  9336                                  ;	pushf
  9337                                  ;	cmp	ss:[redir_patch],0
  9338                                  ;	jz	@f
  9339                                  ;	popff
  9340                                  
  9341                                  ;       PUSH    AX
  9342                                  ;	MOV     AX,8000h+critDevice
  9343                                  ;	INT     int_ibm
  9344                                  ;	POP     AX
  9345                                  ;	return
  9346                                  ;@@:
  9347                                  ;	popff
  9348                                  ;	ret
  9349                                  
  9350                                  ;EndProc EcritDevice
  9351                                  
  9352                                  ;Procedure   LcritDevice,NEAR
  9353                                  ;
  9354                                  ;SR; Check if critical section is to be entered
  9355                                  ;
  9356                                  
  9357                                  ;	pushf
  9358                                  ;	cmp	ss:[redir_patch],0
  9359                                  ;	jz	@f
  9360                                  ;	popff
  9361                                  
  9362                                  ;       PUSH    AX
  9363                                  ;	MOV     AX,8100h+critDevice
  9364                                  ;	INT     int_ibm
  9365                                  ;	POP     AX
  9366                                  ;	return
  9367                                  ;@@:
  9368                                  ;	popff
  9369                                  ;	ret
  9370                                  
  9371                                  ;EndProc LcritDevice
  9372                                  
  9373                                  
  9374                                  ;============================================================================
  9375                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9376                                  ;============================================================================
  9377                                  ; 20/07/2018 - Retro DOS v3.0
  9378                                  
  9379                                  ;============================================================================
  9380                                  ; STDIO.ASM - (MSDOS 2.0)
  9381                                  ;============================================================================
  9382                                  
  9383                                  ;
  9384                                  ; Standard device IO for MSDOS (first 12 function calls)
  9385                                  ;
  9386                                  
  9387                                  ;.xlist
  9388                                  ;.xcref
  9389                                  ;INCLUDE STDSW.ASM
  9390                                  ;INCLUDE DOSSEG.ASM
  9391                                  ;.cref
  9392                                  ;.list
  9393                                  
  9394                                  ;TITLE   STDIO - device IO for MSDOS
  9395                                  ;NAME    STDIO
  9396                                  
  9397                                  ;INCLUDE IO.ASM
  9398                                  
  9399                                  ; ---------------------------------------------------------------------------
  9400                                  ;
  9401                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9402                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9403                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9404                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9405                                  ;			    to restore MSDOS 2.0 device IO source code 
  9406                                  ;
  9407                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9408                                  	
  9409                                  ;============================================================================
  9410                                  ; STDIO.ASM - (MSDOS 2.0)
  9411                                  ;============================================================================
  9412                                  
  9413                                  ;
  9414                                  ; Standard device IO for MSDOS (first 12 function calls)
  9415                                  ;
  9416                                  
  9417                                  ;.xlist
  9418                                  ;.xcref
  9419                                  ;INCLUDE STDSW.ASM
  9420                                  ;INCLUDE DOSSEG.ASM
  9421                                  ;.cref
  9422                                  ;.list
  9423                                  
  9424                                  ;TITLE   STDIO - device IO for MSDOS
  9425                                  ;NAME    STDIO
  9426                                  
  9427                                  ;INCLUDE IO.ASM
  9428                                  
  9429                                  ; ---------------------------------------------------------------------------
  9430                                  ;
  9431                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9432                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9433                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9434                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9435                                  ;			    to restore MSDOS 2.0 device IO source code 
  9436                                  ;
  9437                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9438                                  ;
  9439                                  ;============================================================================
  9440                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9441                                  ;============================================================================
  9442                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9443                                  
  9444                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9445                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9446                                  
  9447                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9448                                  ;
  9449                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9450                                  ;	NAME	IBMCPMIO
  9451                                  
  9452                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9453                                  ;
  9454                                  ;	$Std_Con_Input_No_Echo
  9455                                  ;	$Std_Con_String_Output
  9456                                  ;	$Std_Con_String_Input
  9457                                  ;	$RawConIO
  9458                                  ;	$RawConInput
  9459                                  ;	RAWOUT
  9460                                  ;	RAWOUT2
  9461                                  ;
  9462                                  
  9463                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9464                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9465                                  ; references to be SS or CS relative which is desired.
  9466                                  
  9467                                  ; ---------------------------------------------------------------------------
  9468                                  
  9469                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9470                                  ;	NAME	CPMIO2
  9471                                  
  9472                                  ;
  9473                                  ;	Microsoft Confidential
  9474                                  ;	Copyright (C) Microsoft Corporation 1991
  9475                                  ;	All Rights Reserved.
  9476                                  ;
  9477                                  
  9478                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9479                                  ;
  9480                                  ;	$Std_Con_Input
  9481                                  ;	$Std_Con_Output
  9482                                  ;	OUTT
  9483                                  ;	TAB
  9484                                  ;	BUFOUT
  9485                                  ;	$Std_Aux_Input
  9486                                  ;	$Std_Aux_Output
  9487                                  ;	$Std_Printer_Output
  9488                                  ;	$Std_Con_Input_Status
  9489                                  ;	$Std_Con_Input_Flush
  9490                                  ;
  9491                                  ;	Revision History:
  9492                                  ;
  9493                                  ;	  AN000	 version 4.00 - Jan. 1988
  9494                                  
  9495                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9496                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9497                                  ; references to be SS or CS relative which is desired.
  9498                                  
  9499                                  ;DOSCODE SEGMENT
  9500                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9501                                  
  9502                                  
  9503                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9504                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9505                                  ;hkn;	not valid. 
  9506                                  
  9507                                  ;
  9508                                  ;----------------------------------------------------------------------------
  9509                                  ;
  9510                                  ; Procedure : $Std_Con_Input_No_Echo
  9511                                  ;
  9512                                  ;----------------------------------------------------------------------------
  9513                                  ;
  9514                                  
  9515                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9516                                  
  9517                                  ; Inputs:
  9518                                  ;	None
  9519                                  ; Function:
  9520                                  ;	Input character from console, no echo
  9521                                  ; Returns:
  9522                                  ;	AL = character
  9523                                  
  9524 0000212F 1E                      	push	ds
  9525 00002130 56                      	push	si
  9526                                  INTEST:
  9527 00002131 E8A038                  	call	STATCHK
  9528 00002134 753B                    	jnz	short GET ; 08/09/2018
  9529                                  ;*************************************************************************
  9530                                  ;hkn; SS override
  9531 00002136 36803E[360A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9532 0000213C 7505                    	jnz	short no_sys_wait
  9533 0000213E B405                    	mov	ah,5			; get input status with system wait
  9534 00002140 E8442E                  	call	IOFUNC
  9535                                  no_sys_wait:
  9536                                  ;**************************************************************************
  9537 00002143 B484                    	MOV	AH,84h
  9538 00002145 CD2A                    	INT	int_IBM	 ; int 2Ah
  9539                                  
  9540                                  ;;; 7/15/86  update the date in the idle loop
  9541                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9542                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9543                                  
  9544                                  ;hkn; SS override
  9545 00002147 36803E[C30F]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9546 0000214D 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9547 0000214F 50                      	PUSH	AX
  9548 00002150 53                      	PUSH	BX			; following is tricky,
  9549 00002151 51                      	PUSH	CX			; it may be called by critical handler
  9550 00002152 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9551                                  					; other's READ or WRITE
  9552 00002153 1E                      	PUSH	DS			; save DS = SFT's sgement
  9553                                  
  9554                                  ;hkn; READTIME must use ds = DOSDATA
  9555                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9556                                  
  9557                                  	;push	ss
  9558 00002154 0E                      	PUSH	CS
  9559 00002155 1F                      	POP	DS
  9560                                  
  9561 00002156 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9562 00002159 E88D02                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9563                                  	;invoke	READTIME		; readtime
  9564 0000215C E81CF8                  	call	READTIME
  9565 0000215F B80100                  	MOV	AX,1
  9566 00002162 E88402                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9567                                  	
  9568                                  	; 24/07/2019 - Retro DOS v3.2
  9569                                  
  9570                                  	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9571                                  	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9572                                  	;push	bx
  9573                                  	;mov	bx,DATE_FLAG
  9574                                  	;add	bx,2  ; mov bx,FETCHI_FLAG
  9575                                  	;cmp	word [cs:bx],5872h
  9576                                  	;jz	short FETCHI_TAG_chk_ok
  9577                                  	;call	DOSINIT
  9578                                  ;FETCHI_TAG_chk_ok:
  9579                                  	;pop	bx
  9580                                  	
  9581 00002165 1F                      	POP	DS			; restore DS
  9582 00002166 5A                      	POP	DX
  9583 00002167 59                      	POP	CX
  9584 00002168 5B                      	POP	BX
  9585 00002169 58                      	POP	AX
  9586                                  NoUpdate:
  9587                                  
  9588                                  ;hkn; SS override
  9589 0000216A 36FF06[C30F]            	INC	word [SS:DATE_FLAG]
  9590                                  
  9591                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  9592 0000216F EBC0                    	JMP	short INTEST
  9593                                  GET:
  9594 00002171 30E4                    	XOR	AH,AH
  9595 00002173 E8112E                  	call	IOFUNC
  9596 00002176 5E                      	POP	SI
  9597 00002177 1F                      	POP	DS
  9598                                  ;;; 7/15/86
  9599                                  
  9600                                  ;hkn; SS override
  9601                                  	; MSDOS 6.0
  9602 00002178 36C606[C10F]00          	MOV	BYTE [SS:SCAN_FLAG],0
  9603                                  	;
  9604 0000217E 3C00                    	CMP	AL,0	    ; extended code ( AL )
  9605 00002180 7506                    	JNZ	short noscan
  9606                                  
  9607                                  ;hkn; SS override
  9608 00002182 36C606[C10F]01          	MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
  9609                                  
  9610                                  noscan:
  9611 00002188 C3                      	retn
  9612                                  ;
  9613                                  ;----------------------------------------------------------------------------
  9614                                  ;
  9615                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
  9616                                  ;
  9617                                  ;
  9618                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
  9619                                  ;	EXIT	none
  9620                                  ;	USES	ALL
  9621                                  ;
  9622                                  ;----------------------------------------------------------------------------
  9623                                  ;
  9624                                  
  9625                                  _$STD_CON_STRING_OUTPUT:	;System call 9
  9626                                  
  9627 00002189 89D6                    	mov	si,dx
  9628                                  STRING_OUT1:	
  9629 0000218B AC                      	lodsb
  9630 0000218C 3C24                    	cmp	al,'$'
  9631 0000218E 74F8                    	jz	short noscan
  9632                                  NEXT_STR1:
  9633 00002190 E88202                  	call	OUTT
  9634 00002193 EBF6                    	jmp	short STRING_OUT1
  9635                                  
  9636                                  ;----------------------------------------------------------------------------
  9637                                  ;
  9638                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
  9639                                  ;
  9640                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
  9641                                  ;
  9642                                  ;	ENTRY	(ds:dx) = input buffer
  9643                                  ;	EXIT	none
  9644                                  ;	USES	ALL
  9645                                  ;
  9646                                  ;----------------------------------------------------------------------------
  9647                                  
  9648                                  _$STD_CON_STRING_INPUT:		;System call 10
  9649                                  
  9650 00002195 8CD0                    	mov	ax,ss
  9651 00002197 8EC0                    	mov	es,ax
  9652 00002199 89D6                    	mov	si,dx
  9653 0000219B 30ED                    	xor	ch,ch
  9654 0000219D AD                      	lodsw
  9655                                  
  9656                                  ;	(AL) = the buffer length
  9657                                  ;	(AH) = the template length
  9658                                  
  9659 0000219E 08C0                            or	al,al
  9660 000021A0 74E6                            jz	short noscan	;Buffer is 0 length!!?
  9661 000021A2 88E3                    	mov	bl,ah		;Init template counter
  9662 000021A4 88EF                            mov	bh,ch		;Init template counter
  9663                                  
  9664                                  ;	(BL) = the number of bytes in the template
  9665                                  
  9666 000021A6 38D8                            cmp	al,bl
  9667 000021A8 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
  9668 000021AA 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
  9669 000021AD 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
  9670                                  
  9671                                  ; The number of chars in the template is >= the number of chars in buffer or
  9672                                  ; there is no CR at the end of the template.  This is an inconsistant state
  9673                                  ; of affairs.  Pretend that the template was empty:
  9674                                  ;
  9675                                  
  9676                                  NOEDIT:	
  9677 000021AF 88EB                    	mov	bl,ch		;Reset buffer
  9678                                  EDITON: 
  9679 000021B1 88C2                    	mov	dl,al
  9680 000021B3 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
  9681                                  
  9682                                  ;	Top level.  We begin to read a line in.
  9683                                  
  9684                                  NEWLIN: 
  9685 000021B4 36A0[C501]              	mov	al,[SS:CARPOS]
  9686 000021B8 36A2[C601]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
  9687                                  
  9688 000021BC 56                      	push	si
  9689 000021BD BF[C701]                	mov	di,INBUF ;Build the new line here
  9690 000021C0 36882E[3605]            	mov	byte [SS:INSMODE],ch ;Insert mode off
  9691 000021C5 88EF                    	mov	bh,ch		;No chars from template yet
  9692 000021C7 88EE                    	mov	dh,ch		;No chars to new line yet
  9693 000021C9 E863FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
  9694 000021CC 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
  9695 000021CE 7503                    	jnz	short GOTCH
  9696                                  
  9697                                  ;	This is the main loop of reading in a character and processing it.
  9698                                  ;
  9699                                  ;	(BH) = the index of the next byte in the template
  9700                                  ;	(BL) = the length of the template
  9701                                  ;	(DH) = the number of bytes in the buffer
  9702                                  ;	(DL) = the length of the buffer
  9703                                  
  9704                                  GETCH:
  9705 000021D0 E85CFF                  	call	_$STD_CON_INPUT_NO_ECHO
  9706                                  GOTCH:
  9707                                  ;
  9708                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
  9709                                  ; input queue.
  9710                                  ;
  9711 000021D3 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
  9712 000021D5 74F9                    	jz	short GETCH
  9713                                  
  9714                                  ;	If the leading char is the function-key lead byte
  9715                                  
  9716 000021D7 363A06[1013]                    cmp	al,[SS:ESCCHAR]
  9717 000021DC 7438                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
  9718                                  
  9719                                  ;	Rubout and ^H are both destructive backspaces.
  9720                                  
  9721 000021DE 3C7F                            cmp	al,c_DEL ; 7FH
  9722 000021E0 742B                            jz	short BACKSPJ
  9723 000021E2 3C08                            cmp	al,c_BS  ; 8
  9724 000021E4 7427                            jz	short BACKSPJ
  9725                                  
  9726                                  	; MSDOS 6.0
  9727                                  ;;	^W deletes backward once and then backs up until a letter is before the
  9728                                  ;;	cursor
  9729                                  ;
  9730                                  ;	CMP     AL,"W"-"@" ; 17h
  9731                                  ;
  9732                                  ;;	The removal of the comment characters before the jump statement will
  9733                                  ;;	cause ^W to backup a word.
  9734                                  ;
  9735                                  ;;***	JZ	short WordDel
  9736                                  ;	NOP
  9737                                  ;	NOP
  9738                                  ;	CMP     AL,"U"-"@" ; 15h
  9739                                  ;
  9740                                  ;;	The removal of the comment characters before the jump statement will
  9741                                  ;;	cause ^U to clear a line.
  9742                                  ;
  9743                                  ;;***	JZ	short LineDel
  9744                                  ;	NOP
  9745                                  ;	NOP
  9746                                  
  9747                                  ;	CR terminates the line.
  9748                                  
  9749 000021E6 3C0D                            cmp	al,c_CR ; 0Dh
  9750 000021E8 742F                            jz	short ENDLIN
  9751                                  
  9752                                  ;	LF goes to a new line and keeps on reading.
  9753                                  
  9754 000021EA 3C0A                            cmp	al,c_LF ; 0Ah
  9755 000021EC 7441                    	jz	short PHYCRLF
  9756                                  
  9757                                  ;	^X (or ESC) deletes the line and starts over
  9758                                  
  9759                                  	; MSDOS 3.3
  9760                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
  9761                                  	;jz	short KILNEW
  9762                                  	; MSDOS 6.0
  9763 000021EE 3C1B                    	cmp	al,CANCEL ; 1Bh
  9764 000021F0 7442                    	jz	short KILNEW
  9765                                  
  9766                                  ; Otherwise, we save the input character.
  9767                                  
  9768                                  SAVCH:	
  9769 000021F2 38D6                    	cmp	dh,dl
  9770 000021F4 7319                    	jnb	short BUFFUL		; buffer is full.
  9771 000021F6 AA                              stosb
  9772 000021F7 FEC6                    	inc	dh                      ; increment count in buffer.
  9773 000021F9 E8B302                  	call	BUFOUT			;Print control chars nicely
  9774                                  
  9775 000021FC 36803E[3605]00                  cmp	byte [SS:INSMODE], 0
  9776 00002202 75CC                    	jnz	short GETCH		; insertmode => don't advance template
  9777 00002204 38DF                            cmp	bh,bl
  9778 00002206 73C8                            jnb	short GETCH		; no more characters in template
  9779 00002208 46                              inc	si                      ; Skip to next char in template
  9780 00002209 FEC7                            inc	bh                      ; remember position in template
  9781 0000220B EBC3                            jmp	short GETCH
  9782                                  
  9783                                  BACKSPJ: 
  9784 0000220D EB38                    	jmp	short BACKSP
  9785                                  
  9786                                  BUFFUL: 
  9787 0000220F B007                    	mov	al, 7			; Bell to signal full buffer
  9788 00002211 E80102                  	call	OUTT
  9789 00002214 EBBA                    	jmp	short GETCH
  9790                                  
  9791                                  ESCAPE: 
  9792                                  	;transfer OEMFunctionKey
  9793 00002216 E992F6                  	JMP	OEMFunctionKey
  9794                                  
  9795                                  ENDLIN:
  9796 00002219 AA                              stosb				; Put the CR in the buffer
  9797 0000221A E8F801                  	call	OUTT                    ; Echo it
  9798 0000221D 5F                              pop	di                      ; Get start of user buffer
  9799 0000221E 8875FF                          mov	[di-1], dh		; Tell user how many bytes
  9800 00002221 FEC6                            inc	dh			; DH is length including CR
  9801                                  
  9802                                  COPYNEW:
  9803                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
  9804                                  	;mov	bp, es
  9805                                  	;mov	bx, ds
  9806                                  	;mov	es, bx
  9807                                  	;mov	ds, bp
  9808                                  	;mov	si, INBUF
  9809                                  	;mov	cl, dh
  9810                                  	;rep	movsb
  9811                                  	;retn
  9812                                  
  9813                                  	; CPMIO.ASM (MSDOS 6.0)
  9814                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
  9815                                  	;SAVE	<DS,ES>
  9816 00002223 1E                      	PUSH	DS
  9817 00002224 06                      	PUSH	ES
  9818                                  	;RESTORE <DS,ES>		; XCHG ES,DS
  9819 00002225 1F                      	POP	DS
  9820 00002226 07                      	POP	ES
  9821                                  
  9822                                  ;;hkn; INBUF is in DOSDATA
  9823 00002227 BE[C701]                        MOV     SI,INBUF
  9824 0000222A 88F1                            MOV     CL,DH                   ; set up count
  9825 0000222C F3A4                            REP     MOVSB                   ; Copy final line to user buffer
  9826                                  OLDBAK_RETN:
  9827 0000222E C3                              RETN
  9828                                  
  9829                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
  9830                                  
  9831                                  PHYCRLF:
  9832 0000222F E82001                  	CALL	CRLF
  9833 00002232 EB9C                            JMP	short GETCH
  9834                                  
  9835                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
  9836                                  
  9837                                  	; Note: Following routines were not used in IBMDOS.COM
  9838                                  	;	-CRTL+W, CRTL+U is not activated-
  9839                                  	;	but they were in the kernel code!?)
  9840                                  ;
  9841                                  ; Delete the previous line
  9842                                  ;
  9843                                  ;LineDel:
  9844                                  ;	OR      DH,DH
  9845                                  ;	JZ	short GetCh
  9846                                  ;	Call    BackSpace
  9847                                  ;	JMP	short LineDel
  9848                                  
  9849                                  ;
  9850                                  ; delete the previous word.
  9851                                  ;
  9852                                  ;WordDel:
  9853                                  ;WordLoop:
  9854                                  ;	Call    BackSpace               ; backspace the one spot
  9855                                  ;	OR      DH,DH
  9856                                  ;	JZ	short GetChJ
  9857                                  ;	MOV     AL,[ES:DI-1]
  9858                                  ;	cmp     al,'0'
  9859                                  ;	jb	short GetChj
  9860                                  ;	cmp     al,'9'
  9861                                  ;	jbe	short WordLoop
  9862                                  ;	OR      AL,20h
  9863                                  ;	CMP     AL,'a'
  9864                                  ;	JB	short GetChJ
  9865                                  ;	CMP     AL,'z'
  9866                                  ;	JBE	short WordLoop
  9867                                  ;getchj: 
  9868                                  ;	JMP	GetCh
  9869                                  
  9870                                  ; The user wants to throw away what he's typed in and wants to start over.
  9871                                  ; We print the backslash and then go to the next line and tab to the correct
  9872                                  ; spot to begin the buffered input.
  9873                                  
  9874                                  KILNEW:
  9875 00002234 B05C                            mov	al,'\'
  9876 00002236 E8DC01                          call	OUTT            ;Print the CANCEL indicator
  9877 00002239 5E                              pop	si		;Remember start of edit buffer
  9878                                  PUTNEW:
  9879 0000223A E81501                  	call	CRLF            ;Go to next line on screen
  9880 0000223D 36A0[C601]              	mov	al,[SS:STARTPOS]
  9881 00002241 E84702                  	call	TAB             ;Tab over
  9882 00002244 E96DFF                          JMP     NEWLIN		;Start over again
  9883                                  
  9884                                  ;	Destructively back up one character position
  9885                                  
  9886                                  BACKSP:
  9887                                  	; 09/09/2018
  9888 00002247 E80200                  	Call    BackSpace
  9889 0000224A EB84                    	JMP     GETCH
  9890                                  
  9891                                  BackSpace:
  9892 0000224C 08F6                    	or	dh,dh
  9893 0000224E 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
  9894 00002250 E85800                  	call	BACKUP          ;Do the backup
  9895 00002253 268A05                  	mov	al,[es:di]	;Get the deleted char
  9896 00002256 3C20                            cmp	al,20h	; ' '
  9897 00002258 730F                    	jnb	short OLDBAK	;Was a normal char
  9898 0000225A 3C09                            cmp	al,c_HT ; 9
  9899 0000225C 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
  9900                                  ;; 9/27/86 fix for ctrl-U backspace
  9901 0000225E 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
  9902 00002260 7407                    	JZ	short OLDBAK
  9903 00002262 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
  9904 00002264 7403                    	JZ	short OLDBAK
  9905                                  ;; 9/27/86 fix for ctrl-U backspace
  9906 00002266 E84500                          call	BACKMES         ;Was a control char, zap the '^'
  9907                                  OLDBAK:
  9908 00002269 36803E[3605]00                  cmp	byte [SS:INSMODE], 0
  9909 0000226F 75BD                    	jnz	short OLDBAK_RETN ;In insert mode, done
  9910 00002271 08FF                    	or	bh,bh
  9911 00002273 74B9                            jz	short OLDBAK_RETN 
  9912                                  				;Not advanced in template, stay where we are
  9913 00002275 FECF                    	dec	bh		;Go back in template
  9914 00002277 4E                              dec	si
  9915 00002278 C3                      	retn
  9916                                  
  9917                                  BAKTAB:
  9918 00002279 57                              push	di
  9919 0000227A 4F                              dec	di		;Back up one char
  9920 0000227B FD                              std			;Go backward
  9921 0000227C 88F1                            mov	cl,dh		;Number of chars currently in line
  9922 0000227E B020                            mov	al,20h	; ' '
  9923 00002280 53                              push	bx
  9924 00002281 B307                            mov	bl,7		;Max
  9925 00002283 E30E                            jcxz	FIGTAB		;At start, do nothing
  9926                                  FNDPOS:
  9927 00002285 AE                              scasb			;Look back
  9928 00002286 7609                    	jbe	short CHKCNT
  9929 00002288 26807D0109              	cmp	byte [es:di+1],9
  9930 0000228D 7409                    	jz	short HAVTAB	;Found a tab
  9931 0000228F FECB                    	dec	bl		;Back one char if non tab control char
  9932                                  CHKCNT:
  9933 00002291 E2F2                            loop	FNDPOS
  9934                                  FIGTAB:		
  9935 00002293 362A1E[C601]            	sub	bl,[SS:STARTPOS]
  9936                                  HAVTAB:
  9937 00002298 28F3                    	sub	bl,dh
  9938 0000229A 00D9                    	add	cl,bl
  9939 0000229C 80E107                  	and	cl,7		;CX has correct number to erase
  9940 0000229F FC                      	cld			;Back to normal
  9941 000022A0 5B                      	pop	bx
  9942 000022A1 5F                      	pop	di
  9943 000022A2 74C5                    	jz	short OLDBAK	;Nothing to erase
  9944                                  TABBAK:
  9945 000022A4 E80700                  	call	BACKMES
  9946 000022A7 E2FB                    	loop	TABBAK		;Erase correct number of chars
  9947 000022A9 EBBE                    	jmp	short OLDBAK
  9948                                  
  9949                                  BACKUP:
  9950 000022AB FECE                            dec	dh             ;Back up in line
  9951 000022AD 4F                              dec	di
  9952                                  BACKMES:
  9953 000022AE B008                            mov	al,c_BS ; 8	;Backspace
  9954 000022B0 E86201                          call	OUTT
  9955 000022B3 B020                            mov	al,20h ; ' '	;Erase
  9956 000022B5 E85D01                          call	OUTT
  9957 000022B8 B008                            mov	al,c_BS ; 8	;Backspace
  9958 000022BA E95801                  	jmp	OUTT		;Done
  9959                                  
  9960                                  ;User really wants an ESC character in his line
  9961                                  TWOESC:	
  9962 000022BD 36A0[1013]              	mov	al,[SS:ESCCHAR]
  9963 000022C1 E92EFF                  	jmp	SAVCH
  9964                                  
  9965                                  ;Copy the rest of the template
  9966                                  COPYLIN:
  9967 000022C4 88D9                            mov	cl,bl		;Total size of template
  9968 000022C6 28F9                    	sub	cl,bh		;Minus position in template, is number to move
  9969 000022C8 EB07                            jmp	short COPYEACH
  9970                                  
  9971                                  COPYSTR:
  9972 000022CA E83400                  	call	FINDOLD         ;Find the char
  9973 000022CD EB02                    	jmp	short COPYEACH  ;Copy up to it
  9974                                  
  9975                                  ;Copy one char from template to line
  9976                                  COPYONE:
  9977 000022CF B101                            mov	cl,1
  9978                                  ;Copy CX chars from template to line
  9979                                  COPYEACH:
  9980 000022D1 36C606[3605]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
  9981 000022D7 38D6                    	cmp	dh,dl
  9982 000022D9 740F                            jz	short GETCH2		;At end of line, can't do anything
  9983 000022DB 38DF                            cmp	bh,bl
  9984 000022DD 740B                            jz	short GETCH2		;At end of template, can't do anything
  9985 000022DF AC                              lodsb
  9986 000022E0 AA                              stosb
  9987 000022E1 E8CB01                  	call	BUFOUT
  9988 000022E4 FEC7                            inc	bh			;Ahead in template
  9989 000022E6 FEC6                            inc	dh			;Ahead in line
  9990 000022E8 E2E7                            loop	COPYEACH
  9991                                  GETCH2:
  9992 000022EA E9E3FE                          jmp	GETCH
  9993                                  
  9994                                  ;Skip one char in template
  9995                                  SKIPONE:
  9996 000022ED 38DF                    	cmp	bh,bl
  9997 000022EF 74F9                    	jz	short GETCH2		;At end of template
  9998 000022F1 FEC7                    	inc	bh			;Ahead in templat
  9999 000022F3 46                      	inc	si
 10000 000022F4 E9D9FE                  	jmp	GETCH
 10001                                  
 10002                                  SKIPSTR:
 10003 000022F7 E80700                  	call	FINDOLD                 ;Find out how far to go
 10004 000022FA 01CE                            add	si,cx			;Go there
 10005 000022FC 00CF                            add	bh,cl
 10006 000022FE E9CFFE                          jmp	GETCH
 10007                                  
 10008                                  ;Get the next user char, and look ahead in template for a match
 10009                                  ;CX indicates how many chars to skip to get there on output
 10010                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10011                                  ;       address is popped off and a jump to GETCH is taken.
 10012                                  ;       Make sure nothing extra on stack when this routine
 10013                                  ;       is called!!! (no PUSHes before calling it).
 10014                                  FINDOLD:
 10015 00002301 E82BFE                          call	_$STD_CON_INPUT_NO_ECHO
 10016                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10017 00002304 363A06[1013]            	CMP     AL,[SS:ESCCHAR]	; did he type a function key?
 10018                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10019                                  	;CMP	AL,[CS:ESCCHAR]
 10020 00002309 7505                    	JNZ     SHORT FINDSETUP		; no, set up for scan
 10021 0000230B E821FE                          CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10022 0000230E EB1D                            JMP     SHORT NOTFND		; go try again
 10023                                  FINDSETUP:
 10024 00002310 88D9                    	mov	cl,bl
 10025 00002312 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10026 00002314 7417                    	jz	short NOTFND	;At end of template
 10027 00002316 49                              dec	cx		;Cannot point past end, limit search
 10028 00002317 7414                            jz	short NOTFND	 ;If only one char in template, forget it
 10029 00002319 06                      	push	es
 10030 0000231A 1E                      	push	ds
 10031 0000231B 07                      	pop	es
 10032 0000231C 57                      	push	di
 10033 0000231D 89F7                    	mov	di,si		;Template to ES:DI
 10034 0000231F 47                      	inc	di
 10035 00002320 F2AE                    	repne	scasb		;Look
 10036 00002322 5F                      	pop	di
 10037 00002323 07                      	pop	es
 10038 00002324 7507                    	jnz	short NOTFND	;Didn't find the char
 10039 00002326 F6D1                            not	cl		;Turn how far to go into how far we went
 10040 00002328 00D9                            add	cl,bl		;Add size of template
 10041 0000232A 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10042                                  FINDOLD_RETN:
 10043 0000232C C3                      	retn
 10044                                  
 10045                                  NOTFND:
 10046 0000232D 5D                              pop	bp              ;Chuck return address
 10047 0000232E E99FFE                          jmp	GETCH
 10048                                  
 10049                                  REEDIT:
 10050 00002331 B040                    	mov	al,'@'		;Output re-edit character
 10051 00002333 E8DF00                  	call	OUTT
 10052 00002336 5F                      	pop	di
 10053 00002337 57                      	push	di
 10054 00002338 06                      	push	es
 10055 00002339 1E                      	push	ds
 10056 0000233A E8E6FE                  	call	COPYNEW		;Copy current line into template
 10057 0000233D 1F                      	pop	ds
 10058 0000233E 07                      	pop	es
 10059 0000233F 5E                      	pop	si
 10060 00002340 88F3                    	mov	bl,dh		;Size of line is new size template
 10061 00002342 E9F5FE                  	jmp	PUTNEW		;Start over again
 10062                                  
 10063                                  EXITINS:
 10064                                  ENTERINS:
 10065 00002345 36F616[3605]            	not	byte [SS:INSMODE]
 10066 0000234A E983FE                  	jmp	GETCH
 10067                                  
 10068                                  ;Put a real live ^Z in the buffer (embedded)
 10069                                  CTRLZ:
 10070 0000234D B01A                    	mov	al,"Z"-"@" ; 1Ah
 10071 0000234F E9A0FE                          jmp	SAVCH
 10072                                  
 10073                                  ;Output a CRLF
 10074                                  CRLF:
 10075 00002352 B00D                    	mov	al,c_CR ; 0Dh 
 10076 00002354 E8BE00                  	call	OUTT
 10077 00002357 B00A                    	mov	al,c_LF ; 0Ah
 10078 00002359 E9B900                  	jmp	OUTT
 10079                                  
 10080                                  ;
 10081                                  ;----------------------------------------------------------------------------
 10082                                  ;
 10083                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10084                                  ;
 10085                                  ;	Input or output raw character from console, no echo
 10086                                  ;
 10087                                  ;	ENTRY	DL = -1 if input
 10088                                  ;		   =  output character if output
 10089                                  ;	EXIT	(AL) = input character if input
 10090                                  ;	USES	all
 10091                                  ;
 10092                                  ;----------------------------------------------------------------------------
 10093                                  ; 20/07/2018 - Retro DOS v3.0
 10094                                  
 10095                                  _$RAW_CON_IO:			; System call 6
 10096                                  
 10097 0000235C 88D0                            MOV     AL,DL
 10098 0000235E 3CFF                            CMP     AL,-1
 10099 00002360 7542                            JNZ     SHORT RAWOUT
 10100                                          ;LES 	DI,[USER_SP]	; Get pointer to register save area
 10101 00002362 36C43E[4005]                    LES     DI,[SS:USER_SP] ; 12/03/2018
 10102 00002367 31DB                    	XOR     BX,BX
 10103                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10104 00002369 E82C1E                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10105                                          ;JC	SHORT RET17
 10106 0000236C 72BE                            jc	short FINDOLD_RETN
 10107 0000236E B401                    	MOV     AH,1
 10108 00002370 E8142C                          CALL	IOFUNC
 10109 00002373 750B                            JNZ     SHORT RESFLG
 10110 00002375 E83D36                          CALL	SPOOLINT
 10111                                          ;OR	BYTE [ES:DI+16H],40H
 10112 00002378 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10113 0000237D 30C0                            XOR     AL,AL
 10114                                  RET17:
 10115 0000237F C3                              RETN
 10116                                  
 10117                                  RESFLG:
 10118                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10119 00002380 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10120                                  				; Reset user's zero flag
 10121                                  ;RILP:
 10122                                  rci0:
 10123 00002385 E82D36                       	CALL	SPOOLINT
 10124                                  
 10125                                  ;
 10126                                  ;----------------------------------------------------------------------------
 10127                                  ;
 10128                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10129                                  ;
 10130                                  ;	Input raw character from console, no echo
 10131                                  ;
 10132                                  ;	ENTRY	none
 10133                                  ;	EXIT	(al) = character
 10134                                  ;	USES	all
 10135                                  ;
 10136                                  ;----------------------------------------------------------------------------
 10137                                  ;
 10138                                  
 10139                                  ;rci0:	invoke	SPOOLINT
 10140                                  
 10141                                  	;entry	$RAW_CON_INPUT
 10142                                  
 10143                                  _$RAW_CON_INPUT:		; System call 7
 10144 00002388 53                      	push	bx
 10145 00002389 31DB                            XOR     BX,BX
 10146                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10147 0000238B E80A1E                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10148 0000238E 5B                              pop	bx
 10149 0000238F 72EE                    	JC	SHORT RET17
 10150 00002391 B401                            MOV     AH,1
 10151 00002393 E8F12B                          CALL	IOFUNC
 10152                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10153                                  	;XOR     AH,AH
 10154                                          ;CALL	IOFUNC
 10155                                          ;RETN
 10156 00002396 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10157 00002398 B484                    	MOV	AH,84h
 10158 0000239A CD2A                    	INT	int_IBM  ; int 2Ah
 10159 0000239C EBE7                    	JMP	short rci0
 10160                                  rci5:	
 10161 0000239E 30E4                            XOR     AH,AH
 10162 000023A0 E8E42B                          CALL	IOFUNC
 10163 000023A3 C3                              RETN
 10164                                  
 10165                                  ;
 10166                                  ;       Output the character in AL to stdout
 10167                                  ;
 10168                                  	;entry   RAWOUT
 10169                                  
 10170                                  RAWOUT:
 10171 000023A4 53                              PUSH    BX
 10172 000023A5 BB0100                          MOV     BX,1
 10173                                  
 10174                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10175 000023A8 E8ED1D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10176 000023AB 721B                            JC      SHORT RAWRET1
 10177                                  	;
 10178                                  	; MSDOS 2.11
 10179                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10180                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10181                                          ;PUSH	DS
 10182                                          ;PUSH	SI
 10183                                          ;LDS	SI,[SI+19H]		; output to special?
 10184                                  	;TEST	BYTE [SI+4],ISSPEC
 10185                                  	;POP	SI
 10186                                  	;
 10187                                          
 10188                                  	; MSDOS 3.3 & MSDOS 6.0
 10189                                  	;mov	bx,[si+5]
 10190 000023AD 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10191                                   ;
 10192                                   ; If we are a network handle OR if we are not a local device then go do the
 10193                                   ; output the hard way.
 10194                                   ;	
 10195                                  	;and	bx,8080h
 10196 000023B0 81E38080                	AND	BX,sf_isnet+devid_device
 10197                                  	;cmp	bx,80h
 10198 000023B4 81FB8000                	CMP	BX,devid_device
 10199 000023B8 7510                    	jnz     short RAWNORM
 10200 000023BA 1E                      	push    ds
 10201                                  	;lds	bx,[si+7]
 10202 000023BB C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10203                                  	;test	byte [bx+4],10h
 10204 000023BE F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10205                                  	;
 10206                                  
 10207 000023C2 1F                              POP     DS
 10208 000023C3 7405                            JZ      SHORT RAWNORM		; if not, do normally
 10209 000023C5 CD29                            INT     int_fastcon   ; int 29h	; quickly output the char
 10210                                  
 10211                                          ;JMP     SHORT RAWRET
 10212                                  ;RAWNORM:
 10213                                  ;	CALL    RAWOUT3
 10214                                  
 10215                                  RAWRET: 
 10216 000023C7 F8                      	CLC
 10217                                  RAWRET1:
 10218 000023C8 5B                              POP     BX
 10219                                  RAWRET2:
 10220 000023C9 C3                      	RETN
 10221                                  
 10222                                  RAWNORM:
 10223 000023CA E80700                  	CALL    RAWOUT3
 10224 000023CD EBF8                    	jmp	short RAWRET
 10225                                  
 10226                                  ;
 10227                                  ;       Output the character in AL to handle in BX
 10228                                  ;
 10229                                  ;	entry   RAWOUT2
 10230                                  
 10231                                  RAWOUT2:
 10232                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10233                                  	;JC	SHORT RET18
 10234 000023CF E8C61D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10235 000023D2 72F5                    	JC	SHORT RAWRET2
 10236                                  RAWOUT3:
 10237 000023D4 50                              PUSH    AX
 10238 000023D5 EB03                            JMP     SHORT RAWOSTRT
 10239                                  ROLP:
 10240 000023D7 E8DB35                          CALL	SPOOLINT
 10241                                  
 10242                                  	; MSDOS 6.0
 10243                                  	;OR	word [DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10244                                  				;AN002; set control break
 10245                                  	;;invoke DSKSTATCHK
 10246                                  	;call	DSKSTATCHK	;AN002; check control break
 10247                                  
 10248                                  RAWOSTRT:
 10249 000023DA B403                            MOV     AH,3
 10250 000023DC E8A82B                          CALL    IOFUNC
 10251 000023DF 74F6                            JZ      SHORT ROLP
 10252                                  
 10253                                  	; MSDOS 6.0
 10254                                  ;SR;
 10255                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10256                                  ;the user failed. We do not send a char if this happens. We however return 
 10257                                  ;to the caller with carry clear because this DOS call does not return any
 10258                                  ;status. 
 10259                                  ;
 10260                                  	;inc	ax		;fail on I24 if ax = -1
 10261                                  	;POP	AX
 10262                                  	;jz	short nosend	;yes, do not send char
 10263                                  	;MOV	AH,2
 10264                                  	;call	IOFUNC
 10265                                  ;nosend:
 10266                                  	;CLC			; Clear carry indicating successful
 10267                                  	;retn
 10268                                  
 10269                                  	; MSDOS 3.3 & MSDOS 2.11
 10270 000023E1 58                              POP     AX
 10271 000023E2 B402                            MOV     AH,2
 10272 000023E4 E8A02B                          CALL    IOFUNC
 10273 000023E7 F8                              CLC                     ; Clear carry indicating successful
 10274                                  RET18:    
 10275 000023E8 C3                      	RETN
 10276                                  
 10277                                  ;;10/08/2018
 10278                                  ; 20/07/2018 - Retro DOS v3.0
 10279                                  ; ---------------------------------------------------------------------------
 10280                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10281                                  ; ---------------------------------------------------------------------------
 10282                                  
 10283                                  ; This routine is called at DOS init
 10284                                  
 10285                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10286                                  ;;OUTMES:
 10287                                  ;;	;LODS	CS:BYTE PTR [SI]
 10288                                  ;;	CS	LODSB
 10289                                  ;;	CMP     AL,"$" ; 24h
 10290                                  ;;	JZ	SHORT RET18
 10291                                  ;;	CALL	OUTT
 10292                                  ;;	JMP     SHORT OUTMES
 10293                                  
 10294                                  ; ---------------------------------------------------------------------------
 10295                                  
 10296                                  ; 20/07/2018 - Retro DOS v3.0
 10297                                  
 10298                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10299                                  
 10300                                  ;
 10301                                  ;----------------------------------------------------------------------------
 10302                                  ;
 10303                                  ; Inputs:
 10304                                  ;	AX=0 save the DEVCALL request packet
 10305                                  ;	  =1 restore the DEVCALL request packet
 10306                                  ; Function:
 10307                                  ;	save or restore the DEVCALL packet
 10308                                  ; Returns:
 10309                                  ;	none
 10310                                  ;
 10311                                  ;----------------------------------------------------------------------------
 10312                                  ;
 10313                                  
 10314                                  Save_Restore_Packet:
 10315 000023E9 1E                      	PUSH	DS
 10316 000023EA 06                      	PUSH	ES
 10317 000023EB 56                      	PUSH	SI
 10318 000023EC 57                      	PUSH	DI
 10319                                  
 10320                                  	; 09/09/2018
 10321 000023ED BF[A90F]                	mov	di,FAKE_STACK_2F 
 10322 000023F0 BE[2403]                	mov	si,DEVCALL
 10323                                  	;
 10324 000023F3 83F800                  	CMP	AX,0		; save packet
 10325                                  	;JZ	short save_packet
 10326 000023F6 7402                    	je	short set_seg 
 10327                                  
 10328                                  	; MSDOS 6.0
 10329                                  restore_packet:
 10330                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	 ;sourec
 10331                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	 ;destination
 10332                                  	; MSDOS 3.3
 10333                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10334                                  	;mov	di,DEVCALL  ; 09/09/2018
 10335                                  	;
 10336                                  	;JMP	short set_seg
 10337                                  	
 10338                                  	; 09/09/2018
 10339 000023F8 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10340                                  
 10341                                  	; MSDOS 6.0
 10342                                  save_packet:
 10343                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	 ;destination
 10344                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	 ;source
 10345                                  	; 09/09/2018
 10346                                  	; MSDOS 3.3
 10347                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10348                                  	;mov	si,DEVCALL ; 09/09/2018
 10349                                  
 10350                                  set_seg:
 10351                                  	; MSDOS 6.0
 10352                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 10353                                  	; MSDOS 3.3
 10354 000023FA 8CC8                    	mov	ax,cs
 10355                                  	;
 10356 000023FC 8ED8                    	MOV	DS,AX
 10357 000023FE 8EC0                    	MOV	ES,AX
 10358 00002400 B90B00                  	MOV	CX,11		; 11 words to move
 10359 00002403 F3A5                    	REP	MOVSW
 10360                                  
 10361 00002405 5F                      	POP	DI
 10362 00002406 5E                      	POP	SI
 10363 00002407 07                      	POP	ES
 10364 00002408 1F                      	POP	DS
 10365 00002409 C3                      	retn
 10366                                  
 10367                                  ;============================================================================
 10368                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10369                                  ;============================================================================
 10370                                  ; 20/07/2018 - Retro DOS v3.0
 10371                                  
 10372                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10373                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10374                                  ;hkn;	not valid. 
 10375                                  
 10376                                  ;
 10377                                  ;----------------------------------------------------------------------------
 10378                                  ;
 10379                                  ;**	$STD_CON_INPUT - System Call 1
 10380                                  ;
 10381                                  ;	Input character from console, echo
 10382                                  ;
 10383                                  ;	ENTRY	none
 10384                                  ;	EXIT	(al) = character
 10385                                  ;	USES	ALL
 10386                                  ;
 10387                                  ;----------------------------------------------------------------------------
 10388                                  ;
 10389                                  
 10390                                  _$STD_CON_INPUT:	;System call 1
 10391                                  	
 10392 0000240A E822FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10393 0000240D 50                      	PUSH	AX
 10394 0000240E E80400                  	CALL	OUTT
 10395 00002411 58                      	POP	AX
 10396                                  CON_INPUT_RETN:	
 10397 00002412 C3                      	RETN
 10398                                  
 10399                                  ;
 10400                                  ;----------------------------------------------------------------------------
 10401                                  ;
 10402                                  ;**	$STD_CON_OUTPUT - System Call 2
 10403                                  ;
 10404                                  ;	Output character to console
 10405                                  ;
 10406                                  ;	ENTRY	(dl) = character
 10407                                  ;	EXIT	none
 10408                                  ;	USES	all
 10409                                  ;
 10410                                  ;----------------------------------------------------------------------------
 10411                                  ;
 10412                                  
 10413                                  _$STD_CON_OUTPUT:	;System call 2
 10414                                  
 10415 00002413 88D0                    	MOV	AL,DL
 10416                                  
 10417                                  OUTT:
 10418 00002415 3C20                    	CMP	AL,20H ; " "
 10419 00002417 725E                    	JB	SHORT CTRLOUT
 10420 00002419 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10421 0000241B 7405                    	JZ	SHORT OUTCH
 10422                                  OUTCHA:	
 10423                                  	;INC	BYTE PTR [CARPOS]
 10424 0000241D 36FE06[C501]            	INC	BYTE [SS:CARPOS]
 10425                                  OUTCH:
 10426 00002422 1E                      	PUSH	DS
 10427 00002423 56                      	PUSH	SI
 10428                                  	;INC	BYTE PTR [CHARCO]		;invoke  statchk...
 10429                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 10430 00002424 36FE06[CC02]            	INC	BYTE [SS:CHARCO]	
 10431                                  	;AND	BYTE [SS:CHARCO],00111111B
 10432                                  	; 14/03/2018
 10433 00002429 368026[CC02]03          	and	byte [SS:CHARCO],3  ; IBMDOS.COM, MSDOS 3.3, MSDOS 2.11
 10434 0000242F 7505                    	JNZ	SHORT OUTSKIP
 10435 00002431 50                      	PUSH	AX
 10436 00002432 E89F35                  	CALL	STATCHK
 10437 00002435 58                      	POP	AX
 10438                                  OUTSKIP:
 10439 00002436 E86BFF                  	CALL	RAWOUT				;output the character
 10440 00002439 5E                      	POP	SI
 10441 0000243A 1F                      	POP	DS
 10442                                  
 10443                                  	;TEST	BYTE PTR [PFLAG],-1
 10444                                  	;retz
 10445 0000243B 36F606[CA02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 10446 00002441 74CF                    	JZ	SHORT CON_INPUT_RETN
 10447                                  
 10448 00002443 53                      	PUSH	BX
 10449 00002444 1E                      	PUSH	DS
 10450 00002445 56                      	PUSH	SI
 10451 00002446 BB0100                  	MOV	BX,1
 10452                                  	; 20/07/2018 - Retro DOS v3.0
 10453                                  	; MSDOS 3.3
 10454                                  	; MSDOS 6.0 (CPMIO2.ASM)
 10455 00002449 E84C1D                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI 
 10456                                  					;hkn; to sft entry
 10457 0000244C 7226                    	JC	SHORT TRIPOPJ
 10458                                  	;mov	bx,[si+5]
 10459 0000244E 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 10460                                  	;test	bx,8000h
 10461 00002451 F7C30080                	TEST	BX,sf_isnet	; 8000H		; output to NET?
 10462 00002455 751D                    	JNZ	short TRIPOPJ 			; if so, no echo
 10463                                  	;test	bx,80h
 10464 00002457 F7C38000                	TEST	BX,devid_device ; 80H		; output to file?
 10465 0000245B 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 10466                                  	; 14/03/2018
 10467                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 10468                                  	;jc	short TRIPOPJ
 10469                                  	; MSDOS 2.11
 10470                                  	;test	byte [SI+18H], 80h
 10471                                  	;jz	short TRIPOPJ
 10472 0000245D BB0400                  	MOV	BX,4
 10473 00002460 E8351D                  	CALL	GET_IO_SFT
 10474 00002463 720F                    	JC	SHORT TRIPOPJ
 10475                                  	;test	word [si+5], 800h
 10476 00002465 F744050008              	TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H 
 10477                                  						; StdPrn redirected?
 10478                                  	;JZ	SHORT LISSTRT2J			; No, OK to echo
 10479 0000246A 0F848E00                	jz	LISSTRT2 ; 10/08/2018 
 10480                                  	;MOV	BYTE [PFLAG],0			
 10481 0000246E 36C606[CA02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 10482                                  	; MSDOS 2.11
 10483                                  	;mov	bx,4
 10484                                  	;jmp	short LISSTRT2
 10485                                  	
 10486                                  TRIPOPJ:
 10487                                  	; 20/07/2018
 10488 00002474 E98800                  	JMP	TRIPOP
 10489                                  
 10490                                  ;LISSTRT2J:
 10491                                  ;	JMP	LISSTRT2
 10492                                  
 10493                                  CTRLOUT:
 10494 00002477 3C0D                    	CMP	AL,c_CR ; 0Dh
 10495 00002479 7420                    	JZ	SHORT ZERPOS
 10496 0000247B 3C08                    	CMP	AL,c_BS ; 8
 10497 0000247D 7428                    	JZ	SHORT BACKPOS
 10498 0000247F 3C09                    	CMP	AL,c_HT ; 9
 10499 00002481 759F                    	JNZ	SHORT OUTCH
 10500                                  	;MOV	AL,[CARPOS]
 10501 00002483 36A0[C501]              	MOV	AL,[SS:CARPOS]
 10502 00002487 0CF8                    	OR	AL,0F8H
 10503 00002489 F6D8                    	NEG	AL
 10504                                  
 10505                                  TAB:
 10506 0000248B 51                      	PUSH	CX
 10507 0000248C 88C1                    	MOV	CL,AL
 10508 0000248E B500                    	MOV	CH,0
 10509 00002490 E307                    	JCXZ	POPTAB
 10510                                  TABLP:
 10511 00002492 B020                    	MOV	AL," "
 10512 00002494 E87EFF                  	CALL	OUTT
 10513 00002497 E2F9                    	LOOP	TABLP
 10514                                  POPTAB:
 10515 00002499 59                      	POP	CX
 10516 0000249A C3                      	RETN
 10517                                  
 10518                                  ZERPOS:
 10519                                  	;MOV	BYTE PTR [CARPOS],0
 10520 0000249B 36C606[C501]00          	MOV	BYTE [SS:CARPOS],0
 10521                                  	; 10/08/2018
 10522 000024A1 E97EFF                  	JMP	OUTCH
 10523                                  OUTJ:	
 10524 000024A4 E96EFF                  	JMP	OUTT
 10525                                  
 10526                                  BACKPOS:
 10527                                  	;DEC	BYTE PTR [CARPOS]
 10528 000024A7 36FE0E[C501]            	DEC	BYTE [SS:CARPOS]
 10529 000024AC E973FF                  	JMP	OUTCH
 10530                                  
 10531                                  BUFOUT:
 10532 000024AF 3C20                    	CMP	AL," "
 10533 000024B1 73F1                    	JAE	SHORT OUTJ		;Normal char
 10534 000024B3 3C09                    	CMP	AL,9
 10535 000024B5 74ED                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 10536                                  	;DOS 3.3  7/14/86
 10537 000024B7 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 10538 000024B9 740D                    	JZ	short CTRLU
 10539 000024BB 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 10540 000024BD 7409                    	JZ	short CTRLU
 10541                                  NOT_CTRLU:
 10542                                  	;DOS 3.3  7/14/86
 10543 000024BF 50                      	PUSH	AX
 10544 000024C0 B05E                    	MOV	AL,"^"
 10545 000024C2 E850FF                  	CALL	OUTT		;Print '^' before control chars
 10546 000024C5 58                      	POP	AX
 10547 000024C6 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 10548                                  CTRLU:
 10549 000024C8 E84AFF                  	CALL	OUTT
 10550                                  BUFOUT_RETN:
 10551 000024CB C3                      	RETN
 10552                                  
 10553                                  ;
 10554                                  ;----------------------------------------------------------------------------
 10555                                  ;
 10556                                  ;**	$STD_AUX_INPUT - System Call 3
 10557                                  ;
 10558                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 10559                                  ;
 10560                                  ;	ENTRY	none
 10561                                  ;	EXIT	(al) = character
 10562                                  ;	USES	all
 10563                                  ;
 10564                                  ;----------------------------------------------------------------------------
 10565                                  ;
 10566                                  
 10567                                  _$STD_AUX_INPUT:	;System call 3
 10568                                  
 10569 000024CC E80535                  	CALL	STATCHK
 10570 000024CF BB0300                  	MOV	BX,3
 10571 000024D2 E8C31C                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 10572                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 10573                                  	;retc
 10574 000024D5 72F4                    	JC	SHORT BUFOUT_RETN
 10575 000024D7 EB03                    	JMP	SHORT TAISTRT
 10576                                  AUXILP:
 10577 000024D9 E8D934                  	CALL	SPOOLINT
 10578                                  TAISTRT:
 10579 000024DC B401                    	MOV	AH,1
 10580 000024DE E8A62A                  	CALL	IOFUNC
 10581 000024E1 74F6                    	JZ	SHORT AUXILP
 10582 000024E3 30E4                    	XOR	AH,AH
 10583 000024E5 E89F2A                  	CALL	IOFUNC
 10584 000024E8 C3                      	RETN
 10585                                  
 10586                                  ;
 10587                                  ;----------------------------------------------------------------------------
 10588                                  ;
 10589                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 10590                                  ;
 10591                                  ;	ENTRY	(dl) = character
 10592                                  ;	EXIT	none
 10593                                  ;	USES	all
 10594                                  ;
 10595                                  ;----------------------------------------------------------------------------
 10596                                  ;
 10597                                  
 10598                                  _$STD_AUX_OUTPUT:	;System call 4
 10599                                  
 10600 000024E9 53                      	PUSH	BX
 10601 000024EA BB0300                  	MOV	BX,3
 10602 000024ED EB04                    	JMP	SHORT SENDOUT
 10603                                  
 10604                                  ;
 10605                                  ;----------------------------------------------------------------------------
 10606                                  ;
 10607                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 10608                                  ;
 10609                                  ;	ENTRY	(dl) = character
 10610                                  ;	EXIT	none
 10611                                  ;	USES	all
 10612                                  ;
 10613                                  ;----------------------------------------------------------------------------
 10614                                  ;
 10615                                  
 10616                                  _$STD_PRINTER_OUTPUT:	;System call 5
 10617                                  
 10618 000024EF 53                      	PUSH	BX
 10619 000024F0 BB0400                  	MOV	BX,4
 10620                                  
 10621                                  SENDOUT:
 10622 000024F3 88D0                    	MOV	AL,DL
 10623 000024F5 50                      	PUSH	AX
 10624 000024F6 E8DB34                  	CALL	STATCHK
 10625 000024F9 58                      	POP	AX
 10626 000024FA 1E                      	PUSH	DS
 10627 000024FB 56                      	PUSH	SI
 10628                                  LISSTRT2:
 10629 000024FC E8D0FE                  	CALL	RAWOUT2
 10630                                  TRIPOP:
 10631 000024FF 5E                      	POP	SI
 10632 00002500 1F                      	POP	DS
 10633 00002501 5B                      	POP	BX
 10634                                  SCIS_RETN:	; 20/07/2018
 10635 00002502 C3                      	RETN
 10636                                  ;
 10637                                  ;----------------------------------------------------------------------------
 10638                                  ;
 10639                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 10640                                  ;
 10641                                  ;	Check console input status
 10642                                  ;
 10643                                  ;	ENTRY	none
 10644                                  ;	EXIT	AL = -1 character available, = 0 no character
 10645                                  ;	USES	all
 10646                                  ;
 10647                                  ;----------------------------------------------------------------------------
 10648                                  ;
 10649                                  
 10650                                  _$STD_CON_INPUT_STATUS:		 ;System call 11
 10651                                  
 10652 00002503 E8CE34                  	CALL	STATCHK
 10653 00002506 B000                    	MOV	AL,0			; no xor!!
 10654                                  	;retz
 10655 00002508 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 10656 0000250A 0CFF                    	OR	AL,-1
 10657                                  ;SCIS_RETN:
 10658 0000250C C3                      	RETN
 10659                                  
 10660                                  ;
 10661                                  ;----------------------------------------------------------------------------
 10662                                  ;
 10663                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 10664                                  ;
 10665                                  ;	Flush console input buffer and perform call in AL
 10666                                  ;
 10667                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 10668                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 10669                                  ;		return arguments for the fcn supplied in (AL)
 10670                                  ;	USES	all
 10671                                  ;
 10672                                  ;----------------------------------------------------------------------------
 10673                                  ;
 10674                                  
 10675                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 10676                                  
 10677 0000250D 50                      	PUSH	AX
 10678 0000250E 52                      	PUSH	DX
 10679 0000250F 31DB                    	XOR	BX,BX
 10680 00002511 E8841C                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 10681                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 10682 00002514 7205                    	JC	SHORT BADJFNCON
 10683 00002516 B404                    	MOV	AH,4
 10684 00002518 E86C2A                  	CALL	IOFUNC
 10685                                  
 10686                                  BADJFNCON:
 10687 0000251B 5A                      	POP	DX
 10688 0000251C 58                      	POP	AX
 10689 0000251D 88C4                    	MOV	AH,AL
 10690 0000251F 3C01                    	CMP	AL,1
 10691 00002521 7413                    	JZ	SHORT REDISPJ
 10692 00002523 3C06                    	CMP	AL,6
 10693 00002525 740F                    	JZ	SHORT REDISPJ
 10694 00002527 3C07                    	CMP	AL,7
 10695 00002529 740B                    	JZ	SHORT REDISPJ
 10696 0000252B 3C08                    	CMP	AL,8
 10697 0000252D 7407                    	JZ	SHORT REDISPJ
 10698 0000252F 3C0A                    	CMP	AL,10
 10699 00002531 7403                    	JZ	SHORT REDISPJ
 10700 00002533 B000                    	MOV	AL,0
 10701 00002535 C3                      	RETN
 10702                                  
 10703                                  REDISPJ:
 10704 00002536 FA                      	CLI
 10705                                  	;transfer REDISP
 10706 00002537 E949F0                  	JMP	REDISP
 10707                                  
 10708                                  ;============================================================================
 10709                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 10710                                  ;============================================================================
 10711                                  ; 20/07/2018 - Retro DOS v3.0
 10712                                  ; 17/05/2019 - Retro DOS v4.0
 10713                                  ; 24/07/2019 - Retro DOS v3.2
 10714                                  
 10715                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 10716                                  ;
 10717                                  ;	$GET_FCB_POSITION
 10718                                  ;	$FCB_DELETE
 10719                                  ;	$GET_FCB_FILE_LENGTH
 10720                                  ;	$FCB_CLOSE
 10721                                  ;	$FCB_RENAME
 10722                                  ;	SaveFCBInfo
 10723                                  ;	ResetLRU
 10724                                  ;	SetOpenAge
 10725                                  ;	LRUFCB
 10726                                  ;	FCBRegen
 10727                                  ;	BlastSFT
 10728                                  ;	CheckFCB
 10729                                  ;	SFTFromFCB
 10730                                  ;	FCBHardErr
 10731                                  ;
 10732                                  ;	Revision history:
 10733                                  ;
 10734                                  ;		Created: ARR 4 April 1983"
 10735                                  ;			 MZ  6 June  1983 completion of functions
 10736                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 10737                                  ;					  times.  Change so successive closes work by
 10738                                  ;					  always returning OK.	Also, detect I/O to
 10739                                  ;					  already closed FCB and return EOF.
 10740                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 10741                                  ;					  out of sft into FCB for reconnection
 10742                                  ;
 10743                                  ;		A000	 version 4.00  Jan. 1988
 10744                                  
 10745                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 10746                                  ;----------------------------------------------------------------------------
 10747                                  ;
 10748                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 10749                                  ;	extent and next record field and set the random record field to point
 10750                                  ;	to that record
 10751                                  ;
 10752                                  ;   Inputs:	DS:DX point to a possible extended FCB
 10753                                  ;   Outputs:	The random record field of the FCB is set to the current record
 10754                                  ;   Registers modified: all
 10755                                  ;
 10756                                  ;----------------------------------------------------------------------------
 10757                                  ;
 10758                                  
 10759                                  _$GET_FCB_POSITION:
 10760 0000253A E8F104                  	call	GetExtended		; point to FCB
 10761 0000253D E8C104                  	call	GetExtent		; DX:AX is current record
 10762                                  	;mov	[si+21h],ax
 10763 00002540 894421                  	MOV	[SI+SYS_FCB.RR],AX ; drop in low order piece
 10764                                  	;mov	[si+23h],dl
 10765 00002543 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 10766                                  	;cmp	word [si+0Eh],64
 10767 00002546 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 10768 0000254A 7303                    	JAE	short GetFCBBye
 10769                                  	;mov	[si+24h],dh
 10770 0000254C 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 10771                                  GetFCBBye:
 10772 0000254F E965F2                  	jmp	FCB_RET_OK
 10773                                  
 10774                                  
 10775                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 10776                                  ;----------------------------------------------------------------------------
 10777                                  ;
 10778                                  ;**	$FCB_Delete - Delete from FCB Template
 10779                                  ;
 10780                                  ;	given an FCB, remove all directory entries in the current
 10781                                  ;	directory that have names that match the FCB's ?  marks.
 10782                                  ;
 10783                                  ;	ENTRY	(DS:DX) = address of FCB
 10784                                  ;	EXIT	entries matching the FCB are deleted
 10785                                  ;		(al) = ff iff no entries were deleted
 10786                                  ;	USES	all
 10787                                  ;
 10788                                  ;----------------------------------------------------------------------------
 10789                                  ;
 10790                                  
 10791                                  _$FCB_DELETE:		; System call 19
 10792                                  					; OpenBuf is in DOSDATA
 10793 00002552 BF[8203]                	MOV	DI,OPENBUF 		; appropriate place 
 10794                                  
 10795 00002555 E8D847                  	call	TransFCB		; convert FCB to path
 10796 00002558 720A                    	JC	short BadPath 		; signal no deletions
 10797                                  
 10798 0000255A 16                      	push	SS
 10799 0000255B 1F                      	pop	DS			; SS is DOSDATA
 10800                                  
 10801 0000255C E8820D                  	call	DOS_DELETE		; wham
 10802 0000255F 7203                    	JC	short BadPath
 10803                                  GoodPath:
 10804 00002561 E953F2                  	jmp	FCB_RET_OK		; do a good return
 10805                                  BadPath:
 10806                                  	; Error code is in AX
 10807                                  
 10808 00002564 E953F2                  	jmp	FCB_RET_ERR		; let someone else signal the error
 10809                                  
 10810                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 10811                                  ;----------------------------------------------------------------------------
 10812                                  ;
 10813                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 10814                                  ;	file in records (rounded up if partial).
 10815                                  ;
 10816                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 10817                                  ;   Outputs:	Random record field updated to reflect the number of records
 10818                                  ;   Registers modified: all
 10819                                  ;
 10820                                  ;----------------------------------------------------------------------------
 10821                                  ;
 10822                                  
 10823                                  _$GET_FCB_FILE_LENGTH:
 10824 00002567 E8C404                  	call	GetExtended		; get real FCB pointer
 10825                                  					; DX points to Input FCB
 10826                                  
 10827                                  					; OpenBuf is in DOSDATA
 10828 0000256A BF[8203]                	MOV	DI,OPENBUF		; appropriate buffer
 10829                                  
 10830 0000256D 1E                      	push	ds			; save pointer to true FCB
 10831 0000256E 56                      	push	si
 10832 0000256F E8BE47                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 10833 00002572 5E                      	pop	si
 10834 00002573 1F                      	pop	ds
 10835 00002574 72EE                    	JC	short BadPath
 10836 00002576 1E                      	push	ds			; save pointer
 10837 00002577 56                      	push	si
 10838 00002578 16                      	push	ss		
 10839 00002579 1F                      	pop	ds
 10840 0000257A E8E710                  	call	GET_FILE_INFO		; grab the info
 10841 0000257D 5E                      	pop	si			; get pointer back
 10842 0000257E 1F                      	pop	ds
 10843 0000257F 72E3                    	JC	short BadPath 		; invalid something
 10844 00002581 89DA                    	MOV	DX,BX			; get high order size
 10845 00002583 89F8                    	MOV	AX,DI			; get low order size
 10846                                  	;mov	bx,[si+0Eh]
 10847 00002585 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 10848 00002588 09DB                    	OR	BX,BX			; empty record => 0 size for file
 10849 0000258A 7503                    	JNZ	short GetSize 		; not empty
 10850 0000258C BB8000                  	MOV	BX,128
 10851                                  GetSize:
 10852 0000258F 89C7                    	MOV	DI,AX			; save low order word
 10853 00002591 89D0                    	MOV	AX,DX			; move high order for divide
 10854 00002593 31D2                    	XOR	DX,DX			; clear out high
 10855 00002595 F7F3                    	DIV	BX			; wham
 10856 00002597 50                      	PUSH	AX			; save dividend
 10857 00002598 89F8                    	MOV	AX,DI			; get low order piece
 10858 0000259A F7F3                    	DIV	BX			; wham
 10859 0000259C 89D1                    	MOV	CX,DX			; save remainder
 10860 0000259E 5A                      	POP	DX			; get high order dividend
 10861 0000259F E306                    	JCXZ	LengthStore		; no roundup
 10862 000025A1 83C001                  	ADD	AX,1
 10863 000025A4 83D200                  	ADC	DX,0			; 32-bit increment
 10864                                  LengthStore:
 10865                                  	;mov	[si+21h],ax
 10866 000025A7 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 10867                                  	;mov	[si+23h],dl
 10868 000025AA 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 10869 000025AD 08F6                    	OR	DH,DH
 10870 000025AF 74B0                    	JZ	short GoodPath		; not storing insignificant zero
 10871                                  	;mov	[si+24h],dh
 10872 000025B1 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 10873                                  GoodRet:
 10874                                  	;jmp	FCB_RET_OK
 10875 000025B4 EBAB                    	jmp	short GoodPath
 10876                                  
 10877                                  ;Break <$FCB_Close - close a file>
 10878                                  ;----------------------------------------------------------------------------
 10879                                  ;
 10880                                  ;   $FCB_Close - given an FCB, look up the SFN and close it.  Do not free it
 10881                                  ;	as the FCB may be used for further I/O
 10882                                  ;
 10883                                  ;   Inputs:	DS:DX point to FCB
 10884                                  ;   Outputs:	AL = FF if file was not found on disk
 10885                                  ;   Registers modified: all
 10886                                  ;
 10887                                  ;----------------------------------------------------------------------------
 10888                                  ;
 10889                                  
 10890                                  _$FCB_CLOSE:		; System call 16
 10891                                  
 10892 000025B6 30C0                    	XOR	AL,AL			; default search attributes
 10893 000025B8 E87304                  	call	GetExtended		; DS:SI point to real FCB
 10894 000025BB 7403                    	JZ	short NoAttr		; not extended
 10895 000025BD 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 10896                                  NoAttr:
 10897                                  					; SS override
 10898 000025C0 36A2[2805]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 10899 000025C4 E8DC03                  	call	SFTFromFCB
 10900 000025C7 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 10901                                  
 10902                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 10903                                  	; there is no need to set the SFT's attribute.
 10904                                  
 10905                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 10906                                  	;;; done
 10907                                  
 10908                                  	;mov	al,[es:di+4]
 10909 000025C9 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 10910 000025CD 30E4                    	XOR	AH,AH
 10911 000025CF 50                      	PUSH	AX
 10912                                  
 10913                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 10914                                  	;;; done
 10915                                  
 10916 000025D0 E89550                  	call	CheckShare
 10917 000025D3 7508                    	JNZ	short NoStash
 10918 000025D5 36A0[2805]              	MOV	AL,[SS:ATTRIB]
 10919                                  	;mov	[es:di+4],al
 10920 000025D9 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 10921                                  NoStash:
 10922                                  	;mov	ax,[si+14h]
 10923 000025DD 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 10924                                  	;mov	[es:di+0Fh],ax
 10925 000025E0 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 10926                                  	;mov	ax,[si+16h]
 10927 000025E4 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 10928                                  	;mov	[es:di+0Dh],ax
 10929 000025E7 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 10930                                  	;mov	ax,[si+10h]
 10931 000025EB 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 10932                                  	;mov	[es:di+11h],ax
 10933 000025EE 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 10934                                  	;mov	ax,[si+12h]
 10935 000025F2 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 10936                                  	;mov	[es:di+13h],ax
 10937 000025F5 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 10938                                  	;or	word [es:di+5],4000h
 10939 000025F9 26814D050040            	OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 10940 000025FF 16                      	push	ss
 10941 00002600 1F                      	pop	ds
 10942 00002601 E82F15                  	call	DOS_CLOSE	; wham
 10943 00002604 C43E[5A05]              	LES	DI,[THISSFT]
 10944                                  
 10945                                  	;;; 9/8/86 F.C. restore SFT attribute
 10946 00002608 59                      	POP	CX
 10947                                  	;mov	[es:di+4],cl
 10948 00002609 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 10949                                  	;;; 9/8/86 F.C. restore SFT attribute
 10950                                  
 10951 0000260D 9C                      	PUSHF
 10952                                  	;test	word [es:di],0FFFFh
 10953                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 10954                                  				; zero ref count gets blasted
 10955 0000260E 26833D00                	cmp	word [ES:DI],0
 10956 00002612 7507                    	jnz     short CloseOK
 10957 00002614 50                      	PUSH	AX
 10958 00002615 B04D                    	MOV	AL,'M'
 10959 00002617 E8F602                  	call	BlastSFT
 10960 0000261A 58                      	POP	AX
 10961                                  CloseOK:
 10962 0000261B 9D                      	POPF
 10963 0000261C 7396                    	JNC	short GoodRet
 10964                                  	;cmp	al,6
 10965 0000261E 3C06                    	CMP	AL,error_invalid_handle
 10966 00002620 7492                    	JZ	short GoodRet
 10967                                  	;mov	al,2
 10968 00002622 B002                    	MOV	AL,error_file_not_found
 10969                                  fcb_close_err:
 10970 00002624 E993F1                  	jmp	FCB_RET_ERR
 10971                                  
 10972                                  ;
 10973                                  ;----------------------------------------------------------------------------
 10974                                  ;
 10975                                  ;**	$FCB_Rename - Rename a File
 10976                                  ;
 10977                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 10978                                  ;	multiple files copying from the meta characters.
 10979                                  ;
 10980                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 10981                                  ;		    name of the files to be renamed. Starting at offset 11h
 10982                                  ;		    in the FCB is the destination name.
 10983                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 10984                                  ;		AL = FF -> some files may have been renamed but:
 10985                                  ;			rename to existing file or source file not found
 10986                                  ;	USES	ALL
 10987                                  ;
 10988                                  ;----------------------------------------------------------------------------
 10989                                  ;
 10990                                  
 10991                                  _$FCB_RENAME:		; System call 23
 10992                                  
 10993 00002627 E80404                  	call	GetExtended		; get pointer to real FCB
 10994 0000262A 52                      	push	dx
 10995 0000262B 8A04                    	MOV	AL,[SI] 		; get drive byte
 10996 0000262D 83C610                  	ADD	SI,10h			; point to destination
 10997                                  
 10998                                  					; RenBuf is in DOSDATA
 10999 00002630 BF[0204]                	MOV	DI,RENBUF		; point to destination buffer
 11000 00002633 FF34                    	push	word [SI]
 11001 00002635 1E                      	push	ds
 11002                                  	;push	di			; save source pointer for TransFCB
 11003                                  	; 16/01/2024 - BugFix !
 11004 00002636 56                      	push	si
 11005 00002637 8804                    	MOV	[SI],AL			; drop in real drive
 11006 00002639 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11007 0000263B E8F246                  	call	TransFCB		; munch this pathname
 11008 0000263E 5E                      	pop	si
 11009 0000263F 1F                      	pop	ds	
 11010 00002640 8F04                    	pop	WORD [SI]		; get path back
 11011 00002642 5A                      	pop	dx			; Original FCB pointer
 11012 00002643 721A                    	JC	short fren90		; bad path -> error
 11013                                  
 11014                                  					; SS override for WFP_Start & Ren_WFP
 11015 00002645 368B36[6E05]            	MOV	SI,[ss:WFP_START]	; get pointer
 11016 0000264A 368936[7005]            	MOV	[ss:REN_WFP],SI		; stash it
 11017                                  
 11018                                  					; OpenBuf is in DOSDATA
 11019 0000264F BF[8203]                	MOV	DI,OPENBUF		; appropriate spot
 11020 00002652 E8DB46                  	call	TransFCB		; wham
 11021                                  					; NOTE that this call is pointing
 11022                                  					;  back to the ORIGINAL FCB so
 11023                                  					;  SATTRIB gets set correctly
 11024 00002655 7208                    	JC	short fren90		; error
 11025 00002657 E8320E                  	call	DOS_RENAME
 11026 0000265A 7203                    	JC	short fren90
 11027 0000265C E958F1                  	jmp	FCB_RET_OK
 11028                                  
 11029                                  ;	Error -
 11030                                  ;
 11031                                  ;	(al) = error code
 11032                                  
 11033                                  fren90:	
 11034 0000265F E958F1                  	jmp	FCB_RET_ERR
 11035                                  
 11036                                  ;Break <Misbehavior fixers>
 11037                                  ;
 11038                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11039                                  ;   user's space so he may move them at will. Second, they have a small
 11040                                  ;   reserved area that may be used for system information. Third, there was
 11041                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11042                                  ;   usage.
 11043                                  ;
 11044                                  ;   This results in the following misbehavior:
 11045                                  ;
 11046                                  ;	infinite opens of the same file:
 11047                                  ;
 11048                                  ;	While (TRUE) {			While (TRUE) {
 11049                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11050                                  ;	    Read (FCB); 		    Write (FCB);
 11051                                  ;	    }				    }
 11052                                  ;
 11053                                  ;	infinite opens of different files:
 11054                                  ;
 11055                                  ;	While (TRUE) {			While (TRUE) {
 11056                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11057                                  ;	    Read (FCB); 		    Write (FCB);
 11058                                  ;	    }				    }
 11059                                  ;
 11060                                  ;	multiple closes of the same file:
 11061                                  ;
 11062                                  ;	FCBOpen (FCB);
 11063                                  ;	while (TRUE)
 11064                                  ;	    FCBClose (FCB);
 11065                                  ;
 11066                                  ;	I/O after closing file:
 11067                                  ;
 11068                                  ;	FCBOpen (FCB);
 11069                                  ;	while (TRUE) {
 11070                                  ;	    FCBWrite (FCB);
 11071                                  ;	    FCBClose (FCB);
 11072                                  ;	    }
 11073                                  ;
 11074                                  ;   The following is am implementation of a methodology for emulating the
 11075                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11076                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11077                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11078                                  ;   the local machine.
 11079                                  ;
 11080                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11081                                  ;   structures depending on the file itself and the state of operations of the
 11082                                  ;   OS. The information contained in this reserved field is enough to
 11083                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11084                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11085                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11086                                  ;
 11087                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11088                                  ;
 11089                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11090                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11091                                  ;   regenerated.
 11092                                  ;
 11093                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11094                                  ;   longer available. We can make up for this by using the following
 11095                                  ;   information:
 11096                                  ;
 11097                                  ;	The Drive number (from the DPB).
 11098                                  ;	The physical sector of the directory that contains the entry.
 11099                                  ;	The relative position of the entry in the sector.
 11100                                  ;	The first cluster field.
 11101                                  ;	The last used SFT.
 11102                                  ;      OR In the case of a device FCB
 11103                                  ;	The low 6 bits of sf_flags (indicating device type)
 11104                                  ;	The pointer to the device header
 11105                                  ;
 11106                                  ;   We read in the particular directory sector and examine the indicated
 11107                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11108                                  ;
 11109                                  ;   Some key items need to be remembered:
 11110                                  ;
 11111                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11112                                  ;	information. We enforce good behavior on the FCBs.
 11113                                  ;
 11114                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11115                                  ;	open VCs. The VCs may be closed only at process termination.
 11116                                  ;
 11117                                  ;	If this is not an installed version of the DOS, file sharing will
 11118                                  ;	always be present.
 11119                                  ;
 11120                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11121                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11122                                  ;
 11123                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11124                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11125                                  ;	proper OI record.
 11126                                  ;
 11127                                  ;   The test bits are:
 11128                                  ;
 11129                                  ;	00 -> local file
 11130                                  ;	40 -> sharing local
 11131                                  ;	80 -> network
 11132                                  ;	C0 -> local device
 11133                                  
 11134                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11135                                  ;----------------------------------------------------------------------------
 11136                                  ;
 11137                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11138                                  ;	pieces of information into the FCB to allow for subsequent
 11139                                  ;	regeneration. Poke LRU also.
 11140                                  ;
 11141                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11142                                  ;		DS:SI point to the FCB (not an extended one)
 11143                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11144                                  ;		DS:SI preserved
 11145                                  ;		ES:DI point to sft
 11146                                  ;   Registers modified: All
 11147                                  ;
 11148                                  ;
 11149                                  ;----------------------------------------------------------------------------
 11150                                  ;
 11151                                  
 11152                                  SaveFCBInfo:
 11153                                  
 11154 00002662 36C43E[5A05]            	LES	DI,[SS:THISSFT]		; SS override
 11155 00002667 E81CFA                  	call	IsSFTNet
 11156 0000266A 740B                    	JZ	short SaveLocal		; if not network then save local info
 11157                                  ;
 11158                                  ;----- In net support -----
 11159                                  ;
 11160                                  	; 17/05/2019 - Retro DOS v4.0
 11161                                  	; 24/07/2019 - Retro DOS v3.2
 11162                                  
 11163                                  	; MSDOS 3.3
 11164                                  	;;mov	ax,[es:di+1Dh]
 11165                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 11166                                  	;;mov	[si+1Ah],ax
 11167                                  	;mov	[si+fcb_net_handle],ax
 11168                                  	;push	es
 11169                                  	;push	di
 11170                                  	;;les	di,[es:di+19h]
 11171                                  	;LES	DI,[ES:DI+sf_netid]
 11172                                  	;;mov	[si+1Ch],di
 11173                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 11174                                  	;;mov 	[si+1Eh],es
 11175                                  	;MOV	[SI+fcb_netID+2],ES
 11176                                  	;pop	di
 11177                                  	;pop	es
 11178                                  
 11179                                  	; MSDOS 6.0
 11180                                  	;mov	ax,[es:di+0Bh]
 11181 0000266C 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 11182                                  	;mov	[si+1Ch],ax
 11183 00002670 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 11184                                  	
 11185                                  	;mov	bl,80h
 11186 00002673 B380                    	MOV	BL,FCBNETWORK
 11187                                  ;
 11188                                  ;----- END In net support -----
 11189                                  ;
 11190 00002675 EB65                    	jmp	SHORT SaveSFN
 11191                                  
 11192                                  SaveLocal:
 11193                                  	;IF	Installed
 11194 00002677 E8EE4F                  	call	CheckShare
 11195                                  	;JZ	short SaveNoShare	; no sharer
 11196                                  	;JMP	short SaveShare		; sharer present
 11197                                  	; 28/07/2019
 11198 0000267A 755B                    	jnz	short SaveShare
 11199                                  
 11200                                  SaveNoShare:
 11201                                  	;;test 	word [es:di+5],80h
 11202                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 11203 0000267C 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 11204 00002681 7542                    	JNZ	short SaveNoShareDev	; Device
 11205                                  
 11206                                  	; Save no sharing local file information
 11207                                  
 11208                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 11209                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 11210 00002683 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11211                                  	;mov	[si+1Dh],ax
 11212 00002687 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11213                                  
 11214                                  	; MSDOS 6.0
 11215                                  
 11216                                  	;SR; Store high byte of directory sector
 11217                                  	;mov	ax,[es:di+1Dh]
 11218 0000268A 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11219                                  	
 11220                                  	; SR;
 11221                                  	; We have to store the read-only and archive attributes of the file.
 11222                                  	; We extract it from the SFT and store it in the top two bits of the 
 11223                                  	; sector number ( sector number == 22 bits only )
 11224                                  
 11225                                  	;mov	bl,[es:di+4]
 11226 0000268E 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 11227 00002692 88DF                    	mov	bh,bl
 11228 00002694 D0CB                    	ror	bl,1
 11229 00002696 D0E7                    	shl	bh,1
 11230 00002698 08FB                    	or	bl,bh
 11231 0000269A 80E3C0                  	and	bl,0C0h
 11232 0000269D 08D8                    	or	al,bl
 11233 0000269F 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 11234                                  
 11235                                  	; MSDOS 6.0 (& MSDOS 3.3)
 11236                                  	;mov	al,[es:di+1Fh]
 11237 000026A2 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11238                                  	;mov	[si+1Fh],al
 11239 000026A6 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11240                                  	;mov	ax,[es:di+0Bh]
 11241 000026A9 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11242                                  	;mov	[si+1Bh],ax
 11243 000026AD 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11244 000026B0 B300                    	MOV	BL,0
 11245                                  
 11246                                  	; Create the bits field from the dirty/device bits of the flags word 
 11247                                  	; and the mode byte
 11248                                  
 11249                                  SetFCBBits:
 11250                                  	;mov	ax,[es:di+5]
 11251 000026B2 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11252 000026B6 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11253                                  	;or	al,[es:di+2]
 11254 000026B8 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11255                                  	;mov	[si+1Ah], al
 11256 000026BC 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11257                                  
 11258                                  	; MSDOS 6.0
 11259                                  	
 11260                                  	; SR;
 11261                                  	; Check if we came here for local file or device. If for local file, 
 11262                                  	; skip setting of SFT index
 11263                                  	
 11264 000026BF 08DB                    	or	bl,bl
 11265 000026C1 742A                    	jz	short SaveNoSFN		; do not save SFN if local file
 11266                                  
 11267 000026C3 EB17                    	JMP	short SaveSFN 		; go and save SFN
 11268                                  
 11269                                  	; Save no sharing local device information
 11270                                  
 11271                                  SaveNoShareDev:
 11272                                  	;mov	ax,[es:di+7]
 11273 000026C5 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11274                                  	;mov	[si+1Ah],ax
 11275 000026C9 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11276                                  	;mov	ax,[es:di+9]
 11277 000026CC 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11278 000026D0 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11279                                  	;mov	bl,40h
 11280 000026D3 B340                    	MOV	BL,FCBDEVICE
 11281 000026D5 EBDB                    	JMP	SetFCBBits		; go and save SFN
 11282                                  
 11283                                  SaveShare:
 11284                                  	;ENDIF
 11285                                  ;
 11286                                  ;----- In share support -----
 11287                                  ;
 11288                                  	;call	far [ss:ShSave]
 11289 000026D7 36FF1E[8400]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11290                                  ;
 11291                                  ;----- end in share support -----
 11292                                  ;
 11293                                  	; 17/05/2019 - Retro DOS v4.0
 11294                                  SaveSFN:
 11295                                  	; 24/07/2019 - Retro DOS v3.2
 11296                                  	;lea	ax,[di-6]
 11297 000026DC 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11298                                  	
 11299                                  	; Adjust for offset to table.
 11300                                  	
 11301 000026DF 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11302                                  
 11303 000026E4 53                      	push	bx			;bx = FCB type (net/Share or local)
 11304                                  	;;mov	bl,53 ; MSDOS 3.3
 11305                                  	;mov	bl,59 ; MSDOS 6.0
 11306 000026E5 B33B                    	MOV	BL,SF_ENTRY.size
 11307 000026E7 F6F3                    	DIV	BL
 11308                                  	;mov	[si+18h],al
 11309 000026E9 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11310 000026EC 5B                      	pop	bx			;restore bx
 11311                                  
 11312                                  SaveNoSFN:
 11313                                  	;mov	ax,[es:di+5]
 11314 000026ED 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11315 000026F1 243F                    	AND	AL,3Fh			; get real drive
 11316 000026F3 08D8                    	OR	AL,BL
 11317                                  	;mov	[si+19h],al
 11318 000026F5 884419                  	MOV	[SI+fcb_l_drive],AL
 11319                                  
 11320 000026F8 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11321 000026FC 40                      	INC	AX
 11322                                  	;mov	[es:di+15h],ax
 11323 000026FD 26894515                	MOV	[ES:DI+sf_LRU],AX
 11324 00002701 7506                    	JNZ	short SimpleStuff
 11325                                  	
 11326                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 11327                                  	; LRU < 8000H get set to 0. Others -= 8000h.  This LRU = 8000h
 11328                                  	
 11329                                  	;mov	bx,15h
 11330 00002703 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11331 00002706 E80500                  	call	ResetLRU
 11332                                  
 11333                                  	; Set new LRU to AX
 11334                                  SimpleStuff:
 11335 00002709 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11336 0000270D C3                      	retn
 11337                                  
 11338                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11339                                  ;----------------------------------------------------------------------------
 11340                                  ;
 11341                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 11342                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11343                                  ;   at 0.
 11344                                  ;
 11345                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11346                                  ;		ES:DI point to SFT currently being updated
 11347                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11348                                  ;		AX has 8000h
 11349                                  ;   Registers modified: none
 11350                                  ;
 11351                                  ;----------------------------------------------------------------------------
 11352                                  ;
 11353                                  	; 24/07/2019 - Retro DOS v3.2
 11354                                  ResetLRU:
 11355                                  
 11356                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11357                                  	; DOSDATA
 11358                                  
 11359 0000270E B80080                  	MOV	AX,8000h
 11360 00002711 06                      	push	es
 11361 00002712 57                      	push	di
 11362 00002713 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		; get pointer to head
 11363                                  	;LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 11364                                  	;mov	cx,[es:di+4]
 11365 00002718 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11366                                  	;lea	di,[di+6]
 11367 0000271C 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 11368                                  ovScan:
 11369 0000271F 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 11370 00002722 7703                    	JA	short ovLoop
 11371 00002724 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 11372                                  ovLoop:
 11373                                  	;;add	di,53	; MSDOS 3.3
 11374                                  	;add	di,59	; MSDOS 6.0
 11375 00002727 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 11376 0000272A E2F3                    	LOOP	ovScan
 11377 0000272C 5F                      	pop	di
 11378 0000272D 07                      	pop	es
 11379 0000272E 268901                  	MOV	[ES:DI+BX],AX
 11380 00002731 C3                      	retn
 11381                                  
 11382                                  ; 24/07/2019 - Retro DOS v3.2
 11383                                  
 11384                                  ;IF  0  ; We dont need this routine any more.
 11385                                  ;
 11386                                  ;Break	<SetOpenAge - update the open age of a SFT>
 11387                                  ;----------------------------------------------------------------------------
 11388                                  ;
 11389                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 11390                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 11391                                  ;   count here and fill in the appropriate field.
 11392                                  ;
 11393                                  ;   Inputs:	ES:DI point to SFT
 11394                                  ;   Outputs:	ES:DI has the open age field filled in.
 11395                                  ;		If open age has wraparound, we will have subtracted 8000h
 11396                                  ;		    from all open ages.
 11397                                  ;   Registers modified: AX
 11398                                  ;
 11399                                  ;----------------------------------------------------------------------------
 11400                                  ;
 11401                                  ;SetOpenAge:
 11402                                  ;	; 20/07/2018 - Retro DOS v3.0
 11403                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 11404                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 11405                                  ;
 11406                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 11407                                  ;
 11408                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 11409                                  ;	INC	AX
 11410                                  ;	;mov	[es:di+17h],ax
 11411                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 11412                                  ;	JNZ	short SetDone
 11413                                  ;	;mov	bx,17h
 11414                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 11415                                  ;	call	ResetLRU
 11416                                  ;SetDone:
 11417                                  ;	MOV	[CS:OpenLRU],AX
 11418                                  ;	retn
 11419                                  ;
 11420                                  ;ENDIF	; SetOpenAge no longer needed
 11421                                  
 11422                                  ; 24/07/2019 - Retro DOS v3.2
 11423                                  
 11424                                  ; LRUFCB for MSDOS 6.0 !
 11425                                  
 11426                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 11427                                  ;----------------------------------------------------------------------------
 11428                                  ;
 11429                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 11430                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 11431                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 11432                                  ;
 11433                                  ;   Inputs:	none
 11434                                  ;   Outputs:	ES:DI point to SFT
 11435                                  ;		ThisSFT points to SFT
 11436                                  ;		SFT is zeroed
 11437                                  ;		Carry set of closes failed
 11438                                  ;   Registers modified: none
 11439                                  ;
 11440                                  ;----------------------------------------------------------------------------
 11441                                  ;
 11442                                  ; MSDOS 6.0
 11443                                  ;IF 0	; rewritten this routine
 11444                                  ;
 11445                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 11446                                  ;	call	save_world
 11447                                  ;	
 11448                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 11449                                  ; to find the lease recently used one that is younger than the open age.  We
 11450                                  ; operate be scanning the list n times finding the least age that is greater
 11451                                  ; or equal to the previous minimum age.
 11452                                  ;
 11453                                  ;   BP is the count of times we need to go through this loop.
 11454                                  ;   AX is the current acceptable minimum age to consider
 11455                                  ;
 11456                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 11457                                  ;	XOR	AX,AX			; low = 0;
 11458                                  ;
 11459                                  ; If we've scanned the table n times, then we are done.
 11460                                  ;
 11461                                  ;lru1:
 11462                                  ;	CMP	bp,0			; while (k--) {
 11463                                  ;	JZ	short lru75
 11464                                  ;	DEC	bp
 11465                                  ;
 11466                                  ; Set up for scan.
 11467                                  ;
 11468                                  ;   AX is the minimum age for consideration
 11469                                  ;   BX is the minimum age found during the scan
 11470                                  ;   SI is the position of the entry that corresponds to BX
 11471                                  ;
 11472                                  ;	MOV	BX,-1			;     min = 0xffff;
 11473                                  ;	MOV	si,BX			;     pos = 0xffff;
 11474                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 11475                                  ;	;mov	cx,[es:di+4]
 11476                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 11477                                  ;	;lea	di,[di+6]
 11478                                  ;	LEA	DI,[DI+SFT.SFTable]
 11479                                  ;
 11480                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 11481                                  ; current entry is busy (indicating a previous aborted allocation), then we
 11482                                  ; are done.  In both cases, we use the found entry.
 11483                                  ;
 11484                                  ;lru2:
 11485                                  ;	cmp	word [es:di],0
 11486                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 11487                                  ;	jz	short lru25
 11488                                  ;	;cmp	word [es:di],-1
 11489                                  ;	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 11490                                  ;	cmp	word [es:di],sf_busy
 11491                                  ;	jnz	short lru3
 11492                                  ;
 11493                                  ; The entry is usable without further scan.  Go and use it.
 11494                                  ;
 11495                                  ;lru25:
 11496                                  ;	MOV	si,DI			;	      pos = i;
 11497                                  ;	JMP	short lru11		;	      goto got;
 11498                                  ;
 11499                                  ; See if the entry is for the network or for the sharer.
 11500                                  ;
 11501                                  ;  If for the sharer or network then
 11502                                  ;	if the age < current minimum AND >= allowed minimum then
 11503                                  ;	    this entry becomes current minimum
 11504                                  ;
 11505                                  ;lru3:
 11506                                  ;	;test	word [es:di+5],8000h
 11507                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 11508                                  ;					;	  if (!net[i]
 11509                                  ;	JNZ	short lru35
 11510                                  ;if installed
 11511                                  ;	call	CheckShare		;		&& !sharing)
 11512                                  ;	JZ	short lru5		;	  else
 11513                                  ;ENDIF
 11514                                  ;
 11515                                  ; This SFT is for the net or is for the sharer. See if it less than the
 11516                                  ; current minimum.
 11517                                  ;
 11518                                  ;lru35:
 11519                                  ;	;mov	dx,[es:di+17h]
 11520                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 11521                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 11522                                  ;	JB	short lru5
 11523                                  ;	CMP	DX,BX
 11524                                  ;	JAE	short lru5		;	      age[i] < min) {
 11525                                  ;
 11526                                  ; entry is new minimum.  Remember his age.
 11527                                  ;
 11528                                  ;	mov	bx,DX			;	      min = age[i];
 11529                                  ;	mov	si,di			;	      pos = i;
 11530                                  ;
 11531                                  ; End of loop.	gp back for more
 11532                                  ;
 11533                                  ;lru5:
 11534                                  ;	;add	di,53
 11535                                  ;	add	di,SF_ENTRY.size
 11536                                  ;	loop	lru2			;	      }
 11537                                  ;
 11538                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 11539                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 11540                                  ; complete.  Go find LRU.
 11541                                  ;
 11542                                  ;lru6:	
 11543                                  ;	cmp	si,-1			; position not -1?
 11544                                  ;	jz	short lru75		; no, done with everything
 11545                                  ;	lea	ax,[bx+1]		; set new threshold age
 11546                                  ;	jmp	short lru1		; go and loop for more
 11547                                  ;lru65:	
 11548                                  ;	stc
 11549                                  ;	jmp	short LRUDead		;	  return -1;
 11550                                  ;
 11551                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 11552                                  ; network entry. We now make a second pass through to find the LRU entry
 11553                                  ; that is local-no-share or has age >= AX
 11554                                  ;
 11555                                  ;lru75:
 11556                                  ;	mov	bx,-1			; min = 0xffff;
 11557                                  ;	mov	si,bx			; pos = 0xffff;
 11558                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 11559                                  ;	;mov	cx,[es:di+4]
 11560                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 11561                                  ;	;lea	di,[di+6]
 11562                                  ;	LEA	DI,[DI+SFT.SFTable]
 11563                                  ;
 11564                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 11565                                  ; then check for lru.
 11566                                  ;
 11567                                  ;lru8:
 11568                                  ;	;test	word [es:di+5],8000h
 11569                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 11570                                  ;	jnz	short lru85		; is for network, go check age
 11571                                  ;	call	CheckShare		; sharer here?
 11572                                  ;	jz	short lru86		; no, go check lru
 11573                                  ;
 11574                                  ; Network or sharer.  Check age
 11575                                  ;
 11576                                  ;lru85:
 11577                                  ;	;cmp	[es:di+17h],ax
 11578                                  ;	cmp	[es:di+sf_OpenAge],ax
 11579                                  ;	jb	short lru9		; age is before threshold, skip it
 11580                                  ;
 11581                                  ; Check LRU
 11582                                  ;
 11583                                  ;lru86:
 11584                                  ;	;cmp	[es:di+15h],bx
 11585                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 11586                                  ;	jae	short lru9		; no, skip this
 11587                                  ;	mov	si,di			; remember position
 11588                                  ;	;mov	bx,[es:di+15h]
 11589                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 11590                                  ;
 11591                                  ; Done with this entry, go back for more.
 11592                                  ;
 11593                                  ;lru9:
 11594                                  ;	;add	di, 53
 11595                                  ;	add	di,SF_ENTRY.size
 11596                                  ;	loop	lru8
 11597                                  ;
 11598                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 11599                                  ; out. The conditions here are:
 11600                                  ;
 11601                                  ;  No local-no-shares AND all net/share entries are older than threshold
 11602                                  ;
 11603                                  ;lru10:
 11604                                  ;	cmp	si,-1			; if no one f
 11605                                  ;	jz	short lru65		;     return -1;
 11606                                  ;lru11:
 11607                                  ;	mov	di,si
 11608                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 11609                                  ;	MOV	[CS:THISSFT+2],ES
 11610                                  ;
 11611                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 11612                                  ; is 0.
 11613                                  ;
 11614                                  ;	;test	word [es:di+5],8000h
 11615                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 11616                                  ;	JNZ	short LRUClose
 11617                                  ;IF INSTALLED
 11618                                  ;	call	CheckShare
 11619                                  ;	JZ	short LRUDone
 11620                                  ;ENDIF
 11621                                  ;
 11622                                  ; Repeat close until ref count is 0
 11623                                  ;
 11624                                  ;LRUClose:
 11625                                  ;	push	ss
 11626                                  ;	pop	ds
 11627                                  ;	LES	DI,[THISSFT]
 11628                                  ;	cmp     word [es:di],0
 11629                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 11630                                  ;	JZ	short LRUDone 		; nope, all done
 11631                                  ;	call	DOS_CLOSE
 11632                                  ;	jnc	short LRUClose		; no error => clean up
 11633                                  ;	;cmp	al,6
 11634                                  ;	cmp	al,error_invalid_handle
 11635                                  ;	jz	short LRUClose
 11636                                  ;	stc
 11637                                  ;	JMP	short LRUDead
 11638                                  ;LRUDone:
 11639                                  ;	XOR	AL,AL
 11640                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 11641                                  ;
 11642                                  ;LRUDead:
 11643                                  ;	call	restore_world
 11644                                  ;	LES     DI,[CS:THISSFT]
 11645                                  ;	jnc	short LRUFCB_retn
 11646                                  ;LRUFCB_err:
 11647                                  ;	; mov	al, 23h	
 11648                                  ;	MOV	AL,error_FCB_unavailable
 11649                                  ;LRUFCB_retn:	
 11650                                  ;	retn:
 11651                                  ;
 11652                                  ;ENDIF	; LRUFCB has been rewritten below.
 11653                                  
 11654                                  ; 24/07/2019 - Retro DOS v3.2
 11655                                  
 11656                                  ; 17/05/2019 - Retro DOS v4.0
 11657                                  ; LRUFCB for MSDOS 6.0 !
 11658                                  ;----------------------------------------------------------------------------
 11659                                  ;
 11660                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 11661                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 11662                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 11663                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 11664                                  ; optimize regeneration operations by keeping track of the current local
 11665                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 11666                                  ; local SFT in the SFT Block.
 11667                                  ;
 11668                                  ; Inputs: al = 0 => Regenerate SFT operation
 11669                                  ;	    = 1 => Allocate new SFT for Open/Create
 11670                                  ;
 11671                                  ; Outputs: Carry clear
 11672                                  ;	 	es:di = Address of allocated SFT
 11673                                  ;	  	ThisSFT = Address of allocated SFT
 11674                                  ;
 11675                                  ;	  carry set if closes of net/Share files failed 
 11676                                  ;		al = error_FCB_unavailable
 11677                                  ;
 11678                                  ; Registers affected: None
 11679                                  ;
 11680                                  ;----------------------------------------------------------------------------
 11681                                  
 11682                                  ;LruFCB	PROC	NEAR
 11683                                  LRUFCB:
 11684                                  	; 17/05/2019 - Retro DOS v4.0
 11685                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 11686                                  
 11687                                  	;push	es	; * (MSDOS 6.21)
 11688                                  	
 11689 00002732 E801EF                  	call	save_world
 11690                                  	
 11691                                  	; MSDOS 6.0
 11692                                  	;;getdseg <ds>		;ds = DOSDATA
 11693                                  	;mov	ds,[cs:DosDSeg]
 11694                                  
 11695                                  	; 24/07/2019 - Retro DOS v3.2
 11696 00002735 0E                      	push	cs
 11697 00002736 1F                      	pop	ds
 11698                                  
 11699 00002737 08C0                    	or	al,al		;Check if regenerate allocation
 11700 00002739 751A                    	jnz	short lru1	;Try to find SFT to use
 11701                                  
 11702                                  	; This is a regen call. If LocalSFT contains the address of a valid 
 11703                                  	; local SFT, just return that SFT to reuse
 11704                                  
 11705 0000273B 8B3E[C50F]              	mov	di,[LocalSFT]
 11706 0000273F 0B3E[C70F]              	or	di,[LocalSFT+2]	;is address == 0?
 11707 00002743 7410                    	jz	short lru1	;invalid local SFT, find one
 11708                                  
 11709                                  	; We have found a valid local SFT. Recycle this SFT
 11710                                  
 11711 00002745 C43E[C50F]              	les	di,[LocalSFT]
 11712                                  
 11713                                  gotlocalSFT:
 11714 00002749 893E[5A05]              	mov	[THISSFT],di
 11715 0000274D 8C06[5C05]              	mov	[THISSFT+2],es
 11716 00002751 F8                      	clc
 11717 00002752 E9AE00                  	jmp	LRUDone		;clear up SFT and return
 11718                                  
 11719                                  lru1:
 11720 00002755 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 11721                                  	;mov	cx,[es:di+4]
 11722 00002759 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 11723                                  	;lea	di,[di+6]
 11724 0000275D 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 11725                                  
 11726                                  	; We scan through all the SFTs scanning for a free one. It also 
 11727                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately. 
 11728                                  	; bx = min. LRU for local SFTs
 11729                                  	; si = pos. of local SFT with min. LRU
 11730                                  	; dx = min. LRU for net/Share SFTs
 11731                                  	; bp = pos. of net/Share SFT with min. LRU
 11732                                  
 11733 00002760 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 11734 00002763 89DE                    	mov	si,bx
 11735 00002765 89DA                    	mov	dx,bx
 11736 00002767 89DD                    	mov	bp,bx
 11737                                  
 11738                                  findSFT:
 11739                                  	;See if this SFT is a free one. If so, return it
 11740 00002769 26830D00                	or	word [es:di],0
 11741                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 11742 0000276D 744E                    	jz	short gotSFT	;yes, SFT is free
 11743                                  	;;cmp	word [es:di],-1
 11744                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 11745 0000276F 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 11746 00002773 7448                    	jz	short gotSFT	;no, can use it
 11747                                  
 11748                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 11749                                  	; used for a later regen.
 11750                                  
 11751                                  	;test	word [es:di+5],8000h
 11752 00002775 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 11753 0000277B 7532                    	jnz	short lru5	;yes, get net/Share LRU
 11754                                  
 11755                                  ;IF installed
 11756 0000277D E8E84E                  	call	CheckShare	;Share present?
 11757                                  ;ENDIF
 11758 00002780 752D                    	jnz	short lru5	;yes, get net/Share LRU
 11759                                  
 11760                                  	;Local SFT, register its address
 11761                                  
 11762                                  	; !!HACK!!!
 11763                                  	; There is a slightly dirty hack out here in a desperate bid to save  
 11764                                  	; code space. There is similar code duplicated at label 'gotSFT'. We 
 11765                                  	; enter from there if al = 0, update the LocalSFT variable, and since 
 11766                                  	; al = 0, we jump out of the loop to the exit point. I have commented 
 11767                                  	; out the code that previously existed at label 'gotSFT'
 11768                                  
 11769                                  hackpoint:
 11770 00002782 893E[C50F]              	mov	[LocalSFT],di
 11771 00002786 8C06[C70F]              	mov	[LocalSFT+2],es	;store local SFT address
 11772                                  
 11773 0000278A 08C0                    	or	al,al		;Is operation = REGEN?
 11774 0000278C 74BB                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 11775                                  
 11776                                  	;Get LRU for local files
 11777                                  	
 11778                                  	;cmp	[es:di+15h],bx
 11779 0000278E 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 11780 00002792 7306                    	jae	short lru4	;no, skip 
 11781                                  
 11782                                  	;mov	bx,[es:di+15h]
 11783 00002794 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 11784 00002798 89FE                    	mov	si,di		;store SFT position
 11785                                  
 11786                                  lru4:
 11787                                  	;add	di,59
 11788 0000279A 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 11789 0000279D E2CA                    	loop	findSFT
 11790                                  
 11791                                  	; Check whether we got a net/Share or local SFT. If local SFT 
 11792                                  	; available, we will reuse it instead of net/Share LRU
 11793                                  
 11794 0000279F 89F7                    	mov	di,si
 11795 000027A1 83FEFF                  	cmp	si,-1		;local SFT available?
 11796 000027A4 7517                    	jnz	short gotSFT	;yes, return it
 11797                                  
 11798                                  	;No local SFT, see if we got a net/Share SFT
 11799                                  
 11800 000027A6 89EF                    	mov	di,bp
 11801 000027A8 83FDFF                  	cmp	bp,-1		;net/Share SFT available?
 11802 000027AB 7530                    	jnz	short gotnetSFT	;yes, return it
 11803                                  noSFT:
 11804                                  	; NB: This error should never occur. We always must have an LRU SFT. 
 11805                                  	; This error can occur only if the SFT has been corrupted or the LRU 
 11806                                  	; count is not maintained properly.
 11807                                  
 11808 000027AD EB51                    	jmp	short errorbadSFT ;error, no FCB available.
 11809                                  
 11810                                  	; Handle the LRU for net/Share SFTs
 11811                                  lru5:
 11812                                  	;cmp	[es:di+15h],dx
 11813 000027AF 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 11814 000027B3 73E5                    	jae	short lru4	;no, skip 
 11815                                  
 11816                                  	;mov	dx,[es:di+15h]
 11817 000027B5 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 11818                                  
 11819 000027B9 89FD                    	mov	bp,di		;store SFT position
 11820 000027BB EBDD                    	jmp	short lru4	;continue with next SFT
 11821                                  
 11822                                  gotSFT:
 11823 000027BD 08C0                    	or	al,al
 11824 000027BF 74C1                    	jz	short hackpoint	;save es:di in LocalSFT
 11825                                  
 11826                                  	; HACK!!!
 11827                                  	; The code here differs from the code at 'hackpoint' only in the 
 11828                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint' 
 11829                                  	; and then from there jump out to 'gotlocalSFT'. The original code 
 11830                                  	; has been commented out below and replaced by the code just above.
 11831                                  
 11832                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 11833                                  ;
 11834                                  ;	or	al,al		  ;Regen?
 11835                                  ;	jnz	short notlocaluse ;yes, register it and return
 11836                                  ;
 11837                                  ;Register this SFT as a local one
 11838                                  ;
 11839                                  ;	mov	[LocalSFT],di
 11840                                  ;	mov	[LocalSFT+2],es
 11841                                  ;	jmp	gotlocalSFT	;return to caller
 11842                                  ;
 11843                                  ;notlocaluse:
 11844                                  
 11845                                  	; The caller is probably going to use this SFT for a net/Share file. 
 11846                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN) 
 11847                                  	; does not really know whether it is a local file or not. We 
 11848                                  	; invalidate LocalSFT if the SFT we are going to use was previously 
 11849                                  	; registered as a local SFT that can be recycled.
 11850                                  
 11851 000027C1 8CC0                    	mov	ax,es
 11852 000027C3 393E[C50F]              	cmp	[LocalSFT],di		;Offset same?
 11853 000027C7 7506                    	jne	short notinvalid
 11854 000027C9 3906[C70F]              	cmp	[LocalSFT+2],ax		;Segments same?
 11855 000027CD 7403                    	je	short zerolocalSFT	;no, no need to invalidate
 11856                                  notinvalid:
 11857 000027CF E977FF                  	jmp	gotlocalSFT
 11858                                  
 11859                                  	; The SFT we are going to use was registered in the LocalSFT variable. 
 11860                                  	; Invalidate this variable i.e LocalSFT = NULL
 11861                                  
 11862                                  zerolocalSFT:
 11863 000027D2 31C0                    	xor	ax,ax ; 0
 11864 000027D4 A3[C50F]                	mov	[LocalSFT],ax
 11865 000027D7 A3[C70F]                	mov	[LocalSFT+2],ax
 11866                                  
 11867 000027DA E96CFF                  	jmp	gotlocalSFT
 11868                                  
 11869                                  gotnetSFT:
 11870                                  	; We have an SFT that is currently net/Share. If it is going to be 
 11871                                  	; used for a regen, we know it has to be a local SFT. Update the 
 11872                                  	; LocalSFT variable
 11873                                  
 11874 000027DD 08C0                    	or	al,al
 11875 000027DF 7508                    	jnz	short closenet
 11876                                  
 11877 000027E1 893E[C50F]              	mov	[LocalSFT],di
 11878 000027E5 8C06[C70F]              	mov	[LocalSFT+2],es	;store local SFT address
 11879                                  closenet:
 11880 000027E9 893E[5A05]              	mov	[THISSFT],di	; set thissft
 11881 000027ED 8C06[5C05]              	mov	[THISSFT+2],es	
 11882                                  
 11883                                  	; If we have sharing or thisSFT is a net sft, then close it until ref 
 11884                                  	; count is 0.
 11885                                  	; NB: We come here only if it is a net/Share SFT that is going to be 
 11886                                  	; recycled -- no need to check for this.
 11887                                  
 11888                                  LRUClose:
 11889 000027F1 26833D00                	cmp	word [es:di],0
 11890                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 11891 000027F5 740C                    	jz	short LRUDone	; nope, all done
 11892                                  
 11893 000027F7 E83913                  	call	DOS_CLOSE
 11894 000027FA 73F5                    	jnc	short LRUClose	; no error => clean up
 11895                                  
 11896                                  	; Bugbug: I dont know why we are trying to close after we get an 
 11897                                  	; error closing. Seems like we could have a potential infinite loop  
 11898                                  	; here. This has to be verified.
 11899                                  
 11900 000027FC 3C06                    	cmp	al,error_invalid_handle ; 6
 11901 000027FE 74F1                    	je	short LRUClose
 11902                                  errorbadSFT:
 11903 00002800 F9                      	stc
 11904 00002801 EB05                    	JMP	short LRUDead
 11905                                  LRUDone:
 11906 00002803 30C0                    	XOR	AL,AL
 11907 00002805 E80801                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 11908                                  
 11909                                  LRUDead:
 11910 00002808 E818EE                  	call	restore_world		; use macro
 11911                                  	
 11912                                  	;pop	es ; * (MSDOS 6.21)
 11913                                  
 11914                                  	; MSDOS 6.0
 11915                                  	;getdseg <es>
 11916                                  	;mov	es,[cs:DosDSeg]
 11917                                  
 11918                                  	;les	di,[es:THISSFT]		;es:di points at allocated SFT
 11919                                  
 11920                                  	; 24/07/2019 - Retro DOS v3.2
 11921 0000280B 2EC43E[5A05]            	les	di,[cs:THISSFT]		;es:di points at allocated SFT
 11922                                  
 11923                                  	;;retnc
 11924                                  	;jc	short LruFCB_err
 11925                                  	;retn
 11926                                  
 11927 00002810 7302                    	jnc	short LruFCB_retn
 11928                                  		
 11929                                  LruFCB_err:
 11930 00002812 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 11931                                  LruFCB_retn:
 11932 00002814 C3                      	retn
 11933                                  	
 11934                                  ;LruFCB	ENDP
 11935                                  
 11936                                  ;ENDIF
 11937                                  
 11938                                  ; 24/07/2019 - Retro DOS v3.2
 11939                                  
 11940                                  ; 17/05/2019 - Retro DOS v4.0
 11941                                  
 11942                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 11943                                  
 11944                                  ; --------------------------------------------------------------------------
 11945                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 11946                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 11947                                  ; to copy the name to different destinations
 11948                                  ;
 11949                                  ; Inputs: ds:si = source string
 11950                                  ;	 es:di = destination string
 11951                                  ;	 cx = length of string
 11952                                  ;
 11953                                  ; Outputs: String copied to destination
 11954                                  ;
 11955                                  ; Registers affected: cx,di,si
 11956                                  ; --------------------------------------------------------------------------
 11957                                  
 11958                                  RegenCopyName:
 11959                                  CopyName:
 11960 00002815 AC                      	lodsb			;load character
 11961 00002816 E8D830                  	call	UCase		; convert char to upper case
 11962                                  StuffChar2:
 11963 00002819 AA                      	STOSB			;store converted character
 11964 0000281A E2F9                    	LOOP	CopyName	;
 11965                                  DoneName:
 11966 0000281C C3                      	retn
 11967                                  
 11968                                  ; --------------------------------------------------------------------------
 11969                                  
 11970                                  FCBRegen:
 11971                                  	; called from SFTFromFCB. SS already DOSDATA
 11972                                  
 11973                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 11974                                  	; we do not fill, size we do no fill, position we do not fill,
 11975                                  	; bit 14 of flags = TRUE, other bits = FALSE
 11976                                  
 11977                                  	;mov	al,[si+19h]
 11978 0000281D 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 11979                                  
 11980                                  	; We discriminate based on the first two bits in the reserved field.
 11981                                  	
 11982                                  	;test	al,80h
 11983 00002820 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 11984 00002822 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 11985                                  
 11986                                  	; The FCB is for a network or a sharing based system. At this point 
 11987                                  	; we have already closed the SFT for this guy and reconnection is 
 11988                                  	; impossible.
 11989                                  	;
 11990                                  	; Remember that he may have given us a FCB with bogus information in
 11991                                  	; it. Check to see if sharing is present or if the redir is present.
 11992                                  	; If either is around, presume that we have cycled out the FCB and 
 11993                                  	; give the hard error. Otherwise, just return with carry set.
 11994                                  
 11995 00002824 E8414E                  	call	CheckShare		; test for sharer
 11996 00002827 7509                    	JNZ	short RegenFail		; yep, fail this.
 11997                                  	
 11998                                  	;mov	ax,1100h
 11999 00002829 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12000 0000282C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12001                                  			; Return: AL = 00h  not installed, OK to install
 12002                                  			; 01h  not installed, not OK to install
 12003                                  			; FFh  installed
 12004 0000282E 08C0                    	OR	AL,AL			; is it there?
 12005 00002830 740C                    	JZ	short RegenDead		; no, just fail the operation
 12006                                  RegenFail:
 12007                                  	; 17/05/2019 - Retro DOS v4.0
 12008                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12009 00002832 36A1[0403]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12010                                  
 12011                                  	;cmp	ah,10h
 12012 00002836 80FC10                  	cmp	AH,FCB_CLOSE
 12013 00002839 7403                    	jz	short RegenDead
 12014 0000283B E89901                  	call	FCBHardErr		; massive hard error.
 12015                                  RegenDead:
 12016 0000283E F9                      	STC				; carry set
 12017                                  FCBRegen_retn:
 12018 0000283F C3                      	retn
 12019                                  
 12020                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12021                                  	; so fail the operation.
 12022                                  
 12023                                  RegenNoSharing:
 12024 00002840 E8254E                  	call	CheckShare		; Sharing around?
 12025 00002843 75ED                    	JNZ	short RegenFail
 12026                                  	
 12027                                  	; Find an SFT for this guy.
 12028                                  	
 12029                                  	; 17/05/2019 - Retro DOS v4.0
 12030                                  
 12031                                  	; MSDOS 3.3
 12032                                  	;call	LRUFCB
 12033                                  	;jc	short FCBRegen_retn
 12034                                  	
 12035                                  	; MSDOS 6.0
 12036 00002845 50                      	push	ax
 12037 00002846 B000                    	mov	al,0			;indicate it is a regen operation
 12038 00002848 E8E7FE                  	call	LRUFCB
 12039 0000284B 58                      	pop	ax
 12040 0000284C 72F1                    	jc	short FCBRegen_retn
 12041                                  
 12042                                  	;mov	word [es:di+2],8002h
 12043 0000284E 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12044 00002854 243F                    	AND	AL,3Fh			; get drive number for flags
 12045 00002856 98                      	CBW
 12046                                  	;or	ax,4000h
 12047 00002857 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12048                                  
 12049                                  	; The bits field consists of the upper two bits (dirty and device) 
 12050                                  	; from the SFT and the low 4 bits from the open mode.
 12051                                  
 12052                                  	;mov	cl,[si+1Ah]
 12053 0000285A 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12054 0000285D 88CD                    	MOV	CH,CL
 12055 0000285F 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12056 00002862 08E8                    	OR	AL,CH
 12057                                  	;and	cl,0Fh
 12058 00002864 80E10F                  	AND	CL,access_mask		; get the mode bits
 12059                                  	;mov	[es:di+2],cl
 12060 00002867 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12061                                  	;mov	[es:di+5],ax
 12062 0000286B 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12063                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12064 0000286F 36A1[0603]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12065                                  	;mov	[es:di+31h],ax
 12066 00002873 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12067 00002877 1E                      	push	ds
 12068 00002878 56                      	push	si
 12069 00002879 06                      	push	es
 12070 0000287A 57                      	push	di
 12071 0000287B 16                      	push	ss
 12072 0000287C 07                      	pop	es
 12073 0000287D BF[0805]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12074                                  
 12075 00002880 B90800                  	MOV	CX,8
 12076 00002883 46                      	INC	SI			; Skip past drive byte to name in FCB
 12077                                  
 12078                                  	; MSDOS 3.3
 12079                                  ;RegenCopyName:
 12080                                  	;lodsb
 12081                                  	;call	UCase
 12082                                  	;stosb
 12083                                  	;loop	RegenCopyName
 12084                                  
 12085                                  	; MSDOS 6.0
 12086 00002884 E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12087                                  
 12088 00002887 16                      	push	ss	; SS is DOSDATA
 12089 00002888 1F                      	pop	ds
 12090                                  
 12091                                  	;mov	byte [ATTRIB],16h
 12092 00002889 C606[2805]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12093                                  					; Must set this to something interesting
 12094                                  					; to call DEVNAME.
 12095 0000288E E84824                  	call	DEVNAME 		; check for device
 12096 00002891 5E                      	pop	si
 12097 00002892 07                      	pop	es
 12098 00002893 5E                      	pop	si
 12099 00002894 1F                      	pop	ds
 12100 00002895 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12101                                  
 12102                                  	; Device found. We can ignore disk-specific info
 12103                                  
 12104                                  	;mov	[es:di+5],bh
 12105 00002897 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12106                                  	;mov	byte [es:di+4],0
 12107 0000289B 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12108                                  					; SS override
 12109                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12110 000028A0 36C536[5605]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12111                                  	;mov	[es:di+7],si
 12112 000028A5 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12113                                  	;mov	[es:di+9],ds
 12114 000028A9 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12115 000028AD C3                      	retn				; carry is clear
 12116                                  
 12117                                  RegenDeadJ:
 12118 000028AE EB8E                    	JMP	short RegenDead
 12119                                  
 12120                                  	; File found. Just copy in the remaining pieces.
 12121                                  
 12122                                  RegenFileNoSharing:
 12123                                  	;mov	ax,[es:di+5]
 12124 000028B0 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12125 000028B4 83E03F                  	AND	AX,03Fh
 12126 000028B7 1E                      	push	ds
 12127 000028B8 56                      	push	si
 12128 000028B9 E82E43                  	call	FIND_DPB
 12129                                  	;mov	[es:di+7],si
 12130 000028BC 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12131                                  	;mov	[es:di+9],ds
 12132 000028C0 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12133 000028C4 5E                      	pop	si
 12134 000028C5 1F                      	pop	ds
 12135 000028C6 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 12136                                  					; indicator was bogus
 12137                                  	;mov	ax,[si+1Dh]
 12138 000028C8 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 12139                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 12140                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 12141 000028CB 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 12142                                  
 12143                                  	; MSDOS 6.0
 12144                                  
 12145                                  	; SR;
 12146                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 12147                                  	; number
 12148                                  
 12149                                  	;mov	al,[si+18h]
 12150 000028CF 8A4418                  	mov	al,[si+fcb_sfn]
 12151 000028D2 24C0                    	and	al,0C0h		;get the 2 attribute bits
 12152 000028D4 88C4                    	mov	ah,al
 12153 000028D6 D0C4                    	rol	ah,1
 12154 000028D8 D0E8                    	shr	al,1
 12155 000028DA 08E0                    	or	al,ah
 12156 000028DC 243F                    	and	al,03Fh		;mask off unused bits
 12157                                  	;mov	[es:di+4],al
 12158 000028DE 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 12159                                  
 12160                                  	; SR;
 12161                                  	; Update the higher word of the directory sector from the FCB
 12162                                  
 12163                                  	;;mov	al,[si+18h]
 12164 000028E2 8A4418                  	mov	al,[si+fcb_sfn]
 12165 000028E5 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 12166 000028E7 28E4                    	sub	ah,ah
 12167                                  	;mov	[es:di+1Dh],ax
 12168 000028E9 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 12169                                  
 12170                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12171                                  	;mov	ax,[si+1Bh]
 12172 000028ED 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 12173                                  	;mov	[es:di+0Bh],ax
 12174 000028F0 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 12175                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 12176                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 12177 000028F4 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 12178                                  	;mov	al,[si+1Fh]
 12179 000028F8 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 12180                                  	;mov  	[es:di+1Fh],al
 12181 000028FB 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 12182                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12183 000028FF 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 12184                                  					; Existing FCB entries would be
 12185                                  					; flushed unnecessarily because of
 12186                                  					; check in CheckFCB of the ref_count.
 12187                                  					; July 22/85 - BAS
 12188                                  	;lea	si,[si+1]
 12189 00002902 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 12190                                  	;lea	di,[di+20h]
 12191 00002905 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 12192                                  	;mov	cx,11
 12193 00002908 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 12194                                  	
 12195                                  	; MSDOS 6.0
 12196 0000290B E807FF                  	call	RegenCopyName	;copy name to SFT 
 12197                                  	
 12198                                  	; MSDOS 3.3
 12199                                  ;RegenCopyName2:
 12200                                  	;lodsb
 12201                                  	;call    UCase
 12202                                  	;stosb
 12203                                  	;loop    RegenCopyName2
 12204                                  
 12205 0000290E F8                      	clc
 12206 0000290F C3                      	retn
 12207                                  
 12208                                  ; 24/07/2019 - Retro DOS v3.2
 12209                                  
 12210                                  ;**	BlastSFT - FIll SFT with Garbage
 12211                                  ; --------------------------------------------------------------------------
 12212                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 12213                                  ;	various garbage values to put into the SFT.  I don't know why,
 12214                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 12215                                  ;	necessary to show that the SFT is free after filling it.
 12216                                  ;
 12217                                  ;	ENTRY	(es:di) = address of SFT
 12218                                  ;		(al) = fill character
 12219                                  ;	EXIT	(ax) = -1
 12220                                  ;		'C' clear
 12221                                  ;	USES	AX, CX, Flags
 12222                                  
 12223                                  BlastSFT:
 12224 00002910 57                      	push	di
 12225                                  	;mov	cx,53 ; MSDOS 3.3
 12226                                  	;mov	cx,59 ; MSDOS 6.0
 12227 00002911 B93B00                  	mov	cx,SF_ENTRY.size
 12228 00002914 F3AA                    	rep	stosb
 12229 00002916 5F                      	pop	di
 12230 00002917 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 12231 00002919 268905                  	mov	[es:di],ax
 12232                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 12233                                  	;mov	[es:di+15h],ax
 12234 0000291C 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 12235 00002920 48                      	dec	ax	; -1					    ;
 12236                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 12237 00002921 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 12238                                  BlastSFT_retn:
 12239 00002925 C3                      	retn				; return with 'C' clear     ;
 12240                                  
 12241                                  
 12242                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 12243                                  ; --------------------------------------------------------------------------
 12244                                  ;
 12245                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 12246                                  ;   regenerated.
 12247                                  ;
 12248                                  ;   Inputs:	DS:SI point to FCB (not extended)
 12249                                  ;		AL is SFT index
 12250                                  ;   Outputs:	Carry Set - FCB needs to be regened
 12251                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 12252                                  ;   Registers modified: AX and BX
 12253                                  ;
 12254                                  ; --------------------------------------------------------------------------
 12255                                  
 12256                                  CheckFCB:
 12257                                  		
 12258                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 12259                                  
 12260                                  	; MSDOS 3.3
 12261                                  
 12262                                  	; LES	DI,[CS:SFTFCB]
 12263                                  
 12264                                  	; MSDOS 6.0
 12265                                  	
 12266                                  	; SR;
 12267                                  	; We check if the given FCB is for a local file. If so, we return a 
 12268                                  	; bad SFT status forcing the caller to regenerate the SFT.
 12269                                  
 12270                                  	;test	byte [si+19h],0C0h
 12271 00002926 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 12272 0000292A 7453                    	jz	short BadSFT		;Local file, return bad SFT
 12273 0000292C 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 12274                                  
 12275                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12276                                  	;cmp	[es:di+4],al
 12277 00002931 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 12278 00002935 7248                    	JC	short BadSFT
 12279                                  	;;mov	bl,53 ; MSDOS 3.3
 12280                                  	;mov	bl,59 ; MSDOS 6.0
 12281 00002937 B33B                    	MOV	BL,SF_ENTRY.size
 12282 00002939 F6E3                    	MUL	BL
 12283                                  	;lea	di,[di+6]
 12284 0000293B 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 12285 0000293E 01C7                    	ADD	DI,AX
 12286                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 12287 00002940 36A1[0603]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 12288                                  	;cmp	[es:di+31h],ax
 12289 00002944 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 12290 00002948 7535                    	JNZ	short BadSFT		; must match process
 12291 0000294A 26833D00                	cmp	word [es:di],0
 12292                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 12293 0000294E 742F                    	JZ	short BadSFT		; must also be in use
 12294                                  	;mov	al,[si+19h]
 12295 00002950 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12296                                  	;test	al,80h
 12297 00002953 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 12298 00002955 7434                    	JZ	short CheckNoShare	; No. try local or device
 12299                                  
 12300                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 12301                                  	; FCBSHARE is a superset of FCBNETWORK.
 12302                                  
 12303 00002957 50                      	PUSH	AX
 12304                                  	;and	al,0C0h
 12305 00002958 24C0                    	AND	AL,FCBMASK
 12306                                  	;cmp	al,0C0h
 12307 0000295A 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 12308 0000295C 58                      	POP	AX
 12309 0000295D 7522                    	JNZ	short CheckNet		; yes
 12310                                  ;
 12311                                  ;----- In share support -----
 12312                                  ;
 12313                                  	; 26/07/2019
 12314 0000295F 2EFF1E[8800]            	call	far [cs:JShare+(11*4)]  ; 11 = ShChk
 12315                                  	;Call	far [ss:JShare+(11*4)]	; SS Override
 12316 00002964 7219                    	JC	short BadSFT
 12317 00002966 EB0A                    	JMP	SHORT CheckD
 12318                                  ;
 12319                                  ;----- End in share support -----
 12320                                  ;
 12321                                  CheckFirClus:
 12322 00002968 263B5D0B                	cmp     bx,[es:di+0Bh]
 12323 0000296C 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 12324 00002970 750D                    	JNZ	short BadSFT
 12325                                  CheckD: 
 12326 00002972 243F                    	AND	AL,3Fh
 12327                                  	;mov	ah,[es:di+5]
 12328 00002974 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 12329 00002978 80E43F                  	AND	AH,3Fh
 12330 0000297B 38C4                    	CMP	AH,AL
 12331 0000297D 74A6                    	jz	short BlastSFT_retn	; carry is clear
 12332                                  BadSFT: 
 12333 0000297F F9                      	STC
 12334 00002980 C3                      	retn				; carry is clear
 12335                                  CheckNet:
 12336                                  	; 17/05/2019 - Retro DOS v4.0
 12337                                  	
 12338                                  ;----- In net support -----
 12339                                  
 12340                                  	; MSDOS 3.3
 12341                                  	;;mov	ax,[si+1Ah]
 12342                                  	;mov	ax,[si+fcb_net_handle]
 12343                                  	;;cmp	ax,[es:di+1Dh]
 12344                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 12345                                  	;jnz	short BadSFT
 12346                                  	;;cmp	ax,[es:di+19h]
 12347                                  	;cmp	ax,[ES:DI+sf_netid]
 12348                                  	;jnz     short BadSFT
 12349                                  	;;mov	ax,[si+1Eh]
 12350                                  	;mov	ax,[si+fcb_l_attr]
 12351                                  	;;cmp	ax,[es:di+1Bh]
 12352                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 12353                                  	;jnz     short BadSFT
 12354                                  
 12355                                  	; MSDOS 6.0
 12356                                  	;mov	ax,[si+1Ch]
 12357 00002981 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 12358                                  	;cmp	ax,[es:di+7]
 12359 00002984 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 12360 00002988 75F5                    	JNZ	short BadSFT
 12361                                  
 12362                                  ;----- END In net support -----
 12363                                  
 12364                                  CheckNet_retn:
 12365 0000298A C3                      	retn
 12366                                  
 12367                                  CheckNoShare:
 12368                                  	;test	al,40h
 12369 0000298B A840                    	test	AL,FCBDEVICE		; Device?
 12370 0000298D 7500                    	JNZ	short CheckNoShareDev 	; Yes
 12371                                  
 12372                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 12373                                  	;;mov	bx,[si+1Dh]
 12374                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 12375                                  	;;cmp	bx,[es:di+1Dh]
 12376                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 12377                                  	;jnz	short BadSFT
 12378                                  	;;mov	bl,[si+1Fh]
 12379                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 12380                                  	;;cmp	bl,[es:di+1Fh]
 12381                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 12382                                  	;jnz	short BadSFT
 12383                                  	;;mov	bl,[si+1Ah]
 12384                                  	;MOV	bl,[SI+fcb_nsl_bits]
 12385                                  	;;mov	bh,[es:di+5]
 12386                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 12387                                  	;xor	bh,bl
 12388                                  	;and	bh,0C0h
 12389                                  	;jnz	short BadSFT
 12390                                  	;;xor	bl,[es:di+2]
 12391                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 12392                                  	;and	bl,0Fh
 12393                                  	;jnz	short BadSFT
 12394                                  	;push	di
 12395                                  	;push	si
 12396                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 12397                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 12398                                  	;;lea	si,[si+1]
 12399                                  	;LEA	SI,[SI+SYS_FCB.name]
 12400                                  	;;mov	cx,11
 12401                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 12402                                  	;repe	cmpsb
 12403                                  	;pop	si
 12404                                  	;pop	di
 12405                                  	;jnz	short BadSFT
 12406                                  	;;mov	bx,[si+1Bh]
 12407                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 12408                                  	;jmp	short CheckFirClus
 12409                                  
 12410                                  	; MSDOS 6.0
 12411                                  
 12412                                  	; SR;
 12413                                  	; The code below to match a local FCB with its SFT can no longer be
 12414                                  	; used. We just return a no-match status. This check is done right
 12415                                  	; at the top.
 12416                                  
 12417                                  CheckNoShareDev:
 12418                                  	;mov	bx,[si+1Ah]
 12419 0000298F 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 12420                                  	;cmp	bx,[es:di+7]
 12421 00002992 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 12422 00002996 75E7                    	JNZ	short BadSFT
 12423                                  	;mov	bx,[si+1Ch]
 12424 00002998 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 12425                                  	;cmp	bx,[es:di+9]
 12426 0000299B 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12427 0000299F 75DE                    	JNZ	short BadSFT
 12428 000029A1 EBCF                    	JMP	short CheckD
 12429                                  
 12430                                  ; 24/07/2019 - Retro DOS v3.2
 12431                                  
 12432                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 12433                                  ;----------------------------------------------------------------------------
 12434                                  ;
 12435                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 12436                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 12437                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 12438                                  ;	with PID
 12439                                  ;
 12440                                  ;   Inputs:	DS:SI point to FCB
 12441                                  ;   Outputs:	ThisSFT point to appropriate SFT
 12442                                  ;		Carry clear -> OK ES:DI -> SFT
 12443                                  ;		Carry set -> error in ax
 12444                                  ;   Registers modified: ES,DI, AX
 12445                                  ;
 12446                                  ;----------------------------------------------------------------------------
 12447                                  
 12448                                  SFTFromFCB:
 12449                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 12450                                  
 12451                                  	; 17/05/2019 - Retro DOS v4.0
 12452                                  
 12453 000029A3 50                      	push	ax
 12454 000029A4 53                      	push	bx
 12455                                  	;mov	al,[si+18h]
 12456 000029A5 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 12457 000029A8 E87BFF                  	call	CheckFCB
 12458 000029AB 5B                      	pop	bx
 12459 000029AC 58                      	pop	ax
 12460                                  	;MOV	[CS:THISSFT],DI		; SS override
 12461                                  	;MOV	[CS:THISSFT+2],ES
 12462 000029AD 36893E[5A05]            	MOV	[SS:THISSFT],DI		; SS override
 12463 000029B2 368C06[5C05]            	MOV	[SS:THISSFT+2],ES
 12464 000029B7 730F                    	JNC	short Set_SFT		; no problems, just set thissft
 12465                                  	
 12466                                  	; 24/07/2019 - Retro DOS v3.2
 12467                                  	; 31/05/2019
 12468                                  	;push	es ; * (MSDOS 6.21)
 12469 000029B9 E87AEC                  	call	save_world
 12470 000029BC E85EFE                  	call	FCBRegen
 12471 000029BF E861EC                  	call	restore_world		; use macro restore world
 12472                                  	;pop	es ; * (MSDOS 6.21) ; 31/05/2019	
 12473                                  
 12474                                  	;MOV	AX,[CS:EXTERR]		; SS override
 12475 000029C2 36A1[F002]              	MOV	AX,[SS:EXTERR]		; SS override
 12476 000029C6 72C2                    	jc	short CheckNet_retn
 12477                                  
 12478                                  Set_SFT: 
 12479                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 12480 000029C8 36C43E[5A05]            	les	di,[ss:THISSFT]
 12481                                  	;PUSH	word [CS:PROC_ID]	; set process id
 12482 000029CD 36FF36[0603]            	push	word [ss:PROC_ID]
 12483                                  	;pop	word [es:di+31h]
 12484 000029D2 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 12485 000029D6 C3                      	retn				; carry is clear
 12486                                  
 12487                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 12488                                  ;----------------------------------------------------------------------------
 12489                                  ;
 12490                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 12491                                  ;	unavailable FCB.
 12492                                  ;
 12493                                  ;   Inputs:	none.
 12494                                  ;   Outputs:	none.
 12495                                  ;   Registers modified: all
 12496                                  ;
 12497                                  ;----------------------------------------------------------------------------
 12498                                  
 12499                                  FCBHardErr:
 12500                                  	; 24/07/2019 - Retro DOS v3.2
 12501                                  	; 17/05/2019 - Retro DOS v4.0
 12502                                  	;mov	es,[cs:DosDSeg]
 12503                                  	;
 12504                                  	;mov	ax,23h
 12505 000029D7 B82300                  	MOV	AX,error_FCB_unavailable
 12506                                  	;;mov	byte [cs:ALLOWED],8
 12507 000029DA 2EC606[1503]08          	MOV	byte [CS:ALLOWED],Allowed_FAIL
 12508                                  	;mov	byte [es:ALLOWED],Allowed_FAIL	
 12509                                  	
 12510 000029E0 2EC42E[4605]            	LES	BP,[CS:THISDPB]
 12511                                  	;les	bp,[es:THISDPB]
 12512                                  	
 12513 000029E5 BF0100                  	MOV	DI,1			; Fake some registers
 12514 000029E8 89F9                    	MOV	CX,DI
 12515                                  	;mov	dx,[es:bp+0Bh]
 12516 000029EA 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 12517 000029EE E83B31                  	call	HARDERR
 12518 000029F1 F9                      	STC
 12519 000029F2 C3                      	retn
 12520                                  
 12521                                  ;============================================================================
 12522                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 12523                                  ;============================================================================
 12524                                  ; 21/07/2018 - Retro DOS v3.0
 12525                                  
 12526                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 12527                                  ;
 12528                                  ;	GetRR
 12529                                  ;	GetExtent
 12530                                  ;	SetExtent
 12531                                  ;	GetExtended
 12532                                  ;	GetRecSize
 12533                                  ;	FCBIO
 12534                                  ;	$FCB_OPEN
 12535                                  ;	$FCB_CREATE
 12536                                  ;	$FCB_RANDOM_WRITE_BLOCK
 12537                                  ;	$FCB_RANDOM_READ_BLOCK
 12538                                  ;	$FCB_SEQ_READ
 12539                                  ;	$FCB_SEQ_WRITE
 12540                                  ;	$FCB_RANDOM_READ
 12541                                  ;	$FCB_RANDOM_WRITE
 12542                                  ;
 12543                                  ;	Revision history:
 12544                                  ;
 12545                                  ;		Created: ARR 4 April 1983
 12546                                  ;			 MZ  6 June  1983 completion of functions
 12547                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 12548                                  ;				  times.  Change so successive closes work by
 12549                                  ;				  always returning OK.	Also, detect I/O to
 12550                                  ;				  already closed FCB and return EOF.
 12551                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 12552                                  ;				  out of sft into FCB for reconnection
 12553                                  ;
 12554                                  ;	    A000   version 4.00	Jan. 1988
 12555                                  
 12556                                  ; Defintions for FCBOp flags
 12557                                  
 12558                                  RANDOM	equ 2				; random operation
 12559                                  FCBREAD equ 4				; doing a read
 12560                                  BLOCK	equ 8				; doing a block I/O
 12561                                  
 12562                                  ;Break <GetRR - return the random record field in DX:AX>
 12563                                  ;---------------------------------------------------------------------------
 12564                                  ;
 12565                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 12566                                  ;	from the FCB pointed to by DS:SI
 12567                                  ;
 12568                                  ;   Inputs:	DS:SI point to an FCB
 12569                                  ;		BX has record size
 12570                                  ;   Outputs:	DX:AX contain the contents of the random record field
 12571                                  ;   Registers modified: none
 12572                                  ;---------------------------------------------------------------------------
 12573                                  
 12574                                  GetRR:
 12575                                  	;mov	ax,[si+21h]
 12576 000029F3 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 12577                                  	;mov	dx,[si+23h]
 12578 000029F6 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 12579 000029F9 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 12580 000029FC 7202                    	JB	short GetRRBye
 12581 000029FE 30F6                    	XOR	DH,DH
 12582                                  GetRRBye:
 12583 00002A00 C3                      	retn
 12584                                  
 12585                                  ;Break <GetExtent - retrieve next location for sequential IO>
 12586                                  ;---------------------------------------------------------------------------
 12587                                  ;
 12588                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 12589                                  ;	NR fields in the FCB.
 12590                                  ;
 12591                                  ;   Inputs:	DS:SI - point to FCB
 12592                                  ;   Outputs:	DX:AX contain the contents of the random record field
 12593                                  ;   Registers modified: none
 12594                                  ;---------------------------------------------------------------------------
 12595                                  
 12596                                  GetExtent:
 12597                                  	;mov	al,[si+20h]
 12598 00002A01 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 12599                                  	;mov	dx,[si+0Ch]
 12600 00002A04 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 12601 00002A07 D0E0                    	SHL	AL,1
 12602 00002A09 D1EA                    	SHR	DX,1
 12603 00002A0B D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 12604 00002A0D 88D4                    	MOV	AH,DL
 12605 00002A0F 88F2                    	MOV	DL,DH
 12606 00002A11 30F6                    	XOR	DH,DH
 12607 00002A13 C3                      	retn
 12608                                  
 12609                                  ;Break <SetExtent - update the extent/NR field>
 12610                                  ;---------------------------------------------------------------------------
 12611                                  ;
 12612                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 12613                                  ;	fields
 12614                                  ;
 12615                                  ;   Inputs:	DS:SI point to FCB
 12616                                  ;		DX:AX is a record location in file
 12617                                  ;   Outputs:	Extent/NR fields are filled in
 12618                                  ;   Registers modified: CX
 12619                                  ;---------------------------------------------------------------------------
 12620                                  
 12621                                  SetExtent:
 12622 00002A14 50                      	push	ax
 12623 00002A15 52                      	push	dx
 12624 00002A16 89C1                    	MOV	CX,AX
 12625 00002A18 247F                    	AND	AL,7FH			; next rec field
 12626                                  	;mov	[si+20h],al
 12627 00002A1A 884420                  	MOV	[SI+SYS_FCB.NR],AL
 12628 00002A1D 80E180                  	AND	CL,80H			; save upper bit
 12629 00002A20 D1E1                    	SHL	CX,1
 12630 00002A22 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 12631 00002A24 88E8                    	MOV	AL,CH
 12632 00002A26 88D4                    	MOV	AH,DL
 12633                                  	;mov	[si+0Ch], ax
 12634 00002A28 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 12635 00002A2B 5A                      	pop	dx
 12636 00002A2C 58                      	pop	ax
 12637 00002A2D C3                      	retn
 12638                                  
 12639                                  ;Break <GetExtended - find FCB in potential extended fcb>
 12640                                  ;---------------------------------------------------------------------------
 12641                                  ;
 12642                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 12643                                  ;
 12644                                  ;   Inputs:	DS:DX point to a possible extended FCB
 12645                                  ;   Outputs:	DS:SI point to the FCB part
 12646                                  ;		zeroflag set if not extended fcb
 12647                                  ;   Registers modified: SI
 12648                                  ;---------------------------------------------------------------------------
 12649                                  
 12650                                  GetExtended:
 12651 00002A2E 89D6                    	MOV	SI,DX			; point to Something
 12652 00002A30 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 12653 00002A33 7503                    	JNZ	short GetBye		; not there
 12654 00002A35 83C607                  	ADD	SI,7			; point to FCB
 12655                                  GetBye:
 12656 00002A38 39D6                    	CMP	SI,DX			; set condition codes
 12657                                  getextd_retn:
 12658 00002A3A C3                      	retn
 12659                                  
 12660                                  ;Break <GetRecSize - return in BX the FCB record size>
 12661                                  ;---------------------------------------------------------------------------
 12662                                  ;
 12663                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 12664                                  ;
 12665                                  ;   Inputs:	DS:SI point to a non-extended FCB
 12666                                  ;   Outputs:	BX contains the record size
 12667                                  ;   Registers modified: None
 12668                                  ;---------------------------------------------------------------------------
 12669                                  
 12670                                  GetRecSize:
 12671 00002A3B 8B5C0E                  	mov	bx,[si+0Eh]
 12672 00002A3E 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 12673 00002A41 09DB                    	OR	BX,BX			; is it nul?
 12674 00002A43 74F5                    	jz	short getextd_retn
 12675 00002A45 BB8000                  	MOV	BX,128			; use default size
 12676                                  	;mov	[si+0Eh],bx
 12677 00002A48 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 12678 00002A4B C3                      	retn
 12679                                  
 12680                                  ; 24/07/2019 - Retro DOS v3.2
 12681                                  
 12682                                  ;BREAK <FCBIO - do internal FCB I/O>
 12683                                  ;---------------------------------------------------------------------------
 12684                                  ;
 12685                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 12686                                  ;
 12687                                  ;   Inputs:	FCBOP flags which operations need to be performed
 12688                                  ;		DS:DX point to FCB
 12689                                  ;		CX may have count of number of records to xfer
 12690                                  ;   Outputs:	AL has error code
 12691                                  ;   Registers modified: all
 12692                                  ;---------------------------------------------------------------------------
 12693                                  
 12694                                  FCBIO:
 12695                                  
 12696                                  FEOF	EQU	1
 12697                                  FTRIM	EQU	2
 12698                                  
 12699                                  %define	FCBErr	byte [bp-1]  ; byte	
 12700                                  %define	cRec	word [bp-3]  ; word	
 12701                                  ;%define RecPos	word [bp-7]  ; dword
 12702                                  %define RecPosL	word [bp-7]  ; word
 12703                                  %define RecPosH	word [bp-5]  ; word
 12704                                  %define	RecSize	word [bp-9]  ; word
 12705                                  ;%define bPos	word [bp-13] ; dword
 12706                                  %define bPosL	word [bp-13] ; word
 12707                                  %define bPosH	word [bp-11] ; word
 12708                                  %define cByte	word [bp-15] ; word	
 12709                                  %define cResult word [bp-17] ; word	
 12710                                  %define	cRecRes	word [bp-19] ; word
 12711                                  %define	FCBOp	byte [bp-20] ; byte
 12712                                  
 12713                                  	;Enter
 12714                                  
 12715 00002A4C 55                      	push	bp
 12716 00002A4D 89E5                    	mov	bp,sp
 12717 00002A4F 83EC14                  	sub	sp,20
 12718                                  	;mov	[bp-20],al
 12719 00002A52 8846EC                  	MOV	FCBOp,AL
 12720                                  	;mov	byte [bp-1],0
 12721 00002A55 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 12722 00002A59 E8D2FF                  	call	GetExtended		;   FCB = GetExtended ();
 12723                                  	;test	byte [bp-20],8
 12724 00002A5C F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 12725 00002A60 7503                    	JNZ	short GetPos
 12726 00002A62 B90100                  	MOV	CX,1			;	cRec = 1;
 12727                                  GetPos:
 12728                                  	;mov	[bp-3],cx
 12729 00002A65 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 12730 00002A68 E896FF                  	call	GetExtent		;   RecPos = GetExtent ();
 12731 00002A6B E8CDFF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 12732                                  	;mov	[bp-9],bx
 12733 00002A6E 895EF7                  	MOV	RecSize,BX
 12734                                  	;test	byte [bp-20],2
 12735 00002A71 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 12736 00002A75 7403                    	JZ	short GetRec
 12737 00002A77 E879FF                  	call	GetRR			;	RecPos = GetRR ();
 12738                                  GetRec:
 12739                                  	;mov	[bp-7],ax
 12740 00002A7A 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 12741                                  	;mov	[bp-5],dx
 12742 00002A7D 8956FB                  	MOV	RecPosH,DX
 12743 00002A80 E891FF                  	call	SetExtent		;   SetExtent (RecPos);
 12744                                  	;mov	ax,[bp-5]
 12745 00002A83 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 12746 00002A86 F7E3                    	MUL	BX
 12747 00002A88 89C7                    	MOV	DI,AX
 12748                                  	;mov	ax,[bp-7]
 12749 00002A8A 8B46F9                  	MOV	AX,RecPosL
 12750 00002A8D F7E3                    	MUL	BX
 12751 00002A8F 01FA                    	ADD	DX,DI
 12752                                  	;mov	[bp-13],ax
 12753 00002A91 8946F3                  	MOV	bPosL,AX
 12754                                  	;mov	[bp-11],dx
 12755 00002A94 8956F5                  	MOV	bPosH,DX
 12756                                  	;mov	ax,[bp-3]
 12757 00002A97 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 12758 00002A9A F7E3                    	MUL	BX
 12759                                  	;mov	[bp-15],ax
 12760 00002A9C 8946F1                  	MOV	cByte,AX
 12761                                  
 12762                                  ;hkn; 	SS override
 12763 00002A9F 360306[F802]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 12764 00002AA4 83D200                  	ADC	DX,0
 12765 00002AA7 7419                    	JZ	short DoOper
 12766                                  	;mov	byte [bp-1],2
 12767 00002AA9 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 12768                                  
 12769                                  ;hkn; 	SS override
 12770 00002AAD 36A1[F802]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 12771 00002AB1 F7D8                    	NEG	AX
 12772 00002AB3 7501                    	JNZ	short DoDiv
 12773 00002AB5 48                      	DEC	AX
 12774                                  DoDiv:
 12775 00002AB6 31D2                    	XOR	DX,DX
 12776 00002AB8 F7F3                    	DIV	BX
 12777                                  	;mov	[bp-3],ax
 12778 00002ABA 8946FD                  	MOV	cRec,AX
 12779 00002ABD F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 12780                                  	;mov	[bp-15],ax
 12781 00002ABF 8946F1                  	MOV	cByte,AX		;	}
 12782                                  DoOper:
 12783 00002AC2 31DB                    	XOR	BX,BX
 12784                                  	;mov	[bp-17],bx
 12785 00002AC4 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 12786                                  	;cmp	[bp-15],bx
 12787 00002AC7 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 12788 00002ACA 7506                    	JNZ	short DoGetExt
 12789                                  	;test	byte [bp-1],2
 12790 00002ACC F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 12791                                  	;JZ	short DoGetExt
 12792                                  	;JMP	short SkipOp
 12793 00002AD0 7576                    	jnz	short SkipOp
 12794                                  DoGetExt:
 12795 00002AD2 E8CEFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 12796 00002AD5 730F                    	JNC	short ContinueOp
 12797                                  FCBDeath:
 12798 00002AD7 E8E0EC                  	call	FCB_RET_ERR		; signal error, map for extended
 12799                                  	;mov	word [bp-19],0
 12800 00002ADA C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 12801                                  	;mov	byte [bp-1],1
 12802 00002ADF C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 12803 00002AE3 E9F000                  	JMP	FCBSave 		; bam!
 12804                                  ContinueOp:
 12805                                  	;mov	ax,[si+10h]
 12806 00002AE6 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 12807                                  	;mov	[es:di+11h],ax
 12808 00002AE9 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 12809                                  	;mov	ax,[si+12h]
 12810 00002AED 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 12811                                  	;mov	[es:di+13h],ax
 12812 00002AF0 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 12813                                  	;mov	ax,[bp-13]
 12814 00002AF4 8B46F3                  	MOV	AX,bPosL
 12815                                  	;mov	dx,[bp-11]
 12816 00002AF7 8B56F5                  	MOV	DX,bPosH
 12817                                  	;mov	[es:di+15h],ax
 12818 00002AFA 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 12819                                  	;xchg	dx,[es:di+17h]
 12820 00002AFE 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 12821 00002B02 52                      	PUSH	DX			; save away Open age.
 12822                                  	;mov	cx,[bp-15]
 12823 00002B03 8B4EF1                  	MOV	CX,cByte		;	cResult =
 12824                                  
 12825                                  ;hkn; DOS_Read is in DOSCODE
 12826 00002B06 BF[CB3E]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 12827                                  	;test	byte [bp-20],4
 12828 00002B09 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 12829 00002B0D 7503                    	JNZ	short DoContext
 12830                                  
 12831                                  ;hkn; DOS_Write is in DOSCODE
 12832 00002B0F BF[5640]                	MOV	DI,DOS_WRITE
 12833                                  DoContext:
 12834 00002B12 55                      	push	bp
 12835 00002B13 1E                      	push	ds
 12836 00002B14 56                      	push	si
 12837                                  
 12838                                  ;hkn; SS is DOSDATA
 12839 00002B15 16                      	push	ss
 12840 00002B16 1F                      	pop	ds
 12841                                  
 12842                                  ;; Fix for disk full
 12843 00002B17 FFD7                    	CALL	DI
 12844                                  	
 12845 00002B19 5E                      	pop	si
 12846 00002B1A 1F                      	pop	ds
 12847 00002B1B 5D                      	pop	bp
 12848 00002B1C 72B9                    	JC	short FCBDeath
 12849                                  	
 12850 00002B1E 36803E[C20F]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 12851 00002B24 740A                    	JZ	short NODSKFULL
 12852 00002B26 36C606[C20F]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 12853                                  	;mov	byte [bp-1],1 
 12854 00002B2C C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 12855                                  NODSKFULL:
 12856                                  ;; Fix for disk full
 12857                                  	;mov	[bp-17],cx
 12858 00002B30 894EEF                  	MOV	cResult,CX
 12859 00002B33 E82CFB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 12860                                  	;pop	word [es:di+17h]	
 12861 00002B36 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 12862                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 12863                                  	;mov	ax,[es:di+11h]
 12864 00002B3A 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 12865                                  	;mov	[si+10h],ax
 12866 00002B3E 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 12867                                  	;mov	ax,[es:di+13h]
 12868 00002B41 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 12869                                  	;mov	[si+12h],ax
 12870 00002B45 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 12871                                  					;	}
 12872                                  SkipOp:
 12873                                  	;mov	ax,[bp-17]
 12874 00002B48 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 12875 00002B4B 31D2                    	XOR	DX,DX
 12876                                  	;div	word [bp-9]
 12877 00002B4D F776F7                  	DIV	RecSize
 12878                                  	;mov	[bp-19],ax
 12879 00002B50 8946ED                  	MOV	cRecRes,AX
 12880                                  	;add	[bp-7],ax
 12881 00002B53 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 12882                                  	;adc	word [bp-5],0
 12883 00002B56 8356FB00                	ADC	RecPosH,0
 12884                                  ;
 12885                                  ; If we have not gotten the expected number of records, we signal an EOF
 12886                                  ; condition. On input, this is EOF.  On output this is usually disk full.
 12887                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 12888                                  ; do we.
 12889                                  ;
 12890                                  	;cmp	ax,[bp-3]
 12891 00002B5A 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 12892 00002B5D 7412                    	JZ	short TryBlank
 12893                                  	;test	byte [bp-20],4
 12894 00002B5F F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 12895 00002B63 7508                    	JNZ	short SetEOF
 12896                                  	;test	word [es:di+5],80h
 12897 00002B65 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12898 00002B6B 7504                    	JNZ	short TryBlank
 12899                                  SetEOF:
 12900                                  	;mov	byte [bp-1],1
 12901 00002B6D C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 12902                                  TryBlank:				;
 12903 00002B71 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 12904 00002B73 7426                    	JZ	short SetExt
 12905                                  	;add	word [bp-7],1
 12906 00002B75 8346F901                	ADD	RecPosL,1		;	RecPos++;
 12907                                  	;adc	word [bp-5],0
 12908 00002B79 8356FB00                	ADC	RecPosH,0
 12909                                  	;test	byte [bp-20],4
 12910 00002B7D F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 12911 00002B81 7418                    	JZ	short SetExt
 12912                                  	;inc	word [bp-19]
 12913 00002B83 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 12914                                  	;mov	byte [bp-1],3
 12915 00002B86 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 12916                                  	;mov	cx,[bp-9]
 12917 00002B8A 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 12918 00002B8D 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 12919 00002B8F 30C0                    	XOR	AL,AL
 12920                                  ;hkn; 	SS override
 12921 00002B91 36C43E[F802]            	les     di,[ss:DMAADD]
 12922                                  	;add	di,[bp-17]
 12923 00002B96 037EEF                  	ADD	DI,cResult
 12924 00002B99 F3AA                    	REP	STOSB			;   }	}
 12925                                  SetExt:
 12926                                  	;mov	dx,[bp-5]
 12927 00002B9B 8B56FB                  	MOV	DX,RecPosH
 12928                                  	;mov	ax,[bp-7]
 12929 00002B9E 8B46F9                  	MOV	AX,RecPosL
 12930                                  	;test	byte [bp-20],2
 12931 00002BA1 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 12932 00002BA5 7406                    	JZ	short DoSetExt
 12933                                  	;test	byte [bp-20],8
 12934 00002BA7 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 12935 00002BAB 7403                    	JZ	short TrySetRR
 12936                                  DoSetExt:
 12937 00002BAD E864FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 12938                                  TrySetRR:
 12939                                  	;test	byte [bp-20],8
 12940 00002BB0 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 12941 00002BB4 740F                    	JZ	short TryReturn
 12942                                  	;mov	[si+21h],ax
 12943 00002BB6 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 12944                                  	;mov	[si+23h],dl
 12945 00002BB9 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 12946                                  	;cmp	word [si+0Eh],64
 12947 00002BBC 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 12948 00002BC0 7303                    	JAE	short TryReturn
 12949                                  	;mov	[si+24h],dh
 12950 00002BC2 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 12951                                  TryReturn: 
 12952                                  	;test	byte [bp-20],4
 12953 00002BC5 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 12954 00002BC9 750B                    	JNZ	short FCBSave
 12955 00002BCB 1E                      	push	ds			;	FCB->FDate = date;
 12956 00002BCC E885ED                  	call	DATE16			;	FCB->FTime = time;
 12957 00002BCF 1F                      	pop	ds
 12958                                  	;mov	[si+14h],ax
 12959 00002BD0 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 12960                                  	;mov	[si+16h],dx
 12961 00002BD3 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 12962                                  FCBSave: 
 12963                                  	;test	byte [bp-20],8
 12964 00002BD6 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 12965 00002BDA 7409                    	jz	short DoReturn
 12966                                  	;mov	cx,[bp-19]
 12967 00002BDC 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 12968 00002BDF E867EA                  	call    Get_User_Stack
 12969                                  	;mov	[si+4],cx
 12970 00002BE2 894C04                  	MOV	[SI+user_env.user_CX],CX
 12971                                  DoReturn:
 12972                                  	;mov	al,[bp-1]
 12973 00002BE5 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 12974                                  	;Leave	
 12975 00002BE8 89EC                    	mov     sp,bp
 12976 00002BEA 5D                      	pop     bp
 12977 00002BEB C3                      	retn
 12978                                  
 12979                                  ; 24/07/2018 - Retro DOS v3.2
 12980                                  ; 22/07/2018 - Retro DOS v3.0
 12981                                  
 12982                                  ;Break <$FCB_Open - open an old-style FCB>
 12983                                  ;---------------------------------------------------------------------------
 12984                                  ;
 12985                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 12986                                  ;	for us and asked to have the rest filled in.
 12987                                  ;
 12988                                  ;   Inputs:	DS:DX point to an unopenned FCB
 12989                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 12990                                  ;		FCB has the following fields filled in:
 12991                                  ;		    Time/Date Extent/NR Size
 12992                                  ;---------------------------------------------------------------------------
 12993                                  
 12994                                  _$FCB_OPEN:			; System call 15
 12995                                  
 12996 00002BEC B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 12997                                  
 12998                                  ;hkn; DOS_Open is in DOSCODE
 12999 00002BEF B9[F337]                	MOV	CX,DOS_OPEN
 13000                                  
 13001                                  ; The following is common code for Creation and openning of FCBs. AX is
 13002                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 13003                                  ; the FCB
 13004                                  
 13005                                  DoAccess:
 13006 00002BF2 1E                      	push	ds
 13007 00002BF3 52                      	push	dx
 13008 00002BF4 51                      	push	cx
 13009 00002BF5 50                      	push	ax			; save FCB pointer away
 13010                                  
 13011                                  ;hkn; 	OpenBuf is in DOSDATA
 13012 00002BF6 BF[8203]                	MOV	DI,OPENBUF
 13013 00002BF9 E83441                  	call	TransFCB		; crunch the fcb
 13014 00002BFC 58                      	pop	ax
 13015 00002BFD 59                      	pop	cx
 13016 00002BFE 5A                      	pop	dx
 13017 00002BFF 1F                      	pop	ds			; get fcb
 13018 00002C00 7303                    	JNC	short FindFCB		; everything seems ok
 13019                                  FCBOpenErr:
 13020                                  	; AL has error code
 13021 00002C02 E9B5EB                  	jmp	FCB_RET_ERR
 13022                                  FindFCB:
 13023 00002C05 E826FE                  	call	GetExtended		; DS:SI will point to FCB
 13024                                  
 13025                                  	; 17/05/2019 - Retro DOS v4.0
 13026                                  
 13027                                  	; MSDOS 3.3
 13028                                  	;call	LRUFCB
 13029                                  	;jc	short HardMessage
 13030                                  
 13031                                  	; MSDOS 6.0
 13032 00002C08 50                      	push	ax
 13033 00002C09 B001                    	mov	al,1			;indicate Open/Create operation
 13034 00002C0B E824FB                  	call	LRUFCB			; get a sft entry (no error)
 13035 00002C0E 58                      	pop	ax
 13036 00002C0F 722A                    	jc	short HardMessage
 13037                                  	
 13038                                  	;mov	word [es:di+2],8000h
 13039 00002C11 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 13040 00002C17 1E                      	push	ds
 13041 00002C18 56                      	push	si
 13042 00002C19 53                      	push	bx			; save fcb pointer
 13043 00002C1A 89CE                    	MOV	SI,CX
 13044                                  
 13045                                  ;hkn; SS is DOSDATA
 13046 00002C1C 16                      	push	ss
 13047 00002C1D 1F                      	pop	ds			; let DOS_Open see variables
 13048 00002C1E FFD6                    	CALL	SI			; go open the file
 13049 00002C20 5B                      	pop	bx
 13050 00002C21 5E                      	pop	si
 13051 00002C22 1F                      	pop	ds			; get fcb
 13052                                  
 13053                                  ;hkn; SS override
 13054 00002C23 36C43E[5A05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 13055 00002C28 7319                    	JNC	short FCBOK		; operation succeeded
 13056                                  failopen:
 13057 00002C2A 50                      	PUSH	AX
 13058 00002C2B B052                    	MOV	AL,"R"                  ; clear out field (free sft)
 13059 00002C2D E8E0FC                  	call	BlastSFT
 13060 00002C30 58                      	POP	AX
 13061                                  	;cmp	ax,4
 13062 00002C31 83F804                  	CMP	AX,error_too_many_open_files
 13063 00002C34 7405                    	JZ	short HardMessage
 13064                                  	;cmp	ax,24h
 13065 00002C36 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 13066 00002C39 7505                    	jnz	short DeadFCB
 13067                                  HardMessage:
 13068 00002C3B 50                      	PUSH	AX
 13069 00002C3C E898FD                  	call	FCBHardErr
 13070 00002C3F 58                      	POP	AX
 13071                                  DeadFCB:
 13072 00002C40 E977EB                  	jmp	FCB_RET_ERR
 13073                                  FCBOK:
 13074                                  	; MSDOS 6.0
 13075 00002C43 E840F4                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 13076 00002C46 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 13077 00002C48 E81D4A                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 13078 00002C4B 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 13079                                  ;SR;
 13080                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 13081                                  ; LocalSFT variable to reflect this.
 13082                                  
 13083 00002C4D 36893E[C50F]            	mov	[ss:LocalSFT],di
 13084 00002C52 368C06[C70F]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 13085                                  ;;SR;
 13086                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 13087                                  ;;
 13088                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 13089                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 13090                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 13091                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 13092                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 13093                                  
 13094                                  FCBOK2:
 13095                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13096 00002C57 26FF05                  	inc	word [es:di]
 13097                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 13098 00002C5A E805FA                  	call	SaveFCBInfo
 13099                                  	; MSDOS 3.3
 13100                                  	;call	SetOpenAge
 13101                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13102                                  	;test	word [es:di+5],80h
 13103                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13104 00002C5D 26F6450580              	test	byte  [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 13105 00002C62 7509                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 13106 00002C64 8A04                    	MOV	AL,[SI]			; get drive byte
 13107 00002C66 E85040                  	call	GETTHISDRV		; convert
 13108 00002C69 FEC0                    	INC	AL
 13109 00002C6B 8804                    	MOV	[SI],AL			; stash in good drive letter
 13110                                  FCBNoDrive:
 13111                                  	;mov	word [si+0Eh],128
 13112 00002C6D C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 13113                                  
 13114                                  	;mov	ax,[es:di+0Dh]
 13115 00002C72 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 13116                                  	;mov	[si+16h],ax
 13117 00002C76 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 13118                                  	;mov	ax,[es:di+0Fh]
 13119 00002C79 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 13120                                  	;mov	[si+14h],ax
 13121 00002C7D 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13122                                  	;mov	ax,[es:di+11h]
 13123 00002C80 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 13124                                  	;mov	[si+10h],ax
 13125 00002C84 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13126                                  	;mov	ax,[es:di+13h]
 13127 00002C87 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13128                                  	;mov	[si+12h],ax
 13129 00002C8B 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13130 00002C8E 31C0                    	XOR	AX,AX			; convenient zero
 13131                                  	;mov	[si+0Ch],ax
 13132 00002C90 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 13133                                  
 13134                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 13135                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 13136                                  
 13137                                  ;hkn; 	SS override
 13138 00002C93 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 13139                                  	;mov	ah,[es:di+4]
 13140 00002C98 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 13141                                  OpenScan:
 13142                                  	;cmp	al,[si+18h]
 13143 00002C9C 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 13144 00002C9F 7407                    	JZ	short SkipCheck
 13145 00002CA1 50                      	push	ax			; preserve count
 13146 00002CA2 E881FC                  	call	CheckFCB		; do they match
 13147 00002CA5 58                      	pop	ax			; get count back
 13148 00002CA6 7309                    	JNC	short OpenFound		; found a match!
 13149                                  SkipCheck:
 13150 00002CA8 FEC0                    	INC	AL			; advance to next FCB
 13151 00002CAA 38E0                    	CMP	AL,AH			; table full?
 13152 00002CAC 75EE                    	JNZ	short OpenScan		; no, go for more
 13153                                  OpenDone:
 13154 00002CAE 30C0                    	xor	al,al			; return success
 13155 00002CB0 C3                      	retn
 13156                                  
 13157                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 13158                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 13159                                  ; Consider:
 13160                                  ;
 13161                                  ;   open (foo)	delete (foo) open (bar)
 13162                                  ;
 13163                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 13164                                  ; foo even though foo is no longer needed; this is due to the server closing
 13165                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 13166                                  ; If we were to CLOSE bar, the server would then close the only reference to
 13167                                  ; bar and subsequent I/O would be lost to the redirector.
 13168                                  ;
 13169                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 13170                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 13171                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 13172                                  ; around. This will allow us to access the same file through multiple network
 13173                                  ; connections and NOT prematurely terminate when the ref count on one
 13174                                  ; connection goes to zero.
 13175                                  
 13176                                  OpenFound:
 13177                                  	;mov	[si+18h],al
 13178 00002CB1 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 13179 00002CB4 26FF05                  	inc	word [es:di]
 13180                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] 
 13181                                  					; remember this new invocation
 13182 00002CB7 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 13183                                  	;mov	[es:di+15h],ax
 13184 00002CBB 26894515                	MOV	[ES:DI+sf_LRU],AX
 13185                                  ;
 13186                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 13187                                  ; blast it to prevent other reuse.
 13188                                  ;
 13189 00002CBF 16                      	push	ss
 13190 00002CC0 1F                      	pop	ds
 13191 00002CC1 C43E[5A05]              	LES	DI,[THISSFT]
 13192 00002CC5 26FF0D                  	dec	word [es:di]
 13193                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13194                                  					; free the newly allocated SFT
 13195 00002CC8 E8CF49                  	call	ShareEnd
 13196 00002CCB B043                    	MOV	AL,'C'
 13197 00002CCD E840FC                  	call	BlastSFT
 13198 00002CD0 EBDC                    	JMP	short OpenDone
 13199                                  
 13200                                  ;BREAK	<$FCB_Create - create a new directory entry>
 13201                                  ;----------------------------------------------------------------------------
 13202                                  ;
 13203                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 13204                                  ;	FCB for us and asked to have the rest filled in.
 13205                                  ;
 13206                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13207                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13208                                  ;		FCB has the following fields filled in:
 13209                                  ;		    Time/Date Extent/NR Size
 13210                                  ;----------------------------------------------------------------------------
 13211                                  
 13212                                  _$FCB_CREATE:		; System call 22
 13213                                  
 13214                                  ;hkn; DOS_Create is in DOSCODE
 13215 00002CD2 B9[5D37]                	MOV	CX,DOS_CREATE		; routine to call
 13216 00002CD5 31C0                    	XOR	AX,AX			; attributes to create
 13217 00002CD7 E854FD                  	call	GetExtended		; get extended FCB
 13218 00002CDA 7403                    	JZ	short DoAccessJ		; not an extended FCB
 13219 00002CDC 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 13220                                  DoAccessJ:
 13221 00002CDF E910FF                  	JMP	DoAccess		; do dirty work
 13222                                  
 13223                                  ; 22/07/2018 - Retro DOS v3.0
 13224                                  
 13225                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13226                                  ;----------------------------------------------------------------------------
 13227                                  ;
 13228                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13229                                  ;	and write a number of blocks from it.
 13230                                  ;
 13231                                  ;   Inputs:	DS:DX point to an FCB
 13232                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13233                                  ;		AL <> 0 Not enough room on disk for the output
 13234                                  ;
 13235                                  ;----------------------------------------------------------------------------
 13236                                  
 13237                                  _$FCB_RANDOM_WRITE_BLOCK:
 13238                                  	;mov	AL,0Ah	
 13239 00002CE2 B00A                    	MOV	AL,RANDOM+BLOCK
 13240 00002CE4 E965FD                  	JMP	FCBIO
 13241                                  
 13242                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13243                                  ;----------------------------------------------------------------------------
 13244                                  ;
 13245                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13246                                  ;	and read a number of blocks from it.
 13247                                  ;
 13248                                  ;   Inputs:	DS:DX point to an FCB
 13249                                  ;   Outputs:	AL = error codes defined above
 13250                                  ;
 13251                                  ;----------------------------------------------------------------------------
 13252                                  
 13253                                  _$FCB_RANDOM_READ_BLOCK:
 13254                                  	;mov	AL,0Eh	
 13255 00002CE7 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13256 00002CE9 E960FD                  	JMP	FCBIO
 13257                                  
 13258                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13259                                  ;----------------------------------------------------------------------------
 13260                                  ;
 13261                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13262                                  ;	memory
 13263                                  ;
 13264                                  ;   Inputs:	DS:DX point to an FCB
 13265                                  ;   Outputs:	AL = error codes defined above
 13266                                  ;
 13267                                  ;----------------------------------------------------------------------------
 13268                                  
 13269                                  _$FCB_SEQ_READ:
 13270                                  	;mov	AL,4	
 13271 00002CEC B004                    	MOV	AL,FCBREAD
 13272 00002CEE E95BFD                  	JMP	FCBIO
 13273                                  
 13274                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13275                                  ;----------------------------------------------------------------------------
 13276                                  ;
 13277                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13278                                  ;	file
 13279                                  ;
 13280                                  ;   Inputs:	DS:DX point to an FCB
 13281                                  ;   Outputs:	AL = error codes defined above
 13282                                  ;
 13283                                  ;----------------------------------------------------------------------------
 13284                                  
 13285                                  _$FCB_SEQ_WRITE:
 13286 00002CF1 B000                    	MOV	AL,0
 13287 00002CF3 E956FD                  	jmp	FCBIO
 13288                                  
 13289                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13290                                  ;----------------------------------------------------------------------------
 13291                                  ;
 13292                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13293                                  ;	record from it.
 13294                                  ;
 13295                                  ;   Inputs:	DS:DX point to an FCB
 13296                                  ;   Outputs:	AL = error codes defined above
 13297                                  ;
 13298                                  ;----------------------------------------------------------------------------
 13299                                  
 13300                                  _$FCB_RANDOM_READ:
 13301                                  	;mov	AL,6	
 13302 00002CF6 B006                    	MOV	AL,RANDOM+FCBREAD
 13303 00002CF8 E951FD                  	jmp	FCBIO			; single block
 13304                                  
 13305                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13306                                  ;----------------------------------------------------------------------------
 13307                                  ;
 13308                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13309                                  ;	a record to it.
 13310                                  ;
 13311                                  ;   Inputs:	DS:DX point to an FCB
 13312                                  ;   Outputs:	AL = error codes defined above
 13313                                  ;
 13314                                  ;----------------------------------------------------------------------------
 13315                                  
 13316                                  _$FCB_RANDOM_WRITE:
 13317                                  	;mov	AL,2	
 13318 00002CFB B002                    	MOV	AL,RANDOM
 13319 00002CFD E94CFD                  	jmp	FCBIO
 13320                                  
 13321                                  ;============================================================================
 13322                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 13323                                  ;============================================================================
 13324                                  ; 22/07/2018 - Retro DOS v3.0
 13325                                  
 13326                                  ;**	Search.asm
 13327                                  ;
 13328                                  ;	Directory search system calls.
 13329                                  ;	These will be passed direct text of the pathname from the user. 
 13330                                  ;	They will need to be passed through the macro expander prior to
 13331                                  ;	being sent through the low-level stuff. 
 13332                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 13333                                  ;
 13334                                  ;	$Dir_Search_First	  written
 13335                                  ;	$Dir_Search_Next	  written
 13336                                  ;	$Find_First	  written
 13337                                  ;	$Find_Next		  written
 13338                                  ;	PackName		  written
 13339                                  ;
 13340                                  ;	Modification history:
 13341                                  ;
 13342                                  ;	  Created: ARR 4 April 1983
 13343                                  
 13344                                  ;----------------------------------------------------------------------------
 13345                                  ; Procedure Name : $DIR_SEARCH_FIRST
 13346                                  ;
 13347                                  ; Inputs:
 13348                                  ;	DS:DX Points to unopenned FCB
 13349                                  ; Function:
 13350                                  ;	Directory is searched for first matching entry and the directory
 13351                                  ;	entry is loaded at the disk transfer address
 13352                                  ; Returns:
 13353                                  ;	AL = -1 if no entries matched, otherwise 0
 13354                                  ;----------------------------------------------------------------------------
 13355                                  
 13356                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 13357                                  
 13358                                  _$DIR_SEARCH_FIRST:
 13359 00002D00 368916[6205]            	MOV	[SS:THISFCB],DX
 13360 00002D05 368C1E[6405]            	MOV	[SS:THISFCB+2],DS
 13361 00002D0A 89D6                    	MOV	SI,DX
 13362 00002D0C 803CFF                  	CMP	BYTE [SI],0FFH
 13363 00002D0F 7503                    	JNZ	short NORMFCB4
 13364 00002D11 83C607                  	ADD	SI,7			; Point to drive select byte
 13365                                  NORMFCB4:
 13366 00002D14 FF34                    	push	word [SI]		; Save original drive byte for later
 13367                                  
 13368 00002D16 16                      	push	ss
 13369 00002D17 07                      	pop	es			; get es to address DOSGroup
 13370                                  
 13371 00002D18 BF[8203]                	MOV	DI,OPENBUF		; appropriate buffer
 13372 00002D1B E81240                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 13373 00002D1E 7304                    	JNC	short SearchIt		; no error, go and look
 13374 00002D20 5B                      	pop	bx			; Clean stack
 13375                                  ;
 13376                                  ; Error code is in AX
 13377                                  ;
 13378 00002D21 E996EA                  	jmp	FCB_RET_ERR		; error
 13379                                  
 13380                                  SearchIt:
 13381 00002D24 16                      	push	ss
 13382 00002D25 1F                      	pop	ds			; get ready for search
 13383 00002D26 FF36[F802]              	push	word [DMAADD]
 13384 00002D2A FF36[FA02]              	push	word [DMAADD+2]
 13385 00002D2E C706[F802][8204]        	MOV	WORD [DMAADD],SEARCHBUF
 13386 00002D34 8C1E[FA02]              	MOV	WORD [DMAADD+2],DS
 13387                                  	; MSDOS 6.0
 13388                                  	;call	GET_FAST_SEARCH 	; search
 13389                                  	; MSDOS 3.3
 13390 00002D38 E84E0C                  	call	DOS_SEARCH_FIRST
 13391 00002D3B 8F06[FA02]              	pop	word [DMAADD+2]
 13392 00002D3F 8F06[F802]              	pop	word [DMAADD]
 13393 00002D43 7304                    	JNC	short SearchSet		; no error, transfer info
 13394 00002D45 5B                      	pop	bx			; Clean stack
 13395                                  ;
 13396                                  ; Error code is in AX
 13397                                  ;
 13398 00002D46 E971EA                  	jmp	FCB_RET_ERR
 13399                                  
 13400                                  ;
 13401                                  ; The search was successful (or the search-next). We store the information
 13402                                  ; into the user's FCB for continuation.
 13403                                  ;
 13404                                  SearchSet:
 13405 00002D49 BE[8204]                	MOV	SI,SEARCHBUF
 13406 00002D4C C43E[6205]              	LES	DI,[THISFCB]		; point to the FCB
 13407 00002D50 F606[2905]FF            	TEST	byte [EXTFCB],0FFh		;
 13408 00002D55 7403                    	JZ	short NORMFCB1
 13409 00002D57 83C707                  	ADD	DI,7			; Point past the extension
 13410                                  NORMFCB1:
 13411 00002D5A 5B                      	pop	bx			; Get original drive byte
 13412 00002D5B 08DB                    	OR	BL,BL
 13413 00002D5D 7506                    	JNZ	short SearchDrv
 13414 00002D5F 8A1E[0203]              	MOV	BL,[CURDRV]
 13415 00002D63 FEC3                    	INC	BL
 13416                                  SearchDrv:
 13417 00002D65 AC                      	LODSB				; Get correct search contin drive byte
 13418 00002D66 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 13419 00002D68 47                      	INC	DI
 13420                                  	;STOSB				; Store the correct "user" drive byte
 13421                                  					;  at the start of the search info
 13422 00002D69 B90A00                  	MOV	CX,20/2
 13423 00002D6C F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 13424 00002D6E 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 13425                                  					;   byte to AL
 13426 00002D70 AA                      	STOSB				; Search contin drive byte at end of
 13427                                  					;   contin info
 13428 00002D71 C43E[F802]              	LES	DI,[DMAADD]
 13429 00002D75 F606[2905]FF            	TEST	byte [EXTFCB],0FFh
 13430 00002D7A 740E                    	JZ	short NORMFCB2
 13431 00002D7C B0FF                    	MOV	AL,0FFh
 13432 00002D7E AA                      	STOSB
 13433 00002D7F FEC0                    	INC	AL
 13434 00002D81 B90500                  	MOV	CX,5
 13435 00002D84 F3AA                    	REP	STOSB
 13436 00002D86 A0[2A05]                	MOV	AL,[SATTRIB]
 13437 00002D89 AA                      	STOSB
 13438                                  NORMFCB2:
 13439 00002D8A 88D8                    	MOV	AL,BL			; User Drive byte
 13440 00002D8C AA                      	STOSB
 13441 00002D8D B91000                  	MOV	CX,16			; 32 / 2 words of dir entry
 13442 00002D90 F3A5                    	REP	MOVSW
 13443 00002D92 E922EA                  	jmp	FCB_RET_OK
 13444                                  
 13445                                  ;----------------------------------------------------------------------------
 13446                                  ;
 13447                                  ; Procedure Name : $DIR_SEARCH_NEXT
 13448                                  ;
 13449                                  ; Inputs:
 13450                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 13451                                  ; Function:
 13452                                  ;	Directory is searched for the next matching entry and the directory
 13453                                  ;	entry is loaded at the disk transfer address
 13454                                  ; Returns:
 13455                                  ;	AL = -1 if no entries matched, otherwise 0
 13456                                  ;----------------------------------------------------------------------------
 13457                                  
 13458                                  _$DIR_SEARCH_NEXT:
 13459 00002D95 368916[6205]            	MOV	[SS:THISFCB],DX
 13460 00002D9A 368C1E[6405]            	MOV	[SS:THISFCB+2],DS
 13461 00002D9F 36C606[2A05]00          	MOV	byte [SS:SATTRIB],0
 13462 00002DA5 36C606[2905]00          	MOV	byte [SS:EXTFCB],0
 13463                                  
 13464 00002DAB 16                      	push	ss
 13465 00002DAC 07                      	pop	es
 13466                                  
 13467 00002DAD BF[8204]                	MOV	DI,SEARCHBUF
 13468                                  
 13469 00002DB0 89D6                    	MOV	SI,DX
 13470 00002DB2 803CFF                  	CMP	BYTE [SI],0FFh
 13471 00002DB5 750D                    	JNZ	short NORMFCB6
 13472 00002DB7 83C606                  	ADD	SI,6
 13473 00002DBA AC                      	LODSB
 13474                                  
 13475 00002DBB 36A2[2A05]              	MOV	[SS:SATTRIB],AL
 13476 00002DBF 36FE0E[2905]            	DEC	byte [SS:EXTFCB]
 13477                                  NORMFCB6:
 13478 00002DC4 AC                      	LODSB				; Get original user drive byte
 13479 00002DC5 50                      	push	ax			; Put it on stack
 13480 00002DC6 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 13481 00002DC9 AA                      	STOSB				; Put in correct place
 13482 00002DCA B90A00                  	MOV	CX,20/2
 13483 00002DCD F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 13484                                  
 13485 00002DCF 16                      	push	ss
 13486 00002DD0 1F                      	pop	ds
 13487                                  
 13488 00002DD1 FF36[F802]              	push	word [DMAADD]
 13489 00002DD5 FF36[FA02]              	push	word [DMAADD+2]
 13490 00002DD9 C706[F802][8204]        	MOV	WORD [DMAADD],SEARCHBUF
 13491 00002DDF 8C1E[FA02]              	MOV	WORD [DMAADD+2],DS
 13492 00002DE3 E8580C                  	call	DOS_SEARCH_NEXT 	; Find it
 13493 00002DE6 8F06[FA02]              	pop	word [DMAADD+2]
 13494 00002DEA 8F06[F802]              	pop	word [DMAADD]
 13495 00002DEE 7203                    	JC	short SearchNoMore
 13496 00002DF0 E956FF                  	JMP	SearchSet		; Ok set return
 13497                                  
 13498                                  SearchNoMore:
 13499 00002DF3 C43E[6205]              	LES	DI,[THISFCB]
 13500 00002DF7 F606[2905]FF            	TEST	byte [EXTFCB],0FFh
 13501 00002DFC 7403                    	JZ	short NORMFCB8
 13502 00002DFE 83C707                  	ADD	DI,7			; Point past the extension
 13503                                  NORMFCB8:
 13504 00002E01 5B                      	pop	bx			; Get original drive byte
 13505 00002E02 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 13506                                  					;  at the right spot
 13507                                  ;
 13508                                  ; error code is in AX
 13509                                  ;
 13510 00002E05 E9B2E9                  	jmp	FCB_RET_ERR
 13511                                  
 13512                                  ;---------------------------------------------------------------------------
 13513                                  ;
 13514                                  ;   Procedure Name : $FIND_FIRST
 13515                                  ; 
 13516                                  ;   Assembler usage:
 13517                                  ;	    MOV AH, FindFirst
 13518                                  ;	    LDS DX, name
 13519                                  ;	    MOV CX, attr
 13520                                  ;	    INT 21h
 13521                                  ;	; DMA address has datablock
 13522                                  ;
 13523                                  ;   Error Returns:
 13524                                  ;	    AX = error_path_not_found
 13525                                  ;	       = error_no_more_files
 13526                                  ;---------------------------------------------------------------------------
 13527                                  
 13528                                  _$FIND_FIRST:
 13529 00002E08 89D6                    	MOV	SI,DX			; get name in appropriate place
 13530 00002E0A 36880E[2A05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 13531                                  
 13532 00002E0F BF[8203]                	MOV	DI,OPENBUF		; appropriate buffer
 13533                                  
 13534 00002E12 E8833F                  	call	TransPathSet		; convert the path
 13535 00002E15 7305                    	JNC	short Find_it 		; no error, go and look
 13536                                  FindError:
 13537                                  	;mov	al,3
 13538 00002E17 B003                    	mov	al, error_path_not_found ; error and map into one.
 13539 00002E19 E988E9                  	jmp	SYS_RET_ERR
 13540                                  Find_it:
 13541 00002E1C 16                      	push	ss
 13542 00002E1D 1F                      	pop	ds
 13543                                  
 13544 00002E1E FF36[F802]              	push	word [DMAADD]
 13545 00002E22 FF36[FA02]              	push	word [DMAADD+2]
 13546 00002E26 C706[F802][8204]        	MOV	WORD [DMAADD],SEARCHBUF
 13547 00002E2C 8C1E[FA02]              	MOV	WORD [DMAADD+2],DS
 13548                                  	; MSDOS 6.0
 13549                                  	;call	GET_FAST_SEARCH 	; search
 13550                                  	; MSDOS 3.3
 13551 00002E30 E8560B                  	call	DOS_SEARCH_FIRST
 13552 00002E33 8F06[FA02]              	pop	word [DMAADD+2]
 13553 00002E37 8F06[F802]              	pop	word [DMAADD]
 13554 00002E3B 7303                    	JNC	short FindSet 		; no error, transfer info
 13555 00002E3D E964E9                  	jmp	SYS_RET_ERR
 13556                                  
 13557                                  FindSet:
 13558 00002E40 BE[8204]                	MOV	SI,SEARCHBUF
 13559 00002E43 C43E[F802]              	LES	DI,[DMAADD]
 13560 00002E47 B91500                  	MOV	CX,21
 13561 00002E4A F3A4                    	REP	MOVSB
 13562 00002E4C 56                      	PUSH	SI			; Save pointer to start of entry
 13563                                  	;mov	al,[si+0Bh]
 13564 00002E4D 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 13565 00002E50 AA                      	STOSB
 13566                                  	;add	si,16h
 13567 00002E51 83C616                  	ADD	SI,dir_entry.dir_time
 13568 00002E54 A5                      	MOVSW				; dir_time
 13569 00002E55 A5                      	MOVSW				; dir_date
 13570 00002E56 46                      	INC	SI
 13571 00002E57 46                      	INC	SI			; Skip dir_first
 13572 00002E58 A5                      	MOVSW				; dir_size (2 words)
 13573 00002E59 A5                      	MOVSW
 13574 00002E5A 5E                      	POP	SI			; Point back to dir_name
 13575 00002E5B E83600                   	CALL	PackName
 13576 00002E5E E93AE9                  	jmp	SYS_RET_OK		; bye with no errors
 13577                                  
 13578                                  ;---------------------------------------------------------------------------
 13579                                  ;
 13580                                  ;   Procedure Name : $FIND_NEXT
 13581                                  ;
 13582                                  ;   Assembler usage:
 13583                                  ;	; dma points at area returned by find_first
 13584                                  ;	    MOV AH, findnext
 13585                                  ;	    INT 21h
 13586                                  ;	; next entry is at dma
 13587                                  ;
 13588                                  ;   Error Returns:
 13589                                  ;	    AX = error_no_more_files
 13590                                  ;---------------------------------------------------------------------------
 13591                                  
 13592                                  _$FIND_NEXT:
 13593 00002E61 16                      	push	ss
 13594 00002E62 07                      	pop	es
 13595                                  
 13596 00002E63 BF[8204]                	MOV	DI,SEARCHBUF
 13597                                  
 13598 00002E66 36C536[F802]            	LDS	SI,[SS:DMAADD]
 13599                                  
 13600 00002E6B B91500                  	MOV	CX,21
 13601 00002E6E F3A4                    	REP	MOVSB			; Put the search continuation info
 13602                                  					;  in the right place
 13603 00002E70 16                      	push	ss
 13604 00002E71 1F                      	pop	ds			; get ready for search
 13605                                  	
 13606 00002E72 FF36[F802]              	push	word [DMAADD]
 13607 00002E76 FF36[FA02]              	push	word [DMAADD+2]
 13608 00002E7A C706[F802][8204]        	MOV	WORD [DMAADD],SEARCHBUF
 13609 00002E80 8C1E[FA02]              	MOV	WORD [DMAADD+2],DS
 13610 00002E84 E8B70B                  	call	DOS_SEARCH_NEXT 	; Find it
 13611 00002E87 8F06[FA02]              	pop	word [DMAADD+2]
 13612 00002E8B 8F06[F802]              	pop	word [DMAADD]
 13613 00002E8F 73AF                    	JNC	short FindSet 		; No error, set info
 13614 00002E91 E910E9                  	jmp	SYS_RET_ERR
 13615                                  
 13616                                  ;---------------------------------------------------------------------------
 13617                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 13618                                  ;
 13619                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 13620                                  ;	the ASCIZ format.
 13621                                  ;
 13622                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 13623                                  ;		(ES:DI) = destination area (13 bytes)
 13624                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 13625                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 13626                                  ;---------------------------------------------------------------------------
 13627                                  
 13628                                  PackName:
 13629                                  ;	Move over 8 characters to cover the name component, then trim it's
 13630                                  ;	trailing blanks.
 13631                                  
 13632 00002E94 B90800                  	MOV	CX,8			; Pack the name
 13633 00002E97 F3A4                    	REP	MOVSB			; Move all of it
 13634                                  main_kill_tail:
 13635 00002E99 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 13636 00002E9E 7507                    	JNZ	short find_check_dot
 13637 00002EA0 4F                      	DEC	DI			; Back up over trailing space
 13638 00002EA1 41                      	INC	CX
 13639 00002EA2 83F908                  	CMP	CX,8
 13640 00002EA5 72F2                    	JB	short main_kill_tail
 13641                                  find_check_dot:
 13642                                  	;CMP	WORD [SI],(" " << 8) | " "
 13643 00002EA7 813C2020                	cmp     word [si],2020h 
 13644 00002EAB 7506                    	JNZ	short got_ext 		; Some chars in extension
 13645 00002EAD 807C0220                	CMP	BYTE [SI+2]," "
 13646 00002EB1 7412                    	JZ	short find_done		; No extension
 13647                                  got_ext:
 13648 00002EB3 B02E                    	MOV	AL,"."
 13649 00002EB5 AA                      	STOSB
 13650 00002EB6 B90300                  	MOV	CX,3
 13651 00002EB9 F3A4                    	REP	MOVSB
 13652                                  ext_kill_tail:
 13653 00002EBB 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 13654 00002EC0 7503                    	JNZ	short find_done
 13655 00002EC2 4F                      	DEC	DI			; Back up over trailing space
 13656 00002EC3 EBF6                    	JMP	short ext_kill_tail
 13657                                  find_done:
 13658 00002EC5 31C0                    	XOR	AX,AX
 13659 00002EC7 AA                      	STOSB				; NUL terminate
 13660 00002EC8 C3                      	retn
 13661                                  
 13662                                  ;GET_FAST_SEARCH:
 13663                                  ;	; 22/07/2018
 13664                                  ;	; MSDOS 6.0
 13665                                  ;	OR	word [DOS34_FLAG],SEARCH_FASTOPEN 
 13666                                  ;					;FO.trigger fastopen ;AN000;
 13667                                  ;	call	DOS_SEARCH_FIRST
 13668                                  ;	retn
 13669                                  
 13670                                  
 13671                                  ;============================================================================
 13672                                  ; PATH.ASM, MSDOS 6.0, 1991
 13673                                  ;============================================================================
 13674                                  ; 06/08/2018 - Retro DOS v3.0
 13675                                  
 13676                                  ;**	Directory related system calls. These will be passed direct text of the
 13677                                  ;	pathname from the user. They will need to be passed through the macro
 13678                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 13679                                  ;	defined in DISPATCH. The system calls are:
 13680                                  ;
 13681                                  ;	$CURRENT_DIR  Written
 13682                                  ;	$RMDIR	  Written
 13683                                  ;	$CHDIR	  Written
 13684                                  ;	$MKDIR	  Written
 13685                                  ;
 13686                                  ;
 13687                                  ;	Modification history:
 13688                                  ;
 13689                                  ;	    Created: ARR 4 April 1983
 13690                                  ;		 MZ 10 May 1983     CurrentDir implemented
 13691                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 13692                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 13693                                  ;				    current directory.
 13694                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 13695                                  
 13696                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 13697                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 13698                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 13699                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 13700                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 13701                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 13702                                  ;	I_Need	cMeta,BYTE
 13703                                  ;	I_Need	DrvErr,BYTE					;AN000;
 13704                                  
 13705                                  
 13706                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 13707                                  ;---------------------------------------------------------------------------
 13708                                  ;
 13709                                  ;   Procedure Name : $CURRENT_DIR
 13710                                  ;
 13711                                  ;   Assembler usage:
 13712                                  ;		LDS	SI,area
 13713                                  ;		MOV	DL,drive
 13714                                  ;		INT	21h
 13715                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 13716                                  ;	    ; current directory.
 13717                                  ;   Error returns:
 13718                                  ;	    AX = error_invalid_drive
 13719                                  ;
 13720                                  ;---------------------------------------------------------------------------
 13721                                  
 13722                                  _$CURRENT_DIR:
 13723                                  	;06/08/2018 - Retro DOS v3.0
 13724                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 13725 00002EC9 E843F2                  	call	EcritDisk
 13726 00002ECC 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 13727 00002ECE E8D13D                  	call	GetVisDrv		; grab it
 13728 00002ED1 7308                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 13729                                  CurdirErr:
 13730 00002ED3 E841F2                  	call	LcritDisk
 13731                                  	
 13732                                  	; MSDOS 6.0
 13733                                  	;MOV	AL,[CS:DrvErr]		;IFS.			;AN000;
 13734                                  
 13735                                  	; MSDOS 3.3
 13736 00002ED6 B00F                    	mov	al,0Fh
 13737                                  
 13738                                  curdir_errj:
 13739 00002ED8 E9C9E8                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 13740                                  
 13741                                  CurrentValidate:
 13742 00002EDB 1E                      	push	ds		; save destination
 13743 00002EDC 56                      	push	si
 13744 00002EDD 2EC536[5E05]            	LDS	SI,[CS:THISCDS]
 13745                                  	;TEST	word [SI+curdir.flags],curdir_isnet
 13746                                  	;JNZ	short DoCheck
 13747                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 13748                                  ; media check.
 13749                                  ;	CMP	word [SI+curdir.ID],0
 13750                                  ;	JZ	short GetDst
 13751                                  DoCheck:
 13752 00002EE2 2EC606[1603]00          	MOV	byte [cs:NoSetDir],0	; interested only in contents
 13753                                  
 13754 00002EE8 BF[8203]                	MOV	DI,OPENBUF
 13755                                  
 13756 00002EEB E8791E                  	call	ValidateCDS		; output is ES:DI -> CDS
 13757 00002EEE 06                      	push	es	 		; swap source and destination
 13758 00002EEF 57                      	push	di
 13759 00002EF0 5E                      	pop	si
 13760 00002EF1 1F                      	pop	ds
 13761                                  GetDst:
 13762 00002EF2 5F                      	pop	di
 13763 00002EF3 07                      	pop	es			; get real destination
 13764 00002EF4 72DD                    	JC	short CurdirErr
 13765                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 13766 00002EF6 03744F                  	ADD	SI,[SI+curdir.end]
 13767 00002EF9 803C5C                  	CMP	BYTE [SI],'\'		; root or subdirs present?
 13768 00002EFC 7501                    	JNZ	short CurrentCopy
 13769 00002EFE 46                      	INC	SI
 13770                                  CurrentCopy:
 13771                                  ;	call	FStrCpy
 13772                                  ;; 10/29/86 E5 char
 13773 00002EFF 50                      	PUSH	AX
 13774 00002F00 AC                      	LODSB				; get char
 13775 00002F01 08C0                    	OR	AL,AL
 13776 00002F03 7413                    	JZ	short FOK
 13777 00002F05 3C05                    	CMP	AL,05
 13778 00002F07 740D                    	JZ	short FCHANGE
 13779 00002F09 EB01                    	JMP	short FFF
 13780                                  FCPYNEXT:
 13781 00002F0B AC                      	LODSB				; get char
 13782                                  FFF:
 13783 00002F0C 3C5C                    	CMP	AL,'\'			; beginning of directory
 13784 00002F0E 7508                    	JNZ	short FOK		; no
 13785 00002F10 AA                      	STOSB				; put into user's buffer
 13786 00002F11 AC                      	LODSB				; 1st char of dir is 05?
 13787 00002F12 3C05                    	CMP	AL,05H
 13788 00002F14 7502                    	JNZ	short FOK		; no
 13789                                  FCHANGE:
 13790 00002F16 B0E5                    	MOV	AL,0E5H			; make it E5
 13791                                  FOK:
 13792 00002F18 AA                      	STOSB				; put into user's buffer
 13793 00002F19 08C0                    	OR	AL,AL			; final char
 13794 00002F1B 75EE                    	JNZ	short FCPYNEXT		; no
 13795 00002F1D 58                      	POP	AX
 13796                                  
 13797                                  ;; 10/29/86 E5 char
 13798 00002F1E 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 13799 00002F20 E8F4F1                  	call	LcritDisk
 13800 00002F23 E975E8                  	jmp	SYS_RET_OK		; no more, bye!
 13801                                  
 13802                                  
 13803                                  ;BREAK <$RmDir -- Remove a directory>
 13804                                  ;---------------------------------------------------------------------------
 13805                                  ;
 13806                                  ; Procedure Name : $RmDir
 13807                                  ;
 13808                                  ; Inputs:
 13809                                  ;	DS:DX Points to asciz name
 13810                                  ; Function:
 13811                                  ;	Delete directory if empty
 13812                                  ; Returns:
 13813                                  ;	STD XENIX Return
 13814                                  ;	AX = error_path_not_found If path bad
 13815                                  ;	AX = error_access_denied If
 13816                                  ;		Directory not empty
 13817                                  ;		Path not directory
 13818                                  ;		Root directory specified
 13819                                  ;		Directory malformed (. and .. not first two entries)
 13820                                  ;		User tries to delete a current directory
 13821                                  ;	AX = error_current_directory
 13822                                  ;
 13823                                  ;----------------------------------------------------------------------------
 13824                                  
 13825                                  _$RMDIR:
 13826 00002F26 52                      	push	dx			; Save ptr to name
 13827 00002F27 1E                      	push	ds
 13828 00002F28 89D6                    	mov	si,dx			; Load ptr into si
 13829 00002F2A BF[8203]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 13830 00002F2D 57                      	push	di
 13831 00002F2E E86F3E                  	call	TransPathNoSet		; Translate the name
 13832 00002F31 5F                      	pop	di			; di = ptr to buf for trans name
 13833 00002F32 7307                    	jnc	short rmlset		; If transpath succeeded, continue
 13834 00002F34 1F                      	pop	ds
 13835 00002F35 5A                      	pop	dx			; Restore the	 name
 13836 00002F36 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 13837                                  	;jmp	short curdir_errj
 13838                                  rmdir_errj: ; 10/08/2018
 13839 00002F38 E969E8                  	jmp	SYS_RET_ERR
 13840                                  rmlset:
 13841 00002F3B 36803E[3705]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 13842 00002F41 7512                    	Jnz	short rmerr		;	return (-1);
 13843 00002F43 16                      	push	ss
 13844 00002F44 07                      	pop	es
 13845 00002F45 30C0                    	xor	al,al			; al = 0 , ie drive a:
 13846                                  rmloop: 
 13847 00002F47 E8C23D                  	call	GetCDSFromDrv		; Get curdir for drive in al
 13848 00002F4A 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 13849 00002F4C E888F0                  	call	StrCmp			; Are the 2 paths the same?
 13850 00002F4F 7404                    	jz	short rmerr		; Yes, report error.
 13851 00002F51 FEC0                    	inc	al			; No, inc al to next drive number
 13852 00002F53 EBF2                    	jmp	short rmloop		; Go check next drive.
 13853                                  rmerr:
 13854 00002F55 1F                      	pop	ds
 13855 00002F56 5A                      	pop	dx			; Restore the name
 13856 00002F57 B010                    	mov	al,error_current_directory ;  error
 13857                                  	;jmp	short curdir_errj
 13858 00002F59 EBDD                    	jmp	short rmdir_errj
 13859                                  rmcont:
 13860 00002F5B 1F                      	pop	ds
 13861 00002F5C 5A                      	pop	dx			; Restore the name
 13862 00002F5D BE[ED3D]                	MOV	SI,DOS_RMDIR
 13863 00002F60 EB75                    	JMP	short DoDirCall ; 07/09/2018
 13864                                  
 13865                                  ;BREAK <$ChDir -- Change current directory on a drive>
 13866                                  ;----------------------------------------------------------------------------
 13867                                  ;
 13868                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 13869                                  ; for setting up the CDS for the specified drive appropriately.  There are
 13870                                  ; several cases to consider:
 13871                                  ;
 13872                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 13873                                  ;	it into a WFP.	We verify the existance of this directory and then
 13874                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 13875                                  ;	directory cluster.
 13876                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 13877                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 13878                                  ;	WFP back into the CDS.
 13879                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 13880                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 13881                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 13882                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 13883                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 13884                                  ;	to process the path but to return the logical CDS and the logical
 13885                                  ;	path.  We then copy the logical path into the logical CDS.
 13886                                  ;
 13887                                  ; Inputs:
 13888                                  ;	DS:DX Points to asciz name
 13889                                  ; Returns:
 13890                                  ;	STD XENIX Return
 13891                                  ;	AX = chdir_path_not_found if error
 13892                                  ;
 13893                                  ;----------------------------------------------------------------------------
 13894                                  
 13895                                  _$CHDIR:
 13896 00002F62 BF[8203]                	MOV	DI,OPENBUF		; spot for translated name
 13897 00002F65 89D6                    	MOV	SI,DX			; get source
 13898 00002F67 E82A3E                  	call	TransPath		; go munge the path and get real CDS
 13899 00002F6A 7305                    	JNC	short ChDirCrack	; no errors, try path
 13900                                  ChDirErrP:
 13901 00002F6C B003                    	MOV	AL,error_path_not_found
 13902                                  ChDirErr:
 13903 00002F6E E933E8                  	jmp	SYS_RET_ERR 	; oops!
 13904                                  
 13905                                  ChDirCrack:
 13906 00002F71 803E[3705]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 13907 00002F76 75F4                    	JNZ	short ChDirErrP
 13908                                  ;
 13909                                  ; We cannot do a ChDir (yet) on a raw CDS.  This is treated as a path not
 13910                                  ; found.
 13911                                  ;
 13912 00002F78 C43E[5E05]              	LES	DI,[THISCDS]
 13913 00002F7C 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 13914 00002F7F 74EB                    	JZ	short ChDirErrP		;	error ();
 13915                                   ;
 13916                                   ; Find out if the directory exists.
 13917                                   ;
 13918 00002F81 E8340E                  	call	DOS_CHDIR
 13919 00002F84 72E8                    	Jc	short ChDirErr
 13920                                  ;
 13921                                  ; Get back CDS to see if a join as seen.  Set the currency pointer (only if
 13922                                  ; not network).  If one was seen, all we need to do is copy in the text
 13923                                  ;
 13924 00002F86 C43E[5E05]              	LES	DI,[THISCDS]
 13925 00002F8A 26F745430020            	TEST	word [ES:DI+curdir.flags],curdir_splice
 13926 00002F90 7425                    	JZ	short GotCDS
 13927                                  ;
 13928                                  ; The CDS was joined.  Let's go back and grab the logical CDS.
 13929                                  ;
 13930 00002F92 06                      	push	es	
 13931 00002F93 57                      	push	di
 13932 00002F94 51                      	push	cx			; save CDS and cluster...
 13933 00002F95 E8B1E6                  	call	Get_User_Stack		; get original text
 13934 00002F98 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 13935 00002F9B 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 13936 00002F9E BE[8203]                	MOV	SI,OPENBUF		; spot for translated name
 13937 00002FA1 87F7                    	XCHG	SI,DI
 13938 00002FA3 30C0                    	XOR	AL,AL			; do no splicing
 13939 00002FA5 57                      	push	di
 13940 00002FA6 E8F73D                  	call	TransPathNoSet		; Munge path
 13941 00002FA9 5E                      	pop	si
 13942                                  ;
 13943                                  ; There should NEVER be an error here.
 13944                                  ;
 13945                                  
 13946                                  ;IF FALSE
 13947                                  ;	JNC SKipErr
 13948                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 13949                                  ;SkipErr:
 13950                                  ;ENDIF
 13951 00002FAA C43E[5E05]              	LES	DI,[THISCDS]		; get new CDS
 13952 00002FAE 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 13953                                  					; no valid cluster here...
 13954 00002FB4 59                      	pop	cx
 13955 00002FB5 5F                      	pop	di
 13956 00002FB6 07                      	pop	es
 13957                                  ;
 13958                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 13959                                  ;
 13960                                  GotCDS:
 13961                                  ;
 13962                                  ; wfp_start points to the text. See if it is long enough
 13963                                  ;
 13964                                  	; MSDOS 3.3
 13965                                  	;push	ss
 13966                                  	;pop	ds
 13967                                  	;mov	si,[WFP_START]
 13968                                  	;push	cx
 13969                                  	;call	DStrLen
 13970                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 13971                                  	;pop	cx
 13972                                  	;ja	short ChDirErrP
 13973                                  
 13974                                  	; MSDOS 6.0
 13975 00002FB7 E84800                  	CALL	Check_PathLen		;PTM.		;AN000;
 13976 00002FBA 77B0                    	JA	short ChDirErrP
 13977                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13978 00002FBC 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 13979 00002FC2 7508                    	JNZ	short SkipRecency
 13980                                  	; MSDOS 6.0
 13981                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 13982                                  	;				;PTM. for Join and Subst ;AN000;
 13983                                  	;JZ	short setdirclus	;PTM.		;AN000;
 13984                                  	;MOV	CX,-1			;PTM.		;AN000;
 13985                                  ;setdirclus:
 13986 00002FC4 26894D49                	MOV	[ES:DI+curdir.ID],CX
 13987 00002FC8 C43E[5E05]              	LES	DI,[THISCDS]		; get logical CDS
 13988                                  SkipRecency:
 13989 00002FCC E835F0                  	call	FStrCpy
 13990 00002FCF 30C0                    	XOR	AL,AL
 13991                                  mkdir_ok:
 13992 00002FD1 E9C7E7                  	jmp	SYS_RET_OK
 13993                                  
 13994                                  
 13995                                  ;BREAK <$MkDir - Make a directory entry>
 13996                                  ;---------------------------------------------------------------------------
 13997                                  ;
 13998                                  ; Procedure Name : $MkDir
 13999                                  ; Inputs:
 14000                                  ;	DS:DX Points to asciz name
 14001                                  ; Function:
 14002                                  ;	Make a new directory
 14003                                  ; Returns:
 14004                                  ;	STD XENIX Return
 14005                                  ;	AX = mkdir_path_not_found if path bad
 14006                                  ;	AX = mkdir_access_denied  If
 14007                                  ;		Directory cannot be created
 14008                                  ;		Node already exists
 14009                                  ;		Device name given
 14010                                  ;		Disk or directory(root) full
 14011                                  ;---------------------------------------------------------------------------
 14012                                  
 14013                                  _$MKDIR:
 14014 00002FD4 BE[CB3C]                	MOV	SI,DOS_MKDIR
 14015                                  DoDirCall:
 14016 00002FD7 BF[8203]                	MOV	DI,OPENBUF		; spot for translated name
 14017                                  
 14018 00002FDA 56                      	push	si
 14019 00002FDB 89D6                    	MOV	SI,DX			; get source
 14020 00002FDD E8B43D                  	call	TransPath		; go munge the path
 14021 00002FE0 5E                      	pop	si
 14022 00002FE1 7305                    	JNC	short MkDirCrack	; no errors, try path
 14023                                  MkErrP:
 14024 00002FE3 B003                    	MOV	AL,error_path_not_found	; oops!
 14025                                  MkErr:
 14026 00002FE5 E9BCE7                  	jmp	SYS_RET_ERR
 14027                                  MkDirCrack:
 14028 00002FE8 36803E[3705]FF          	CMP	byte [SS:CMETA],-1
 14029 00002FEE 75F3                    	JNZ	short MkErrP
 14030                                  
 14031                                  	; MSDOS 3.3
 14032                                  	;push	ss
 14033                                  	;pop	ds
 14034                                  	;call	si
 14035                                  	;jb	short MkErr
 14036                                  	;;jmp	short mkdir_ok
 14037                                  	;jmp	SYS_RET_OK
 14038                                  
 14039                                  	; MSDOS 6.0
 14040 00002FF0 56                      	PUSH	SI			;PTM.			;AN000;
 14041 00002FF1 E80E00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 14042 00002FF4 5E                      	POP	SI			;PTM.			;AN000;
 14043 00002FF5 7604                    	JBE	short pathok		;PTM.			;AN000;
 14044 00002FF7 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 14045                                  	;jmp	SYS_RET_ERR		;PTM.
 14046 00002FF9 EBEA                    	jmp	short MkErr
 14047                                  pathok:
 14048 00002FFB FFD6                    	CALL	SI			; go get file
 14049 00002FFD 72E6                    	JC	short MkErr		; no errors
 14050                                  	;jmp	short mkdir_ok
 14051 00002FFF E999E7                  	jmp	SYS_RET_OK
 14052                                  
 14053                                  ;----------------------------------------------------------------------------
 14054                                  ;
 14055                                  ; Procedure Name : Check_PathLen
 14056                                  ;
 14057                                  ; Inputs:
 14058                                  ;	nothing
 14059                                  ; Function:
 14060                                  ;	check if final path length greater than 67
 14061                                  ; Returns:
 14062                                  ;	Above flag set if > 67
 14063                                  ;
 14064                                  ;---------------------------------------------------------------------------
 14065                                  
 14066                                  Check_PathLen:
 14067                                  	; 09/09/2018
 14068                                  	;;MOV	SI,[WFP_START]
 14069                                  	;MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 14070                                  ;check_PathLen2:
 14071 00003002 16                      	push	ss
 14072 00003003 1F                      	pop	ds
 14073 00003004 8B36[6E05]              	mov	SI,[WFP_START] ; MSDOS 3.3
 14074 00003008 51                      	push	CX	
 14075 00003009 E80FF0                  	CALL	DStrLen
 14076 0000300C 83F943                  	CMP	CX,DIRSTRLEN
 14077 0000300F 59                      	POP	CX
 14078 00003010 C3                      	retn
 14079                                  
 14080                                  ;============================================================================
 14081                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 14082                                  ;============================================================================
 14083                                  ; 07/08/2018 - Retro DOS v3.0
 14084                                  
 14085                                  ;**	IOCTL system call.
 14086                                  ;
 14087                                  ;	$IOCTL
 14088                                  ;
 14089                                  ;	  Revision history:
 14090                                  ;
 14091                                  ;		Created: ARR 4 April 1983
 14092                                  ;
 14093                                  ;		GenericIOCTL added:		KGS	22 April 1985
 14094                                  ;
 14095                                  ;		A000	version 4.00	Jan. 1988
 14096                                  ;
 14097                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 14098                                  ;
 14099                                  
 14100                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 14101                                  ;---------------------------------------------------------------------------
 14102                                  ;
 14103                                  ;   Assembler usage:
 14104                                  ;	    MOV     BX, Handle
 14105                                  ;	    MOV     DX, Data
 14106                                  ;
 14107                                  ;	(or LDS     DX,BUF
 14108                                  ;	    MOV     CX,COUNT)
 14109                                  ;
 14110                                  ;	    MOV     AH, Ioctl
 14111                                  ;	    MOV     AL, Request
 14112                                  ;	    INT     21h
 14113                                  ;
 14114                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 14115                                  ;	    attribute word in DX, handle in BX:
 14116                                  ;	    DH = high word of device driver attributes
 14117                                  ;	    DL = low byte of sf_flags
 14118                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 14119                                  ;	    in BX.
 14120                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 14121                                  ;	    into DS:DX.  Return number read in AX.
 14122                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 14123                                  ;	    DS:DX.  Return bytes written in AX.
 14124                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 14125                                  ;	    into DS:DX.  Return number read in AX.
 14126                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 14127                                  ;	    DS:DX.  Return bytes written in AX.
 14128                                  ;	 6  Return input status of handle in BX. If a read will go to the
 14129                                  ;	    device, AL = 0FFh, otherwise 0.
 14130                                  ;	 7  Return output status of handle in BX. If a write will go to the
 14131                                  ;	    device, AL = 0FFh, otherwise 0.
 14132                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 14133                                  ;	    removable media, 0 otherwise.
 14134                                  ;	 9  Return the contents of the device attribute word in DX for the
 14135                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 14136                                  ;	    network. 8000h is the bit for local use.
 14137                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 14138                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 14139                                  ;	    the count and CX is the delay.
 14140                                  ;
 14141                                  ;   Error returns:
 14142                                  ;	    AX = error_invalid_handle
 14143                                  ;	       = error_invalid_function
 14144                                  ;	       = error_invalid_data
 14145                                  ;
 14146                                  ;-------------------------------------------------------------------------------
 14147                                  ;
 14148                                  ;   This is the documentation copied from DOS 4.0 it is much better
 14149                                  ;   than the above
 14150                                  ;
 14151                                  ;	There are several basic forms of IOCTL calls:
 14152                                  ;
 14153                                  ;
 14154                                  ;	** Get/Set device information:	**
 14155                                  ;
 14156                                  ;	ENTRY	(AL) = function code
 14157                                  ;		  0 - Get device information
 14158                                  ;		  1 - Set device information
 14159                                  ;		(BX) = file handle
 14160                                  ;		(DX) = info for "Set Device Information"
 14161                                  ;	EXIT	'C' set if error
 14162                                  ;		  (AX) = error code
 14163                                  ;		'C' clear if OK
 14164                                  ;		  (DX) = info for "Get Device Information"
 14165                                  ;	USES	ALL
 14166                                  ;
 14167                                  ;
 14168                                  ;	**  Read/Write Control Data From/To Handle  **
 14169                                  ;
 14170                                  ;	ENTRY	(AL) = function code
 14171                                  ;		  2 - Read device control info
 14172                                  ;		  3 - Write device control info
 14173                                  ;		(BX) = file handle
 14174                                  ;		(CX) = transfer count
 14175                                  ;		(DS:DX) = address for data
 14176                                  ;	EXIT	'C' set if error
 14177                                  ;		  (AX) = error code
 14178                                  ;		'C' clear if OK
 14179                                  ;		  (AX) = count of bytes transfered
 14180                                  ;	USES	ALL
 14181                                  ;
 14182                                  ;
 14183                                  ;	**  Read/Write Control Data From/To Block Device  **
 14184                                  ;
 14185                                  ;	ENTRY	(AL) = function code
 14186                                  ;		  4 - Read device control info
 14187                                  ;		  5 - Write device control info
 14188                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14189                                  ;		(CX) = transfer count
 14190                                  ;		(DS:DX) = address for data
 14191                                  ;	EXIT	'C' set if error
 14192                                  ;		  (AX) = error code
 14193                                  ;		'C' clear if OK
 14194                                  ;		  (AX) = count of bytes transfered
 14195                                  ;	USES	ALL
 14196                                  ;
 14197                                  ;
 14198                                  ;	**  Get Input/Output Status  **
 14199                                  ;
 14200                                  ;	ENTRY	(AL) = function code
 14201                                  ;		  6 - Get Input status
 14202                                  ;		  7 - Get Output Status
 14203                                  ;		(BX) = file handle
 14204                                  ;	EXIT	'C' set if error
 14205                                  ;		  (AX) = error code
 14206                                  ;		'C' clear if OK
 14207                                  ;		  (AL) = 00 if not ready
 14208                                  ;		  (AL) = FF if ready
 14209                                  ;	USES	ALL
 14210                                  ;
 14211                                  ;
 14212                                  ;	**  Get Drive Information  **
 14213                                  ;
 14214                                  ;	ENTRY	(AL) = function code
 14215                                  ;		  8 - Check for removable media
 14216                                  ;		  9 - Get device attributes
 14217                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14218                                  ;	EXIT	'C' set if error
 14219                                  ;		  (AX) = error code
 14220                                  ;		'C' clear if OK
 14221                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 14222                                  ;		  (DX) = device attribute word (func. 9)
 14223                                  ;	USES	ALL
 14224                                  ;
 14225                                  ;
 14226                                  ;	**  Get Redirected bit	**
 14227                                  ;
 14228                                  ;	ENTRY	(AL) = function code
 14229                                  ;		  0Ah - Network stuff
 14230                                  ;		(BX) = file handle
 14231                                  ;	EXIT	'C' set if error
 14232                                  ;		  (AX) = error code
 14233                                  ;		'C' clear if OK
 14234                                  ;		  (DX) = SFT flags word, 8000h set if network file
 14235                                  ;	USES	ALL
 14236                                  ;
 14237                                  ;
 14238                                  ;	**  Change sharer retry parameters  **
 14239                                  ;
 14240                                  ;	ENTRY	(AL) = function code
 14241                                  ;		  0Bh - Set retry parameters
 14242                                  ;		(CX) = retry loop count
 14243                                  ;		(DX) = number of retries
 14244                                  ;	EXIT	'C' set if error
 14245                                  ;		  (AX) = error code
 14246                                  ;		'C' clear if OK
 14247                                  ;	USES	ALL
 14248                                  ;
 14249                                  ;
 14250                                  ;   =================================================================
 14251                                  ;
 14252                                  ;	**  New Standard Control  **
 14253                                  ;
 14254                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 14255                                  ;	FORMS ARE OBSOLETE.
 14256                                  ;
 14257                                  ;   =================================================================
 14258                                  ;
 14259                                  ;	ENTRY	(AL) = function code
 14260                                  ;		  0Ch - Control Function subcode
 14261                                  ;		(BX) = File Handle
 14262                                  ;		(CH) = Category Indicator
 14263                                  ;		(CL) = Function within category
 14264                                  ;		(DS:DX) = address for data, if any
 14265                                  ;		(SI) = Passed to device as argument, use depends upon function
 14266                                  ;		(DI) = Passed to device as argument, use depends upon function
 14267                                  ;	EXIT	'C' set if error
 14268                                  ;		  (AX) = error code
 14269                                  ;		'C' clear if OK
 14270                                  ;		  (SI) = Return value, meaning is function dependent
 14271                                  ;		  (DI) = Return value, meaning is function dependent
 14272                                  ;		  (DS:DX) = Return address, use is function dependent
 14273                                  ;	USES	ALL
 14274                                  ;
 14275                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 14276                                  ;     (See inc\ioctl.inc for more info)
 14277                                  ;
 14278                                  ;	ENTRY	(AL) = function code
 14279                                  ;		  0Dh - Control Function subcode
 14280                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 14281                                  ;		(CH) = Category Indicator
 14282                                  ;		(CL) = Function within category
 14283                                  ;		(DS:DX) = address for data, if any
 14284                                  ;		(SI) = Passed to device as argument, use depends upon function
 14285                                  ;		(DI) = Passed to device as argument, use depends upon function
 14286                                  ;
 14287                                  ;	EXIT	'C' set if error
 14288                                  ;		  (AX) = error code
 14289                                  ;		'C' clear if OK
 14290                                  ;		  (DS:DX) = Return address, use is function dependent
 14291                                  ;	USES	ALL
 14292                                  ;
 14293                                  ;---------------------------------------------------------------------------
 14294                                  	
 14295                                  	; MSDOS 6.0
 14296                                  IOCTLJMPTABLE:	;label	word
 14297                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14298 00003011 [4930]                  	dw	ioctl_getset_data	; 0
 14299 00003013 [4930]                  	dw	ioctl_getset_data   	; 1
 14300 00003015 [9930]                  	dw	ioctl_control_string	; 2
 14301 00003017 [9930]                  	dw	ioctl_control_string	; 3
 14302 00003019 [ED31]                  	dw	ioctl_get_dev		; 4
 14303 0000301B [ED31]                  	dw	ioctl_get_dev		; 5
 14304 0000301D [B430]                  	dw	ioctl_status		; 6
 14305 0000301F [B430]                  	dw	ioctl_status		; 7
 14306 00003021 [4931]                  	dw	ioctl_rem_media		; 8
 14307 00003023 [8731]                  	dw	Ioctl_Drive_attr	; 9
 14308 00003025 [DC31]                  	dw	IOCTL_Handle_Redir	; A
 14309 00003027 [D330]                  	dw	Set_Retry_Parameters	; B
 14310 00003029 [E230]                  	dw	GENERICIOCTLHANDLE	; C
 14311 0000302B [F930]                  	dw	GENERICIOCTL		; D
 14312                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14313 0000302D [9C32]                  	dw	ioctl_drive_owner	; E
 14314 0000302F [9C32]                  	dw	ioctl_drive_owner	; F
 14315                                  	; MSDOS 6.0
 14316                                  	;dw	query_handle_support	; 10h
 14317                                  	;dw	query_device_support	; 11h
 14318                                  
 14319                                  _$IOCTL:
 14320 00003031 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 14321 00003033 16                      	push	ss
 14322 00003034 1F                      	pop	ds			;hkn; SS is DOSDATA
 14323                                  
 14324                                  	; MSDOS 3.3
 14325 00003035 3C0F                    	cmp	al,0Fh 
 14326                                  	; MSDOS 6.0
 14327                                  	;cmp	al,11h			; al must be between 0 & 11h
 14328 00003037 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 14329                                  
 14330                                  	; 09/09/2018
 14331                                  	;push	AX			; Need to save AL for generic IOCTL
 14332 00003039 89C7                    	mov	di,ax			; di NOT a PARM
 14333 0000303B 81E7FF00                	and	di,0FFh			; di = al
 14334 0000303F D1E7                    	shl	di,1			; di = index into jmp table
 14335                                  	;pop	AX			; Restore AL for generic IOCTL
 14336                                  
 14337 00003041 2EFFA5[1130]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 14338                                  
 14339                                  
 14340                                  ioctl_bad_funj2:
 14341 00003046 E9F800                  	JMP	ioctl_bad_fun  ; 10/08/2018
 14342                                  
 14343                                  ;--------------------------------------------------------------------------
 14344                                  ;
 14345                                  ; IOCTL: AL= 0,1
 14346                                  ;
 14347                                  ; ENTRY : DS = DOSDATA
 14348                                  ;
 14349                                  ;--------------------------------------------------------------------------
 14350                                  
 14351                                  ioctl_getset_data:
 14352                                  	; MSDOS 6.0
 14353 00003049 E8F93A                  	call	SFFromHandle		; ES:DI -> SFT
 14354 0000304C 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 14355                                  ioctl_bad_handle:
 14356 0000304E B006                    	mov	al,error_invalid_handle
 14357                                  ioctl_error:
 14358 00003050 E951E7                  	jmp	SYS_RET_ERR
 14359                                  
 14360                                  ioctl_check_permissions:
 14361 00003053 3C00                    	CMP	AL,0
 14362 00003055 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 14363 00003059 741B                    	JZ	short ioctl_read	; read the byte
 14364                                  
 14365 0000305B 08F6                    	or	dh, dh
 14366 0000305D 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 14367 0000305F B00D                    	mov	al,error_invalid_data	; no DH <> 0
 14368                                  	;jmp	SYS_RET_ERR
 14369 00003061 EBED                    	jmp	short ioctl_error
 14370                                  
 14371                                  ioctl_check_device:
 14372 00003063 A880                    	test	AL,devid_device 	; can I set this handle?
 14373 00003065 74DF                    	jz	short ioctl_bad_funj2
 14374 00003067 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 14375                                  					;   device bit!! He can muck with the
 14376                                  					;   others at will.
 14377 0000306A C606[EF02]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 14378 0000306F 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 14379                                  
 14380                                  ioctl_ok:
 14381 00003073 E925E7                  	jmp	SYS_RET_OK
 14382                                  
 14383                                  ioctl_read:
 14384 00003076 C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 14385 0000307B 30E4                    	XOR	AH,AH
 14386 0000307D A880                    	test	AL,devid_device 	; Should I set high byte
 14387 0000307F 740D                    	JZ	short ioctl_no_high	; no
 14388 00003081 C606[EF02]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 14389 00003086 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 14390 0000308A 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 14391                                  ioctl_no_high:
 14392 0000308E 89C2                    	MOV	DX,AX
 14393 00003090 E8B6E5                  	call	Get_User_Stack
 14394 00003093 895406                  	MOV	[SI+user_env.user_DX],DX
 14395                                  	;;jmp	SYS_RET_OK
 14396                                  	;jmp	short ioctl_ok
 14397                                  	; 26/07/2019
 14398 00003096 E905E7                  	jmp	SYS_RET_OK_clc
 14399                                  
 14400                                  ;--------------------------------------------------------------------------
 14401                                  ;
 14402                                  ; IOCTL: 2,3
 14403                                  ;
 14404                                  ; ENTRY : DS = DOSDATA
 14405                                  ;	  SI = user's DS
 14406                                  ;
 14407                                  ;--------------------------------------------------------------------------
 14408                                  
 14409                                  ioctl_control_string:
 14410                                  
 14411 00003099 E8A93A                  	call	SFFromHandle		; ES:DI -> SFT
 14412 0000309C 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 14413 0000309E 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 14414 000030A4 74A0                    	jz	short ioctl_bad_funj2			; No it is a file
 14415 000030A6 C606[EF02]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 14416 000030AB 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 14417 000030AF 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 14418 000030B1 E93E01                  	JMP	ioctl_do_string
 14419                                  
 14420                                  ;--------------------------------------------------------------------------
 14421                                  ;
 14422                                  ; IOCTL: AL = 6,7
 14423                                  ;
 14424                                  ; ENTRY: DS = DOSDATA
 14425                                  ;
 14426                                  ;--------------------------------------------------------------------------
 14427                                  
 14428                                  ioctl_status:
 14429                                  
 14430 000030B4 B401                    	MOV	AH,1
 14431 000030B6 2C06                    	SUB	AL,6			; 6=0,7=1
 14432 000030B8 7402                    	JZ	short ioctl_get_status
 14433 000030BA B403                    	MOV	AH,3
 14434                                  ioctl_get_status:
 14435 000030BC 50                      	PUSH	AX
 14436 000030BD E8D810                  	call	GET_IO_SFT
 14437 000030C0 58                      	POP	AX
 14438 000030C1 7302                    	JNC	short DO_IOFUNC
 14439 000030C3 EB89                    	JMP	short ioctl_bad_handle	; invalid SFT
 14440                                  
 14441                                  DO_IOFUNC:
 14442 000030C5 E8BF1E                  	call	IOFUNC
 14443 000030C8 88C4                    	MOV	AH,AL
 14444 000030CA B0FF                    	MOV	AL,0FFH
 14445 000030CC 7502                    	JNZ	short ioctl_status_ret
 14446 000030CE FEC0                    	INC	AL
 14447                                  ioctl_status_ret:
 14448 000030D0 E9C8E6                  	jmp	SYS_RET_OK
 14449                                  
 14450                                  ;--------------------------------------------------------------------------
 14451                                  ;
 14452                                  ; IOCTL: AL = B
 14453                                  ;
 14454                                  ; ENTRY: DS = DOSDATA
 14455                                  ;
 14456                                  ;--------------------------------------------------------------------------
 14457                                  
 14458                                  Set_Retry_Parameters:
 14459                                  	; 09/09/2018
 14460 000030D3 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 14461 000030D7 09D2                    	OR	DX,DX			; zero retries not allowed
 14462 000030D9 7466                    	JZ	short ioctl_bad_fun
 14463 000030DB 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 14464                                  doneok:
 14465 000030DF E9B9E6                  	jmp	SYS_RET_OK		; Done
 14466                                  
 14467                                  ;--------------------------------------------------------------------------
 14468                                  ;
 14469                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 14470                                  ;
 14471                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 14472                                  ;	SI:DX -> Users Device Parameter Table
 14473                                  ;	IOCALL -> IOCTL_Req structure
 14474                                  ;
 14475                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 14476                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 14477                                  ;	call.
 14478                                  ;
 14479                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 14480                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14481                                  ;         return address off the stack if the drive is invalid.
 14482                                  ;
 14483                                  ;--------------------------------------------------------------------------
 14484                                  
 14485                                  query_handle_support:	; Entry point for handles
 14486                                  GENERICIOCTLHANDLE:
 14487                                  
 14488 000030E2 E8603A                  	call	SFFromHandle		; Get SFT for device.
 14489 000030E5 725F                    	jc	short ioctl_bad_handlej
 14490                                  
 14491                                  	; 31/07/2019 - Retro DOS v3.2
 14492                                  	;test	word [es:di+5],8000h
 14493                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 14494                                  	;test	byte [es:di+6],80h
 14495 000030E7 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 14496 000030EC 7553                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 14497                                  
 14498 000030EE C606[EF02]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev
 14499 000030F3 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 14500 000030F7 EB0F                    	jmp	short Do_GenIOCTL
 14501                                  
 14502                                  query_device_support:	; Entry point for devices:
 14503                                  GENERICIOCTL:
 14504                                  
 14505 000030F9 C606[EF02]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk
 14506 000030FE 80FD08                  	cmp	ch,IOC_DC		; Only disk devices are allowed to use
 14507 00003101 753E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 14508                                  
 14509 00003103 E87A01                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 14510 00003106 7539                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 14511                                  
 14512                                  Do_GenIOCTL:
 14513                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 ; Can device handle Generic IOCTL funcs
 14514                                  	; 09/09/2018
 14515 00003108 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 14516 0000310D 7432                    	jz	short ioctl_bad_fun
 14517                                  
 14518                                  	; MSDOS 6.0
 14519                                  	;;mov	byte [IOCALL_REQFUNC],19 ; 13h
 14520                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 14521                                  	;;cmp	al,10h
 14522                                  	;cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 14523                                  	;jl	short SetIOCtlBlock
 14524                                  	
 14525                                  	;;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 14526                                  	;;test	byte [es:di+4],80h 
 14527                                  	;TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 14528                                  	;jz	short ioctl_bad_fun	; No support for query 
 14529                                  	;
 14530                                  	;;mov	byte [IOCALL_REQFUNC],19h	
 14531                                  	;mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 14532                                  
 14533                                  ;SetIOCtlBlock:
 14534 0000310F 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 14535 00003110 57                      	PUSH	DI			; in DS:SI
 14536                                  					; Setup Generic IOCTL Request Block
 14537 00003111 C606[4603]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size ; 23
 14538                                  	; 07/09/2018 (MSDOS 3.3)
 14539                                  	;mov	byte [IOCALL_REQFUNC],19
 14540 00003116 C606[4803]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 14541                                  	;
 14542 0000311B 881E[4703]              	MOV	byte [IOCALL_REQUNIT],BL
 14543 0000311F 882E[5303]              	MOV	byte [IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 14544 00003123 880E[5403]              	MOV	byte [IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 14545 00003127 8936[5503]              	MOV	word [IOCALL+IOCTL_REQ.REG_SI],SI
 14546 0000312B 893E[5703]              	MOV	word [IOCALL+IOCTL_REQ.REG_DI],DI
 14547 0000312F 8916[5903]              	MOV	word [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 14548 00003133 8936[5B03]              	MOV	word [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 14549                                  
 14550                                  ;hkn; IOCALL is in DOSDATA
 14551 00003137 BB[4603]                	MOV	BX,IOCALL
 14552                                  
 14553 0000313A 16                      	PUSH	SS
 14554 0000313B 07                      	POP	ES
 14555                                  					; DS:SI -> Device header.
 14556 0000313C 5E                      	POP	SI
 14557 0000313D 1F                      	POP	DS
 14558                                  	; 10/08/2018
 14559 0000313E E9EA00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 14560                                  
 14561                                  ioctl_bad_fun:
 14562 00003141 B001                    	mov	al, error_invalid_function  ; 1
 14563 00003143 E95EE6                  	jmp	SYS_RET_ERR	
 14564                                  
 14565                                  ioctl_bad_handlej:
 14566 00003146 E905FF                  	jmp	ioctl_bad_handle
 14567                                  
 14568                                  ;---------------------------------------------------------------------------
 14569                                  ;
 14570                                  ; IOCTL AL = 8
 14571                                  ;
 14572                                  ; ENTRY:  DS = DOSDATA
 14573                                  ;
 14574                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 14575                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14576                                  ;         return address off the stack if the drive is invalid.
 14577                                  ;
 14578                                  ;-------------------------------------------------------------------------
 14579                                  
 14580                                  ioctl_rem_media:
 14581                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14582 00003149 E83401                  	CALL	Check_If_Net
 14583 0000314C 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 14584                                  					;   certainly don't know how to do this
 14585                                  					;   call.
 14586                                  	; 31/07/2019 - Retro DOS v3.2
 14587                                  	;test	word [es:di+4],800h
 14588                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 14589                                  	;test	byte [es:di+5],8
 14590 0000314E 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 14591 00003153 74EC                    	JZ	short ioctl_bad_fun		; NO
 14592                                  
 14593                                  ;hkn; SS override for IOCALL
 14594 00003155 36C606[4803]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD
 14595 0000315B B00D                    	MOV	AL,REMHL
 14596 0000315D 88DC                    	MOV	AH,BL			; Unit number
 14597 0000315F 36A3[4603]              	MOV	[SS:IOCALL_REQLEN],AX
 14598 00003163 31C0                    	XOR	AX,AX
 14599 00003165 36A3[4903]              	MOV	[SS:IOCALL_REQSTAT],AX
 14600 00003169 06                      	PUSH	ES
 14601 0000316A 1F                      	POP	DS
 14602 0000316B 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14603 0000316D 16                      	PUSH	SS
 14604 0000316E 07                      	POP	ES
 14605                                  
 14606                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 14607 0000316F BB[4603]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14608 00003172 1E                      	push	ds
 14609 00003173 56                      	push	si
 14610 00003174 E8BD1F                  	call	DEVIOCALL2
 14611 00003177 5E                      	pop	si
 14612 00003178 1F                      	pop	ds
 14613                                  
 14614                                  ;hkn; SS override
 14615 00003179 36A1[4903]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 14616 0000317D 250002                  	AND	AX,STBUI		; Mask to busy bit
 14617 00003180 B109                    	MOV	CL,9
 14618 00003182 D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 14619 00003184 E914E6                  	jmp	SYS_RET_OK
 14620                                  
 14621                                  ;-------------------------------------------------------------------------
 14622                                  ;
 14623                                  ; IOCTL: AL = 9
 14624                                  ;
 14625                                  ; ENTRY: DS = DOSDATA
 14626                                  ;
 14627                                  ;-------------------------------------------------------------------------
 14628                                  
 14629                                  Ioctl_Drive_attr:
 14630                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14631 00003187 88D8                    	mov	al,bl
 14632 00003189 E82D3B                  	call	GETTHISDRV
 14633 0000318C 7249                    	jc	short ioctl_drv_err
 14634 0000318E E8C100                  	call	Get_Driver_BL
 14635                                  	; MSDOS 6.0
 14636 00003191 7244                    	JC	short ioctl_drv_err	; drive not valid
 14637                                  
 14638                                  	;mov	dx,[es:di+4]
 14639 00003193 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 14640                                  					; get device attribute word
 14641 00003197 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 14642                                  
 14643                                  ;hkn; SS override
 14644 00003199 36C43E[5E05]            	LES	DI,[SS:THISCDS]
 14645                                  	; 31/07/2019
 14646                                  	;test	word [es:di+43h],8000h
 14647                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 14648                                  	;test	byte [es:di+44h],80h
 14649 0000319E 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 14650 000031A3 7403                    	JZ	short IOCTLShare
 14651                                  
 14652                                  	;or	dx,1000h ; msdos 3.3
 14653                                  
 14654                                  ;	Net devices don't return a device attribute word.
 14655                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 14656                                  
 14657 000031A5 BA0010                  	MOV	DX,1000h ;  MSDOS 6.0
 14658                                  IOCTLShare:
 14659 000031A8 16                      	push	ss
 14660 000031A9 1F                      	pop	ds
 14661 000031AA BE[8203]                	MOV	SI,OPENBUF
 14662 000031AD 80C341                  	ADD	BL,"A"
 14663 000031B0 881C                    	MOV	[SI],BL
 14664 000031B2 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 14665 000031B7 B80003                  	MOV	AX,0300h
 14666 000031BA F8                      	CLC
 14667                                  	;INT	int_IBM
 14668 000031BB CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 14669                                  			; DS:SI -> ASCIZ disk device name (may be full path or only drive
 14670                                  			; specifier--must include the colon)
 14671                                  			; Return: CF clear if absolute disk access allowed
 14672 000031BD 7304                    	JNC	short IOCTLLocal	; Not shared
 14673 000031BF 81CA0002                	OR	DX,0200H		; Shared, bit 9
 14674                                  IOCTLLocal:
 14675                                  	; 31/07/2019
 14676                                  	;test	word [es:di+43h],1000h
 14677                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 14678                                  	;test	byte [es:di+44h],10h
 14679 000031C3 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 14680 000031C8 7404                    	JZ	short ioctl_set_DX
 14681 000031CA 81CA0080                	OR	DX,8000h
 14682                                  ioctl_set_DX:
 14683 000031CE E878E4                  	call	Get_User_Stack
 14684 000031D1 895406                  	MOV	[SI+user_env.user_DX],DX
 14685                                  	;jmp	SYS_RET_OK
 14686                                  	; 26/07/2019
 14687 000031D4 E9C7E5                  	jmp	SYS_RET_OK_clc
 14688                                  
 14689                                  ioctl_drv_err:
 14690 000031D7 B00F                    	mov	al, error_invalid_drive ; 0Fh
 14691 000031D9 E9C8E5                  	jmp	SYS_RET_ERR
 14692                                  
 14693                                  ;--------------------------------------------------------------------------
 14694                                  ; IOCTL: AL = A
 14695                                  ;
 14696                                  ; ENTRY: DS = DOSDATA
 14697                                  ;
 14698                                  ;--------------------------------------------------------------------------
 14699                                  
 14700                                  IOCTL_Handle_Redir:
 14701 000031DC E86639                  	call	SFFromHandle		; ES:DI -> SFT
 14702 000031DF 7303                    	JNC	short ioctl_got_sft	; have valid handle
 14703 000031E1 E96AFE                  	jmp	ioctl_bad_handle ; 10/08/2018
 14704                                  
 14705                                  ioctl_got_sft:
 14706 000031E4 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 14707 000031E8 EBE4                    	JMP	short ioctl_set_DX	; pass dx to user and return
 14708                                  
 14709                                  ioctl_bad_funj:
 14710 000031EA E954FF                  	JMP	ioctl_bad_fun
 14711                                  
 14712                                  ;--------------------------------------------------------------------------
 14713                                  ;
 14714                                  ; IOCTL: AL= 4,5
 14715                                  ;
 14716                                  ; ENTRY: DS = DOSDATA
 14717                                  ;	 SI = user's DS
 14718                                  ;
 14719                                  ;
 14720                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 14721                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14722                                  ;         return address off the stack if the drive is invalid.
 14723                                  ;
 14724                                  ;-------------------------------------------------------------------------
 14725                                  
 14726                                  ioctl_get_dev:
 14727 000031ED E89000                  	CALL	Check_If_Net
 14728 000031F0 75F8                    	JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 14729                                  					;   certainly don't know how to do this
 14730                                  					;   call.
 14731                                  ioctl_do_string:
 14732                                  	; 31/07/2019
 14733                                  	;test	word [es:di+4],4000h
 14734                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 14735                                  	;test	byte [es:di+5],40h
 14736 000031F2 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 14737 000031F7 74F1                    	JZ	short ioctl_bad_funj		; NO
 14738                                  					; assume IOCTL read
 14739 000031F9 C606[4803]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL
 14740                                  
 14741 000031FE A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 14742 00003200 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 14743                                  
 14744                                  					; it is an IOCTL write
 14745 00003202 C606[4803]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL
 14746                                  
 14747                                  ioctl_control_call:
 14748 00003207 B016                    	MOV	AL,DRDWRHL
 14749                                  ioctl_setup_pkt:
 14750 00003209 88DC                    	MOV	AH,BL			; Unit number
 14751 0000320B A3[4603]                	MOV	[IOCALL_REQLEN],AX
 14752 0000320E 31C0                    	XOR	AX,AX
 14753 00003210 A3[4903]                	MOV	[IOCALL_REQSTAT],AX
 14754 00003213 A2[5303]                	MOV	[IOMED],AL
 14755 00003216 890E[5803]              	MOV	[IOSCNT],CX
 14756 0000321A 8916[5403]              	MOV	[IOXAD],DX
 14757 0000321E 8936[5603]              	MOV	[IOXAD+2],SI
 14758 00003222 06                      	PUSH	ES
 14759 00003223 1F                      	POP	DS
 14760 00003224 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14761 00003226 16                      	PUSH	SS
 14762 00003227 07                      	POP	ES
 14763                                  
 14764 00003228 BB[4603]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14765                                  ioctl_do_IO:
 14766 0000322B E8061F                  	call	DEVIOCALL2
 14767                                  
 14768                                  ;hkn; SS override for IOCALL
 14769                                  	; 31/07/2019
 14770                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 14771                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 14772                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 14773 0000322E 36F606[4A03]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 14774 00003234 7507                    	JNZ	short ioctl_string_err
 14775                                  
 14776                                  ;hkn; SS override
 14777 00003236 36A1[5803]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 14778 0000323A E95EE5                  	jmp	SYS_RET_OK
 14779                                  
 14780                                  ioctl_string_err:
 14781 0000323D 368B3E[4903]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 14782                                  device_err:
 14783 00003242 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 14784 00003246 89F8                    	MOV	AX,DI
 14785 00003248 E8AD2A                  	call	SET_I24_EXTENDED_ERROR
 14786                                  
 14787                                  ;hkn; use SS override
 14788                                  ;hkn;	mov	ax,[CS:EXTERR]
 14789 0000324B 36A1[F002]              	mov	ax,[SS:EXTERR]
 14790 0000324F E952E5                  	jmp	SYS_RET_ERR
 14791                                  
 14792                                  ;--------------------------------------------------------------------------
 14793                                  ; Proc name : Get_Driver_BL
 14794                                  ;
 14795                                  ;	DS is DOSDATA
 14796                                  ;	BL is drive number (0=default)
 14797                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 14798                                  ;	No regs modified
 14799                                  ;
 14800                                  ;---------------------------------------------------------------------------
 14801                                  
 14802                                  Get_Driver_BL:
 14803                                  	; 31/07/2019 - Retro DOS v3.2
 14804 00003252 50                      	PUSH	AX
 14805 00003253 88D8                    	MOV	AL,BL			; Drive
 14806 00003255 E8613A                  	call	GETTHISDRV
 14807 00003258 7224                    	jc	short ioctl_bad_drv
 14808 0000325A 30DB                    	XOR	BL,BL			; Unit zero on Net device
 14809 0000325C C606[EF02]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 14810 00003261 C43E[5E05]              	LES	DI,[THISCDS]
 14811                                  	;test	word [es:di+43h],8000h
 14812                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 14813                                  	;test	byte [es:di+44h],80h
 14814 00003265 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 14815                                  	;les	di,[es:di+45h]
 14816 0000326A 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 14817 0000326E 750D                    	JNZ	short got_dev_ptr	 ; Is net
 14818 00003270 C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 14819                                  	;mov	bl,[es:di+1]
 14820 00003275 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 14821                                  	;les	di,[es:di+13h]
 14822 00003279 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 14823                                  got_dev_ptr:
 14824 0000327D F8                      	CLC
 14825                                  ioctl_bad_drv:
 14826 0000327E 58                      	POP	AX
 14827 0000327F C3                      	retn
 14828                                  
 14829                                  ;-------------------------------------------------------------------------
 14830                                  ; Proc Name : Check_If_Net:
 14831                                  ;
 14832                                  ;
 14833                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 14834                                  ; If no device is found, the return address is popped off the stack, and a
 14835                                  ; jump is made to ioctl_drv_err.
 14836                                  ;
 14837                                  ; On Entry:
 14838                                  ; Registers same as those for Get_Driver_BL
 14839                                  ;
 14840                                  ; On Exit:
 14841                                  ; ZERO flag	- set if not a net device
 14842                                  ;		- reset if net device
 14843                                  ; ES:DI -> the device
 14844                                  ;
 14845                                  ;
 14846                                  ; BUGBUG: This function assumes the following stack setup on entry
 14847                                  ;
 14848                                  ;	  SP+2 -> Error return address
 14849                                  ;	  SP   -> Normal return address
 14850                                  ;
 14851                                  ;-------------------------------------------------------------------------
 14852                                  
 14853                                  Check_If_Net:
 14854                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14855 00003280 E8CFFF                  	CALL	Get_Driver_BL
 14856 00003283 720E                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 14857 00003285 06                      	PUSH	ES
 14858 00003286 57                      	PUSH	DI
 14859 00003287 C43E[5E05]              	LES	DI,[THISCDS]
 14860                                  	; 31/07/2019
 14861                                  	;test	word [es:di+43h],8000h
 14862                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 14863                                  	;test	byte [es:di+44h],80h
 14864 0000328B 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 14865 00003290 5F                      	POP	DI
 14866 00003291 07                      	POP	ES
 14867 00003292 C3                      	retn
 14868                                  
 14869                                  ioctl_drv_err_pop:
 14870 00003293 58                      	pop	ax			; pop off return address
 14871 00003294 E940FF                  	jmp	ioctl_drv_err
 14872                                  
 14873                                  ioctl_bad_funj3:
 14874 00003297 E9A7FE                  	jmp	ioctl_bad_fun
 14875                                  
 14876                                  ioctl_string_errj:
 14877 0000329A EBA1                    	jmp	short ioctl_string_err ; 31/07/2019
 14878                                  
 14879                                  ;--------------------------------------------------------------------------
 14880                                  ;
 14881                                  ; IOCTL: AL = E, F
 14882                                  ;
 14883                                  ; ENTRY: DS = DOSDATA
 14884                                  ;
 14885                                  ;
 14886                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 14887                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14888                                  ;         return address off the stack if the drive is invalid.
 14889                                  ;
 14890                                  ;--------------------------------------------------------------------------
 14891                                  
 14892                                  ioctl_drive_owner:
 14893                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14894 0000329C E8E1FF                  	Call	Check_If_Net
 14895 0000329F 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 14896                                  					;   certainly don't know how to do this
 14897                                  					;   call.
 14898                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 14899                                  	; 09/09/2018
 14900 000032A1 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 14901 000032A6 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 14902 000032A8 C606[4803]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 14903 000032AD 3C0E                    	cmp	al,0Eh			; Get Owner ?
 14904 000032AF 7405                    	jz	short GetOwner
 14905                                  SetOwner:
 14906 000032B1 C606[4803]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN
 14907                                  GetOwner:
 14908 000032B6 B00D                    	MOV	AL,OWNHL
 14909 000032B8 88DC                    	MOV	AH,BL			; Unit number
 14910 000032BA A3[4603]                	MOV	[IOCALL_REQLEN],AX
 14911 000032BD 31C0                    	XOR	AX,AX
 14912 000032BF A3[4903]                	MOV	[IOCALL_REQSTAT],AX
 14913 000032C2 06                      	PUSH	ES
 14914 000032C3 1F                      	POP	DS
 14915 000032C4 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14916 000032C6 16                      	PUSH	SS
 14917 000032C7 07                      	POP	ES
 14918 000032C8 BB[4603]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14919 000032CB 1E                      	push	ds
 14920 000032CC 56                      	push	si
 14921 000032CD E8641E                  	call	DEVIOCALL2
 14922 000032D0 5E                      	pop	si
 14923 000032D1 1F                      	pop	ds
 14924                                  	; 31/07/2019
 14925                                  ;hkn; SS override
 14926                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 14927                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 14928 000032D2 36F606[4A03]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 14929 000032D8 75C0                    	jnz	short ioctl_string_errj
 14930 000032DA 36A0[4703]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 14931                                  					; owner returned is 1-based.
 14932 000032DE E9BAE4                  	jmp	SYS_RET_OK
 14933                                  
 14934                                  ;============================================================================
 14935                                  ; DELETE.ASM, MSDOS 6.0, 1991
 14936                                  ;============================================================================
 14937                                  ; 07/08/2018 - Retro DOS v3.0
 14938                                  
 14939                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 14940                                  ;	NAME	DOS_DELETE
 14941                                  
 14942                                  ;
 14943                                  ;	Microsoft Confidential
 14944                                  ;	Copyright (C) Microsoft Corporation 1991
 14945                                  ;	All Rights Reserved.
 14946                                  ;
 14947                                  
 14948                                  ;**	DELETE.ASM - Low level routine for deleting files
 14949                                  ;
 14950                                  ;		DOS_DELETE
 14951                                  ;		REN_DEL_Check
 14952                                  ;		FastOpen_Delete	       ; DOS 3.3
 14953                                  ;		FastOpen_Update	       ; DOS 3.3
 14954                                  
 14955                                  
 14956                                  ;   Revision history:
 14957                                  ;
 14958                                  ;   A000  version 4.00	Jan. 1988
 14959                                  ;   A001  Fastopen Rename fix	April 1989
 14960                                  
 14961                                  
 14962                                  ;Installed = TRUE
 14963                                  
 14964                                  ;	i_need	NoSetDir,BYTE
 14965                                  ;	i_need	Creating,BYTE
 14966                                  ;	i_need	DELALL,BYTE
 14967                                  ;	i_need	THISDPB,DWORD
 14968                                  ;	i_need	THISSFT,DWORD
 14969                                  ;	i_need	THISCDS,DWORD
 14970                                  ;	i_need	CURBUF,DWORD
 14971                                  ;	i_need	ATTRIB,BYTE
 14972                                  ;	i_need	SATTRIB,BYTE
 14973                                  ;	i_need	WFP_START,WORD
 14974                                  ;	i_need	REN_WFP,WORD			 ;BN001
 14975                                  ;	i_need	NAME1,BYTE			 ;BN001
 14976                                  ;	i_need	FoundDel,BYTE
 14977                                  ;	i_need	AUXSTACK,BYTE
 14978                                  ;	i_need	VOLCHNG_FLAG,BYTE
 14979                                  ;	i_need	JShare,DWORD
 14980                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 14981                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 14982                                  ;
 14983                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 14984                                  ;
 14985                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 14986                                  ;	i_need	DMAADD,DWORD
 14987                                  ;	i_need	RENAMEDMA,BYTE
 14988                                  
 14989                                  ;---------------------------------------------------------------------------
 14990                                  ;
 14991                                  ; Procedure Name : DOS_DELETE
 14992                                  ;
 14993                                  ; Inputs:
 14994                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 14995                                  ;		terminated)
 14996                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 14997                                  ;		( = -1 if current dir not involved, else
 14998                                  ;		 Points to first char after last "/" of current dir part)
 14999                                  ;	[THISCDS] Points to CDS being used
 15000                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15001                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15002                                  ; Function:
 15003                                  ;	Delete the specified file(s)
 15004                                  ; Outputs:
 15005                                  ;	CARRY CLEAR
 15006                                  ;		OK
 15007                                  ;	CARRY SET
 15008                                  ;	    AX is error code
 15009                                  ;		error_file_not_found
 15010                                  ;			Last element of path not found
 15011                                  ;		error_path_not_found
 15012                                  ;			Bad path (not in curr dir part if present)
 15013                                  ;		error_bad_curr_dir
 15014                                  ;			Bad path in current directory part of path
 15015                                  ;		error_access_denied
 15016                                  ;			Attempt to delete device or directory
 15017                                  ;		***error_sharing_violation***
 15018                                  ;			Deny both access required, generates an INT 24.
 15019                                  ;			This error is NOT returned. The INT 24H is generated,
 15020                                  ;			  and the file is ignored (not deleted). Delete will
 15021                                  ;			  simply continue on looking for more files.
 15022                                  ;			  Carry will NOT be set in this case.
 15023                                  ; DS preserved, others destroyed
 15024                                  ;
 15025                                  ;---------------------------------------------------------------------------
 15026                                  
 15027                                  FILEFOUND   equ 01h
 15028                                  FILEDELETED equ 10h
 15029                                  
 15030                                  DOS_DELETE:
 15031                                  
 15032                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 15033                                  ;hkn; appropriately at this point.
 15034                                  
 15035 000032E1 E88DED                  	call	TestNet
 15036 000032E4 7306                    	JNC	short LOCAL_DELETE
 15037                                  
 15038                                  ;IF NOT Installed
 15039                                  ;	transfer NET_DELETE
 15040                                  ;ELSE
 15041                                  	;MOV	AX,(MultNET SHL 8) | 19
 15042                                  	;INT	2FH
 15043                                  	;return
 15044                                  
 15045 000032E6 B81311                  	mov	ax,1113h
 15046 000032E9 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 15047                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 15048                                  			;		fully-qualified filename in DOS CS
 15049                                  			; SDA CDS pointer -> current directory structure for drive with file
 15050                                  			; Return: CF set on error
 15051 000032EB C3                      	retn
 15052                                  
 15053                                  ;ENDIF
 15054                                  
 15055                                  LOCAL_DELETE:
 15056 000032EC C606[2C05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 15057 000032F1 E81BEE                  	call	EcritDisk
 15058 000032F4 C706[3A05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 15059 000032FA 8B36[6E05]              	MOV	SI,[WFP_START]
 15060                                  SKPNUL:
 15061 000032FE AC                      	LODSB
 15062 000032FF 08C0                    	OR	AL,AL
 15063 00003301 75FB                    	JNZ	short SKPNUL		; go to end
 15064 00003303 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 15065 00003306 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 15066 0000330A 7506                    	JNZ	short TEST_QUEST
 15067 0000330C 807C022A                	CMP	BYTE [SI+2],"*"
 15068 00003310 741F                    	JZ	short CHECK_ATTS
 15069                                  TEST_QUEST:
 15070 00003312 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 15071 00003315 87FE                    	XCHG	DI,SI
 15072                                  
 15073 00003317 16                      	push	ss
 15074                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 15075 00003318 07                      	pop	es ; 17/05/2019 (BugFix)
 15076                                  
 15077 00003319 B83F3F                  	MOV	AX,"??"
 15078 0000331C B90400                  	MOV	CX,4		; four sets of "??"
 15079 0000331F F3AF                    	REPE	SCASW
 15080 00003321 751C                    	JNZ	short NOT_ALL
 15081 00003323 87FE                    	XCHG	DI,SI
 15082 00003325 AD                      	LODSW
 15083 00003326 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 15084 00003329 7514                    	JNZ	short NOT_ALL
 15085 0000332B AD                      	LODSW
 15086 0000332C 3D3F3F                  	CMP	AX,"??"
 15087 0000332F 750E                    	JNZ	short NOT_ALL
 15088                                  CHECK_ATTS:
 15089 00003331 A0[2A05]                	MOV	AL,[SATTRIB]
 15090 00003334 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15091                                  					; Look only at hidden bits
 15092 00003336 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15093                                  					; All must be set
 15094 00003338 7505                    	JNZ	short NOT_ALL
 15095                                  
 15096                                  ; NOTE WARNING DANGER-----
 15097                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 15098                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 15099                                  
 15100 0000333A C606[3B05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 15101                                  NOT_ALL:
 15102 0000333F C606[1603]01            	MOV	byte [NoSetDir],1
 15103 00003344 E8E616                  	call	GetPathNoSet
 15104 00003347 7313                    	JNC	short Del_found
 15105 00003349 750C                    	JNZ	short _bad_path
 15106 0000334B 08C9                    	OR	CL,CL
 15107 0000334D 7408                    	JZ	short _bad_path
 15108                                  No_file:
 15109 0000334F B80200                  	MOV	AX,error_file_not_found
 15110                                  ErrorReturn:
 15111 00003352 F9                      	STC
 15112 00003353 E8C1ED                  	call	LcritDisk
 15113 00003356 C3                      	retn
 15114                                  
 15115                                  _bad_path:
 15116 00003357 B80300                  	MOV	AX,error_path_not_found
 15117 0000335A EBF6                    	JMP	short ErrorReturn
 15118                                  
 15119                                  Del_found:
 15120 0000335C 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 15121 0000335E 803E[3B05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 15122 00003363 7405                    	JZ	short NOT_DIR
 15123                                  Del_access_err:
 15124 00003365 B80500                  	MOV	AX,error_access_denied
 15125 00003368 EBE8                    	JMP	short ErrorReturn
 15126                                  
 15127                                  NOT_DIR:
 15128 0000336A 08E4                    	OR	AH,AH			; Check if device name
 15129 0000336C 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 15130                                  
 15131                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 15132                                  
 15133                                  DELFILE:
 15134 0000336E 800E[2C05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 15135                                  
 15136                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 15137                                  ; DOS issue a build BPB call the next time this drive is accessed.
 15138                                  
 15139 00003373 1E                      	PUSH	DS
 15140 00003374 8A26[3B05]              	MOV	AH,[DELALL]
 15141 00003378 C53E[9E05]              	LDS	DI,[CURBUF]
 15142                                  	
 15143                                  ;hkn; SS override
 15144 0000337C 36F606[2805]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 15145 00003382 7509                    	JNZ	short DoDelete		; yes
 15146                                  
 15147 00003384 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 15148 00003388 7403                    	JZ	short DoDelete		; not read only
 15149                                  
 15150 0000338A 1F                      	POP	DS
 15151 0000338B EB29                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 15152                                  
 15153                                  DoDelete:
 15154 0000338D E87700                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 15155 00003390 7303                    	JNC	short DEL_SHARE_OK
 15156 00003392 1F                      	POP	DS
 15157 00003393 EB21                    	JMP	SHORT DELNXT		; Skip it
 15158                                  
 15159                                  DEL_SHARE_OK:
 15160                                  	; MSDOS 6.0
 15161                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 15162                                  	;				;LB. if already dirty		  ;AN000;
 15163                                  	;JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 15164                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 15165 00003395 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 15166                                  ;yesdirty:
 15167                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 15168 00003399 8827                    	mov	[bx],ah ; 05/07/2019
 15169 0000339B 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 15170 0000339D 1F                      	POP	DS
 15171 0000339E 800E[2C05]10            	OR	byte [FOUNDDEL],FILEDELETED ; Deleted file
 15172                                  
 15173 000033A3 83FB02                  	CMP	BX,2
 15174 000033A6 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 15175                                  	;cmp	bx,[es:bp+0Dh] ; 25/07/2019
 15176 000033A8 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 15177 000033AC 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 15178                                  
 15179 000033AE E81D24                  	call	RELEASE 		; Free file data
 15180 000033B1 724E                    	JC	short No_fileJ
 15181                                  
 15182                                  ; DOS 3.3  FastOpen
 15183                                  
 15184 000033B3 E8BA00                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 15185                                  
 15186                                  ; DOS 3.3  FastOpen
 15187                                  
 15188                                  DELNXT:
 15189 000033B6 C42E[4605]              	LES	BP,[THISDPB]		; Possible to get here without this set
 15190 000033BA E8D815                  	call	GETENTRY		; Registers need to be reset
 15191 000033BD 7242                    	JC	short No_fileJ
 15192 000033BF E80C15                  	call	NEXTENT
 15193 000033C2 73AA                    	JNC	short DELFILE
 15194 000033C4 C42E[4605]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 15195                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 15196 000033C8 268A4600                	MOV	AL,[ES:BP]
 15197 000033CC E8A12E                  	call	FLUSHBUF
 15198 000033CF 7230                    	JC	short No_fileJ
 15199                                  ;
 15200                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 15201                                  ;
 15202                                  ;   not found not deleted		file not found
 15203                                  ;   not found	  deleted		*** impossible ***
 15204                                  ;	found not deleted		access denied (read-only)
 15205                                  ;	found	  deleted		no error
 15206                                  ;
 15207 000033D1 F606[2C05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 15208 000033D6 7422                    	JZ	short DelError		; no, figure out what's wrong.
 15209                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 15210                                  ; and to force the DOS to issue a media check.
 15211 000033D8 F606[2805]08            	TEST	byte [ATTRIB],attr_volume_id
 15212 000033DD 7417                    	jz	short No_Set_Flag
 15213 000033DF 50                      	PUSH	AX
 15214 000033E0 06                      	PUSH	ES
 15215 000033E1 57                      	PUSH	DI
 15216 000033E2 C43E[5E05]              	LES	DI,[THISCDS]
 15217 000033E6 268A25                  	MOV	AH,[ES:DI]		; Get drive
 15218 000033E9 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 15219 000033EC 8826[370A]              	mov	[VOLCHNG_FLAG],AH
 15220                                  	
 15221                                  	; MSDOS 6.0
 15222                                  	;XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 15223                                  	;call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 15224                                  	 
 15225 000033F0 E8E02A                  	call	FATREAD_CDS		; force media check
 15226 000033F3 5F                      	POP	DI
 15227 000033F4 07                      	POP	ES
 15228 000033F5 58                      	POP	AX
 15229                                  No_Set_Flag:
 15230 000033F6 E81EED                  	call	LcritDisk		; carry is clear
 15231 000033F9 C3                      	retn
 15232                                  DelError:
 15233 000033FA F606[2C05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 15234 000033FF 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 15235                                  No_fileJ:
 15236 00003401 E94BFF                  	JMP	No_file ; 10/08/2018 		; Nope
 15237                                  Del_access_errJ:
 15238 00003404 E95EFF                  	JMP	Del_access_err ; 10/08/2018
 15239                                  
 15240                                  ; 08/08/2018 - Retro DOS v3.0
 15241                                  
 15242                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 15243                                  ;---------------------------------------------------------------------------
 15244                                  ; Procedure Name : REN_DEL_Check
 15245                                  ;
 15246                                  ; Inputs:
 15247                                  ;	[THISDPB] set
 15248                                  ;	[CURBUF+2]:BX points to entry
 15249                                  ;	[CURBUF+2]:SI points to firclus field of entry
 15250                                  ;	[WFP_Start] points to name
 15251                                  ; Function:
 15252                                  ;	Check for Exclusive access on given file.
 15253                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 15254                                  ; Outputs:
 15255                                  ;	ES:BP = [THISDPB]
 15256                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 15257                                  ;		last element will be loaded from the directory entry.  This is
 15258                                  ;		so the name given to the sharer doesn't have any meta chars in
 15259                                  ;		it.
 15260                                  ;	Carry set if sharing violation, INT 24H generated
 15261                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 15262                                  ;		This is because input AX is preserved.
 15263                                  ;		Caller must set the error if needed.
 15264                                  ;	Carry clear
 15265                                  ;		OK
 15266                                  ; AX,DS,BX,SI,DI preserved
 15267                                  ;---------------------------------------------------------------------------
 15268                                  
 15269                                  REN_DEL_Check:
 15270                                  
 15271 00003407 1E                      	PUSH	DS
 15272 00003408 57                      	PUSH	DI
 15273 00003409 50                      	PUSH	AX
 15274 0000340A 53                      	PUSH	BX
 15275 0000340B 56                      	PUSH	SI		; Save CURBUF pointers
 15276                                  	
 15277 0000340C 16                      	push	ss
 15278 0000340D 07                      	pop	es
 15279                                  
 15280                                  ;hkn; context ES will assume ES to DOSDATA
 15281                                  ;hkn; ASSUME	ES:DOSGROUP
 15282                                  
 15283                                  ;hkn; SS override
 15284 0000340E 368B3E[6E05]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 15285 00003413 89DE                    	MOV	SI,BX
 15286                                  
 15287                                  ;hkn; SS override
 15288 00003415 368E1E[A005]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 15289 0000341A 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 15290 0000341C 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 15291 0000341F E8EBEB                  	call	StrLen		; CX is length of ES:DI including NUL
 15292 00003422 49                      	DEC	CX		; Don't include nul in count
 15293 00003423 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 15294 00003425 E8543B                  	call	SkipBack	; Back up one element
 15295 00003428 47                      	INC	DI		; Point to start of last element
 15296                                  
 15297                                  ;hkn; SS override
 15298                                  	; MSDOS 6.0
 15299                                  	;MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 15300                                  	;
 15301 00003429 E868FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 15302 0000342C 5E                      	POP	SI		; Get back entry pointers
 15303 0000342D 5B                      	POP	BX
 15304 0000342E 53                      	PUSH	BX
 15305 0000342F 56                      	PUSH	SI		; Back on stack
 15306                                  	
 15307 00003430 16                      	push	ss
 15308 00003431 1F                      	pop	ds
 15309                                  
 15310                                  ;hkn; context DS will assume ES to DOSDATA
 15311                                  ;hkn; ASSUME	DS:DOSGROUP
 15312                                  
 15313                                  ;
 15314                                  ; Close the file if possible by us.
 15315                                  ;
 15316                                  ;if installed
 15317 00003432 FF1E[9000]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 15318                                  ;else
 15319                                  ;	Call	ShCloseFile
 15320                                  ;endif
 15321 00003436 8C1E[5C05]              	MOV	[THISSFT+2],DS
 15322                                  
 15323                                  ;hkn; AUXSTACK is in DOSDATA
 15324 0000343A C706[5A05][FB06]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size
 15325                                  				; Scratch space
 15326 00003440 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 15327 00003442 E80A20                  	call	DOOPEN		; Fill in SFT for share check
 15328 00003445 C43E[5A05]              	LES	DI,[THISSFT]
 15329 00003449 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH
 15330                                  				; requires exclusive access
 15331                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 15332 0000344F 26C7050100              	mov	word [ES:DI],1
 15333 00003454 E84842                  	call	ShareEnter
 15334 00003457 720D                    	jc	short CheckDone
 15335 00003459 C43E[5A05]              	LES	DI,[THISSFT]
 15336                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 15337 0000345D 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 15338                                  	
 15339 00003462 E83542                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 15340 00003465 F8                      	CLC
 15341                                  CheckDone:
 15342 00003466 C42E[4605]              	LES	BP,[THISDPB]
 15343 0000346A 5E                      	POP	SI
 15344 0000346B 5B                      	POP	BX
 15345 0000346C 58                      	POP	AX
 15346 0000346D 5F                      	POP	DI
 15347 0000346E 1F                      	POP	DS
 15348 0000346F C3                      	retn
 15349                                  
 15350                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 15351                                  ;---------------------------------------------------------------------------
 15352                                  ; Procedure Name : FastOpen_Delete
 15353                                  ; Inputs:
 15354                                  ;	None
 15355                                  ; Function:
 15356                                  ;	Call FastOpen to delete the dir info.
 15357                                  ; Outputs:
 15358                                  ;	None
 15359                                  ;---------------------------------------------------------------------------
 15360                                  
 15361                                  FastOpen_Delete:
 15362 00003470 9C                      	PUSHF			; save flag
 15363 00003471 56                      	PUSH	SI		; save registers
 15364 00003472 53                      	PUSH	BX
 15365 00003473 50                      	PUSH	AX
 15366                                  ;hkn; SS override
 15367 00003474 8B36[6E05]              	MOV	SI,[WFP_START]	; ds:si points to path name
 15368 00003478 B003                    	MOV	AL,FONC_delete	; al = 3
 15369                                  fastinvoke:
 15370                                  ;hkn; FastTable is in DOSDATA
 15371 0000347A BB[750F]                	MOV	BX,FastTable+2
 15372 0000347D FF1F                    	CALL	far [BX]	; call fastopen
 15373 0000347F 58                      	POP	AX		; restore registers
 15374 00003480 5B                      	POP	BX
 15375 00003481 5E                      	POP	SI
 15376 00003482 9D                      	POPF			; restore flag
 15377 00003483 C3                      	retn
 15378                                  
 15379                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 15380                                  ;---------------------------------------------------------------------------
 15381                                  ; Procedure Name : FastOpen_Update
 15382                                  ;
 15383                                  ; Inputs:
 15384                                  ;	DL     drive number (A=0,B=1,,,)
 15385                                  ;	CX     first cluster #
 15386                                  ;	AH     0 updates dir entry
 15387                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 15388                                  ;	ES:DI  directory entry
 15389                                  ; Function:
 15390                                  ;	Call FastOpen to update the dir info.
 15391                                  ; Outputs:
 15392                                  ;	None
 15393                                  ;---------------------------------------------------------------------------
 15394                                  
 15395                                  FastOpen_Update:
 15396 00003484 9C                      	PUSHF			; save flag
 15397 00003485 56                      	PUSH	SI
 15398 00003486 53                      	PUSH	BX		; save regs
 15399 00003487 50                      	PUSH	AX
 15400 00003488 B004                    	MOV	AL,FONC_update	; al = 4
 15401 0000348A EBEE                    	JMP	short fastinvoke
 15402                                  
 15403                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 15404                                  ;---------------------------------------------------------------------------
 15405                                  ; PROCEDURE Name : FastOpen_Rename
 15406                                  ;
 15407                                  ; Inputs:
 15408                                  ;	 REN_WFP   = Path Name
 15409                                  ;	 NAME1	   = New Name
 15410                                  ; Function:
 15411                                  ;	Call FastOpen to rename the dir entry in the cache
 15412                                  ; Outputs:
 15413                                  ;	None
 15414                                  ;---------------------------------------------------------------------------
 15415                                  
 15416                                  FastOpen_Rename:
 15417                                  	; 08/08/2018 - Retro DOS v3.0
 15418                                  	; MSDOS 6.0
 15419                                  	;PUSHF			;AN001 save flag
 15420                                  	;PUSH	SI		;AN001 save registers
 15421                                  	;PUSH	DI		;AN001
 15422                                  	;PUSH	BX		;AN001
 15423                                  	;PUSH	AX		;AN001
 15424                                  	;
 15425                                  ;hkn; SS override
 15426                                  	;;MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 15427                                  	;
 15428                                  	; ? - 08/08/2018 - Retro DOS v3.0
 15429                                  	;push	ss
 15430                                  	;pop	ds
 15431                                  	;mov	si,[REN_WFP]
 15432                                  	;
 15433                                  ;hkn; NAME1 is in DOSDATA
 15434                                  	;MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 15435                                  	;MOV	AL,FONC_Rename	;;AN001  al = 6
 15436                                  	;
 15437                                  ;hkn; FastTable is in DOSDATA
 15438                                  	;MOV	BX,FastTable+2
 15439                                  	;CALL	far [BX]	;;AN001  call fastopen
 15440                                  	;
 15441                                  	;POP	AX		; restore registers  ;AN001
 15442                                  	;POP	BX				     ;AN001
 15443                                  	;POP	DI				     ;AN001
 15444                                  	;POP	SI				     ;AN001
 15445                                  	;POPF			; restore flag	     ;AN001
 15446                                  	;retn					     ;AN001
 15447                                  
 15448                                  	; MSDOS 6.0
 15449                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 15450                                  Fast_Dispatch:
 15451                                  ;hkn; FastTable is in DOSDATA
 15452                                  	;MOV	SI,FastTable+2	; index to the	     ;AN000;
 15453                                  ;hkn; use SS override
 15454                                  	;CALL	far [SS:SI]	; RMFD call fastopen
 15455                                  	;retn
 15456                                  
 15457                                  ;============================================================================
 15458                                  ; RENAME.ASM, MSDOS 6.0, 1991
 15459                                  ;============================================================================
 15460                                  ; 08/08/2018 - Retro DOS v3.0
 15461                                  
 15462                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 15463                                  ;	NAME	DOS_RENAME
 15464                                  
 15465                                  ;**	Low level routine for renaming files
 15466                                  ;
 15467                                  ;	DOS_RENAME
 15468                                  ;
 15469                                  ;	Modification history:
 15470                                  ;
 15471                                  ;	    Created: ARR 30 March 1983
 15472                                  
 15473                                  ;----------------------------------------------------------------------------
 15474                                  ;
 15475                                  ; Procedure Name : DOS_RENAME
 15476                                  ;
 15477                                  ; Inputs:
 15478                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 15479                                  ;		chars, NUL terminated)
 15480                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 15481                                  ;		( = -1 if current dir not involved, else
 15482                                  ;		 Points to first char after last "/" of current dir part)
 15483                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 15484                                  ;		chars, NUL terminated)
 15485                                  ;	[THISCDS] Points to CDS being used
 15486                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15487                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15488                                  ; Function:
 15489                                  ;	Rename the specified file(s)
 15490                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 15491                                  ; Outputs:
 15492                                  ;	CARRY CLEAR
 15493                                  ;	    OK
 15494                                  ;	CARRY SET
 15495                                  ;	    AX is error code
 15496                                  ;		error_file_not_found
 15497                                  ;			No match for source, or dest path invalid
 15498                                  ;		error_not_same_device
 15499                                  ;			Source and dest are on different devices
 15500                                  ;		error_access_denied
 15501                                  ;			Directory specified (not simple rename),
 15502                                  ;			Device name given, Destination exists.
 15503                                  ;			NOTE: In third case some renames may have
 15504                                  ;			 been done if metas.
 15505                                  ;		error_path_not_found
 15506                                  ;			Bad path (not in curr dir part if present)
 15507                                  ;			SOURCE ONLY
 15508                                  ;		error_bad_curr_dir
 15509                                  ;			Bad path in current directory part of path
 15510                                  ;			SOURCE ONLY
 15511                                  ;		error_sharing_violation
 15512                                  ;			Deny both access required, generates an INT 24.
 15513                                  ; DS preserved, others destroyed
 15514                                  ;
 15515                                  ;----------------------------------------------------------------------------
 15516                                  
 15517                                  DOS_RENAME:
 15518                                  
 15519                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 15520                                  ;hkn; at this point to DOSDATA.
 15521                                  
 15522 0000348C E8E2EB                  	call	TestNet
 15523 0000348F 7306                    	JNC	short LOCAL_RENAME
 15524                                  
 15525                                  ;IF NOT Installed
 15526                                  ;	transfer NET_RENAME
 15527                                  ;ELSE
 15528                                  	;MOV	AX,(MultNET SHL 8) OR 17
 15529                                  	;INT	2FH
 15530                                  	;return
 15531                                  
 15532 00003491 B81111                  	mov     ax, 1111h
 15533 00003494 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 15534                                  			; SS = DS = DOS CS, 
 15535                                  			; SDA first filename pointer = offset of fully-qualified old name
 15536                                  			; SDA CDS pointer -> current directory
 15537                                  			; Return: CF set on error
 15538 00003496 C3                      	retn
 15539                                  ;ENDIF
 15540                                  
 15541                                  LOCAL_RENAME:
 15542 00003497 C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 15543 0000349C 8B36[6E05]              	MOV	SI,[WFP_START]
 15544 000034A0 8B3E[7005]              	MOV	DI,[REN_WFP]
 15545 000034A4 8A04                    	MOV	AL,[SI]
 15546 000034A6 8A25                    	MOV	AH,[DI]
 15547 000034A8 0D2020                  	OR	AX,2020H		; Lower case
 15548 000034AB 38E0                    	CMP	AL,AH
 15549 000034AD 7405                    	JZ	short SAMEDRV
 15550 000034AF B81100                  	MOV	AX,error_not_same_device
 15551 000034B2 F9                      	STC
 15552 000034B3 C3                      	retn
 15553                                  
 15554                                  SAMEDRV:
 15555 000034B4 FF36[FA02]              	PUSH	WORD [DMAADD+2]
 15556 000034B8 FF36[F802]              	PUSH	WORD [DMAADD]
 15557 000034BC 8C1E[FA02]              	MOV	[DMAADD+2],DS
 15558                                  
 15559                                  ;hkn; RENAMEDMA is in DOSDATA
 15560 000034C0 C706[F802][B605]        	MOV	WORD [DMAADD],RENAMEDMA
 15561 000034C6 C606[2D05]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 15562 000034CB E841EC                  	call	EcritDisk
 15563 000034CE E8B804                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 15564                                  					;    points to entry
 15565 000034D1 7315                    	JNC	short Check_Dev
 15566 000034D3 83F812                  	CMP	AX,error_no_more_files
 15567 000034D6 7503                    	JNZ	short GOTERR
 15568 000034D8 B80200                  	MOV	AX,error_file_not_found
 15569                                  GOTERR:
 15570 000034DB F9                      	STC
 15571                                  RENAME_POP:
 15572 000034DC 8F06[F802]              	POP	WORD [DMAADD]
 15573 000034E0 8F06[FA02]              	POP	WORD [DMAADD+2]
 15574 000034E4 E830EC                  	call	LcritDisk
 15575 000034E7 C3                      	retn
 15576                                  
 15577                                  Check_Dev:
 15578 000034E8 B80500                  	MOV	AX,error_access_denied	; Assume error
 15579                                  	;
 15580                                  	; MSDOS 6.0
 15581                                  	;PUSH	DS			      ;PTM.			    ;AN000;
 15582                                  	;LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 15583                                  	;;add	si,21
 15584                                  	;ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 15585                                  	;;test	byte [si+11],10h
 15586                                  	;TEST byte [SI+dir_entry.dir_attr],attr_directory  ;PTM.	    ;AN000;
 15587                                  	;JZ	short notdir		      ;PTM.			    ;AN000;
 15588                                  	;MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 15589                                  	;call	Check_Pathlen2		      ;PTM.   length < 67	    ;AN000;
 15590                                  ;notdir:
 15591                                  	;POP	DS			      ;PTM.			    ;AN000;
 15592                                  	;JA	short GOTERR		      ;PTM.			    ;AN000;
 15593                                  	;
 15594                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15595 000034EB 803E[2D05]00            	CMP	byte [FOUND_DEV],0
 15596 000034F0 75E9                    	JNZ	short GOTERR
 15597                                  ; At this point a source has been found. There is search continuation info (a
 15598                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 15599                                  ; directory entry found.
 15600                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 15601                                  ; throughout the RENAME since it is known at this point that the source and
 15602                                  ; destination are both on the same device.
 15603                                  ; [SATTRIB] is also set.
 15604 000034F2 89DE                    	MOV	SI,BX
 15605 000034F4 83C61A                  	ADD	SI,dir_entry.dir_first
 15606 000034F7 E80DFF                  	call	REN_DEL_Check
 15607 000034FA 7305                    	JNC	short REN_OK1
 15608 000034FC B82000                  	MOV	AX,error_sharing_violation
 15609 000034FF EBDB                    	JMP	short RENAME_POP
 15610                                  
 15611                                  ;------------------------------------------------------------------------------
 15612                                  ; Check if the source is a file or directory. If file, delete the entry
 15613                                  ; from the Fastopen cache. If directory, rename it later
 15614                                  ;------------------------------------------------------------------------------
 15615                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 15616                                  	; MSDOS 6.0
 15617                                  	;PUSH	SI
 15618                                  	;LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 15619                                  	;ADD	SI,find_buf.attr	;;BN00XPTM.P5520		   ;AN000;
 15620                                  	;add	si,21
 15621                                  	;;test	byte [si+11],10h
 15622                                  	;TEST byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.   ;AN000;
 15623                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			   ;AN000;
 15624                                  	;POP	SI			;BN00X
 15625                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 15626                                  	;
 15627                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 15628                                  	;POP	SI
 15629                                  	;
 15630                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 15631 00003501 E86CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 15632                                  
 15633                                  ;SWAP_SOURCE:
 15634                                  	; MSDOS 3.3
 15635                                  	;MOV	SI,[REN_WFP]
 15636                                  	;MOV	[WFP_START],SI
 15637                                  	; MSDOS 6.0
 15638 00003504 A1[6E05]                	MOV	AX,[WFP_START]		; Swap source and destination
 15639 00003507 8B36[7005]              	MOV	SI,[REN_WFP]		; Swap source and destination
 15640 0000350B 8936[6E05]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 15641 0000350F A3[7005]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 15642                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15643 00003512 C706[7205]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 15644 00003518 C706[3A05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 15645                                  					; A rename is like a CREATE_NEW as far
 15646                                  					; as the destination is concerned.
 15647 0000351E E80C15                  	call	GetPathNoSet
 15648                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 15649                                  ;   since no files match the destination name. If it fails for any other
 15650                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 15651                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 15652                                  ;   if the rename should fail because we haven't built an explicit name by
 15653                                  ;   substituting for the meta chars in it. In this case the destination file
 15654                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 15655                                  ;   in the directory entry part.
 15656 00003521 7223                    	JC	short NODEST
 15657                                  	;; MSDOS 6.0
 15658                                  	;; JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 15659                                  	; !! MSDOS 3.3 !!
 15660 00003523 7404                    	JZ	short BAD_ACC ; !!	; Dest string is a directory
 15661                                  	;
 15662 00003525 08E4                    	OR	AH,AH			; Device?
 15663 00003527 7930                    	JNS	short SAVEDEST		; No, continue
 15664                                  BAD_ACC:
 15665 00003529 B80500                  	MOV	AX,error_access_denied
 15666 0000352C F9                      	STC
 15667                                  RENAME_CLEAN:
 15668 0000352D 9C                      	PUSHF				; Save carry state
 15669 0000352E 50                      	PUSH	AX			; and error code (if carry set)
 15670 0000352F A0[3305]                	MOV	AL,[THISDRV]
 15671 00003532 E83B2D                  	call	FLUSHBUF
 15672 00003535 58                      	POP	AX
 15673 00003536 803E[1403]00            	CMP	byte [FAILERR],0
 15674 0000353B 7503                    	JNZ	short BAD_ERR		; User FAILed to I 24
 15675 0000353D 9D                      	POPF
 15676 0000353E EB9C                    	JMP	short RENAME_POP
 15677                                  
 15678                                  BAD_ERR:
 15679 00003540 58                      	POP	AX			; Saved flags
 15680 00003541 B80300                  	MOV	AX,error_path_not_found
 15681 00003544 EB95                    	JMP	short GOTERR
 15682                                  
 15683                                  NODEST:
 15684 00003546 750B                    	JNZ	short BAD_PATH
 15685 00003548 803E[1403]00            	CMP	byte [FAILERR],0
 15686 0000354D 7504                    	JNZ	short BAD_PATH	; Search for dest failed because user FAILed on
 15687                                  				;	I 24
 15688 0000354F 08C9                    	OR	CL,CL
 15689 00003551 7506                    	JNZ	short SAVEDEST
 15690                                  BAD_PATH:
 15691 00003553 B80300                  	MOV	AX,error_path_not_found
 15692 00003556 F9                      	STC
 15693 00003557 EB83                    	JMP	short RENAME_POP
 15694                                  
 15695                                  SAVEDEST:
 15696 00003559 16                      	push	ss
 15697 0000355A 07                      	pop	es
 15698                                  
 15699                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 15700 0000355B BF[1405]                	MOV	DI,NAME2
 15701 0000355E BE[0805]                	MOV	SI,NAME1
 15702                                  
 15703 00003561 B90B00                  	MOV	CX,11
 15704 00003564 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 15705 00003566 A1[7E05]                	MOV	AX,[DIRSTART]
 15706 00003569 A3[2105]                	MOV	[DESTSTART],AX
 15707                                  BUILDDEST:
 15708 0000356C 16                      	push	ss
 15709 0000356D 07                      	pop	es			; needed due to JMP BUILDDEST below
 15710                                  
 15711                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 15712 0000356E BB[CB05]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 15713 00003571 BF[0805]                	MOV	DI,NAME1		; Real dest name goes here
 15714 00003574 BE[1405]                	MOV	SI,NAME2		; Raw dest
 15715                                  
 15716 00003577 B90B00                  	MOV	CX,11
 15717                                  	
 15718                                  	; MSDOS 6.0
 15719                                  	;CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 15720                                  
 15721                                  	; MSDOS 3.3
 15722                                  
 15723                                  ; 08/08/2018 - Retro DOS v3.0
 15724                                  ; MSDOS 6.0 
 15725                                  ;---------------------------------------------------------------------------
 15726                                  ;Procedure: NEW_RENAME
 15727                                  ;
 15728                                  ;Input: DS:SI -> raw string with ?
 15729                                  ;	ES:DI -> destination string
 15730                                  ;	DS:BX -> source string
 15731                                  ;Function: replace ? chars of raw string with chars in source string and
 15732                                  ;	   put in destination string
 15733                                  ;Output: ES:DI-> new string
 15734                                  ;---------------------------------------------------------------------------
 15735                                  
 15736                                  NEW_RENAME:
 15737                                  NEWNAM:
 15738                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 15739 0000357A AC                      	LODSB
 15740 0000357B 3C3F                    	CMP	AL,"?"
 15741 0000357D 7502                    	JNZ	short NOCHG
 15742 0000357F 8A07                    	MOV	AL,[BX] 		; Get replace char
 15743                                  NOCHG:
 15744 00003581 AA                      	STOSB
 15745 00003582 43                      	INC	BX			; Next replace char
 15746 00003583 E2F5                    	LOOP	NEWNAM
 15747                                  	; MSSOS 6.0
 15748                                  	;retn
 15749                                  
 15750                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15751 00003585 C606[2805]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 15752 0000358A C606[3A05]FF            	MOV	byte [CREATING],0FFH
 15753 0000358F E84717                  	call	DEVNAME 		; Check if we built a device name
 15754 00003592 7395                    	JNC	short BAD_ACC
 15755 00003594 8B1E[2105]              	MOV	BX,[DESTSTART]
 15756 00003598 C42E[4605]              	LES	BP,[THISDPB]
 15757 0000359C E82714                  	call	SETDIRSRCH		; Reset search to start of dir
 15758 0000359F 7288                    	JC	short BAD_ACC 		; Screw up
 15759 000035A1 E8D912                  	call	FINDENTRY		; See if new name already exists
 15760 000035A4 7383                    	JNC	short BAD_ACC 		; Error if found
 15761 000035A6 803E[1403]00            	CMP	byte [FAILERR],0
 15762 000035AB 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 15763 000035AD A1[2105]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 15764 000035B0 3B06[C505]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 15765 000035B4 7453                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 15766                                  
 15767 000035B6 A0[D605]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 15768 000035B9 A810                    	TEST	AL,attr_directory
 15769 000035BB 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 15770                                  					; otherwise the . and .. entries get
 15771                                  					; wiped.
 15772 000035BD A2[2805]                	MOV	[ATTRIB],AL
 15773 000035C0 8C1E[5C05]              	MOV	[THISSFT+2],DS
 15774                                  
 15775                                  ;hkn; AUXSTACK is in DOSDATA
 15776 000035C4 BE[FB06]                	MOV	SI,AUXSTACK-SF_ENTRY.size
 15777 000035C7 8936[5A05]              	MOV	[THISSFT],SI
 15778 000035CB C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 15779 000035D0 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 15780 000035D2 E80C1D                  	call	RENAME_MAKE		; This is in mknode
 15781 000035D5 7303                    	JNC	short GOT_DEST
 15782                                  BAD_ACCJ:
 15783 000035D7 E94FFF                  	JMP	BAD_ACC
 15784                                  
 15785                                  GOT_DEST:
 15786 000035DA 53                      	push	bx
 15787 000035DB C43E[5A05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 15788 000035DF E8B840                  	call	ShareEnd		; we need to remove it.
 15789 000035E2 5B                      	pop	bx
 15790                                  ; A zero length entry with the correct new name has now been made at
 15791                                  ;   [CURBUF+2]:BX.
 15792 000035E3 C43E[9E05]              	LES	DI,[CURBUF]
 15793                                  
 15794                                  	; MSDOS 6.0
 15795                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15796                                  	;				;LB. if already dirty		  ;AN000;
 15797                                  	;JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 15798                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15799                                  	
 15800 000035E7 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15801                                  ;yesdirty1:
 15802 000035EC 89DF                    	MOV	DI,BX
 15803 000035EE 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 15804                                  
 15805                                  ;hkn; RENAMEDMA is in DOSDATA
 15806 000035F1 BE[D605]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 15807 000035F4 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr ; mov cx,21
 15808 000035F7 F3A4                    	REP	MOVSB
 15809 000035F9 E85100                  	CALL	GET_SOURCE
 15810 000035FC 724B                    	JC	short RENAME_OVER
 15811 000035FE 89DF                    	MOV	DI,BX
 15812 00003600 8E06[A005]              	MOV	ES,[CURBUF+2]
 15813 00003604 B0E5                    	MOV	AL,DIRFREE
 15814 00003606 AA                      	STOSB				; "free" the source
 15815 00003607 EB13                    	JMP	SHORT DIRTY_IT
 15816                                  
 15817                                  SIMPLE_RENAME:
 15818 00003609 E84100                  	CALL	GET_SOURCE		; Get the source back
 15819 0000360C 723B                    	JC	short RENAME_OVER
 15820 0000360E 89DF                    	MOV	DI,BX
 15821 00003610 8E06[A005]              	MOV	ES,[CURBUF+2]
 15822                                  
 15823                                  ;hkn; NAME1 is in DOSDATA
 15824 00003614 BE[0805]                	MOV	SI,NAME1		; New Name
 15825 00003617 B90B00                  	MOV	CX,11
 15826 0000361A F3A4                    	REP	MOVSB
 15827                                  DIRTY_IT:
 15828 0000361C 8B3E[9E05]              	MOV	DI,[CURBUF]
 15829                                  
 15830                                  	; MSDOS 6.0
 15831                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15832                                  	;				;LB. if already dirty		  ;AN000;
 15833                                  	;JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 15834                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15835                                  	
 15836 00003620 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15837                                  ;------------------------------------------------------------------------------
 15838                                  ; Check if the source is a directory of file. If directory rename it to the
 15839                                  ; the new name in the Fastopen cache buffer.  If file name it has been
 15840                                  ; previously deleted.
 15841                                  ;------------------------------------------------------------------------------
 15842                                  ;yesdirty2:
 15843                                  	; MSDOS 6.0
 15844                                  	;PUSH	SI
 15845                                  	;LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 15846                                  	;ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 15847                                  	;TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 15848                                  	;JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 15849                                  	;call	FASTOPEN_RENAME		;;BN00X rename dir entry in fastopen
 15850                                  	;POP	SI
 15851                                  	;JMP	SHORT NOT_DIRTY1
 15852                                  ;NOT_DIR2:				;;BN00X it is a file, delete the entry
 15853                                  	;POP	SI
 15854                                  ;NOT_DIRTY1:				;;BN00X
 15855                                  NEXT_SOURCE:
 15856                                  ;hkn; RENAMEDMA is in DOSDATA
 15857 00003625 BE[B705]                	MOV	SI,RENAMEDMA+1		;Name
 15858                                  ;
 15859                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 15860                                  ; to enter it before going to RENAME_Next.
 15861                                  ;
 15862 00003628 E8E4EA                  	call	EcritDisk
 15863 0000362B C606[3A05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 15864                                  				  ;  to FF when we made the prev new file).
 15865 00003630 E85704                  	call	RENAME_NEXT
 15866                                  ;
 15867                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 15868                                  ; we were before.
 15869                                  ;
 15870 00003633 7214                    	JC	short RENAME_OVER
 15871 00003635 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 15872 00003638 E8CCFD                  	call	REN_DEL_Check
 15873 0000363B 7306                    	JNC	short REN_OK2
 15874 0000363D B82000                  	MOV	AX,error_sharing_violation
 15875 00003640 E9EAFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 15876                                  
 15877                                  ;------------------------------------------------------------------------------
 15878                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 15879                                  ; if directory, rename directory name in the Fastopen cache.
 15880                                  ;-----------------------------------------------------------------------------
 15881                                  REN_OK2:
 15882                                  	; MSDOS 6.0
 15883                                  	;MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 15884                                  	;TEST	AL,attr_directory	;;BN00X directory
 15885                                  	;JZ	short Ren_Directory	;;BN00X no - file, delete it
 15886                                  	
 15887                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15888 00003643 E82AFE                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 15889 00003646 E923FF                  	JMP	BUILDDEST		;;BN00X
 15890                                  
 15891                                  	; MSDOS 6.0
 15892                                  ;Ren_Directory:
 15893                                  	;call	FASTOPEN_RENAME 	;;BN00X delete dir info in fastopen DOS 3.3
 15894                                  	;JMP	BUILDDEST
 15895                                  
 15896                                  RENAME_OVER:
 15897 00003649 F8                      	CLC
 15898 0000364A E9E0FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 15899                                  
 15900                                  ;----------------------------------------------------------------------------
 15901                                  ; Procedure: GET_SOURCE
 15902                                  ;
 15903                                  ; Inputs:
 15904                                  ;	RENAMEDMA has source info
 15905                                  ; Function:
 15906                                  ;	Re-find the source
 15907                                  ; Output:
 15908                                  ;	[CURBUF] set
 15909                                  ;	[CURBUF+2]:BX points to entry
 15910                                  ;	Carry set if error (currently user FAILed to I 24)
 15911                                  ; DS preserved, others destroyed
 15912                                  ;----------------------------------------------------------------------------
 15913                                  
 15914                                  GET_SOURCE:
 15915 0000364D 8B1E[C505]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 15916 00003651 C42E[4605]              	LES	BP,[THISDPB]
 15917 00003655 E86E13                  	call	SETDIRSRCH
 15918 00003658 7209                    	JC	short gs_ret_label	; retc
 15919 0000365A E85B16                  	call	STARTSRCH
 15920 0000365D A1[C305]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 15921 00003660 E83513                  	call	GETENT
 15922                                  
 15923                                  gs_ret_label:
 15924 00003663 C3                      	retn
 15925                                  
 15926                                  ;============================================================================
 15927                                  ; FINFO.ASM, MSDOS 6.0, 1991
 15928                                  ;============================================================================
 15929                                  ; 08/08/2018 - Retro DOS v3.0
 15930                                  
 15931                                  ;**	Low level routines for returning file information and setting file
 15932                                  ;	attributes
 15933                                  ;
 15934                                  ;	GET_FILE_INFO
 15935                                  ;	SET_FILE_ATTRIBUTE
 15936                                  ;
 15937                                  ;	Modification history:
 15938                                  ;
 15939                                  ;	    Created: ARR 30 March 1983
 15940                                  ;
 15941                                  ;	M025: Return access_denied if attempting to set
 15942                                  ;	      attribute of root directory.
 15943                                  ;
 15944                                  
 15945                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 15946                                  
 15947                                  ;---------------------------------------------------------------------------
 15948                                  ; Procedure Name : GET_FILE_INFO
 15949                                  ;
 15950                                  ; Inputs:
 15951                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15952                                  ;		terminated)
 15953                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15954                                  ;		( = -1 if current dir not involved, else
 15955                                  ;		 Points to first char after last "/" of current dir part)
 15956                                  ;	[THISCDS] Points to CDS being used
 15957                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15958                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15959                                  ; Function:
 15960                                  ;	Get Information about a file
 15961                                  ; Returns:
 15962                                  ;	CARRY CLEAR
 15963                                  ;	    AX = Attribute of file
 15964                                  ;	    CX = Time stamp of file
 15965                                  ;	    DX = Date stamp of file
 15966                                  ;	    BX:DI = Size of file (32 bit)
 15967                                  ;	CARRY SET
 15968                                  ;	    AX is error code
 15969                                  ;		error_file_not_found
 15970                                  ;			Last element of path not found
 15971                                  ;		error_path_not_found
 15972                                  ;			Bad path (not in curr dir part if present)
 15973                                  ;		error_bad_curr_dir
 15974                                  ;			Bad path in current directory part of path
 15975                                  ; DS preserved, others destroyed
 15976                                  ;---------------------------------------------------------------------------
 15977                                  
 15978                                  GET_FILE_INFO:
 15979                                  
 15980                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 15981                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 15982                                  
 15983 00003664 E80AEA                  	call	TestNet
 15984 00003667 7306                    	JNC	short LOCAL_INFO
 15985                                  
 15986                                  ;IF NOT Installed
 15987                                  ;	transfer NET_GET_FILE_INFO
 15988                                  ;ELSE
 15989                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 15990                                  ;	INT	2FH
 15991                                  ;	return
 15992                                  
 15993 00003669 B80F11                  	mov     ax, 110Fh
 15994 0000366C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 15995                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 15996                                  			; SDA CDS pointer -> current directory
 15997                                  			; Return: CF set on error, AX = file attributes
 15998 0000366E C3                      	retn
 15999                                  ;ENDIF
 16000                                  
 16001                                  LOCAL_INFO:
 16002 0000366F E89DEA                  	call	EcritDisk
 16003 00003672 C606[1603]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16004                                  	; MSDOS 6.0
 16005                                  	;call	Get_FAST_PATH
 16006                                  	; MSDOS 3.3
 16007 00003677 E8AD13                  	call	GETPATH
 16008                                  info_check:
 16009 0000367A 7313                    	JNC	short info_check_dev
 16010                                  NO_PATH:
 16011 0000367C 750C                    	JNZ	short bad_path1
 16012 0000367E 08C9                    	OR	CL,CL
 16013 00003680 7408                    	JZ	short bad_path1
 16014                                  info_no_file:
 16015 00003682 B80200                  	MOV	AX,error_file_not_found
 16016                                  BadRet:
 16017 00003685 F9                      	STC
 16018                                  JustRet:
 16019 00003686 E88EEA                  	call	LcritDisk
 16020 00003689 C3                      	retn
 16021                                  
 16022                                  bad_path1:
 16023 0000368A B80300                  	MOV	AX,error_path_not_found
 16024 0000368D EBF6                    	jmp	short BadRet
 16025                                  
 16026                                  info_check_dev:
 16027 0000368F 08E4                    	OR	AH,AH
 16028 00003691 78EF                    	JS	short info_no_file	; device
 16029                                  
 16030                                  	; MSDOS 6.0
 16031                                  ;SR;
 16032                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 16033                                  ;for a root dir
 16034                                  ;
 16035 00003693 833E[9E05]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 16036 00003698 7507                    	jne	short not_root		;no, CurBuf ptr is valid
 16037                                  
 16038 0000369A 30E4                    	xor	ah,ah
 16039 0000369C B010                    	mov	al,attr_directory
 16040 0000369E F8                      	clc
 16041 0000369F EBE5                    	jmp	short JustRet
 16042                                  
 16043                                  not_root:
 16044                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16045 000036A1 1E                      	PUSH	DS
 16046 000036A2 8E1E[A005]              	MOV	DS,[CURBUF+2]
 16047 000036A6 89DE                    	MOV	SI,BX
 16048 000036A8 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 16049 000036AA 89DF                    	MOV	DI,BX
 16050 000036AC 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 16051 000036AF 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 16052 000036B2 30E4                    	XOR	AH,AH
 16053 000036B4 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 16054 000036B7 A810                    	TEST	AL,attr_directory
 16055 000036B9 7506                    	JNZ	short NO_SIZE
 16056 000036BB 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 16057 000036BE 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 16058                                  NO_SIZE:
 16059 000036C1 1F                      	POP	DS
 16060 000036C2 F8                      	CLC
 16061 000036C3 EBC1                    	jmp	short JustRet
 16062                                  
 16063                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 16064                                  ;-------------------------------------------------------------------------------
 16065                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 16066                                  ; Inputs:
 16067                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16068                                  ;		terminated)
 16069                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16070                                  ;		( = -1 if current dir not involved, else
 16071                                  ;		 Points to first char after last "/" of current dir part)
 16072                                  ;	[THISCDS] Points to CDS being used
 16073                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16074                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 16075                                  ;	AX is new attributes to give to file
 16076                                  ; Function:
 16077                                  ;	Set File Attributes
 16078                                  ; Returns:
 16079                                  ;	CARRY CLEAR
 16080                                  ;	    No error
 16081                                  ;	CARRY SET
 16082                                  ;	    AX is error code
 16083                                  ;		error_file_not_found
 16084                                  ;			Last element of path not found
 16085                                  ;		error_path_not_found
 16086                                  ;			Bad path (not in curr dir part if present)
 16087                                  ;		error_bad_curr_dir
 16088                                  ;			Bad path in current directory part of path
 16089                                  ;		error_access_denied
 16090                                  ;			Attempt to set an attribute which cannot be set
 16091                                  ;			(attr_directory, attr_volume_ID)
 16092                                  ;		error_sharing_violation
 16093                                  ;			Sharing mode of file did not allow the change
 16094                                  ;			(this request requires exclusive write/read access)
 16095                                  ;			(INT 24H generated)
 16096                                  ; DS preserved, others destroyed
 16097                                  ;----------------------------------------------------------------------------
 16098                                  
 16099                                  SET_FILE_ATTRIBUTE:
 16100                                  
 16101                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 16102                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 16103                                  
 16104 000036C5 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 16105 000036C8 7414                    	JZ	short set_look
 16106                                  _BAD_ACC:
 16107 000036CA C606[EF02]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk
 16108 000036CF C606[F302]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr
 16109 000036D4 C606[F202]04            	MOV	byte [EXTERR_ACTION],errACT_Abort
 16110 000036D9 B80500                  	MOV	AX,error_access_denied
 16111 000036DC F9                      	STC
 16112 000036DD C3                      	retn
 16113                                  
 16114                                  set_look:
 16115 000036DE E890E9                  	call	TestNet
 16116 000036E1 7308                    	JNC	short LOCAL_SET
 16117                                  
 16118                                  ;IF NOT Installed
 16119                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 16120                                  ;ELSE
 16121 000036E3 50                      	PUSH	AX
 16122                                  	
 16123                                  	;MOV	AX,(MultNET SHL 8) OR 14
 16124                                  	;INT	2FH
 16125                                  
 16126 000036E4 B80E11                  	mov     ax, 110Eh
 16127 000036E7 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 16128                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 16129                                  			; SDA CDS pointer -> current directory
 16130                                  			; STACK: WORD new file attributes
 16131                                  			; Return: CF set on error
 16132                                  
 16133 000036E9 5B                      	POP	BX			; clean stack
 16134 000036EA C3                      	retn
 16135                                  ;ENDIF
 16136                                  
 16137                                  LOCAL_SET:
 16138 000036EB E821EA                  	call	EcritDisk
 16139 000036EE 50                      	PUSH	AX			; Save new attributes
 16140 000036EF C606[1603]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16141 000036F4 E83013                  	call	GETPATH 		; get path through fastopen if there	 ;AC000;
 16142 000036F7 7303                    	JNC	short set_check_device
 16143 000036F9 5B                      	POP	BX			; Clean stack (don't zap AX)
 16144 000036FA EB80                    	JMP	short NO_PATH
 16145                                  
 16146                                  set_check_device:
 16147 000036FC 08E4                    	OR	AH,AH
 16148 000036FE 7906                    	JNS	short set_check_share
 16149 00003700 58                      	POP	AX
 16150 00003701 E813EA                  	call	LcritDisk
 16151 00003704 EBC4                    	JMP	short _BAD_ACC 		; device
 16152                                  
 16153                                  set_check_share:
 16154 00003706 58                      	POP	AX			; Get new attributes
 16155                                  
 16156                                  	; MSDOS 6.0
 16157 00003707 833E[9E05]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 16158 0000370C 740A                    	je	short cannot_set_root	; M025: Y: return error
 16159                                  
 16160                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16161 0000370E E8F6FC                  	call	REN_DEL_Check
 16162 00003711 730B                    	JNC	short set_do
 16163 00003713 B82000                  	MOV	AX,error_sharing_violation
 16164 00003716 EB30                    	jmp	short OK_BYE
 16165                                  
 16166                                  	; MSDOS 6.0
 16167                                  cannot_set_root:			; M025:
 16168 00003718 B80500                  	mov	ax, error_access_denied	; M025: return error is attempting
 16169 0000371B F9                      	stc				; M025: to set attr. of root
 16170 0000371C EB2A                    	jmp	short OK_BYE		; M025:
 16171                                  
 16172                                  set_do:
 16173                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16174 0000371E C43E[9E05]              	LES	DI,[CURBUF]
 16175 00003722 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 16176 00003727 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 16177                                  
 16178                                  	; MSDOS 6.0
 16179                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16180                                  	;				;LB. if already dirty		  ;AN000;
 16181                                  	;JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 16182                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16183                                  	
 16184 0000372B 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16185                                  ;yesdirty3:
 16186 00003730 A0[3305]                	MOV	AL,[THISDRV]
 16187                                  ;;;; 10/1/86 F.C update fastopen cache
 16188 00003733 52                      	PUSH	DX
 16189 00003734 57                      	PUSH	DI
 16190 00003735 B400                    	MOV	AH,0		  ; dir entry update
 16191 00003737 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 16192 00003739 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 16193 0000373B E846FD                  	call	FastOpen_Update
 16194 0000373E 5F                      	POP	DI
 16195 0000373F 5A                      	POP	DX
 16196                                  ;;;; 9/11/86 F.C update fastopen cache
 16197 00003740 E82D2B                  	call	FLUSHBUF
 16198 00003743 7303                    	JNC	short OK_BYE
 16199 00003745 B80200                  	MOV	AX,error_file_not_found
 16200                                  OK_BYE:
 16201 00003748 E8CCE9                  	call	LcritDisk
 16202 0000374B C3                      	retn
 16203                                  
 16204                                  	; MSDOS 6.0
 16205                                  ;GET_FAST_PATH:
 16206                                  ;hkn; use SS override for FastOpenFlg
 16207                                  	;OR	byte [FastOpenFlg],FastOpen_Set
 16208                                  	;				;FO. trigger fastopen	;AN000;
 16209                                  	;call	GETPATH
 16210                                  	;PUSHF			 	;FO.			;AN000;
 16211                                  	;AND	byte [FastOpenFlg],Fast_yes 
 16212                                  	;				;FO. clear all fastopen flags ;AN000;
 16213                                  	;POPF				;FO.			;AN000;
 16214                                  	;retn
 16215                                  
 16216                                  ;============================================================================
 16217                                  ; DUP.ASM, MSDOS 6.0, 1991
 16218                                  ;============================================================================
 16219                                  ; 08/08/2018 - Retro DOS v3.0
 16220                                  
 16221                                  ;**	Low level DUP routine for use by EXEC when creating a new process. Exports
 16222                                  ;	  the DUP to the server machine and increments the SFT ref count
 16223                                  ;
 16224                                  ;	DOS_DUP
 16225                                  ;
 16226                                  ;	Modification history:
 16227                                  ;
 16228                                  ;	  Created: ARR 30 March 1983
 16229                                  
 16230                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 16231                                  ;---------------------------------------------------------------------------
 16232                                  ; Procedure Name : DOS_DUP
 16233                                  ;
 16234                                  ; Inputs:
 16235                                  ;	[THISSFT] set to the SFT for the file being DUPed
 16236                                  ;		(a non net SFT is OK, in this case the ref
 16237                                  ;		 count is simply incremented)
 16238                                  ; Function:
 16239                                  ;	Signal to the devices that a logical open is occurring
 16240                                  ; Returns:
 16241                                  ;	ES:DI point to SFT
 16242                                  ;    Carry clear
 16243                                  ;	SFT ref_count is incremented
 16244                                  ; Registers modified: None.
 16245                                  ; NOTE:
 16246                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 16247                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 16248                                  ;	that time.
 16249                                  ;---------------------------------------------------------------------------
 16250                                  
 16251                                  DOS_DUP:
 16252 0000374C 2EC43E[5A05]            	LES	DI,[CS:THISSFT]
 16253                                  
 16254                                  	;Entry	Dos_Dup_Direct
 16255                                  DOS_Dup_Direct:
 16256 00003751 E832E9                  	call	IsSFTNet
 16257 00003754 7503                    	JNZ	short DO_INC
 16258 00003756 E85619                  	call	DEV_OPEN_SFT
 16259                                  DO_INC:
 16260                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 16261 00003759 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 16262                                  					;   we're in big trouble anyway)
 16263 0000375C C3                      	retn
 16264                                  
 16265                                  ;============================================================================
 16266                                  ; CREATE.ASM, MSDOS 6.0, 1991
 16267                                  ;============================================================================
 16268                                  ; 08/08/2018 - Retro DOS v3.0
 16269                                  
 16270                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 16271                                  ;NAME	DOS_CREATE
 16272                                  
 16273                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 16274                                  ;
 16275                                  ;	DOS_CREATE
 16276                                  ;	DOS_CREATE_NEW
 16277                                  ;	SET_MKND_ERR
 16278                                  ;	SET_Media_ID
 16279                                  ;	SET_EXT_Mode
 16280                                  ;
 16281                                  ;	Revision history:
 16282                                  ;
 16283                                  ;	    A000 version 4.00	  Jan. 1988
 16284                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 16285                                  
 16286                                  ;Installed = TRUE
 16287                                  
 16288                                  ;	i_need	THISSFT,DWORD
 16289                                  ;	i_need	THISCDS,DWORD
 16290                                  ;	I_need	EXTERR,WORD
 16291                                  ;	I_Need	ExtErr_locus,BYTE
 16292                                  ;	I_need	JShare,DWORD
 16293                                  ;	I_need	VOLCHNG_FLAG,BYTE
 16294                                  ;	I_need	SATTRIB,BYTE
 16295                                  ;	I_need	CALLVIDM,DWORD
 16296                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 16297                                  ;	I_need	NAME1,BYTE			  ;AN000;
 16298                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 16299                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 16300                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 16301                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 16302                                  
 16303                                  ;***	DOS_CREATE - Create a File
 16304                                  ;----------------------------------------------------------------------------
 16305                                  ;	DOS_Create is called to create the specified file, truncating
 16306                                  ;	the old one if it exists.
 16307                                  ;
 16308                                  ;
 16309                                  ;	ENTRY	AX is Attribute to create
 16310                                  ;		(ds) = DOSDATA
 16311                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16312                                  ;			terminated)
 16313                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 16314                                  ;			( = -1 if current dir not involved, else
 16315                                  ;			 Points to first char after last "/" of current dir part)
 16316                                  ;		[THISCDS] Points to CDS being used
 16317                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 16318                                  ;		[THISSFT] Points to SFT to fill in if file created
 16319                                  ;			(sf_mode field set so that FCB may be detected)
 16320                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 16321                                  ;
 16322                                  ;	EXIT	sf_ref_count is NOT altered
 16323                                  ;		CARRY CLEAR
 16324                                  ;		    THISSFT filled in.
 16325                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 16326                                  ;		CARRY SET
 16327                                  ;		    AX is error code
 16328                                  ;			error_path_not_found
 16329                                  ;				Bad path (not in curr dir part if present)
 16330                                  ;			error_bad_curr_dir
 16331                                  ;				Bad path in current directory part of path
 16332                                  ;			error_access_denied
 16333                                  ;				Attempt to re-create read only file , or
 16334                                  ;				create a second volume id or create a dir
 16335                                  ;			error_sharing_violation
 16336                                  ;				The sharing mode was correct but not allowed
 16337                                  ;				generates an INT 24
 16338                                  ;	USES	all but DS
 16339                                  ;----------------------------------------------------------------------------
 16340                                  
 16341                                  DOS_CREATE:
 16342                                  
 16343                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 16344                                  ;hkn; this point.
 16345                                  
 16346 0000375D 30E4                    	XOR	AH,AH		; Truncate is OK
 16347                                  
 16348                                  ;	Enter here from Dos_Create_New
 16349                                  ;
 16350                                  ;	(ah) = 0 iff truncate OK
 16351                                  
 16352                                  Create_inter:
 16353 0000375F A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 16354                                  				; Mask out any meaningless bits
 16355 00003761 750C                    	JNZ	short AttErr
 16356 00003763 A808                    	TEST	AL,attr_volume_id
 16357 00003765 7402                    	JZ	short NoReset
 16358                                  	;
 16359                                  	; MSDOS 6.0
 16360                                  	;OR	[DOS34_FLAG],DBCS_VOLID      ;AN000;FOR dbcs volid
 16361                                  	;
 16362 00003767 B008                    	MOV	AL,attr_volume_id
 16363                                  NoReset:
 16364 00003769 0C20                    	OR	AL,attr_archive ; File changed
 16365 0000376B A850                    	TEST	AL,attr_directory+attr_device
 16366 0000376D 740A                    	JZ	short ATT_OK
 16367                                  AttErr:
 16368 0000376F B80500                  	MOV	AX,5		; Attribute problem
 16369 00003772 C606[EF02]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk
 16370 00003777 EB3D                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 16371                                  				   ;	attr_device to be set.
 16372                                  ATT_OK:
 16373 00003779 C43E[5A05]              	LES	DI,[THISSFT]
 16374 0000377D 06                      	PUSH	ES
 16375 0000377E C436[5E05]              	LES	SI,[THISCDS]
 16376 00003782 83FEFF                  	CMP	SI,-1
 16377 00003785 7509                    	JNE	short TEST_RE_NET
 16378                                  
 16379                                  ;	No CDS, it must be redirected.
 16380                                  
 16381 00003787 07                      	POP	ES
 16382                                  
 16383                                  	; MSDOS 6.0
 16384                                  ;Extended open hooks
 16385                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;AN000;EO. from extended open
 16386                                  	;JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 16387                                  ;IFS_extopen:				    ;AN000;EO.
 16388                                  	;PUSH	AX			    ;AN000;EO. pass create attr
 16389                                  	;;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 16390                                  	;mov	ax,112Eh
 16391                                  	;INT	2FH			    ;AN000;EO.
 16392                                  	;POP	BX			    ;AN000;EO. trash bx
 16393                                  	;MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 16394                                  	;retn				    ;AN000;EO.
 16395                                  ;NOEXTOP:				    ;AN000;
 16396                                  ;Extended open hooks
 16397                                  
 16398                                  ;IF NOT Installed
 16399                                  ;	transfer NET_SEQ_CREATE
 16400                                  ;ELSE
 16401 00003788 50                      	PUSH	AX
 16402                                  
 16403                                  	;MOV	AX,(MultNET SHL 8) OR 24
 16404                                  	;INT	2FH
 16405                                  
 16406 00003789 B81811                  	mov     ax,1118h
 16407 0000378C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 16408                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 16409                                  			; SDA first filename pointer -> fully-qualified name of file
 16410                                  			; STACK: WORD file creation mode???
 16411                                  
 16412 0000378E 5B                      	POP	BX			; BX is trashed anyway
 16413 0000378F C3                      	retn
 16414                                  ;ENDIF
 16415                                  
 16416                                  ;	We have a CDS. See if it's network
 16417                                  
 16418                                  TEST_RE_NET:
 16419 00003790 26F744430080            	TEST	word [ES:SI+curdir.flags],curdir_isnet
 16420 00003796 07                      	POP	ES
 16421 00003797 7408                    	JZ	short LOCAL_CREATE
 16422                                  
 16423                                  	; MSDOS 6.0
 16424                                  	;CALL	Set_EXT_mode		    ;AN000;EO.
 16425                                  	;JC	SHORT dochk		    ;AN000;EO.
 16426                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 16427                                  
 16428                                  ;Extended open hooks
 16429                                  ;dochk:
 16430                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;AN000;EO. from extended open
 16431                                  	;JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 16432                                  ;Extended open hooks
 16433                                  
 16434                                  ;IF NOT Installed
 16435                                  ;	transfer NET_CREATE
 16436                                  ;ELSE
 16437 00003799 50                      	PUSH	AX
 16438                                  	
 16439                                  	;MOV	AX,(MultNET SHL 8) OR 23
 16440                                  	;INT	2FH
 16441                                  	
 16442 0000379A B81711                  	mov     ax,1117h
 16443 0000379D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 16444                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 16445                                  			; SDA first filename pointer -> fully-qualified name of file to open
 16446                                  			; SDA CDS pointer -> current directory
 16447                                  			; Return: CF set on error
 16448                                  
 16449 0000379F 5B                      	POP	BX			; BX is trashed anyway
 16450                                  ;nomore:
 16451 000037A0 C3                      	retn
 16452                                  ;ENDIF
 16453                                  
 16454                                  ;**	It's a local create. We have a local CDS for it.
 16455                                  
 16456                                  LOCAL_CREATE:
 16457                                  	; MSDOS 6.0
 16458                                  	;CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 16459                                  	;JC	short setdone	;AN000;EO.
 16460                                  	
 16461                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16462 000037A1 26834D0202              	OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 16463                                  ;setdone:
 16464 000037A6 E866E9                  	call	EcritDisk
 16465 000037A9 E80F1B                  	call	MakeNode
 16466 000037AC 730E                    	JNC	short Create_ok
 16467 000037AE C606[370A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 16468 000037B3 E861E9                  	call	LcritDisk
 16469                                  
 16470                                  	;entry	SET_MKND_ERR
 16471                                  SET_MKND_ERR:
 16472                                  
 16473                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 16474                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 16475                                  
 16476                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 16477 000037B6 BB[3B13]                	MOV     BX,CRTERRTAB
 16478 000037B9 D7                      	XLAT
 16479                                  	;XLAT	byte [CS:BX]
 16480                                  CreatBadRet:
 16481 000037BA F9                      	STC
 16482 000037BB C3                      	retn
 16483                                  
 16484                                  ; We have just created a new file. This results in the truncation of old
 16485                                  ; files. We must inform the sharer to slash all the open SFT's for this
 16486                                  ; file to the current size.
 16487                                  
 16488                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 16489                                  ; drive number to force a Build BPB after Media Check.
 16490                                  
 16491                                  ;;; FASTOPEN 8/29/86
 16492                                  Create_ok:
 16493 000037BC E8B1FC                  	call	FastOpen_Delete
 16494                                  ;;; FASTOPEN 8/29/86
 16495 000037BF A0[2A05]                	mov	al,[SATTRIB]
 16496 000037C2 A808                    	test	al,attr_volume_id
 16497 000037C4 7417                    	jz	short NoVolLabel
 16498 000037C6 C43E[5E05]              	LES	DI,[THISCDS]
 16499                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 16500 000037CA 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 16501 000037CD 80EC41                  	sub	ah,'A'                  ; convert to drive letter
 16502 000037D0 8826[370A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 16503                                  	
 16504                                  	; MSDOS 6.0
 16505                                  	;MOV	BH,1			;AN000;>32mb set volume id to boot record
 16506                                  	;CALL	Set_Media_ID		;AN000;>32mb
 16507                                  	
 16508 000037D4 E838E9                  	call	EcritDisk
 16509 000037D7 E8F926                  	call	FATREAD_CDS		; force a media check
 16510 000037DA E83AE9                  	call	LcritDisk
 16511                                  
 16512                                  NoVolLabel:
 16513 000037DD B80200                  	MOV	ax,2
 16514 000037E0 C43E[5A05]              	LES	DI,[THISSFT]
 16515                                  ;if installed
 16516                                  	;call	JShare + 14 * 4
 16517 000037E4 FF1E[9400]              	call	far [JShare+(14*4)] ; 14 = ShSU
 16518                                  ;else
 16519                                  ;	Call	ShSU
 16520                                  ;endif
 16521 000037E8 E82CE9                  	call	LcritDisk
 16522 000037EB E9D800                  	jmp	SET_SFT_MODE
 16523                                  
 16524                                  ;---------------------------------------------------------------------------
 16525                                  ; Procedure Name : Dos_Create_New
 16526                                  ;
 16527                                  ; Inputs:
 16528                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16529                                  ;		terminated)
 16530                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16531                                  ;		( = -1 if current dir not involved, else
 16532                                  ;		 Points to first char after last "/" of current dir part)
 16533                                  ;	[THISCDS] Points to CDS being used
 16534                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16535                                  ;	[THISSFT] Points to SFT to fill in if file created
 16536                                  ;		(sf_mode field set so that FCB may be detected)
 16537                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16538                                  ;	AX is Attribute to create
 16539                                  ; Function:
 16540                                  ;	Try to create the specified file truncating an old one that exists
 16541                                  ; Outputs:
 16542                                  ;	sf_ref_count is NOT altered
 16543                                  ;	CARRY CLEAR
 16544                                  ;	    THISSFT filled in.
 16545                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 16546                                  ;	CARRY SET
 16547                                  ;	    AX is error code
 16548                                  ;		error_path_not_found
 16549                                  ;			Bad path (not in curr dir part if present)
 16550                                  ;		error_bad_curr_dir
 16551                                  ;			Bad path in current directory part of path
 16552                                  ;		error_access_denied
 16553                                  ;			Create a second volume id or create a dir
 16554                                  ;		error_file_exists
 16555                                  ;			Already a file by this name
 16556                                  ; DS preserved, others destroyed
 16557                                  ;---------------------------------------------------------------------------
 16558                                  
 16559                                  DOS_Create_New:
 16560 000037EE B401                    	MOV	AH,1		; Truncate is NOT OK
 16561 000037F0 E96CFF                  	JMP	Create_inter
 16562                                  
 16563                                  ; MSDOS 6.0
 16564                                  ;---------------------------------------------------------------------------
 16565                                  ; Procedure Name : Set_Media_ID
 16566                                  ;
 16567                                  ; Inputs:
 16568                                  ;	NAME1= Volume ID
 16569                                  ;	BH= 0, delete volume id
 16570                                  ;	    1, set new volume id
 16571                                  ;	DS= DOSGROUP
 16572                                  ; Function:
 16573                                  ;	Set Volume ID to DOS 4.00 Boot record.
 16574                                  ; Outputs:
 16575                                  ;	CARRY CLEAR
 16576                                  ;	    volume id set
 16577                                  ;	CARRY SET
 16578                                  ;	    AX is error code
 16579                                  ;---------------------------------------------------------------------------
 16580                                  ;
 16581                                  ;procedure   Set_Media_ID,NEAR
 16582                                  ;	DOSAssume   <DS>,"SetMedID"
 16583                                  ;
 16584                                  ;	PUSH	AX		;AN000;;>32mb
 16585                                  ;	PUSH	ES		;AN000;;>32mb
 16586                                  ;	PUSH	DI		;AN000;;>32mb
 16587                                  ;
 16588                                  ;	INC	AH		;AN000;;>32mb  bl=drive #
 16589                                  ;	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 16590                                  ;	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 16591                                  ;	MOV	CX,0866H	;AN001;;>32mb  get media id
 16592                                  ;
 16593                                  ;hkn; PACKET_TEMP is in DOSDATA
 16594                                  ;	MOV	DX,OFFSET DOSDATA:PACKET_TEMP	;AN000;>32mb
 16595                                  ;
 16596                                  ;	PUSH	BX		;AN000;;>32mb
 16597                                  ;	PUSH	DX		;AN000;;>32mb
 16598                                  ;	XOR	BH,BH		;AN000;;>32mb
 16599                                  ;
 16600                                  ;	invoke	$IOCTL		;AN000;;>32mb
 16601                                  ;	POP	DX		;AN000;;>32mb
 16602                                  ;	POP	BX		;AN000;;>32mb
 16603                                  ;	JC	geterr		;AN000;;>32mb
 16604                                  ;
 16605                                  ;	OR	BH,BH		;AN000;;>32mb delete volume id
 16606                                  ;	JZ	NoName		;AN000;>32mb yes
 16607                                  ;
 16608                                  ;hkn; NAME1 is in DOSDATA
 16609                                  ;	MOV	SI,OFFSET DOSDATA:NAME1   ;AN000;>32mb
 16610                                  ;
 16611                                  ;	JMP	SHORT doset	;AN000;>32mb yes
 16612                                  ;Noname: 			;AN000;
 16613                                  ;
 16614                                  ;hkn; NO_NAME_ID is in DOSDATA
 16615                                  ;	MOV	SI,OFFSET DOSDATA:NO_NAME_ID  ;AN000;>32mb
 16616                                  ;
 16617                                  ;doset:					       ;AN000;
 16618                                  ;	MOV	DI,DX		;AN000;;>32mb
 16619                                  ;	ADD	DI,MEDIA_LABEL	;AN000;;>32mb
 16620                                  ;
 16621                                  ;hkn; ES & DS must point to SS
 16622                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 16623                                  ;	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 16624                                  ;
 16625                                  ;	POP	DS		;AN000;;>32mb
 16626                                  ;
 16627                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 16628                                  ;	PUSH	SS		;AN000;;>32mb
 16629                                  ;
 16630                                  ;	POP	ES		;AN000;;>32mb
 16631                                  ;	MOV	CX,11		;AN000;;>32mb
 16632                                  ;	REP	MOVSB		;AN000;;>32mb
 16633                                  ;	MOV	CX,0846H	;AN001;;>32mb
 16634                                  ;	MOV	AL,0DH		;AN000;;>32mb
 16635                                  ;	XOR	BH,BH		;AN000;;>32mb
 16636                                  ;	invoke	$IOCTL		;AN000;;>32mb  set volume id
 16637                                  ;geterr: 			;AN000;
 16638                                  ;
 16639                                  ;hkn;	PUSH	CS		;AN000;>32mb
 16640                                  ;	PUSH	SS		;AN000;>32mb
 16641                                  ;
 16642                                  ;	POP	DS		;AN000;>32mb   ds= dosgroup
 16643                                  ;
 16644                                  ;	POP	DI		;AN000;;>32mb
 16645                                  ;	POP	ES		;AN000;;>32mb
 16646                                  ;	POP	AX		;AN000;;>32mb
 16647                                  ;	return			;AN000;>32mb
 16648                                  ;
 16649                                  ;EndProc Set_Media_ID		;AN000;
 16650                                  
 16651                                  ; MSDOS 6.0
 16652                                  ;---------------------------------------------------------------------------
 16653                                  ; Procedure Name : Set_EXT_mode
 16654                                  ;
 16655                                  ; Inputs:
 16656                                  ;	[EXTOPEN_ON]= flag for extended open
 16657                                  ;	SAVE_BX= mode specified in Extended Open
 16658                                  ; Function:
 16659                                  ;	Set mode in ThisSFT
 16660                                  ; Outputs:
 16661                                  ;	carry set,mode is set if from Extended Open
 16662                                  ;	carry clear, mode not set yet
 16663                                  ;---------------------------------------------------------------------------
 16664                                  ;
 16665                                  ;procedure   Set_EXT_mode,NEAR
 16666                                  ;
 16667                                  ;hkn; SS override
 16668                                  ;	TEST	[EXTOPEN_ON],ext_open_on    ;AN000;EO. from extended open
 16669                                  ;	JZ	NOTEX			    ;AN000;EO. no, do normal
 16670                                  ;	PUSH	AX			    ;AN000;EO.
 16671                                  ;
 16672                                  ;hkn; SS override
 16673                                  ;	MOV	AX,[SAVE_BX]		    ;AN000;EO.
 16674                                  ;	OR	ES:[DI.sf_mode],AX	    ;AN000;EO.
 16675                                  ;	POP	AX			    ;AN000;EO.
 16676                                  ;	STC				    ;AN000;EO.
 16677                                  ;NOTEX:					    ;AN000;
 16678                                  ;	return				    ;AN000;EO.
 16679                                  ;
 16680                                  ;EndProc Set_EXT_mode			    ;AN000;
 16681                                  
 16682                                  ;============================================================================
 16683                                  ; OPEN.ASM, MSDOS 6.0, 1991
 16684                                  ;============================================================================
 16685                                  ; 08/08/2018 - Retro DOS v3.0
 16686                                  
 16687                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 16688                                  ;	NAME	DOS_OPEN
 16689                                  
 16690                                  ;**	OPEN.ASM - File Open
 16691                                  ;----------------------------------------------------------------------------
 16692                                  ;	Low level routines for openning a file from a file spec.
 16693                                  ;	Also misc routines for sharing errors
 16694                                  ;
 16695                                  ;	DOS_Open
 16696                                  ;	Check_Access_AX
 16697                                  ;	SHARE_ERROR
 16698                                  ;	SET_SFT_MODE
 16699                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 16700                                  ;
 16701                                  ;	Revision history:
 16702                                  ;
 16703                                  ;	    Created: ARR 30 March 1983
 16704                                  ;	    A000	version 4.00   Jan. 1988
 16705                                  ;
 16706                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 16707                                  ; 	       remote extended opens and not save_cx.
 16708                                  ;
 16709                                  ;	M035 - if open made from exec then we must set the appropriate bits
 16710                                  ;	       on the stack before calling off to the redir.
 16711                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 16712                                  ;	       to handle open from exec. In this case set the appropriate bit
 16713                                  ;	       else do not.
 16714                                  ;----------------------------------------------------------------------------	
 16715                                  
 16716                                  ;Installed = TRUE
 16717                                  
 16718                                  ;	i_need	NoSetDir,BYTE
 16719                                  ;	i_need	THISSFT,DWORD
 16720                                  ;	i_need	THISCDS,DWORD
 16721                                  ;	i_need	CURBUF,DWORD
 16722                                  ;	i_need	CurrentPDB,WORD
 16723                                  ;	i_need	CURR_DIR_END,WORD
 16724                                  ;	I_need	RetryCount,WORD
 16725                                  ;	I_need	Open_Access,BYTE
 16726                                  ;	I_need	fSharing,BYTE
 16727                                  ;	i_need	JShare,DWORD
 16728                                  ;	I_need	FastOpenFlg,byte
 16729                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 16730                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 16731                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 16732                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 16733                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 16734                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 16735                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 16736                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 16737                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 16738                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 16739                                  ;	I_need	SAVE_BX,WORD			  ;M034
 16740                                  ;
 16741                                  ;	I_need	DOS_FLAG,BYTE
 16742                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 16743                                  
 16744                                  ;Break	<DOS_Open - internal file access>
 16745                                  ;---------------------------------------------------------------------------
 16746                                  ; Procedure Name : DOS_Open
 16747                                  ;
 16748                                  ; Inputs:
 16749                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16750                                  ;		terminated)
 16751                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16752                                  ;		( = -1 if current dir not involved, else
 16753                                  ;		 Points to first char after last "/" of current dir part)
 16754                                  ;	[THISCDS] Points to CDS being used
 16755                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16756                                  ;	[THISSFT] Points to SFT to fill in if file found
 16757                                  ;		(sf_mode field set so that FCB may be detected)
 16758                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16759                                  ;	AX is Access and Sharing mode
 16760                                  ;	  High NIBBLE of AL (Sharing Mode)
 16761                                  ;		sharing_compat	   file is opened in compatibility mode
 16762                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 16763                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 16764                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 16765                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 16766                                  ;	  Low NIBBLE of AL (Access Mode)
 16767                                  ;		open_for_read	file is opened for reading
 16768                                  ;		open_for_write	file is opened for writing
 16769                                  ;		open_for_both	file is opened for both reading and writing.
 16770                                  ;
 16771                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 16772                                  ;		(not checked)
 16773                                  ; Function:
 16774                                  ;	Try to open the specified file
 16775                                  ; Outputs:
 16776                                  ;	sf_ref_count is NOT altered
 16777                                  ;	CARRY CLEAR
 16778                                  ;	    THISSFT filled in.
 16779                                  ;	CARRY SET
 16780                                  ;	    AX is error code
 16781                                  ;		error_file_not_found
 16782                                  ;			Last element of path not found
 16783                                  ;		error_path_not_found
 16784                                  ;			Bad path (not in curr dir part if present)
 16785                                  ;		error_bad_curr_dir
 16786                                  ;			Bad path in current directory part of path
 16787                                  ;		error_invalid_access
 16788                                  ;			Bad sharing mode or bad access mode or bad combination
 16789                                  ;		error_access_denied
 16790                                  ;			Attempt to open read only file for writting, or
 16791                                  ;			open a directory
 16792                                  ;		error_sharing_violation
 16793                                  ;			The sharing mode was correct but not allowed
 16794                                  ;			generates an INT 24 on compatibility mode SFTs
 16795                                  ; DS preserved, others destroyed
 16796                                  ;----------------------------------------------------------------------------
 16797                                  
 16798                                  DOS_OPEN:
 16799                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 16800                                  
 16801 000037F3 C606[1603]00            	MOV	byte [NoSetDir],0
 16802 000037F8 E80001                  	CALL	Check_Access_AX
 16803 000037FB 721C                    	JC	short do_ret_label		    ; retc
 16804                                  
 16805 000037FD C43E[5A05]              	LES	DI,[THISSFT]
 16806 00003801 30E4                    	XOR	AH,AH
 16807                                  
 16808                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 16809                                  
 16810 00003803 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 16811 00003807 06                      	PUSH	ES
 16812 00003808 C436[5E05]              	LES	SI,[THISCDS]
 16813                                  	; 18/08/2018
 16814 0000380C 83FEFF                  	CMP	SI,-1
 16815 0000380F 7509                    	JNZ	short TEST_RE_NET1
 16816 00003811 07                      	POP	ES
 16817                                  
 16818                                  	; MSDOS 6.0
 16819                                  ;Extended open hooks
 16820                                  	;TEST	byte [EXTOPEN_ON],ext_open_on	;FT. from extnded open		;AN000;
 16821                                  	;JZ	short NOEXTOP 		    ;FT. no, do normal			;AN000;
 16822                                  IFS_extopen:									;AN000;
 16823                                  	;MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 16824                                  	;				    ; with which call was made. This
 16825                                  	;				    ; has the open access bits. 
 16826                                  	;;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 16827                                  	;
 16828                                  	;PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 16829                                  	;;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 16830                                  	;mov	ax,(MultNET*256)+46 
 16831                                  	;INT	2FH			    ;FT.				;AN000;
 16832                                  	;POP	BX			    ;FT. trash bx			;AN000;
 16833                                  	;MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 16834                                  
 16835                                  ;do_ret_label:
 16836                                  	;retn				    ;FT.				;AN000;
 16837                                  ;NOEXTOP:
 16838                                  ;Extended open hooks
 16839                                  	;
 16840                                  ;IF NOT Installed
 16841                                  	;transfer NET_SEQ_OPEN
 16842                                  ;ELSE
 16843                                  	;
 16844                                  do_net_int2f:
 16845                                  	;
 16846                                  	;test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 16847                                  	;jz	short not_exec_open	; N: just do net open
 16848                                  	;				; Y: check to see if redir is aware
 16849                                  	;				;    of this 
 16850                                  	;
 16851                                  	;				; M042 - start
 16852                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR
 16853                                  	;				; Q: does this redir know how to 
 16854                                  	;				;    this
 16855                                  	;jz	short not_exec_open	; N: just do net open
 16856                                  	;				; Y: set bit 3 of access byte and 
 16857                                  	;				;    set sharing mode to DENY_WRITE
 16858                                  	;				; M042 - end
 16859                                  	;
 16860                                  	; NOTE: This specific mode has not been set for the code assembled
 16861                                  	; under the "NOT Installed" conditional. Currently Installed is 
 16862                                  	; always one.
 16863                                  	;				; M035 - set the bits on the stack
 16864                                  	;mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 16865                                  	;
 16866                                  ;not_exec_open:
 16867                                  
 16868                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16869 00003812 50                      	PUSH	AX
 16870                                  
 16871                                  	;MOV	AX,(MultNET SHL 8) OR 22
 16872                                  	;INT	2FH
 16873                                  
 16874 00003813 B81611                  	mov     ax,1116h
 16875 00003816 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 16876                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 16877                                  			; SDA first filename pointer -> fully-qualified name of file to open
 16878                                  			; STACK: WORD file open mode
 16879                                  			; Return: CF set on error
 16880                                  
 16881 00003818 5B                      	POP	BX			; clean stack
 16882                                  do_ret_label: ; 09/08/2018
 16883 00003819 C3                      	retn
 16884                                  ;ENDIF
 16885                                  
 16886                                  TEST_RE_NET1:
 16887 0000381A 26F744430080            	TEST	word [ES:SI+curdir.flags],curdir_isnet
 16888                                  	; 18/08/2018
 16889 00003820 07                      	POP	ES
 16890                                  	;JZ	short LOCAL_OPEN
 16891                                  
 16892 00003821 75EF                    	jnz	short do_net_int2f ; (*)
 16893                                  
 16894                                  ;Extended open hooks
 16895                                  	; MSDOS 6.0
 16896                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;FT. from extended open	;AN000;
 16897                                  	;JNZ	short IFS_extopen	      ;FT. isuue extended open	;AN000;
 16898                                  ;Extended open hooks
 16899                                  
 16900                                  ;IF NOT Installed
 16901                                  ;	transfer NET_OPEN
 16902                                  ;ELSE
 16903                                  	;jmp	short do_net_int2f (*)
 16904                                  ;ENDIF
 16905                                  
 16906                                  LOCAL_OPEN:
 16907                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16908 00003823 E8E9E8                  	call	EcritDisk
 16909                                  
 16910                                  ; DOS 3.3 FastOPen 6/16/86
 16911                                  
 16912 00003826 800E[A40F]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 16913                                  
 16914 0000382B E8F911                  	call	GETPATH
 16915                                  
 16916                                  ; DOS 3.3 FastOPen 6/16/86
 16917                                  
 16918 0000382E 731E                    	JNC	short Open_found
 16919 00003830 7512                    	JNZ	short bad_path2
 16920 00003832 08C9                    	OR	CL,CL
 16921 00003834 740E                    	JZ	short bad_path2
 16922                                  
 16923                                  OpenFNF:
 16924 00003836 B80200                  	MOV	AX,error_file_not_found
 16925                                  
 16926                                  OpenBadRet:
 16927                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 16928                                  	; 12/08/2018
 16929                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 16930                                  	; MSDOS 6.0
 16931 00003839 368026[A40F]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 16932 0000383F F9                      	STC
 16933 00003840 E8D4E8                  	call	LcritDisk
 16934                                  	;JMP	Clear_FastOpen ; 10/08/2018
 16935 00003843 C3                      	retn 	; 08/09/2018
 16936                                  
 16937                                  bad_path2:
 16938 00003844 B80300                  	MOV	AX,error_path_not_found
 16939 00003847 EBF0                    	JMP	short OpenBadRet
 16940                                  
 16941                                  Open_Bad_Access:
 16942 00003849 B80500                  	MOV	AX,error_access_denied
 16943 0000384C EBEB                    	JMP	short OpenBadRet
 16944                                  
 16945                                  Open_found:
 16946 0000384E 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 16947 00003850 08E4                    	OR	AH,AH
 16948 00003852 783F                    	JS	short open_ok		; Devices don't have attributes
 16949 00003854 8E06[A005]              	MOV	ES,[CURBUF+2]		; get buffer location
 16950 00003858 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 16951 0000385C A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 16952 0000385E 75E9                    	JNZ	short Open_Bad_Access
 16953 00003860 A801                    	TEST	AL,attr_read_only	; check write on read only
 16954 00003862 742F                    	JZ	short open_ok
 16955                                  ;
 16956                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 16957                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 16958                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 16959                                  ; processing until the actual write operation:
 16960                                  ;
 16961                                  ; If FCB, then we change the mode to be read_only.
 16962                                  ; If net_FCB, then we change the mode to be read_only.
 16963                                  ; If not open for read then error.
 16964                                  ;
 16965 00003864 1E                      	push	ds
 16966 00003865 56                      	push	si
 16967 00003866 C536[5A05]              	LDS	SI,[THISSFT]
 16968 0000386A 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 16969 0000386D F7C10080                	TEST	CX,sf_isFCB		; is it FCB?
 16970 00003871 750A                    	JNZ	short ResetAccess	; yes, reset the access
 16971 00003873 88CA                    	MOV	DL,CL
 16972 00003875 80E2F0                  	AND	DL,SHARING_MASK
 16973 00003878 80FA70                  	CMP	DL,SHARING_NET_FCB	; is it net FCB?
 16974 0000387B 7508                    	JNZ	short NormalOpen	; no
 16975                                  ResetAccess:
 16976 0000387D 83E1F0                  	AND	CX,~access_mask	;0FFF0h	; clear access
 16977                                  ;	OR	CX,open_for_read	; stick in open_for_read
 16978 00003880 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 16979 00003883 EB0C                    	JMP	SHORT FillSFT
 16980                                  ;
 16981                                  ; The SFT is normal.  See if the requested access is open_for_read
 16982                                  ;
 16983                                  NormalOpen:
 16984 00003885 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 16985 00003888 80F900                  	CMP	CL,open_for_read	; is it open for read?
 16986 0000388B 7404                    	JZ	short FillSFT
 16987 0000388D 5E                      	pop	si
 16988 0000388E 1F                      	pop	ds
 16989 0000388F EBB8                    	JMP	short Open_Bad_Access
 16990                                  ;
 16991                                  ; All done, restore registers and fill the SFT.
 16992                                  ;
 16993                                  FillSFT:
 16994 00003891 5E                      	pop	si
 16995 00003892 1F                      	pop	ds
 16996                                  open_ok:
 16997 00003893 E8B91B                  	call	DOOPEN			; Fill in SFT
 16998                                  
 16999                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 17000                                  	;12/08/2018
 17001                                  	;AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 17002 00003896 8026[A40F]80            	and	byte [FastOpenFlg],Fast_yes	
 17003                                  
 17004                                  	; MSDOS 6.0
 17005                                  	;CALL	DO_SHARE_CHECK
 17006                                  	;JNC	short SHARE_OK
 17007                                  	;call	LcritDisk
 17008                                  	;JMP	short Clear_FastOpen	
 17009                                  
 17010                                  	; MSDOS 3.3
 17011                                  DO_SHARE_CHECK:
 17012 0000389B 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 17013                                  OpenShareRetry:
 17014 0000389F 51                      	push	cx			; Save number left to do
 17015 000038A0 E8CC3D                  	call	SHARE_CHECK		; Final Check
 17016 000038A3 59                      	pop	cx			; CX = # left
 17017 000038A4 7312                    	JNC	short SHARE_OK		; No problem with access
 17018 000038A6 E883E7                  	call	Idle
 17019 000038A9 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 17020                                  OpenShareFail:
 17021 000038AB C43E[5A05]              	LES	DI,[THISSFT]
 17022 000038AF E82B00                  	call	SHARE_ERROR
 17023 000038B2 73E7                    	JNC	short DO_SHARE_CHECK	; User wants more retry
 17024                                  	
 17025                                  	;12/08/2018
 17026                                  	;mov	byte [ss:FastOpenFlg],0
 17027                                  	;08/09/2018
 17028                                  	;mov	byte [FastOpenFlg],0
 17029 000038B4 E860E8                  	call	LcritDisk
 17030                                  	;JMP	short Clear_FastOpen
 17031 000038B7 C3                      	retn
 17032                                  
 17033                                  SHARE_OK:
 17034                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17035 000038B8 B80300                  	MOV	AX,3
 17036 000038BB C43E[5A05]              	LES	DI,[THISSFT]
 17037                                  ;if installed
 17038                                  	;call	JShare + 14 * 4
 17039 000038BF FF1E[9400]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 17040                                  ;else
 17041                                  ;	Call	ShSU
 17042                                  ;endif
 17043 000038C3 E851E8                  	call	LcritDisk
 17044                                  	
 17045                                  	;FallThru Set_SFT_Mode
 17046                                  
 17047                                  ;----------------------------------------------------------------------------
 17048                                  ; Procedure Name : SET_SFT_MODE
 17049                                  ;
 17050                                  ; Finish SFT initialization for new reference. Set the correct mode.
 17051                                  ;
 17052                                  ;   Inputs:
 17053                                  ;	ThisSFT points to SFT
 17054                                  ;
 17055                                  ;   Outputs:
 17056                                  ;	Carry clear
 17057                                  ;   Registers modified: AX.
 17058                                  ;---------------------------------------------------------------------------
 17059                                  
 17060                                  ;hkn; called from create. DS already set up to DOSDATA.
 17061                                  
 17062                                  SET_SFT_MODE:
 17063 000038C6 C43E[5A05]              	LES	DI,[THISSFT]
 17064 000038CA E8E217                  	call	DEV_OPEN_SFT
 17065 000038CD 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 17066 000038D3 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 17067 000038D5 A1[FC02]                	MOV	AX,[CurrentPDB]
 17068 000038D8 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 17069                                  
 17070                                  Clear_FastOpen:
 17071 000038DC C3                      	retn			       ;;;;; DOS 3.3
 17072                                  
 17073                                  ;----------------------------------------------------------------------------
 17074                                  ; Procedure Name : SHARE_ERROR
 17075                                  ;
 17076                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 17077                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 17078                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 17079                                  ; really ignore).  Carry clear
 17080                                  ; if user wants a retry. ES, DI, DS preserved
 17081                                  ;---------------------------------------------------------------------------
 17082                                  
 17083                                  SHARE_ERROR:
 17084 000038DD 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 17085 000038E3 750C                    	JNZ	short _HARD_ERR
 17086 000038E5 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 17087 000038E9 80E1F0                  	AND	CL,SHARING_MASK
 17088 000038EC 80F900                  	CMP	CL,SHARING_COMPAT
 17089 000038EF 7505                    	JNE	short _NO_HARD_ERR
 17090                                  _HARD_ERR:
 17091 000038F1 E8803D                  	call	SHARE_VIOLATION
 17092                                  	;retnc				; User wants retry
 17093 000038F4 73E6                    	jnc	short Clear_FastOpen
 17094                                  _NO_HARD_ERR:
 17095 000038F6 B82000                  	MOV	AX,error_sharing_violation
 17096 000038F9 F9                      	STC
 17097 000038FA C3                      	retn
 17098                                  
 17099                                  ; MSDOS 6.0
 17100                                  ;----------------------------------------------------------------------------
 17101                                  ; Procedure Name : DO_SHARE_CHECK
 17102                                  ;
 17103                                  ; Input: THISDPB, WFP_Start, THISSFT set
 17104                                  ; Functions: check file sharing mode is valid
 17105                                  ; Output: carry set, error
 17106                                  ;	  carry clear, share ok
 17107                                  ;----------------------------------------------------------------------------
 17108                                  ;
 17109                                  ;DO_SHARE_CHECK:
 17110                                  ;	call	EcritDisk		; enter critical section
 17111                                  ;OPN_RETRY:
 17112                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 17113                                  ;OpenShareRetry:
 17114                                  ;	push	cx			; Save number left to do
 17115                                  ;	call	SHARE_CHECK		; Final Check
 17116                                  ;	pop	cx			; CX = # left
 17117                                  ;	JNC	short Share_Ok2		; No problem with access
 17118                                  ;	call	Idle
 17119                                  ;	LOOP	OpenShareRetry		; One more retry used up
 17120                                  ;OpenShareFail:
 17121                                  ;	LES	DI,[THISSFT]
 17122                                  ;	call	SHARE_ERROR
 17123                                  ;	JNC	short OPN_RETRY		; User wants more retry
 17124                                  ;Share_Ok2:
 17125                                  ;	call	LcritDisk		; leave critical section
 17126                                  ;	retn
 17127                                  
 17128                                  ;-----------------------------------------------------------------------------
 17129                                  ; Procedure Name : Check_Access
 17130                                  ;
 17131                                  ; Inputs:
 17132                                  ;	AX is mode
 17133                                  ;	  High NIBBLE of AL (Sharing Mode)
 17134                                  ;		sharing_compat	   file is opened in compatibility mode
 17135                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 17136                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 17137                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 17138                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 17139                                  ;	  Low NIBBLE of AL (Access Mode)
 17140                                  ;		open_for_read	file is opened for reading
 17141                                  ;		open_for_write	file is opened for writing
 17142                                  ;		open_for_both	file is opened for both reading and writing.
 17143                                  ; Function:
 17144                                  ;	Check this access mode for correctness
 17145                                  ; Outputs:
 17146                                  ;	[open_access] = AL input
 17147                                  ;	Carry Clear
 17148                                  ;		Mode is correct
 17149                                  ;		AX unchanged
 17150                                  ;	Carry Set
 17151                                  ;		Mode is bad
 17152                                  ;		AX = error_invalid_access
 17153                                  ; No other registers effected
 17154                                  ;----------------------------------------------------------------------------
 17155                                  
 17156                                  Check_Access_AX:
 17157                                  
 17158 000038FB A2[2B05]                	MOV	[OPEN_ACCESS],AL
 17159 000038FE 53                      	PUSH	BX
 17160                                  
 17161                                  ;	If sharing, then test for special sharing mode for FCBs
 17162                                  
 17163 000038FF 88C3                    	MOV	BL,AL
 17164 00003901 80E3F0                  	AND	BL,SHARING_MASK
 17165 00003904 803E[2F05]FF            	CMP	byte [FSHARING],-1
 17166 00003909 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 17167 0000390B 80FB70                  	CMP	BL,SHARING_NET_FCB
 17168 0000390E 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 17169                                  CheckShareMode:
 17170 00003910 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 17171 00003913 770D                    	JA	short Make_Bad_Access
 17172                                  CheckAccessMode:
 17173 00003915 88C3                    	MOV	BL,AL
 17174 00003917 80E30F                  	AND	BL,access_mask
 17175 0000391A 80FB02                  	CMP	BL,2
 17176 0000391D 7703                    	JA	short Make_Bad_Access
 17177 0000391F 5B                      	POP	BX
 17178 00003920 F8                      	CLC
 17179 00003921 C3                      	retn
 17180                                  
 17181                                  Make_Bad_Access:
 17182 00003922 B80C00                  	MOV	AX,error_invalid_access
 17183 00003925 5B                      	POP	BX
 17184 00003926 F9                      	STC
 17185 00003927 C3                      	retn
 17186                                  
 17187                                  ;============================================================================
 17188                                  ; DINFO.ASM, MSDOS 6.0, 1991
 17189                                  ;============================================================================
 17190                                  ; 08/08/2018 - Retro DOS v3.0
 17191                                  
 17192                                  ;**	Low level routine for returning disk drive information from a local
 17193                                  ;	  or NET device
 17194                                  ;
 17195                                  ;	DISK_INFO
 17196                                  ;
 17197                                  ;	  Modification history:
 17198                                  ;
 17199                                  ;		Created: ARR 30 March 1983
 17200                                  
 17201                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 17202                                  ;---------------------------------------------------------------------------
 17203                                  ; Procedure Name : DISK_INFO
 17204                                  ;
 17205                                  ; Inputs:
 17206                                  ;	[THISCDS] Points to the Macro List Structure of interest
 17207                                  ;		(It MAY NOT be NUL, error not detected)
 17208                                  ; Function:
 17209                                  ;	Get Interesting Drive Information
 17210                                  ; Returns:
 17211                                  ;	DX = Number of free allocation units
 17212                                  ;	BX = Total Number of allocation units on disk
 17213                                  ;	CX = Sector size
 17214                                  ;	AL = Sectors per allocation unit
 17215                                  ;	AH = FAT ID BYTE
 17216                                  ;	Carry set if error (currently user FAILed to I 24)
 17217                                  ; Segs except ES preserved, others destroyed
 17218                                  ;----------------------------------------------------------------------------
 17219                                  
 17220                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 17221                                  ;hkn; DOSDATA. 
 17222                                  
 17223                                  DISK_INFO:
 17224                                  	; 08/08/2018 - Retro DOS v3.0
 17225                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 17226                                  
 17227 00003928 E846E7                  	call	TestNet
 17228 0000392B 7306                    	JNC	short LOCAL_DSK_INFO
 17229                                  
 17230                                  ;IF NOT Installed
 17231                                  ;	transfer NET_DISK_INFO
 17232                                  ;ELSE
 17233                                  	;MOV	AX,(MultNET SHL 8) OR 12
 17234                                  	;INT	2FH
 17235                                  	;return
 17236                                  
 17237 0000392D B80C11                  	mov     ax,110Ch
 17238 00003930 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 17239                                  			; ES:DI -> current directory
 17240                                  			; Return: AL = sectors per cluster, BX = total clusters
 17241                                  			; CX = bytes per sector, DX = number of available clusters
 17242 00003932 C3                      	retn
 17243                                  ;ENDIF
 17244                                  
 17245                                  LOCAL_DSK_INFO:
 17246 00003933 C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 17247 00003938 E8D4E7                  	call	EcritDisk
 17248 0000393B E89525                  	call	FATREAD_CDS		; perform media check.
 17249 0000393E 7241                    	JC	short CRIT_LEAVE
 17250 00003940 BB0200                  	MOV	BX,2
 17251 00003943 E8EB23                  	call	UNPACK			; Get first FAT sector into CURBUF
 17252 00003946 7239                    	JC	short CRIT_LEAVE
 17253 00003948 C536[9E05]              	LDS	SI,[CURBUF]
 17254 0000394C 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 17255                                  
 17256                                  ;hkn; SS is DOSDATA
 17257 0000394F 16                      	push	ss
 17258 00003950 1F                      	pop	ds
 17259 00003951 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 17260                                  ;
 17261                                  ; Examine the current free count.  If it indicates that we have an invalid
 17262                                  ; count, do the expensive calculation.
 17263                                  ;
 17264 00003955 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 17265 00003959 83FAFF                  	CMP	DX,-1			; is it valid?
 17266 0000395C 7404                    	JZ	short DoScan
 17267                                  ;
 17268                                  ; Check to see if it is in a reasonalbe range.	If so, trust it and return.
 17269                                  ; Otherwise, we need to blast out an internal error message and then recompute
 17270                                  ; the count.
 17271                                  ;
 17272 0000395E 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 17273 00003960 7223                    	JB	short GotVal		; yes, trust it.
 17274                                  DoScan:
 17275 00003962 31D2                    	XOR	DX,DX
 17276 00003964 49                      	DEC	CX
 17277                                  SCANFREE:
 17278 00003965 E8C923                  	call	UNPACK
 17279 00003968 7217                    	JC	short CRIT_LEAVE
 17280 0000396A 7501                    	JNZ	short NOTFREECLUS
 17281 0000396C 42                      	INC	DX			; A free one
 17282                                  NOTFREECLUS:
 17283 0000396D 43                      	INC	BX			; Next cluster
 17284 0000396E E2F5                    	LOOP	SCANFREE
 17285 00003970 4B                      	DEC	BX			; BX was next cluster.	Convert to
 17286                                  ReturnVals:
 17287 00003971 4B                      	DEC	BX			; count
 17288 00003972 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK] 
 17289 00003976 FEC0                    	INC	AL			; Sectors/cluster
 17290 00003978 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 17291 0000397C 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 17292 00003980 F8                      	CLC
 17293                                  CRIT_LEAVE:
 17294 00003981 E893E7                  	call	LcritDisk
 17295 00003984 C3                      	retn
 17296                                  ;
 17297                                  ; We have correctly computed everything previously. Load up registers for
 17298                                  ; return.
 17299                                  ;
 17300                                  GotVal: 
 17301 00003985 89CB                    	MOV	BX,CX			; get cluster count
 17302 00003987 EBE8                    	JMP	short ReturnVals
 17303                                  
 17304                                  ;============================================================================
 17305                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 17306                                  ;============================================================================
 17307                                  ; 22/07/2018 - Retro DOS v3.0
 17308                                  
 17309                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 17310                                  ;	NAME	DOS_SEARCH
 17311                                  
 17312                                  ;**	Low level routines for doing local and NET directory searches
 17313                                  ;
 17314                                  ;	DOS_SEARCH_FIRST
 17315                                  ;	DOS_SEARCH_NEXT
 17316                                  ;	RENAME_NEXT
 17317                                  ;
 17318                                  ;	Revision history:
 17319                                  ;
 17320                                  ;	    Created: ARR 30 March 1983
 17321                                  ;	    A000	version 4.00  Jan. 1988
 17322                                  ;	    A001	PTM 3564 -- search for fastopen
 17323                                  
 17324                                  ;Installed = TRUE
 17325                                  
 17326                                  ;--------------------------------------------------------------------------
 17327                                  ;
 17328                                  ; Procedure Name : DOS_SEARCH_FIRST
 17329                                  ;
 17330                                  ; Inputs:
 17331                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17332                                  ;		terminated)
 17333                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17334                                  ;		( = -1 if current dir not involved, else
 17335                                  ;		 Points to first char after last "/" of current dir part)
 17336                                  ;	[THISCDS] Points to CDS being used
 17337                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17338                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17339                                  ;	[DMAADD] Points to 53 byte buffer
 17340                                  ; Function:
 17341                                  ;	Initiate a search for the given file spec
 17342                                  ; Outputs:
 17343                                  ;	CARRY CLEAR
 17344                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 17345                                  ;
 17346                                  ;	LOCAL
 17347                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 17348                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 17349                                  ;	    11 byte search name with Meta chars in it
 17350                                  ;	    Search Attribute Byte, attribute of search
 17351                                  ;	    WORD LastEnt value
 17352                                  ;	    WORD DirStart
 17353                                  ;	    4 byte pad
 17354                                  ;	    32 bytes of the directory entry found
 17355                                  ;	NET
 17356                                  ;	    21 bytes First byte has high bit set
 17357                                  ;	    32 bytes of the directory entry found
 17358                                  ;
 17359                                  ;	CARRY SET
 17360                                  ;	    AX = error code
 17361                                  ;		error_no_more_files
 17362                                  ;			No match for this file
 17363                                  ;		error_path_not_found
 17364                                  ;			Bad path (not in curr dir part if present)
 17365                                  ;		error_bad_curr_dir
 17366                                  ;			Bad path in current directory part of path
 17367                                  ; DS preserved, others destroyed
 17368                                  ;---------------------------------------------------------------------------
 17369                                  
 17370                                  DOS_SEARCH_FIRST:
 17371                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 17372                                  
 17373 00003989 C43E[5E05]              	LES	DI,[THISCDS]
 17374 0000398D 83FFFF                  	CMP	DI,-1
 17375 00003990 7506                    	JNZ	short TEST_RE_NET2
 17376                                  
 17377                                  ;IF NOT Installed
 17378                                  ;	transfer NET_SEQ_SEARCH_FIRST
 17379                                  ;ELSE
 17380                                  	;mov	ax,1119h
 17381 00003992 B81911                  	MOV	AX,(MultNET<<8)|25
 17382 00003995 CD2F                    	INT	2Fh
 17383 00003997 C3                      	retn
 17384                                  ;ENDIF
 17385                                  
 17386                                  TEST_RE_NET2:
 17387                                  	;test	word [es:di+43h],8000h
 17388 00003998 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 17389 0000399E 7406                    	JZ	short LOCAL_SEARCH_FIRST
 17390                                  
 17391                                  ;IF NOT Installed
 17392                                  ;	transfer NET_SEARCH_FIRST
 17393                                  ;ELSE
 17394                                  	;mov	ax,111Bh
 17395 000039A0 B81B11                  	MOV	AX,(MultNET<<8)|27
 17396 000039A3 CD2F                    	INT	2FH
 17397 000039A5 C3                      	retn
 17398                                  ;ENDIF
 17399                                  
 17400                                  LOCAL_SEARCH_FIRST:
 17401 000039A6 E866E7                  	call	EcritDisk
 17402                                  	; MSDOS 6.0
 17403                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 17404                                  	;JZ	short NOFN			;AN000;
 17405                                  	;OR	byte [FastOpenflg],Fastopen_Set	;AN000;
 17406                                  ;NOFN:						;AN000;
 17407 000039A9 C606[1603]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17408                                  	; MSDOS 6.0
 17409                                  	;CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 17410                                  	;JNC	short norm_GETPATH	;AN000;;FO. no
 17411                                  	;AND	byte [FastOpenflg],Fast_yes ;AN000;;FO. reset fastopen
 17412                                  ;norm_GETPATH:
 17413 000039AE E87610                  	call	GETPATH
 17414                                  	; BX = offset NAME1
 17415                                  ;_getdone:
 17416 000039B1 7313                    	JNC	short find_check_dev
 17417 000039B3 750C                    	JNZ	short bad_path3
 17418 000039B5 08C9                    	OR	CL,CL
 17419 000039B7 7408                    	JZ	short bad_path3
 17420                                  find_no_more:
 17421                                  	;mov	ax,12h
 17422 000039B9 B81200                  	MOV	AX,error_no_more_files
 17423                                  BadBye:
 17424                                  	; MSDOS 6.0
 17425                                  	;AND	[SS:FastOpenflg],Fast_yes  ;AN000;;FO. reset fastopen
 17426                                  
 17427 000039BC F9                      	STC
 17428 000039BD E857E7                  	call	LcritDisk
 17429 000039C0 C3                      	retn
 17430                                  
 17431                                  bad_path3:
 17432                                  	;mov	ax,3
 17433 000039C1 B80300                  	MOV	AX,error_path_not_found
 17434 000039C4 EBF6                    	JMP	short BadBye
 17435                                  
 17436                                  find_check_dev:
 17437 000039C6 08E4                    	OR	AH,AH
 17438 000039C8 790A                    	JNS	short found_entry
 17439 000039CA C706[1203]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 17440 000039D0 FE06[2D05]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 17441                                  found_entry:
 17442                                  ;
 17443                                  ; We set the physical drive byte here Instead of after found_it; Doing
 17444                                  ; a search-next may not have wfp_start set correctly
 17445                                  ;
 17446 000039D4 C43E[F802]              	LES	DI,[DMAADD]
 17447 000039D8 8B36[6E05]              	MOV	SI,[WFP_START]		; get pointer to beginning
 17448 000039DC AC                      	LODSB
 17449 000039DD 2C40                    	SUB	AL,'A'-1                ; logical drive
 17450 000039DF AA                      	STOSB				; High bit not set (local)
 17451                                  found_it:
 17452 000039E0 C43E[F802]              	LES	DI,[DMAADD]
 17453 000039E4 47                      	INC	DI
 17454                                  
 17455                                  	; MSDOS 6.0
 17456                                  	;PUSH	DS				  ;FO.;AN001; save ds
 17457                                  	;TEST	byte [Fastopenflg],Set_For_Search ;FO.;AN001; from fastopen
 17458                                  	;JZ	short notfast 			  ;FO.;AN001;
 17459                                  	;MOV	SI,BX				  ;FO.;AN001;
 17460                                  	;MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 17461                                  	;JMP	SHORT movmov			  ;FO.;AN001;
 17462                                  
 17463                                  notfast:
 17464 000039E5 BE[0805]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 17465                                  movmov:
 17466                                  ; Special E5 code
 17467 000039E8 A4                      	MOVSB
 17468 000039E9 26807DFF05              	CMP	BYTE [ES:DI-1],5
 17469 000039EE 7505                    	JNZ	short NOTKANJB
 17470 000039F0 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 17471                                  NOTKANJB:
 17472 000039F5 B90A00                  	MOV	CX,10
 17473 000039F8 F3A4                    	REP	MOVSB
 17474                                  
 17475                                  	; 08/09/2018
 17476                                  	;POP	DS			;FO.;AN001; restore ds
 17477                                  
 17478 000039FA A0[2805]                	MOV	AL,[ATTRIB]
 17479 000039FD AA                      	STOSB
 17480 000039FE 50                      	PUSH	AX			; Save AH device info
 17481 000039FF A1[1203]                	MOV	AX,[LASTENT]
 17482 00003A02 AB                      	STOSW
 17483 00003A03 A1[7E05]                	MOV	AX,[DIRSTART]
 17484 00003A06 AB                      	STOSW
 17485                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 17486 00003A07 83C704                  	ADD	DI,4
 17487 00003A0A 58                      	POP	AX			; Recover AH device info
 17488 00003A0B 08E4                    	OR	AH,AH
 17489 00003A0D 7813                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 17490 00003A0F 833E[9E05]FF            	CMP	WORD [CURBUF],-1
 17491 00003A14 7508                    	JNZ	short OKSTORE
 17492                                  
 17493                                  	; MSDOS 6.0
 17494                                  	;TEST	byte [FastOPenFlg],Set_For_Search
 17495                                  					;AN000;;FO. from fastopen and is good
 17496                                  	;JNZ	short OKSTORE		;AN000;;FO.
 17497                                  
 17498                                  	; The user has specified the root directory itself, rather than some
 17499                                  	; contents of it. We can't "find" that.
 17500 00003A16 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 17501                                  					;   stuffing a -1 at Lastent
 17502 00003A1C EB9B                    	JMP	short find_no_more
 17503                                  
 17504                                  OKSTORE:
 17505 00003A1E 8E1E[A005]              	MOV	DS,[CURBUF+2]
 17506                                  DOSREL:
 17507                                  	; BX = offset NAME1 (from GETPATH)
 17508 00003A22 89DE                    	MOV	SI,BX			; SI-> start of entry
 17509                                  
 17510                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 17511                                  
 17512                                  	;mov	cx,32
 17513 00003A24 B92000                  	MOV	CX,dir_entry.size
 17514                                  ;;;;; 7/29/86
 17515 00003A27 89F8                    	MOV	AX,DI			; save the 1st byte addr
 17516 00003A29 F3A4                    	REP	MOVSB
 17517 00003A2B 89C7                    	MOV	DI,AX			; restore 1st byte addr
 17518 00003A2D 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 17519 00003A31 7504                    	JNZ	short NO05
 17520 00003A33 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 17521                                  NO05:
 17522                                  
 17523                                  ;;;;; 7/29/86
 17524                                  
 17525                                  ;hkn; FastOpenflg is in DOSDATA use SS
 17526                                  	; MSDOS 6.0
 17527                                  	;AND	byte [SS:FastOpenflg],Fast_yes ;AN000;;FO. reset fastopen
 17528                                  	;push	ss
 17529                                  	;pop	ds
 17530                                  	;AND	byte [FastOpenflg],Fast_yes
 17531                                  
 17532                                  ;hkn; SS is DOSDATA
 17533 00003A37 16                      	push	ss
 17534 00003A38 1F                      	pop	ds
 17535 00003A39 F8                      	CLC
 17536 00003A3A E8DAE6                  	call	LcritDisk
 17537 00003A3D C3                      	retn
 17538                                  
 17539                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 17540                                  ;----------------------------------------------------------------------------
 17541                                  ;
 17542                                  ; Procedure Name : DOS_SEARCH_NEXT
 17543                                  ;
 17544                                  ; Inputs:
 17545                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 17546                                  ;	    (only first 21 bytes must have valid information)
 17547                                  ; Function:
 17548                                  ;	Look for subsequent matches
 17549                                  ; Outputs:
 17550                                  ;	CARRY CLEAR
 17551                                  ;	    The 53 bytes at DMAADD are updated for next call
 17552                                  ;		(see DOS_SEARCH_FIRST)
 17553                                  ;	CARRY SET
 17554                                  ;	    AX = error code
 17555                                  ;		error_no_more_files
 17556                                  ;			No more files to find
 17557                                  ; DS preserved, others destroyed
 17558                                  ;---------------------------------------------------------------------------
 17559                                  
 17560                                  ;hkn; called from search.asm. DS already set up at this point.
 17561                                  
 17562                                  DOS_SEARCH_NEXT:
 17563 00003A3E C43E[F802]              	LES	DI,[DMAADD]
 17564 00003A42 268A05                  	MOV	AL,[ES:DI]
 17565 00003A45 A880                    	TEST	AL,80H			; Test for NET
 17566 00003A47 7406                    	JZ	short LOCAL_SEARCH_NEXT
 17567                                  ;IF NOT Installed
 17568                                  ;	transfer NET_SEARCH_NEXT
 17569                                  ;ELSE
 17570                                  	;mov	ax,111Ch
 17571 00003A49 B81C11                  	MOV	AX,(MultNET<<8)|28
 17572 00003A4C CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 17573                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 17574                                  		     ; Return: CF set on error, AX = DOS error code
 17575                                  		     ; CF clear if successful
 17576 00003A4E C3                      	retn
 17577                                  ;ENDIF
 17578                                  
 17579                                  LOCAL_SEARCH_NEXT:
 17580                                  	;AL is drive A=1
 17581                                  	;mov	byte [EXTERR_LOCUS],2
 17582 00003A4F C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 17583 00003A54 E8B8E6                  	call	EcritDisk
 17584                                  
 17585                                  ;hkn; DummyCDS is in DOSDATA
 17586 00003A57 C706[5E05][B704]        	MOV     word [THISCDS],DUMMYCDS
 17587                                  ;hkn; Segment address is DOSDATA - use ds
 17588                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 17589 00003A5D 8C1E[6005]              	mov	[THISCDS+2],DS
 17590                                  
 17591 00003A61 0440                    	ADD	AL,'A'-1
 17592 00003A63 E89931                  	call	InitCDS
 17593                                  
 17594                                  ;	call	GETTHISDRV		; Set CDS pointer
 17595                                  
 17596 00003A66 7236                    	JC	short No_files		; Bogus drive letter
 17597 00003A68 C43E[5E05]              	LES	DI,[THISCDS]		; Get CDS pointer
 17598                                  	;les	bp,[es:di+45h]
 17599 00003A6C 26C46D45                	LES	BP,[ES:DI+curdir.devptr]; Get DPB pointer
 17600 00003A70 E81FDD                  	call	GOTDPB			; [THISDPB] = ES:BP
 17601                                  
 17602 00003A73 268A4600                	mov	al,[ES:BP]
 17603                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 17604 00003A77 A2[3305]                	mov	[THISDRV],AL
 17605                                  	;mov	word [CREATING], 0E500h
 17606 00003A7A C706[3A05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 17607 00003A80 C606[1603]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17608 00003A85 C536[F802]              	LDS	SI,[DMAADD]
 17609 00003A89 AC                      	LODSB				; Drive Byte
 17610                                  
 17611                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 17612                                  RENAME_NEXT:
 17613                                  	;context ES
 17614 00003A8A 16                      	push	ss
 17615 00003A8B 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 17616                                  
 17617                                  ;hkn; NAME1 is in DOSDATA
 17618 00003A8C BF[0805]                	MOV	DI,NAME1
 17619                                  
 17620 00003A8F B90B00                  	MOV	CX,11
 17621 00003A92 F3A4                    	REP	MOVSB			; Search name
 17622 00003A94 AC                      	LODSB				; Attribute
 17623                                  
 17624                                  ;hkn; SS override
 17625 00003A95 36A2[2805]              	MOV	[SS:ATTRIB],AL
 17626 00003A99 AD                      	LODSW				; LastEnt
 17627 00003A9A 09C0                    	OR	AX,AX
 17628 00003A9C 7903                    	JNS	short cont_load
 17629                                  No_files:
 17630 00003A9E E918FF                  	JMP	find_no_more
 17631                                  
 17632                                  cont_load:
 17633 00003AA1 50                      	PUSH	AX			; Save LastEnt
 17634 00003AA2 AD                      	LODSW				; DirStart
 17635 00003AA3 89C3                    	MOV	BX,AX
 17636                                  
 17637                                  ;hkn; SS is DOSDATA
 17638                                  	;context DS
 17639 00003AA5 16                      	push	ss
 17640 00003AA6 1F                      	pop	ds
 17641 00003AA7 C42E[4605]              	LES	BP,[THISDPB]		; Recover ES:BP
 17642                                  	;invoke	SetDirSrch
 17643 00003AAB E8180F                  	call	SETDIRSRCH
 17644 00003AAE 7303                    	JNC	short SEARCH_GOON
 17645 00003AB0 58                      	POP	AX			; Clean stack
 17646 00003AB1 EBEB                    	JMP	short No_files
 17647                                  
 17648                                  SEARCH_GOON:
 17649 00003AB3 E80212                  	call	STARTSRCH
 17650 00003AB6 58                      	POP	AX
 17651 00003AB7 E8DE0E                  	call	GETENT
 17652 00003ABA 72E2                    	JC	short No_files
 17653 00003ABC E80F0E                  	call	NEXTENT
 17654 00003ABF 72DD                    	JC	short No_files
 17655 00003AC1 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 17656 00003AC3 E91AFF                  	JMP	found_it ; 10/08/2018
 17657                                  
 17658                                  ; MSDOS 6.0
 17659                                  ;---------------------------------------------------------------------------
 17660                                  ;
 17661                                  ; Procedure Name : CHECK_QUESTION
 17662                                  ;
 17663                                  ; Input: [WFP_START]= pointer to final path
 17664                                  ; Function: check '?' char
 17665                                  ; Output: carry clear, if no '?'
 17666                                  ;	 carry set, if '?' exists
 17667                                  ;---------------------------------------------------------------------------
 17668                                  
 17669                                  ;CHECK_QUESTION:
 17670                                  ;;hkn;	wfp_start is in DOSDATA;hkn;	MOV     WORD PTR ThisCDS+2,CS
 17671                                  ;;hkn;	PUSH	CS			;AN000;;FO.
 17672                                  ;	push	ss
 17673                                  ;
 17674                                  ;	POP	DS			;AN000;;FO. ds:si -> final path
 17675                                  ;	MOV	SI,[WFP_START]		;AN000;;FO.
 17676                                  ;getnext:				;AN000;
 17677                                  ;	LODSB				;AN000;;FO. get char
 17678                                  ;	OR	AL,AL			;AN000;;FO. is it null
 17679                                  ;	JZ	short NO_Question	;AN000;;FO. yes
 17680                                  ;	CMP	AL,'?'                  ;AN000;;FO. is '?'
 17681                                  ;	JNZ	short getnext 		;AN000;;FO. no
 17682                                  ;	STC				;AN000;;FO.
 17683                                  ;NO_Question:				;AN000;
 17684                                  ;	retn				;AN000;;FO.
 17685                                  
 17686                                  ;============================================================================
 17687                                  ; ABORT.ASM, MSDOS 6.0, 1991
 17688                                  ;============================================================================
 17689                                  ; 23/07/2018 - Retro DOS v3.0
 17690                                  
 17691                                  ;**
 17692                                  ;
 17693                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 17694                                  ;  If process has NET resources a close all is sent out over the net.
 17695                                  ;
 17696                                  ;   DOS_ABORT
 17697                                  ;
 17698                                  ;   Modification history:
 17699                                  ;
 17700                                  ;       Created: ARR 30 March 1983
 17701                                  ;
 17702                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 17703                                  ;				being terminated only if it is busy.
 17704                                  ;
 17705                                  
 17706                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 17707                                  ;--------------------------------------------------------------------------
 17708                                  ;
 17709                                  ; Procedure Name : DOS_ABORT
 17710                                  ;
 17711                                  ; Inputs:
 17712                                  ;       [CurrentPDB] set to PID of process aborting
 17713                                  ; Function:
 17714                                  ;       Close all files and free all SFTs for this PID
 17715                                  ; Returns:
 17716                                  ;       None
 17717                                  ; All destroyed except stack
 17718                                  ;---------------------------------------------------------------------------
 17719                                  
 17720                                  DOS_ABORT:
 17721 00003AC6 368E06[FC02]            	MOV     ES,[SS:CurrentPDB]	; SS override
 17722 00003ACB 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 17723                                  reset_free_jfn:
 17724 00003AD0 89CB                    	MOV     BX,CX
 17725 00003AD2 51                      	PUSH    CX
 17726 00003AD3 4B                      	DEC     BX                      ; get jfn (start with last one)
 17727                                  
 17728 00003AD4 E83436                  	CALL	_$CLOSE
 17729 00003AD7 59                      	POP     CX
 17730 00003AD8 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 17731                                  ;
 17732                                  ; Note:  We do need to explicitly close FCBs. Reasons are as follows: If we
 17733                                  ; are running in the no-sharing no-network environment, we are simulating the
 17734                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 17735                                  ; BUT...  the cache remains in a state with garbage that may be reused by the
 17736                                  ; next process.  We scan the set and blast the ref counts of the FCBs we own.
 17737                                  ;
 17738                                  ; If sharing is loaded, then the following call to close process will
 17739                                  ; correctly close all FCBs.  We will then need to walk the list AFTER here.
 17740                                  ;
 17741                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 17742                                  ; known network resources.  These resources are then responsible for cleaning
 17743                                  ; up after this process.
 17744                                  ;
 17745                                  ; Sleazy, eh?
 17746                                  ;
 17747                                  	;context DS			; SS is DOSDATA
 17748 00003ADA 16                      	push	ss
 17749 00003ADB 1F                      	pop	ds  ; 09/09/2018
 17750                                  
 17751                                  	;CallInstall Net_Abort, MultNET, 29
 17752 00003ADC B81D11                  	mov	ax, 111Dh
 17753 00003ADF CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 17754                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 17755                                  			; DS???, SS = DOS CS
 17756                                  ;if installed
 17757 00003AE1 FF1E[6C00]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 17758                                  ;else
 17759                                  ;	call 	mftCloseP
 17760                                  ;endif
 17761                                  
 17762                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 17763                                  ; counts.
 17764                                  					; SS override
 17765 00003AE5 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 17766                                  	;mov	cx,[es:di+4]
 17767 00003AEA 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 17768 00003AEE E317                    	jcxz    FCBScanDone
 17769                                  	;lea	di,[di+6]
 17770 00003AF0 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 17771 00003AF3 36A1[0603]              	mov     ax,[SS:PROC_ID]		; SS override
 17772                                  FCBTest:
 17773                                  	;cmp	[es:di+31h],ax
 17774 00003AF7 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 17775 00003AFB 7505                    	jnz	short FCBNext		; no, skip it
 17776 00003AFD 26C7050000              	mov	word [es:di],0
 17777                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 17778                                  FCBNext:
 17779 00003B02 83C73B                  	add     di,SF_ENTRY.size
 17780 00003B05 E2F0                    	loop    FCBTest
 17781                                  FCBScanDone:
 17782                                  
 17783                                  ;
 17784                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 17785                                  ;
 17786 00003B07 31DB                    	XOR     BX,BX
 17787                                  Scan:
 17788 00003B09 53                      	push    bx
 17789 00003B0A E84E30                  	call	SFFromSFN
 17790 00003B0D 5B                      	pop     bx
 17791 00003B0E 7301                    	jnc     short Scan1
 17792 00003B10 C3                      	retn
 17793                                  
 17794                                  ;M038
 17795                                  ; Do what the comment above says, check for busy state
 17796                                  ;
 17797                                  Scan1:
 17798                                  	;cmp	word [es:di],0
 17799                                  	;jz	short scan_next  ; MSDOS 3.3
 17800                                  	; MSDOS 6.0
 17801 00003B11 26833DFF                	cmp	word [es:di],sf_busy ; -1
 17802                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 17803                                  				; Is Sft busy? ;M038
 17804 00003B15 7519                    	jnz	short scan_next
 17805                                  ;
 17806                                  ; we have a SFT that is busy. See if it is for the current process
 17807                                  ;
 17808 00003B17 36A1[0603]              	mov     ax,[SS:PROC_ID]		; SS override
 17809                                  	;cmp	[es:di+31h],ax
 17810 00003B1B 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 17811 00003B1F 750F                    	jnz	short scan_next
 17812 00003B21 36A1[0803]              	mov     ax,[SS:USER_ID]		; SS override
 17813                                  	;cmp	[es:di+2Fh],ax
 17814 00003B25 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 17815 00003B29 7505                    	jnz	short scan_next
 17816                                  ;
 17817                                  ; This SFT is labelled as ours.
 17818                                  ;
 17819 00003B2B 26C7050000              	mov	word [es:di],0
 17820                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 17821                                  scan_next:
 17822 00003B30 43                      	inc     bx
 17823 00003B31 EBD6                    	jmp     short Scan
 17824                                  
 17825                                  
 17826                                  ;============================================================================
 17827                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 17828                                  ;============================================================================
 17829                                  ; 23/07/2018 - Retro DOS v3.0
 17830                                  
 17831                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 17832                                  ;
 17833                                  ;	DOS_CLOSE
 17834                                  ;	DOS_COMMIT
 17835                                  ;	FREE_SFT
 17836                                  ;	SetSFTTimes
 17837                                  ;
 17838                                  ;	Revision history:
 17839                                  ;
 17840                                  ;	   AN000  version 4.00	Jan. 1988
 17841                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 17842                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 17843                                  
 17844                                  ;Installed = TRUE
 17845                                  
 17846                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 17847                                  ;---------------------------------------------------------------------------
 17848                                  ;
 17849                                  ; Procedure Name : DOS_CLOSE
 17850                                  ;
 17851                                  ; Inputs:
 17852                                  ;	[THISSFT] set to the SFT for the file being used
 17853                                  ; Function:
 17854                                  ;	Close the indicated file via the SFT
 17855                                  ; Returns:
 17856                                  ;	sf_ref_count decremented otherwise
 17857                                  ;	ES:DI point to SFT
 17858                                  ;	Carry set if error
 17859                                  ;	    AX has error code
 17860                                  ; DS preserved, others destroyed
 17861                                  ;---------------------------------------------------------------------------
 17862                                  
 17863                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 17864                                  
 17865                                  ; 24/07/2019 - Retro DOS v3.2
 17866                                  ; 18/05/2019 - Retro DOS v4.0
 17867                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 17868                                  
 17869                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 17870                                  
 17871                                  DOS_CLOSE:
 17872 00003B33 C43E[5A05]              	LES	DI,[THISSFT]
 17873                                  	;mov	bx,[ES:DI+5]
 17874 00003B37 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 17875                                  
 17876                                  ; Network closes are handled entirely by the net code.
 17877                                  
 17878                                  	;test	bx,8000h
 17879 00003B3B F7C30080                	TEST	BX,sf_isnet
 17880 00003B3F 7406                    	JZ	short LocalClose
 17881                                  
 17882                                  	;CallInstall Net_Close,MultNET,6
 17883 00003B41 B80611                  	mov     ax,1106h
 17884 00003B44 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 17885                                  			; ES:DI -> SFT
 17886                                  			; SFT DPB field -> DPB of drive containing file
 17887                                  			; Return: CF set on error, AX = DOS error code
 17888                                  			; CF clear if successful
 17889 00003B46 C3                      	retn
 17890                                  
 17891                                  ; All closes release the sharing information.
 17892                                  ; No commit releases sharing information
 17893                                  ;
 17894                                  ; All closes decrement the ref count.
 17895                                  ; No commit decrements the ref count.
 17896                                  
 17897                                  LocalClose:
 17898 00003B47 E8C5E5                  	call	EcritDisk
 17899 00003B4A E85C01                  	CALL	SetSFTTimes
 17900 00003B4D E8DB00                  	CALL	FREE_SFT		; dec ref count or mark as busy
 17901                                  
 17902                                  ;hkn; SS is DOSDATA
 17903                                  	;Context DS
 17904 00003B50 16                      	push	ss
 17905 00003B51 1F                      	pop	ds
 17906                                  
 17907 00003B52 50                      	push	ax
 17908 00003B53 53                      	push	bx
 17909 00003B54 E8433B                  	call	ShareEnd
 17910 00003B57 5B                      	pop	bx
 17911 00003B58 58                      	pop	ax
 17912                                  ;
 17913                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 17914                                  ;
 17915                                  CloseEntry:
 17916 00003B59 50                      	PUSH	AX
 17917                                  ;
 17918                                  ; File clean or device does not get stamped nor disk looked at.
 17919                                  ;
 17920                                  	;test	bx,0C0h
 17921 00003B5A F7C3C000                	TEST	BX,devid_file_clean+devid_device
 17922 00003B5E 7403                    	JZ	short rdir
 17923 00003B60 E9B500                  	JMP	FREE_SFT_OK		; either clean or device
 17924                                  ;
 17925                                  ; Retrieve the directory entry for the file
 17926                                  ;
 17927                                  rdir:
 17928 00003B63 E8D200                  	CALL	DirFromSFT
 17929                                  	;mov	al,5
 17930 00003B66 B005                    	MOV	AL,error_access_denied
 17931 00003B68 7303                    	JNC	short clook
 17932 00003B6A E9AC00                  	JMP	CloseFinish		; pretend the close worked.
 17933                                  clook:
 17934                                  ;
 17935                                  ; ES:DI points to entry
 17936                                  ; DS:SI points to SFT
 17937                                  ; ES:BX points to buffer header
 17938                                  ;
 17939 00003B6D 57                      	push	di
 17940 00003B6E 56                      	push	si
 17941                                  	;lea	si,[si+20h]
 17942 00003B6F 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 17943                                  ;
 17944                                  ; ES:DI point to directory entry
 17945                                  ; DS:SI point to unpacked name
 17946                                  ;
 17947 00003B72 E8B0E4                  	call	XCHGP
 17948                                  ;
 17949                                  ; ES:DI point to unpacked name
 17950                                  ; DS:SI point to directory entry
 17951                                  ;
 17952 00003B75 E8B40D                  	call	MetaCompare
 17953 00003B78 E8AAE4                  	call	XCHGP
 17954 00003B7B 5E                      	pop	si
 17955 00003B7C 5F                      	pop	di
 17956 00003B7D 740C                    	JZ	short CLOSE_GO		; Name OK
 17957                                  Bye:	
 17958 00003B7F 89F7                    	MOV	DI,SI
 17959 00003B81 1E                      	PUSH	DS
 17960 00003B82 07                      	POP	ES			; ES:DI points to SFT
 17961 00003B83 16                      	PUSH	SS
 17962 00003B84 1F                      	POP	DS
 17963 00003B85 F9                      	STC
 17964                                  	;mov	al,2
 17965 00003B86 B002                    	MOV	AL,error_file_not_found
 17966 00003B88 E98E00                  	JMP	CloseFinish ; 24/07/2019
 17967                                  
 17968                                  	; 24/07/2019 - Retro DOS v4.0
 17969                                  	; 18/05/2019 - Retro DOS v4.0
 17970                                  CLOSE_GO:
 17971                                  	; MSDOS 6.0
 17972                                  	;test	word [si+2],8000h
 17973 00003B8B F744020080              	TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 17974 00003B90 740D                    	JZ	short nofcb		; no, set dir attr, sf_attr
 17975                                  	; MSDOS 3.3 & MSDOS 6.0
 17976                                  	;mov	ch,[es:di+0Bh]
 17977 00003B92 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 17978                                  	;mov	al,[si+4]
 17979 00003B96 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 17980                                  
 17981                                  ;hkn; SS override
 17982 00003B99 36A2[2805]              	MOV	[SS:ATTRIB],AL
 17983                                  	; MSDOS 3.3
 17984                                  	;;call	MatchAttributes
 17985                                  	;;JNZ	short Bye		; attributes do not match
 17986                                  	; 18/05/2019
 17987 00003B9D EB07                    	JMP	SHORT setattr		;FT.
 17988                                  nofcb:
 17989                                  	; MSDOS 6.0
 17990                                  	;mov	al,[si+4]
 17991 00003B9F 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 17992 00003BA2 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 17993                                  setattr:
 17994                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17995                                  	;or	byte [es:di+0Bh],20h
 17996 00003BA6 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 17997                                  	; MSDOS 6.0
 17998                                  	;mov	ax,[es:di+1Ah]
 17999 00003BAB 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 18000                                  					;F.O. save old first cluster
 18001                                  ;hkn; SS override
 18002 00003BAF 36A3[C90F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 18003                                  
 18004                                  	;mov	ax,[si+0Bh]
 18005 00003BB3 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 18006                                  	;mov	[es:di+1Ah],ax
 18007 00003BB6 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 18008                                  	;mov	ax,[si+11h]
 18009 00003BBA 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 18010                                  	;mov	[es:di+1Ch],ax
 18011 00003BBD 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 18012                                  	;mov	ax,[si+13h]
 18013 00003BC1 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 18014                                  	;mov	[es:di+1Eh],ax
 18015 00003BC4 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 18016                                  	;mov	ax,[si+0Fh]
 18017 00003BC8 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 18018                                  	;mov	[es:di+18h],ax
 18019 00003BCB 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 18020                                  	;mov	ax,[si+0Dh]
 18021 00003BCF 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 18022                                  	;mov	[es:di+16h],ax
 18023 00003BD2 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 18024                                  
 18025                                  	; MSDOS 6.0
 18026                                  ;; File Tagging
 18027                                  	;TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 18028                                  	;			  ;LB. if already dirty		    ;AN000;
 18029                                  	;JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 18030                                  	; 02/06/2019
 18031                                  	;call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 18032                                  	;
 18033                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18034                                  	;or	byte [es:bx+5],40h
 18035 00003BD6 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 18036                                  ;yesdirty4:
 18037 00003BDB 1E                      	push	ds
 18038 00003BDC 56                      	push	si
 18039                                  	; MSDOS 6.0
 18040                                  	;mov	cx,[si+0Bh]
 18041 00003BDD 8B0E0B00                	MOV	CX,[SF_ENTRY.sf_firclus] ; do this for Fastopen
 18042                                  ;hkn; SS override
 18043 00003BE1 36A0[3305]              	MOV	AL,[SS:THISDRV]
 18044                                  	; MSDOS 3.3 
 18045                                  	;push	ss
 18046                                  	;pop	ds
 18047                                  	;MOV	AL,[THISDRV]
 18048                                  ;;; 10/1/86  update fastopen cache
 18049                                  	; MSDOS 3.3 & MSDOS 6.0
 18050 00003BE5 52                      	PUSH	DX
 18051 00003BE6 B400                    	MOV	AH,0			; dir entry update
 18052 00003BE8 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 18053                                  	; MSDOS 6.0
 18054 00003BEA 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 18055 00003BEC 750D                    	JNZ	short do_update2	;AN005; no, do update
 18056 00003BEE B403                    	MOV	AH,3			;AN005; do a delete cache entry
 18057                                  	;mov	di,[si+1Bh]
 18058 00003BF0 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 18059                                  	;mov	cx,[si+1Dh]
 18060 00003BF3 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 18061                                  	;mov	dh,[si+1Fh]
 18062 00003BF6 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh= dir pos
 18063 00003BF9 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 18064                                  do_update2:
 18065                                  ;hkn; SS override fort OLD_FIRSTCLUS
 18066                                  	; 
 18067 00003BFB 363B0E[C90F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 18068 00003C00 7407                    	JZ	short do_update		;AN011;F.O. yes
 18069 00003C02 B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 18070 00003C04 368B0E[C90F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 18071                                  do_update:				;AN005;
 18072                                  ;hkn; SS is DOSDATA
 18073                                  	;Context DS
 18074 00003C09 16                      	push	ss
 18075 00003C0A 1F                      	pop	ds	
 18076                                  	; MSDOS 3.3 & MSDOS 6.0
 18077 00003C0B E876F8                  	call	FastOpen_Update 	; invoke fastopen
 18078 00003C0E 5A                      	POP	DX
 18079                                  
 18080                                  ;;; 10/1/86  update fastopen cache
 18081 00003C0F E85E26                  	call	FLUSHBUF		; flush all relevant buffers
 18082 00003C12 5F                      	pop	di
 18083 00003C13 07                      	pop	es
 18084                                  	;mov	al,5
 18085 00003C14 B005                    	MOV	AL,error_access_denied
 18086 00003C16 7201                    	JC	short CloseFinish
 18087                                  FREE_SFT_OK:
 18088 00003C18 F8                      	CLC				; signal no error.
 18089                                  CloseFinish:
 18090                                  
 18091                                  ; Indicate to the device that the SFT is being closed.
 18092                                  
 18093                                  ;;;; 7/21/86
 18094 00003C19 9C                      	PUSHF				; save flag from DirFromSFT
 18095 00003C1A E89914                  	call	DEV_CLOSE_SFT
 18096 00003C1D 9D                      	POPF
 18097                                  ;;;; 7/21/86
 18098                                  ;
 18099                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 18100                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 18101                                  ; going to be moving from busy to free.
 18102                                  ;
 18103 00003C1E 59                      	POP	CX			; get old ref count
 18104 00003C1F 9C                      	PUSHF
 18105 00003C20 49                      	DEC	CX			; if cx != 1
 18106 00003C21 7503                    	JNZ	short NoFree		; then do NOT free SFT
 18107 00003C23 26890D                  	mov	[es:di],cx
 18108                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 18109                                  NoFree:
 18110 00003C26 E8EEE4                  	call	LcritDisk
 18111 00003C29 9D                      	POPF
 18112 00003C2A C3                      	retn
 18113                                  
 18114                                  ;---------------------------------------------------------------------------
 18115                                  ;
 18116                                  ; Procedure Name : FREE_SFT
 18117                                  ;
 18118                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 18119                                  ; Flags preserved. Return old ref count in AX
 18120                                  ;
 18121                                  ; Note that busy is indicated by the SFT ref count being -1.
 18122                                  ;
 18123                                  ;---------------------------------------------------------------------------
 18124                                  
 18125                                  FREE_SFT:
 18126 00003C2B 9C                      	PUSHF		; Save carry state
 18127 00003C2C 268B05                  	mov	ax,[es:di]
 18128                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 18129 00003C2F 48                      	DEC	AX
 18130 00003C30 7501                    	JNZ	short SetCount
 18131 00003C32 48                      	DEC	AX
 18132                                  SetCount:
 18133 00003C33 268705                  	xchg	ax,[es:di]
 18134                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 18135 00003C36 9D                      	POPF
 18136 00003C37 C3                      	retn
 18137                                  
 18138                                  ;----------------------------------------------------------------------------
 18139                                  ;
 18140                                  ; Procedure Name : DirFromSFT
 18141                                  ;
 18142                                  ;   DirFromSFT - locate a directory entry given an SFT.
 18143                                  ;
 18144                                  ;   Inputs:	ES:DI point to SFT
 18145                                  ;		DS = DOSDATA
 18146                                  ;   Outputs:
 18147                                  ;		EXTERR_LOCUS = errLOC_Disk
 18148                                  ;		CurBuf points to buffer
 18149                                  ;		Carry Clear -> operation OK
 18150                                  ;		    ES:DI point to entry
 18151                                  ;		    ES:BX point to buffer
 18152                                  ;		    DS:SI point to SFT
 18153                                  ;		Carry SET   -> operation failed
 18154                                  ;		    registers trashified
 18155                                  ;   Registers modified: ALL
 18156                                  ;----------------------------------------------------------------------------
 18157                                  
 18158                                  	; 23/07/2019 - Retro DOS v3.2
 18159                                  DirFromSFT:
 18160                                  	;mov	byte [EXTERR_LOCUS],2
 18161 00003C38 C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18162 00003C3D 06                      	push	es
 18163 00003C3E 57                      	push	di
 18164                                  	; MSDOS 3.3
 18165                                  	;;mov	dx,[es:di+1Dh]
 18166                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 18167                                  	; MSDOS 6.0
 18168                                  	;mov	dx,[es:[di+1Dh]
 18169 00003C3F 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 18170 00003C43 8916[B005]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 18171                                  	;mov	dx,[es:di+1Bh]
 18172 00003C47 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 18173                                  	; 19/05/2019
 18174 00003C4B FF36[B005]              	PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 18175                                  	; MSDOS 3.3 & MSDOS 6.0
 18176 00003C4F 52                      	PUSH	DX
 18177 00003C50 E86E22                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 18178                                  					; [THISDPB] set
 18179 00003C53 5A                      	POP	DX
 18180 00003C54 8F06[B005]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 18181 00003C58 7225                    	JC	short PopDone
 18182 00003C5A 30C0                    	XOR	AL,AL			; Pre read
 18183                                  	;mov	byte [ALLOWED],18h
 18184 00003C5C C606[1503]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 18185 00003C61 E83E25                  	call	GETBUFFR
 18186 00003C64 7219                    	JC	short PopDone
 18187 00003C66 5E                      	pop	si
 18188 00003C67 1F                      	pop	ds			; Get back SFT pointer
 18189                                  
 18190                                  ;hkn; SS override
 18191 00003C68 36C43E[9E05]            	LES	DI,[SS:CURBUF]
 18192                                  	;or	byte [es:di+5],4
 18193 00003C6D 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 18194 00003C72 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 18195                                  	;;lea	di,[di+16] ; MSDOS 3.3
 18196                                  	;lea	di,[di+20] ; MSDOS 6.0
 18197 00003C74 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 18198                                  	;mov	al,32
 18199 00003C77 B020                    	MOV	AL,dir_entry.size
 18200                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 18201 00003C79 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 18202 00003C7C 01C7                    	ADD	DI,AX			; Point at the entry
 18203 00003C7E C3                      	retn				; carry is clear
 18204                                  PopDone:
 18205 00003C7F 5F                      	pop	di
 18206 00003C80 07                      	pop	es
 18207                                  PopDone_retn:
 18208 00003C81 C3                      	retn
 18209                                  
 18210                                  ;----------------------------------------------------------------------------
 18211                                  ;
 18212                                  ;**	DOS_Commit - UPdate Directory Entries
 18213                                  ;
 18214                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 18215                                  ;		(DS) = DOSGROUP
 18216                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 18217                                  ;	USES	all but DS
 18218                                  ;
 18219                                  ;----------------------------------------------------------------------------
 18220                                  ;
 18221                                  
 18222                                  DOS_COMMIT:
 18223                                  	;hkn; called from srvcall. DS already set up.
 18224 00003C82 C43E[5A05]              	LES	DI,[THISSFT]
 18225                                  	;mov	bx,[es:di+5]
 18226 00003C86 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 18227                                  	;test	bx,0C0h
 18228 00003C8A F7C3C000                	TEST	BX,devid_file_clean+devid_device ;Clears carry
 18229 00003C8E 75F1                    	jnz	short PopDone_retn
 18230                                  	;test	bx,8000h
 18231 00003C90 F7C30080                	TEST	BX,sf_isnet
 18232 00003C94 7406                    	JZ	short LOCAL_COMMIT
 18233                                  
 18234                                  ;IF NOT Installed
 18235                                  ;	transfer NET_COMMIT
 18236                                  ;ELSE
 18237                                  	;mov	ax,1107h
 18238 00003C96 B80711                  	MOV	AX,(MultNET<<8)|7
 18239 00003C99 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 18240                                  			; ES:DI -> SFT
 18241                                  			; SFT DPB field -> DPB of drive containing file
 18242                                  			; Return: CF set on error, AX = DOS error code
 18243                                  			; CF clear if successful
 18244 00003C9B C3                      	retn
 18245                                  ;ENDIF
 18246                                  
 18247                                  ;
 18248                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 18249                                  ; There are three ways we can do this.	One is to enter a critical section to
 18250                                  ; protect a potential free. The second is to increment the ref count to mask
 18251                                  ; the close decrementing.
 18252                                  ;
 18253                                  ; The proper way is to let the caller's of close decide if a decrement should
 18254                                  ; be done.  We do this by providing another entry into close after the
 18255                                  ; decrement and after the share information release.
 18256                                  ;
 18257                                  LOCAL_COMMIT:
 18258 00003C9C E870E4                  	call	EcritDisk
 18259                                  	; MSDOS 6.0
 18260                                  	;call	EcritDisk	;PTM.
 18261 00003C9F E80700                  	call	SetSFTTimes
 18262 00003CA2 B8FFFF                  	MOV	AX,-1
 18263 00003CA5 E8B1FE                  	call	CloseEntry
 18264                                  	; MSDOS 6.0
 18265                                  	;PUSHF			;PTM.				;AN000;
 18266                                  	;call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 18267                                  	;POPF			;PTM.				;AN000;
 18268                                  	;call	LcritDisk	;PTM.				;AN000;
 18269                                  localcommit_retn:
 18270 00003CA8 C3                      	retn
 18271                                  
 18272                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 18273                                  ;----------------------------------------------------------------------------
 18274                                  ;
 18275                                  ; Procedure Name : SetSFTTimes
 18276                                  ;
 18277                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 18278                                  ;   Reflect these times in other SFT's for the same file.
 18279                                  ;
 18280                                  ;   Inputs:	ES:DI point to SFT
 18281                                  ;		BX = sf_flags set apprpriately
 18282                                  ;   Outputs:	Set sft times to current time iff File & dirty & !nodate
 18283                                  ;   Registers modified: All except ES:DI, BX, AX
 18284                                  ;
 18285                                  ;----------------------------------------------------------------------------
 18286                                  
 18287                                  SetSFTTimes:
 18288                                  ;	File clean or device does not get stamped nor disk looked at.
 18289                                  	
 18290                                  	;test	bx,0C0h
 18291 00003CA9 F7C3C000                	TEST	BX,devid_file_clean+devid_device
 18292                                  	;retnz				; clean or device => no timestamp
 18293 00003CAD 75F9                    	jnz	short localcommit_retn
 18294                                  
 18295                                  ;	file and dirty. See if date is good
 18296                                  
 18297                                  	;test	bx,4000h
 18298 00003CAF F7C30040                	TEST	BX,sf_close_nodate
 18299                                  	;retnz				; nodate => no timestamp
 18300 00003CB3 75F3                    	jnz	short localcommit_retn
 18301                                  
 18302 00003CB5 50                      	push	ax
 18303 00003CB6 53                      	push	bx
 18304 00003CB7 E89ADC                  	call	DATE16			; Date/Time to AX/DX
 18305                                  	;mov	[es:di+0Fh],ax
 18306 00003CBA 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 18307                                  	;mov	[es:di+0Dh],dx
 18308 00003CBE 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 18309 00003CC2 31C0                    	XOR	AX,AX
 18310                                  ;if installed
 18311                                  	;call	JShare + 14 * 4
 18312 00003CC4 FF1E[9400]              	call	far [JShare+(14*4)]	; 14 = ShSU
 18313                                  ;else
 18314                                  ;	call	ShSU
 18315                                  ;endif
 18316 00003CC8 5B                      	pop	bx
 18317 00003CC9 58                      	pop	ax
 18318 00003CCA C3                      	retn
 18319                                  
 18320                                  ;============================================================================
 18321                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 18322                                  ;============================================================================
 18323                                  ; 23/07/2018 - Retro DOS v3.0
 18324                                  
 18325                                  ;TITLE DIRCALL - Directory manipulation internal calls
 18326                                  ;NAME  DIRCALL
 18327                                  
 18328                                  ;**	Low level directory manipulation routines for making removing and
 18329                                  ;	  verifying local or NET directories
 18330                                  ;
 18331                                  ;	DOS_MKDIR
 18332                                  ;	DOS_CHDIR
 18333                                  ;	DOS_RMDIR
 18334                                  ;
 18335                                  ;	Modification history:
 18336                                  ;
 18337                                  ;		Created: ARR 30 March 1983
 18338                                  
 18339                                  ;BREAK <DOS_MkDir - Make a directory entry>
 18340                                  ;---------------------------------------------------------------------------
 18341                                  ;
 18342                                  ; Procedure Name : DOS_MkDir
 18343                                  ;
 18344                                  ; Inputs:
 18345                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18346                                  ;		terminated)
 18347                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18348                                  ;		( = -1 if current dir not involved, else
 18349                                  ;		 Points to first char after last "/" of current dir part)
 18350                                  ;	[THISCDS] Points to CDS being used
 18351                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18352                                  ; Function:
 18353                                  ;	Make a new directory
 18354                                  ; Returns:
 18355                                  ;	Carry Clear
 18356                                  ;		No error
 18357                                  ;	Carry Set
 18358                                  ;	    AX is error code
 18359                                  ;		error_path_not_found
 18360                                  ;			Bad path (not in curr dir part if present)
 18361                                  ;		error_bad_curr_dir
 18362                                  ;			Bad path in current directory part of path
 18363                                  ;		error_access_denied
 18364                                  ;			Already exists, device name
 18365                                  ; DS preserved, Others destroyed
 18366                                  ;---------------------------------------------------------------------------
 18367                                  
 18368                                  ;hkn; called from path.asm. DS already set up.
 18369                                  
 18370                                  DOS_MKDIR:
 18371 00003CCB E8A3E3                  	call	TestNet
 18372 00003CCE 7314                    	JNC	short LOCAL_MKDIR
 18373                                  
 18374                                  ;IF NOT Installed
 18375                                  ;	transfer NET_MKDIR
 18376                                  ;ELSE
 18377                                  	;mov	ax,1103h
 18378 00003CD0 B80311                  	MOV	AX,(MultNET<<8)|3
 18379 00003CD3 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 18380                                  			; SS = DOS CS
 18381                                  			; SDA first filename pointer -> fully-qualified directory name
 18382                                  			; SDA CDS pointer -> current directory
 18383                                  			; Return: CF set on error, AX = DOS error code
 18384                                  			; CF clear if successful
 18385 00003CD5 C3                      	retn
 18386                                  ;ENDIF
 18387                                  
 18388                                  NODEACCERRJ:
 18389                                  	;mov	ax,5
 18390 00003CD6 B80500                  	MOV	AX,error_access_denied
 18391                                  _BadRet:
 18392 00003CD9 F9                      	STC
 18393 00003CDA E83AE4                  	call	LcritDisk
 18394 00003CDD C3                      	retn
 18395                                  
 18396                                  PATHNFJ:
 18397 00003CDE E836E4                  	call	LcritDisk
 18398 00003CE1 E9D2FA                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 18399                                  
 18400                                  LOCAL_MKDIR:
 18401 00003CE4 E828E4                  	call	EcritDisk
 18402                                  ;
 18403                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 18404                                  ;
 18405 00003CE7 8C16[5C05]              	MOV	[THISSFT+2],SS
 18406                                  
 18407                                  ;hkn; DOSDATA
 18408 00003CEB C706[5A05][0204]        	MOV	WORD [THISSFT],RENBUF
 18409                                  
 18410                                  ;  NOTE: Need WORD PTR because MASM takes type of
 18411                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 18412                                  
 18413                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 18414 00003CF1 C706[3504]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 18415                                  				; make sure SHARER won't complain.
 18416                                  	;mov	al,10h
 18417 00003CF7 B010                    	MOV	AL,attr_directory
 18418 00003CF9 E8BF15                  	call	MakeNode
 18419 00003CFC 72E0                    	JC	short PATHNFJ
 18420 00003CFE 83F803                  	CMP	AX,3
 18421 00003D01 74D3                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 18422 00003D03 C42E[4605]              	LES	BP,[THISDPB]	; Makenode zaps this
 18423 00003D07 C53E[9E05]              	LDS	DI,[CURBUF]
 18424 00003D0B 29FE                    	SUB	SI,DI
 18425 00003D0D 56                      	PUSH	SI		; Pointer to dir_first
 18426                                  	; 22/07/2019 - Retro DOS v3.2
 18427                                  	; MSDOS 6.0
 18428                                  	;push	word [di+8]
 18429 00003D0E FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 18430                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18431                                  	;push	word [di+6]
 18432 00003D11 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 18433 00003D14 16                      	push	ss
 18434 00003D15 1F                      	pop	ds
 18435 00003D16 FF36[7E05]              	PUSH	word [DIRSTART]	; Parent for .. entry
 18436 00003D1A 31C0                    	XOR	AX,AX
 18437 00003D1C A3[7E05]                	MOV	[DIRSTART],AX	; Null directory
 18438 00003D1F E8D614                  	call	NEWDIR
 18439 00003D22 7264                    	JC	short NODEEXISTSPOPDEL ; No room
 18440 00003D24 E8710C                  	call	GETENT		; First entry
 18441 00003D27 725F                    	JC	short NODEEXISTSPOPDEL ; Screw up
 18442 00003D29 C43E[9E05]              	LES	DI,[CURBUF]
 18443                                  
 18444                                  	; MSDOS 6.0
 18445                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 18446                                  	;			 ;LB. if already dirty		    ;AN000;
 18447                                  	;JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 18448                                  	;call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 18449                                  	
 18450                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18451                                  	;or	byte [es:di+5],40h
 18452 00003D2D 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 18453                                  ;yesdirty5:
 18454                                  	;add	di,16
 18455 00003D32 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 18456 00003D35 B82E20                  	MOV	AX,202EH	; ". "
 18457 00003D38 8B16[7E05]              	MOV	DX,[DIRSTART]	; Point at itself
 18458 00003D3C E85815                  	call	SETDOTENT
 18459 00003D3F B82E2E                  	MOV	AX,2E2EH	; ".."
 18460 00003D42 5A                      	POP	DX		; Parent
 18461 00003D43 E85115                  	call	SETDOTENT
 18462 00003D46 C42E[4605]              	LES	BP,[THISDPB]
 18463                                  	;mov	byte [ALLOWED],18h
 18464 00003D4A C606[1503]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 18465 00003D4F 5A                      	POP	DX		; Entry sector
 18466                                  	; 23/07/2019
 18467                                  	; MSDOS 6.0
 18468 00003D50 8F06[B005]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 18469                                  
 18470 00003D54 30C0                    	XOR	AL,AL		; Pre read
 18471 00003D56 E84924                  	call	GETBUFFR
 18472 00003D59 725A                    	JC	short NODEEXISTSP
 18473 00003D5B 8B16[7E05]              	MOV	DX,[DIRSTART]
 18474 00003D5F C53E[9E05]              	LDS	DI,[CURBUF]
 18475                                  	;or	byte [di+5],4
 18476 00003D63 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 18477 00003D67 5E                      	POP	SI		; dir_first pointer
 18478 00003D68 01FE                    	ADD	SI,DI
 18479 00003D6A 8914                    	MOV	[SI],DX
 18480 00003D6C 31D2                    	XOR	DX,DX
 18481 00003D6E 895402                  	MOV	[SI+2],DX	; Zero size
 18482 00003D71 895404                  	MOV	[SI+4],DX
 18483                                  DIRUP:
 18484                                  	; MSDOS 6.0
 18485                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 18486                                  	;			 ;LB. if already dirty 		   ;AN000;
 18487                                  	;JNZ	short yesdirty2	 ;LB.  don't increment dirty count ;AN000;
 18488                                  	;call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 18489                                  	
 18490                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18491                                  	;or	byte [di+5],40h
 18492 00003D74 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 18493                                  ;yesdirty2:
 18494 00003D78 16                      	push	ss
 18495 00003D79 1F                      	pop	ds
 18496 00003D7A 268A4600                	mov	al,[es:bp]
 18497                                  	; 18/05/2019
 18498                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 18499 00003D7E E8EF24                  	call	FLUSHBUF
 18500                                  	;mov	ax,5
 18501 00003D81 B80500                  	MOV	AX,error_access_denied
 18502 00003D84 E890E3                  	call	LcritDisk
 18503 00003D87 C3                      	retn
 18504                                  
 18505                                  NODEEXISTSPOPDEL:
 18506 00003D88 5A                      	POP	DX		; Parent
 18507 00003D89 5A                      	POP	DX		; Entry sector
 18508                                  	; 23/07/2019
 18509                                  	; MSDOS 6.0 
 18510 00003D8A 8F06[B005]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 18511 00003D8E C42E[4605]              	LES	BP,[THISDPB]
 18512                                  	;mov	byte [ALLOWED],18h
 18513 00003D92 C606[1503]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 18514 00003D97 30C0                    	XOR	AL,AL		; Pre read
 18515 00003D99 E80624                  	call	GETBUFFR
 18516 00003D9C 7217                    	JC	short NODEEXISTSP
 18517 00003D9E C53E[9E05]              	LDS	DI,[CURBUF]
 18518                                  	;or	byte [di+5],4
 18519 00003DA2 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 18520 00003DA6 5E                      	POP	SI		; dir_first pointer
 18521 00003DA7 01FE                    	ADD	SI,DI
 18522                                  	;sub	si,1Ah ; 26
 18523 00003DA9 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 18524 00003DAC C604E5                  	MOV	BYTE [SI],0E5h	; Free the entry
 18525 00003DAF E8C2FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 18526                                  NODEEXISTS:
 18527 00003DB2 E921FF                  	JMP	NODEACCERRJ ; 10/08/2018
 18528                                  
 18529                                  NODEEXISTSP:
 18530 00003DB5 5E                      	POP	SI		; Clean stack
 18531 00003DB6 EBFA                    	JMP	short NODEEXISTS
 18532                                  
 18533                                  ;BREAK <DOS_ChDir -- Verify a directory>
 18534                                  ;----------------------------------------------------------------------------
 18535                                  ;
 18536                                  ; Procedure Name : DOS_ChDir
 18537                                  ;
 18538                                  ; Inputs:
 18539                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18540                                  ;		terminated)
 18541                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18542                                  ;		( = -1 if current dir not involved, else
 18543                                  ;		 Points to first char after last "/" of current dir part)
 18544                                  ;	[THISCDS] Points to CDS being used May not be NUL
 18545                                  ; Function:
 18546                                  ;	Validate the path for potential new current directory
 18547                                  ; Returns:
 18548                                  ;	NOTE:
 18549                                  ;	    [SATTRIB] is modified by this call
 18550                                  ;	Carry Clear
 18551                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 18552                                  ;		Caller must NOT set ID fields on a NET CDS.
 18553                                  ;	Carry Set
 18554                                  ;	    AX is error code
 18555                                  ;		error_path_not_found
 18556                                  ;			Bad path
 18557                                  ;		error_access_denied
 18558                                  ;			device or file name
 18559                                  ; DS preserved, Others destroyed
 18560                                  ;----------------------------------------------------------------------------
 18561                                  
 18562                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 18563                                  
 18564                                  DOS_CHDIR:
 18565 00003DB8 E8B6E2                  	call	TestNet
 18566 00003DBB 7306                    	JNC	short LOCAL_CHDIR
 18567                                  
 18568                                  ;IF NOT Installed
 18569                                  ;	transfer NET_CHDIR
 18570                                  ;ELSE
 18571                                  	;mov	ax,1105h
 18572 00003DBD B80511                  	MOV	AX,(MultNET<<8)|5
 18573 00003DC0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 18574                                  			; SS = DOS CS
 18575                                  			; SDA first filename pointer -> fully-qualified directory name
 18576                                  			; SDA CDS pointer -> current directory
 18577                                  			; Return: CF set on error, AX = DOS error code
 18578                                  			; CF clear if successful
 18579 00003DC2 C3                      	retn
 18580                                  ;ENDIF
 18581                                  
 18582                                  LOCAL_CHDIR:
 18583 00003DC3 E849E3                  	call	EcritDisk
 18584                                  	; MSDOS 6.0
 18585                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 18586                                  	;JZ	short nojoin			   ;PTM.
 18587                                  	;MOV	word [ES:DI+curdir.ID],0FFFFH	   ;PTM.
 18588                                  ;nojoin:
 18589                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18590 00003DC6 C606[1603]00            	MOV	byte [NoSetDir],0 ; FALSE
 18591                                  	;mov	byte [SATTRIB],16h
 18592 00003DCB C606[2A05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 18593                                  				; Dir calls can find these
 18594                                  ; DOS 3.3  6/24/86 FastOpen
 18595 00003DD0 800E[A40F]01            	OR	byte [FastOpenFlg],FastOpen_Set	   ; set fastopen flag
 18596 00003DD5 E84F0C                  	call	GETPATH
 18597                                  	;PUSHF							;AN000;
 18598                                  	;AND	byte [FastOpenFlg],Fast_yes	   ; clear it all ;AC000;
 18599                                  	;POPF							;AN000;
 18600                                  ; DOS 3.3  6/24/86 FastOpen
 18601                                  
 18602                                  	; MSDOS 3.3
 18603 00003DD8 C606[A40F]00            	mov	byte [FastOpenFlg],0
 18604                                  	;mov	ax,3
 18605 00003DDD B80300                  	MOV	AX,error_path_not_found
 18606 00003DE0 7207                    	JC	short ChDirDone
 18607 00003DE2 753B                    	JNZ	short NOTDIRPATH	; Path not a DIR
 18608 00003DE4 8B0E[7E05]              	MOV	CX,[DIRSTART]		; Get cluster number
 18609 00003DE8 F8                      	CLC
 18610                                  ChDirDone:
 18611 00003DE9 E82BE3                  	call	LcritDisk
 18612 00003DEC C3                      	retn
 18613                                  
 18614                                  ;BREAK <DOS_RmDir -- Remove a directory>
 18615                                  ;----------------------------------------------------------------------------
 18616                                  ;
 18617                                  ; Procedure Name : DOS_RmDir
 18618                                  ;
 18619                                  ; Inputs:
 18620                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18621                                  ;		terminated)
 18622                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18623                                  ;		( = -1 if current dir not involved, else
 18624                                  ;		 Points to first char after last "/" of current dir part)
 18625                                  ;	[THISCDS] Points to CDS being used
 18626                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18627                                  ; Function:
 18628                                  ;	Remove a directory
 18629                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 18630                                  ; Returns:
 18631                                  ;	NOTE:
 18632                                  ;	    [SATTRIB] is modified by this call
 18633                                  ;	Carry Clear
 18634                                  ;		No error
 18635                                  ;	Carry Set
 18636                                  ;	    AX is error code
 18637                                  ;		error_path_not_found
 18638                                  ;			Bad path (not in curr dir part if present)
 18639                                  ;		error_bad_curr_dir
 18640                                  ;			Bad path in current directory part of path
 18641                                  ;		error_access_denied
 18642                                  ;			device or file name, root directory
 18643                                  ;			Bad directory ('.' '..' messed up)
 18644                                  ; DS preserved, Others destroyed
 18645                                  ;----------------------------------------------------------------------------
 18646                                  
 18647                                  ;hkn; called from path.asm. DS already set up.
 18648                                  
 18649                                  DOS_RMDIR:
 18650 00003DED E881E2                  	call	TestNet
 18651 00003DF0 7306                    	JNC	short LOCAL_RMDIR
 18652                                  
 18653                                  ;IF NOT Installed
 18654                                  ;	transfer NET_RMDIR
 18655                                  ;ELSE
 18656                                  	;mov	ax,1101h
 18657 00003DF2 B80111                  	MOV	AX,(MultNET<<8)|1
 18658 00003DF5 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 18659                                  			; SS = DOS CS
 18660                                  			; SDA first filename pointer -> fully-qualified directory name
 18661                                  			; SDA CDS pointer -> current directory
 18662                                  			; Return: CF set on error, AX = DOS error code
 18663                                  			; CF clear if successful
 18664 00003DF7 C3                      	retn
 18665                                  ;ENDIF
 18666                                  
 18667                                  LOCAL_RMDIR:
 18668 00003DF8 E814E3                  	call	EcritDisk
 18669 00003DFB C606[1603]00            	MOV	byte [NoSetDir],0
 18670                                  	;mov	byte [SATTRIB],16h
 18671 00003E00 C606[2A05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 18672                                  					; Dir calls can find these
 18673 00003E05 E81F0C                  	call	GETPATH
 18674 00003E08 720C                    	JC	short NOPATH		; Path not found
 18675 00003E0A 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 18676 00003E0C 8B3E[7E05]              	MOV	DI,[DIRSTART]
 18677 00003E10 09FF                    	OR	DI,DI			; Root ?
 18678 00003E12 750E                    	JNZ	short rmdir_get_buf	; No
 18679 00003E14 EB09                    	JMP	SHORT NOTDIRPATH
 18680                                  
 18681                                  NOPATH:
 18682                                  	;mov	ax,3
 18683 00003E16 B80300                  	MOV	AX,error_path_not_found
 18684 00003E19 E9BDFE                  	JMP	_BadRet
 18685                                  
 18686                                  NOTDIRPATHPOP:
 18687                                  	; 23/07/2019 - Retro DOS v3.2
 18688                                  	; MSDOS 6.0
 18689 00003E1C 58                      	POP	AX			  ;F.C. >32mb
 18690 00003E1D 58                      	POP	AX
 18691                                  NOTDIRPATHPOP2:
 18692 00003E1E 58                      	POP	AX
 18693                                  NOTDIRPATH:
 18694 00003E1F E9B4FE                  	JMP	NODEACCERRJ
 18695                                  
 18696                                  rmdir_get_buf:
 18697 00003E22 C53E[9E05]              	LDS	DI,[CURBUF]
 18698 00003E26 29FB                    	SUB	BX,DI		; Compute true offset
 18699 00003E28 53                      	PUSH	BX		; Save entry pointer
 18700                                  
 18701                                  	; 22/07/2019 - Retro DOS v3.2
 18702                                  	
 18703                                  	; MSDOS 6.0
 18704                                  	;push	word [di+8]
 18705 00003E29 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 18706                                  	
 18707                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18708                                  	;push	word [di+6]
 18709 00003E2C FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 18710                                  
 18711                                  ;hkn; SS is DOSDATA
 18712                                  	;context DS
 18713 00003E2F 16                      	push	ss
 18714 00003E30 1F                      	pop	ds
 18715                                  	;context ES
 18716 00003E31 16                      	push	ss
 18717 00003E32 07                      	pop	es
 18718                                  
 18719                                  ;hkn; NAME1 is in DOSDATA
 18720 00003E33 BF[0805]                	MOV	DI,NAME1
 18721 00003E36 B03F                    	MOV	AL,'?'
 18722 00003E38 B90B00                  	MOV	CX,11
 18723 00003E3B F3AA                    	REP	STOSB
 18724 00003E3D 30C0                    	XOR	AL,AL
 18725 00003E3F AA                      	STOSB				; Nul terminate it
 18726 00003E40 E8750E                  	call	STARTSRCH		; Set search
 18727 00003E43 E84F0B                  	call	GETENTRY		; Get start of directory
 18728 00003E46 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 18729 00003E48 8E1E[A005]              	MOV	DS,[CURBUF+2]
 18730 00003E4C 89DE                    	MOV	SI,BX
 18731 00003E4E AD                      	LODSW
 18732                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 18733 00003E4F 3D2E20                  	cmp	ax,202Eh ; ". "
 18734 00003E52 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 18735                                  	;add     si,30
 18736 00003E54 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 18737 00003E57 AD                      	LODSW
 18738                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 18739                                  	;cmp	ax, '..'
 18740 00003E58 3D2E2E                  	cmp	ax,2E2Eh
 18741 00003E5B 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 18742                                  
 18743                                  ;hkn; SS is DOSDATA
 18744                                  	;context DS
 18745 00003E5D 16                      	push	ss
 18746 00003E5E 1F                      	pop	ds
 18747 00003E5F C706[1203]0200          	MOV	word [LASTENT],2	; Skip . and ..
 18748 00003E65 E82D0B                  	call	GETENTRY		; Get next entry
 18749 00003E68 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 18750                                  	;mov	byte [ATTRIB],16h
 18751 00003E6A C606[2805]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 18752 00003E6F E8220A                  	call	SRCH			; Do a search
 18753 00003E72 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 18754 00003E74 803E[1403]00            	CMP	byte [FAILERR],0
 18755 00003E79 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 18756 00003E7B C42E[4605]              	LES	BP,[THISDPB]
 18757 00003E7F 8B1E[7E05]              	MOV	BX,[DIRSTART]
 18758 00003E83 E84819                  	call	RELEASE 		; Release data in sub dir
 18759 00003E86 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 18760 00003E88 5A                      	POP	DX			; Sector # of entry
 18761                                  	; 23/07/2019
 18762 00003E89 8F06[B005]              	POP	word [HIGH_SECTOR]	; F.C. >32mb
 18763                                  	;mov	byte [ALLOWED],18h
 18764 00003E8D C606[1503]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 18765 00003E92 30C0                    	XOR	AL,AL			; Pre read
 18766 00003E94 E80B23                  	call	GETBUFFR		; Get sector back
 18767 00003E97 7285                    	JC	short NOTDIRPATHPOP2	; Screw up
 18768 00003E99 C53E[9E05]              	LDS	DI,[CURBUF]
 18769                                  	;or	byte [di+5],4
 18770 00003E9D 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 18771 00003EA1 5B                      	POP	BX			; Pointer to start of entry
 18772 00003EA2 01FB                    	ADD	BX,DI			; Corrected
 18773 00003EA4 C607E5                  	MOV	BYTE [BX],0E5h		; Free the entry
 18774                                  
 18775                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 18776 00003EA7 1E                      	PUSH	DS
 18777                                  
 18778                                  ;hkn; SS is DOSDATA
 18779                                  	;context DS
 18780 00003EA8 16                      	push	ss
 18781 00003EA9 1F                      	pop	ds
 18782                                  
 18783                                  	; 23/07/2019 - Retro DOS v3.2
 18784                                  
 18785                                  	; MSDOS 6.0
 18786 00003EAA E8C3F5                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 18787                                  
 18788                                  ;	; MSDOS 3.3
 18789                                  ;_FastOpen_Delete:
 18790                                  ;	push	ax
 18791                                  ;	mov	si,[WFP_START]
 18792                                  ;	mov	bx,FastTable
 18793                                  ;	;mov	al,3  ; FONC_delete
 18794                                  ;	mov	al,FONC_delete
 18795                                  ;	call	far [BX+2]  ; FastTable+2
 18796                                  ;	pop	ax
 18797                                  
 18798 00003EAD 1F                      	POP	DS
 18799                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 18800                                  
 18801 00003EAE E9C3FE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 18802                                  
 18803                                  ;============================================================================
 18804                                  ; DISK.ASM, MSDOS 6.0, 1991
 18805                                  ;============================================================================
 18806                                  ; 23/07/2018 - Retro DOS v3.0 
 18807                                  
 18808                                  ;	TITLE	DISK - Disk utility routines
 18809                                  ;	NAME	Disk
 18810                                  
 18811                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 18812                                  ;
 18813                                  ;	SWAPCON
 18814                                  ;	SWAPBACK
 18815                                  ;	DOS_READ
 18816                                  ;	DOS_WRITE
 18817                                  ;	get_io_sft
 18818                                  ;	DirRead
 18819                                  ;	FIRSTCLUSTER
 18820                                  ;	SET_BUF_AS_DIR
 18821                                  ;	FATSecRd
 18822                                  ;	DREAD
 18823                                  ;	CHECK_WRITE_LOCK
 18824                                  ;	CHECK_READ_LOCK
 18825                                  ;
 18826                                  ;	Revision history:
 18827                                  ;
 18828                                  ;		A000   version 4.00  Jan. 1988
 18829                                  ;
 18830                                  ;----------------------------------------------------------------------------
 18831                                  ;
 18832                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 18833                                  ;		error happens, DOS retries the entire block assuming that
 18834                                  ;		zero characters were transferred. Modified the code to take
 18835                                  ;		into account the number of characters transfered before
 18836                                  ;		retrying the operation.
 18837                                  ;
 18838                                  ;----------------------------------------------------------------------------
 18839                                  ;
 18840                                  
 18841                                  ;Installed = TRUE
 18842                                  
 18843                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 18844                                  
 18845                                  ; **** Drivers for file input from devices ****
 18846                                  ;----------------------------------------------------------------------------
 18847                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 18848                                  ;   of handles 0 and 1
 18849                                  ;
 18850                                  ;   Inputs:	DS is DOSDATA
 18851                                  ;   Outputs:	CONSWAP is set to false.
 18852                                  ;   Registers modified: none
 18853                                  ;----------------------------------------------------------------------------
 18854                                  
 18855                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 18856                                  
 18857                                  SWAPBACK:
 18858 00003EB1 C606[2103]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 18859 00003EB6 C3                      	retn
 18860                                  
 18861                                  ;----------------------------------------------------------------------------
 18862                                  ;
 18863                                  ; Procedure Name : SWAPCON
 18864                                  ;
 18865                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 18866                                  ;
 18867                                  ;   Inputs:	ThisSFT as the sft of the desired file
 18868                                  ;		DS is DOSDATA
 18869                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 18870                                  ;   Registers modified: none
 18871                                  ;--------------------------------------------------------------------------
 18872                                  
 18873                                  SWAPCON:
 18874                                  	; MSDOS 3.3
 18875                                  	;push	es
 18876                                  	;push	di
 18877                                  	;mov	byte [CONSWAP],1
 18878                                  	;les	di,[THISSFT]
 18879                                  	;mov	word [CONSFT],di
 18880                                  	;mov	word [CONSFT+2],es
 18881                                  	;pop	di
 18882                                  	;pop	es
 18883                                  	;retn
 18884                                  
 18885                                  	; MSDOS 6.0
 18886 00003EB7 C606[2103]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 18887 00003EBC 50                      	push	ax
 18888 00003EBD A1[5A05]                	mov	ax,[THISSFT]
 18889 00003EC0 A3[A205]                	mov	[CONSFT],ax
 18890 00003EC3 A1[5C05]                	mov	ax,[THISSFT+2]
 18891 00003EC6 A3[A405]                	mov	[CONSFT+2],ax
 18892 00003EC9 58                      	pop	ax
 18893 00003ECA C3                      	retn
 18894                                  
 18895                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 18896                                  ;-----------------------------------------------------------------------------
 18897                                  ;
 18898                                  ; Inputs:
 18899                                  ;	ThisSFT set to the SFT for the file being used
 18900                                  ;	[DMAADD] contains transfer address
 18901                                  ;	CX = No. of bytes to read
 18902                                  ;	DS = DOSDATA
 18903                                  ; Function:
 18904                                  ;	Perform read operation
 18905                                  ; Outputs:
 18906                                  ;    Carry clear
 18907                                  ;	SFT Position and cluster pointers updated
 18908                                  ;	CX = No. of bytes read
 18909                                  ;	ES:DI point to SFT
 18910                                  ;    Carry set
 18911                                  ;	AX is error code
 18912                                  ;	CX = 0
 18913                                  ;	ES:DI point to SFT
 18914                                  ; DS preserved, all other registers destroyed
 18915                                  ;
 18916                                  ;-----------------------------------------------------------------------------
 18917                                  
 18918                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 18919                                  
 18920                                  DOS_READ:
 18921 00003ECB C43E[5A05]              	LES	DI,[THISSFT]
 18922                                  
 18923                                  ; Verify that the sft has been opened in a mode that allows reading.
 18924                                  
 18925                                  	;mov	al,[es:di+2]
 18926 00003ECF 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 18927                                  	;and	al,0Fh
 18928 00003ED3 240F                    	AND	AL,access_mask
 18929                                  	;cmp	al,1
 18930 00003ED5 3C01                    	CMP	AL,open_for_write
 18931 00003ED7 7503                    	JNE	short READ_NO_MODE		;Is read or both
 18932 00003ED9 E96805                  	jmp	SET_ACC_ERR
 18933                                  
 18934                                  READ_NO_MODE:
 18935 00003EDC E83F04                  	call	SETUP
 18936 00003EDF E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 18937 00003EE1 E8A2E1                  	call	IsSFTNet
 18938 00003EE4 7408                    	JZ	short LOCAL_READ
 18939                                  
 18940                                  ;IF NOT Installed
 18941                                  ;	transfer NET_READ
 18942                                  ;ELSE
 18943                                  	;mov	ax,1108h
 18944 00003EE6 B80811                  	MOV	AX,(MultNET<<8)|8
 18945 00003EE9 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 18946                                  			; ES:DI -> SFT
 18947                                  			; SFT DPB field -> DPB of drive containing file
 18948                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 18949                                  			; Return: CF set on error, CX = bytes read
 18950 00003EEB C3                      	retn
 18951                                  ;ENDIF
 18952                                  
 18953                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 18954                                  ; except return immediately.
 18955                                  
 18956                                  NoIORet:
 18957 00003EEC F8                      	CLC
 18958 00003EED C3                      	retn
 18959                                  
 18960                                  LOCAL_READ:
 18961                                  	; 31/07/2019
 18962                                  	;test	word [es:di+5],80h
 18963                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 18964 00003EEE 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 18965 00003EF3 750F                    	JNZ	short READDEV
 18966                                  
 18967                                  	;mov	byte [EXTERR_LOCUS],2
 18968 00003EF5 C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18969 00003EFA E812E2                  	call	EcritDisk
 18970 00003EFD E80005                  	call	DISKREAD
 18971                                  
 18972                                  critexit:
 18973 00003F00 E814E2                  	call	LcritDisk
 18974 00003F03 C3                      	retn
 18975                                  
 18976                                  ; We are reading from a device. Examine the status of the device to see if we
 18977                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 18978                                  ; null device, we can safely indicate no transfer.
 18979                                  
 18980                                  READDEV:
 18981                                  	;mov	byte [EXTERR_LOCUS],4
 18982 00003F04 C606[EF02]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 18983                                  	;mov	bl,[es:di+5]
 18984 00003F09 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 18985 00003F0D C43E[F802]              	LES	DI,[DMAADD]
 18986                                  	;test	bl,40h
 18987 00003F11 F6C340                  	test	BL,devid_device_EOF	; End of file?
 18988 00003F14 7407                    	JZ	short ENDRDDEVJ3
 18989                                  	;test	bl,4
 18990 00003F16 F6C304                  	test	BL,devid_device_null	; NUL device?
 18991 00003F19 7405                    	JZ	short TESTRAW 		; NO
 18992 00003F1B 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 18993                                  ENDRDDEVJ3:
 18994                                  	;JMP	ENDRDDEVJ2
 18995 00003F1D E9C800                  	jmp	ENDRDDEV ; 31/07/2019
 18996                                  
 18997                                  ;
 18998                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 18999                                  ; bizarre std_con_string_input.
 19000                                  ;
 19001                                  TESTRAW:
 19002                                  	;test	bl,20h
 19003 00003F20 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 19004 00003F23 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 19005                                  	;test	bl,1
 19006 00003F25 F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 19007 00003F28 7451                    	JZ	short NOTRDCON
 19008 00003F2A E9F000                  	JMP	READCON
 19009                                  
 19010                                  DVRDRAW:
 19011 00003F2D 06                      	PUSH	ES
 19012 00003F2E 1F                      	POP	DS			; Xaddr to DS:DI
 19013                                  
 19014                                  	; MSDOS 6.0
 19015                                  ;SR;
 19016                                  ;Check for win386 presence -- if present, do polled read of characters
 19017                                  ;
 19018                                  	;test	byte [ss:IsWIN386],1
 19019                                  	;jz	short ReadRawRetry	;not present
 19020                                  	;test	bl,devid_device_con_in	;is it console device
 19021                                  	;jz	short ReadRawRetry	;no, do normal read
 19022                                  	;jmp	do_polling		;yes, do win386 polling loop
 19023                                  
 19024                                  ReadRawRetry:
 19025 00003F2F 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 19026 00003F31 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 19027 00003F33 89C2                    	MOV	DX,AX			; Start at 0
 19028 00003F35 E86E12                  	call	SETREAD
 19029 00003F38 1E                      	PUSH	DS			; Save Seg part of Xaddr
 19030                                  
 19031                                  ;hkn; SS override
 19032 00003F39 36C536[5A05]            	LDS	SI,[SS:THISSFT]
 19033 00003F3E E8F011                  	call	DEVIOCALL
 19034 00003F41 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 19035 00003F43 B486                    	MOV	AH,86H			; Read error
 19036                                  
 19037                                  ;hkn; SS override
 19038 00003F45 368B3E[2703]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 19039                                  	; MSDOS 3.3
 19040                                  	;test	di,8000h
 19041                                  	;jz	short CRDROK
 19042                                  	; MSDOS 6.0
 19043 00003F4A 09FF                    	or	di,di
 19044 00003F4C 7923                    	jns	short CRDROK		; no errors
 19045                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19046 00003F4E E8BD1B                  	call	CHARHARD
 19047 00003F51 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 19048                                  
 19049                                  	; 25/07/2019 - Retro DOS v3.2
 19050                                  	
 19051                                  	; MSDOS 6.0
 19052 00003F53 36033E[3603]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 19053 00003F58 362B0E[3603]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 19054                                  
 19055                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19056 00003F5D 08C0                    	OR	AL,AL
 19057 00003F5F 7410                    	JZ	short CRDROK		; Ignore
 19058 00003F61 3C03                    	CMP	AL,3
 19059 00003F63 7403                    	JZ	short CRDFERR 		; fail.
 19060 00003F65 1F                      	POP	DS			; Recover saved seg part of Xaddr
 19061                                  	; 19/05/2019
 19062 00003F66 EBC7                    	JMP	short ReadRawRetry	; Retry
 19063                                  ;
 19064                                  ; We have encountered a device-driver error. We have informed the user of it
 19065                                  ; and he has said for us to fail the system call.
 19066                                  ;
 19067                                  CRDFERR:
 19068 00003F68 5F                      	POP	DI			; Clean stack
 19069                                  DEVIOFERR:
 19070                                  
 19071                                  ;hkn; SS override
 19072 00003F69 36C43E[5A05]            	LES	DI,[SS:THISSFT]
 19073 00003F6E E9D104                  	jmp	SET_ACC_ERR_DS
 19074                                  CRDROK:
 19075 00003F71 5F                      	POP	DI			; Chuck saved seg of Xaddr
 19076 00003F72 89D7                    	MOV	DI,DX
 19077                                  
 19078                                  ;hkn; SS override
 19079 00003F74 36033E[3603]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 19080 00003F79 EBA2                    	JMP	SHORT ENDRDDEVJ3
 19081                                  
 19082                                  ; We are going to do a cooked read on some character device. There is a
 19083                                  ; problem here, what does the data look like? Is it a terminal device, line
 19084                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 19085                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 19086                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 19087                                  ; included in data). this "simulates" the way con works in cooked mode
 19088                                  ; reading one line at a time. With file data, however, the lines will look
 19089                                  ; like, LF line CR. This is a little weird.
 19090                                  
 19091                                  NOTRDCON:
 19092 00003F7B 8CC0                    	MOV	AX,ES
 19093 00003F7D 8ED8                    	MOV	DS,AX
 19094 00003F7F 89FB                    	MOV	BX,DI
 19095 00003F81 31D2                    	XOR	DX,DX
 19096 00003F83 89D0                    	MOV	AX,DX
 19097 00003F85 51                      	PUSH	CX
 19098 00003F86 B90100                  	MOV	CX,1
 19099 00003F89 E81A12                  	call	SETREAD
 19100 00003F8C 59                      	POP	CX
 19101                                  
 19102                                  ;hkn; SS override
 19103 00003F8D 36C536[5A05]            	LDS	SI,[SS:THISSFT]
 19104                                  	;lds	si,[si+7]
 19105 00003F92 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 19106                                  DVRDLP:
 19107 00003F95 E8A219                  	call	DSKSTATCHK
 19108 00003F98 E89911                  	call	DEVIOCALL2
 19109 00003F9B 57                      	PUSH	DI		; Save "count" done
 19110 00003F9C B486                    	MOV	AH,86H
 19111                                  
 19112                                  ;hkn; SS override
 19113 00003F9E 368B3E[2703]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 19114                                  	
 19115                                  	; MSDOS 3.3
 19116                                  	;test	di,8000h
 19117                                  	;jz	short CRDOK
 19118                                  	; MSDOS 6.0
 19119 00003FA3 09FF                    	or	di,di
 19120 00003FA5 7917                    	jns	short CRDOK
 19121                                  	
 19122 00003FA7 E8641B                  	call	CHARHARD
 19123 00003FAA 5F                      	POP	DI
 19124                                  
 19125                                  ;hkn; SS override
 19126 00003FAB 36C706[3603]0100        	MOV	word [SS:CALLSCNT],1
 19127 00003FB2 3C01                    	CMP	AL,1
 19128 00003FB4 74DF                    	JZ	short DVRDLP		;Retry
 19129 00003FB6 3C03                    	CMP	AL,3
 19130 00003FB8 74AF                    	JZ	short DEVIOFERR		; FAIL
 19131 00003FBA 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 19132 00003FBC EB12                    	JMP	SHORT DVRDIGN
 19133                                  
 19134                                  CRDOK:
 19135 00003FBE 5F                      	POP	DI
 19136                                  
 19137                                  ;hkn; SS override
 19138 00003FBF 36833E[3603]01          	CMP	word [SS:CALLSCNT],1
 19139                                  	;JNZ	short ENDRDDEVJ2
 19140 00003FC5 7521                    	jnz	short ENDRDDEV ; 24/07/2019
 19141 00003FC7 1E                      	PUSH	DS
 19142                                  
 19143                                  ;hkn; SS override
 19144 00003FC8 368E1E[3403]            	MOV	DS,[SS:CALLXAD+2]
 19145 00003FCD 8A05                    	MOV	AL,[DI]			; Get the character we just read
 19146 00003FCF 1F                      	POP	DS
 19147                                  DVRDIGN:
 19148                                  
 19149                                  ;hkn; SS override
 19150 00003FD0 36FF06[3203]            	INC	WORD [SS:CALLXAD]	; Next character
 19151 00003FD5 36C706[2703]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 19152 00003FDC 47                      	INC	DI			; Next character
 19153 00003FDD 3C1A                    	CMP	AL,1AH			; ^Z?
 19154                                  	;JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 19155 00003FDF 7407                    	jz	short ENDRDDEV ; 31/07/2019	
 19156 00003FE1 3C0D                    	CMP	AL,c_CR 		; CR?
 19157 00003FE3 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 19158 00003FE5 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 19159                                  					;  AX=FFFF which is not likely
 19160                                  ENDRDDEVJ2:
 19161 00003FE6 EB00                    	JMP	short ENDRDDEV		;changed short to long for win386
 19162                                  
 19163                                  	;  MSDOS 6.0
 19164                                  ;;SR;
 19165                                  ;;Polling code for raw read on CON when WIN386 is present
 19166                                  ;;
 19167                                  ;;At this point -- ds:di is transfer address
 19168                                  ;;		  cx is count
 19169                                  ;;
 19170                                  ;
 19171                                  ;do_polling:
 19172                                  ;	mov	bx,di			;ds:bx is Xfer address
 19173                                  ;	xor	ax,ax
 19174                                  ;	mov	dx,ax
 19175                                  ;	call	setread			;prepare device packet
 19176                                  ;
 19177                                  ;do_io:
 19178                                  ;;
 19179                                  ;;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 19180                                  ;;
 19181                                  ;	mov	byte ptr es:[bx+2],DEVRDND	;Change command code
 19182                                  ;	push	ds
 19183                                  ;	lds	si,[THISSFT]		;get device header
 19184                                  ;	call	deviocall		;call device driver
 19185                                  ;	pop	ds
 19186                                  ;	
 19187                                  ;	test	es:[bx.REQSTAT],STERR	;check if error
 19188                                  ;	jz	check_busy		;no
 19189                                  ;
 19190                                  ;	push	ds
 19191                                  ;	mov	dx,di
 19192                                  ;	invoke 	charhard		;invoke int 24h handler
 19193                                  ;	mov	di,dx
 19194                                  ;	or	al,al
 19195                                  ;	jz	pop_done_read		;ignore by user, assume read done
 19196                                  ;	cmp	al,3
 19197                                  ;	jz	devrderr		;user asked to fail
 19198                                  ;	pop	ds
 19199                                  ;	jmp	do_io			;user asked to retry
 19200                                  ;
 19201                                  ;check_busy:
 19202                                  ;	test	es:[bx.REQSTAT],0200h	;see if busy bit set
 19203                                  ;	jnz	no_char			;yes, no character available
 19204                                  ;;
 19205                                  ;;Character is available. Read in 1 character at a time until all characters
 19206                                  ;;are read in or no character is available
 19207                                  ;;
 19208                                  ;	mov	byte ptr es:[bx+2],DEVRD	;command code is READ now
 19209                                  ;	mov	word ptr es:[bx+18],1		;change count to 1 character
 19210                                  ;	push	ds
 19211                                  ;	lds	si,[THISSFT]
 19212                                  ;	call	deviocall
 19213                                  ;
 19214                                  ;	mov	dx,di
 19215                                  ;	mov	ah,86h
 19216                                  ;	mov	di,es:[bx.REQSTAT]	;get returned status
 19217                                  ;	test	di,STERR		;was there an error during read?
 19218                                  ;	jz	next_char		;no,read next character
 19219                                  ;
 19220                                  ;	invoke	charhard		;invoke int 24h handler
 19221                                  ;	mov	di,dx			;restore di
 19222                                  ;	or	al,al			;
 19223                                  ;	jz	pop_done_read		;ignore by user,assume read is done
 19224                                  ;	cmp	al,3
 19225                                  ;	jz	devrderr		;user issued a 'fail',indicate error
 19226                                  ;	pop	ds
 19227                                  ;	jmp	do_io			;user issued a retry
 19228                                  ;
 19229                                  ;next_char:
 19230                                  ;	pop	ds
 19231                                  ;	mov	di,dx
 19232                                  ;	dec	cx			;decrement count
 19233                                  ;	jcxz	done_read		;all characters read in
 19234                                  ;	inc	word ptr es:[bx+14]	;update transfer address
 19235                                  ;	jmp	do_io			;read next character in
 19236                                  ;
 19237                                  ;devrderr:
 19238                                  ;	pop	di			;discard segment address
 19239                                  ;	les	di,[THISSFT]
 19240                                  ;	transfer SET_ACC_ERR_DS		;indicate error
 19241                                  ;
 19242                                  ;no_char:
 19243                                  ;;
 19244                                  ;;Since no character is available, we let win386 switch the VM out
 19245                                  ;;
 19246                                  ;	push	ax
 19247                                  ;	mov	ah,84h
 19248                                  ;	int	2ah			;indicate idle to WIN386
 19249                                  ;;
 19250                                  ;;When control returns from WIN386, we continue the raw read
 19251                                  ;;
 19252                                  ;	pop	ax
 19253                                  ;	jmp	do_io
 19254                                  ;
 19255                                  ;pop_done_read:
 19256                                  ;	pop	ds
 19257                                  ;done_read:
 19258                                  ;	add	di,[CALLSCNT]
 19259                                  ;	jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 19260                                  
 19261                                  	; 31/07/2019 - Retro DOS v3.2
 19262                                  	; 04/05/2019 - Retro DOS v4.0
 19263                                  ENDRDDEV:
 19264 00003FE8 16                      	push	ss
 19265 00003FE9 1F                      	pop	ds
 19266 00003FEA EB1F                    	jmp	short endrddev1
 19267                                  
 19268                                  TRANBUF:
 19269 00003FEC AC                      	LODSB
 19270 00003FED AA                      	STOSB
 19271 00003FEE 3C0D                    	CMP	AL,c_CR 	; Check for carriage return
 19272 00003FF0 7503                    	JNZ	short NORMCH
 19273 00003FF2 C6040A                  	MOV	BYTE [SI],c_LF
 19274                                  NORMCH:
 19275 00003FF5 3C0A                    	CMP	AL,c_LF
 19276 00003FF7 E0F3                    	LOOPNZ	TRANBUF
 19277 00003FF9 7507                    	JNZ	short ENDRDCON
 19278 00003FFB 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 19279 00003FFD E815E4                  	call	OUTT		; Transmit linefeed
 19280 00004000 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 19281                                  ENDRDCON:
 19282                                  
 19283                                  ;hkn; SS is DOSDATA
 19284 00004002 16                      	push	ss
 19285 00004003 1F                      	pop	ds
 19286 00004004 E8AAFE                  	CALL	SWAPBACK
 19287 00004007 8936[2200]              	MOV	[CONTPOS],SI
 19288                                  ;ENDRDDEV:
 19289                                  ;hkn; SS is DOSDATA
 19290                                  ;	push	ss
 19291                                  ;	pop	ds
 19292                                  endrddev1:	; 31/07/2019
 19293 0000400B 893E[7405]              	MOV	[NEXTADD],DI
 19294 0000400F 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 19295 00004011 C43E[5A05]              	LES	DI,[THISSFT]
 19296                                  	;and	byte [es:di+5],0BFh
 19297 00004015 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 19298                                  					; Mark as no more data available
 19299                                  SETSFTC:
 19300                                  	; 31/07/2019
 19301                                  	;call	SETSFT
 19302                                  	;retn
 19303 0000401A E92305                  	jmp	SETSFT
 19304                                  
 19305                                  READCON:
 19306 0000401D E897FE                  	CALL	SWAPCON
 19307 00004020 8B36[2200]              	MOV	SI,[CONTPOS]
 19308 00004024 09F6                    	OR	SI,SI
 19309 00004026 75C4                    	JNZ	short TRANBUF
 19310 00004028 803E[4702]80            	CMP	BYTE [CONBUF],128
 19311 0000402D 7406                    	JZ	short GETBUF
 19312 0000402F C706[4702]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 19313                                  GETBUF:
 19314 00004035 51                      	PUSH	CX
 19315 00004036 06                      	PUSH	ES
 19316 00004037 57                      	PUSH	DI
 19317                                  
 19318                                  ;hkn; CONBUF is in DOSDATA
 19319 00004038 BA[4702]                	MOV	DX,CONBUF
 19320                                  
 19321 0000403B E857E1                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 19322 0000403E 5F                      	POP	DI
 19323 0000403F 07                      	POP	ES
 19324 00004040 59                      	POP	CX
 19325                                  
 19326                                  ;hkn; CONBUF is in DOSDATA
 19327 00004041 BE[4902]                	MOV	SI,CONBUF+2
 19328                                  
 19329 00004044 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 19330 00004047 75A3                    	JNZ	short TRANBUF
 19331 00004049 B01A                    	MOV	AL,1AH
 19332 0000404B AA                      	STOSB
 19333 0000404C 4F                      	DEC	DI
 19334 0000404D B00A                    	MOV	AL,c_LF
 19335 0000404F E8C3E3                  	call	OUTT		; Send linefeed
 19336 00004052 31F6                    	XOR	SI,SI
 19337 00004054 EBAC                    	JMP	short ENDRDCON
 19338                                  
 19339                                  ; 24/07/2018 - Retro DOS v3.0
 19340                                  
 19341                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 19342                                  ;---------------------------------------------------------------------------
 19343                                  ;
 19344                                  ; Procedure Name : DOS_WRITE
 19345                                  ;
 19346                                  ; Inputs:
 19347                                  ;	ThisSFT set to the SFT for the file being used
 19348                                  ;	[DMAADD] contains transfer address
 19349                                  ;	CX = No. of bytes to write
 19350                                  ; Function:
 19351                                  ;	Perform write operation
 19352                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 19353                                  ;		to current sf_position
 19354                                  ; Outputs:
 19355                                  ;    Carry clear
 19356                                  ;	SFT Position and cluster pointers updated
 19357                                  ;	CX = No. of bytes written
 19358                                  ;	ES:DI point to SFT
 19359                                  ;    Carry set
 19360                                  ;	AX is error code
 19361                                  ;	CX = 0
 19362                                  ;	ES:DI point to SFT
 19363                                  ; DS preserved, all other registers destroyed
 19364                                  ;---------------------------------------------------------------------------
 19365                                  
 19366                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 19367                                  ;hkn; point to DOSDATA.
 19368                                  
 19369                                  DOS_WRITE:
 19370 00004056 C43E[5A05]              	LES	DI,[THISSFT]
 19371                                  	;mov	al,[ES:DI+2]
 19372 0000405A 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 19373                                  	;and	al,0Fh
 19374 0000405E 240F                    	AND	AL,access_mask
 19375                                  	;cmp	al,0
 19376 00004060 3C00                    	CMP	AL,open_for_read
 19377 00004062 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 19378                                  BadMode:
 19379 00004064 E9DD03                  	jmp	SET_ACC_ERR
 19380                                  
 19381                                  ;
 19382                                  ; NOTE: The following check for writting to a Read Only File is performed
 19383                                  ;	    ONLY on FCBs!!!!
 19384                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 19385                                  ;	    of a read only file which can then be written to.
 19386                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 19387                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 19388                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 19389                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 19390                                  ;	    to a read-only file.
 19391                                  ;
 19392                                  Check_FCB_RO:
 19393                                  	; 25/07/2019 - Retro DOS v3.2
 19394                                  	;;test	word [es:di+2],8000h
 19395                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 19396                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 19397                                  	
 19398                                  	;test	byte [es:di+3],80h
 19399 00004067 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 19400 0000406C 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 19401                                  
 19402                                  	;test	byte [es:di+4],1
 19403 0000406E 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 19404 00004073 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 19405                                  WRITE_NO_MODE:
 19406 00004075 E8A602                  	call	SETUP
 19407 00004078 E80BE0                  	call	IsSFTNet
 19408 0000407B 7406                    	JZ	short LOCAL_WRITE
 19409                                  
 19410                                  ;IF NOT Installed
 19411                                  ;	transfer NET_WRITE
 19412                                  ;ELSE
 19413                                  	;mov	ax,1109h
 19414 0000407D B80911                  	MOV	AX,(MultNET<<8)|9
 19415 00004080 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 19416                                  			; ES:DI -> SFT
 19417                                  			; SFT DPB field -> DPB of drive containing file
 19418                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 19419                                  			; Return: CF set on error, CX = bytes written
 19420 00004082 C3                      	retn
 19421                                  ;ENDIF
 19422                                  
 19423                                  LOCAL_WRITE:
 19424                                  	; 25/07/2019
 19425                                  	;;test	word [es:di+5],80h
 19426                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 19427                                  	;jnz	short WRTDEV
 19428                                  
 19429                                  	;test	byte [es:di+5],80h
 19430 00004083 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 19431 00004088 755D                    	jnz	short WRTDEV
 19432                                  
 19433                                  	;mov	byte [EXTERR_LOCUS],2
 19434 0000408A C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19435 0000408F E87DE0                  	call	EcritDisk
 19436                                  
 19437 00004092 E8D904                  	call	DISKWRITE
 19438                                  
 19439                                  	; MSDOS 6.0
 19440                                  ;; Extended Open
 19441                                  	;JC	short nocommit
 19442                                  	;LES	DI,[THISSFT]
 19443                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],auto_commit_write
 19444                                  	;JZ	short nocommit
 19445                                  	;PUSH	CX
 19446                                  	;call	DOS_COMMIT
 19447                                  	;POP	CX
 19448                                  ;nocommit:
 19449                                  ;; Extended Open
 19450 00004095 E87FE0                  	call	LcritDisk
 19451 00004098 C3                      	retn
 19452                                  
 19453                                  DVWRTRAW:
 19454 00004099 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 19455 0000409B E83B11                  	call	SETWRITE
 19456 0000409E 1E                      	PUSH	DS			; Save seg of transfer
 19457                                  
 19458                                  ;hkn; SS override
 19459 0000409F 36C536[5A05]            	LDS	SI,[SS:THISSFT]
 19460 000040A4 E88A10                  	call	DEVIOCALL		; DS:SI -> DEVICE
 19461                                  
 19462 000040A7 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 19463 000040A9 B487                    	MOV	AH,87H
 19464                                  
 19465                                  ;hkn; SS override
 19466 000040AB 368B3E[2703]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 19467                                  
 19468                                  	; MSDOS 3.3
 19469                                  	;test	di,8000h
 19470                                  	;jz	short CWRTROK
 19471                                  
 19472                                  	; MSDOS 6.0
 19473 000040B0 09FF                    	or	di,di
 19474 000040B2 7920                    	jns	short CWRTROK
 19475                                  	
 19476                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19477 000040B4 E8571A                  	call	CHARHARD
 19478                                  
 19479                                  	; 25/07/2019 - Retro DOS v3.2
 19480                                  
 19481                                  	; MSDOS 6.0
 19482 000040B7 362B0E[3603]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 19483 000040BC 89D3                    	mov	bx,dx			; number of chars xferred	M065
 19484 000040BE 36031E[3603]            	add	bx,[ss:CALLSCNT]	;				M065
 19485 000040C3 89DF                    	mov	di,bx			;				M065
 19486                                  	
 19487                                  	; MSDOS 3.3
 19488                                  	;MOV	BX,DX			; Recall transfer addr		M065
 19489                                  
 19490                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19491 000040C5 08C0                    	OR	AL,AL
 19492 000040C7 740B                    	JZ	short CWRTROK 		; Ignore
 19493 000040C9 3C03                    	CMP	AL,3
 19494 000040CB 7403                    	JZ	short CWRFERR
 19495 000040CD 1F                      	POP	DS			; Recover saved seg of transfer
 19496 000040CE EBC9                    	JMP	short DVWRTRAW		; Try again
 19497                                  
 19498                                  CWRFERR:
 19499 000040D0 58                      	POP	AX			; Chuck saved seg of transfer
 19500 000040D1 E994FE                  	JMP	CRDFERR 		; Will pop one more stack element
 19501                                  
 19502                                  CWRTROK:
 19503 000040D4 58                      	POP	AX			; Chuck saved seg of transfer
 19504 000040D5 1F                      	POP	DS
 19505 000040D6 A1[3603]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 19506                                  ENDWRDEV:
 19507 000040D9 C43E[5A05]              	LES	DI,[THISSFT]
 19508 000040DD 89C1                    	MOV	CX,AX
 19509                                  	;call	ADDREC
 19510                                  	;retn
 19511                                  	; 25/07/2019
 19512 000040DF E97F04                  	jmp	ADDREC
 19513                                  
 19514                                  WRTNUL:
 19515 000040E2 89CA                    	MOV	DX,CX			;Entire transfer done
 19516                                  WRTCOOKJ:
 19517 000040E4 E98D00                  	JMP	WRTCOOKDONE
 19518                                  
 19519                                  WRTDEV:
 19520                                  	;mov	byte [EXTERR_LOCUS],4
 19521 000040E7 C606[EF02]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 19522                                  	;or	byte [es:di+5],40h
 19523 000040EC 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 19524                                  					; Reset EOF for input
 19525                                  	;mov	bl,[es:di+5]
 19526 000040F1 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 19527 000040F5 31C0                    	XOR	AX,AX
 19528 000040F7 E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 19529 000040F9 1E                      	PUSH	DS
 19530 000040FA 88D8                    	MOV	AL,BL
 19531 000040FC C51E[F802]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 19532 00004100 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 19533 00004102 31D2                    	XOR	DX,DX			; Set starting point
 19534                                  	;test	al,20h
 19535 00004104 A820                    	test	AL,devid_device_raw	; Raw?
 19536                                  	;JZ	short TEST_DEV_CON
 19537                                  	;JMP	DVWRTRAW
 19538 00004106 7591                    	jnz	short DVWRTRAW
 19539                                  
 19540                                  TEST_DEV_CON:
 19541                                  	;test	al,2
 19542 00004108 A802                    	test	AL,devid_device_con_out ; Console output device?
 19543 0000410A 756E                    	jnz	short WRITECON
 19544                                  	;test	al,4
 19545 0000410C A804                    	test	AL,devid_device_null
 19546 0000410E 75D2                    	JNZ	short WRTNUL
 19547 00004110 89D0                    	MOV	AX,DX
 19548 00004112 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 19549 00004115 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 19550 00004117 51                      	PUSH	CX
 19551 00004118 B90100                  	MOV	CX,1
 19552 0000411B E8BB10                  	call	SETWRITE
 19553 0000411E 59                      	POP	CX
 19554                                  
 19555                                  ;hkn; SS override
 19556 0000411F 36C536[5A05]            	LDS	SI,[SS:THISSFT]
 19557                                  ;
 19558                                  ;SR; Removed X25 support from here
 19559                                  ;
 19560                                  	;lds	si,[si+7]
 19561 00004124 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 19562                                  DVWRTLP:
 19563 00004127 E81018                  	call	DSKSTATCHK
 19564 0000412A E80710                  	call	DEVIOCALL2
 19565 0000412D 57                      	PUSH	DI
 19566 0000412E B487                    	MOV	AH,87H
 19567                                  
 19568                                  ;hkn; SS override
 19569 00004130 368B3E[2703]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 19570                                  	
 19571                                  	; MSDOS 3.3
 19572                                  	;test	di,8000h
 19573                                  	;jz	short CWROK
 19574                                  
 19575                                  	; MSDOS 6.0
 19576 00004135 09FF                    	or	di,di
 19577 00004137 7916                    	jns	short CWROK
 19578                                  	
 19579                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19580 00004139 E8D219                  	call	CHARHARD
 19581 0000413C 5F                      	POP	DI
 19582                                  
 19583                                  ;hkn; SS override
 19584 0000413D 36C706[3603]0100        	MOV	word [SS:CALLSCNT],1
 19585 00004144 3C01                    	CMP	AL,1
 19586 00004146 74DF                    	JZ	short DVWRTLP 	; Retry
 19587 00004148 08C0                    	OR	AL,AL
 19588 0000414A 740C                    	JZ	short DVWRTIGN	; Ignore
 19589                                  	; 10/08/2018
 19590 0000414C E919FE                  	JMP	CRDFERR 	; Fail, pops one stack element
 19591                                  
 19592                                  CWROK:
 19593 0000414F 5F                      	POP	DI
 19594                                  
 19595                                  ;hkn; SS override
 19596 00004150 36833E[3603]00          	CMP	word [SS:CALLSCNT],0
 19597 00004156 741C                    	JZ	short WRTCOOKDONE
 19598                                  DVWRTIGN:
 19599 00004158 42                      	INC	DX
 19600                                  
 19601                                  ;hkn; SS override for CALLXAD
 19602 00004159 36FF06[3203]            	INC	WORD [SS:CALLXAD]
 19603 0000415E 47                      	INC	DI
 19604 0000415F 1E                      	PUSH	DS
 19605 00004160 368E1E[3403]            	MOV	DS,[SS:CALLXAD+2]
 19606 00004165 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 19607 00004168 1F                      	POP	DS
 19608 00004169 7409                    	JZ	short WRTCOOKDONE
 19609                                  
 19610                                  ;hkn; SS override
 19611 0000416B 36C706[2703]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 19612 00004172 E2B3                    	LOOP	DVWRTLP
 19613                                  WRTCOOKDONE:
 19614 00004174 89D0                    	MOV	AX,DX
 19615 00004176 1F                      	POP	DS
 19616 00004177 E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 19617                                  
 19618                                  WRITECON:
 19619 0000417A 1E                      	PUSH	DS
 19620                                  
 19621                                  ;hkn; SS is DOSDATA
 19622 0000417B 16                      	push	ss
 19623 0000417C 1F                      	pop	ds
 19624 0000417D E837FD                  	CALL	SWAPCON
 19625 00004180 1F                      	POP	DS
 19626 00004181 89DE                    	MOV	SI,BX
 19627 00004183 51                      	PUSH	CX
 19628                                  WRCONLP:
 19629 00004184 AC                      	LODSB
 19630 00004185 3C1A                    	CMP	AL,1Ah		; ^Z?
 19631 00004187 7405                    	JZ	short CONEOF
 19632 00004189 E889E2                  	call	OUTT
 19633 0000418C E2F6                    	LOOP	WRCONLP
 19634                                  CONEOF:
 19635 0000418E 58                      	POP	AX			; Count
 19636 0000418F 29C8                    	SUB	AX,CX			; Amount actually written
 19637 00004191 1F                      	POP	DS
 19638 00004192 E81CFD                  	CALL	SWAPBACK
 19639 00004195 E941FF                  	JMP	ENDWRDEV
 19640                                  
 19641                                  ;---------------------------------------------------------------------------
 19642                                  ;
 19643                                  ; Procedure Name : get_io_sft
 19644                                  ;
 19645                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 19646                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more.  Otherwise, we
 19647                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 19648                                  ;
 19649                                  ;---------------------------------------------------------------------------
 19650                                  
 19651                                  GET_IO_SFT:
 19652                                  	;test	byte [SS:CONSWAP],0FFh
 19653 00004198 36803E[2103]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 19654 0000419E 7512                    	JNZ	short GetRedir
 19655                                  GetNormal:
 19656 000041A0 16                      	push	ss
 19657 000041A1 1F                      	pop	ds
 19658 000041A2 06                      	PUSH	ES
 19659 000041A3 57                      	PUSH	DI
 19660 000041A4 E89E29                  	call	SFFromHandle
 19661 000041A7 7206                    	JC	short RET44P
 19662 000041A9 8CC6                    	MOV	SI,ES
 19663 000041AB 8EDE                    	MOV	DS,SI
 19664 000041AD 89FE                    	MOV	SI,DI
 19665                                  RET44P:
 19666 000041AF 5F                      	POP	DI
 19667 000041B0 07                      	POP	ES
 19668 000041B1 C3                      	retn
 19669                                  GetRedir:
 19670 000041B2 83FB01                  	CMP	BX,1
 19671 000041B5 77E9                    	JA	short GetNormal
 19672 000041B7 36C536[A205]            	LDS	SI,[SS:CONSFT]
 19673 000041BC F8                      	CLC
 19674                                  get_io_sft_retn:
 19675 000041BD C3                      	retn
 19676                                  
 19677                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 19678                                  ;---------------------------------------------------------------------------
 19679                                  ;
 19680                                  ; Procedure Name : DIRREAD
 19681                                  ;
 19682                                  ; Inputs:
 19683                                  ;	AX = Directory block number (relative to first block of directory)
 19684                                  ;	ES:BP = Base of drive parameters
 19685                                  ;	[DIRSEC] = First sector of first cluster of directory
 19686                                  ;	[CLUSNUM] = Next cluster
 19687                                  ;	[CLUSFAC] = Sectors/Cluster
 19688                                  ; Function:
 19689                                  ;	Read the directory block into [CURBUF].
 19690                                  ; Outputs:
 19691                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 19692                                  ;	[SECCLUSPOS] Set
 19693                                  ;	ES:BP unchanged
 19694                                  ;	[CURBUF] Points to Buffer with dir sector
 19695                                  ;	Carry set if error (user said FAIL to I 24)
 19696                                  ; DS preserved, all other registers destroyed.
 19697                                  ;---------------------------------------------------------------------------
 19698                                  
 19699                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 19700                                  
 19701                                  DIRREAD:
 19702                                  
 19703                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 19704                                  ; the same as what is in the DPB! In the case of the root directory, we have
 19705                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 19706                                  ; by DIRStart = 0.
 19707                                  
 19708 000041BE 31D2                    	XOR	DX,DX
 19709 000041C0 833E[7E05]00            	CMP	word [DIRSTART],0
 19710 000041C5 7503                    	jnz	short SubDir
 19711 000041C7 92                      	XCHG	AX,DX
 19712 000041C8 EB0C                    	JMP	short DoRead
 19713                                  
 19714                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 19715                                  
 19716                                  SubDir:
 19717 000041CA 88C2                    	MOV	DL,AL
 19718                                  	;and	dl,[es:bp+4]
 19719 000041CC 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 19720                                  
 19721                                  ;	(DX) = sector-in-cluster
 19722                                  
 19723                                  	;mov	cl,[es:bp+5]
 19724 000041D0 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 19725 000041D4 D3E8                    	SHR	AX,CL
 19726                                  
 19727                                  ;	(DX) = position in cluster
 19728                                  ;	(AX) = number of clusters to skip
 19729                                  
 19730                                  DoRead:
 19731 000041D6 8816[3005]              	MOV	[SECCLUSPOS],DL
 19732 000041DA 89C1                    	MOV	CX,AX
 19733 000041DC 88D4                    	MOV	AH,DL
 19734                                  
 19735                                  ;	(CX) = number of clusters to skip.
 19736                                  ;	(AH) = remainder
 19737                                  
 19738                                  	; 04/05/2019 - Retro DOS v4.0
 19739                                  	; 23/07/2019 - Retro DOS v3.2
 19740                                  
 19741                                  	; MSDOS 6.0
 19742 000041DE 8B16[7C05]              	MOV	DX,[DIRSEC+2]	     	  ;>32mb
 19743 000041E2 8916[B005]              	MOV	[HIGH_SECTOR],DX	  ;>32mb
 19744 000041E6 8B16[7A05]              	MOV	DX,[DIRSEC]
 19745 000041EA 00E2                    	ADD	DL,AH
 19746 000041EC 80D600                  	ADC	DH,0
 19747 000041EF 8316[B005]00            	ADC	word [HIGH_SECTOR],0	  ;>32mb
 19748                                  
 19749 000041F4 8B1E[7805]              	MOV	BX,[CLUSNUM]
 19750 000041F8 891E[9805]              	MOV	[NXTCLUSNUM],BX
 19751 000041FC E319                    	JCXZ	FIRSTCLUSTER
 19752                                  SKPCLLP:
 19753 000041FE E8301B                  	call	UNPACK
 19754 00004201 72BA                    	jc	short get_io_sft_retn
 19755 00004203 87DF                    	XCHG	BX,DI
 19756 00004205 E8121B                  	call	IsEOF			; test for eof based on fat size
 19757 00004208 7302                    	JAE	short HAVESKIPPED
 19758 0000420A E2F2                    	LOOP	SKPCLLP
 19759                                  HAVESKIPPED:
 19760 0000420C 891E[9805]              	MOV	[NXTCLUSNUM],BX
 19761 00004210 89FA                    	MOV	DX,DI
 19762 00004212 88E3                    	MOV	BL,AH
 19763 00004214 E8DF14                  	call	FIGREC
 19764                                  
 19765                                  	;entry	FIRSTCLUSTER
 19766                                  
 19767                                  FIRSTCLUSTER:
 19768                                  	;mov	byte [ALLOWED],18h
 19769 00004217 C606[1503]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 19770 0000421C 30C0                    	XOR	AL,AL		; Indicate pre-read
 19771 0000421E E8811F                  	call	GETBUFFR
 19772 00004221 729A                    	jc	short get_io_sft_retn
 19773                                  
 19774                                  	;entry	SET_BUF_AS_DIR
 19775                                  
 19776                                  SET_BUF_AS_DIR:
 19777                                  
 19778                                  ;	Set the type of CURBUF to be a directory sector.
 19779                                  ;	Only flags are modified.
 19780                                  
 19781 00004223 1E                      	PUSH	DS
 19782 00004224 56                      	PUSH	SI
 19783 00004225 C536[9E05]              	LDS	SI,[CURBUF]
 19784                                  	;or	byte [si+5],4
 19785 00004229 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 19786 0000422D 5E                      	POP	SI
 19787 0000422E 1F                      	POP	DS
 19788                                  dirread_retn:
 19789 0000422F C3                      	retn
 19790                                  
 19791                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 19792                                  ;----------------------------------------------------------------------------
 19793                                  ;
 19794                                  ; Procedure Name : FATSECRD
 19795                                  ; Inputs:
 19796                                  ;	Same as DREAD
 19797                                  ;	DS:BX = Transfer address
 19798                                  ;	CX = Number of sectors
 19799                                  ;	DX = Absolute record number
 19800                                  ;	ES:BP = Base of drive parameters
 19801                                  ; Function:
 19802                                  ;	Calls BIOS to perform FAT read.
 19803                                  ; Outputs:
 19804                                  ;	Same as DREAD
 19805                                  ;---------------------------------------------------------------------------
 19806                                  
 19807                                  	; 04/05/2019 - Retro DOS v4.0
 19808                                  	; 23/07/2019 - REtro DOS v3.2
 19809                                  FATSECRD:
 19810                                  ;hkn; SS override
 19811                                  	;mov	byte [ss:ALLOWED],18h
 19812 00004230 36C606[1503]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 19813 00004236 89CF                    	MOV	DI,CX
 19814                                  	;mov	cl,[es:bp+8]
 19815 00004238 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 19816                                  	; MSDOS 3.3
 19817                                  	;;mov	al,[es:bp+0Fh]
 19818                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 
 19819                                  	;XOR	AH,AH
 19820                                  	; MSDOS 6.0
 19821                                  	;mov	ax,[es:bp+0Fh]
 19822 0000423C 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 19823 00004240 30ED                    	XOR	CH,CH	
 19824 00004242 52                      	PUSH	DX
 19825                                  NXTFAT:
 19826                                  	; MSDOS 6.0
 19827                                  ;hkn; SS override
 19828 00004243 36C706[B005]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 19829 0000424A 51                      	PUSH	CX			;32mb
 19830 0000424B 50                      	PUSH	AX
 19831 0000424C 89F9                    	MOV	CX,DI
 19832 0000424E E85B00                  	call	DSKREAD
 19833 00004251 58                      	POP	AX
 19834 00004252 59                      	POP	CX
 19835 00004253 7420                    	JZ	short RET41P		; Carry clear
 19836 00004255 01C2                    	ADD	DX,AX
 19837 00004257 E2EA                    	LOOP	NXTFAT
 19838 00004259 5A                      	POP	DX
 19839 0000425A 89F9                    	MOV	CX,DI
 19840                                  
 19841                                  ; NOTE FALL THROUGH
 19842                                  
 19843                                  ;Break	<DREAD -- DO A DISK READ>
 19844                                  ;---------------------------------------------------------------------------
 19845                                  ;
 19846                                  ; Procedure Name : DREAD
 19847                                  ;
 19848                                  ; Inputs:
 19849                                  ;	DS:BX = Transfer address
 19850                                  ;	CX = Number of sectors
 19851                                  ;	DX = Absolute record number	      (LOW)
 19852                                  ;	[HIGH_SECTOR]= Absolute record number (HIGH)
 19853                                  ;	ES:BP = Base of drive parameters
 19854                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 19855                                  ; Function:
 19856                                  ;	Calls BIOS to perform disk read. If BIOS reports
 19857                                  ;	errors, will call HARDERRRW for further action.
 19858                                  ; Outputs:
 19859                                  ;	Carry set if error (currently user FAILED to INT 24)
 19860                                  ; DS,ES:BP preserved. All other registers destroyed.
 19861                                  ;---------------------------------------------------------------------------
 19862                                  
 19863                                  	;entry	DREAD
 19864                                  DREAD:
 19865 0000425C E84D00                  	call	DSKREAD
 19866 0000425F 74CE                    	jz	short dirread_retn	; Carry clear
 19867                                  ;hkn; SS override
 19868 00004261 36C606[3205]00          	MOV	BYTE [SS:READOP],0
 19869 00004267 E89A00                  	call	HARDERRRW
 19870 0000426A 3C01                    	CMP	AL,1		; Check for retry
 19871 0000426C 74EE                    	JZ	short DREAD
 19872 0000426E 3C03                    	CMP	AL,3		; Check for FAIL
 19873 00004270 F8                      	CLC
 19874 00004271 7501                    	JNZ	short NO_CAR		; Ignore
 19875 00004273 F9                      	STC
 19876                                  NO_CAR:
 19877 00004274 C3                      	retn
 19878                                  RET41P: 
 19879 00004275 5A                      	POP	DX
 19880 00004276 C3                      	retn
 19881                                  
 19882                                  ; 24/07/2018 - Retro DOS v3.0
 19883                                  
 19884                                  ;Break	<CHECK_WRITE_LOCK>
 19885                                  ;---------------------------------------------------------------------------
 19886                                  ;
 19887                                  ; Procedure Name : CHECK_WRITE_LOCK
 19888                                  ;
 19889                                  ; Inputs:
 19890                                  ;	output of SETUP
 19891                                  ;	ES:DI -> SFT
 19892                                  ; Function:
 19893                                  ;	check write lock
 19894                                  ; Outputs:
 19895                                  ;	Carry set if error
 19896                                  ;	Carry clear if ok
 19897                                  ;
 19898                                  ;----------------------------------------------------------------------------
 19899                                  
 19900                                  CHECK_WRITE_LOCK:
 19901                                  	; MSDOS 6.0
 19902                                  	;test	byte [es:di+4],8
 19903 00004277 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 19904                                  	;JZ	short write_cont			     ;no
 19905                                  	;call	SET_ACC_ERR_DS		;
 19906                                  	;retn
 19907                                  	;jnz	SET_ACC_ERR_DS
 19908                                  	; 19/08/2018
 19909 0000427C 7403                    	jz	short write_cont
 19910 0000427E E9C101                  	jmp	SET_ACC_ERR_DS
 19911                                  write_cont:				;
 19912 00004281 51                      	PUSH	CX			;save reg
 19913 00004282 09C9                    	OR	CX,CX			;
 19914 00004284 7501                    	JNZ	short Not_Truncate	;
 19915 00004286 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 19916                                  Not_Truncate:				;
 19917 00004287 B080                    	MOV	AL,80H			;check write access
 19918 00004289 E8A233                  	call	LOCK_CHECK		;check lock
 19919 0000428C 59                      	POP	CX			;restore reg
 19920 0000428D 7305                    	JNC	short WRITE_OK		;lock ok
 19921 0000428F E86701                  	call	WRITE_LOCK_VIOLATION	;issue I24
 19922 00004292 73ED                    	JNC	short write_cont	;retry
 19923                                  WRITE_OK:				;
 19924 00004294 C3                      	retn				;
 19925                                  
 19926                                  ;Break	<CHECK_READ_LOCK>
 19927                                  ;---------------------------------------------------------------------------
 19928                                  ;
 19929                                  ; Procedure Name : CHECK_READ_LOC
 19930                                  ;
 19931                                  ; Inputs:
 19932                                  ;	ES:DI -> SFT
 19933                                  ;	output of SETUP
 19934                                  ; Function:
 19935                                  ;	check read lock
 19936                                  ; Outputs:
 19937                                  ;	Carry set if error
 19938                                  ;	Carry clear if ok
 19939                                  ;----------------------------------------------------------------------------
 19940                                  
 19941                                  CHECK_READ_LOCK:
 19942                                  	; MSDOS 6.0
 19943                                  	;test	byte [es:di+4],8
 19944 00004295 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 19945                                  	;JZ	short do_retry			   	     ; no
 19946                                  	;call	SET_ACC_ERR		;
 19947                                  	;retn
 19948                                  	;jnz	SET_ACC_ERR
 19949                                  	; 28/07/2019
 19950 0000429A 7403                    	jz	short do_retry
 19951 0000429C E9A501                  	jmp	SET_ACC_ERR
 19952                                  do_retry:				;
 19953 0000429F 30C0                    	xor	al,al			;check read access
 19954 000042A1 E88A33                  	call	LOCK_CHECK		;check lock
 19955 000042A4 7305                    	JNC	short READLOCK_OK 	;lock ok
 19956 000042A6 E82901                  	call	READ_LOCK_VIOLATION	;issue I24
 19957 000042A9 73F4                    	JNC	short do_retry		;retry
 19958                                  READLOCK_OK:				;
 19959 000042AB C3                      	retn				;
 19960                                  
 19961                                  ;============================================================================
 19962                                  ; DISK2.ASM, MSDOS 6.0, 1991
 19963                                  ;============================================================================
 19964                                  ; 24/07/2018 - Retro DOS v3.0 
 19965                                  
 19966                                  ;	TITLE	DISK2 - Disk utility routines
 19967                                  ;	NAME	Disk2
 19968                                  
 19969                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 19970                                  ;
 19971                                  ;	DskRead
 19972                                  ;	DWRITE
 19973                                  ;	DSKWRITE
 19974                                  ;	HarderrRW
 19975                                  ;	SETUP
 19976                                  ;	BREAKDOWN
 19977                                  ;	READ_LOCK_VIOLATION
 19978                                  ;	WRITE_LOCK_VIOLATION
 19979                                  ;	DISKREAD
 19980                                  ;	SET_ACC_ERR_DS
 19981                                  ;	SET_ACC_ERR
 19982                                  ;	SETSFT
 19983                                  ;	SETCLUS
 19984                                  ;	AddRec
 19985                                  ;
 19986                                  ;	Revision history:
 19987                                  ;
 19988                                  ;		AN000 version 4.00 Jan. 1988
 19989                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 19990                                  
 19991                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 19992                                  ;---------------------------------------------------------------------------
 19993                                  ;
 19994                                  ; Procedure Name : DSKREAD
 19995                                  ;
 19996                                  ; Inputs:
 19997                                  ;	DS:BX = Transfer addr
 19998                                  ;	CX = Number of sectors
 19999                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 20000                                  ;	DX = Absolute record number	       (LOW)
 20001                                  ;	ES:BP = Base of drive parameters
 20002                                  ; Function:
 20003                                  ;	Call BIOS to perform disk read
 20004                                  ; Outputs:
 20005                                  ;	DI = CX on entry
 20006                                  ;	CX = Number of sectors unsuccessfully transfered
 20007                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 20008                                  ;	Zero set if OK (from BIOS) (carry clear)
 20009                                  ;	Zero clear if error (carry clear)
 20010                                  ; SI Destroyed, others preserved
 20011                                  ;---------------------------------------------------------------------------
 20012                                  
 20013                                  DSKREAD:
 20014 000042AC 51                      	PUSH	CX
 20015                                  	;mov	ah,[es:bp+16h]
 20016                                  	;mov	ah,[es:bp+17h] ; MSDOS 6.0 ; 26/07/2019
 20017 000042AD 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 20018                                  	;mov	al,[es:bp+1]
 20019 000042B1 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 20020 000042B5 53                      	PUSH	BX
 20021 000042B6 06                      	PUSH	ES
 20022 000042B7 E8EC0E                  	call	SETREAD
 20023 000042BA EB27                    	JMP	short DODSKOP
 20024                                  
 20025                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 20026                                  ;--------------------------------------------------------------------------
 20027                                  ;
 20028                                  ; Procedure Name : DWRITE
 20029                                  ;
 20030                                  ; Inputs:
 20031                                  ;	DS:BX = Transfer address
 20032                                  ;	CX = Number of sectors
 20033                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 20034                                  ;	DX = Absolute record number	       (LOW)
 20035                                  ;	ES:BP = Base of drive parameters
 20036                                  ;	[ALLOWED] must be set in case HARDERR called
 20037                                  ; Function:
 20038                                  ;	Calls BIOS to perform disk write. If BIOS reports
 20039                                  ;	errors, will call HARDERRRW for further action.
 20040                                  ; Output:
 20041                                  ;	Carry set if error (currently, user FAILed to I 24)
 20042                                  ; BP preserved. All other registers destroyed.
 20043                                  ;----------------------------------------------------------------------------
 20044                                  
 20045                                  
 20046                                  	;entry	DWRITE
 20047                                  DWRITE:
 20048 000042BC E81600                  	CALL	DSKWRITE
 20049 000042BF 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 20050                                  
 20051                                  ;hkn; SS override
 20052 000042C1 36C606[3205]01          	MOV	BYTE [SS:READOP],1
 20053 000042C7 E83A00                  	call	HARDERRRW
 20054 000042CA 3C01                    	CMP	AL,1		; Check for retry
 20055 000042CC 74EE                    	JZ	short DWRITE
 20056 000042CE 3C03                    	CMP	AL,3		; Check for FAIL
 20057 000042D0 F8                      	CLC
 20058 000042D1 7501                    	JNZ	short NO_CAR2 	; Ignore
 20059 000042D3 F9                      	STC
 20060                                  NO_CAR2:
 20061                                  dw_ret_label:
 20062 000042D4 C3                      	retn
 20063                                  
 20064                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 20065                                  ;---------------------------------------------------------------------------
 20066                                  ;
 20067                                  ; Procedure Name : DSKWRITE
 20068                                  ;
 20069                                  ; Inputs:
 20070                                  ;	DS:BX = Transfer addr
 20071                                  ;	CX = Number of sectors
 20072                                  ;	DX = Absolute record number	       (LOW)
 20073                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 20074                                  ;	ES:BP = Base of drive parameters
 20075                                  ; Function:
 20076                                  ;	Call BIOS to perform disk read
 20077                                  ; Outputs:
 20078                                  ;	DI = CX on entry
 20079                                  ;	CX = Number of sectors unsuccessfully transfered
 20080                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 20081                                  ;	Zero set if OK (from BIOS) (carry clear)
 20082                                  ;	Zero clear if error (carry clear)
 20083                                  ; SI Destroyed, others preserved
 20084                                  ;
 20085                                  ;----------------------------------------------------------------------------
 20086                                  
 20087                                  	;entry	DSKWRITE
 20088                                  DSKWRITE:
 20089 000042D5 51                      	PUSH	CX
 20090                                  	;mov	ah,[es:bp+16h]
 20091                                  	;mov	ah,[es:bp+17h] ; MSDOS 6.0
 20092 000042D6 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 20093                                  	;mov	al,[es:bp+1]
 20094 000042DA 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 20095 000042DE 53                      	PUSH	BX
 20096 000042DF 06                      	PUSH	ES
 20097 000042E0 E8F60E                  	call	SETWRITE
 20098                                  DODSKOP:
 20099 000042E3 8CD9                    	MOV	CX,DS		; Save DS
 20100 000042E5 1F                      	POP	DS		; DS:BP points to DPB
 20101 000042E6 1E                      	PUSH	DS
 20102                                  	;lds	si,[ds:bp+12h]
 20103                                  	;lds	si,[ds:bp+13h] ; MSDOS 6.0 ; 26/07/2019
 20104 000042E7 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 20105 000042EB E8460E                  	call	DEVIOCALL2
 20106 000042EE 8ED9                    	MOV	DS,CX		; Restore DS
 20107 000042F0 07                      	POP	ES		; Restore ES
 20108 000042F1 5B                      	POP	BX
 20109                                  
 20110                                  ;hkn; SS override
 20111 000042F2 368B0E[3603]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 20112 000042F7 5F                      	POP	DI
 20113 000042F8 29F9                    	SUB	CX,DI
 20114 000042FA F7D9                    	NEG	CX		; Number of sectors not transferred
 20115                                  
 20116                                  ;hkn; SS override
 20117 000042FC 36A1[2703]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 20118                                  	;test	ax,8000h
 20119 00004300 A90080                  	test	AX,STERR
 20120 00004303 C3                      	retn
 20121                                  
 20122                                  ;Break	<HardErrRW - map extended errors and call harderr>
 20123                                  ;---------------------------------------------------------------------------
 20124                                  ;
 20125                                  ; Procedure Name : HardErrRW
 20126                                  ;
 20127                                  ; Inputs:
 20128                                  ;	AX is error code from read or write
 20129                                  ;	Other registers set as per HARDERR
 20130                                  ; Function:
 20131                                  ;	Checks the error code for special extended
 20132                                  ;	errors and maps them if needed. Then invokes
 20133                                  ;	Harderr
 20134                                  ; Outputs:
 20135                                  ;	Of HARDERR
 20136                                  ; AX may be modified prior to call to HARDERR.
 20137                                  ; No other registers altered.
 20138                                  ;
 20139                                  ;---------------------------------------------------------------------------
 20140                                  
 20141                                  HARDERRRW:
 20142                                  	;cmp	al,0Fh
 20143 00004304 3C0F                    	CMP	AL,error_I24_wrong_disk
 20144 00004306 7512                    	JNZ	short DO_ERR				; Nothing to do
 20145                                  
 20146                                  	; MSDOS 3.3
 20147                                  	;push	ds
 20148                                  	;push	si
 20149                                  	;lds	si,[ss:CALLVIDRW]
 20150                                  	;mov	[ss:EXTERRPT+2], ds
 20151                                  	;mov	[ss:EXTERRPT], si
 20152                                  	;pop	si
 20153                                  	;pop	ds
 20154                                  
 20155                                  	; MSDOS 6.0
 20156 00004308 50                      	push	ax
 20157 00004309 36A1[3A03]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 20158 0000430D 36A3[F402]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 20159 00004311 36A1[3C03]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 20160 00004315 36A3[F602]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 20161 00004319 58                      	pop	ax
 20162                                  DO_ERR:
 20163 0000431A E80F18                  	call	HARDERR
 20164 0000431D C3                      	retn
 20165                                  
 20166                                  ; 24/07/2018 - Retro DOS v3.0
 20167                                  
 20168                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 20169                                  ;----------------------------------------------------------------------------
 20170                                  ;
 20171                                  ; Procedure Name : SETUP
 20172                                  ;
 20173                                  ; Inputs:
 20174                                  ;	ES:DI point to SFT (value also in THISSFT)
 20175                                  ;	DMAAdd contains transfer address
 20176                                  ;	CX = Byte count
 20177                                  ;	DS = DOSDATA
 20178                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 20179                                  ;		2nd of caller of caller.
 20180                                  ; Outputs:
 20181                                  ;	    CX = byte count
 20182                                  ;	    [THISDPB] = Base of drive parameters if file
 20183                                  ;		      = Pointer to device header if device or NET
 20184                                  ;	    ES:DI Points to SFT
 20185                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 20186                                  ;	    [TRANS] = 0 (No transfers yet)
 20187                                  ;	    BytPos = Byte position in file
 20188                                  ;
 20189                                  ;	The following fields are relevant to local files (not devices) only:
 20190                                  ;
 20191                                  ;	    SecPos = Position of first sector (local files only)
 20192                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 20193                                  ;	    [CLUSNUM] = First cluster (local files only)
 20194                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 20195                                  ;	    [THISDRV] = Physical unit number (local files only)
 20196                                  ;
 20197                                  ;      RETURNS ONE LEVEL UP WITH:
 20198                                  ;	   CX = 0
 20199                                  ;	   CARRY = Clear
 20200                                  ;	IF AN ERROR IS DETECTED
 20201                                  ; All other registers destroyed
 20202                                  ;----------------------------------------------------------------------------
 20203                                  
 20204                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 20205                                  
 20206                                  SETUP:
 20207                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 20208                                  
 20209                                  	;lds 	si,[es:di+7]
 20210 0000431E 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 20211                                  
 20212                                  ;hkn; SS override
 20213 00004322 368C1E[4805]            	MOV	[SS:THISDPB+2],DS
 20214                                  
 20215                                  ;hkn; SS is DOSDATA
 20216 00004327 16                      	push	ss
 20217 00004328 1F                      	pop	ds
 20218                                  
 20219 00004329 8936[4605]              	MOV	[THISDPB],SI
 20220                                  
 20221 0000432D 8B1E[F802]              	MOV	BX,[DMAADD]
 20222 00004331 891E[7405]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 20223 00004335 C606[3105]00            	MOV	BYTE [TRANS],0		;No transferes
 20224                                  	;mov	ax,[es:di+15h]
 20225 0000433A 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 20226                                  	;mov	dx,[es:di+17h]
 20227 0000433E 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 20228 00004342 8916[8C05]              	MOV	[BYTPOS+2],DX	;Set it
 20229 00004346 A3[8A05]                	MOV	[BYTPOS],AX
 20230                                  	;test	word [es:di+5],8080h
 20231 00004349 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 20232 0000434F 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 20233 00004351 06                      	PUSH	ES
 20234 00004352 C42E[4605]              	LES	BP,[THISDPB]		;Point at the DPB
 20235                                  	;mov	bl,[es:bp+0]
 20236                                  	;MOV	BL,[ES:BP+DPB.drive]
 20237 00004356 268A5E00                	mov	bl,[es:bp]
 20238 0000435A 881E[3305]              	MOV	[THISDRV],BL		;Set THISDRV
 20239                                  	;mov	bx,[es:bp+2]
 20240 0000435E 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 20241                                  
 20242                                  	; 24/07/2019 - Retro DOS v3.2
 20243                                  
 20244                                  	;; MSDOS 3.3
 20245                                  	;cmp	dx,bx
 20246                                  	;jnb	short EOFERR
 20247                                  	;div	bx
 20248                                  	;mov	[SECPOS],ax
 20249                                  	;mov	[BYTSECPOS],dx
 20250                                  	;mov	dx,ax
 20251                                  	;;and	al,[es:bp+4]
 20252                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 20253                                  	;mov	[SECCLUSPOS],al
 20254                                  	;mov	ax,cx
 20255                                  	;;mov	cl,[es:bp+5]
 20256                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 20257                                  	;shr	dx,cl
 20258                                  	;mov	[CLUSNUM],dx
 20259                                  	;pop	es
 20260                                  	;mov	cx,ax
 20261                                  
 20262                                  	; 04/05/2019 - Retro DOS v4.0
 20263                                  
 20264                                  	; MSDOS 6.0
 20265                                  ;M039: Optimized this section.
 20266 00004362 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 20267 00004363 E8E104                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 20268 00004366 8916[8805]              	MOV	[BYTSECPOS],DX
 20269 0000436A A3[8005]                	MOV	[SECPOS],AX
 20270 0000436D 890E[8205]              	MOV	[SECPOS+2],CX
 20271 00004371 89CA                    	MOV	DX,CX
 20272                                  
 20273 00004373 89C3                    	MOV	BX,AX
 20274                                  	;and	bl,[es:bp+4]
 20275 00004375 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 20276 00004379 881E[3005]              	MOV	[SECCLUSPOS],BL
 20277                                  
 20278 0000437D E8EE04                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 20279 00004380 59                      	POP	CX			;CX = byte count.
 20280 00004381 751F                    	JNZ	short EOFERR		;cluster number above 64k
 20281                                  	;cmp	ax,[es:bp+0Dh]
 20282 00004383 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 20283 00004387 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 20284                                  
 20285 00004389 A3[7805]                	MOV	[CLUSNUM],AX
 20286 0000438C 07                      	POP	ES			; ES:DI point to SFT
 20287                                  ;M039
 20288                                  
 20289                                  NOSETSTUFF:
 20290 0000438D 89C8                    	MOV	AX,CX		; AX = Byte count.
 20291 0000438F 0306[F802]              	ADD	AX,[DMAADD]	 ; See if it will fit in one segment
 20292 00004393 730C                    	JNC	short setup_OK		; Must be less than 64K
 20293 00004395 A1[F802]                	MOV	AX,[DMAADD]
 20294 00004398 F7D8                    	NEG	AX		; Amount of room left in segment (know
 20295                                  				;    less than 64K since max value of CX
 20296                                  				;    is FFFF).
 20297 0000439A 7501                    	JNZ	short NoDec
 20298 0000439C 48                      	DEC	AX
 20299                                  NoDec:
 20300 0000439D 89C1                    	MOV	CX,AX		; Can do this much
 20301 0000439F E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 20302                                  setup_OK:
 20303 000043A1 C3                      	retn
 20304                                  
 20305                                  EOFERR:
 20306 000043A2 07                      	POP	ES		; ES:DI point to SFT
 20307 000043A3 31C9                    	XOR	CX,CX		; No bytes read
 20308                                  ;;;;;;;;;;; 7/18/86
 20309                                  	; 24/07/2019 - Retro DOS v3.2
 20310                                  	; MSDOS 3.3
 20311                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 20312                                  ;;;;;;;;;;;
 20313                                  NOROOM:
 20314 000043A5 5B                      	POP	BX		; Kill return address
 20315 000043A6 F8                      	CLC
 20316 000043A7 C3                      	retn			; RETURN TO CALLER OF CALLER
 20317                                  
 20318                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 20319                                  ;---------------------------------------------------------------------------
 20320                                  ;
 20321                                  ; Procedure Name : BREAKDOWN
 20322                                  ;
 20323                                  ; Inputs:
 20324                                  ;	CX = Length of disk transfer in bytes
 20325                                  ;	ES:BP = Base of drive parameters
 20326                                  ;	[BYTSECPOS] = Byte position within first sector
 20327                                  ;	DS = DOSDATA
 20328                                  ; Outputs:
 20329                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 20330                                  ;	[SECCNT] = No. of whole sectors to transfer
 20331                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 20332                                  ; AX, BX, DX destroyed. No other registers affected.
 20333                                  ;---------------------------------------------------------------------------
 20334                                  
 20335                                  BREAKDOWN:
 20336 000043A8 A1[8805]                	MOV	AX,[BYTSECPOS]
 20337 000043AB 89CB                    	MOV	BX,CX
 20338 000043AD 09C0                    	OR	AX,AX
 20339 000043AF 740E                    	JZ	short SAVFIR	; Partial first sector?
 20340                                  	;sub	ax,[es:bp+2]
 20341 000043B1 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 20342 000043B5 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 20343 000043B7 29C3                    	SUB	BX,AX		; Subtract from total length
 20344 000043B9 7304                    	JAE	short SAVFIR
 20345 000043BB 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 20346 000043BD 31DB                    	XOR	BX,BX		; And no bytes are left
 20347                                  SAVFIR:
 20348 000043BF A3[8E05]                	MOV	[BYTCNT1],AX
 20349 000043C2 89D8                    	MOV	AX,BX
 20350 000043C4 31D2                    	XOR	DX,DX
 20351                                  	;div	word [ES:BP+2]
 20352 000043C6 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 20353 000043CA A3[9205]                	MOV	[SECCNT],AX
 20354 000043CD 8916[9005]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 20355                                  	; MSDOS 3.3
 20356                                  ;	OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 20357                                  ;	retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 20358                                  ;	CMP	AX,1
 20359                                  ;	retnz
 20360                                  ;	MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 20361                                  ;	MOV	[BYTCNT2],AX
 20362                                  ;	MOV	[SECCNT],DX	; DX = 0
 20363                                  _RET45:
 20364 000043D1 C3                      	retn
 20365                                  
 20366                                  ;----------------------------------------------------------------------------
 20367                                  ;
 20368                                  ; Procedure Name : READ_LOCK_VIOLATION
 20369                                  ;
 20370                                  ; ES:DI points to SFT. This entry used by NET_READ
 20371                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 20372                                  ; Else do retrys.
 20373                                  ; ES:DI,DS,CX preserved
 20374                                  ;
 20375                                  ;----------------------------------------------------------------------------
 20376                                  
 20377                                  READ_LOCK_VIOLATION:
 20378 000043D2 C606[3205]00            	MOV	byte [READOP],0
 20379                                  ERR_ON_CHECK:
 20380                                  	;test	word [es:di+2],8000h
 20381 000043D7 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 20382 000043DD 750E                    	JNZ	short HARD_ERR
 20383 000043DF 51                      	PUSH	CX
 20384 000043E0 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 20385                                  	;and	cl,0F0h
 20386 000043E4 80E1F0                  	AND	CL,SHARING_MASK
 20387                                  	;cmp	cl,0
 20388 000043E7 80F900                  	CMP	CL,SHARING_COMPAT
 20389 000043EA 59                      	POP	CX
 20390 000043EB 7505                    	JNE	short NO_HARD_ERR
 20391                                  HARD_ERR:
 20392 000043ED E85232                  	call	LOCK_VIOLATION
 20393 000043F0 73DF                    	jnc	short _RET45		; User wants Retrys
 20394                                  NO_HARD_ERR:
 20395 000043F2 31C9                    	XOR	CX,CX			;No bytes transferred
 20396                                  	;mov	ax,21h
 20397 000043F4 B82100                  	MOV	AX,error_lock_violation
 20398 000043F7 F9                      	STC
 20399 000043F8 C3                      	retn
 20400                                  
 20401                                  ;----------------------------------------------------------------------------
 20402                                  ;
 20403                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 20404                                  ;
 20405                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 20406                                  ; This entry used by NET_WRITE
 20407                                  ;
 20408                                  ;----------------------------------------------------------------------------
 20409                                  
 20410                                  WRITE_LOCK_VIOLATION:
 20411 000043F9 C606[3205]01            	MOV	byte [READOP],1
 20412 000043FE EBD7                    	JMP	short ERR_ON_CHECK
 20413                                  
 20414                                  ; 22/07/2019 - Retro DOS v3.2
 20415                                  
 20416                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 20417                                  ;----------------------------------------------------------------------------
 20418                                  ;
 20419                                  ; Procedure Name : DISKREAD
 20420                                  ;
 20421                                  ; Inputs:
 20422                                  ;	Outputs of SETUP
 20423                                  ; Function:
 20424                                  ;	Perform disk read
 20425                                  ; Outputs:
 20426                                  ;    Carry clear
 20427                                  ;	CX = No. of bytes read
 20428                                  ;	ES:DI point to SFT
 20429                                  ;	SFT offset and cluster pointers updated
 20430                                  ;    Carry set
 20431                                  ;	CX = 0
 20432                                  ;	ES:DI point to SFT
 20433                                  ;	AX has error code
 20434                                  ;----------------------------------------------------------------------------
 20435                                  
 20436                                  ;hkn; called from disk.asm. DS already set up.
 20437                                  
 20438                                  DISKREAD:
 20439                                  	;mov	ax,[es:di+11h]
 20440 00004400 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 20441                                  	;mov	bx,[es:di+13h]
 20442 00004404 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 20443 00004408 2B06[8A05]              	SUB	AX,[BYTPOS]
 20444 0000440C 1B1E[8C05]              	SBB	BX,[BYTPOS+2]
 20445 00004410 7226                    	JB	short RDERR		;Read starts past EOF
 20446 00004412 750A                    	JNZ	short ENUF		;More than 64k to EOF
 20447 00004414 09C0                    	OR	AX,AX
 20448 00004416 7420                    	JZ	short RDERR		;Read starts at EOF
 20449 00004418 39C8                    	CMP	AX,CX
 20450 0000441A 7302                    	JAE	short ENUF		;I/O fits
 20451 0000441C 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 20452                                  ENUF:
 20453                                  	; MSDOS 3.3
 20454                                  	;test	byte [es:di+4],8
 20455                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 20456                                  	;jnz	short SET_ACC_ERR
 20457                                  	;call	LOCK_CHECK
 20458                                  	;jnb	short _READ_OK
 20459                                  	;call	READ_LOCK_VIOLATION
 20460                                  	;jnb	short ENUF
 20461                                  	;retn
 20462                                  
 20463                                  	; MSDOS 6.0
 20464 0000441E E874FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 20465 00004421 7301                    	JNC	short _READ_OK 		; There are no locks
 20466 00004423 C3                      	retn
 20467                                  
 20468                                  _READ_OK:
 20469 00004424 C42E[4605]              	LES	BP,[THISDPB]
 20470 00004428 E87DFF                  	CALL	BREAKDOWN
 20471 0000442B 8B0E[7805]              	MOV	CX,[CLUSNUM]
 20472 0000442F E82A11                  	call	FNDCLUS
 20473                                       	; MSDOS 6.0			;M022 conditional removed here
 20474 00004432 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 20475                                  					; migrated from 330a - HKN
 20476 00004434 09C9                    	OR	CX,CX
 20477 00004436 7413                    	JZ	short SKIPERR
 20478                                  RDERR:
 20479 00004438 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 20480 0000443A E90502                  	jmp	WRTERR22
 20481                                  
 20482                                  ;RDLASTJ: 
 20483                                  	;JMP	RDLAST                  ;M039
 20484                                  
 20485                                  SETSFTJ2: 
 20486 0000443D E90001                  	JMP	SETSFT
 20487                                  
 20488                                  CANOT_READ:
 20489                                  	; 22/07/2019 - Retro DOS v3.2
 20490                                  	; MSDOS 3.3
 20491                                  	;POP	CX		;M039.
 20492                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20493 00004440 59                      	POP	CX              ;Clean stack.
 20494 00004441 5B                      	POP	BX
 20495                                  
 20496                                  	;entry	SET_ACC_ERR_DS
 20497                                  SET_ACC_ERR_DS:
 20498                                  ;hkn; SS is DOSDATA
 20499                                  	;Context DS
 20500 00004442 16                      	push	ss
 20501 00004443 1F                      	pop	ds
 20502                                  
 20503                                  	;entry	SET_ACC_ERR
 20504                                  SET_ACC_ERR:
 20505 00004444 31C9                    	XOR	CX,CX
 20506                                  	;mov	ax,5
 20507 00004446 B80500                  	MOV	AX,error_access_denied
 20508 00004449 F9                      	STC
 20509 0000444A C3                      	retn
 20510                                  
 20511                                  SKIPERR:
 20512 0000444B 8916[7605]              	MOV	[LASTPOS],DX
 20513 0000444F 891E[7805]              	MOV	[CLUSNUM],BX
 20514 00004453 833E[8E05]00            	CMP	word [BYTCNT1],0
 20515 00004458 7405                    	JZ	short RDMID
 20516                                  
 20517 0000445A E87511                  	call	BUFRD
 20518 0000445D 72E3                    	JC	short SET_ACC_ERR_DS
 20519                                  RDMID:
 20520 0000445F 833E[9205]00            	CMP	word [SECCNT],0
 20521 00004464 0F84BB00                	JZ	RDLAST ; 24/07/2019
 20522                                  
 20523 00004468 E8FA11                  	call	NEXTSEC
 20524 0000446B 72D0                    	JC	short SETSFTJ2
 20525                                  
 20526 0000446D C606[3105]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 20527                                  ONSEC:
 20528 00004472 8A16[3005]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 20529 00004476 8B0E[9205]              	MOV	CX,[SECCNT]
 20530 0000447A 8B1E[7805]              	MOV	BX,[CLUSNUM]
 20531                                  RDLP:
 20532 0000447E E81512                  	call	OPTIMIZE
 20533 00004481 72BF                    	JC	short SET_ACC_ERR_DS
 20534                                  
 20535 00004483 57                      	PUSH	DI ; *****              ;DI = Next physical cluster.
 20536 00004484 50                      	PUSH	AX ; ****               ;AX = # of sectors remaining.
 20537 00004485 53                      	PUSH	BX ; ***		;[DMAADD+2]:BX = Transfer address.
 20538                                  	;mov	byte [ALLOWED],38h
 20539 00004486 C606[1503]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 20540 0000448B 8E1E[FA02]              	MOV	DS,[DMAADD+2]
 20541                                  
 20542 0000448F 52                      	PUSH	DX ; **                 ;[HIGH_SECTOR]:DX = phys. sector #.
 20543 00004490 51                      	PUSH	CX ; *                  ;CX = # of contiguous sectors to read.
 20544                                  
 20545                                  	; MSDOS 6.0
 20546                                  	;call	SET_RQ_SC_PARMS 	 ;LB. do this for SC ;AN000;
 20547                                  
 20548                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20549 00004491 E8C8FD                  	call	DREAD
 20550                                  
 20551                                  	; 22/07/2019 - Retro DOS v3.2
 20552                                  
 20553                                  	; MSDOS 6.0 
 20554 00004494 59                      	pop	cx ; *
 20555 00004495 5A                      	pop	dx ; **
 20556 00004496 2E8F06[B205]            	pop	WORD [cs:TEMP_VAR] ; *** ; pop word [ss:TEMP_VAR]
 20557 0000449B 72A3                    	jc	short CANOT_READ
 20558                                  
 20559 0000449D 2E8C1E[B405]            	mov	[cs:TEMP_VAR2],ds  ; mov [ss:TEMP_VAR2],ds
 20560                                  
 20561                                  	; MSDOS 3.3 
 20562                                  	;pop	bx ; *
 20563                                  	;pop	dx ; **
 20564                                  	;jc	short CANOT_READ
 20565                                  	;add	bx,dx	; (bx = Extent end)
 20566                                  	
 20567 000044A2 268A4600                	mov	al,[es:bp] ; mov al,[es:bp+0]
 20568                                  	;mov	al,[ES:BP+DPB.DRIVE] 
 20569 000044A6 E8191C                  	call	SETVISIT
 20570                                  		; DS:DI = [BUFFHEAD] ; 22/07/2019
 20571                                  	; ->***
 20572                                  ;M039
 20573                                  	; MSDOS 6.0 
 20574                                  	;pop	cx ; *
 20575                                  	;pop	dx ; **
 20576                                  	;pop	WORD [ss:TEMP_VAR] ; ***
 20577                                  	;jc	short CANOT_READ
 20578                                  
 20579                                  	;mov	[ss:TEMP_VAR2],ds
 20580                                  
 20581                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 20582                                  ;            sectors, also termed an "Extent".)
 20583                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20584                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 20585                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20586                                  ;
 20587                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 20588                                  ;	buffers must be "read" into the transfer memory block, so that the
 20589                                  ;       transfer memory reflects the most recent data.
 20590                                  
 20591                                  	;call    DskRdBufScan
 20592                                  
 20593                                  	;;Context DS
 20594                                  	;push	ss
 20595                                  	;pop	ds
 20596                                          
 20597                                  	;pop	cx ; ****
 20598                                          ;pop	bx ; *****
 20599                                  
 20600                                  ;       CX = # of sector remaining.
 20601                                  ;       BX = Next physical cluster.
 20602                                  ;M039
 20603                                  	; 25/07/2018 - Retro DOS v3.0
 20604                                  	; ***->
 20605                                  	; MSDOS 3.3
 20606                                  	; IBMDOS.COM (1987) - Offset 42BDh
 20607                                  bufq:
 20608                                  	; (MSDOS 3.3)
 20609                                  ;;	DX = Extent start.
 20610                                  ;;	BX = Extent end.
 20611                                  ;;      AL = Drive #.
 20612                                  ;;   DS:DI-> 1st buffer in queue.
 20613                                  	
 20614                                  	; 22/07/2019 - Retro DOS v3.2
 20615                                  	; (MSDOS 6.0, 'DskRdBufScan') 
 20616                                  
 20617 000044A9 2E8B1E[B005]            	mov     bx,[cs:HIGH_SECTOR]  ; mov bx,[ss:HIGH_SECTOR]
 20618 000044AE 89DE                    	mov     si,bx
 20619 000044B0 01D1                    	add     cx,dx
 20620 000044B2 83D600                  	adc     si,0
 20621                                  	
 20622                                  	; (MSDOS 6.0)
 20623                                  ;       BX:DX = Extent start.
 20624                                  ;       SI:CX = Extent end + 1.
 20625                                  ;          AL = Drive #.
 20626                                  ;       DS:DI-> 1st buffer in queue.
 20627                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 20628                                  
 20629                                  	;or	byte [di+5],20h
 20630 000044B5 804D0520                	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 20631                                  
 20632                                  	; 22/07/2019 - Retro DOS v3.2
 20633                                  
 20634                                  	;cmp	al,[di+4]	
 20635 000044B9 3A4504                  	cmp	al,[DI+BUFFINFO.buf_ID]	;Same drive?
 20636 000044BC 754C                    	jne	short bufq3		;  -no, jump.
 20637                                  				;Jump if Extent start > buffer sector.
 20638                                  	;cmp	bx,[di+8]
 20639 000044BE 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 20640 000044C1 7503                    	jne	short bufq01
 20641                                  	;cmp	dx,[di+6]
 20642 000044C3 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 20643                                  bufq01:
 20644 000044C6 7742                    	ja	short bufq3
 20645                                  				;Jump if Extent end <= buffer sector.
 20646                                  	;cmp	si,[di+8]
 20647 000044C8 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 20648 000044CB 7503                    	jne	short bufq02
 20649                                  	;cmp	cx,[di+6]
 20650 000044CD 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 20651                                  bufq02:
 20652 000044D0 7638                    	jna	short bufq3
 20653                                  
 20654                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 20655                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 20656                                  ;       as MRU (Most Recently Used).
 20657                                  
 20658                                  	;test	byte [di+5],40h
 20659 000044D2 F6450540                	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 20660 000044D6 742F                    	jz	short bufq2	; clear buffer, check the next buff sec
 20661                                  
 20662                                  	; 27/07/2019
 20663                                  	; MSDOS 6.0
 20664 000044D8 50                      	push	ax ; (drive number) ; 22/07/2019
 20665                                  
 20666                                  	; 22/07/2019 - Retro DOS v3.2
 20667                                  
 20668                                  	; MSDOS 3.3
 20669                                  	;pop	ax ; transfer address
 20670                                  	;push	ax
 20671                                  	;push	di
 20672                                  	;push	dx
 20673                                  	;;sub	dx,[di+6]
 20674                                  	;sub	dx,[DI+BUFFINFO.buf_sector]
 20675                                  	;neg	dx
 20676                                  
 20677                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 20678                                  ;;           block.
 20679                                  
 20680                                  	; MSDOS 6.0
 20681 000044D9 51                      	push	cx
 20682 000044DA 52                      	push	dx
 20683 000044DB 56                      	push	si
 20684 000044DC 57                      	push	di
 20685 000044DD 06                      	push	es
 20686                                  
 20687 000044DE 89D0                    	mov     ax,dx
 20688                                  	;sub	ax,[di+6]
 20689 000044E0 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 20690 000044E3 F7D8                    	neg	ax
 20691                                  
 20692                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 20693                                  ;            block. (Note: the upper word of the sector # may be ignored
 20694                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 20695                                  ;            is imposed by the input parameters of the disk read operation.)
 20696                                  
 20697                                  	; MSDOS 3.3
 20698                                  	;mov	si,di
 20699                                  	;mov	di,ax
 20700                                  	;mov	ax,dx
 20701                                  	;;mov	cx,[es:bp+6]	
 20702                                  	;mov	cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 20703                                  	;mul	cx
 20704                                  	;add	di,ax
 20705                                  
 20706                                  	; 22/07/2019 - Retro DOS v3.2
 20707                                  
 20708                                  	; MSDOS 3.3
 20709                                  	;lea	si,[si+16] ; MSDOS 3.3
 20710                                  	;lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 20711                                   	;shr	cx,1
 20712                                  	;push	es
 20713                                  	;mov	es,[SS:DMAADD+2]
 20714                                  
 20715                                  	; MSDOS 6.0
 20716                                  	;lea	si,[di+20]
 20717 000044E5 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 20718                                  	;mov	cx,[es:bp+2]
 20719 000044E8 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 20720 000044EC F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 20721                                  	;mov	di,[ss:TEMP_VAR]
 20722 000044EE 2E8B3E[B205]            	mov	di,[cs:TEMP_VAR] ; 22/07/2019
 20723 000044F3 01C7                    	add	di,ax
 20724                                  	;mov	es,[ss:TEMP_VAR2]
 20725 000044F5 2E8E06[B405]            	mov	es,[cs:TEMP_VAR2] ; 22/07/2019
 20726 000044FA D1E9                    	shr	cx,1
 20727                                  
 20728                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 20729                                  ;       DS:SI-> Buffer sector data.
 20730                                  ;       ES:DI-> Destination within Transfer memory block.
 20731                                  
 20732 000044FC F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 20733                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 20734                                  	;rep	movsb                   ;Copy last byte.
 20735 000044FE 7301                    	jnc	short bufq1
 20736 00004500 A4                      	movsb
 20737                                  bufq1:
 20738                                  	; MSDOS 3.3
 20739                                  	;pop	es
 20740                                  	;pop	dx
 20741                                  	;pop	di
 20742                                  
 20743                                  	; 22/07/2019 - Retro DOS v3.2
 20744                                  
 20745                                  	; MSDOS 6.0
 20746 00004501 07                      	pop	es
 20747 00004502 5F                      	pop	di
 20748 00004503 5E                      	pop	si
 20749 00004504 5A                      	pop	dx
 20750 00004505 59                      	pop	cx
 20751                                  
 20752                                  ;       DS:DI -> current buffer.
 20753                                  
 20754                                  	; MSDOS 3.3
 20755                                  	;mov	al,[es:bp]  ; mov al,[es:bp+0]
 20756                                  	;;mov	al,[ES:BP+DPB.DRIVE]
 20757                                  	
 20758                                  	; MSDOS 6.0
 20759 00004506 58                      	pop	ax ; (drive number) ; 22/07/2019
 20760                                  bufq2:
 20761                                  	; MSDOS 3.3
 20762 00004507 E8E51B                  	call	SCANPLACE
 20763                                  bufq3:
 20764                                  	; AL = drive number ; 27/07/2019
 20765                                  	; MSDOS 3.3
 20766 0000450A E8CE1B                  	call	SKIPVISIT
 20767 0000450D 759A                    	jnz	short bufq
 20768                                  	
 20769                                  	; 22/07/2019
 20770                                  
 20771                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20772                                  	;push	ss
 20773 0000450F 0E                      	push	cs
 20774 00004510 1F                      	pop	ds
 20775                                  	
 20776                                  	; MSDOS 3.3
 20777                                  	;pop	cx ; ***
 20778                                  	;pop	cx ; ****
 20779                                  	;pop	bx ; *****
 20780                                  
 20781                                  	; MSDOS 6.0
 20782 00004511 59                      	pop	cx ; ****
 20783 00004512 5B                              pop	bx ; *****
 20784                                  
 20785                                  ;       CX = # of sector remaining.
 20786                                  ;       BX = Next physical cluster.	
 20787                                  bufq4:
 20788 00004513 E30E                    	JCXZ	RDLAST
 20789 00004515 E80218                  	call	IsEOF			; test for eof on fat size
 20790 00004518 7326                    	JAE	short SETSFT
 20791 0000451A B200                    	MOV	DL,0
 20792 0000451C FF06[7605]              	INC	word [LASTPOS]		; We'll be using next cluster
 20793 00004520 E95BFF                  	JMP	RDLP
 20794                                  
 20795                                  RDLAST:
 20796 00004523 A1[9005]                	MOV	AX,[BYTCNT2]
 20797 00004526 09C0                    	OR	AX,AX
 20798 00004528 7416                    	JZ	short SETSFT
 20799 0000452A A3[8E05]                	MOV	[BYTCNT1],AX
 20800 0000452D E83511                  	call	NEXTSEC
 20801 00004530 720E                    	JC	short SETSFT
 20802 00004532 C706[8805]0000          	MOV	word [BYTSECPOS],0
 20803 00004538 E89710                  	call	BUFRD
 20804                                  	; 10/08/2018
 20805 0000453B 7303                    	JNC	short SETSFT
 20806 0000453D E902FF                  	JMP	SET_ACC_ERR_DS
 20807                                  
 20808                                  ;------------------------------------------------------------------------------
 20809                                  ;
 20810                                  ; Procedure Name : SETSFT
 20811                                  ; Inputs:
 20812                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 20813                                  ;		and set cluster fields
 20814                                  ; Function:
 20815                                  ;	Update [THISSFT] based on the transfer
 20816                                  ; Outputs:
 20817                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 20818                                  ;	ES:DI points to [THISSFT]
 20819                                  ;	CX No. of bytes transferred
 20820                                  ;	Carry clear
 20821                                  ;
 20822                                  ;----------------------------------------------------------------------------
 20823                                  
 20824                                  	;entry	SETSFT
 20825                                  
 20826                                  ; 26/07/2018 - Retro DOS v3.0
 20827                                  SETSFT:
 20828 00004540 C43E[5A05]              	LES	DI,[THISSFT]
 20829                                  
 20830                                  ; Same as SETSFT except ES:DI already points to SFT
 20831                                  	;entry	SETCLUS
 20832                                  SETCLUS:	
 20833 00004544 8B0E[7405]              	MOV	CX,[NEXTADD]
 20834 00004548 2B0E[F802]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 20835                                  	;test	word [es:di+5],80h
 20836                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20837                                  	; 27/07/2019 - Retro DOS v3.2
 20838 0000454C 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 20839 00004551 750E                    	JNZ	short ADDREC		; don't set clusters if device
 20840 00004553 A1[7805]                	MOV	AX,[CLUSNUM]
 20841                                  	;mov	[es:di+1Bh],ax
 20842                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 20843 00004556 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 20844 0000455A A1[7605]                	MOV	AX,[LASTPOS]
 20845                                  	;mov	[es:di+19h],ax
 20846 0000455D 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 20847                                  
 20848                                  ;----------------------------------------------------------------------------
 20849                                  ;
 20850                                  ; Procedure : AddRec
 20851                                  ; Inputs:
 20852                                  ;	ES:DI points to SFT
 20853                                  ;	CX is No. Bytes transferred
 20854                                  ; Function:
 20855                                  ;	Update the SFT offset based on the transfer
 20856                                  ; Outputs:
 20857                                  ;	sf_position updated to point to first byte after transfer
 20858                                  ;	ES:DI points to SFT
 20859                                  ;	CX No. of bytes transferred
 20860                                  ;	Carry clear
 20861                                  ;----------------------------------------------------------------------------
 20862                                  
 20863                                  	;entry	AddRec
 20864                                  ADDREC:
 20865 00004561 E309                    	JCXZ	RET28		; If no records read,  don't change position
 20866                                  	;add	[es:di+15h],cx
 20867 00004563 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 20868                                  	;adc	word [es:di+17h], 0
 20869 00004567 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 20870                                  RET28:	
 20871 0000456C F8                      	CLC
 20872 0000456D C3                      	retn
 20873                                  
 20874                                  ; 25/07/2018
 20875                                  ; MSDOS 6.0
 20876                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 20877                                  ;----------------------------------------------------------------------------
 20878                                  ;
 20879                                  ; Procedure Name : DskRdBufScan
 20880                                  ;
 20881                                  ; Inputs:
 20882                                  ;       CX = # of contiguous sectors read.  (These constitute a block of
 20883                                  ;            sectors, also termed an "Extent".)
 20884                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20885                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 20886                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20887                                  ;
 20888                                  ; Function:
 20889                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 20890                                  ;	"read" into the transfer memory block, so that the transfer memory
 20891                                  ;	reflects the most recent data.
 20892                                  ;
 20893                                  ; Outputs:
 20894                                  ;       Transfer memory updated as required.
 20895                                  ;
 20896                                  ; Uses:
 20897                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 20898                                  ;       SS override for all global variables.
 20899                                  ;
 20900                                  ; Notes:
 20901                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 20902                                  ;	than the FIRST.
 20903                                  ;----------------------------------------------------------------------------
 20904                                  ;M039: Created
 20905                                  
 20906                                  ;procedure   DskRdBufScan,NEAR
 20907                                  ;
 20908                                  ;ASSUME  DS:NOTHING
 20909                                  ;
 20910                                  ;	cmp	[DirtyBufferCount],0	;Any dirty buffers?
 20911                                  ;	je	bufx			; -no, skip all work.
 20912                                  ;
 20913                                  ;       mov     bx,[HIGH_SECTOR]
 20914                                  ;       mov     si,bx
 20915                                  ;       add     cx,dx
 20916                                  ;       adc     si,0
 20917                                  ;
 20918                                  ;	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 20919                                  ;       mov     ax,[di].buf_prev
 20920                                  ;       mov     [FIRST_BUFF_ADDR],ax
 20921                                  ;
 20922                                  ;       Assert  ISDPB,<ES,BP>,"DISKREAD/bufchk"
 20923                                  ;	mov	al,es:[bp].dpb_drive
 20924                                  ;
 20925                                  ;;            BX:DX = Extent start.
 20926                                  ;;            SI:CX = Extent end + 1.
 20927                                  ;;               AL = Drive #.
 20928                                  ;;            DS:DI-> 1st buffer in queue.
 20929                                  ;;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 20930                                  ;
 20931                                  ;bufq:	cmp     al,BYTE PTR [di.buf_ID] ;Same drive?
 20932                                  ;	jne     bufq1        		;  -no, jump.
 20933                                  ;
 20934                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20935                                  ;       ja	bufq1			;Jump if Extent start > buffer sector.
 20936                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20937                                  ;       ja	bufq2                   ;Jump if Extent end >= buffer sector.
 20938                                  ;
 20939                                  ;bufq1:	cmp     di,[FIRST_BUFF_ADDR]    ;Scanned entire buffer queue?
 20940                                  ;       mov     di,[di].buf_next        ; Set-up for next buffer.
 20941                                  ;       jne     bufq                    ; -no, do next buffer
 20942                                  ;
 20943                                  ;bufx:   return                          ;Exit.
 20944                                  ;
 20945                                  ;;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 20946                                  ;;	transfer memory; otherwise, just re-position it in the buffer queue
 20947                                  ;;       as MRU (Most Recently Used).
 20948                                  ;
 20949                                  ;bufq2:	SaveReg <ax>
 20950                                  ;	testb   [di.buf_flags],buf_dirty ;Buffer dirty?
 20951                                  ;	jz      bufq3                    ; -no, jump.
 20952                                  ;
 20953                                  ;        SaveReg <cx,dx,si,di,es>
 20954                                  ;
 20955                                  ;	mov     ax,dx
 20956                                  ;	sub	ax, word ptr [di].buf_sector
 20957                                  ;	neg	ax
 20958                                  ;
 20959                                  ;;       AX = offset (in sectors) of buffer sector within Transfer memory
 20960                                  ;;            block. (Note: the upper word of the sector # may be ignored
 20961                                  ;;	     since no more than 64k bytes will ever be read. This 64k limit
 20962                                  ;;            is imposed by the input parameters of the disk read operation.)
 20963                                  ;
 20964                                  ;	lea	si,[di].BUFINSIZ	;DS:SI -> buffer data.
 20965                                  ;	mov     cx,es:[bp].dpb_sector_size ;CX = sector size (in bytes).
 20966                                  ;	mul     cx			;AX = offset (in bytes) of buf. sector
 20967                                  ;	mov     di,WORD PTR [TEMP_VAR]
 20968                                  ;	add	di,ax
 20969                                  ;	mov	es,WORD PTR [TEMP_VAR2]
 20970                                  ;	shr	cx,1
 20971                                  ;
 20972                                  ;;	   CX = sector size (in WORDs); CF=1 if odd # of bytes.
 20973                                  ;;       DS:SI-> Buffer sector data.
 20974                                  ;;       ES:DI-> Destination within Transfer memory block.
 20975                                  ;
 20976                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 20977                                  ;	adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 20978                                  ;	rep	movsb                   ;Copy last byte.
 20979                                  ;	RestoreReg <es,di,si,dx,cx>
 20980                                  ;
 20981                                  ;       DS:DI -> current buffer.
 20982                                  ;
 20983                                  ;bufq3:	mov     ax,di			;DS:AX -> Current buffer.
 20984                                  ;       invoke  SCANPLACE
 20985                                  ;       cmp	ax,[FIRST_BUFF_ADDR]    ;Last buffer?
 20986                                  ;       RestoreReg <ax>
 20987                                  ;       jnz    	bufq                   	; -no, jump.
 20988                                  ;       jmp     short bufx              ; -yes, exit.
 20989                                  ;
 20990                                  ;EndProc DskRdBufScan
 20991                                  
 20992                                  ; 23/07/2019 - Retro DOS v3.2 
 20993                                  
 20994                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 20995                                  ;----------------------------------------------------------------------------
 20996                                  ;
 20997                                  ; Procedure Name : DISKWRITE
 20998                                  ;
 20999                                  ; Inputs:
 21000                                  ;       Outputs of SETUP
 21001                                  ; Function:
 21002                                  ;       Perform disk write
 21003                                  ; Outputs:
 21004                                  ;    Carry clear
 21005                                  ;       CX = No. of bytes written
 21006                                  ;       ES:DI point to SFT
 21007                                  ;       SFT offset and cluster pointers updated
 21008                                  ;    Carry set
 21009                                  ;       CX = 0
 21010                                  ;       ES:DI point to SFT
 21011                                  ;       AX has error code
 21012                                  ;----------------------------------------------------------------------------
 21013                                  
 21014                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 21015                                  
 21016                                  DISKWRITE:
 21017                                  	; MSDOS 3.3
 21018                                  	; IBMDOS.COM - Offset 436Dh
 21019                                  	;;test	byte [es:di+4],8
 21020                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 21021                                  	;jz	short write_cont
 21022                                  	;jmp	SET_ACC_ERR_DS
 21023                                  ;write_cont:
 21024                                  	;push	cx
 21025                                  	;or	cx, cx
 21026                                  	;jnz	short Not_Truncate
 21027                                  	;;mov	cx,-1
 21028                                  	;dec	cx
 21029                                  ;Not_Truncate:
 21030                                  	;call	LOCK_CHECK
 21031                                  	;pop	cx
 21032                                  	;jnb	short _WRITE_OK
 21033                                  	;call	WRITE_LOCK_VIOLATION
 21034                                  	;jnb	short DISKWRITE
 21035                                  	;retn
 21036                                  
 21037                                  	; MSDOS 6.0
 21038 0000456E E806FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 21039                                  	; 19/08/2018
 21040 00004571 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 21041 00004573 C3                      	retn
 21042                                  
 21043                                  WRTEOFJ:
 21044 00004574 E92102                  	JMP     WRTEOF
 21045                                  
 21046                                  _WRITE_OK:
 21047                                   	; 27/07/2018
 21048                                  	; IBMDOS.COM - Offset 438Eh
 21049                                  	
 21050                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21051                                  	;and	word [es:di+5],0BFBFh
 21052 00004577 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 21053                                  				; Mark file as dirty, clear no date on close
 21054                                  	
 21055                                  	; 04/05/2019 - Retro DOS v4.0	
 21056                                  	; 23/07/2019 - Retro DOS v3.2
 21057                                  
 21058                                  	; MSDOS 6.0
 21059                                  	; mov 	ax,[es:di+11h]
 21060 0000457D 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 21061 00004581 A3[B205]                        MOV	[TEMP_VAR],AX                           ;M039
 21062                                  	;mov	ax,[es:di+13h]
 21063 00004584 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 21064 00004588 A3[B405]                        MOV	[TEMP_VAR2],AX                          ;M039
 21065                                  
 21066                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 21067                                  
 21068                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21069 0000458B C42E[4605]              	LES     BP,[THISDPB]
 21070                                  
 21071 0000458F E816FE                  	call	BREAKDOWN
 21072                                  
 21073 00004592 A1[8A05]                	MOV     AX,[BYTPOS]
 21074 00004595 8B16[8C05]              	MOV     DX,[BYTPOS+2]
 21075 00004599 E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 21076 0000459B 01C8                    	ADD     AX,CX
 21077 0000459D 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 21078                                  
 21079                                  	;mov	bx,[es:bp+2]
 21080 000045A0 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 21081                                  
 21082                                  	; 23/07/2019 - Retro DOS v3.2
 21083                                  	; MSDOS 3.3
 21084                                  	;cmp	dx,bx
 21085                                  	;jnb	short WRTERR33
 21086                                  	;div	bx
 21087                                  	;mov	bx,ax
 21088                                  	;OR	DX,DX
 21089                                  	;JNZ	short CALCLUS
 21090                                  	;dec	ax
 21091                                  ;CALCLUS:
 21092                                  	; MSDOS 3.3
 21093                                  	;mov	cl,[es:bp+5]
 21094                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21095                                  	;shr	ax,cl
 21096                                  	;push	ax
 21097                                  	;push	dx
 21098                                  	;push	es
 21099                                  	;les	di,[THISSFT]
 21100                                  	;;mov	ax,[es:di+11h]
 21101                                  	;;mov	dx,[es:di+13h]
 21102                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 21103                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 21104                                  	;pop	es
 21105                                  	;;DX:AX = current file size (in bytes).
 21106                                  	;;div	word [es:bp+2]
 21107                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 21108                                  	;mov	cx,ax
 21109                                  	;or	dx,dx
 21110                                  	;jz	short NORND
 21111                                  	;inc	ax
 21112                                  ;NORND:
 21113                                  	; MSDOS 6.0
 21114 000045A4 E8A002                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 21115 000045A7 89C6                    	MOV	SI,AX
 21116 000045A9 890E[B005]                      MOV	[HIGH_SECTOR],CX
 21117                                  
 21118                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 21119                                  
 21120 000045AD 09D2                    	OR	DX,DX
 21121 000045AF 52                      	PUSH	DX ; *			;M039: Free DX for use by SHR32
 21122 000045B0 89CA                    	MOV	DX,CX			;M039
 21123 000045B2 7506                    	JNZ	short CALCLUS
 21124 000045B4 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 21125 000045B7 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 21126                                  CALCLUS:
 21127                                  	; MSDOS 6.0
 21128 000045BA E8B102                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 21129 000045BD 5A                      	POP	DX ; *
 21130                                  
 21131                                  ;       AX = Last cluster to write.
 21132                                  ;       DX = # of bytes in last sector to write (the "tail").
 21133                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 21134                                  
 21135 000045BE 50                      	PUSH	AX ; *2
 21136 000045BF 52                      	PUSH	DX ; *1
 21137                                  ;M039
 21138 000045C0 8B16[B405]              	mov	dx,[TEMP_VAR2]
 21139 000045C4 A1[B205]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 21140 000045C7 E87D02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 21141 000045CA 890E[B405]              	mov	[TEMP_VAR2],cx
 21142 000045CE 890E[8605]              	mov	[VALSEC+2],cx
 21143 000045D2 89C1                    	mov	cx,ax
 21144 000045D4 89F3                    	mov	bx,si
 21145                                  
 21146                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 21147                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 21148                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 21149                                  ;                     DX = # of bytes in last sector of current file.
 21150                                  ;M039
 21151 000045D6 09D2                    	OR	DX,DX
 21152 000045D8 7408                    	JZ	short NORND
 21153 000045DA 83C001                  	ADD	AX,1            	;Round up if any remainder	;AC000;
 21154 000045DD 8316[8605]00            	ADC	word [VALSEC+2],0
 21155                                  NORND:	
 21156                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21157 000045E2 A3[8405]                	MOV     [VALSEC],AX
 21158                                  
 21159                                  ;       [VALSEC] = Last sector of current file.
 21160                                  
 21161 000045E5 31C0                    	XOR     AX,AX
 21162 000045E7 A3[9A05]                	MOV     [GROWCNT],AX
 21163 000045EA A3[9C05]                	MOV     [GROWCNT+2],AX
 21164 000045ED 58                      	POP     AX ; *1 ; # of bytes in last sector to write (the "tail")
 21165                                  	
 21166                                  	; 23/07/2019 - Retro DOS v3.2
 21167                                  	
 21168                                  	; MSDOS 6.0
 21169 000045EE 8B3E[B005]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 21170 000045F2 3B3E[B405]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 21171 000045F6 7264                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 21172 000045F8 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 21173 000045FA 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 21174 000045FC 1B3E[B405]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 21175 00004600 EB09                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 21176                                  lowsec:
 21177 00004602 BF0000                  	MOV	DI,0			;F.C. >32mb
 21178                                  	; MSDOS 3.3 & MSDOS 6.0
 21179 00004605 29CB                    	SUB	BX,CX			; Number of full sectors
 21180 00004607 7253                    	JB	short NOGROW
 21181 00004609 7444                    	JZ	short TESTTAIL
 21182                                  yesgrow:
 21183                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21184 0000460B 89D1                    	MOV     CX,DX
 21185 0000460D 93                      	XCHG    AX,BX
 21186                                  	;mul	word [es:bp+2]
 21187 0000460E 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 21188                                  	
 21189                                  	; MSDOS 6.0
 21190 00004612 8916[B005]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 21191 00004616 A3[B405]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 21192 00004619 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 21193                                  	;mul	word [es:bp+2]
 21194 0000461B 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 21195                                  	
 21196 0000461F 0306[B005]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 21197 00004623 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 21198 00004625 A1[B405]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 21199                                  
 21200                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21201 00004628 29C8                    	SUB     AX,CX			; Take off current "tail"
 21202 0000462A 83DA00                  	SBB     DX,0			; 32-bit extension
 21203 0000462D 01D8                    	ADD     AX,BX			; Add on new "tail"
 21204 0000462F 83D200                  	ADC     DX,0			; ripple tim's head off
 21205 00004632 EB21                    	JMP     SHORT SETGRW
 21206                                  
 21207                                  HAVSTART:
 21208                                  	;int	3
 21209 00004634 89C1                    	MOV     CX,AX
 21210 00004636 E8430F                  	call	SKPCLP
 21211                                  	;JCXZ	DOWRTJ
 21212 00004639 E357                    	jcxz	DOWRT
 21213                                  
 21214 0000463B E8E410                  	call	ALLOCATE
 21215                                  	;JNC	short DOWRTJ
 21216 0000463E 7352                    	jnc	short DOWRT
 21217                                  
 21218                                  	;entry   WRTERR
 21219                                  WRTERR:
 21220 00004640 B40F                    	MOV     AH,0FH                          ;MS. write/data/fail/abort      ;AN000;
 21221                                  
 21222                                  	;entry WRTERR22
 21223                                  WRTERR22:
 21224 00004642 A0[3305]                	MOV     AL,[THISDRV]                    ;MS.                            ;AN000;
 21225                                  
 21226                                  	; 27/07/2018
 21227                                  WRTERR33:
 21228                                  	;MOV	CX,0                    	;No bytes transferred
 21229 00004645 31C9                    	XOR     CX,CX
 21230                                  					
 21231 00004647 C43E[5A05]              	LES     DI,[THISSFT]
 21232                                  	;CLC	; 19/05/2019
 21233 0000464B C3                      	retn
 21234                                  
 21235                                  ;DOWRTJ: 
 21236                                  ;	JMP     short DOWRT
 21237                                  
 21238                                  ACC_ERRWJ:
 21239                                  	; 10/08/2018
 21240                                  	;JMP	SET_ACC_ERRW
 21241 0000464C E9F3FD                  	jmp	SET_ACC_ERR_DS
 21242                                  
 21243                                  TESTTAIL:
 21244 0000464F 29D0                    	SUB     AX,DX
 21245 00004651 7609                    	JBE	short NOGROW
 21246 00004653 31D2                    	XOR     DX,DX
 21247                                  SETGRW:
 21248 00004655 A3[9A05]                	MOV	[GROWCNT],AX
 21249 00004658 8916[9C05]              	MOV	[GROWCNT+2],DX
 21250                                  NOGROW:
 21251 0000465C 58                      	POP     AX	; *2 ; Last cluster to write
 21252 0000465D 8B0E[7805]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 21253 00004661 E8F80E                  	call	FNDCLUS
 21254 00004664 72E6                    	JC	short ACC_ERRWJ
 21255 00004666 891E[7805]              	MOV     [CLUSNUM],BX
 21256 0000466A 8916[7605]              	MOV     [LASTPOS],DX
 21257                                  
 21258 0000466E 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 21259 00004670 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 21260 00004672 E3C0                    	JCXZ    HAVSTART        ; See if no more data
 21261 00004674 51                      	PUSH    CX              ; No. of clusters short of first
 21262 00004675 89C1                    	MOV     CX,AX
 21263 00004677 E8A810                  	call	ALLOCATE
 21264 0000467A 59                      	POP     CX
 21265 0000467B 72C3                    	JC	short WRTERR
 21266 0000467D 8B16[7605]              	MOV     DX,[LASTPOS]
 21267 00004681 42                      	INC     DX
 21268 00004682 49                      	DEC     CX
 21269 00004683 7405                    	JZ	short NOSKIP
 21270 00004685 E8F40E                  	call	SKPCLP
 21271 00004688 72C2                    	JC	short ACC_ERRWJ
 21272                                  NOSKIP:
 21273 0000468A 891E[7805]              	MOV     [CLUSNUM],BX
 21274 0000468E 8916[7605]              	MOV     [LASTPOS],DX
 21275                                  DOWRT:
 21276 00004692 833E[8E05]00            	CMP     word [BYTCNT1],0
 21277 00004697 7409                    	JZ	short WRTMID
 21278 00004699 8B1E[7805]              	MOV     BX,[CLUSNUM]
 21279 0000469D E8690F                  	call	BUFWRT
 21280 000046A0 72AA                    	JC	short ACC_ERRWJ
 21281                                  	;JC	short SET_ACC_ERRW
 21282                                  WRTMID:
 21283 000046A2 A1[9205]                	MOV     AX,[SECCNT]
 21284 000046A5 09C0                    	OR      AX,AX
 21285 000046A7 0F84B000                	JZ	WRTLAST ; 24/07/2019	;M039
 21286 000046AB 0106[8005]              	ADD     [SECPOS],AX
 21287                                  	; 23/07/2019 - Retro DOS v3.2
 21288                                  	; MSDOS 6.0
 21289 000046AF 8316[8205]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 21290 000046B4 E8AE0F                  	call	NEXTSEC
 21291 000046B7 7293                    	JC	short ACC_ERRWJ
 21292                                  	;JC	short SET_ACC_ERRW	;M039
 21293 000046B9 C606[3105]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 21294 000046BE 8A16[3005]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 21295 000046C2 8B1E[7805]              	MOV     BX,[CLUSNUM]
 21296 000046C6 8B0E[9205]              	MOV     CX,[SECCNT]
 21297                                  WRTLP:
 21298 000046CA E8C90F                  	call	OPTIMIZE
 21299 000046CD 727D                    	JC	short SET_ACC_ERRW ; 24/07/2019
 21300                                  
 21301                                  ;M039
 21302                                  ;       DI = Next physical cluster.
 21303                                  ;       AX = # sectors remaining.
 21304                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 21305                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 21306                                  ;	     sectors, also termed an "Extent".)
 21307                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 21308                                  ;       ES:BP -> Drive Parameter Block (DPB).
 21309                                  ;
 21310                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 21311                                  ;	are in Extent; they are being over-written.
 21312                                  
 21313 000046CF 57                      	push    di ; *5*
 21314 000046D0 50                      	push    ax ; *4*
 21315                                  
 21316                                          ; MSDOS 6.0
 21317                                  	;call	DskWrtBufPurge          ;DS trashed.
 21318                                  ;ASSUME DS:NOTHING
 21319                                  ;M039
 21320                                  	; MSDOS 3.3
 21321                                  	; IBMDOS.COM (1987) - Offset 4497h
 21322 000046D1 52                      	push	dx ; *3*
 21323 000046D2 53                      	push	bx ; *2*
 21324                                  
 21325                                  	;mov	al,[es:bp]
 21326                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 21327                                  	
 21328                                  	;mov	bx,cx
 21329                                  	;add	bx,dx	; (bx = Extent end)
 21330                                  
 21331                                  	; MSDOS 3.3	
 21332                                  ;;	DX = Extent start.
 21333                                  ;;	BX = Extent end.
 21334                                  ;;	AL = Drive #.
 21335                                  
 21336                                  	; 23/07/2019 - Retro DOS v3.2
 21337                                  	; (MSDOS 6.0, 'DskWrtBufPurge')
 21338                                  
 21339                                  	;push	bx
 21340 000046D3 51                      	push	cx ; *1*
 21341                                  
 21342 000046D4 368B1E[B005]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 21343 000046D9 89DE                    	mov	si,bx
 21344 000046DB 01D1                    	add	cx,dx
 21345 000046DD 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 21346                                  
 21347                                  	;;mov	al,[es:bp+0]
 21348                                  	;mov	al,[es:bp+DPB.DRIVE]
 21349 000046E0 268A4600                	mov	al,[es:bp]
 21350                                  
 21351                                  	; MSDOS 6.0
 21352                                  ;	BX:DX = Extent start.
 21353                                  ;	SI:CX = Extent end + 1.
 21354                                  ;	AL = Drive #
 21355                                  
 21356                                  	; MSDOS 3.3
 21357 000046E4 E8DB19                  	call	SETVISIT
 21358                                  		; DS:DI = [BUFFHEAD]
 21359                                  wbufq1:
 21360                                  	;or	byte [di+5],20h
 21361 000046E7 804D0520                	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 21362                                  
 21363                                  	; 23/07/2019 - Retro DOS v3.2
 21364                                  
 21365                                  	;cmp	al,[di+4]	
 21366 000046EB 3A4504                  	cmp	al,[DI+BUFFINFO.buf_ID]
 21367 000046EE 751C                    	jne	short wbufq2		;Same drive?
 21368                                  					;  -no, jump.
 21369                                  	; MSDOS 3.3
 21370                                  	;;cmp	[di+6],dx
 21371                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 21372                                  	;jb	short wbufq2	; Jump if Extent start > buffer sector.	
 21373                                  	;;cmp	[di+6],bx
 21374                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 21375                                  	;jnb	short wbufq2	; Jump if Extent end <= buffer sector.
 21376                                  
 21377                                  	; MSDOS 6.0 (code modified in Retro DOS v3.2) ; 23/07/2019
 21378                                   	;cmp	bx,[di+8]
 21379 000046F0 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 21380 000046F3 7503                    	jne	short bufq04
 21381                                  	;cmp	dx,[di+6]
 21382 000046F5 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 21383                                  bufq04:
 21384 000046F8 7712                    	ja	short wbufq2 	; Jump if Extent start > buffer sector.
 21385                                  
 21386                                  	;cmp	si,[di+8]
 21387 000046FA 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 21388 000046FD 7503                    	jne	short bufq05
 21389                                  	;cmp	cx,[di+6]
 21390 000046FF 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 21391                                  bufq05:
 21392 00004702 7608                    	jna	short wbufq2	; Jump if Extent end <= buffer sector.
 21393                                  
 21394                                  	; 23/07/2019
 21395                                  
 21396                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21397                                  
 21398                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 21399                                  
 21400                                  	;mov	word [di+4],20FFh
 21401                                  	;mov	word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 21402 00004704 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],20FFh
 21403                                  					; .buf_ID,    AL = FFh (Free buffer)
 21404                                  					; .buf_flags, AH = 0, reset/clear
 21405 00004709 E8E319                  	call	SCANPLACE
 21406                                  wbufq2:
 21407                                  	; AL = Drive #
 21408                                  	; MSDOS 3.3
 21409 0000470C E8CC19                  	call	SKIPVISIT
 21410 0000470F 75D6                    	jnz	short wbufq1  ; AL = Drive # ; 23/07/2019
 21411                                  
 21412                                  	; 23/07/2019 - Retro DOS v3.2
 21413                                  
 21414                                  	; MSDOS 6.0
 21415 00004711 59                      	pop	cx ; *1* ; # of contiguous sectors to write
 21416                                  	;pop	bx 
 21417                                  
 21418                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21419 00004712 5B                      	pop	bx ; *2* ; [DMAADD+2]:BX = Transfer address (source data address)
 21420 00004713 5A                      	pop	dx ; *3* ; [HIGH_SECTOR]:DX = Extent start		
 21421                                  	
 21422                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21423                                  ;hkn; SS override for DMAADD and ALLOWED
 21424 00004714 368E1E[FA02]            	MOV     DS,[SS:DMAADD+2]
 21425                                  	;mov	byte [ss:ALLOWED],38h
 21426 00004719 36C606[1503]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 21427                                  
 21428                                  ;	put logic from DWRITE in-line here so we can modify it
 21429                                  ;	for DISK FULL conditions.
 21430                                  
 21431                                  	; MSDOS 3.3
 21432                                  	;call	DWRITE
 21433                                  
 21434                                  ;DWRITE_OKAY:
 21435                                  
 21436                                  DWRITE_LUP:
 21437                                  	; 23/07/2019 - Retro DOS v3.2
 21438                                  
 21439                                  	; MSDOS 6.0
 21440 0000471F E8B3FB                  	call	DSKWRITE
 21441 00004722 7417                    	jz	short DWRITE_OKAY
 21442                                  
 21443                                  ;;	int	3
 21444 00004724 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 21445 00004726 7427                    	jz	short DWRITE_DISK_FULL
 21446                                  
 21447                                  ;;hkn; SS override
 21448 00004728 36C606[3205]01          	MOV	BYTE [SS:READOP],1
 21449 0000472E E8D3FB                  	call	HARDERRRW
 21450 00004731 3C01                    	CMP	AL,1		; Check for retry
 21451 00004733 74EA                    	JZ	short DWRITE_LUP
 21452                                  
 21453                                  	; 29/07/2019 - Retro DOS v3.2
 21454                                  
 21455 00004735 3C03                    	CMP	AL,3		; Check for FAIL
 21456 00004737 F8                      	CLC
 21457 00004738 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 21458 0000473A F9                      	STC
 21459                                  DWRITE_OKAY:
 21460                                  	; 29/07/2019
 21461                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21462 0000473B 59                      	POP     CX ; *4*
 21463 0000473C 5B                      	POP	BX ; *5*
 21464                                  
 21465                                  ;       CX = # sectors remaining.
 21466                                  ;       BX = Next physical cluster.
 21467                                  
 21468                                  ;hkn; SS override
 21469                                          ;Context DS
 21470                                  	;push	ss
 21471                                  	;pop	ds
 21472 0000473D 720D                    	JC	short SET_ACC_ERRW
 21473                                  	; 16/12/2022
 21474 0000473F 16                      	push	ss
 21475 00004740 1F                      	pop	ds
 21476 00004741 E318                    	JCXZ    WRTLAST
 21477                                  	;MOV	DL,0
 21478 00004743 30D2                    	xor	dl,dl ; 23/07/2019
 21479 00004745 FF06[7605]              	INC     word [LASTPOS]	; We'll be using next cluster
 21480 00004749 E97EFF                  	JMP	WRTLP
 21481                                  
 21482                                  	; 29/07/2019
 21483                                  SET_ACC_ERRW:
 21484 0000474C E9F3FC                  	jmp	SET_ACC_ERR_DS
 21485                                  
 21486                                  	; 23/07/2019 - Retro DOS v3.2
 21487                                  	; 09/08/2018
 21488                                  	; MSDOS 6.0
 21489                                  DWRITE_DISK_FULL:
 21490                                  	;;Context DS		;SQ 3-5-93 DS must be setup on return!
 21491                                  	; 16/12/2022 (BugFix)
 21492 0000474F 16                      	push	ss
 21493 00004750 1F                      	pop	ds
 21494 00004751 59                      	pop	cx		; unjunk stack
 21495 00004752 5B                      	pop	bx
 21496 00004753 C606[C20F]01            	mov	byte [DISK_FULL],1
 21497                                  	;stc
 21498 00004758 E9E5FE                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 21499                                  
 21500                                  ;SET_ACC_ERRW:
 21501                                  ;	jmp	SET_ACC_ERR_DS
 21502                                  
 21503                                  WRTLAST:
 21504 0000475B A1[9005]                	MOV     AX,[BYTCNT2]
 21505 0000475E 09C0                    	OR      AX,AX
 21506 00004760 7413                    	JZ	short FINWRT
 21507 00004762 A3[8E05]                	MOV     [BYTCNT1],AX
 21508 00004765 E8FD0E                  	call	NEXTSEC
 21509 00004768 72E2                    	JC	short SET_ACC_ERRW
 21510 0000476A C706[8805]0000          	MOV     word [BYTSECPOS],0
 21511 00004770 E8960E                  	call	BUFWRT
 21512 00004773 72D7                    	JC	short SET_ACC_ERRW
 21513                                  FINWRT:
 21514 00004775 C43E[5A05]              	LES     DI,[THISSFT]
 21515 00004779 A1[9A05]                	MOV     AX,[GROWCNT]
 21516 0000477C 8B0E[9C05]              	MOV     CX,[GROWCNT+2]
 21517 00004780 09C0                    	OR      AX,AX
 21518 00004782 7502                    	JNZ	short UPDATE_size
 21519 00004784 E30F                    	JCXZ    SAMSIZ
 21520                                  UPDATE_size:
 21521                                  	;add	[es:di+11h],ax
 21522 00004786 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 21523                                  	;adc	[es:di+13h],cx
 21524 0000478A 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 21525                                  ;
 21526                                  ; Make sure that all other SFT's see this growth also.
 21527                                  ;
 21528 0000478E B80100                  	MOV     AX,1
 21529                                  ;if installed
 21530                                  	;Call	JShare + 14 * 4
 21531 00004791 FF1E[9400]              	call    far [JShare+(14*4)]	; 14 = ShSU
 21532                                  ;else
 21533                                  ;	Call    ShSU
 21534                                  ;endif
 21535                                  
 21536                                  SAMSIZ:
 21537 00004795 E9ACFD                  	jmp	SETCLUS	; ES:DI already points to SFT
 21538                                  
 21539                                  WRTEOF:
 21540 00004798 89C1                    	MOV     CX,AX
 21541 0000479A 09D1                    	OR      CX,DX
 21542 0000479C 746C                    	JZ	short KILLFIL
 21543 0000479E 83E801                  	SUB     AX,1
 21544 000047A1 83DA00                  	SBB     DX,0
 21545                                  
 21546                                  	; 23/07/2019 - Retro DOS v3.2
 21547                                  
 21548                                  	; MSDOS 3.3
 21549                                  	;;div	word [es:bp+2]
 21550                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 21551                                  	;;mov	cl,[es:bp+5]
 21552                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 21553                                  	;shr	ax,cl
 21554                                  
 21555                                  	; MSDOS 6.0
 21556 000047A4 53                      	PUSH	BX
 21557                                  	;mov	bx,[es:bp+2]
 21558 000047A5 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 21559 000047A9 E89B00                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 21560 000047AC 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 21561 000047AD 89CA                    	MOV	DX,CX			      ;M039
 21562 000047AF 890E[B005]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 21563 000047B3 E8B800                  	CALL	SHR32                         ;F.C. >32mb   
 21564                                  
 21565 000047B6 89C1                    	MOV     CX,AX
 21566 000047B8 E8A10D                  	call	FNDCLUS
 21567                                  SET_ACC_ERRWJ2:
 21568 000047BB 728F                    	JC	short SET_ACC_ERRW
 21569                                  
 21570 000047BD E326                    	JCXZ    RELFILE
 21571 000047BF E8600F                  	call	ALLOCATE
 21572 000047C2 721E                    	JC	short WRTERRJ              ;;;;;;;;; disk full
 21573                                  
 21574                                  UPDATE:
 21575 000047C4 C43E[5A05]              	LES	DI,[THISSFT]
 21576 000047C8 A1[8A05]                	MOV	AX,[BYTPOS]
 21577                                  	;mov	[es:di+11h],ax
 21578 000047CB 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 21579 000047CF A1[8C05]                	MOV	AX,[BYTPOS+2]
 21580                                  	;mov	[es:di+13h],ax
 21581 000047D2 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 21582                                  ;
 21583                                  ; Make sure that all other SFT's see this growth also.
 21584                                  ;
 21585 000047D6 B80200                  	MOV     AX,2
 21586                                  ;if installed
 21587                                  	;Call	JShare + 14 * 4
 21588 000047D9 FF1E[9400]              	call    far [JShare+(14*4)]	; 14 = ShSU
 21589                                  ;else
 21590                                  ;	Call    ShSU
 21591                                  ;endif
 21592 000047DD 31C9                    	XOR     CX,CX
 21593 000047DF E97FFD                  	jmp	ADDREC
 21594                                  
 21595                                  WRTERRJ: 
 21596 000047E2 E95BFE                  	JMP     WRTERR
 21597                                  
 21598                                  ;;;;;;;;;;;;;;;; 7/18/86
 21599                                  ;;;;;;;;;;;;;;;;
 21600                                  
 21601                                  RELFILE:
 21602                                  	; MSDOS 6.0
 21603 000047E5 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 21604 000047E6 C43E[5A05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 21605 000047EA 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 21606 000047EE 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 21607 000047F0 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 21608 000047F6 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 21609 000047FA 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 21610                                  SKIPRESET:                            		;AN002; BL
 21611 000047FE 07                      	POP     ES                    		;AN002; BL
 21612                                  ;
 21613 000047FF BAFFFF                  	MOV     DX,0FFFFH
 21614 00004802 E8CB0F                  	call	RELBLKS
 21615 00004805 73BD                    	jnc	short UPDATE
 21616                                  SET_ACC_ERRWJJ:
 21617                                  	;JC	short SET_ACC_ERRWJ2
 21618                                  	;JMP	SHORT UPDATE
 21619 00004807 E938FC                  	jmp	SET_ACC_ERR_DS
 21620                                  
 21621                                  KILLFIL:
 21622 0000480A 31DB                    	XOR     BX,BX
 21623 0000480C 06                      	PUSH    ES
 21624 0000480D C43E[5A05]              	LES     DI,[THISSFT]
 21625 00004811 26895D19                	mov	[es:di+19h],bx
 21626 00004815 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 21627                                  	;mov	[es:di+1Bh],bx
 21628                                  	;mov	[ers:di+35h],bx ; MSDOS 6.0
 21629 00004819 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 21630                                  	;xchg	bx,[es:di+0Bh]
 21631 0000481D 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 21632 00004821 07                      	POP	ES
 21633                                  
 21634 00004822 09DB                    	OR	BX,BX
 21635                                  	;JZ	short UPDATEJ
 21636 00004824 749E                    	jz	short UPDATE
 21637                                  
 21638                                  ;; 10/23/86 FastOpen update
 21639 00004826 06                      	PUSH	ES              ; since first cluster # is 0
 21640 00004827 55                      	PUSH	BP              ; we must delete the old cache entry
 21641 00004828 50                      	PUSH	AX
 21642 00004829 51                      	PUSH	CX
 21643 0000482A 52                      	PUSH	DX
 21644 0000482B C42E[4605]              	LES	BP,[THISDPB]             ; get current DPB
 21645 0000482F 268A5600                	mov	dl,[ES:BP] ; mov al,[es:bp+0]
 21646                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 21647 00004833 89D9                    	MOV	CX,BX                    ; first cluster #
 21648 00004835 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 21649 00004837 E84AEC                  	call	FastOpen_Update          ; call fastopen
 21650 0000483A 5A                      	POP	DX
 21651 0000483B 59                      	POP	CX
 21652 0000483C 58                      	POP	AX
 21653 0000483D 5D                      	POP	BP
 21654 0000483E 07                      	POP	ES
 21655                                  ;; 10/23/86 FastOpen update
 21656                                  
 21657 0000483F E88C0F                  	call	RELEASE
 21658 00004842 72C3                    	JC	short SET_ACC_ERRWJJ
 21659                                  UpDateJ:
 21660 00004844 E97DFF                  	JMP	UPDATE ; 10/08/2018
 21661                                  
 21662                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 21663                                  ;----------------------------------------------------------------------------
 21664                                  ;
 21665                                  ; Procedure Name : DskWrtBufPurge
 21666                                  ;
 21667                                  ; Inputs:
 21668                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 21669                                  ;	     sectors, also termed an "Extent".)
 21670                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 21671                                  ;       ES:BP -> Drive Parameter Block (DPB).
 21672                                  ;
 21673                                  ; Function:
 21674                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 21675                                  ;	are in Extent; they are being over-written.
 21676                                  ;
 21677                                  ; Outputs:
 21678                                  ;       (Same as Input.)
 21679                                  ; Uses:
 21680                                  ;       All registers except DS,AX,SI,DI preserved.
 21681                                  ;       SS override for all global variables.
 21682                                  ;----------------------------------------------------------------------------
 21683                                  ;M039: Created
 21684                                  
 21685                                  ;procedure   DskWrtBufPurge,NEAR
 21686                                  ;
 21687                                  ;ASSUME  DS:NOTHING
 21688                                  ;
 21689                                  ;       SaveReg <bx,cx>
 21690                                  ;       mov	bx,[HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 21691                                  ;       mov     si,bx
 21692                                  ;       add     cx,dx
 21693                                  ;       adc     si,0                    ;SI:CX = Extent end + 1.
 21694                                  ;
 21695                                  ;	Assert  ISDPB,<ES,BP>,"DskWrtBufPurge"
 21696                                  ;	mov     al,es:[bp.dpb_drive]
 21697                                  ;
 21698                                  ;;      BX:DX = Extent start.
 21699                                  ;;      SI:CX = Extent end + 1.
 21700                                  ;;      AL = Drive #
 21701                                  ;
 21702                                  ;	cmp     [SC_CACHE_COUNT],0      ;Secondary cache in-use?
 21703                                  ;	je      nosc                    ; -no, jump.
 21704                                  ;
 21705                                  ;;      If any of the sectors to be written are in the secondary cache (SC),
 21706                                  ;;      invalidate the entire SC. (This is an optimization; we really only
 21707                                  ;;	need to invalidate those sectors which intersect, but that's slower.)
 21708                                  ;
 21709                                  ;       cmp     al,[CURSC_DRIVE]        ;Same drive?
 21710                                  ;       jne     nosc                    ; -no, jump.
 21711                                  ;
 21712                                  ;       push    ax
 21713                                  ;       mov     ax,[CURSC_SECTOR]
 21714                                  ;       mov     di,[CURSC_SECTOR+2]     ;DI:AX = SC start.
 21715                                  ;       Cmp32   si,cx,di,ax             ;Extent end < SC start?
 21716                                  ;       jbe     sc5                     ; -yes, jump.
 21717                                  ;       add     ax,[SC_CACHE_COUNT]
 21718                                  ;       adc     di,0                    ;DI:AX = SC end + 1.
 21719                                  ;       Cmp32   bx,dx,di,ax             ;Extent start > SC end?
 21720                                  ;       jae     sc5                     ; -yes, jump.
 21721                                  ;       mov     [SC_STATUS],0           ;Extent intersects SC: invalidate SC.
 21722                                  ;sc5:	pop     ax
 21723                                  ;
 21724                                  ;;	Free any buffered sectors which are in Extent; they are being over-
 21725                                  ;;	written.
 21726                                  ;
 21727                                  ;nosc:	invoke  GETCURHEAD              ;DS:DI -> first buffer in queue.
 21728                                  ;
 21729                                  ;bufq:	cmp     al,BYTE PTR [di.buf_ID] ;Same drive?
 21730                                  ;	jne     bufq5                   ; -no, jump.
 21731                                  ;
 21732                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 21733                                  ;       ja	bufq5			;Jump if Extent start > buffer sector.
 21734                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 21735                                  ;       jbe	bufq5                   ;Jump if Extent end < buffer sector.
 21736                                  ;
 21737                                  ;;      Buffer's sector is in Extent, so free it; it is being over-written.
 21738                                  ;
 21739                                  ;       testb   [di.buf_flags],buf_dirty ;Buffer dirty?
 21740                                  ;       jz      bufq2                    ; -no, jump.
 21741                                  ;       invoke  DEC_DIRTY_COUNT          ; -yes, decrement dirty count.
 21742                                  ;bufq2: mov     WORD PTR [di.buf_ID],((buf_visit SHL 8) OR 0FFh)
 21743                                  ;
 21744                                  ;       invoke  SCANPLACE
 21745                                  ;       jmp     short bufq6
 21746                                  ;
 21747                                  ;bufq5: mov     di,[di.buf_next]
 21748                                  ;bufq6: cmp     di,[FIRST_BUFF_ADDR]    ;Scanned entire buffer queue?
 21749                                  ;       jne     bufq	                ; --no, go do next buffer.
 21750                                  ;
 21751                                  ;       RestoreReg <cx,bx>
 21752                                  ;       return
 21753                                  ;
 21754                                  ;EndProc DskWrtBufPurge
 21755                                  
 21756                                  ; 23/07/2019 - Retro DOS v3.2
 21757                                  
 21758                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 21759                                  ;----------------------------------------------------------------------------
 21760                                  ;
 21761                                  ; Procedure Name : DIV32
 21762                                  ;
 21763                                  ; Inputs:
 21764                                  ;       DX:AX = 32 bit dividend   BX= divisor
 21765                                  ; Function:
 21766                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 21767                                  ; Outputs:
 21768                                  ;       CX:AX = quotient , DX= remainder
 21769                                  ; Uses:
 21770                                  ;       All registers except AX,CX,DX preserved.
 21771                                  ;----------------------------------------------------------------------------
 21772                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 21773                                  
 21774                                  ; 04/05/2019 - Retro DOS v4.0
 21775                                  
 21776                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 21777                                  
 21778                                  DIV32:
 21779 00004847 81FB0002                	cmp	bx,512
 21780 0000484B 7515                    	jne	short div5
 21781                                  
 21782 0000484D 89D1                    	mov	cx,dx
 21783 0000484F 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 21784 00004851 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 21785 00004855 88E0                    	mov	al,ah
 21786 00004857 88CC                    	mov	ah,cl
 21787 00004859 88E9                    	mov	cl,ch
 21788 0000485B 30ED                    	xor	ch,ch
 21789 0000485D D1E9                    	shr	cx,1
 21790 0000485F D1D8                    	rcr	ax,1
 21791 00004861 C3                      	retn
 21792                                  div5:	
 21793 00004862 89C1                    	mov	cx,ax
 21794 00004864 89D0                    	mov	ax,dx
 21795 00004866 31D2                    	xor	dx,dx
 21796 00004868 F7F3                    	div	bx              ; 0:AX/BX
 21797 0000486A 91                      	xchg	cx,ax
 21798 0000486B F7F3                    	div	bx              ; DX:AX/BX
 21799 0000486D C3                      	retn
 21800                                  
 21801                                  ; 23/07/2019 - Retro DOS v3.2
 21802                                  
 21803                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 21804                                  ;----------------------------------------------------------------------------
 21805                                  ;
 21806                                  ; Procedure Name : SHR32
 21807                                  ;
 21808                                  ; Inputs:
 21809                                  ;	DX:AX = 32 bit sector number
 21810                                  ; Function:
 21811                                  ;       Perform 32 bit shift right
 21812                                  ; Outputs:
 21813                                  ;	AX = cluster number
 21814                                  ;	ZF = 1 if no error
 21815                                  ;	   = 0 if error (cluster number > 64k)
 21816                                  ; Uses:
 21817                                  ;       DX,CX
 21818                                  ;---------------------------------------------------------------------------
 21819                                  ; M017	- SHR32 rewritten for better performance
 21820                                  ; M039	- Additional optimization
 21821                                  
 21822                                  ; 04/05/2019 - Retro DOS v4.0
 21823                                  
 21824                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 21825                                  
 21826                                  SHR32:
 21827                                  	;mov	cl,[es:bp+5]
 21828 0000486E 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 21829 00004872 30ED                    	xor	ch,ch	    ;ZF=1
 21830 00004874 E306                    	jcxz	norota
 21831                                  
 21832                                  rotashft2:
 21833 00004876 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 21834 00004878 D1D8                    	rcr	ax,1	    ;ZF not affected.
 21835 0000487A E2FA                    	loop	rotashft2
 21836                                  norota:
 21837 0000487C C3                      	retn
 21838                                  
 21839                                  ;============================================================================
 21840                                  ; DIR.ASM, MSDOS 6.0, 1991
 21841                                  ;============================================================================
 21842                                  ; 27/07/2018 - Retro DOS v3.0 
 21843                                  
 21844                                  ;	TITLE	DIR - Directory and path cracking
 21845                                  ;	NAME	Dir
 21846                                  
 21847                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 21848                                  ;---------------------------------------------------------------------------
 21849                                  ;
 21850                                  ; Procedure Name : FINDENTRY,SEARCH
 21851                                  ;
 21852                                  ; Inputs:
 21853                                  ;	[THISDPB] set
 21854                                  ;	[SECCLUSPOS] = 0
 21855                                  ;	[DIRSEC] = Starting directory sector number
 21856                                  ;	[CLUSNUM] = Next cluster of directory
 21857                                  ;	[CLUSFAC] = Sectors/Cluster
 21858                                  ;	[NAME1] = Name to look for
 21859                                  ; Function:
 21860                                  ;	Find file name in disk directory.
 21861                                  ;	"?" matches any character.
 21862                                  ; Outputs:
 21863                                  ;	Carry set if name not found
 21864                                  ;	ELSE
 21865                                  ;	Zero set if attributes match (always except when creating)
 21866                                  ;	AH = Device ID (bit 7 set if not disk)
 21867                                  ;	[THISDPB] = Base of drive parameters
 21868                                  ;	DS = DOSGROUP
 21869                                  ;	ES = DOSGROUP
 21870                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 21871                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 21872                                  ;	[CURBUF] has directory record with match
 21873                                  ;	[NAME1] has file name
 21874                                  ;	[LASTENT] is entry number of the entry
 21875                                  ; All other registers destroyed.
 21876                                  ;----------------------------------------------------------------------------
 21877                                  
 21878                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 21879                                  ;hkn; this point.
 21880                                  
 21881                                  SEARCH:
 21882                                  	; 27/07/2018 - Retro DOS v3.0
 21883                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 21884                                  	; 15/03/2018 - Retro DOS v2.0
 21885                                  
 21886                                  	;entry	FindEntry
 21887                                  FINDENTRY:
 21888 0000487D E83804                  	call	STARTSRCH
 21889 00004880 A0[2805]                	MOV	AL,[ATTRIB]
 21890                                  	;and	al,9Eh
 21891 00004883 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 21892                                  	;cmp	al,8
 21893 00004885 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 21894 00004887 7503                    	JNZ	short NOTVOLSRCH	; No
 21895 00004889 E87601                  	CALL	SETROOTSRCH		; Yes force search of root
 21896                                  NOTVOLSRCH:
 21897 0000488C E80601                  	CALL	GETENTRY
 21898 0000488F 7303                    	JNC	short SRCH
 21899 00004891 E99500                  	JMP	SETESRET
 21900                                  
 21901                                  	;entry	Srch
 21902                                  SRCH:
 21903 00004894 1E                      	PUSH	DS
 21904 00004895 8E1E[A005]              	MOV	DS,[CURBUF+2]
 21905                                  
 21906                                  ;	(DS:BX) = directory entry address
 21907                                  
 21908 00004899 8A27                    	mov	ah,[BX]
 21909                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 21910 0000489B 08E4                    	OR	AH,AH			; End of directory?
 21911 0000489D 743A                    	JZ	short FREE
 21912                                  
 21913                                  ;hkn; SS override
 21914 0000489F 363A26[3B05]            	CMP	AH,[SS:DELALL]		; Free entry?
 21915 000048A4 7433                    	JZ	short FREE
 21916                                  	;test	byte [bx+0Bh],8
 21917 000048A6 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 21918                                  					; Volume ID file?
 21919 000048AA 7405                    	JZ	short CHKFNAM 		; NO
 21920                                  
 21921                                  ;hkn; SS override
 21922 000048AC 36FE06[3805]            	INC	BYTE [SS:VOLID]
 21923                                  CHKFNAM:
 21924                                  ;	Context ES
 21925 000048B1 8CD6                    	MOV	SI,SS
 21926 000048B3 8EC6                    	MOV	ES,SI
 21927 000048B5 89DE                    	MOV	SI,BX
 21928                                  
 21929                                  ;hkn; NAME1 is in DOSDATA
 21930 000048B7 BF[0805]                	MOV	DI,NAME1
 21931                                  ;;;;; 7/29/86
 21932                                  
 21933                                  ;hkn; SS override for NAME1
 21934 000048BA 36803E[0805]E5          	CMP	BYTE [SS:NAME1],0E5H	; special char check
 21935 000048C0 7506                    	JNZ	short NO_E5
 21936 000048C2 36C606[0805]05          	MOV	BYTE [SS:NAME1],05H
 21937                                  NO_E5:
 21938                                  ;;;;; 7/29/86
 21939 000048C8 E86100                  	CALL	MetaCompare
 21940 000048CB 7428                    	JZ	short FOUND
 21941 000048CD 1F                      	POP	DS
 21942                                  
 21943                                  	;entry	NEXTENT
 21944                                  NEXTENT:
 21945 000048CE C42E[4605]              	LES	BP,[THISDPB]
 21946 000048D2 E86600                  	CALL	NEXTENTRY
 21947 000048D5 73BD                    	JNC	short SRCH
 21948 000048D7 EB50                    	JMP	SHORT SETESRET
 21949                                  
 21950                                  FREE:
 21951 000048D9 1F                      	POP	DS
 21952 000048DA 8B0E[1203]              	MOV	CX,[LASTENT]
 21953 000048DE 3B0E[9405]              	CMP	CX,[ENTFREE]
 21954 000048E2 7304                    	JAE	short TSTALL
 21955 000048E4 890E[9405]              	MOV	[ENTFREE],CX
 21956                                  TSTALL:
 21957 000048E8 3A26[3B05]              	CMP	AH,[DELALL]		; At end of directory?
 21958                                  NEXTENTJ:
 21959 000048EC 74E0                    	je	short NEXTENT 		; No - continue search
 21960 000048EE 890E[9605]              	MOV	[ENTLAST],CX
 21961 000048F2 F9                      	STC
 21962 000048F3 EB34                    	JMP	SHORT SETESRET
 21963                                  
 21964                                  FOUND:
 21965                                  ;
 21966                                  ; We have a file with a matching name. We must now consider the attributes:
 21967                                  ; ATTRIB	Action
 21968                                  ; ------	------
 21969                                  ; Volume_ID	Is Volume_ID in test?
 21970                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 21971                                  ;		If create then Is ATTRIB equal to test?
 21972                                  ;
 21973 000048F5 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 21974 000048F7 1F                      	POP	DS
 21975 000048F8 8A26[2805]              	MOV	AH,[ATTRIB]		; Attributes of search
 21976                                  	;and	ah,9Eh
 21977 000048FC 80E4DE                  	AND	AH,~attr_ignore
 21978                                  	;lea	si,[si+15]
 21979 000048FF 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 21980                                  					; point to first cluster field
 21981                                  	;test	ch,8
 21982 00004902 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 21983 00004905 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 21984                                  	;test	ah,8
 21985 00004907 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 21986                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 21987 0000490A 74C2                    	jz	short NEXTENT ; 19/05/2019
 21988 0000490C 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 21989 0000490E EB11                    	JMP	SHORT RETFF		; Found Volume ID
 21990                                  check_one_volume_id:
 21991                                  	;CMP	ah,8
 21992 00004910 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 21993                                  	;JZ	short NEXTENTJ		; Yes, continue search
 21994 00004913 74B9                    	je	short NEXTENT ; 19/05/2019
 21995 00004915 E8B403                  	CALL	MatchAttributes
 21996 00004918 7407                    	JZ	SHORT RETFF
 21997 0000491A F606[3A05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 21998                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 21999 0000491F 74AD                    	jz	short NEXTENT ; 19/05/2019
 22000                                  RETFF:
 22001 00004921 C42E[4605]              	LES	BP,[THISDPB]
 22002 00004925 268A6600                	MOV	AH,[ES:BP]
 22003                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 22004                                  SETESRET:
 22005 00004929 16                      	PUSH	SS
 22006 0000492A 07                      	POP	ES
 22007 0000492B C3                      	retn
 22008                                  
 22009                                  ;----------------------------------------------------------------------------
 22010                                  ;
 22011                                  ; Procedure Name : MetaCompare
 22012                                  ;
 22013                                  ; Inputs:
 22014                                  ;	DS:SI -> 11 character FCB style name NO '?'
 22015                                  ;	    Typically this is a directory entry.  It MUST be in upper case
 22016                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 22017                                  ;	    Typically this is a FCB or SFT.  It MUST be in upper case
 22018                                  ; Function:
 22019                                  ;	Compare FCB style names allowing for ? match to any char
 22020                                  ; Outputs:
 22021                                  ;	Zero if match else NZ
 22022                                  ; Destroys CX,SI,DI all others preserved
 22023                                  ;----------------------------------------------------------------------------
 22024                                  
 22025                                  MetaCompare:
 22026 0000492C B90B00                  	MOV	CX,11
 22027                                  WILDCRD:
 22028 0000492F F3A6                    	REPE	CMPSB
 22029 00004931 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 22030                                  CHECK_META:
 22031 00004933 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 22032 00004938 74F5                    	JZ	short WILDCRD
 22033                                  MetaRet:
 22034 0000493A C3                       	retn				; Zero set, Match
 22035                                  
 22036                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 22037                                  ;----------------------------------------------------------------------------
 22038                                  ;
 22039                                  ; Procedure Name : NEXTENTRY
 22040                                  ;
 22041                                  ; Inputs:
 22042                                  ;	Same as outputs of GETENTRY, above
 22043                                  ; Function:
 22044                                  ;	Update BX, and [LASTENT] for next directory entry.
 22045                                  ;	Carry set if no more.
 22046                                  ;----------------------------------------------------------------------------
 22047                                  
 22048                                  NEXTENTRY:
 22049                                  	; 23/07/2019 - Retro DOS v3.2
 22050                                  	; 19/05/2019 - Retro DOS v4.0
 22051                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 22052                                  	; 27/07/2018 - Retro DOS v3.0
 22053                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 22054                                  	; 15/03/2018 - Retro DOS v2.0
 22055                                  
 22056 0000493B A1[1203]                	MOV	AX,[LASTENT]
 22057 0000493E 3B06[9605]              	CMP	AX,[ENTLAST]
 22058 00004942 7422                    	JZ	short NONE
 22059 00004944 40                      	INC	AX
 22060                                  	;ADD	BX,32
 22061 00004945 8D5F20                  	LEA	BX,[BX+32]
 22062 00004948 39D3                    	CMP	BX,DX
 22063 0000494A 721C                    	JB	short HAVIT
 22064                                  	;jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 22065 0000494C 8A1E[3005]              	MOV	BL,[SECCLUSPOS]
 22066 00004950 FEC3                    	INC	BL
 22067 00004952 3A1E[3405]              	CMP	BL,[CLUSFAC]
 22068 00004956 7215                    	JB	short SAMECLUS
 22069 00004958 8B1E[9805]              	MOV	BX,[NXTCLUSNUM]
 22070 0000495C E8BB13                  	call	IsEOF
 22071 0000495F 7305                    	JAE	short NONE
 22072                                  	; 23/07/2019
 22073 00004961 83FB02                  	CMP	BX,2
 22074                                  	;JB	short NONE
 22075                                  	;JMP	short GETENT
 22076 00004964 7332                    	jnb	short GETENT
 22077                                  NONE:
 22078 00004966 F9                      	STC
 22079 00004967 C3                      	retn
 22080                                  HAVIT:
 22081 00004968 A3[1203]                	MOV	[LASTENT],AX
 22082 0000496B F8                      	CLC
 22083                                  nextentry_retn:
 22084 0000496C C3                      	retn
 22085                                  SAMECLUS:
 22086 0000496D 881E[3005]              	MOV	[SECCLUSPOS],BL
 22087 00004971 A3[1203]                	MOV	[LASTENT],AX
 22088 00004974 1E                      	PUSH	DS
 22089 00004975 C53E[9E05]              	LDS	DI,[CURBUF]
 22090                                  
 22091                                  	; 22/07/2019 - Retro DOS v3.2
 22092                                  	; MSDOS 6.0
 22093                                  	;mov	dx,[di+8]
 22094 00004979 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 22095                                  ;hkn; SS override
 22096                                  	;MOV	[ss:HIGH_SECTOR],DX		;AN000; >32mb
 22097 0000497C 2E8916[B005]            	mov	[cs:HIGH_SECTOR],dx ; 23/07/2019
 22098                                  	;mov	dx,[di+6]
 22099 00004981 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 22100                                  	;inc	dx  ; MSDOS 3.3
 22101 00004984 83C201                  	ADD	DX,1				;AN000; >32mb
 22102                                  	;ADC	word [ss:HIGH_SECTOR],0 		;AN000; >32mb
 22103 00004987 2E8316[B005]00          	adc	word [cs:HIGH_SECTOR],0 ; 23/07/2019
 22104 0000498D 1F                      	POP	DS
 22105 0000498E E886F8                  	call	FIRSTCLUSTER
 22106 00004991 31DB                    	XOR	BX,BX
 22107 00004993 EB23                    	JMP	short SETENTRY
 22108                                  
 22109                                  ;----------------------------------------------------------------------------
 22110                                  ;
 22111                                  ; Procedure Name : GETENTRY
 22112                                  ;
 22113                                  ; Inputs:
 22114                                  ;	[LASTENT] has directory entry
 22115                                  ;	ES:BP points to drive parameters
 22116                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 22117                                  ; Function:
 22118                                  ;	Locates directory entry in preparation for search
 22119                                  ;	GETENT provides entry for passing desired entry in AX
 22120                                  ; Outputs:
 22121                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 22122                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 22123                                  ;	[LASTENT] = New directory entry number
 22124                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 22125                                  ;	Carry set if error (currently user FAILed to I 24)
 22126                                  ;----------------------------------------------------------------------------
 22127                                  
 22128                                  GETENTRY:
 22129                                  	; 27/07/2018 - Retro DOS v3.0
 22130 00004995 A1[1203]                	MOV	AX,[LASTENT]
 22131                                  
 22132                                  	;entry	GETENT
 22133                                  GETENT:
 22134 00004998 A3[1203]                	MOV	[LASTENT],AX
 22135                                  ;
 22136                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 22137                                  ; directory.
 22138                                  ;
 22139 0000499B B105                    	mov	cl,5			; shift left by 5 = mult by 32
 22140 0000499D D3C0                    	rol	ax,cl			; keep hight order bits
 22141 0000499F 89C2                    	mov	dx,ax
 22142                                  	;and	ax,0FFE0h
 22143                                  	;;and	ax,~(32-1)		; mask off high order bits
 22144 000049A1 24E0                    	and	al,0E0h ; ~31 ; 19/05/2019
 22145 000049A3 83E21F                  	and	dx,1Fh
 22146                                  	;and	dx,32-1			; mask off low order bits
 22147                                  ;
 22148                                  ; DX:AX contain the byte offset of the required directory entry from the
 22149                                  ; beginning of the directory. Convert this to a sector number. Round the
 22150                                  ; sector size down to a multiple of 32.
 22151                                  ;
 22152                                  	;mov	bx,[es:bp+2]
 22153 000049A6 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 22154 000049AA 80E3E0                  	and	bl,0E0h
 22155                                  	;AND	BL,255-31		; Must be multiple of 32
 22156 000049AD F7F3                    	DIV	BX
 22157 000049AF 89D3                    	MOV	BX,DX			; Position within sector
 22158 000049B1 53                      	PUSH	BX
 22159 000049B2 E809F8                  	call	DIRREAD
 22160 000049B5 5B                      	POP	BX
 22161                                  	;retc
 22162 000049B6 72B4                    	jc	short nextentry_retn	
 22163                                  SETENTRY:
 22164 000049B8 8B16[9E05]              	MOV	DX,[CURBUF]
 22165                                  	;add	dx,16 ; MSDOS 3.3
 22166                                  	;add	dx,20 ; MSDOS 6.0 
 22167 000049BC 83C214                  	ADD	DX,BUFINSIZ
 22168 000049BF 01D3                    	ADD	BX,DX
 22169                                  	;add	dx,[es:bp+2]
 22170 000049C1 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 22171 000049C5 C3                      	retn
 22172                                  
 22173                                  ; 23/07/2019 - Retro DOS v3.2
 22174                                  
 22175                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 22176                                  ;----------------------------------------------------------------------------
 22177                                  ;
 22178                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 22179                                  ;
 22180                                  ; Inputs:
 22181                                  ;	BX cluster number of start of directory
 22182                                  ;	ES:BP Points to DPB
 22183                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 22184                                  ; Function:
 22185                                  ;	Set up a directory search
 22186                                  ; Outputs:
 22187                                  ;	[DIRSTART] = BX
 22188                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 22189                                  ;	Carry set if error (currently user FAILed to I 24)
 22190                                  ; destroys AX,DX,BX
 22191                                  ;----------------------------------------------------------------------------
 22192                                  
 22193                                  SETDIRSRCH:
 22194 000049C6 09DB                    	OR	BX,BX
 22195 000049C8 7438                    	JZ	short SETROOTSRCH
 22196 000049CA 891E[7E05]              	MOV	[DIRSTART],BX
 22197                                  	;mov	al,[es:bp+4]
 22198 000049CE 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 22199 000049D2 FEC0                    	INC	AL
 22200 000049D4 A2[3405]                	MOV	[CLUSFAC],AL
 22201                                  
 22202                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 22203                                  	;SAVE	<SI>
 22204 000049D7 56                      	push	si
 22205                                  	;test	byte [FastOpenFlg],2
 22206 000049D8 F606[A40F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 22207 000049DD 7507                    	JNZ	short UNP_OK
 22208                                  
 22209                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 22210                                  	;invoke	UNPACK
 22211 000049DF E84F13                  	call	UNPACK
 22212 000049E2 7302                    	JNC	short UNP_OK
 22213                                  	;RESTORE <SI>
 22214 000049E4 5E                      	pop	si
 22215                                  	;return
 22216 000049E5 C3                      	retn
 22217                                  
 22218                                  UNP_OK:
 22219 000049E6 893E[7805]              	MOV	[CLUSNUM],DI
 22220 000049EA 89DA                    	MOV	DX,BX
 22221 000049EC 30DB                    	XOR	BL,BL
 22222 000049EE 881E[3005]              	MOV	[SECCLUSPOS],BL
 22223                                  	;invoke	FIGREC
 22224 000049F2 E8010D                  	call	FIGREC
 22225                                  	;RESTORE <SI>
 22226 000049F5 5E                      	pop	si
 22227                                  	
 22228                                  	; 19/05/2019 - Retro DOS v4.0
 22229                                  	; 23/07/2019 - Retro DOS v3.2
 22230                                  
 22231                                  	; MSDOS 6.0
 22232                                  	;PUSH	DX			   ;AN000; >32mb
 22233                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 22234                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 22235                                  	;POP	DX			   ;AN000; >32mb
 22236 000049F6 A1[B005]                	mov	ax,[HIGH_SECTOR]
 22237 000049F9 A3[7C05]                	mov	[DIRSEC+2],AX
 22238                                  	
 22239 000049FC 8916[7A05]              	MOV	[DIRSEC],DX
 22240 00004A00 F8                      	CLC
 22241 00004A01 C3                      	retn
 22242                                  
 22243                                  	;entry	SETROOTSRCH
 22244                                  SETROOTSRCH:
 22245 00004A02 31C0                    	XOR	AX,AX
 22246 00004A04 A3[7E05]                	MOV	[DIRSTART],AX
 22247 00004A07 A2[3005]                	MOV	[SECCLUSPOS],AL
 22248 00004A0A 48                      	DEC	AX
 22249 00004A0B A3[7805]                	MOV	[CLUSNUM],AX
 22250                                  	;mov	ax,[es:bp+0Bh]
 22251 00004A0E 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 22252                                  	; 19/05/2019
 22253                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 22254                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 22255 00004A12 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 22256 00004A16 29D0                    	SUB	AX,DX
 22257 00004A18 A2[3405]                	MOV	[CLUSFAC],AL
 22258 00004A1B 8916[7A05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 22259                                  	; MSDOS 6.0
 22260 00004A1F C706[7C05]0000          	MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 22261 00004A25 F8                      	CLC
 22262 00004A26 C3                      	retn
 22263                                  
 22264                                  ;============================================================================
 22265                                  ; DIR2.ASM, MSDOS 6.0, 1991
 22266                                  ;============================================================================
 22267                                  ; 27/07/2018 - Retro DOS v3.0 
 22268                                  
 22269                                  ;	TITLE	DIR2 - Directory and path cracking
 22270                                  ;	NAME	Dir2
 22271                                  
 22272                                  ;Break	<GETPATH -- PARSE A WFP>
 22273                                  ;----------------------------------------------------------------------------
 22274                                  ;
 22275                                  ; Procedure Name : GETPATH
 22276                                  ;
 22277                                  ; Inputs:
 22278                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 22279                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 22280                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 22281                                  ;		( = -1 if current dir not involved, else
 22282                                  ;		 Points to first char after last "/" of current dir part)
 22283                                  ;	[THISCDS] Points to CDS being used
 22284                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 22285                                  ;	[NoSetDir] set
 22286                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 22287                                  ; Function:
 22288                                  ;	Crack the path
 22289                                  ; Outputs:
 22290                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 22291                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 22292                                  ;	ID1 field of [THISCDS] updated appropriately
 22293                                  ;	[ATTRIB] = [SATTRIB]
 22294                                  ;	ES:BP Points to DPB
 22295                                  ;	Carry set if bad path
 22296                                  ;	   SI Points to path element causing failure
 22297                                  ;	   Zero set
 22298                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 22299                                  ;	      start a search on the last directory
 22300                                  ;	      CL is zero if there is a bad name in the path
 22301                                  ;	      CL is non-zero if the name was simply not found
 22302                                  ;		 [ENTFREE] may have free spot in directory
 22303                                  ;		 [NAME1] is the name.
 22304                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 22305                                  ;	   Zero reset
 22306                                  ;	      File in middle of path or bad name in path or attribute mismatch
 22307                                  ;		or path too long or malformed path
 22308                                  ;	ELSE
 22309                                  ;	   [CurBuf] = -1 if root directory
 22310                                  ;	   [CURBUF] contains directory record with match
 22311                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 22312                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 22313                                  ;	   AH = device ID
 22314                                  ;	      bit 7 of AH set if device SI and BX
 22315                                  ;	      will point DOSGROUP relative The firclus
 22316                                  ;	      field of the device entry contains the device pointer
 22317                                  ;	   [NAME1] Has name looked for
 22318                                  ;	   If last element is a directory zero is set and:
 22319                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 22320                                  ;	      are set up to start a search on it.
 22321                                  ;	      unless [NoSetDir] is non zero in which case the return is
 22322                                  ;	      like that for a file (except for zero flag)
 22323                                  ;	   If last element is a file zero is reset
 22324                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 22325                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 22326                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 22327                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 22328                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 22329                                  ; DS preserved, Others destroyed
 22330                                  ;---------------------------------------------------------------------------
 22331                                  
 22332                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 22333                                  ;hkn; DS already set up at this point.
 22334                                  
 22335                                  GETPATH:
 22336                                  	;mov	word [CREATING],0E500h
 22337 00004A27 C706[3A05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 22338                                  
 22339                                  ; Same as GetPath only CREATING and DELALL already set
 22340                                  
 22341                                  	;entry	GetPathNoSet
 22342                                  GetPathNoSet:
 22343                                  	;mov	byte [EXTERR_LOCUS],2	
 22344 00004A2D C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 22345 00004A32 C706[9E05]FFFF          	MOV	word [CURBUF],-1	; initial setting
 22346                                  
 22347                                  ; See if the input indicates a device that has already been detected. If so,
 22348                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 22349                                  
 22350 00004A38 8B3E[6E05]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 22351                                  	;cmp	word [DI+1],5C3Ah
 22352                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 22353 00004A3C 817D013A5C              	cmp	word [DI+1],':\'
 22354 00004A41 7438                    	JZ	short CrackIt
 22355                                  
 22356                                  ; Let ChkDev find it in the device list
 22357                                  
 22358 00004A43 83C703                  	ADD	DI,3
 22359                                  	; 18/08/2018
 22360                                  	;MOV	SI,DI			; let CHKDEV see the original name
 22361 00004A46 E8B000                  	CALL	CHKDEV
 22362 00004A49 722E                    	JC	short InternalError
 22363                                  Build_devJ:
 22364                                  
 22365 00004A4B A0[2A05]                	MOV	AL,[SATTRIB]
 22366 00004A4E A2[2805]                	MOV	[ATTRIB],AL
 22367                                  	;mov	byte [EXTERR_LOCUS],1
 22368 00004A51 C606[EF02]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 22369                                  					; "finding" a char device
 22370                                  					; set LOCUS to Unknown. This makes
 22371                                  					; certain idiotic problems reported
 22372                                  					; by a certain 3 letter OEM go away.
 22373                                  
 22374                                  ; Take name in name1 and pack it back into where wfp_start points. This
 22375                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 22376                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 22377                                  ; wfp into the share set.
 22378                                  ;
 22379                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 22380                                  ; non-space seen +1.  This position is kept in DX.
 22381                                  
 22382                                  ;hkn; SS is DOSDATA
 22383 00004A56 16                      	push	ss
 22384 00004A57 07                      	pop	es
 22385                                  
 22386                                  ;hkn; NAME1 is in DOSDATA
 22387 00004A58 BE[0805]                	mov	si,NAME1
 22388 00004A5B 8B3E[6E05]              	mov	di,[WFP_START]
 22389 00004A5F 89FA                    	mov	dx,di
 22390 00004A61 B90800                  	mov	cx,8			; 8 chars in device name
 22391                                  MoveLoop:
 22392 00004A64 AC                      	lodsb
 22393 00004A65 AA                      	stosb
 22394 00004A66 3C20                    	cmp	al," "
 22395 00004A68 7402                    	jz	short NoSave
 22396                                  
 22397 00004A6A 89FA                    	mov	dx,di
 22398                                  NoSave:
 22399 00004A6C E2F6                    	loop	MoveLoop
 22400                                  ;
 22401                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 22402                                  ; at this point.
 22403                                  ;
 22404 00004A6E 89D7                    	mov	di,dx
 22405 00004A70 C60500                  	mov	byte [di],0		; end of string
 22406 00004A73 E8C302                  	call	Build_device_ent	; Clears carry sets zero
 22407 00004A76 FEC0                    	INC	AL			; reset zero
 22408 00004A78 C3                      	retn
 22409                                  
 22410                                  InternalError:
 22411                                  InternalError_loop:
 22412 00004A79 EBFE                    	JMP	short InternalError_loop	; freeze
 22413                                  
 22414                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 22415                                  
 22416                                  CrackIt:
 22417 00004A7B 8B36[7205]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 22418 00004A7F 83FEFF                  	CMP	SI,-1			; valid?
 22419 00004A82 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 22420 00004A84 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 22421                                  LOOK_SING:
 22422                                  	;mov	byte [ATTRIB],16h
 22423 00004A87 C606[2805]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 22424                                  					; Attributes to search through Dirs
 22425 00004A8C C43E[5E05]              	LES	DI,[THISCDS]
 22426 00004A90 B8FFFF                  	MOV	AX,-1
 22427                                  	;mov	bx,[es:di+73]
 22428 00004A93 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 22429 00004A97 8B36[7205]              	MOV	SI,[CURR_DIR_END]
 22430                                  
 22431                                  ; AX = -1
 22432                                  ; BX = cluster number of current directory.  THis number is -1 if the media
 22433                                  ;      has been uncertainly changed.
 22434                                  ; SI = offset in DOSGroup into path to end of current directory text.  This
 22435                                  ;      may be -1 if no current directory part has been used.
 22436                                  
 22437 00004A9B 39C6                    	CMP	SI,AX			; if Current directory is not part
 22438 00004A9D 7440                    	JZ	short NO_CURR_D		; then we must crack from root
 22439 00004A9F 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 22440                                  
 22441                                  ; DOS 3.3  6/25/86
 22442 00004AA1 743C                    	JZ	short NO_CURR_D		; no, crack form the root
 22443                                  	;test	byte [FastOpenFlg],1
 22444 00004AA3 F606[A40F]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 22445 00004AA8 7442                    	JZ	short GOT_SEARCH_CLUSTER	; no
 22446 00004AAA 06                      	PUSH	ES			; save registers
 22447 00004AAB 57                      	PUSH	DI
 22448 00004AAC 51                      	PUSH	CX
 22449 00004AAD FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 22450 00004AB0 56                      	PUSH	SI
 22451 00004AB1 53                      	PUSH	BX
 22452                                  
 22453 00004AB2 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 22454 00004AB6 8B36[6E05]              	MOV	SI,[WFP_START]
 22455                                  
 22456                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 22457 00004ABA BB[730F]                	MOV	BX,FastOpenTable
 22458 00004ABD BF[840F]                	MOV	DI,Dir_Info_Buff
 22459 00004AC0 B9[790F]                	MOV	CX,FastOpen_Ext_Info
 22460                                  	;mov	al,1
 22461 00004AC3 B001                    	MOV	AL,FONC_Look_up
 22462 00004AC5 1E                      	PUSH	DS
 22463 00004AC6 07                      	POP	ES
 22464                                  	;call	far [BX+2]
 22465 00004AC7 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 22466 00004ACA 7208                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 22467                                  					; Go to Got_Srch_cluster
 22468 00004ACC 803C00                  	CMP	BYTE [SI],0		;fastopen has current dir info?
 22469 00004ACF 7404                    	JE	short GO_Chk_end	;yes. Go to got_search_cluster
 22470 00004AD1 F9                      	stc
 22471 00004AD2 EB01                    	jmp	short GO_Chk_end	;Go to No_Curr_D
 22472                                  GO_Chk_end1:
 22473 00004AD4 F8                      	clc
 22474                                  GO_Chk_end:				; restore registers
 22475 00004AD5 5B                      	POP	BX
 22476 00004AD6 5E                      	POP	SI
 22477 00004AD7 8F44FF                  	POP	word [SI-1]
 22478 00004ADA 59                      	POP	CX
 22479 00004ADB 5F                      	POP	DI
 22480 00004ADC 07                      	POP	ES
 22481 00004ADD 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 22482                                  
 22483                                  ; DOS 3.3  6/25/86
 22484                                  ;
 22485                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 22486                                  ; of path and go crack from root.
 22487                                  
 22488                                  NO_CURR_D:
 22489 00004ADF 8B36[6E05]              	MOV	SI,[WFP_START]
 22490 00004AE3 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 22491 00004AE6 C42E[4605]              	LES	BP,[THISDPB]		; Get ES:BP
 22492 00004AEA EB3D                    	JMP	short ROOTPATH
 22493                                  
 22494                                  ; We are able to crack from the current directory part. Go set up for search
 22495                                  ; of specified cluster.
 22496                                  
 22497                                  GOT_SEARCH_CLUSTER:
 22498 00004AEC C42E[4605]              	LES	BP,[THISDPB]		; Get ES:BP
 22499 00004AF0 E8D3FE                  	call	SETDIRSRCH
 22500                                  	;JC	short SETFERR
 22501                                  	;JMP	short FINDPATH
 22502 00004AF3 7345                    	jnc	short FINDPATH ; 17/08/2018
 22503                                  SETFERR:
 22504 00004AF5 30C9                    	XOR	CL,CL			; set zero
 22505 00004AF7 F9                      	STC
 22506 00004AF8 C3                      	retn
 22507                                  
 22508                                  ;---------------------------------------------------------------------------
 22509                                  ;
 22510                                  ; Procedure Name : ChkDev
 22511                                  ;
 22512                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 22513                                  ;   device.
 22514                                  ; Blasts CX,SI,DI,AX,BX
 22515                                  ;---------------------------------------------------------------------------
 22516                                  
 22517                                  CHKDEV:
 22518 00004AF9 89FE                    	MOV	SI,DI
 22519 00004AFB 8CD7                    	MOV	DI,SS
 22520 00004AFD 8EC7                    	MOV	ES,DI
 22521                                  
 22522 00004AFF BF[0805]                	MOV	DI,NAME1
 22523 00004B02 B90900                  	MOV	CX,9
 22524                                  TESTLOOP:
 22525 00004B05 E8E80D                  	call	GETLET
 22526                                  
 22527 00004B08 3C2E                    	CMP	AL,'.'
 22528 00004B0A 740E                    	JZ	short TESTDEVICE
 22529 00004B0C E81E0E                  	call	PATHCHRCMP
 22530 00004B0F 7407                    	JZ	short NOTDEV
 22531 00004B11 08C0                    	OR	AL,AL
 22532 00004B13 7405                    	JZ	short TESTDEVICE
 22533                                  
 22534 00004B15 AA                      	STOSB
 22535 00004B16 E2ED                    	LOOP	TESTLOOP
 22536                                  NOTDEV:
 22537 00004B18 F9                      	STC
 22538 00004B19 C3                      	retn
 22539                                  
 22540                                  TESTDEVICE:
 22541 00004B1A 83C102                  	ADD	CX,2
 22542 00004B1D B020                    	MOV	AL,' '
 22543 00004B1F F3AA                    	REP	STOSB
 22544 00004B21 8CD0                    	MOV	AX,SS
 22545 00004B23 8ED8                    	MOV	DS,AX
 22546 00004B25 E8B101                  	call	DEVNAME
 22547 00004B28 C3                      	retn
 22548                                  
 22549                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 22550                                  ;----------------------------------------------------------------------------
 22551                                  ;
 22552                                  ; Procedure Name : ROOTPATH,FINDPATH
 22553                                  ;
 22554                                  ; Inputs:
 22555                                  ;	Same as FINDPATH but,
 22556                                  ;	SI Points to asciz string of path which is assumed to start at
 22557                                  ;		the root (no leading '/').
 22558                                  ; Function:
 22559                                  ;	Search from root for path
 22560                                  ; Outputs:
 22561                                  ;	Same as FINDPATH but:
 22562                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 22563                                  ;	[NoSetDir] is ignored.
 22564                                  ;----------------------------------------------------------------------------
 22565                                  
 22566                                  ROOTPATH:
 22567 00004B29 E8D6FE                  	call	SETROOTSRCH
 22568 00004B2C 803C00                  	CMP	BYTE [SI],0
 22569 00004B2F 7509                    	JNZ	short FINDPATH
 22570                                  
 22571                                  ; Root dir specified
 22572 00004B31 A0[2A05]                	MOV	AL,[SATTRIB]
 22573 00004B34 A2[2805]                	MOV	[ATTRIB],AL
 22574 00004B37 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 22575                                  					; (dir), clears carry.
 22576 00004B39 C3                      	retn
 22577                                  
 22578                                  ; Inputs:
 22579                                  ;	[ATTRIB] Set to get through directories
 22580                                  ;	[SATTRIB] Set to find last element
 22581                                  ;	ES:BP Points to DPB
 22582                                  ;	SI Points to asciz string of path (no leading '/').
 22583                                  ;	[SECCLUSPOS] = 0
 22584                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 22585                                  ;	[CLUSNUM] = Cluster # of next cluster
 22586                                  ;	[CLUSFAC] = Sectors per cluster
 22587                                  ;	[NoSetDir] set
 22588                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 22589                                  ;		( = -1 if current dir not involved, else
 22590                                  ;		 Points to first char after last "/" of current dir part)
 22591                                  ;	[THISCDS] Points to CDS being used
 22592                                  ;	[CREATING] and [DELALL] set
 22593                                  ; Function:
 22594                                  ;	Parse path name
 22595                                  ; Outputs:
 22596                                  ;	ID1 field of [THISCDS] updated appropriately
 22597                                  ;	[ATTRIB] = [SATTRIB]
 22598                                  ;	ES:BP Points to DPB
 22599                                  ;	[THISDPB] = ES:BP
 22600                                  ;	Carry set if bad path
 22601                                  ;	   SI Points to path element causing failure
 22602                                  ;	   Zero set
 22603                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 22604                                  ;	      start a search on the last directory
 22605                                  ;	      CL is zero if there is a bad name in the path
 22606                                  ;	      CL is non-zero if the name was simply not found
 22607                                  ;		 [ENTFREE] may have free spot in directory
 22608                                  ;		 [NAME1] is the name.
 22609                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 22610                                  ;	   Zero reset
 22611                                  ;	      File in middle of path or bad name in path
 22612                                  ;		or path too long or malformed path
 22613                                  ;	ELSE
 22614                                  ;	   [CURBUF] contains directory record with match
 22615                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 22616                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 22617                                  ;	   [NAME1] Has name looked for
 22618                                  ;	   AH = device ID
 22619                                  ;	      bit 7 of AH set if device SI and BX
 22620                                  ;	      will point DOSGROUP relative The firclus
 22621                                  ;	      field of the device entry contains the device pointer
 22622                                  ;	   If last element is a directory zero is set and:
 22623                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 22624                                  ;	      are set up to start a search on it,
 22625                                  ;	      unless [NoSetDir] is non zero in which case the return is
 22626                                  ;	      like that for a file (except for zero flag)
 22627                                  ;	   If last element is a file zero is reset
 22628                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 22629                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 22630                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 22631                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 22632                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 22633                                  ; Destroys all other registers
 22634                                  
 22635                                      	;entry	FINDPATH
 22636                                  FINDPATH:
 22637 00004B3A 06                      	PUSH	ES			; Save ES:BP
 22638 00004B3B 56                      	PUSH	SI
 22639 00004B3C 89F7                    	MOV	DI,SI
 22640 00004B3E 8B0E[7E05]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 22641 00004B42 833E[7205]FF            	CMP	word [CURR_DIR_END],-1
 22642 00004B47 740E                    	JZ	short NOIDS		; No current dir part
 22643 00004B49 3B3E[7205]              	CMP	DI,[CURR_DIR_END]
 22644 00004B4D 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 22645 00004B4F C43E[5E05]              	LES	DI,[THISCDS]
 22646                                  	;mov	[es:di+73],cx
 22647 00004B53 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 22648                                  NOIDS:
 22649                                  
 22650                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 22651                                  ; character in the string. CX,DI may be destroyed.
 22652                                  ;
 22653                                  ;	invoke	NAMETRANS
 22654                                  ;	MOV	CL,AL
 22655                                  ;
 22656                                  ; The above is the slow method. The name has *already* been munged by
 22657                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 22658                                  ; the name until ., \ or 0 is hit.
 22659                                  
 22660 00004B57 8CD0                    	MOV	AX,SS
 22661 00004B59 8EC0                    	MOV	ES,AX
 22662                                  
 22663                                  ;hkn; Name1 is in DOSDATA
 22664 00004B5B BF[0805]                	MOV	DI,NAME1
 22665 00004B5E B82020                  	MOV	AX,'  ' ; 2020h
 22666 00004B61 AA                      	STOSB
 22667 00004B62 AB                      	STOSW
 22668 00004B63 AB                      	STOSW
 22669 00004B64 AB                      	STOSW
 22670 00004B65 AB                      	STOSW
 22671 00004B66 AB                      	STOSW
 22672                                  
 22673                                  ;hkn; Name1 is in DOSDATA
 22674 00004B67 BF[0805]                	MOV	DI,NAME1
 22675 00004B6A 30E4                    	XOR	AH,AH			; bits for CL
 22676                                  GetNam:
 22677                                  	;INC	CL			;AN000; KK incrment volid count
 22678 00004B6C AC                      	LODSB
 22679 00004B6D 3C2E                    	CMP	AL,'.'
 22680 00004B6F 7412                    	JZ	short _SetExt
 22681 00004B71 08C0                    	OR	AL,AL
 22682 00004B73 7424                    	JZ	short _GetDone
 22683 00004B75 3C5C                    	CMP	AL,'\'
 22684 00004B77 7420                    	JZ	short _GetDone
 22685 00004B79 3C3F                    	CMP	AL,'?'
 22686 00004B7B 7503                    	JNZ	short StoNam
 22687 00004B7D 80CC01                  	OR	AH,1
 22688                                  StoNam: 
 22689 00004B80 AA                      	STOSB
 22690 00004B81 EBE9                    	JMP	short GetNam
 22691                                  _SetExt:
 22692 00004B83 BF[1005]                	MOV	DI,NAME1+8
 22693                                  GetExt:
 22694 00004B86 AC                      	LODSB
 22695 00004B87 08C0                    	OR	AL,AL
 22696 00004B89 740E                    	JZ	short _GetDone
 22697 00004B8B 3C5C                    	CMP	AL,'\'
 22698 00004B8D 740A                    	JZ	short _GetDone
 22699 00004B8F 3C3F                    	CMP	AL,'?'
 22700 00004B91 7503                    	JNZ	short StoExt
 22701 00004B93 80CC01                  	OR	AH,1
 22702                                  StoExt: 
 22703 00004B96 AA                      	STOSB
 22704 00004B97 EBED                    	JMP	short GetExt
 22705                                  _GetDone:
 22706 00004B99 4E                      	DEC	SI
 22707 00004B9A 88E1                    	MOV	CL,AH
 22708 00004B9C 80C980                  	OR	CL,80H
 22709 00004B9F 5F                      	POP	DI			; Start of this element
 22710 00004BA0 07                      	POP	ES			; Restore ES:BP
 22711 00004BA1 39FE                    	CMP	SI,DI
 22712 00004BA3 7503                    	JNZ	short check_device
 22713 00004BA5 E9D800                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 22714                                  check_device:
 22715 00004BA8 56                      	PUSH	SI			; Start of next element
 22716 00004BA9 8A04                    	MOV	AL,[SI]
 22717 00004BAB 08C0                    	OR	AL,AL
 22718 00004BAD 7508                    	JNZ	short NOT_LAST
 22719                                  
 22720                                  ; for last element of the path switch to the correct search attributes
 22721                                  
 22722 00004BAF 8A3E[2A05]              	MOV	BH,[SATTRIB]
 22723 00004BB3 883E[2805]              	MOV	[ATTRIB],BH
 22724                                  
 22725                                  NOT_LAST:
 22726                                  
 22727                                  ; check name1 to see if we have a device...
 22728                                  
 22729 00004BB7 06                      	PUSH	ES			; Save ES:BP
 22730                                  
 22731                                  ;hkn; SS is DOSDATA
 22732                                  	;context ES
 22733 00004BB8 16                      	push	ss
 22734 00004BB9 07                      	pop	es
 22735 00004BBA E81C01                  	call	DEVNAME 		; blast BX
 22736 00004BBD 07                      	POP	ES			; Restore ES:BP
 22737 00004BBE 720B                    	JC	short FindFile		; Not a device
 22738 00004BC0 08C0                    	OR	AL,AL			; Test next char again
 22739 00004BC2 7403                    	JZ	short GO_BDEV
 22740 00004BC4 E9BD00                  	JMP	FILEINPATH		; Device name in middle of path
 22741                                  
 22742                                  GO_BDEV:
 22743 00004BC7 5E                      	POP	SI			; Points to NUL at end of path
 22744 00004BC8 E980FE                  	JMP	Build_devJ
 22745                                  
 22746                                  FindFile:
 22747                                  ;;;; 7/28/86
 22748 00004BCB 803E[0805]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 22749 00004BD0 7505                    	JNZ	short NOE5		; no
 22750 00004BD2 C606[0805]05            	MOV	BYTE [NAME1],05H	; change it to 05
 22751                                  NOE5:
 22752                                  ;;;; 7/28/86
 22753 00004BD7 57                      	PUSH	DI			; Start of this element
 22754 00004BD8 06                      	PUSH	ES			; Save ES:BP
 22755 00004BD9 51                      	PUSH	CX			; CL return from NameTrans
 22756                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 22757                                  
 22758 00004BDA E88302                  	CALL	LookupPath		; call fastopen to get dir entry
 22759 00004BDD 7303                    	JNC	short DIR_FOUND		; found dir entry
 22760                                  
 22761                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 22762 00004BDF E89BFC                  	call	FINDENTRY
 22763                                  DIR_FOUND:
 22764 00004BE2 59                      	POP	CX
 22765 00004BE3 07                      	POP	ES
 22766 00004BE4 5F                      	POP	DI
 22767 00004BE5 7303                    	JNC	short LOAD_BUF
 22768 00004BE7 E9BF00                  	JMP	BADPATHPOP
 22769                                  
 22770                                  LOAD_BUF:
 22771 00004BEA C53E[9E05]              	LDS	DI,[CURBUF]
 22772                                  	;test	byte [bx+0Bh],10h
 22773 00004BEE F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 22774 00004BF2 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 22775 00004BF4 E98D00                  	JMP	FILEINPATH		; Error or end of path
 22776                                  
 22777                                  ; if we are not setting the directory, then check for end of string
 22778                                  
 22779                                  GO_NEXT:
 22780                                  ;hkn; SS override
 22781 00004BF7 36803E[1603]00          	CMP	BYTE [SS:NoSetDir],0
 22782 00004BFD 7412                    	JZ	short SetDir
 22783 00004BFF 89FA                    	MOV	DX,DI			; Save pointer to entry
 22784 00004C01 8CD9                    	MOV	CX,DS
 22785                                  
 22786                                  ;hkn; SS is DOSDATA
 22787                                  	;context DS
 22788 00004C03 16                      	push	ss
 22789 00004C04 1F                      	pop	ds
 22790 00004C05 5F                      	POP	DI			; Start of next element
 22791                                  	; MSDOS 6.0
 22792                                  	;TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 22793                                  	;JZ	short nofast			; the FastOpen
 22794                                  	;TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 22795                                  	;JZ	short nofast			; no
 22796                                  	;MOV	DI,[Next_Element_Start]	; no need to insert it again
 22797                                  ;nofast:
 22798 00004C06 803D00                  	CMP	BYTE [DI],0
 22799 00004C09 7501                    	JNZ	short NEXT_ONE		; DOS 3.3
 22800                                  	;JMP	_SETRET			; Got it
 22801 00004C0B C3                      	retn	; 05/09/2018
 22802                                  NEXT_ONE:
 22803 00004C0C 57                      	PUSH	DI			; Put start of next element back on stack
 22804 00004C0D 89D7                    	MOV	DI,DX
 22805 00004C0F 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 22806                                  SetDir:
 22807 00004C11 8B14                    	MOV	DX,[SI] 		; Dir_first
 22808                                  
 22809                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 22810 00004C13 1E                      	PUSH	DS		      ; save [curbuf+2]
 22811                                  ;hkn; SS is DOSDATA
 22812 00004C14 16                      	push	ss
 22813 00004C15 1F                      	pop	ds		      ; set DS Dosgroup
 22814                                  	;test	byte [FastOpenFlg],2
 22815 00004C16 F606[A40F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 22816 00004C1B 7410                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 22817 00004C1D 89D3                    	MOV	BX,DX		      ; not found
 22818 00004C1F 8B3E[7805]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 22819 00004C23 50                      	PUSH	AX		      ; save device id (AH)
 22820 00004C24 E89FFD                  	call	SETDIRSRCH
 22821 00004C27 58                      	POP	AX		      ; restore device id (AH)
 22822 00004C28 83C402                  	ADD	SP,2		      ; pop ds in stack
 22823 00004C2B EB3D                    	JMP	short FAST_OPEN_SKIP
 22824                                  
 22825                                  DO_NORMAL:
 22826 00004C2D 1F                      	POP	DS			; DS = [curbuf + 2]
 22827                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 22828                                  
 22829 00004C2E 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 22830 00004C30 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 22831 00004C32 53                      	PUSH	BX
 22832 00004C33 50                      	PUSH	AX
 22833 00004C34 56                      	PUSH	SI
 22834 00004C35 51                      	PUSH	CX
 22835                                  	;push	word [di+6]
 22836 00004C36 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 22837                                  	; 22/07/2019 - Retro DOS v3.2
 22838                                  	; MSDOS 6.0
 22839                                  	;push	word [di+8]
 22840 00004C39 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 22841 00004C3C 89D3                    	MOV	BX,DX
 22842                                  
 22843                                  ;hkn; SS is DOSDATA
 22844                                  	;context DS
 22845 00004C3E 16                      	push	ss
 22846 00004C3F 1F                      	pop	ds
 22847                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 22848 00004C40 E883FD                  	call	SETDIRSRCH		; the entry sector buffer
 22849                                  	; MSDOS 6.0
 22850 00004C43 8F06[B005]              	POP	word [HIGH_SECTOR]
 22851 00004C47 5A                      	POP	DX
 22852 00004C48 720A                    	JC	short SKIP_GETB
 22853                                  	;mov	byte [ALLOWED],18h
 22854 00004C4A C606[1503]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 22855 00004C4F 30C0                    	XOR	AL,AL
 22856                                  	;invoke	GETBUFFR		; Get the entry buffer back
 22857 00004C51 E84E15                  	call	GETBUFFR
 22858                                  SKIP_GETB:
 22859 00004C54 59                      	POP	CX
 22860 00004C55 5E                      	POP	SI
 22861 00004C56 58                      	POP	AX
 22862 00004C57 5B                      	POP	BX
 22863 00004C58 7305                    	JNC	short SET_THE_BUF ; 19/05/2019
 22864 00004C5A 5F                      	POP	DI			; Start of next element
 22865 00004C5B 89FE                    	MOV	SI,DI			; Point with SI
 22866 00004C5D EB21                    	JMP	SHORT _BADPATH
 22867                                  
 22868                                  SET_THE_BUF:
 22869 00004C5F E8C1F5                  	call	SET_BUF_AS_DIR
 22870 00004C62 8B3E[9E05]              	MOV	DI,[CURBUF]
 22871 00004C66 01FE                    	ADD	SI,DI			; Get the offsets back
 22872 00004C68 01FB                    	ADD	BX,DI
 22873                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 22874                                  FAST_OPEN_SKIP:
 22875 00004C6A 5F                      	POP	DI			; Start of next element
 22876 00004C6B E89602                  	CALL	InsertPath		; insert dir entry info
 22877                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 22878 00004C6E 8A05                    	MOV	AL,[DI]
 22879 00004C70 08C0                    	OR	AL,AL
 22880 00004C72 7434                    	JZ	short _SETRET		; At end
 22881 00004C74 47                      	INC	DI			; Skip over "/"
 22882 00004C75 89FE                    	MOV	SI,DI			; Point with SI
 22883 00004C77 E8B30C                  	call	PATHCHRCMP
 22884 00004C7A 7503                    	JNZ	short find_bad_name	; oops
 22885 00004C7C E9BBFE                  	JMP	FINDPATH		; Next element
 22886                                  
 22887                                  find_bad_name:
 22888 00004C7F 4E                      	DEC	SI			; Undo above INC to get failure point
 22889                                  _BADPATH:
 22890 00004C80 30C9                    	XOR	CL,CL			; Set zero
 22891 00004C82 EB2C                    	JMP	SHORT BADPRET
 22892                                  
 22893                                  FILEINPATH:
 22894 00004C84 5F                      	POP	DI			; Start of next element
 22895                                  
 22896                                  ;hkn; SS is DOSDATA
 22897                                  	;context DS			; Got to from one place with DS gone
 22898 00004C85 16                      	push	ss
 22899 00004C86 1F                      	pop	ds
 22900                                  
 22901                                  ; DOS 3.3 FastOpen
 22902                                  	;test	byte [FastOpenFlg],1
 22903 00004C87 F606[A40F]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 22904 00004C8C 740B                    	JZ	short NO_FAST		; device info to fastopen
 22905                                  	;test	byte [FastOpenFlg],2
 22906 00004C8E F606[A40F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 22907 00004C93 7404                    	JZ	short NO_FAST
 22908 00004C95 8B3E[A50F]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 22909                                  					 ; success
 22910                                  NO_FAST:
 22911                                  ; DOS 3.3 FastOpen
 22912                                  
 22913 00004C99 8A05                    	MOV	AL,[DI]
 22914 00004C9B 08C0                    	OR	AL,AL
 22915 00004C9D 7404                    	JZ	short INCRET
 22916 00004C9F 89FE                    	MOV	SI,DI			; Path too long
 22917 00004CA1 EB0D                    	JMP	SHORT BADPRET
 22918                                  
 22919                                  INCRET:
 22920                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 22921                                  
 22922 00004CA3 E85E02                  	CALL   InsertPath		; insert dir entry info
 22923                                  
 22924                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 22925 00004CA6 FEC0                    	INC	AL			; Reset zero
 22926                                  _SETRET:
 22927 00004CA8 C3                      	retn
 22928                                  
 22929                                  BADPATHPOP:
 22930 00004CA9 5E                      	POP	SI			; Start of next element
 22931 00004CAA 8A04                    	MOV	AL,[SI]
 22932 00004CAC 89FE                    	MOV	SI,DI			; Start of bad element
 22933 00004CAE 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 22934                                  BADPRET:
 22935 00004CB0 A0[2A05]                	MOV	AL,[SATTRIB]
 22936 00004CB3 A2[2805]                	MOV	[ATTRIB],AL		; Make sure return correct
 22937 00004CB6 F9                      	STC
 22938 00004CB7 C3                      	retn
 22939                                  
 22940                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 22941                                  ;---------------------------------------------------------------------------
 22942                                  ;
 22943                                  ; Procedure Name : STARTSRCH
 22944                                  ;
 22945                                  ; Inputs:
 22946                                  ;	[THISDPB] Set
 22947                                  ; Function:
 22948                                  ;	Set up a search for GETENTRY and NEXTENTRY
 22949                                  ; Outputs:
 22950                                  ;	ES:BP = Drive parameters
 22951                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 22952                                  ; Destroys ES,BP,AX
 22953                                  ;--------------------------------------------------------------------------
 22954                                  
 22955                                  STARTSRCH:
 22956 00004CB8 C42E[4605]              	LES	BP,[THISDPB]
 22957 00004CBC 31C0                    	XOR	AX,AX
 22958 00004CBE A3[1203]                	MOV	[LASTENT],AX
 22959 00004CC1 A2[3805]                	MOV	[VOLID],AL		; No volume ID found
 22960 00004CC4 48                      	DEC	AX
 22961 00004CC5 A3[9405]                	MOV	[ENTFREE],AX
 22962 00004CC8 A3[9605]                	MOV	[ENTLAST],AX
 22963 00004CCB C3                      	retn
 22964                                  
 22965                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 22966                                  ;----------------------------------------------------------------------------
 22967                                  ; Procedure Name : MatchAttributes
 22968                                  ;
 22969                                  ; Input:    [Attrib] = attribute to search for
 22970                                  ;	    CH = found attribute
 22971                                  ; Output:   JZ <match>
 22972                                  ;	    JNZ <nomatch>
 22973                                  ; Registers modified: noneski
 22974                                  ;----------------------------------------------------------------------------
 22975                                  
 22976                                  MatchAttributes:
 22977 00004CCC 50                      	PUSH	AX
 22978                                  
 22979                                  ;hkn; SS override
 22980 00004CCD 36A0[2805]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 22981 00004CD1 F6D0                    	NOT	AL			; AL <- SearchSet'
 22982 00004CD3 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 22983                                  	;and	al,16h
 22984 00004CD5 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 22985                                  ;
 22986                                  ; the result is non-zero if an attribute is not in the search set
 22987                                  ; and in the found set and in the important set. This means that we do not
 22988                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 22989                                  ;
 22990 00004CD7 58                      	POP	AX
 22991 00004CD8 C3                      	retn
 22992                                  
 22993                                  ;Break <DevName - Look for name of device>
 22994                                  ;---------------------------------------------------------------------------
 22995                                  ;
 22996                                  ; Procedure Name : DevName
 22997                                  ;
 22998                                  ; Inputs:
 22999                                  ;	DS,ES:DOSDATA
 23000                                  ;	Filename in NAME1
 23001                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 23002                                  ; Function:
 23003                                  ;	Determine if file is in list of I/O drivers
 23004                                  ; Outputs:
 23005                                  ;	Carry set if not a device
 23006                                  ;	ELSE
 23007                                  ;	Zero flag set
 23008                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 23009                                  ;	     bits 0-4 set from low byte of attribute word
 23010                                  ;	DEVPT = DWORD pointer to Device header of device
 23011                                  ; BX destroyed, others preserved
 23012                                  ;---------------------------------------------------------------------------
 23013                                  
 23014                                  DEVNAME:
 23015                                  	; 28/07/2018 - Retro DOS v3.0
 23016                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 23017                                  
 23018 00004CD9 56                      	PUSH	SI
 23019 00004CDA 57                      	PUSH	DI
 23020 00004CDB 51                      	PUSH	CX
 23021 00004CDC 50                      	PUSH	AX
 23022                                  
 23023                                  ; E5 special code
 23024 00004CDD FF36[0805]              	PUSH	WORD [NAME1]
 23025 00004CE1 803E[0805]05            	CMP	byte [NAME1],5
 23026 00004CE6 7505                    	JNZ	short NOKTR
 23027 00004CE8 C606[0805]E5            	MOV	byte [NAME1],0E5h
 23028                                  NOKTR:
 23029                                  	;test	byte [ATTRIB],8
 23030 00004CED F606[2805]08            	TEST	byte [ATTRIB],attr_volume_id
 23031                                  					; If looking for VOL id don't find devs
 23032 00004CF2 7522                    	JNZ	short RET31
 23033                                  
 23034                                  ;hkn; NULDEV is in DOSDATA
 23035 00004CF4 BE[4800]                	MOV	SI,NULDEV
 23036                                  LOOKIO:
 23037                                  	;test	word [si+4],8000h
 23038 00004CF7 F744040080              	TEST	word [SI+SYSDEV.ATT],DEVTYP
 23039 00004CFC 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 23040 00004CFE 89F0                    	MOV	AX,SI
 23041                                  	;add	si,10
 23042 00004D00 83C60A                  	ADD	SI,SYSDEV.NAME
 23043                                  
 23044                                  ;hkn; NAME1 is in DOSDATA
 23045 00004D03 BF[0805]                	MOV	DI,NAME1
 23046 00004D06 B90400                  	MOV	CX,4			; All devices are 8 letters
 23047 00004D09 F3A7                    	REPE	CMPSW			; Check for name in list
 23048 00004D0B 89C6                    	MOV	SI,AX
 23049 00004D0D 7415                    	JZ	short IOCHK		; Found it?
 23050                                  SKIPDEV:
 23051 00004D0F C534                    	LDS	SI,[SI]			; Get address of next device
 23052 00004D11 83FEFF                  	CMP	SI,-1			; At end of list?
 23053 00004D14 75E1                    	JNZ	short LOOKIO
 23054                                  RET31:	
 23055 00004D16 F9                      	STC				; Not found
 23056                                  RETNV:	
 23057 00004D17 8CD1                    	MOV	CX,SS
 23058 00004D19 8ED9                    	MOV	DS,CX
 23059                                  
 23060 00004D1B 8F06[0805]              	POP	WORD [NAME1]
 23061 00004D1F 58                      	POP	AX
 23062 00004D20 59                      	POP	CX
 23063 00004D21 5F                      	POP	DI
 23064 00004D22 5E                      	POP	SI
 23065 00004D23 C3                      	RETN
 23066                                  
 23067                                  IOCHK:
 23068                                  ;hkn; SS override for DEVPT
 23069 00004D24 368C1E[5805]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 23070                                  	;mov	bh,[si+4]
 23071 00004D29 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 23072 00004D2C 80CFC0                  	OR	BH,0C0h
 23073 00004D2F 80E7DF                  	and	bh,0DFh
 23074                                  	;AND	BH,~(020h)		; Clears Carry
 23075 00004D32 368936[5605]            	MOV	[SS:DEVPT],SI
 23076 00004D37 EBDE                    	JMP	short RETNV
 23077                                  
 23078                                  ;BREAK <Build_device_ent - Make a Directory entry>
 23079                                  ;---------------------------------------------------------------------------
 23080                                  ; Procedure Name : Build_device_ent
 23081                                  ;
 23082                                  ; Inputs:
 23083                                  ;	[NAME1] has name
 23084                                  ;	BH is attribute field (supplied by DEVNAME)
 23085                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 23086                                  ; Function:
 23087                                  ;	Build a directory entry for a device at DEVFCB
 23088                                  ; Outputs:
 23089                                  ;	BX points to DEVFCB
 23090                                  ;	SI points to dir_first field
 23091                                  ;	AH = input BH
 23092                                  ;	AL = 0
 23093                                  ;	dir_first = DEVPT
 23094                                  ;	Zero Set, Carry Clear
 23095                                  ; DS,ES,BP preserved, others destroyed
 23096                                  ;--------------------------------------------------------------------------
 23097                                  
 23098                                  Build_device_ent:
 23099 00004D39 B82020                  	MOV	AX,"  " ; 2020h
 23100                                  
 23101                                  ;hkn; DEVFCB is in DOSDATA
 23102 00004D3C BF[1005]                	MOV	DI,DEVFCB+8		; Point to extent field
 23103                                  
 23104                                  ;	Fill dir_ext	BUGBUG - use ERRNZs for this stuff!
 23105                                  
 23106 00004D3F AB                      	STOSW
 23107 00004D40 AA                      	STOSB				; Blank out extent field
 23108                                  	;mov	al,40h
 23109 00004D41 B040                    	MOV	AL,attr_device
 23110                                  
 23111                                  ;	Fill Dir_attr
 23112                                  
 23113 00004D43 AA                      	STOSB				; Set attribute field
 23114 00004D44 31C0                    	XOR	AX,AX
 23115 00004D46 B90A00                  	MOV	CX,10
 23116                                  
 23117                                  ; Fill dir_pad
 23118                                  
 23119 00004D49 F3AB                    	REP	STOSW			; Fill rest with zeros
 23120 00004D4B E806CC                  	call	DATE16
 23121                                  
 23122                                  ;hkn; DEVFCB is in DOSDATA
 23123 00004D4E BF[1E05]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 23124 00004D51 92                      	XCHG	AX,DX
 23125                                  
 23126                                  ; Fill dir_time
 23127                                  
 23128 00004D52 AB                      	STOSW
 23129 00004D53 92                      	XCHG	AX,DX
 23130                                  
 23131                                  ; Fill dir_date
 23132                                  
 23133 00004D54 AB                      	STOSW
 23134 00004D55 89FE                    	MOV	SI,DI			; SI points to dir_first field
 23135 00004D57 A1[5605]                	MOV	AX,[DEVPT]
 23136                                  
 23137                                  ; Fill dir_first
 23138                                  
 23139 00004D5A AB                      	STOSW				; Dir_first points to device
 23140 00004D5B A1[5805]                	MOV	AX,[DEVPT+2]
 23141                                  ;
 23142                                  ; Fill dir_size_l
 23143                                  ;
 23144 00004D5E AB                      	STOSW
 23145 00004D5F 88FC                    	MOV	AH,BH			; Put device atts in AH
 23146                                  
 23147                                  ;hkn; DEVFCB is in DOSDATA
 23148 00004D61 BB[0805]                	MOV	BX,DEVFCB
 23149 00004D64 30C0                    	XOR	AL,AL			; Set zero, clear carry
 23150 00004D66 C3                      	retn
 23151                                  
 23152                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 23153                                  ;----------------------------------------------------------------------------
 23154                                  ;
 23155                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 23156                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 23157                                  ;   If invalid, reset original CDS to root.
 23158                                  ;
 23159                                  ;   Inputs:	ThisCDS points to CDS of interest
 23160                                  ;		SS:DI points to temp buffer
 23161                                  ;   Outputs:	The current directory string is validated on the appropriate
 23162                                  ;		    drive
 23163                                  ;		ThisDPB changed
 23164                                  ;		ES:DI point to CDS
 23165                                  ;		Carry set if error (currently user FAILed to I 24)
 23166                                  ;   Registers modified: all
 23167                                  ;----------------------------------------------------------------------------
 23168                                  
 23169                                  ValidateCDS:
 23170                                  	; 28/07/2018 - Retro DOS v3.0
 23171                                  
 23172                                     %define  Temp	[bp-2]	; word
 23173                                     %define  SaveCDS	[bp-6]	; dword
 23174                                     %define  SaveCDSL	[bp-6]	; word
 23175                                     %define  SaveCDSH	[bp-4]	; word
 23176                                  
 23177                                  	;Enter
 23178 00004D67 55                      	push	bp
 23179 00004D68 89E5                    	mov	bp,sp
 23180 00004D6A 83EC06                  	sub	sp,6
 23181                                  
 23182 00004D6D 897EFE                  	MOV	Temp,DI
 23183                                  
 23184                                  ;hkn; SS override
 23185 00004D70 36C536[5E05]            	LDS	SI,[SS:THISCDS]
 23186 00004D75 8976FA                  	MOV	SaveCDSL,SI
 23187 00004D78 8C5EFC                  	MOV	SaveCDSH,DS
 23188                                  	;EnterCrit critDisk
 23189 00004D7B E891D3                  	call	EcritDisk
 23190                                  	;test	word [si+67],8000h
 23191 00004D7E F744430080              	TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 23192 00004D83 7403                    	JZ	short _DoSplice
 23193 00004D85 E98900                  	JMP	FatFail
 23194                                  _DoSplice:
 23195 00004D88 30D2                    	XOR	DL,DL
 23196 00004D8A 368616[1603]            	XCHG	DL,[SS:NoSetDir]
 23197                                  
 23198                                  ;hkn; SS is DOSDATA
 23199                                  	;Context ES
 23200 00004D8F 16                      	push	ss
 23201 00004D90 07                      	pop	es
 23202                                  	;Invoke	FStrcpy
 23203 00004D91 E870D2                  	call	FStrCpy
 23204 00004D94 8B76FE                  	MOV	SI,Temp
 23205                                  
 23206                                  ;hkn; SS is DOSDATA
 23207                                  	;Context DS
 23208 00004D97 16                      	push	ss
 23209 00004D98 1F                      	pop	ds	
 23210                                  	;Invoke	Splice
 23211 00004D99 E88122                  	call	Splice
 23212                                  
 23213                                   ;hkn; SS is DOSDATA
 23214                                  	;Context DS			;   FatReadCDS (ThisCDS);
 23215 00004D9C 16                      	push	ss
 23216 00004D9D 1F                      	pop	ds
 23217 00004D9E 8816[1603]              	MOV	[NoSetDir],DL
 23218 00004DA2 C43E[5E05]              	LES	DI,[THISCDS]
 23219                                  	;SAVE	<BP>
 23220 00004DA6 55                      	push	bp
 23221                                  	;Invoke	FATREAD_CDS
 23222 00004DA7 E82911                  	call	FATREAD_CDS	
 23223                                  	;RESTORE <BP>
 23224 00004DAA 5D                      	pop	bp
 23225 00004DAB 7264                    	JC	short FatFail
 23226                                  
 23227 00004DAD C536[5E05]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 23228                                  	;cmp	word [si+73], -1
 23229 00004DB1 837C49FF                	CMP	word [SI+curdir.ID],-1
 23230 00004DB5 754C                    	JNZ	short RestoreCDS
 23231                                  
 23232                                  ;hkn; SS is DOSDATA
 23233                                  	;Context ES
 23234 00004DB7 16                      	push	ss
 23235 00004DB8 07                      	pop	es
 23236                                  
 23237                                  ;hkn; SS override
 23238                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 23239 00004DB9 36FF36[6E05]            	push	word [SS:WFP_START]
 23240                                  	;cmp	si,[bp-6]
 23241 00004DBE 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 23242 00004DC1 750B                    	JNZ	short DoChdir
 23243                                  	;mov	di,[bp-2]
 23244 00004DC3 8B7EFE                  	MOV	DI,Temp
 23245                                  
 23246                                  ;hkn; SS override
 23247 00004DC6 36893E[6E05]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 23248                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 23249 00004DCB E836D2                  	call	FStrCpy
 23250                                  DoChdir:
 23251                                  ;hkn; SS is DOSDATA
 23252                                  	;Context DS
 23253 00004DCE 16                      	push	ss
 23254 00004DCF 1F                      	pop	ds
 23255                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 23256 00004DD0 FF36[2A05]              	push	word [SATTRIB]
 23257 00004DD4 55                      	push	bp
 23258                                  	;Invoke	DOS_ChDir
 23259 00004DD5 E8E0EF                  	call	DOS_CHDIR
 23260                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 23261 00004DD8 5D                      	pop	bp
 23262 00004DD9 5B                      	pop	bx
 23263 00004DDA 8F06[6E05]              	pop	word [WFP_START]
 23264 00004DDE 881E[2A05]              	MOV	[SATTRIB],BL
 23265 00004DE2 C576FA                  	LDS	SI,SaveCDS
 23266 00004DE5 730F                    	JNC	short SetCluster	;	if (c == -1) {
 23267                                  
 23268                                  ;hkn; SS override for THISCDS
 23269 00004DE7 368936[5E05]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 23270 00004DEC 368C1E[6005]            	MOV	[SS:THISCDS+2],DS
 23271 00004DF1 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 23272 00004DF3 884C03                  	MOV	[SI+3],CL		;	    }
 23273                                  SetCluster:
 23274                                  	;mov	word [si+73],0FFFFh
 23275 00004DF6 C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 23276 00004DFB 36C536[5E05]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 23277                                  	; MSDOS 6.0
 23278                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 23279                                  	;JZ	short setdirclus		     ;AN000;;MS.
 23280                                  	;MOV	CX,-1				     ;AN000;;MS.
 23281                                  setdirclus:
 23282                                  	;mov	[si+73],cx
 23283 00004E00 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 23284                                  RestoreCDS:
 23285 00004E03 C47EFA                  	LES	DI,SaveCDS
 23286 00004E06 36893E[5E05]            	MOV	[SS:THISCDS],DI
 23287 00004E0B 368C06[6005]            	MOV	[SS:THISCDS+2],ES
 23288 00004E10 F8                      	CLC
 23289                                  FatFail:
 23290                                  	;LeaveCrit critDisk
 23291 00004E11 E803D3                  	call	LcritDisk
 23292                                  
 23293                                  	;les	di,[bp-6]
 23294 00004E14 C47EFA                  	LES	DI,SaveCDS
 23295                                  	;Leave
 23296 00004E17 89EC                    	mov	sp,bp
 23297 00004E19 5D                      	pop	bp
 23298 00004E1A C3                      	retn
 23299                                  
 23300                                  ; 28/07/2018 - Retro DOS v3.0
 23301                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 23302                                  
 23303                                  ;Break	<CheckThisDevice - Check for being a device>
 23304                                  ;---------------------------------------------------------------------------
 23305                                  ;
 23306                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 23307                                  ;   device specified. We will return carry if there is a device present. 
 23308                                  ;   The forms of devices we will recognize are:
 23309                                  ;
 23310                                  ;	[path]device
 23311                                  ;
 23312                                  ;   Note that the drive letter has *already* been removed. All other forms
 23313                                  ;   are not considered to be devices. If such a device is found we change
 23314                                  ;   the source pointer to point to the device component.
 23315                                  ;
 23316                                  ;   Inputs:	ES is DOSDATA
 23317                                  ;		DS:SI contains name
 23318                                  ;   Outputs:	ES is DOSDATA
 23319                                  ;		DS:SI point to name or device
 23320                                  ;		Carry flag set if device was found
 23321                                  ;		Carry flag reset otherwise
 23322                                  ;   Registers Modified: all except ES:DI, DS
 23323                                  ;----------------------------------------------------------------------------
 23324                                  
 23325                                  CheckThisDevice:
 23326 00004E1B 57                      	push	di
 23327 00004E1C 56                      	push	si
 23328 00004E1D 89F7                    	MOV	DI,SI
 23329                                  ;
 23330                                  ; Check for presence of \dev\ (Dam multiplan!)
 23331                                  ;
 23332 00004E1F 8A04                    	MOV	AL,[SI]
 23333 00004E21 E8090B                  	call	PATHCHRCMP		; is it a path char?
 23334 00004E24 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 23335 00004E26 46                      	INC	SI			; simulate LODSB
 23336                                  ;
 23337                                  ; We have the leading path separator. Look for DEV part.
 23338                                  ;
 23339 00004E27 AD                      	LODSW
 23340 00004E28 0D2020                  	OR	AX,2020h
 23341 00004E2B 3D6465                  	cmp	ax,"de"
 23342                                  	;CMP	AX,"e"<< 8 + "d"
 23343 00004E2E 752D                    	JNZ	short NotDevice		; not "de", assume not device
 23344 00004E30 AC                      	LODSB
 23345 00004E31 0C20                    	OR	AL,20h
 23346 00004E33 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 23347 00004E35 7526                    	JNZ	short NotDevice
 23348 00004E37 AC                      	LODSB
 23349 00004E38 E8F20A                  	call	PATHCHRCMP		; do we have the last path separator?
 23350 00004E3B 7520                    	JNZ	short NotDevice		; no. go for it.
 23351                                  ;
 23352                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 23353                                  ; SI and DevName may destroy DS.
 23354                                  ;
 23355                                  ParseDev:
 23356 00004E3D 1E                      	push	ds
 23357 00004E3E 56                      	push	si			; preserve the source pointer
 23358 00004E3F E8810A                  	call	NameTrans		; advance DS:SI
 23359 00004E42 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 23360 00004E45 F9                      	STC				; simulate a Carry return from DevName
 23361 00004E46 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 23362                                  
 23363                                  ;hkn; SS is DOSDATA
 23364 00004E48 16                      	push	ss
 23365 00004E49 1F                      	pop	ds
 23366                                  
 23367                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 23368                                  ;
 23369                                  ; SR;
 23370                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 23371                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 23372                                  ; old call set the volume attribute bit.
 23373                                  ;
 23374 00004E4A A0[2A05]                	mov	al,[SATTRIB]
 23375 00004E4D A2[2805]                	mov	[ATTRIB],al		;set Attrib for DevName
 23376                                  
 23377                                  ; M026 - end
 23378                                  
 23379 00004E50 E886FE                  	call	DEVNAME
 23380                                  
 23381                                  SkipSearch:
 23382 00004E53 5E                      	pop	si
 23383 00004E54 1F                      	pop	ds
 23384                                  ;
 23385                                  ; SI points to the beginning of the potential device. If we have a device
 23386                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 23387                                  ; original value. At this point Carry set indicates FILE.
 23388                                  ;
 23389                                  CheckReturn:
 23390 00004E55 5F                      	pop	di			; get original SI
 23391 00004E56 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 23392 00004E58 89FE                    	MOV	SI,DI
 23393                                  Check_Done:
 23394 00004E5A 5F                      	pop	di
 23395 00004E5B F5                      	CMC				; invert carry. Carry => device
 23396 00004E5C C3                      	retn
 23397                                  NotDevice:
 23398 00004E5D F9                      	STC
 23399 00004E5E EBF5                    	JMP	short CheckReturn
 23400                                  
 23401                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 23402                                  ;-----------------------------------------------------------------------------
 23403                                  ;
 23404                                  ; Procedure Name : LookupPath
 23405                                  ;
 23406                                  ; Output  DS:SI -> path name,
 23407                                  ;	  ES:DI -> dir entry info buffer
 23408                                  ;	  ES:CX -> extended dir info buffer
 23409                                  ;
 23410                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 23411                                  ;			     FastOpen, DS:SI points to char just one after
 23412                                  ;			     the last char of path name which is fully or
 23413                                  ;			     partially found in FastOPen
 23414                                  ;	  carry flag set : FastOpen not in memory or path name not found
 23415                                  ;
 23416                                  ;----------------------------------------------------------------------------
 23417                                  
 23418                                  LookupPath:
 23419                                  ;	PUSH	AX
 23420                                  
 23421                                  ;hkn; SS override
 23422                                  	;test	byte [ss:FastOpenFlg],1
 23423 00004E60 36F606[A40F]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 23424 00004E66 7503                    	JNZ	short FASTINST			    ; and this routine is
 23425                                  NOLOOK:
 23426 00004E68 E99700                  	JMP	NOLOOKUP			    ; executed once
 23427                                  
 23428                                  FASTINST:
 23429                                  ;hkn; SS override
 23430                                  	;test	byte [ss:FastOpenFlg],8
 23431 00004E6B 36F606[A40F]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 23432 00004E71 75F5                    	JNZ	short NOLOOK			    ; yes
 23433                                  
 23434 00004E73 BB[730F]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 23435                                  
 23436                                  ;hkn; SS override
 23437 00004E76 368B36[6E05]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 23438 00004E7B BF[840F]                	MOV	DI,Dir_Info_Buff
 23439 00004E7E B9[790F]                	MOV	CX,FastOpen_Ext_Info
 23440 00004E81 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 23441 00004E83 1E                      	PUSH	DS
 23442 00004E84 07                      	POP	ES
 23443                                  
 23444                                  ;hkn; SS override
 23445                                  	;call	far [bx+2]
 23446 00004E85 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 23447 00004E88 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 23448                                  
 23449 00004E8A 8D5CFE                  	LEA	BX,[SI-2]
 23450                                  
 23451                                  ;hkn; SS override
 23452 00004E8D 363B1E[6E05]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 23453 00004E92 745D                    	JZ	short NOTFOUND			    ; no
 23454                                  
 23455                                  	; 29/07/2019 - Retro DOS v3.2
 23456                                  	; MSDOS 6.0				    ; fully or partially found
 23457 00004E94 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 23458 00004E97 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 23459 00004E99 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 23460                                  
 23461                                  ;hkn; SS override for attrib/sattrib
 23462 00004E9A 368A0E[2805]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 23463 00004E9F 368A2E[2A05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 23464 00004EA4 36882E[2805]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 23465 00004EA9 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 23466 00004EAD E81CFE                  	call	MatchAttributes			    ;AN000;FO.;
 23467                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 23468 00004EB0 59                      	POP	CX				    ;AN000;FO.;
 23469 00004EB1 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 23470                                  parfnd:
 23471                                  
 23472                                  ;hkn; SS override
 23473 00004EB3 368936[A50F]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 23474 00004EB8 89CB                    	MOV	BX,CX
 23475                                  	; MSDOS 6.0
 23476 00004EBA 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 23477                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 23478 00004EBD 36A3[1203]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 23479 00004EC1 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 23480 00004EC4 36A3[7E05]              	MOV	[SS:DIRSTART],AX			    ;AN001;;FO.
 23481                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23482                                  	;mov	ax,[bx+3] ; MSDOS 3.3
 23483 00004EC8 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 23484 00004ECB 36A3[7805]              	MOV	[SS:CLUSNUM],AX			    ;
 23485                                  
 23486 00004ECF 06                      	PUSH	ES				    ; save ES
 23487                                  ;hkn; SS override
 23488 00004ED0 36C41E[4605]            	LES	BX,[SS:THISDPB]			    ; put drive id
 23489 00004ED5 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 23490                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 23491 00004ED8 07                      	POP	ES				    ; pop ES
 23492                                  ;SR;
 23493                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 23494                                  ;indicate it is not a root dir
 23495                                  ;
 23496 00004ED9 36C706[9E05]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 23497                                  
 23498 00004EE0 368C06[A005]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 23499 00004EE5 89FB                    	MOV	BX,DI				    ; start of entry
 23500                                  	;lea	si,[di+1Ah]
 23501 00004EE7 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 23502                                  						    ; dir_first field in the
 23503                                  						    ; dir entry
 23504                                  ;hkn; SS override for FastOpenFlg
 23505                                  	;or	byte [ss:FastOpenFlg],2
 23506 00004EEA 36800E[A40F]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 23507                                  ;	POP	AX
 23508 00004EF0 C3                      	RETN
 23509                                  NOTFOUND:
 23510 00004EF1 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 23511 00004EF4 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 23512 00004EF6 36C606[A40F]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 23513                                  Partial_Success:
 23514                                  	;and	byte [SS:FastOpenFlg],0FBh
 23515 00004EFC 368026[A40F]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 23516                                  NOLOOKUP:
 23517                                  ;	POP	AX
 23518 00004F02 F9                      	STC
 23519 00004F03 C3                      	RETN
 23520                                  
 23521                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 23522                                  ;-----------------------------------------------------------------------------
 23523                                  ;
 23524                                  ; Procedure Name : InsertPath
 23525                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 23526                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 23527                                  ;	  DS = DOSDATA
 23528                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 23529                                  ;
 23530                                  ;-----------------------------------------------------------------------------
 23531                                  
 23532                                  InsertPath:
 23533 00004F04 9C                      	PUSHF
 23534                                  ;hkn; SS override for FastOpenFlag
 23535                                  	;test	byte [SS:FastOpenFlg], 1
 23536 00004F05 36F606[A40F]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 23537 00004F0B 7478                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 23538                                  	;test	byte [ss:FastOpenFlg],2
 23539 00004F0D 36F606[A40F]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 23540 00004F13 740D                    	JZ	short INSERT_DIR_INFO		; no
 23541                                  	;and	byte [ss:FastOpenFlg],0FDh
 23542 00004F15 368026[A40F]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 23543 00004F1B 368B3E[A50F]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 23544 00004F20 EB5D                    	JMP	short GET_NEXT2
 23545                                  INSERT_DIR_INFO:				; save registers
 23546 00004F22 1E                      	PUSH	DS
 23547 00004F23 06                      	PUSH	ES
 23548 00004F24 53                      	PUSH	BX
 23549 00004F25 56                      	PUSH	SI
 23550 00004F26 57                      	PUSH	DI
 23551 00004F27 51                      	PUSH	CX
 23552 00004F28 50                      	PUSH	AX
 23553                                  
 23554                                  ;hkn; SS override
 23555 00004F29 36C53E[9E05]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 23556 00004F2E BE[790F]                	MOV	SI,FastOpen_Ext_Info
 23557                                  	;mov	ax,[di+6]
 23558 00004F31 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 23559                                  	; MSDOS 6.0
 23560                                  	;mov	[ss:si+1],ax
 23561 00004F34 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 23562                                  	; 22/07/2019 - Retro DOS v3.2
 23563 00004F38 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 23564                                  
 23565                                  ;hkn; SS is DOSDATA
 23566 00004F3B 16                      	push	ss
 23567 00004F3C 1F                      	pop	ds
 23568                                  	; MSDOS 3.3	
 23569                                  	;mov	[si+1],ax	
 23570                                  	;MOV	[SI+FEI.dirsec],AX
 23571                                  	; MSDOS 6.0
 23572                                  	;mov	[si+3],ax
 23573 00004F3D 894403                  	MOV	[SI+FEI.dirsec+2],AX  ;AN000;>32mb save high dir sector
 23574                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23575 00004F40 A1[7805]                	MOV	AX,[CLUSNUM]		; save next cluster number
 23576                                  	;;mov	[si+5],ax ; MSDOS 6.0
 23577                                  	;mov	[si+3],ax ; MSDOS 3.3
 23578 00004F43 894405                  	MOV	[SI+FEI.clusnum],AX
 23579                                  ; MSDOS 6.0
 23580 00004F46 A1[1203]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 23581                                  	;mov	[si+7],ax
 23582 00004F49 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 23583 00004F4C A1[7E05]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 23584                                  	;mov	[si+9],ax
 23585 00004F4F 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 23586                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23587 00004F52 89D8                    	MOV	AX,BX
 23588                                  	;;add	di,16  ; MSDOS 3.3
 23589                                  	;add	di,20  ; MSDOS 6.0
 23590 00004F54 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 23591 00004F57 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 23592                                  	;mov	cl,32
 23593 00004F59 B120                    	MOV	CL,dir_entry.size
 23594 00004F5B F6F1                    	DIV	CL
 23595                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 23596 00004F5D 8804                    	mov	[si],al
 23597                                  
 23598 00004F5F 1E                      	PUSH	DS
 23599 00004F60 07                      	POP	ES
 23600                                  
 23601 00004F61 8E1E[A005]              	MOV	DS,[CURBUF+2]
 23602 00004F65 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 23603                                  	;cmp	word [di+1Ah],0
 23604 00004F67 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 23605                                  					; never insert info when file is empty
 23606 00004F6B 740B                    	JZ	short SKIP_INSERT	; e.g. newly created file
 23607                                  
 23608 00004F6D 56                      	PUSH	SI			; ES:BX -> extended info
 23609 00004F6E 5B                      	POP	BX
 23610                                  
 23611                                  	;mov	al,2
 23612 00004F6F B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 23613 00004F71 BE[730F]                	MOV	SI,FastOpenTable
 23614                                  	;call	far [es:si+2]
 23615 00004F74 FF5C02                  	CALL	far [SI+fastopen_entry.name_caching]
 23616                                  
 23617 00004F77 F8                      	CLC
 23618                                  SKIP_INSERT:
 23619 00004F78 58                      	POP	AX
 23620 00004F79 59                      	POP	CX			; restore registers
 23621 00004F7A 5F                      	POP	DI
 23622 00004F7B 5E                      	POP	SI
 23623 00004F7C 5B                      	POP	BX
 23624 00004F7D 07                      	POP	ES
 23625 00004F7E 1F                      	POP	DS
 23626                                  GET_NEXT2:
 23627                                  	;or	[ss:FastOpenFlg],8
 23628 00004F7F 36800E[A40F]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 23629                                  					; we got dir info from fastopen so
 23630                                  GET_NEXT_ELEMENT:
 23631 00004F85 9D                      	POPF
 23632 00004F86 C3                      	RETN
 23633                                  
 23634                                  ;============================================================================
 23635                                  ; DEV.ASM, MSDOS 6.0, 1991
 23636                                  ;============================================================================
 23637                                  ; 28/07/2018 - Retro DOS v3.0
 23638                                  
 23639                                  ; DEV.ASM: Retro DOS v2.0 - 14/03/2018
 23640                                  
 23641                                  ;TITLE   DEV - Device call routines
 23642                                  ;NAME    Dev
 23643                                  
 23644                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 23645                                  ;----------------------------------------------------------------------------
 23646                                  ;
 23647                                  ; Procedure Name : IOFUNC
 23648                                  ;
 23649                                  ; Inputs:
 23650                                  ;	DS:SI Points to SFT
 23651                                  ;	AH is function code
 23652                                  ;		= 0 Input
 23653                                  ;		= 1 Input Status
 23654                                  ;		= 2 Output
 23655                                  ;		= 3 Output Status
 23656                                  ;		= 4 Flush
 23657                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 23658                                  ;				   present.
 23659                                  ;	AL = character if output
 23660                                  ; Function:
 23661                                  ;	Perform indicated I/O to device or file
 23662                                  ; Outputs:
 23663                                  ;	AL is character if input
 23664                                  ;	If a status call
 23665                                  ;		zero set if not ready
 23666                                  ;		zero reset if ready (character in AL for input status)
 23667                                  ; For regular files:
 23668                                  ;	Input Status
 23669                                  ;		Gets character but restores position
 23670                                  ;		Zero set on EOF
 23671                                  ;	Input
 23672                                  ;		Gets character advances position
 23673                                  ;		Returns ^Z on EOF
 23674                                  ;	Output Status
 23675                                  ;		Always ready
 23676                                  ; AX altered, all other registers preserved
 23677                                  ;----------------------------------------------------------------------------
 23678                                  
 23679                                  IOFUNC:
 23680 00004F87 368C16[5603]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 23681                                  					; DEVIOBUF
 23682 00004F8C 36C706[5403][8003]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 23683 00004F93 36C706[5803]0100        	MOV	WORD [SS:IOSCNT],1
 23684 00004F9A 36A3[8003]              	MOV	WORD [SS:DEVIOBUF],AX
 23685                                  	;test	word [si+5],8000h
 23686 00004F9E F744050080              	TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet
 23687 00004FA3 7403                    	JZ	short IOTO22		;AN000;
 23688 00004FA5 E98500                  	JMP	IOTOFILE		;AN000;
 23689                                  IOTO22:
 23690                                  	;test	word [si+5],80h ; 17/05/2019
 23691 00004FA8 F744058000              	TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 23692 00004FAD 7502                    	JNZ	short IOTO33		;AN000;
 23693 00004FAF EB7C                    	JMP	IOTOFILE		;AN000;
 23694                                  IOTO33:
 23695 00004FB1 E882C6                  	call	save_world
 23696 00004FB4 8CDA                    	MOV	DX,DS
 23697 00004FB6 8CD3                    	MOV	BX,SS
 23698 00004FB8 8EDB                    	MOV	DS,BX
 23699 00004FBA 8EC3                    	MOV	ES,BX
 23700 00004FBC 31DB                    	XOR	BX,BX
 23701 00004FBE 80FC05                  	cmp	ah,5		    ; system wait enabled?
 23702 00004FC1 7504                    	jnz	short _no_sys_wait
 23703 00004FC3 81CB0004                	or	bx,0400H	    ; Set bit 10 in status word for driver
 23704                                  				    ; It is up to device driver to carry out
 23705                                  				    ; appropriate action.
 23706                                  _no_sys_wait:
 23707 00004FC7 891E[4903]              	MOV	[IOCALL_REQSTAT],BX
 23708 00004FCB 31DB                    	XOR	BX,BX
 23709 00004FCD 881E[5303]              	MOV	[IOMED],BL
 23710                                  
 23711 00004FD1 88E3                    	MOV	BL,AH		 	; get function
 23712 00004FD3 8AA7[4213]              	MOV	AH,[BX+LenTab]
 23713 00004FD7 D1E3                    	SHL	BX,1
 23714 00004FD9 8B8F[4813]              	MOV	CX,[BX+CmdTab]
 23715 00004FDD BB[4603]                	MOV	BX,IOCALL
 23716 00004FE0 8826[4603]              	MOV	[IOCALL_REQLEN],AH
 23717 00004FE4 882E[4803]              	MOV	[IOCALL_REQFUNC],CH
 23718                                  
 23719 00004FE8 8EDA                    	MOV	DS,DX
 23720 00004FEA E84401                  	CALL	DEVIOCALL
 23721 00004FED 368B3E[4903]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 23722                                  	;test	di,8000h
 23723                                  	;jnz	short DevErr
 23724 00004FF2 21FF                    	and	di,di
 23725 00004FF4 7820                    	js	short DevErr
 23726                                  
 23727                                  OKDevIO:
 23728 00004FF6 8CD0                    	MOV	AX,SS
 23729 00004FF8 8ED8                    	MOV	DS,AX
 23730                                  
 23731                                  	;cmp	ch, 5
 23732 00004FFA 80FD05                  	CMP	CH,DEVRDND
 23733 00004FFD 7506                    	JNZ	short DNODRD
 23734 00004FFF A0[5303]                	MOV	AL,[IORCHR]
 23735 00005002 A2[8003]                	MOV	[DEVIOBUF],AL
 23736                                  
 23737                                  DNODRD: 
 23738 00005005 8A26[4A03]              	MOV	AH,[IOCALL_REQSTAT+1]
 23739 00005009 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 23740                                  	;and	ah,2
 23741 0000500B 80E402                  	AND	AH,STBUI>>8
 23742                                  
 23743                                  QuickReturn:				;AN000; 2/13/KK
 23744 0000500E E812C6                  	call	restore_world
 23745                                  
 23746                                  	; SR;
 23747                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 23748                                  	; IoStatFail = -1 (set after return from the I24)
 23749                                  	;
 23750                                  
 23751                                  	; MSDOS 6.0
 23752                                  	;pushf
 23753                                  	;mov	al,[ss:IoStatFail]	;assume fail error
 23754                                  	;cbw				;sign extend to word
 23755                                  	;cmp	ax,-1
 23756                                  	;jne	short not_fail_ret
 23757                                  	;inc	byte [ss:IoStatFail]
 23758                                  	;popf
 23759                                  	;retn
 23760                                  
 23761                                  ;not_fail_ret:
 23762 00005011 36A1[8003]              	MOV	AX,[SS:DEVIOBUF]	;ss override
 23763                                  	;popf
 23764 00005015 C3                      	retn
 23765                                  
 23766                                  ;IOTOFILEJ:
 23767                                  ;	JMP	SHORT IOTOFILE
 23768                                  
 23769                                  DevErr:
 23770 00005016 88CC                    	MOV	AH,CL
 23771 00005018 E8F30A                  	call	CHARHARD
 23772 0000501B 3C01                    	CMP	AL,1
 23773 0000501D 7506                    	JNZ	short NO_RETRY
 23774 0000501F E801C6                  	call	restore_world		
 23775 00005022 E962FF                  	JMP	IOFUNC	; 10/08/2018
 23776                                  
 23777                                  NO_RETRY:
 23778                                  
 23779                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 23780                                  	; ready so that DOS doesn't get caught in a status loop when user 
 23781                                  	; simply wants to ignore the error.
 23782                                  	;
 23783                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 23784                                  	; should be checked by the caller on return
 23785                                  	;
 23786                                  
 23787                                  					; SS override
 23788 00005025 368026[4A03]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 23789                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI >> 8)
 23790                                  
 23791                                  	; SR;
 23792                                  	; Check if user failed
 23793                                  	;
 23794                                  
 23795                                  	; MSDOS 6.0
 23796                                  	;cmp	al,3
 23797                                  	;jnz	short not_fail
 23798                                  	;dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 23799                                  ;not_fail:
 23800 0000502B EBC9                    	JMP	short OKDevIO
 23801                                  
 23802                                  IOTOFILE:
 23803 0000502D 08E4                    	OR	AH,AH
 23804 0000502F 7423                    	JZ	short IOIN
 23805 00005031 FECC                    	DEC	AH
 23806 00005033 7405                    	JZ	short IOIST
 23807 00005035 FECC                    	DEC	AH
 23808 00005037 7411                    	JZ	short IOUT
 23809 00005039 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 23810                                  
 23811                                  IOIST:
 23812                                  	;push	word [si+15h]
 23813 0000503A FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 23814                                  	;push	word [si+17h]
 23815 0000503D FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 23816 00005040 E81100                  	CALL	IOIN
 23817                                  	;pop	word [si+17h]
 23818 00005043 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 23819                                  	;pop	word [si+15h]
 23820 00005046 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 23821 00005049 C3                      	retn
 23822                                  
 23823                                  IOUT:
 23824 0000504A E81B00                  	CALL	SETXADDR
 23825 0000504D E806F0                  	call	DOS_WRITE
 23826 00005050 E84800                  	CALL	RESTXADDR	; If you change this into a jmp don't
 23827                                  IOUT_retn:
 23828 00005053 C3                      	retn			; come crying to me when things don't
 23829                                  				; work ARR
 23830                                  IOIN:
 23831 00005054 E81100                  	CALL	SETXADDR
 23832                                  					; SS override for DOS34_FLAG
 23833                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 23834 00005057 E871EE                  	CALL	DOS_READ
 23835                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 23836 0000505A 09C9                    	OR	CX,CX			; Check EOF
 23837 0000505C E83C00                  	CALL	RESTXADDR
 23838                                  					; SS override
 23839 0000505F 36A0[8003]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 23840 00005063 75EE                    	jnz	short IOUT_retn	
 23841 00005065 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 23842 00005067 C3                      	retn
 23843                                  
 23844                                  SETXADDR:
 23845                                  					; SS override
 23846 00005068 368F06[3603]            	POP	WORD [SS:CALLSCNT]	; Return address
 23847                                  
 23848 0000506D E8C6C5                  	call	save_world
 23849                                  
 23850                                  					; SS override for DMAADD and THISSFT
 23851 00005070 36FF36[F802]            	PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 23852 00005075 36FF36[FA02]            	PUSH	WORD [SS:DMAADD+2]
 23853 0000507A 368C1E[5C05]            	MOV	[SS:THISSFT+2],DS
 23854                                  
 23855 0000507F 16                      	push	ss
 23856 00005080 1F                      	pop	ds
 23857                                  
 23858 00005081 8936[5A05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 23859 00005085 8B0E[5603]              	MOV	CX,[IOXAD+2]
 23860 00005089 890E[FA02]              	MOV	[DMAADD+2],CX
 23861 0000508D 8B0E[5403]              	MOV	CX,[IOXAD]
 23862 00005091 890E[F802]              	MOV	[DMAADD],CX		; Set byte trans addr
 23863 00005095 8B0E[5803]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 23864 00005099 EB0F                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 23865                                  
 23866                                  RESTXADDR:
 23867 0000509B 8F06[3603]              	POP	WORD [CALLSCNT]		; Return address
 23868 0000509F 8F06[FA02]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 23869 000050A3 8F06[F802]              	POP	WORD [DMAADD]
 23870                                  
 23871 000050A7 E879C5                  	call	restore_world
 23872                                  					; SS override
 23873                                  RESTRET:
 23874 000050AA 36FF26[3603]            	JMP	WORD [SS:CALLSCNT]	; Return address
 23875                                  
 23876                                  
 23877                                  ; 29/07/2018 - Retro DOS v3.0
 23878                                  ; IBMDOS.COM (1987) - Offset 4D82h
 23879                                  
 23880                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 23881                                  
 23882                                  ;----------------------------------------------------------------------------
 23883                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 23884                                  ;
 23885                                  ;	Dev_Open_SFT issues an open call to the device associated with
 23886                                  ;	the SFT.
 23887                                  ;
 23888                                  ;	ENTRY	(ES:DI) = SFT
 23889                                  ;	EXIT	none
 23890                                  ;	USES	all
 23891                                  ;----------------------------------------------------------------------------
 23892                                  
 23893                                  DEV_OPEN_SFT:
 23894 000050AF E884C5                  	call	save_world
 23895                                  	;mov	al,0Dh	
 23896 000050B2 B00D                    	MOV	AL,DEVOPN
 23897 000050B4 EB05                    	JMP	SHORT DO_OPCLS
 23898                                  
 23899                                  ;----------------------------------------------------------------------------
 23900                                  ; Procedure Name : DEV_CLOSE_SFT
 23901                                  ;
 23902                                  ; Inputs:
 23903                                  ;	ES:DI Points to SFT
 23904                                  ; Function:
 23905                                  ;	Issue a CLOSE call to the correct device
 23906                                  ; Outputs:
 23907                                  ;	None
 23908                                  ; ALL preserved
 23909                                  ;----------------------------------------------------------------------------
 23910                                  
 23911                                  DEV_CLOSE_SFT:
 23912 000050B6 E87DC5                  	call	save_world
 23913                                  	;mov	al,0Eh	
 23914 000050B9 B00E                    	MOV	AL,DEVCLS
 23915                                  
 23916                                  	; Main entry for device open and close. AL contains the function 
 23917                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 23918                                  	; open/close to block devices. This allows networks to function but 
 23919                                  	; does NOT hang up with bogus change-line code.
 23920                                  
 23921                                  	;entry	DO_OPCLS
 23922                                  DO_OPCLS:
 23923                                  	; Is the SFT for the net?  If so, no action necessary.
 23924                                  
 23925                                  	; MSDOS 3.3
 23926                                  	;call	IsSFTNet
 23927                                  	;jnz	short OPCLS_DONE
 23928                                  
 23929                                  	; MSDOS 6.0
 23930                                  	;test	word [es:di+5],8000h
 23931 000050BB 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 23932 000050C1 756A                    	JNZ	short OPCLS_DONE	; NOP on net SFTs
 23933 000050C3 30E4                    	XOR	AH,AH			; Unit
 23934                                  	;test	word [es:di+5],80h
 23935 000050C5 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 23936                                  	;les	di,[es:di+7]
 23937 000050CB 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 23938 000050CF 7513                    	JNZ	short GOT_DEV_ADDR
 23939                                  
 23940                                  	; We are about to call device open/close on a block driver. If no 
 23941                                  	; sharing then just short circuit to done.
 23942                                  	
 23943                                  ;;;;;	invoke	CheckShare
 23944                                  
 23945                                  	; MSDOS 3.3
 23946                                  	;call	CheckShare	; cmp byte [cs:fShare],0
 23947                                  	;jz	short OPCLS_DONE
 23948                                  
 23949                                  	; MSDOS 6.0
 23950                                  					; SS override
 23951 000050D1 36803E[CF02]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 23952 000050D7 7654                    	JBE	short OPCLS_DONE	;AN010; yes
 23953                                  
 23954                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23955                                  	;mov	ah,[es:di+1]
 23956 000050D9 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 23957 000050DD 268A0D                  	mov	cl,[es:di]
 23958                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 23959                                  	;les	di,[es:di+12h]
 23960 000050E0 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 23961                                  GOT_DEV_ADDR:				; ES:DI -> device
 23962                                  	;test	word [es:di+4],800h
 23963 000050E4 26F745040008            	TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 23964 000050EA 7441                    	JZ	short OPCLS_DONE	; Device can't
 23965 000050EC 06                      	PUSH	ES
 23966 000050ED 1F                      	POP	DS
 23967 000050EE 89FE                    	MOV	SI,DI			; DS:SI -> device
 23968                                  OPCLS_RETRY:
 23969                                  	;Context ES
 23970 000050F0 16                      	push	ss
 23971 000050F1 07                      	pop	es
 23972                                  					; DEVCALL is in DOSDATA
 23973 000050F2 BF[2403]                	MOV	DI,DEVCALL
 23974                                  
 23975 000050F5 89FB                    	MOV	BX,DI
 23976 000050F7 50                      	PUSH	AX
 23977                                  	;mov	al,13
 23978 000050F8 B00D                    	MOV	AL,DOPCLHL
 23979 000050FA AA                      	STOSB				; Length
 23980 000050FB 58                      	POP	AX
 23981 000050FC 86E0                    	XCHG	AH,AL
 23982 000050FE AA                      	STOSB				; Unit
 23983 000050FF 86E0                    	XCHG	AH,AL
 23984 00005101 AA                      	STOSB				; Command
 23985 00005102 26C7050000              	MOV	WORD [ES:DI],0		; Status
 23986 00005107 50                      	PUSH	AX			; Save Unit,Command
 23987                                  	;invoke	DEVIOCALL2
 23988 00005108 E82900                  	call	DEVIOCALL2
 23989                                  
 23990                                  	;mov	di,[es:bx+3]
 23991 0000510B 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 23992                                  	;test	di,8000h
 23993                                  	;jz	short OPCLS_DONEP	
 23994 0000510F 21FF                    	and	di,di
 23995 00005111 7919                    	jns	short OPCLS_DONEP	; No error
 23996                                  	;test	word [si+4],8000h
 23997                                  	; 22/11/2022 (!BugFix!)
 23998                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVTYP
 23999 00005113 F744040080              	test	word [SI+SYSDEV.ATT],DEVTYP ; 22/11/2022
 24000 00005118 7404                    	JZ	short BLKDEV
 24001 0000511A B486                    	MOV	AH,86H			; Read error in data, Char dev
 24002 0000511C EB04                    	JMP	SHORT HRDERR
 24003                                  
 24004                                  BLKDEV:
 24005 0000511E 88C8                    	MOV	AL,CL			; Drive # in AL
 24006 00005120 B406                    	MOV	AH,6			; Read error in data, Blk dev
 24007                                  HRDERR:
 24008                                  	;invoke	CHARHARD
 24009 00005122 E8E909                  	call	CHARHARD
 24010 00005125 3C01                    	CMP	AL,1
 24011 00005127 7503                    	JNZ	short OPCLS_DONEP	; IGNORE or FAIL
 24012                                  					;  Note that FAIL is essentually IGNORED
 24013 00005129 58                      	POP	AX			; Get back Unit, Command
 24014 0000512A EBC4                    	JMP	short OPCLS_RETRY
 24015                                  
 24016                                  OPCLS_DONEP:
 24017 0000512C 58                      	POP	AX			; Clean stack
 24018                                  OPCLS_DONE:
 24019 0000512D E8F3C4                  	call	restore_world
 24020 00005130 C3                      	retn
 24021                                  
 24022                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 24023                                  ;----------------------------------------------------------------------------
 24024                                  ;**	DevIoCall  - Call Device
 24025                                  ;
 24026                                  ;	ENTRY	DS:SI Points to device SFT
 24027                                  ;		ES:BX Points to request data
 24028                                  ;	EXIT	DS:SI -> Device driver
 24029                                  ;	USES	DS:SI,AX
 24030                                  ;----------------------------------------------------------------------------
 24031                                  ;**	DevIoCall2 - Call Device
 24032                                  ;
 24033                                  ;	ENTRY	DS:SI Points to DPB
 24034                                  ;		ES:BX Points to request data
 24035                                  ;	EXIT	DS:SI -> Device driver
 24036                                  ;	USES	DS:SI,AX
 24037                                  ;----------------------------------------------------------------------------
 24038                                  
 24039                                  DEVIOCALL:
 24040                                  					; SS override for CALLSSEC, 
 24041                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 24042 00005131 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 24043                                  
 24044                                  	;entry	DEVIOCALL2
 24045                                  DEVIOCALL2:
 24046                                  	;EnterCrit critDevice
 24047 00005134 E8E8CF                  	call	EcritDevice
 24048                                  
 24049                                  	; 23/07/2019 - Retro DOS v3.2
 24050                                  
 24051                                  	; MSDOS 6.0
 24052                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 24053                                  	;test	byte [si+5],80h
 24054 00005137 F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 24055 0000513B 7548                    	jnz	short chardev2		;AN000; >32mb no
 24056                                  	
 24057                                  	;cmp	byte [es:bx+2],4
 24058 0000513D 26807F0204              	CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 24059 00005142 740E                    	JZ	short chkext		;AN000; >32mb   yes
 24060                                  	;cmp	byte [es:bx+2],8
 24061 00005144 26807F0208              	CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 24062 00005149 7407                    	JZ	short chkext		;AN000; >32mb   yes
 24063                                  	;cmp	byte [es:bx+2],9
 24064 0000514B 26807F0209              	CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 24065                                  					;AN000; >32mb write/verify ?
 24066 00005150 7533                    	JNZ	short chardev2		;AN000; >32mb no
 24067                                  chkext:
 24068                                  	;CALL	RW_SC			;AN000;LB. use secondary cache if there
 24069                                  	;JC	short dev_exit		;AN000;LB. done
 24070                                  
 24071                                  	;test	byte [si+4],2
 24072 00005152 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 24073 00005156 741D                    	JZ	short chksector		;AN000;>32mb   no
 24074 00005158 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 24075 0000515C 36A1[3803]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 24076 00005160 36C706[3803]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 24077 00005167 36A3[3E03]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 24078 0000516B 36A1[B005]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 24079 0000516F 36A3[4003]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 24080 00005173 EB10                    	JMP	short chardev2		;AN000; >32mb
 24081                                  chksector:				;AN000; >32mb
 24082 00005175 36833E[B005]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 24083 0000517B 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 24084                                  	;mov	word [es:bx+3],8107h
 24085 0000517D 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 24086                                  					;AN000; >32mb
 24087 00005183 EB1D                    	JMP	SHORT dev_exit		;AN000; >32mb
 24088                                  
 24089                                  chardev2:				;AN000;
 24090                                  
 24091                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 24092                                  	; preserved
 24093                                  
 24094                                  	;mov	ax,[si+6]
 24095 00005185 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 24096 00005188 36A3[4203]              	MOV	[SS:CALLDEVAD],AX
 24097 0000518C 368C1E[4403]            	MOV	[SS:CALLDEVAD+2],DS
 24098 00005191 36FF1E[4203]            	CALL	far [SS:CALLDEVAD]
 24099                                  	;mov	ax,[si+8]
 24100 00005196 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 24101 00005199 36A3[4203]              	MOV	[SS:CALLDEVAD],AX
 24102 0000519D 36FF1E[4203]            	CALL	far [SS:CALLDEVAD]
 24103                                  	; MSDOS 6.0
 24104                                  	;CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 24105                                  	;JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 24106                                  dev_exit:
 24107                                  	;LeaveCrit critDevice
 24108 000051A2 E882CF                  	call	LcritDevice
 24109 000051A5 C3                      	retn
 24110                                  
 24111                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 24112                                  ;---------------------------------------------------------------------------
 24113                                  ;
 24114                                  ; Procedure Name : SETREAD, SETWRITE
 24115                                  ;
 24116                                  ; Inputs:
 24117                                  ;	DS:BX = Transfer Address
 24118                                  ;	CX = Record Count
 24119                                  ;	DX = Starting Record
 24120                                  ;	AH = Media Byte
 24121                                  ;	AL = Unit Code
 24122                                  ; Function:
 24123                                  ;	Set up the device call header at DEVCALL
 24124                                  ; Output:
 24125                                  ;	ES:BX Points to DEVCALL
 24126                                  ; No other registers effected
 24127                                  ;
 24128                                  ;---------------------------------------------------------------------------
 24129                                  
 24130                                  SETREAD:
 24131 000051A6 57                      	PUSH	DI
 24132 000051A7 51                      	PUSH	CX
 24133 000051A8 50                      	PUSH	AX
 24134 000051A9 B104                    	MOV	CL,DEVRD ; mov cl,4
 24135                                  SETCALLHEAD:
 24136 000051AB B016                    	MOV	AL,DRDWRHL ; mov al,16h
 24137 000051AD 16                      	PUSH	SS
 24138 000051AE 07                      	POP	ES
 24139                                  					; DEVCALL is in DOSDATA
 24140 000051AF BF[2403]                	MOV	DI,DEVCALL
 24141                                  
 24142 000051B2 AA                      	STOSB				; length
 24143 000051B3 58                      	POP	AX
 24144 000051B4 AA                      	STOSB				; Unit
 24145 000051B5 50                      	PUSH	AX
 24146 000051B6 88C8                    	MOV	AL,CL
 24147 000051B8 AA                      	STOSB				; Command code
 24148 000051B9 31C0                    	XOR	AX,AX
 24149 000051BB AB                      	STOSW				; Status
 24150 000051BC 83C708                  	ADD	DI,8			; Skip link fields
 24151 000051BF 58                      	POP	AX
 24152 000051C0 86E0                    	XCHG	AH,AL
 24153 000051C2 AA                      	STOSB				; Media byte
 24154 000051C3 86C4                    	XCHG	AL,AH
 24155 000051C5 50                      	PUSH	AX
 24156 000051C6 89D8                    	MOV	AX,BX
 24157 000051C8 AB                      	STOSW
 24158 000051C9 8CD8                    	MOV	AX,DS
 24159 000051CB AB                      	STOSW				; Transfer addr
 24160 000051CC 59                      	POP	CX			; Real AX
 24161 000051CD 58                      	POP	AX			; Real CX
 24162 000051CE AB                      	STOSW				; Count
 24163 000051CF 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 24164 000051D0 AB                      	STOSW				; Start
 24165 000051D1 91                      	XCHG	AX,CX
 24166 000051D2 87D1                    	XCHG	DX,CX
 24167 000051D4 5F                      	POP	DI
 24168                                  					; DEVCALL is in DOSDATA
 24169 000051D5 BB[2403]                	MOV	BX,DEVCALL
 24170 000051D8 C3                      	retn
 24171                                  
 24172                                  	;entry	SETWRITE
 24173                                  SETWRITE:
 24174                                  
 24175                                  ; Inputs:
 24176                                  ;	DS:BX = Transfer Address
 24177                                  ;	CX = Record Count
 24178                                  ;	DX = Starting Record
 24179                                  ;	AH = Media Byte
 24180                                  ;	AL = Unit Code
 24181                                  ; Function:
 24182                                  ;	Set up the device call header at DEVCALL
 24183                                  ; Output:
 24184                                  ;	ES:BX Points to DEVCALL
 24185                                  ; No other registers effected
 24186                                  
 24187 000051D9 57                      	PUSH	DI
 24188 000051DA 51                      	PUSH	CX
 24189 000051DB 50                      	PUSH	AX
 24190 000051DC B108                    	MOV	CL,DEVWRT ; mov cl,8
 24191 000051DE 36020E[CB02]            	ADD	CL,[SS:VERFLG]		; SS override
 24192 000051E3 EBC6                    	JMP	SHORT SETCALLHEAD
 24193                                  
 24194                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 24195                                  ;---------------------------------------------------------------------------
 24196                                  ;
 24197                                  ; Procedure Name : RW_SC
 24198                                  ;
 24199                                  ; Inputs:
 24200                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 24201                                  ;	 [SC_STATUS]= SC validity status
 24202                                  ;	 [SEQ_SECTOR]= last sector read
 24203                                  ; Function:
 24204                                  ;	Read from or write through secondary cache
 24205                                  ; Output:
 24206                                  ;	ES:BX Points to DEVCALL
 24207                                  ;	carry clear, I/O is not done
 24208                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 24209                                  ;	carry set, I/O is done
 24210                                  ;
 24211                                  ;----------------------------------------------------------------------------
 24212                                  
 24213                                  ;procedure   RW_SC,NEAR		;AN000;
 24214                                  ;
 24215                                  ;	; SS override for all variables used.
 24216                                  ;
 24217                                  ;	CMP	[SC_CACHE_COUNT],0	;AN000;LB. secondary cache exists?
 24218                                  ;	JZ	scexit4 		;AN000;LB. no, do nothing
 24219                                  ;	CMP	[CALLSCNT],1		;AN000;LB. sector count = 1 (buffer I/O)
 24220                                  ;	JNZ	scexit4 		;AN000;LB. no, do nothing
 24221                                  ;	PUSH	CX			    ;AN000;;LB.
 24222                                  ;	PUSH	DX			    ;AN000;;LB. yes
 24223                                  ;	PUSH	DS			    ;AN000;;LB. save registers
 24224                                  ;	PUSH	SI			    ;AN000;;LB.
 24225                                  ;	PUSH	ES			    ;AN000;;LB.
 24226                                  ;	PUSH	DI			    ;AN000;;LB.
 24227                                  ;	MOV	DX,WORD PTR [CALLSSEC]	    ;AN000;;LB.  starting sector
 24228                                  ;	CMP	BYTE PTR [DEVCALL.REQFUNC],DEVRD ;AN000;LB. read ?
 24229                                  ;	JZ	doread			    ;AN000;LB. yes
 24230                                  ;	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 24231                                  ;	JMP	scexit2 		    ;AN000;LB. back to normal
 24232                                  ;scexit4:				    ;AN000;
 24233                                  ;	CLC				    ;AN000;LB. I/O not done yet
 24234                                  ;	return				    ;AN000;LB.
 24235                                  ;doread: 				    ;AN000;
 24236                                  ;	CALL	SC2BUF			    ;AN000;LB. check if in SC
 24237                                  ;	JC	readSC			    ;AN000;LB.
 24238                                  ;	MOV	[DEVCALL.REQSTAT],STDON     ;AN000;LB. fake done and ok
 24239                                  ;	STC				    ;AN000;LB. set carry
 24240                                  ;	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 24241                                  ;readSC: 				    ;AN000;
 24242                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB. subtract sector num from
 24243                                  ;	MOV	CX,WORD PTR [CALLSSEC]	    ;AN000;;LB. saved sequential sector
 24244                                  ;	SUB	CX,WORD PTR [SEQ_SECTOR]    ;AN000;;LB. number
 24245                                  ;	SBB	AX,WORD PTR [SEQ_SECTOR+2]  ;AN000;;LB.
 24246                                  ;	CMP	AX,0			    ;AN000;;LB. greater than 64K
 24247                                  ;	JNZ	saveseq2		    ;AN000;;LB. yes,save seq. sector #
 24248                                  ;chklow: 						
 24249                                  ;	CMP	CX,1			    ;AN000;;LB. <= 1
 24250                                  ;	JA	saveseq2		    ;AN000;;LB. no, not sequential
 24251                                  ;	MOV	[SC_STATUS],-1		    ;AN000;;LB. prsume all SC valid
 24252                                  ;	MOV	AX,[SC_CACHE_COUNT]	    ;AN000;;LB. yes, sequential
 24253                                  ;	MOV	[CALLSCNT],AX		    ;AN000;;LB. read continuous sectors
 24254                                  ;readsr:
 24255                                  ;	MOV	AX,WORD PTR [CALLXAD+2]     ;AN000;;LB. save buffer addr
 24256                                  ;	MOV	[TEMP_VAR2],AX		    ;AN000;;LB. in temp vars
 24257                                  ;	MOV	AX,WORD PTR [CALLXAD]	    ;AN000;;LB.
 24258                                  ;	MOV	[TEMP_VAR],AX		    ;AN000;;LB.
 24259                                  ;						
 24260                                  ;	MOV	AX,WORD PTR [SC_CACHE_PTR]  ;AN000;LB. use SC cache addr as
 24261                                  ;	MOV	WORD PTR [CALLXAD],AX	    ;AN000;LB. transfer addr
 24262                                  ;	MOV	AX,WORD PTR [SC_CACHE_PTR+2] ;AN000;LB.
 24263                                  ;	MOV	WORD PTR [CALLXAD+2],AX     ;AN000;LB.
 24264                                  ;	MOV	[SC_FLAG],1		    ;AN000;LB. flag it for later;
 24265                                  ;	MOV	AL,[SC_DRIVE]		    ;AN000;;LB. current drive
 24266                                  ;	MOV	[CURSC_DRIVE],AL	    ;AN000;;LB. set current drive
 24267                                  ;	MOV	AX,WORD PTR [CALLSSEC]	    ;AN000;;LB. current sector
 24268                                  ;	MOV	[CURSC_SECTOR],AX	    ;AN000;;LB. set current sector
 24269                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB.
 24270                                  ;	MOV	[CURSC_SECTOR+2],AX	    ;AN000;;LB.
 24271                                  ;saveseq2:				    ;AN000;
 24272                                  ;	CLC				    ;AN000;LB. clear carry
 24273                                  ;saveseq:				    ;AN000;	
 24274                                  ;	MOV	AX,[HIGH_SECTOR]	    ;AN000;LB. save current sector #
 24275                                  ;	MOV	WORD PTR [SEQ_SECTOR+2],AX  ;AN000;LB. for access mode ref.
 24276                                  ;	MOV	AX,[CALLSSEC]		    ;AN000;LB.	
 24277                                  ;	MOV	WORD PTR [SEQ_SECTOR],AX    ;AN000;LB.	
 24278                                  ;	JMP	short scexit 		    ;AN000;LB.	
 24279                                  ;						
 24280                                  ;scexit2:				    ;AN000;LB.
 24281                                  ;	CLC				    ;AN000;LB.	clear carry
 24282                                  ;scexit: 				    ;AN000;		
 24283                                  ;	POP	DI			    ;AN000;;LB.
 24284                                  ;	POP	ES			    ;AN000;;LB. restore registers
 24285                                  ;	POP	SI			    ;AN000;;LB.
 24286                                  ;	POP	DS			    ;AN000;;LB.
 24287                                  ;	POP	DX			    ;AN000;;LB.
 24288                                  ;	POP	CX			    ;AN000;;LB.
 24289                                  ;	return				    ;AN000;;LB.
 24290                                  ;							
 24291                                  ;EndProc RW_SC				    ;AN000;
 24292                                  
 24293                                  ;Break	<IN_SC -- check if in secondary cache>
 24294                                  ;--------------------------------------------------------------------------
 24295                                  ;
 24296                                  ; Procedure Name : IN_SC
 24297                                  ;
 24298                                  ; Inputs:  [SC_DRIVE]= requesting drive
 24299                                  ;	   [CURSC_DRIVE]= current SC drive
 24300                                  ;	   [CURSC_SECTOR] = starting scetor # of SC
 24301                                  ;	   [SC_CACHE_COUNT] = SC count
 24302                                  ;	   [HIGH_SECTOR]:DX= sector number
 24303                                  ; Function:
 24304                                  ;	Check if the sector is in secondary cache
 24305                                  ; Output:
 24306                                  ;	carry clear, in SC
 24307                                  ;	   CX= the index in the secondary cache
 24308                                  ;	carry set, not in SC
 24309                                  ;
 24310                                  ;---------------------------------------------------------------------------
 24311                                  
 24312                                  ;procedure   IN_SC,NEAR		    ;AN000;
 24313                                  ;
 24314                                  ;	; SS override for all variables used
 24315                                  ;
 24316                                  ;	MOV	AL,[SC_DRIVE]		    ;AN000;;LB. current drive
 24317                                  ;	CMP	AL,[CURSC_DRIVE]	    ;AN000;;LB. same as SC drive
 24318                                  ;	JNZ	outrange2		    ;AN000;;LB. no
 24319                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB. subtract sector num from
 24320                                  ;	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 24321                                  ;	SUB	CX,WORD PTR [CURSC_SECTOR]    ;AN000;;LB. number
 24322                                  ;	SBB	AX,WORD PTR [CURSC_SECTOR+2]  ;AN000;;LB.
 24323                                  ;	CMP	AX,0			    ;AN000;;LB. greater than 64K
 24324                                  ;	JNZ	outrange2		    ;AN000;;LB. yes
 24325                                  ;	CMP	CX,[SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 24326                                  ;	JAE	outrange2		    ;AN000;;LB. yes
 24327                                  ;	CLC				    ;AN000;;LB. clear carry
 24328                                  ;	JMP	short inexit		    ;AN000;;LB. in SC
 24329                                  ;outrange2:				    ;AN000;;LB. set carry
 24330                                  ;	STC				    ;AN000;;LB.
 24331                                  ;inexit: 				    ;AN000;;LB.
 24332                                  ;	return				    ;AN000;;LB.
 24333                                  ;
 24334                                  ;EndProc IN_SC				    ;AN000;
 24335                                  
 24336                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 24337                                  ;---------------------------------------------------------------------------
 24338                                  ;
 24339                                  ; Procedure Name : Invalidate_Sc
 24340                                  ;
 24341                                  ; Inputs:  [SC_DRIVE]= requesting drive
 24342                                  ;	   [CURSC_DRIVE]= current SC drive
 24343                                  ;	   [CURSC_SECTOR] = starting scetor # of SC
 24344                                  ;	   [SC_CACHE_COUNT] = SC count
 24345                                  ;	   [SC_STAUS] = SC status word
 24346                                  ;	   [HIGH_SECTOR]:DX= sector number
 24347                                  ;
 24348                                  ; Function:
 24349                                  ;	invalidate secondary cache if in there
 24350                                  ; Output:
 24351                                  ;	[SC_STATUS] is updated
 24352                                  ;---------------------------------------------------------------------------
 24353                                  
 24354                                  ;procedure   INVALIDATE_SC,NEAR	    ;AN000;
 24355                                  ;
 24356                                  ;	; SS override for all variables used
 24357                                  ;
 24358                                  ;	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 24359                                  ;	JC	outrange		    ;AN000;;LB. no
 24360                                  ;	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 24361                                  ;	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 24362                                  ;	NOT	AX			    ;AN000;;LB.
 24363                                  ;	AND	[SC_STATUS],AX		    ;AN000;;LB. save the status
 24364                                  ;outrange:				    ;AN000;;LB.
 24365                                  ;	return				    ;AN000;;LB.
 24366                                  ;
 24367                                  ;EndProc INVALIDATE_SC			    ;AN000;
 24368                                  
 24369                                  
 24370                                  ;Break	<VIRREAD- virtually read data into buffer>
 24371                                  ;--------------------------------------------------------------------------
 24372                                  ;
 24373                                  ; Procedure Name : SC_FLAG
 24374                                  ;
 24375                                  ; Inputs:  SC_FLAG = 0 , no sectors were read into SC
 24376                                  ;		     1, continous sectors were read into SC
 24377                                  ; Function:
 24378                                  ;	   Move data from SC to buffer
 24379                                  ; Output:
 24380                                  ;	 carry clear, data is moved to buffer
 24381                                  ;	 carry set, bad sector or exceeds maximum sector
 24382                                  ;	   SC_FLAG =0
 24383                                  ;	   CALLSCNT=1
 24384                                  ;	   SC_STATUS= -1 if succeeded
 24385                                  ;     
 24386                                  ;		       0 if failed
 24387                                  ;--------------------------------------------------------------------------
 24388                                  
 24389                                  ;procedure   VIRREAD,NEAR	    ;AN000;
 24390                                  ;
 24391                                  ;	; SS override for all variables used
 24392                                  ;
 24393                                  ;	CMP	[SC_FLAG],0		    ;AN000;;LB.  from SC fill
 24394                                  ;	JZ	sc2end			    ;AN000;;LB.  no
 24395                                  ;	MOV	AX,[TEMP_VAR2]		    ;AN000;;LB. restore buffer addr
 24396                                  ;	MOV	WORD PTR [CALLXAD+2],AX     ;AN000;;LB.
 24397                                  ;	MOV	AX,[TEMP_VAR]		    ;AN000;;LB.
 24398                                  ;	MOV	WORD PTR [CALLXAD],AX	    ;AN000;;LB.
 24399                                  ;	MOV	[SC_FLAG],0		    ;AN000;;LB.  reset sc_flag
 24400                                  ;	MOV	[CALLSCNT],1		    ;AN000;;LB.  one sector transferred
 24401                                  ;
 24402                                  ;	TESTB	[DEVCALL.REQSTAT],STERR     ;AN000;;LB.  error?
 24403                                  ;	JNZ	scerror 		    ;AN000;;LB. yes
 24404                                  ;	PUSH	DS			    ;AN000;;LB.
 24405                                  ;	PUSH	SI			    ;AN000;;LB.
 24406                                  ;	PUSH	ES			    ;AN000;;LB.
 24407                                  ;	PUSH	DI			    ;AN000;;LB.
 24408                                  ;	PUSH	DX			    ;AN000;;LB.
 24409                                  ;	PUSH	CX			    ;AN000;;LB.
 24410                                  ;	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 24411                                  ;	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buffer
 24412                                  ;	POP	CX			    ;AN000;;LB.
 24413                                  ;	POP	DX			    ;AN000;;LB.
 24414                                  ;	POP	DI			    ;AN000;;LB.
 24415                                  ;	POP	ES			    ;AN000;;LB.
 24416                                  ;	POP	SI			    ;AN000;;LB.
 24417                                  ;	POP	DS			    ;AN000;;LB.
 24418                                  ;	JMP	SHORT sc2end		    ;AN000;;LB. return
 24419                                  ;
 24420                                  ;scerror:				    ;AN000;
 24421                                  ;	MOV	[CALLSCNT],1		    ;AN000;;LB. reset sector count to 1
 24422                                  ;	MOV	[SC_STATUS],0		    ;AN000;;LB. invalidate all SC sectors
 24423                                  ;	MOV	[CURSC_DRIVE],-1	    ;AN000;;LB. invalidate drive
 24424                                  ;	STC				    ;AN000;;LB. carry set
 24425                                  ;	return				    ;AN000;;LB.
 24426                                  ;
 24427                                  ;sc2end: 				    ;AN000;
 24428                                  ;	CLC				    ;AN000;;LB. carry clear
 24429                                  ;	return				    ;AN000;;LB.
 24430                                  ;
 24431                                  ;EndProc VIRREAD 			    ;AN000;
 24432                                  
 24433                                  ;Break	<SC2BUF- move data from SC to buffer>
 24434                                  ;----------------------------------------------------------------------------
 24435                                  ;
 24436                                  ; Procedure Name : SC2BUF
 24437                                  ;
 24438                                  ; Inputs:  [SC_STATUS] = SC validity status
 24439                                  ;	   [SC_SECTOR_SIZE] = request sector size
 24440                                  ;	   [SC_CACHE_PTR] = pointer to SC
 24441                                  ; Function:
 24442                                  ;	   Move data from SC to buffer
 24443                                  ; Output:
 24444                                  ;	   carry clear, in SC  and data is moved
 24445                                  ;	   carry set, not in SC and data is not moved
 24446                                  ;---------------------------------------------------------------------------
 24447                                  
 24448                                  ;procedure   SC2BUF,NEAR 	    ;AN000;
 24449                                  ;
 24450                                  ;	; SS override for all variables used
 24451                                  ;
 24452                                  ;	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 24453                                  ;	JC	noSC			    ;AN000;;LB. no
 24454                                  ;	MOV	AX,1			    ;AN000;;LB. check if valid sector
 24455                                  ;	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 24456                                  ;	TEST	[SC_STATUS],AX		    ;AN000;;LB.
 24457                                  ;	JZ	noSC			    ;AN000;;LB. invalid
 24458                                  ;entry SC2BUF2				    ;AN000;
 24459                                  ;	MOV	AX,CX			    ;AN000;;LB. times index with
 24460                                  ;	MUL	[SC_SECTOR_SIZE]	    ;AN000;;LB. sector size
 24461                                  ;	ADD	AX,WORD PTR [SC_CACHE_PTR]  ;AN000;;LB. add SC starting addr
 24462                                  ;	ADC	DX,WORD PTR [SC_CACHE_PTR+2];AN000;;LB.
 24463                                  ;	MOV	DS,DX			    ;AN000;    ;LB. DS:SI-> SC sector addr
 24464                                  ;	MOV	SI,AX			    ;AN000;    ;LB.
 24465                                  ;	MOV	ES,WORD PTR [CALLXAD+2]     ;AN000;    ;LB. ES:DI-> buffer addr
 24466                                  ;	MOV	DI,WORD PTR [CALLXAD]	    ;AN000;    ;LB.
 24467                                  ;	MOV	CX,[SC_SECTOR_SIZE]	    ;AN000;    ;LB. count= sector size
 24468                                  ;	SHR	CX,1			    ;AN000;    ;LB. may use DWORD move for 386
 24469                                  ;entry MOVWORDS				    ;AN000;
 24470                                  ;	CMP	[DDMOVE],0		    ;AN000;    ;LB. 386 ?
 24471                                  ;	JZ	nodd			    ;AN000;    ;LB. no
 24472                                  ;	SHR	CX,1			    ;AN000;    ;LB. words/2
 24473                                  ;	DB	66H			    ;AN000;    ;LB. use double word move
 24474                                  ;nodd:
 24475                                  ;	REP	MOVSW			    ;AN000;    ;LB. move to buffer
 24476                                  ;	CLC				    ;AN000;    ;LB. clear carry
 24477                                  ;	return				    ;AN000;    ;LB. exit
 24478                                  ;noSC:					    ;AN000;
 24479                                  ;	STC				    ;AN000;    ;LB. set carry
 24480                                  ;sexit:					    ;AN000;
 24481                                  ;	return				    ;AN000;    ;LB.
 24482                                  ;
 24483                                  ;EndProc SC2BUF
 24484                                  
 24485                                  
 24486                                  ;============================================================================
 24487                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 24488                                  ;============================================================================
 24489                                  ; 29/07/2018 - Retro DOS v3.0
 24490                                  
 24491                                  ;	TITLE	MKNODE - Node maker
 24492                                  ;	NAME	MKNODE
 24493                                  
 24494                                  ;**	MKNODE.ASM
 24495                                  ;
 24496                                  ;	Low level routines for making a new local file system node
 24497                                  ;	and filling in an SFT from a directory entry
 24498                                  ;
 24499                                  ;	BUILDDIR
 24500                                  ;	SETDOTENT
 24501                                  ;	MakeNode
 24502                                  ;	NEWENTRY
 24503                                  ;	FREEENT
 24504                                  ;	NEWDIR
 24505                                  ;	DOOPEN
 24506                                  ;	RENAME_MAKE
 24507                                  ;	CHECK_VIRT_OPEN
 24508                                  ;
 24509                                  ;	Revision history:
 24510                                  ;
 24511                                  ;	 AN000	version 4.0  Jan. 1988
 24512                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 24513                                  
 24514                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 24515                                  ;----------------------------------------------------------------------------
 24516                                  ;
 24517                                  ; Procedure Name : BUILDDIR,NEWDIR
 24518                                  ;
 24519                                  ; Inputs:
 24520                                  ;       ES:BP Points to DPB
 24521                                  ;       [THISSFT] Set if using NEWDIR entry point
 24522                                  ;               (used by ALLOCATE)
 24523                                  ;       [LASTENT] current last valid entry number in directory if no free
 24524                                  ;               entries
 24525                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 24526                                  ; Function:
 24527                                  ;       Grow directory if no free entries and not root
 24528                                  ; Outputs:
 24529                                  ;       CARRY SET IF FAILURE
 24530                                  ;       ELSE
 24531                                  ;          AX entry number of new entry
 24532                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 24533                                  ;               AX = first entry of new dir
 24534                                  ;       GETENT should be called to set [LASTENT]
 24535                                  ;
 24536                                  ;----------------------------------------------------------------------------
 24537                                  
 24538                                  BUILDDIR:
 24539                                  	; 23/07/2019 - Retro DOS v3.2
 24540                                  	; 29/07/2018 - Retro DOS v3.0
 24541                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 24542                                  
 24543 000051E5 A1[9405]                        MOV     AX,[ENTFREE]
 24544 000051E8 83F8FF                          CMP     AX,-1
 24545 000051EB 7402                            JZ	short CHECK_IF_ROOT
 24546 000051ED F8                              CLC
 24547 000051EE C3                              retn
 24548                                  
 24549                                  CHECK_IF_ROOT:
 24550 000051EF 833E[7E05]00                    CMP     word [DIRSTART],0
 24551 000051F4 7502                            JNZ	short NEWDIR
 24552 000051F6 F9                              STC
 24553                                  builddir_retn:
 24554 000051F7 C3                              retn				; Can't grow root
 24555                                  
 24556                                  	;entry   NEWDIR
 24557                                  NEWDIR:        
 24558 000051F8 8B1E[7E05]              	MOV     BX,[DIRSTART]
 24559 000051FC 09DB                            OR      BX,BX
 24560 000051FE 7405                            JZ	short NULLDIR
 24561 00005200 E8F705                  	call	GETEOF
 24562 00005203 72F2                            jc	short builddir_retn	; Screw up
 24563                                  NULLDIR:
 24564 00005205 B90100                          MOV     CX,1
 24565 00005208 E81705                  	call	ALLOCATE
 24566 0000520B 72EA                            jc	short  builddir_retn
 24567 0000520D 8B16[7E05]                      MOV     DX,[DIRSTART]
 24568 00005211 09D2                            OR      DX,DX
 24569 00005213 750D                            JNZ	short ADDINGDIR
 24570 00005215 E8AEF7                  	call	SETDIRSRCH
 24571 00005218 72DD                            jc	short  builddir_retn
 24572 0000521A C706[1203]FFFF                  MOV     word [LASTENT],-1
 24573 00005220 EB2B                            JMP     SHORT GOTDIRREC
 24574                                  ADDINGDIR:
 24575 00005222 53                              PUSH    BX
 24576 00005223 8B1E[7805]                      MOV     BX,[CLUSNUM]
 24577 00005227 E8F00A                          call	IsEOF
 24578 0000522A 5B                              POP     BX
 24579 0000522B 7219                            JB	short NOTFIRSTGROW
 24580                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 24581 0000522D 891E[7805]                      MOV     [CLUSNUM],BX
 24582 00005231 51                              PUSH    CX
 24583 00005232 50                              PUSH    AX
 24584 00005233 55                              PUSH    BP
 24585 00005234 B401                            MOV     AH,1			; CLUSNUM update
 24586                                  	;mov	dl,[es:bp+0]
 24587 00005236 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 24588                                          ;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 24589 0000523A 8B0E[7E05]                      MOV     CX,[DIRSTART]		; first cluster #
 24590 0000523E 89DD                            MOV     BP,BX 			; CLUSNUM
 24591 00005240 E841E2                  	call	FastOpen_Update
 24592 00005243 5D                              POP     BP
 24593 00005244 58                              POP     AX
 24594 00005245 59                              POP     CX
 24595                                  
 24596                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 24597                                  NOTFIRSTGROW:
 24598 00005246 89DA                            MOV     DX,BX
 24599 00005248 30DB                            XOR     BL,BL
 24600 0000524A E8A904                  	call	FIGREC
 24601                                  GOTDIRREC:
 24602                                  	;mov	cl,[es:bp+4]
 24603 0000524D 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 24604 00005251 FEC1                            INC     CL
 24605 00005253 30ED                            XOR     CH,CH
 24606                                  ZERODIR:
 24607 00005255 51                              PUSH    CX
 24608                                  	;mov	byte [ALLOWED],18h
 24609 00005256 C606[1503]18                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 24610 0000525B B0FF                            MOV     AL,0FFH
 24611 0000525D E8420F                          call	GETBUFFR
 24612 00005260 7302                            JNC	short GET_SSIZE
 24613 00005262 59                              POP     CX
 24614 00005263 C3                              retn
 24615                                  
 24616                                  GET_SSIZE:
 24617                                  	;mov	cx,[es:bp+2]
 24618 00005264 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 24619 00005268 06                              PUSH    ES
 24620 00005269 C43E[9E05]                      LES     DI,[CURBUF]
 24621                                  	;or	byte [es:di+5],4
 24622 0000526D 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 24623 00005272 57                              PUSH    DI
 24624                                  	;;add	di,16	; MSDOS 3.3
 24625                                  	;add	di,20	; MSDOS 6.0
 24626 00005273 83C714                          ADD     DI,BUFINSIZ
 24627 00005276 31C0                            XOR     AX,AX
 24628 00005278 D1E9                            SHR     CX,1
 24629 0000527A F3AB                            REP     STOSW
 24630 0000527C 7301                            JNC	short EVENZ
 24631 0000527E AA                              STOSB
 24632                                  EVENZ:
 24633 0000527F 5F                              POP     DI
 24634                                  
 24635                                  	; MSDOS 6.0
 24636                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 24637                                  	;				;LB. if already dirty		  ;AN000;
 24638                                          ;JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 24639                                          ;call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 24640                                          
 24641                                  	;or	byte [es:di+5],40h
 24642 00005280 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 24643                                  ;yesdirty7:
 24644 00005285 07                              POP	ES
 24645 00005286 59                              POP	CX
 24646                                  
 24647                                  	; 19/05/2019 - Retro DOS v4.0
 24648                                  	; 23/07/2019 - Retro DOS v3.2
 24649                                  
 24650                                  	; MSDOS 3.3
 24651                                  	;INC	DX
 24652                                  
 24653                                  	; MSDOS 6.0
 24654 00005287 83C201                  	add	dx,1
 24655 0000528A 8316[B005]00            	adc	word [HIGH_SECTOR],0
 24656                                  
 24657 0000528F E2C4                    	LOOP    ZERODIR
 24658                                  
 24659 00005291 A1[1203]                        MOV     AX,[LASTENT]
 24660 00005294 40                              INC     AX
 24661 00005295 F8                              CLC
 24662 00005296 C3                              retn
 24663                                  
 24664                                  ;--------------------------------------------------------------------------
 24665                                  ;
 24666                                  ; Procedure Name : SETDOTENT
 24667                                  ;
 24668                                  ; set up a . or .. directory entry for a directory.
 24669                                  ;
 24670                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 24671                                  ;               AX contains ". " or ".."
 24672                                  ;               DX contains first cluster of entry
 24673                                  ;
 24674                                  ;----------------------------------------------------------------------------
 24675                                  
 24676                                  SETDOTENT:
 24677                                  ;	Fill in name field
 24678 00005297 AB                              STOSW
 24679 00005298 B90400                          MOV     CX,4
 24680 0000529B B82020                          MOV     AX,"  " ; 2020h
 24681 0000529E F3AB                            REP     STOSW
 24682 000052A0 AA                              STOSB
 24683                                  
 24684                                  ;	Set up attribute
 24685                                  	;mov	al, 10h
 24686 000052A1 B010                            MOV     AL,attr_directory
 24687 000052A3 AA                              STOSB
 24688                                  
 24689                                  ;	Initialize time and date of creation
 24690 000052A4 83C70A                          ADD     DI,10
 24691 000052A7 8B36[5A05]                      MOV     SI,[THISSFT]
 24692                                  	;mov	ax,[si+0Dh]
 24693 000052AB 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 24694 000052AE AB                              STOSW
 24695                                  	;mov	ax,[si+0Fh]
 24696 000052AF 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 24697 000052B2 AB                      	STOSW
 24698                                  
 24699                                  ;	Set up first cluster field
 24700 000052B3 89D0                            MOV     AX,DX
 24701 000052B5 AB                              STOSW
 24702                                  
 24703                                  ;	0 file size
 24704 000052B6 31C0                            XOR     AX,AX
 24705 000052B8 AB                              STOSW
 24706 000052B9 AB                              STOSW
 24707 000052BA C3                              retn
 24708                                  
 24709                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 24710                                  ;---------------------------------------------------------------------------
 24711                                  ;
 24712                                  ; Procedure Name : MakeNode
 24713                                  ;
 24714                                  ; Inputs:
 24715                                  ;       AL - attribute to create
 24716                                  ;       AH = 0 if it is ok to truncate a file already by this name
 24717                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 24718                                  ;               (AH ignored on dirs and devices)
 24719                                  ;
 24720                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 24721                                  ;               a name already existant is ALWAYS an error in these cases.
 24722                                  ;
 24723                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 24724                                  ;               terminated)
 24725                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 24726                                  ;               ( = -1 if current dir not involved, else
 24727                                  ;                Points to first char after last "/" of current dir part)
 24728                                  ;       [THISCDS] Points to CDS being used
 24729                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 24730                                  ; Function:
 24731                                  ;       Make a new node
 24732                                  ; Outputs:
 24733                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 24734                                  ;       CARRY SET IF ERROR
 24735                                  ;          AX = 1 A node by this name exists and is a directory
 24736                                  ;          AX = 2 A new node could not be created
 24737                                  ;          AX = 3 A node by this name exists and is a disk file
 24738                                  ;               (AH was NZ on input)
 24739                                  ;          AX = 4 Bad Path
 24740                                  ;               SI return from GetPath maintained
 24741                                  ;          AX = 5 Attribute mismatch
 24742                                  ;          AX = 6 Sharing Violation
 24743                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 24744                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 24745                                  ;       ELSE
 24746                                  ;          AX = 0       Disk Node
 24747                                  ;          AX = 3       Device Node (error in some cases)
 24748                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 24749                                  ;               containing new node.
 24750                                  ;          [CURBUF+2]:BX Points to entry
 24751                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 24752                                  ;          [THISSFT] is filled in
 24753                                  ;               sf_mode = unchanged.
 24754                                  ;          Attribute byte in entry is input AL
 24755                                  ; DS preserved, others destroyed
 24756                                  ;
 24757                                  ;-------------------------------------------------------------------------
 24758                                  
 24759                                  MakeNode:
 24760                                  	;mov	word [CREATING],0E5FFh
 24761 000052BB C706[3A05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 24762 000052C1 50                              PUSH    AX              ; Save AH value
 24763 000052C2 C606[1603]00            	MOV	byte [NoSetDir],0
 24764 000052C7 A2[2A05]                	MOV	[SATTRIB],AL
 24765 000052CA E860F7                  	call	GetPathNoSet
 24766 000052CD 88CA                            MOV     DL,CL           ; Save CL info
 24767 000052CF 89C1                            MOV     CX,AX           ; Device ID to CH
 24768 000052D1 58                              POP     AX              ; Get back AH
 24769 000052D2 7316                            JNC	short make_exists ; File existed
 24770 000052D4 7505                            JNZ	short make_err_4 ; Path bad
 24771 000052D6 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 24772 000052D9 7406                            JZ	short make_type	; Name simply not found, and no metas
 24773                                  make_err_4:
 24774 000052DB B004                            MOV     AL,4            ; case 1 bad path
 24775                                  make_err_ret:
 24776 000052DD 30E4                            XOR     AH,AH
 24777 000052DF F9                              STC
 24778                                  make_retn:
 24779 000052E0 C3                              retn
 24780                                  
 24781                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 24782                                  RENAME_MAKE:
 24783                                  make_type:
 24784                                  ;Extended Open hooks
 24785                                  	; MSDOS 6.0
 24786                                  	;TESTB	EXTOPEN_ON,ext_open_on	;FT. from extended open		;AN000;
 24787                                  	;JZ	make_type2		;FT. no				;AN000;
 24788                                  	;OR	EXTOPEN_ON,ext_file_not_exists ;FT. set for extended open ;AN000;
 24789                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 24790                                  	;JNZ    make_type2		;FT. no				;AN000;
 24791                                  	;STC				;FT. set carry			;AN000;
 24792                                  	;MOV    AX,7			;FT. file not found		;AN000;
 24793                                  	;return				;FT.				;AN000;
 24794                                  ;	Extended Open hooks
 24795                                  
 24796                                  make_type2:
 24797 000052E1 C43E[5A05]                      LES     DI,[THISSFT]
 24798 000052E5 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 24799 000052E7 F9                              STC                     ; Not found
 24800 000052E8 EB5A                            JMP     short make_new
 24801                                  
 24802                                  ; The node exists. It may be either a device, directory or file:
 24803                                  ;   Zero set => directory
 24804                                  ;   High bit of CH on => device
 24805                                  ;   else => file
 24806                                  
 24807                                  make_exists:
 24808 000052EA 7448                            JZ	short make_exists_dir
 24809 000052EC B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 24810                                  	;test	byte [ATTRIB],18h
 24811 000052EE F606[2805]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 24812 000052F3 753B                            JNZ	short make_err_ret_5
 24813                                  				; Cannot already exist as Disk or Device Node
 24814                                                                  ;       if making DIR or Volume ID
 24815 000052F5 08ED                            OR      CH,CH
 24816 000052F7 781A                            JS	short make_share ; No further checks on attributes if device
 24817 000052F9 08E4                            OR      AH,AH
 24818 000052FB 75E0                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 24819 000052FD 51                              PUSH    CX              ; Save device ID
 24820 000052FE 8E06[A005]                      MOV     ES,[CURBUF+2]
 24821                                  	;mov	ch,[es:bx+0Bh]
 24822 00005302 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 24823                                  	;test	ch,1
 24824 00005306 F6C501                  	test	CH,attr_read_only
 24825 00005309 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 24826 0000530B E8BEF9                  	call	MatchAttributes
 24827 0000530E 59                              POP     CX              ; Devid back in CH
 24828 0000530F 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 24829 00005311 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 24830                                  make_share:
 24831 00005313 30E4                            XOR     AH,AH
 24832 00005315 50                              PUSH    AX              ; Save Disk or Device node
 24833 00005316 51                              PUSH    CX              ; Save Device ID
 24834 00005317 88EC                            MOV     AH,CH           ; Device ID to AH
 24835 00005319 E83301                          CALL    DOOPEN          ; Fill in SFT for share check
 24836 0000531C C43E[5A05]                      LES     DI,[THISSFT]
 24837 00005320 56                      	push	si
 24838 00005321 53                      	push	bx		; Save CURBUF pointers
 24839 00005322 E87A23                  	call	ShareEnter
 24840 00005325 7350                            jnc	short MakeEndShare
 24841                                  
 24842                                  ; User failed request.
 24843 00005327 5B                      	pop	bx
 24844 00005328 5E                      	pop	si
 24845 00005329 59                      	pop	cx
 24846 0000532A 58                      	pop	ax
 24847                                  
 24848                                  Make_Share_ret:
 24849 0000532B B006                            MOV     AL,6
 24850 0000532D EBAE                            JMP	short make_err_ret
 24851                                  
 24852                                  make_err_ret_5P:
 24853 0000532F 59                              POP     CX              ; Get back device ID
 24854                                  make_err_ret_5:
 24855 00005330 B005                            MOV     AL,5            ; Attribute mismatch
 24856 00005332 EBA9                            JMP     make_err_ret
 24857                                  
 24858                                  make_exists_dir:
 24859 00005334 B001                            MOV     AL,1            ; exists as directory, always an error
 24860 00005336 EBA5                            JMP     make_err_ret
 24861                                  
 24862                                  make_save:
 24863 00005338 50                              PUSH    AX              ; Save whether Disk or File
 24864 00005339 89C8                            MOV     AX,CX           ; Device ID to AH
 24865 0000533B E86A00                          CALL    NEWENTRY
 24866 0000533E 58                              POP     AX              ; 0 if Disk, 3 if File
 24867 0000533F 739F                            jnc	short make_retn
 24868 00005341 B002                            MOV     AL,2            ; create failed case 2
 24869                                  make_save_retn:
 24870 00005343 C3                              retn
 24871                                  
 24872                                  make_new:
 24873 00005344 E8F1FF                          call    make_save
 24874 00005347 72FA                            jc	short make_save_retn	; case 2 fail
 24875 00005349 F606[2805]10            	test	BYTE [ATTRIB],attr_directory
 24876 0000534E 75F3                            jnz	short make_save_retn	; Don't "open" directories, so don't
 24877                                                                  ;   tell the sharer about them
 24878 00005350 50                      	push	ax
 24879 00005351 53                      	push	bx
 24880 00005352 56                      	push	si		
 24881 00005353 E84923                          call	ShareEnter
 24882 00005356 5E                      	pop	si
 24883 00005357 5B                      	pop	bx
 24884 00005358 58                      	pop	ax
 24885 00005359 73E8                    	jnc	short make_save_retn
 24886                                  ;
 24887                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 24888                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 24889                                  ; possible: delete the newly created directory entry and return share_error.
 24890                                  ;
 24891 0000535B 50                              PUSH    AX
 24892 0000535C C43E[9E05]                      LES     DI,[CURBUF]
 24893                                  	;mov	byte [es:bx],0E5h
 24894 00005360 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 24895                                  	
 24896                                  	; MSDOS 6.0
 24897                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 24898                                  	;				;LB. if already dirty		  ;AN000;
 24899                                          ;JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 24900                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 24901                                  	;or	byte [es:di+5],40h
 24902 00005364 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 24903                                  ;yesdirty3:
 24904 00005369 C42E[4605]                      LES     BP,[THISDPB]
 24905 0000536D 268A4600                        mov	al,[ES:BP]
 24906                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 24907 00005371 E8FC0E                          call	FLUSHBUF		; write out buffer.
 24908 00005374 58                              POP     AX
 24909 00005375 EBB4                            jmp	short Make_Share_ret
 24910                                  ;
 24911                                  ; We have found an existing file. We have also entered it into the share set.
 24912                                  ; At this point we need to call newentry to correctly address the problem of
 24913                                  ; getting rid of old data (create an existing file) or creating a new
 24914                                  ; directory entry (create a new file). Unfortunately, this operation may
 24915                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 24916                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 24917                                  ; the share set now, do the operation and then reassert the share access.
 24918                                  ;
 24919                                  ; We are allowed to do this! There is no window! After all, we are in
 24920                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 24921                                  ;
 24922                                  MakeEndShare:
 24923 00005377 C43E[5A05]                      LES     DI,[THISSFT]		; grab SFT
 24924 0000537B 31C0                            XOR     AX,AX
 24925 0000537D E88FCD                  	call	EcritSFT
 24926 00005380 268705                  	xchg	AX,[ES:DI]
 24927                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 24928 00005383 50                      	push	ax
 24929 00005384 57                      	push	di
 24930 00005385 06                      	push	es
 24931 00005386 9C                              PUSHF
 24932 00005387 E81023                          call	ShareEnd                ; remove sharing
 24933 0000538A 9D                              POPF
 24934 0000538B 07                      	pop	es
 24935 0000538C 5F                      	pop	di
 24936 0000538D 268F05                          pop	word [ES:DI]	
 24937                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 24938 00005390 E884CD                  	call	LcritSFT
 24939 00005393 5B                      	pop	bx
 24940 00005394 5E                      	pop	si
 24941 00005395 59                      	pop	cx
 24942 00005396 58                      	pop	ax
 24943 00005397 E89EFF                          CALL    make_save
 24944                                  
 24945                                  ; If the user failed, we do not reenter into the sharing set.
 24946                                  
 24947 0000539A 72A7                            jc	short make_save_retn	; bye if error
 24948 0000539C 50                      	push	ax
 24949 0000539D 53                      	push	bx
 24950 0000539E 56                      	push	si
 24951 0000539F 9C                              PUSHF
 24952 000053A0 E8FC22                          call	ShareEnter
 24953 000053A3 9D                              POPF
 24954 000053A4 5E                      	pop	si
 24955 000053A5 5B                      	pop	bx
 24956 000053A6 58                      	pop	ax
 24957                                  
 24958                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 24959                                  
 24960                                  makeendshare_retn:
 24961 000053A7 C3                              retn
 24962                                  
 24963                                  ;---------------------------------------------------------------------------
 24964                                  ;
 24965                                  ; Procedure Name : NEWENTRY
 24966                                  ;
 24967                                  ; Inputs:
 24968                                  ;       [THISSFT] set
 24969                                  ;       [THISDPB] set
 24970                                  ;       [LASTENT] current last valid entry number in directory if no free
 24971                                  ;               entries
 24972                                  ;       [VOLID] set if a volume ID was found during search
 24973                                  ;	Attrib Contains attributes for new file
 24974                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 24975                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 24976                                  ;               NC means file existed (device)
 24977                                  ;               C  means file did not exist
 24978                                  ;       AH = Device ID byte
 24979                                  ;       If FILE
 24980                                  ;           [CURBUF+2]:BX points to start of directory entry
 24981                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 24982                                  ;       If device
 24983                                  ;           DS:BX points to start of "fake" directory entry
 24984                                  ;           DS:SI points to dir_first of "fake" directory entry
 24985                                  ;               (has DWORD pointer to device header)
 24986                                  ; Function:
 24987                                  ;       Make a new directory entry
 24988                                  ;       If an old one existed it is truncated first
 24989                                  ; Outputs:
 24990                                  ;       Carry set if error
 24991                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 24992                                  ;               vol ID, user FAILed to I 24
 24993                                  ;       else
 24994                                  ;               outputs of DOOPEN
 24995                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 24996                                  ;
 24997                                  ;----------------------------------------------------------------------------
 24998                                  
 24999                                  NEWENTRY:
 25000 000053A8 C42E[4605]                      LES     BP,[THISDPB]
 25001 000053AC 7316                            JNC	short EXISTENT	
 25002 000053AE 803E[1403]00                    CMP     byte [FAILERR],0
 25003 000053B3 F9                              STC
 25004 000053B4 75F1                            jnz	short makeendshare_retn	; User FAILed, node might exist
 25005 000053B6 E82CFE                          CALL    BUILDDIR        ; Try to build dir
 25006 000053B9 72EC                            jc	short makeendshare_retn	; Failed
 25007 000053BB E8DAF5                          call	GETENT          ; Point at that free entry
 25008 000053BE 72E7                            jc	short makeendshare_retn	; Failed
 25009 000053C0 EB0E                            JMP     SHORT FREESPOT
 25010                                  
 25011                                  ERRRET3:
 25012 000053C2 F9                              STC
 25013                                  newentry_retn:
 25014 000053C3 C3                              retn
 25015                                  
 25016                                  EXISTENT:
 25017 000053C4 08E4                            OR      AH,AH           ; Check if file is I/O device
 25018 000053C6 7903                            JNS	short NOT_DEV1
 25019 000053C8 E98400                          JMP     DOOPEN          ; If so, proceed with open
 25020                                  
 25021                                  NOT_DEV1:
 25022 000053CB E82301                          call	FREEENT		; Free cluster chain
 25023 000053CE 72F3                            jc	short newentry_retn ; Failed
 25024                                  FREESPOT:
 25025                                  	;test	byte [ATTRIB],8
 25026 000053D0 F606[2805]08            	test	BYTE [ATTRIB],attr_volume_id
 25027 000053D5 7407                            JZ	short NOTVOLID
 25028 000053D7 803E[3805]00                    CMP     BYTE [VOLID],0
 25029 000053DC 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 25030                                  NOTVOLID:
 25031 000053DE 8E06[A005]                      MOV     ES,[CURBUF+2]
 25032 000053E2 89DF                            MOV     DI,BX
 25033                                  
 25034 000053E4 BE[0805]                        MOV     SI,NAME1
 25035                                  
 25036 000053E7 B90500                          MOV     CX,5
 25037 000053EA F3A5                            REP     MOVSW
 25038 000053EC A4                              MOVSB                   ; Move name into dir entry
 25039 000053ED A0[2805]                	MOV	AL,[ATTRIB]
 25040 000053F0 AA                      	STOSB                   ; Attributes
 25041                                  
 25042                                  ;; File Tagging for Create DOS 4.00
 25043 000053F1 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 25044                                  ;; File Tagging for Create DOS 4.00
 25045                                  
 25046 000053F3 31C0                            XOR     AX,AX
 25047 000053F5 F3AB                            REP     STOSW           ; Zero pad
 25048 000053F7 E85AC5                          call	DATE16
 25049 000053FA 92                              XCHG    AX,DX
 25050 000053FB AB                              STOSW                   ; dir_time
 25051 000053FC 92                              XCHG    AX,DX
 25052 000053FD AB                              STOSW                   ; dir_date
 25053 000053FE 31C0                            XOR     AX,AX
 25054 00005400 57                              PUSH    DI              ; Correct SI input value
 25055                                  				; 	(recomputed for new buffer)
 25056 00005401 AB                              STOSW                   ; Zero dir_first and size
 25057 00005402 AB                              STOSW
 25058 00005403 AB                              STOSW
 25059                                  updnxt:
 25060 00005404 8B36[9E05]              	MOV	SI,[CURBUF]
 25061                                  
 25062                                  	; MSDOS 6.0
 25063                                  	;TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 25064                                  	;			;LB. if already dirty		  ;AN000;
 25065                                          ;JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 25066                                          ;call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 25067                                          
 25068                                  	;or	byte [es:si+5],40h
 25069 00005408 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 25070                                  ;yesdirty9:
 25071 0000540D C42E[4605]                      LES     BP,[THISDPB]
 25072 00005411 268A4600                	MOV	AL,[ES:BP]	; mov al,[es:bp+0] 
 25073                                          ;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 25074 00005415 50                              PUSH    AX
 25075 00005416 53                              PUSH    BX
 25076                                  
 25077                                  ; If we have a file, we need to increment the open ref. count so that
 25078                                  ; we have some protection against invalid media changes if an Int 24
 25079                                  ; error occurs.
 25080                                  ; Do nothing for a device.
 25081                                  
 25082 00005417 06                      	push	es
 25083 00005418 57                      	push	di
 25084 00005419 C43E[5A05]                      LES     DI,[THISSFT]
 25085                                  	;test	word [es:di+5],80h
 25086 0000541D 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 25087 00005423 751A                            jnz	short GotADevice
 25088 00005425 1E                      	push	ds
 25089 00005426 53                      	push	bx
 25090 00005427 C51E[4605]                      LDS     BX,[THISDPB]
 25091                                  	;mov	[es:di+7],bx
 25092 0000542B 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 25093 0000542F 8CDB                            MOV     BX,DS
 25094                                  	;mov	[es:di+9],bx
 25095 00005431 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 25096 00005435 5B                      	pop	bx
 25097 00005436 1F                      	pop	ds ; need to use DS for segment later on
 25098 00005437 E875FC                  	call	DEV_OPEN_SFT    ; increment ref. count
 25099 0000543A C606[380A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 25100                                  GotADevice:
 25101 0000543F 5F                      	pop	di
 25102 00005440 07                      	pop	es
 25103                                  
 25104 00005441 E82C0E                          call	FLUSHBUF
 25105 00005444 E8F900                          Call    CHECK_VIRT_OPEN ; decrement ref. count                          ;AN000;
 25106 00005447 5B                              POP     BX
 25107 00005448 58                              POP     AX
 25108 00005449 5E                              POP     SI              ; Get SI input back
 25109 0000544A 88C4                            MOV     AH,AL           ; Get I/O driver number back
 25110 0000544C 7301                            jnc	short DOOPEN    ; Failed
 25111 0000544E C3                      	retn
 25112                                  
 25113                                  ;NOTE FALL THROUGH
 25114                                  
 25115                                  	; 24/07/2019 - Retro DOS v3.2
 25116                                  ; DOOPEN
 25117                                  ;----------------------------------------------------------------------------
 25118                                  ;
 25119                                  ; Inputs:
 25120                                  ;       [THISDPB] points to DPB if file
 25121                                  ;       [THISSFT] points to SFT being used
 25122                                  ;       AH = Device ID byte
 25123                                  ;       If FILE
 25124                                  ;           [CURBUF+2]:BX points to start of directory entry
 25125                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 25126                                  ;       If device
 25127                                  ;           DS:BX points to start of "fake" directory entry
 25128                                  ;           DS:SI points to dir_first of "fake" directory entry
 25129                                  ;               (has DWORD pointer to device header)
 25130                                  ; Function:
 25131                                  ;       Fill in SFT from dir entry
 25132                                  ; Outputs:
 25133                                  ;       CARRY CLEAR
 25134                                  ;       sf_ref_count and sf_mode fields not altered
 25135                                  ;       sf_flags high byte = 0
 25136                                  ;       sf_flags low byte = AH except
 25137                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 25138                                  ;       sf_attr sf_date sf_time sf_name set from entry
 25139                                  ;       sf_position = 0
 25140                                  ;       If device
 25141                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 25142                                  ;           sf_size = 0
 25143                                  ;       If file
 25144                                  ;           sf_firclus sf_size set from entry
 25145                                  ;           sf_devptr = [THISDPB]
 25146                                  ;           sf_cluspos = 0
 25147                                  ;           sf_lstclus = sf_firclus
 25148                                  ;           sf_dirsec sf_dirpos set
 25149                                  ; DS,SI,BX preserved, others destroyed
 25150                                  ;
 25151                                  ;----------------------------------------------------------------------------
 25152                                  
 25153                                  	;entry	DOOPEN
 25154                                  DOOPEN:
 25155                                  ;	Generate and store attribute
 25156                                  
 25157 0000544F 88E6                            MOV     DH,AH           ; AH to different place
 25158 00005451 C43E[5A05]                      LES     DI,[THISSFT]
 25159                                  	;add	di,4
 25160 00005455 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 25161 00005458 30C0                            XOR     AL,AL           ; Assume it's a device, devices have an
 25162                                                                  ;   attribute of 0 (for R/O testing etc).
 25163 0000545A 08F6                            OR      DH,DH           ; See if our assumption good.
 25164 0000545C 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 25165 0000545E 8E1E[A005]                      MOV     DS,[CURBUF+2]
 25166                                  	;mov	al,[BX+0Bh]
 25167 00005462 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 25168                                  				; If file, get attrib from dir entry
 25169                                  DEV_SFT1:
 25170 00005465 AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 25171                                  
 25172                                  ;	Generate and store flags word
 25173                                  
 25174 00005466 31C0                            XOR     AX,AX
 25175 00005468 88F0                            MOV     AL,DH
 25176                                  	;or	al,40h
 25177 0000546A 0C40                            OR      AL,devid_file_clean
 25178 0000546C AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 25179                                  
 25180                                  ;	Generate and store device pointer
 25181                                  
 25182 0000546D 1E                              PUSH    DS
 25183                                  	;lds	ax,[bx+1Ah]
 25184 0000546E C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 25185 00005471 08F6                            OR      DH,DH
 25186 00005473 7805                            JS	short DEV_SFT2
 25187                                  
 25188                                  ;hkn; SS override
 25189 00005475 36C506[4605]                    LDS     AX,[SS:THISDPB]	; Was file
 25190                                  DEV_SFT2:
 25191 0000547A AB                              STOSW 			; store offset
 25192 0000547B 8CD8                            MOV     AX,DS
 25193 0000547D 1F                              POP     DS
 25194 0000547E AB                      	STOSW			; store segment
 25195                                  				; ES:DI -> sf_firclus
 25196                                  
 25197                                  ;	Generate pointer to, generate and store first cluster 
 25198                                  ;	(irrelevant for devices)
 25199                                  
 25200 0000547F 56                              PUSH    SI              ; Save pointer to dir_first
 25201                                  
 25202 00005480 A5                              MOVSW                   ; dir_first -> sf_firclus
 25203                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 25204                                  
 25205                                  ;	Copy time/date of last modification
 25206                                  
 25207                                  	;sub	si,6
 25208 00005481 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 25209                                  				; DS:SI->dir_time
 25210 00005484 A5                              MOVSW                   ; dir_time -> sf_time
 25211                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 25212 00005485 A5                              MOVSW                   ; dir_date -> sf_date
 25213                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 25214                                  
 25215                                  ;	Generate and store file size (0 for devices)
 25216                                  
 25217 00005486 AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 25218 00005487 AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 25219 00005488 89C1                            MOV     CX,AX           ; dir_size_l in CX
 25220 0000548A AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 25221 0000548B 08F6                            OR      DH,DH
 25222 0000548D 7904                            JNS	short FILE_SFT1
 25223 0000548F 31C0                            XOR     AX,AX
 25224 00005491 89C1                            MOV     CX,AX           ; Devices are open ended
 25225                                  FILE_SFT1:
 25226 00005493 91                              XCHG    AX,CX
 25227 00005494 AB                              STOSW                   ; Low word of sf_size
 25228 00005495 91                              XCHG    AX,CX
 25229 00005496 AB                              STOSW                   ; High word of sf_size
 25230                                                                  ; ES:DI -> sf_position
 25231                                  ; Initialize position to 0
 25232                                  
 25233 00005497 31C0                            XOR     AX,AX
 25234 00005499 AB                              STOSW
 25235 0000549A AB                              STOSW                   ; sf_position
 25236                                                                  ; ES:DI -> sf_cluspos
 25237                                  
 25238                                  ; Generate cluster optimizations for files
 25239                                  
 25240 0000549B 08F6                            OR      DH,DH
 25241 0000549D 7843                            JS	short DEV_SFT3
 25242 0000549F AB                              STOSW                   ; sf_cluspos ; 1Ah
 25243                                  	;mov	ax,[bx+1Ah]
 25244 000054A0 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 25245                                  
 25246                                  	; 24/07/2019 - Retro DOS v3.2
 25247                                  
 25248                                  	; 19/05/2019
 25249                                  	; MSDOS 3.3
 25250                                  	;STOSW 			; sf_lstclus ; 1Bh
 25251                                  	; MSDOS 6.0
 25252 000054A3 57                              PUSH	DI              ;AN004; save dirsec offset
 25253                                  	;sub	di,1Bh
 25254 000054A4 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 25255                                  	;mov	[es:di+35h],ax
 25256 000054A7 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 25257 000054AB 5F                              POP	DI              ;AN004; restore dirsec offset
 25258                                  
 25259                                  ; DOS 3.3  FastOpen  6/13/86
 25260                                  
 25261 000054AC 1E                      	PUSH	DS
 25262                                  
 25263                                  ;hkn; SS is DOSDATA
 25264 000054AD 16                      	push	ss
 25265 000054AE 1F                      	pop	ds
 25266                                  	;test	byte [FastOpenFlg],4
 25267 000054AF F606[A40F]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 25268 000054B4 7411                    	JZ	short Not_FastOpen
 25269                                  
 25270                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 25271 000054B6 BE[790F]                        MOV     SI,FastOpen_Ext_Info
 25272                                  
 25273                                  	; 24/07/2019 - Retro DOS v3.2
 25274                                  
 25275                                  	;mov	ax,[si+1]
 25276 000054B9 8B4401                          MOV     AX,[SI+FEI.dirsec]
 25277 000054BC AB                              STOSW                   ; sf_dirsec
 25278                                  	; MSDOS 6.0
 25279                                  	;mov	ax,[si+3]
 25280 000054BD 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 25281                                  				;;; changed for >32mb
 25282 000054C0 AB                              STOSW                   ; sf_dirsec
 25283                                  	; 19/08//2018
 25284 000054C1 8A04                    	mov	al,[SI]
 25285                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 25286 000054C3 AA                              STOSB                   ; sf_dirpos
 25287 000054C4 1F                              POP	DS
 25288 000054C5 EB19                            JMP     short Next_Name
 25289                                  
 25290                                  ; DOS 3.3  FastOpen  6/13/86
 25291                                  
 25292                                  Not_FastOpen:
 25293                                          ;POP     DS		; normal path
 25294                                  
 25295                                  ;hkn; SS override
 25296                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 25297                                  	; 28/07/2019
 25298 000054C7 8B36[9E05]              	mov	si,[CURBUF]
 25299 000054CB 1F                      	pop	ds
 25300                                  
 25301                                  	;mov	ax,[si+6]
 25302 000054CC 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 25303 000054CF AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 25304                                  	
 25305                                  	; 22/07/2019 - Retro DOS v3.2
 25306                                          ; MSDOS 6.0
 25307                                  	;mov	ax,[si+8]
 25308 000054D0 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 25309 000054D3 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 25310                                          
 25311 000054D4 89D8                    	MOV     AX,BX
 25312                                  	;;add	si,16	; MSDOS 3.3	
 25313                                  	;add	si,20	; MSDOS 6.0
 25314 000054D6 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 25315 000054D9 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 25316                                          ;mov	cl,32
 25317 000054DB B120                    	MOV     CL,dir_entry.size
 25318 000054DD F6F1                            DIV     CL
 25319 000054DF AA                              STOSB                   ; sf_dirpos
 25320                                  
 25321                                  Next_Name:
 25322 000054E0 EB03                            JMP     SHORT FILE_SFT2
 25323                                  
 25324                                  DEV_SFT3:
 25325                                  	;add	di,7
 25326 000054E2 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 25327                                  FILE_SFT2:
 25328                                  ;
 25329                                  ; Copy in the object's name
 25330                                  ;
 25331 000054E5 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 25332 000054E7 B90B00                          MOV     CX,11
 25333 000054EA F3A4                            REP     MOVSB           ; sf_name
 25334 000054EC 5E                              POP     SI              ; recover DS:SI -> dir_first
 25335                                  
 25336                                  ;hkn; SS is DOSDATA
 25337 000054ED 16                              push	ss
 25338 000054EE 1F                      	pop	ds
 25339 000054EF F8                              CLC
 25340 000054F0 C3                              retn
 25341                                  
 25342                                  ;---------------------------------------------------------------------------
 25343                                  ;
 25344                                  ; Procedure Name : FREEENT
 25345                                  ;
 25346                                  ; Inputs:
 25347                                  ;       ES:BP -> DPB
 25348                                  ;       [CURBUF] Set
 25349                                  ;       [CURBUF+2]:BX points to directory entry
 25350                                  ;       [CURBUF+2]:SI points to above dir_first
 25351                                  ; Function:
 25352                                  ;       Free the cluster chain for the entry if present
 25353                                  ; Outputs:
 25354                                  ;       Carry set if error (currently user FAILed to I 24)
 25355                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 25356                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 25357                                  ;---------------------------------------------------------------------------
 25358                                  
 25359                                  FREEENT:
 25360 000054F1 1E                              PUSH    DS
 25361 000054F2 C53E[9E05]                      LDS     DI,[CURBUF]
 25362 000054F6 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 25363                                  	; 22/07/2019 - Retro DOS v3.2
 25364                                  	; MSDOS 6.0
 25365 000054F8 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 25366                                  ;hkn; SS override
 25367 000054FB 368916[B005]            	MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 25368 00005500 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 25369 00005503 1F                              POP     DS
 25370 00005504 83F902                  	CMP	CX,2
 25371 00005507 7235                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 25372                                  	;cmp	cx,[es:bp+0Dh]
 25373 00005509 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 25374 0000550D 772F                            JA	short RET1	; Treat like zero length file (firclus mucked)
 25375 0000550F 29FB                            SUB     BX,DI
 25376 00005511 53                              PUSH    BX              ; Save offset
 25377 00005512 FF36[B005]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 25378 00005516 52                              PUSH    DX              ; Save sector number
 25379 00005517 89CB                            MOV     BX,CX
 25380 00005519 E8B202                          call	RELEASE         ; Free any data allocated
 25381 0000551C 5A                              POP     DX
 25382 0000551D 8F06[B005]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 25383 00005521 7302                            JNC	short GET_BUF_BACK
 25384 00005523 5B                              POP     BX
 25385                                  freeent_retn:
 25386 00005524 C3                              retn			; Screw up
 25387                                  
 25388                                  GET_BUF_BACK:
 25389                                  	;mov	byte [ALLOWED],18h
 25390 00005525 C606[1503]18                    MOV     byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 25391 0000552A 30C0                            XOR     AL,AL
 25392 0000552C E8730C                  	call	GETBUFFR        ; Get sector back
 25393 0000552F 5B                              POP     BX              ; Get offset back
 25394 00005530 72F2                            jc	short freeent_retn
 25395 00005532 E8EEEC                  	call	SET_BUF_AS_DIR
 25396 00005535 031E[9E05]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 25397 00005539 89DE                            MOV     SI,BX
 25398                                  	;add	si,1Ah
 25399 0000553B 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 25400                                  RET1:
 25401 0000553E F8                              CLC
 25402 0000553F C3                              retn
 25403                                  
 25404                                  ;---------------------------------------------------------------------------
 25405                                  ;
 25406                                  ; Procedure Name : CHECK_VIRT_OPEN
 25407                                  ;
 25408                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 25409                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 25410                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 25411                                  ; flag [VIRTUAL_OPEN].
 25412                                  ; No registers affected (including flags).
 25413                                  ; On input, [THISSFT] points to current SFT.
 25414                                  ;
 25415                                  ;---------------------------------------------------------------------------
 25416                                  
 25417                                  CHECK_VIRT_OPEN:
 25418 00005540 50                      	        PUSH    AX
 25419 00005541 9F                              lahf                    ; preserve flags
 25420 00005542 803E[380A]00                    CMP     byte [VIRTUAL_OPEN],0
 25421 00005547 7410                            JZ	short ALL_CLOSED
 25422 00005549 C606[380A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 25423 0000554E 06                      	push	es
 25424 0000554F 57                      	push	di
 25425 00005550 C43E[5A05]                      LES     DI,[THISSFT]
 25426 00005554 E85FFB                          call	DEV_CLOSE_SFT
 25427 00005557 5F                      	pop	di
 25428 00005558 07                      	pop	es
 25429                                  
 25430                                  ALL_CLOSED:
 25431 00005559 9E                              sahf                    ; restore flags
 25432 0000555A 58                              POP     AX
 25433 0000555B C3                              retn
 25434                                  
 25435                                  ;============================================================================
 25436                                  ; ROM.ASM, MSDOS 6.0, 1991
 25437                                  ;============================================================================
 25438                                  ; 29/07/2018 - Retro DOS v3.0
 25439                                  
 25440                                  ;	TITLE	ROM - Miscellaneous routines
 25441                                  ;	NAME	ROM
 25442                                  
 25443                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 25444                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 25445                                  ;
 25446                                  ;	SKPCLP
 25447                                  ;	FNDCLUS
 25448                                  ;	BUFSEC
 25449                                  ;	BUFRD
 25450                                  ;	BUFWRT
 25451                                  ;	NEXTSEC
 25452                                  ;	OPTIMIZE
 25453                                  ;	FIGREC
 25454                                  ;	ALLOCATE
 25455                                  ;	RESTFATBYT
 25456                                  ;	RELEASE
 25457                                  ;	RELBLKS
 25458                                  ;	GETEOF
 25459                                  ;
 25460                                  ;	Modification history:
 25461                                  ;
 25462                                  ;		Created: ARR 30 March 1983
 25463                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 25464                                  
 25465                                  ;Break   <FNDCLUS -- Skip over allocation units>
 25466                                  ;--------------------------------------------------------------------------
 25467                                  ;
 25468                                  ; Procedure Name : FNDCLUS
 25469                                  ;
 25470                                  ; Inputs:
 25471                                  ;       CX = No. of clusters to skip
 25472                                  ;       ES:BP = Base of drive parameters
 25473                                  ;       [THISSFT] point to SFT
 25474                                  ; Outputs:
 25475                                  ;       BX = Last cluster skipped to
 25476                                  ;       CX = No. of clusters remaining (0 unless EOF)
 25477                                  ;       DX = Position of last cluster
 25478                                  ;       Carry set if error (currently user FAILed to I 24)
 25479                                  ; DI destroyed. No other registers affected.
 25480                                  ;--------------------------------------------------------------------------
 25481                                  
 25482                                  	; 26/07/2019 - Retro DOS v3.2
 25483                                  	; 20/05/2019 - Retro DOS v4.0
 25484                                  FNDCLUS:
 25485 0000555C 06                      	PUSH	ES
 25486 0000555D C43E[5A05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 25487                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 25488                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 25489 00005561 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 25490                                  	;mov	dx,[es:di+19h]
 25491 00005565 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 25492 00005569 09DB                    	OR	BX,BX
 25493 0000556B 7424                    	JZ	short NOCLUS
 25494                                  
 25495 0000556D 29D1                            SUB     CX,DX
 25496 0000556F 7308                            JNB	short FINDIT
 25497                                  
 25498 00005571 01D1                            ADD     CX,DX
 25499 00005573 31D2                            XOR     DX,DX
 25500                                  	;mov	bx,[es:di+0Bh]
 25501 00005575 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 25502                                  FINDIT:
 25503 00005579 07                              POP	ES
 25504 0000557A E313                    	JCXZ	RET9
 25505                                  
 25506                                  	;entry	SKPCLP
 25507                                  SKPCLP:
 25508 0000557C E8B207                  	call	UNPACK
 25509 0000557F 7214                            jc	short fndclus_retn	; retc
 25510                                  	
 25511                                  	; 09/09/2018
 25512                                  
 25513                                  	; MSDOS 3.3
 25514                                  	;push	bx
 25515                                  	;mov	bx,di
 25516                                  	;call	IsEOF
 25517                                  	;pop	bx	
 25518                                  	;jae	short RET9
 25519                                  
 25520                                  	; 20/05/2019 - Retro DOS v4.0
 25521                                  
 25522                                  	; MSDOS 6.0
 25523 00005581 87DF                    	xchg	bx,di
 25524 00005583 E89407                  	call	IsEOF
 25525 00005586 87DF                    	xchg	bx,di
 25526 00005588 7305                    	jae	short RET9
 25527                                  
 25528 0000558A 87DF                            XCHG    BX,DI
 25529 0000558C 42                              INC     DX
 25530 0000558D E2ED                    	LOOP	SKPCLP			; RMFS
 25531                                  RET9:	
 25532 0000558F F8                      	CLC
 25533 00005590 C3                              retn
 25534                                  NOCLUS:
 25535 00005591 07                              POP	ES
 25536 00005592 41                              INC	CX
 25537 00005593 4A                              DEC	DX
 25538 00005594 F8                              CLC
 25539                                  
 25540                                  fndclus_retn:
 25541 00005595 C3                              retn
 25542                                  
 25543                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 25544                                  ;--------------------------------------------------------------------------
 25545                                  ;
 25546                                  ; Procedure Name : BUFSEC
 25547                                  ;
 25548                                  ; Inputs:
 25549                                  ;       AH = priority of buffer
 25550                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 25551                                  ;       ES:BP = Base of drive parameters
 25552                                  ;       [CLUSNUM] = Physical cluster number
 25553                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 25554                                  ;       [BYTCNT1] = Size of transfer
 25555                                  ; Function:
 25556                                  ;       Insure specified sector is in buffer, flushing buffer before
 25557                                  ;       read if necessary.
 25558                                  ; Outputs:
 25559                                  ;       ES:DI = Pointer to buffer
 25560                                  ;       SI = Pointer to transfer address
 25561                                  ;       CX = Number of bytes
 25562                                  ;       [NEXTADD] updated
 25563                                  ;       [TRANS] set to indicate a transfer will occur
 25564                                  ;       Carry set if error (user FAILed to I 24)
 25565                                  ;--------------------------------------------------------------------------
 25566                                  
 25567                                  BUFSEC:
 25568 00005596 8B16[7805]                      MOV     DX,[CLUSNUM]
 25569 0000559A 8A1E[3005]                      MOV     BL,[SECCLUSPOS]
 25570                                  	;mov	byte [ALLOWED],38h
 25571 0000559E C606[1503]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 25572 000055A3 E85001                          CALL    FIGREC
 25573 000055A6 E8F90B                  	call	GETBUFFR
 25574 000055A9 72EA                            jc	short fndclus_retn
 25575                                  
 25576 000055AB C606[3105]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 25577 000055B0 8B36[7405]                      MOV     SI,[NEXTADD]
 25578 000055B4 89F7                            MOV     DI,SI
 25579 000055B6 8B0E[8E05]                      MOV     CX,[BYTCNT1]
 25580 000055BA 01CF                            ADD     DI,CX
 25581 000055BC 893E[7405]                      MOV     [NEXTADD],DI
 25582 000055C0 C43E[9E05]                      LES     DI,[CURBUF]
 25583                                  	;or	byte [es:di+5],8
 25584 000055C4 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 25585                                  	;lea	di,[di+16] ; MSDOS 3.3 
 25586                                  	;lea	di,[di+20] ; MSDOS 6.0 ; 26/07/2019
 25587 000055C9 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 25588 000055CC 033E[8805]                      ADD     DI,[BYTSECPOS]
 25589 000055D0 F8                              CLC
 25590 000055D1 C3                              retn
 25591                                  
 25592                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 25593                                  
 25594                                  ;---------------------------------------------------------------------------
 25595                                  ;
 25596                                  ; Procedure Name : BUFRD
 25597                                  ;
 25598                                  ; Do a partial sector read via one of the system buffers
 25599                                  ; ES:BP Points to DPB
 25600                                  ; Carry set if error (currently user FAILed to I 24)
 25601                                  ;
 25602                                  ; DS - set to DOSDATA
 25603                                  ;
 25604                                  ;----------------------------------------------------------------------------
 25605                                  
 25606                                  BUFRD:
 25607 000055D2 06                              PUSH	ES
 25608 000055D3 31C0                            xor	ax,ax			; pre-read sector
 25609 000055D5 E8BEFF                          CALL    BUFSEC
 25610 000055D8 7303                            JNC	short BUF_OK
 25611                                  
 25612                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 25613 000055DA 07                              POP	ES
 25614 000055DB EB29                            JMP     SHORT RBUFPLACED
 25615                                  
 25616                                  BUF_OK:
 25617 000055DD 8CC3                            MOV     BX,ES
 25618 000055DF 8E06[FA02]                      MOV     ES,[DMAADD+2]
 25619 000055E3 8EDB                            MOV     DS,BX
 25620 000055E5 87FE                    	XCHG    DI,SI
 25621 000055E7 D1E9                            SHR     CX,1
 25622                                  ;M039
 25623                                  	; MSDOS 3.3
 25624 000055E9 7301                    	JNC	short EVENRD
 25625 000055EB A4                      	MOVSB
 25626                                  EVENRD:
 25627 000055EC F3A5                    	REP     MOVSW
 25628                                  
 25629                                  ;	   CX = # of whole WORDs; CF=1 if odd # of bytes.
 25630                                  ;       DS:SI-> Source within Buffer.
 25631                                  ;       ES:DI-> Destination within Transfer memory block.
 25632                                  
 25633                                  	; MSDOS 6.0
 25634                                  ;	rep	movsw			;Copy Buffer to Transfer memory.
 25635                                  ;	adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 25636                                  ;	rep	movsb                   ;Copy last byte.
 25637                                  ;M039
 25638                                  
 25639 000055EE 07                              POP	ES
 25640                                  ;hkn; SS override
 25641 000055EF 36C53E[9E05]                    LDS     DI,[SS:CURBUF]
 25642                                  	;lea	bx,[di+16]
 25643                                  	;lea	bx,[di+20] ; MSDOS 6.0
 25644 000055F4 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 25645 000055F7 29DE                            SUB     SI,BX                   ; Position in buffer
 25646 000055F9 E8FF0A                          call	PLACEBUF
 25647                                  	;cmp	si,[es:bp+2]
 25648 000055FC 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 25649 00005600 7203                            JB	short RBUFPLACEDC	; No, leave buf where it is
 25650                                  
 25651                                  ;M039
 25652                                  	; MSDOS 3.3
 25653 00005602 E8540B                  	call	PLACEHEAD               ; Make it prime candidate for chucking
 25654                                                                          ;  even though it is MRU.
 25655                                          ; MSDOS 6.0
 25656                                  	;MOV	[BufferQueue],DI	; Make it prime candidate for
 25657                                  ;M039					; chucking even though it is MRU.
 25658                                  
 25659                                  RBUFPLACEDC:
 25660 00005605 F8                              CLC
 25661                                  RBUFPLACED:
 25662 00005606 16                      	push	ss
 25663 00005607 1F                      	pop	ds
 25664 00005608 C3                              retn
 25665                                  
 25666                                  ;----------------------------------------------------------------------------
 25667                                  ;
 25668                                  ; Procedure : BUFWRT
 25669                                  ;
 25670                                  ; Do a partial sector write via one of the system buffers
 25671                                  ; ES:BP Points to DPB
 25672                                  ; Carry set if error (currently user FAILed to I 24)
 25673                                  ;
 25674                                  ; DS - set to DOSDATA
 25675                                  ;
 25676                                  ;----------------------------------------------------------------------------
 25677                                  
 25678                                  	; 24/07/2019 - Retro DOS v3.2
 25679                                  	; 20/05/2019 - Retro DOS v4.0
 25680                                  BUFWRT:
 25681 00005609 A1[8005]                        MOV     AX,[SECPOS]
 25682                                          ; MSDOS 6.0
 25683 0000560C 83C001                  	ADD	AX,1            	; Set for next sector
 25684 0000560F A3[8005]                        MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 25685 00005612 8316[8205]00                    ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 25686 00005617 A1[8205]                        MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 25687 0000561A 3B06[8605]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 25688 0000561E B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 25689 00005620 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 25690 00005622 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 25691 00005624 A1[8005]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 25692                                  
 25693                                  	; MSDOS 3.3
 25694                                  	;INC	AX
 25695                                  	;MOV	[SECPOS],AX ; 09/09/2018
 25696                                  
 25697                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25698 00005627 3B06[8405]                      CMP     AX,[VALSEC]		; Has sector been written before?
 25699 0000562B B001                            MOV     AL,1
 25700 0000562D 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 25701                                  _doread:
 25702 0000562F 30C0                            XOR     AL,AL
 25703                                  NOREAD:
 25704 00005631 06                              PUSH	ES
 25705 00005632 E861FF                          CALL    BUFSEC
 25706 00005635 72A3                    	JC	short BUF_IO_FAIL
 25707 00005637 8E1E[FA02]                      MOV     DS,[DMAADD+2]
 25708 0000563B D1E9                            SHR     CX,1
 25709                                  ;M039
 25710                                  	; MSDOS 3.3
 25711                                  	;JNC	short EVENWRT ; 09/09/2018
 25712                                  	;MOVSB
 25713                                  ;EVENWRT:
 25714                                  	;REP	MOVSW
 25715                                  
 25716                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 25717                                  ;       DS:SI-> Source within Transfer memory block.
 25718                                  ;       ES:DI-> Destination within Buffer.
 25719                                  
 25720                                  	; MSDOS 6.0
 25721 0000563D F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 25722                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 25723                                  	;rep	movsb                   ;Copy last byte.
 25724 0000563F 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 25725 00005641 A4                      	movsb ; ****
 25726                                  ;M039
 25727                                  EVENWRT: ; ****
 25728 00005642 07                              POP	ES
 25729                                  
 25730                                  ;hkn; SS override
 25731 00005643 36C51E[9E05]                    LDS     BX,[SS:CURBUF]
 25732                                  
 25733                                  	; MSDOS 6.0
 25734                                          ;TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 25735                                  	;				;LB. if already dirty		  ;AN000;
 25736                                          ;JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 25737                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 25738                                  	
 25739                                  	;or	byte [bx+5],40h
 25740 00005648 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 25741                                  ;yesdirty10:
 25742                                  	;;lea	si,[bx+16]
 25743                                  	;lea	si,[bx+20] ; MSDOS 6.0
 25744 0000564C 8D7714                          LEA     SI,[BX+BUFINSIZ]
 25745 0000564F 29F7                            SUB     DI,SI                   ; Position in buffer
 25746                                  ;M039
 25747                                  	; 24/07/2019 - Retro DOS v3.2
 25748                                  	; MSDOS 3.3
 25749 00005651 89FE                    	MOV     SI,DI
 25750 00005653 89DF                    	MOV     DI,BX
 25751 00005655 E8A30A                  	call	PLACEBUF
 25752                                  	;cmp	si,[es:bp+2]
 25753 00005658 263B7602                	CMP     SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 25754 0000565C 7203                    	JB	short WBUFPLACED	; No, leave buf where it is
 25755 0000565E E8F80A                  	call	PLACEHEAD               ; Make it prime candidate for chucking
 25756                                                                          ;  even though it is MRU.
 25757                                  	; MSDOS 6.0
 25758                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 25759                                          ;JB	short WBUFPLACED	; No, leave buf where it is
 25760                                          ;MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 25761                                  					; chucking even though it is MRU.
 25762                                  ;M039
 25763                                  
 25764                                  WBUFPLACED:
 25765 00005661 F8                              CLC
 25766 00005662 16                      	push	ss
 25767 00005663 1F                      	pop	ds
 25768 00005664 C3                              retn
 25769                                  
 25770                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 25771                                  ;---------------------------------------------------------------------------
 25772                                  ;
 25773                                  ; Procedure Name : NEXTSEC
 25774                                  ;
 25775                                  ; Compute the next sector to read or write
 25776                                  ; ES:BP Points to DPB
 25777                                  ;
 25778                                  ;---------------------------------------------------------------------------
 25779                                  
 25780                                  NEXTSEC:
 25781 00005665 F606[3105]FF            	test	byte [TRANS],0FFh ; -1 
 25782 0000566A 7426                            JZ	short CLRET
 25783                                  
 25784 0000566C A0[3005]                        MOV     AL,[SECCLUSPOS]
 25785 0000566F FEC0                            INC     AL
 25786                                  	;cmp	al,[es:bp+4]
 25787 00005671 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 25788 00005675 7618                            JBE	short SAVPOS
 25789                                  
 25790 00005677 8B1E[7805]                      MOV     BX,[CLUSNUM]
 25791 0000567B E89C06                          call	IsEOF
 25792 0000567E 7314                            JAE	short NONEXT
 25793                                  
 25794 00005680 E8AE06                          call	UNPACK
 25795 00005683 720F                            JC	short NONEXT
 25796                                  clusgot:
 25797 00005685 893E[7805]                      MOV     [CLUSNUM],DI
 25798 00005689 FF06[7605]                      INC     word [LASTPOS]
 25799 0000568D B000                            MOV     AL,0
 25800                                  SAVPOS:
 25801 0000568F A2[3005]                        MOV     [SECCLUSPOS],AL
 25802                                  CLRET:
 25803 00005692 F8                              CLC
 25804 00005693 C3                              retn
 25805                                  NONEXT:
 25806 00005694 F9                              STC
 25807 00005695 C3                              retn
 25808                                  
 25809                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 25810                                  ;----------------------------------------------------------------------------
 25811                                  ;
 25812                                  ; Procedure Name : OPTIMIZE
 25813                                  ;
 25814                                  ; Inputs:
 25815                                  ;       BX = Physical cluster
 25816                                  ;       CX = No. of records
 25817                                  ;       DL = sector within cluster
 25818                                  ;       ES:BP = Base of drives parameters
 25819                                  ;       [NEXTADD] = transfer address
 25820                                  ; Outputs:
 25821                                  ;       AX = No. of records remaining
 25822                                  ;       BX = Transfer address
 25823                                  ;       CX = No. or records to be transferred
 25824                                  ;       DX = Physical sector address            (LOW)
 25825                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 25826                                  ;       DI = Next cluster
 25827                                  ;       [CLUSNUM] = Last cluster accessed
 25828                                  ;       [NEXTADD] updated
 25829                                  ;       Carry set if error (currently user FAILed to I 24)
 25830                                  ; ES:BP unchanged. Note that segment of transfer not set.
 25831                                  ;
 25832                                  ;---------------------------------------------------------------------------
 25833                                  
 25834                                  OPTIMIZE:
 25835 00005696 52                      	PUSH    DX
 25836 00005697 53                              PUSH    BX
 25837                                  	;mov	al,[es:bp+4]
 25838 00005698 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 25839 0000569C FEC0                            INC     AL              ; Number of sectors per cluster
 25840 0000569E 88C4                            MOV     AH,AL
 25841 000056A0 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 25842 000056A2 89CA                            MOV     DX,CX
 25843 000056A4 B90000                          MOV     CX,0
 25844                                  OPTCLUS:
 25845                                  ; AL has number of sectors available in current cluster
 25846                                  ; AH has number of sectors available in next cluster
 25847                                  ; BX has current physical cluster
 25848                                  ; CX has number of sequential sectors found so far
 25849                                  ; DX has number of sectors left to transfer
 25850                                  ; ES:BP Points to DPB
 25851                                  ; ES:SI has FAT pointer
 25852                                  
 25853                                  do_norm3:
 25854 000056A7 E88706                          call	UNPACK
 25855 000056AA 7237                            JC	short OP_ERR
 25856                                  clusgot2:
 25857 000056AC 00C1                    	ADD	CL,AL
 25858 000056AE 80D500                          ADC     CH,0
 25859 000056B1 39D1                            CMP     CX,DX
 25860 000056B3 7333                            JAE	short BLKDON
 25861 000056B5 88E0                            MOV     AL,AH
 25862 000056B7 43                              INC     BX
 25863 000056B8 39DF                            CMP     DI,BX
 25864 000056BA 74EB                            JZ	short OPTCLUS
 25865 000056BC 4B                              DEC     BX
 25866                                  FINCLUS:
 25867 000056BD 891E[7805]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 25868 000056C1 29CA                            SUB     DX,CX           ; Number of sectors still needed
 25869 000056C3 52                              PUSH    DX
 25870 000056C4 89C8                            MOV     AX,CX
 25871                                  	;mul	word[ES:BP+2]
 25872 000056C6 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 25873                                  				; Number of sectors times sector size
 25874 000056CA 8B36[7405]                      MOV     SI,[NEXTADD]
 25875 000056CE 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 25876 000056D0 A3[7405]                        MOV     [NEXTADD],AX
 25877 000056D3 58                              POP     AX              ; Number of sectors still needed
 25878 000056D4 5A                              POP     DX              ; Starting cluster
 25879 000056D5 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 25880 000056D7 011E[7605]                      ADD     [LASTPOS],BX
 25881 000056DB 5B                              POP     BX              ; BL = sector postion within cluster
 25882 000056DC E81700                  	call	FIGREC
 25883 000056DF 89F3                            MOV     BX,SI
 25884 000056E1 F8                      	CLC
 25885 000056E2 C3                              retn
 25886                                  OP_ERR:
 25887 000056E3 83C404                          ADD     SP,4
 25888 000056E6 F9                      	STC
 25889 000056E7 C3                              retn
 25890                                  BLKDON:
 25891 000056E8 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 25892 000056EA 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 25893 000056EC FECC                            DEC     AH              ; Adjust to mean position within cluster
 25894 000056EE 8826[3005]                      MOV     [SECCLUSPOS],AH
 25895 000056F2 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 25896 000056F4 EBC7                            JMP     SHORT FINCLUS
 25897                                  
 25898                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 25899                                  ;---------------------------------------------------------------------------
 25900                                  ;
 25901                                  ; Procedure Name : FIGREC
 25902                                  ;
 25903                                  ; Inputs:
 25904                                  ;       DX = Physical cluster number
 25905                                  ;       BL = Sector position within cluster
 25906                                  ;       ES:BP = Base of drive parameters
 25907                                  ; Outputs:
 25908                                  ;       DX = physical sector number           (LOW)
 25909                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 25910                                  ; No other registers affected.
 25911                                  ;
 25912                                  ;---------------------------------------------------------------------------
 25913                                  
 25914                                  FIGREC:
 25915                                  	; 24/07/2019 - Retro DOS v3.2
 25916                                  	; 20/05/2019 - Retro DOS v4.0
 25917 000056F6 51                              PUSH    CX
 25918                                  	;mov	cl,[es:bp+5]
 25919 000056F7 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 25920 000056FB 4A                              DEC     DX
 25921 000056FC 4A                              DEC     DX
 25922                                  
 25923                                  	; MSDOS 3.3
 25924                                  	;SHL	DX,CL
 25925                                  
 25926                                  ;hkn; SS override HIGH_SECTOR
 25927                                  	; MSDOS 6.0
 25928                                  	;MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 25929 000056FD 2EC706[B005]0000        	mov	word [cs:HIGH_SECTOR],0	
 25930 00005704 08C9                    	OR	CL,CL				;F.C. >32mb
 25931 00005706 740C                    	JZ	short noshift			;F.C. >32mb
 25932 00005708 30ED                    	XOR	CH,CH 				;F.C. >32mb
 25933                                  rotleft:					;F.C. >32mb
 25934 0000570A F8                      	CLC					;F.C. >32mb
 25935 0000570B D1D2                    	RCL	DX,1				;F.C. >32mb
 25936                                  	; 10/06/2019
 25937                                  	;RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 25938 0000570D 2ED116[B005]            	rcl	word [cs:HIGH_SECTOR],1
 25939 00005712 E2F6                    	LOOP	rotleft				;F.C. >32mb
 25940                                  noshift:
 25941                                  	; MSDOS 3.3 & MSDOS 6.0
 25942 00005714 08DA                            OR      DL,BL
 25943                                  	;add	dx,[es:bp+0Bh]
 25944 00005716 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 25945                                  	; MSDOS 6.0
 25946                                  	; 10/06/2019
 25947                                          ;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 25948 0000571A 2E8316[B005]00          	adc	word [cs:HIGH_SECTOR],0
 25949                                  	; MSDOS 3.3 & MSDOS 6.0        
 25950 00005720 59                      	POP     CX
 25951                                  figrec_retn:
 25952 00005721 C3                              retn
 25953                                  
 25954                                  ; 30/07/2018 - Retro DOS v3.0
 25955                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 25956                                  
 25957                                  ;Break   <ALLOCATE -- Assign disk space>
 25958                                  ;---------------------------------------------------------------------------
 25959                                  ;
 25960                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 25961                                  ;
 25962                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 25963                                  ;   FAT-chained onto the end of the existing file.
 25964                                  ;
 25965                                  ;   The DPB contains the cluster # of the last free cluster allocated
 25966                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 25967                                  ;   numbered clusters, looking for the necessary free blocks.
 25968                                  ;
 25969                                  ;   Once again, fancy terminology gets in the way of corrct coding. When
 25970                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 25971                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 25972                                  ;
 25973                                  ;       If we get to the end of the disk without satisfaction:
 25974                                  ;
 25975                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 25976                                  ;               return (insufficient_disk_space)
 25977                                  ;           ELSE
 25978                                  ;               dpb_next_free = 2; start scan over from the beginning.
 25979                                  ;
 25980                                  ;   Note that there is no multitasking interlock. There is no race when
 25981                                  ;   examining the entrys in an in-core FAT block since there will be no
 25982                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 25983                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 25984                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 25985                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 25986                                  ;   satisfied. We can't allow another activation to think this cluster is
 25987                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 25988                                  ;   allocated.
 25989                                  ;
 25990                                  ;   Note that when we run out of space this algorithem will scan from
 25991                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 25992                                  ;   redundantly scanning the later part of the disk. This only happens when
 25993                                  ;   we run out of space, so sue me.
 25994                                  ;
 25995                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 25996                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 25997                                  ;                                                                          ;
 25998                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 25999                                  ;   explanation:
 26000                                  ;
 26001                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 26002                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 26003                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 26004                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 26005                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 26006                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 26007                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 26008                                  ;   the
 26009                                  ;           LOOP   findfre         ; alloc more if needed
 26010                                  ;   instruction when the first cluster is allocated to the nul file. The
 26011                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 26012                                  ;
 26013                                  ;   This method is obviously useless (because it is non-reentrant) for
 26014                                  ;   multitasking, and will have to be changed. Storing the required value on
 26015                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 26016                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 26017                                  ;   problems with INT 24 well.
 26018                                  ;
 26019                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 26020                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 26021                                  ;                                                                          ;
 26022                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 26023                                  ;               CX = No. of clusters to allocate
 26024                                  ;               ES:BP = Base of drive parameters
 26025                                  ;               [THISSFT] = Points to SFT
 26026                                  ;
 26027                                  ;       EXIT    'C' set if insufficient space
 26028                                  ;                 [FAILERR] can be tested to see the reason for failure
 26029                                  ;                 CX = max. no. of clusters that could be added to file
 26030                                  ;               'C' clear if space allocated
 26031                                  ;                 BX = First cluster allocated
 26032                                  ;                 FAT is fully updated
 26033                                  ;                 sf_FIRCLUS field of SFT set if file was null
 26034                                  ;
 26035                                  ;       USES    ALL but SI, BP
 26036                                  
 26037                                  ;callmagic  proc near
 26038                                  ;       push    ds                             ;push segment of routine 
 26039                                  ;       push    Offset MagicPatch              ;push offset for routine
 26040                                  ;       retf                                   ;simulate jmp far
 26041                                  ;                                              ;far return address is on
 26042                                  ;                                              ;stack, so far return from
 26043                                  ;                                              ;call will return this routine
 26044                                  ;callmagic  endp
 26045                                  
 26046                                  ALLOCATE:
 26047                                  	; 10/09/2018
 26048                                  ;BEGIN MAGICDRV MODIFICATIONS
 26049                                  ;
 26050                                  ;7/5/92 scottq
 26051                                  ;
 26052                                  ;This is the disk compression patch location which allows
 26053                                  ;the disk compression software to fail allocations if the
 26054                                  ;FAT would allows allocation, but the free space for compressed
 26055                                  ;data would not.
 26056                                  ;        
 26057                                  ;;;	call    far ptr MAGICPATCH
 26058                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 26059                                  ;;; but we do know the segment and offset of the routine
 26060                                  ;;; so simulate a far call to dosdata:magicpatch
 26061                                  ;;; note dosassume above, so DS -> dosdata
 26062                                  
 26063                                  	; MSDOS 6.0
 26064                                          ;clc				;clear carry so we fall through
 26065                                  	;				;if no patch is present
 26066                                  	;push	cs			;push segment for far return
 26067                                          ;call	callmagic		;this is a near call
 26068                                          ;jnc	short Regular_Allocate_Path
 26069                                  	;jmp	Disk_Full_Return ; 10/09/2018 !
 26070                                  
 26071                                  ;Regular_Allocate_Path:
 26072                                  ;END MAGICDRV MODIFICATIONS
 26073                                  
 26074 00005722 53                              PUSH    BX                      ; save (bx)
 26075 00005723 31DB                            XOR     BX,BX
 26076 00005725 E80906                  	call	UNPACK
 26077 00005728 893E[5205]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 26078 0000572C 5B                              POP     BX
 26079 0000572D 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 26080                                  
 26081 0000572F 51                              PUSH    CX
 26082 00005730 53                              PUSH    BX
 26083                                  
 26084 00005731 89DA                            MOV     DX,BX
 26085                                  	;mov	bx,[es:bp+1Ch]
 26086                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 26087 00005733 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 26088 00005737 83FB02                          cmp     bx,2
 26089 0000573A 7709                            ja	short FINDFRE
 26090                                  
 26091                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 26092                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 26093                                  
 26094                                  ads1:
 26095                                  	;mov	word [es:bp+1Ch],2
 26096                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 26097 0000573C 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 26098 00005742 BB0100                          mov     bx,1                    ; Counter next instruction so first
 26099                                                                          ;       cluster examined is 2
 26100                                  
 26101                                  ;   Scanning both forwards and backwards for a free cluster
 26102                                  ;
 26103                                  ;       (BX) = forwards scan pointer
 26104                                  ;       (CX) = clusters remaining to be allocated
 26105                                  ;       (DX) = current last cluster in file
 26106                                  ;       (TOS) = last cluster of file
 26107                                  
 26108                                  FINDFRE:
 26109 00005745 43                              INC     BX
 26110                                  	;cmp	bx,[es:bp+0Dh]
 26111 00005746 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 26112 0000574A 7757                    	ja	short ads7	; at end of disk
 26113 0000574C E8E205                          call	UNPACK          ; check out this cluster
 26114 0000574F 722F                            jc	short ads4	; FAT error             [INTERR?]
 26115 00005751 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 26116                                  
 26117                                  ;   Have found a free cluster. Chain it to the file
 26118                                  ;
 26119                                  ;       (BX) = found free cluster #
 26120                                  ;       (DX) = current last cluster in file
 26121                                  
 26122                                  	;mov	[es:bp+1Ch],bx
 26123                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 26124 00005753 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 26125 00005757 92                              xchg    ax,dx           ; save (dx) in ax
 26126 00005758 BA0100                          mov     dx,1            ; mark this free guy as "1"
 26127 0000575B E82706                  	call	PACK            ; set special "temporary" mark
 26128 0000575E 7220                            jc	short ads4	; FAT error             [INTERR?]
 26129                                  	;cmp	word [es:bp+1Eh],-1
 26130                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 26131 00005760 26837E1FFF                      CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 26132 00005765 7404                            JZ	short NO_ALLOC	; No
 26133                                  	;dec	word [es:bp+1Eh]
 26134                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 26135 00005767 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 26136                                  NO_ALLOC:
 26137 0000576B 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 26138 0000576C 87DA                            XCHG    BX,DX
 26139 0000576E 89D0                            MOV     AX,DX
 26140 00005770 E81206                  	call	PACK            ; link free cluster onto file
 26141                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 26142                                                                  ;    cluster 0 with FIRCLUS value.
 26143 00005773 720B                            jc	short ads4	; FAT error [INTERR?]
 26144 00005775 93                              xchg    BX,AX           ; (BX) = last one we looked at
 26145 00005776 89DA                            mov     dx,bx           ; (dx) = current end of file
 26146 00005778 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 26147                                  
 26148                                  ;   We've successfully extended the file. Clean up and exit
 26149                                  ;
 26150                                  ;       (BX) = last cluster in file
 26151                                  
 26152 0000577A BAFFFF                          MOV     DX,0FFFFH
 26153 0000577D E80506                  	call	PACK            ; mark last cluster EOF
 26154                                  
 26155                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 26156                                  ;   2 whole bytes.  Hope its worth it...
 26157                                  ;
 26158                                  ;       'C' set iff error
 26159                                  ;       calling (BX) and (CX) pushed on stack
 26160                                  
 26161                                  ads4:   
 26162 00005780 5B                      	POP     BX
 26163 00005781 59                              POP     CX              ; Don't need this stuff since we're successful
 26164 00005782 729D                            jc	short figrec_retn
 26165 00005784 E8AA05                          call	UNPACK          ; Get first cluster allocated for return
 26166                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 26167 00005787 7298                            jc	short figrec_retn
 26168 00005789 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 26169 0000578C 7293                            jc	short figrec_retn
 26170 0000578E 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 26171 00005790 09FF                            OR      DI,DI           ; clear 'C'
 26172 00005792 758D                    	jnz	short figrec_retn ; we were extending an existing file
 26173                                  
 26174                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 26175                                  ;   info
 26176                                  dofastk:
 26177 00005794 06                              PUSH	ES
 26178 00005795 C43E[5A05]                      LES     DI,[THISSFT]
 26179                                  	;mov	[es:di+0Bh],bx
 26180 00005799 26895D0B                        MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 26181                                  	;mov	[es:di+1Bh],bx
 26182                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 26183 0000579D 26895D35                        MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 26184 000057A1 07                              POP	ES
 26185 000057A2 C3                              retn
 26186                                  
 26187                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 26188                                  ;   of the disk...
 26189                                  
 26190                                  ads7:   
 26191 000057A3 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 26192 000057A8 7592                    	jnz	short ads1	; start scan from front of disk
 26193                                  
 26194                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 26195                                  ;   the space back to the free list and tell the caller how much he could have
 26196                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 26197                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 26198                                  ;
 26199                                  ;       (CX) = clusters remaining to be allocated
 26200                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 26201                                  ;       (TOS+1) = # of clusters wanted to allocate
 26202                                  
 26203 000057AA 5B                              POP     BX              ; (BX) = last cluster of file
 26204 000057AB BAFFFF                          MOV     DX,0FFFFH
 26205 000057AE E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 26206 000057B1 58                              POP     AX              ; No. of clusters requested
 26207                                                                  ; Don't "retc". We are setting Carry anyway,
 26208                                                                  ;   Alloc failed, so proceed with return CX
 26209                                                                  ;   setup.
 26210 000057B2 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 26211 000057B4 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 26212                                                                  ;   Alloc failed.
 26213                                  ;Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 26214                                          ; MSDOS 6.0
 26215 000057B7 C606[C20F]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 26216 000057BC F9                              STC
 26217 000057BD C3                              retn
 26218                                  
 26219                                  ;-----------------------------------------------------------------------
 26220                                  ;
 26221                                  ; Procedure Name : RESTFATBYT
 26222                                  ;
 26223                                  ; SEE ALLOCATE CAVEAT
 26224                                  ;       Carry set if error (currently user FAILed to I 24)
 26225                                  ;-----------------------------------------------------------------------
 26226                                  
 26227                                  RESTFATBYT:
 26228 000057BE 53                              PUSH    BX
 26229 000057BF 52                              PUSH    DX
 26230 000057C0 57                              PUSH    DI
 26231 000057C1 31DB                            XOR     BX,BX
 26232 000057C3 8B16[5205]                      MOV     DX,[FATBYT]
 26233 000057C7 E8BB05                  	call	PACK
 26234 000057CA 5F                              POP     DI
 26235 000057CB 5A                              POP     DX
 26236 000057CC 5B                              POP     BX
 26237                                  RELEASE_flush:
 26238 000057CD C3                      	retn
 26239                                  
 26240                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 26241                                  ;---------------------------------------------------------------------------
 26242                                  ;
 26243                                  ; Procedure Name : RELEASE
 26244                                  ;
 26245                                  ; Inputs:
 26246                                  ;       BX = Cluster in file
 26247                                  ;       ES:BP = Base of drive parameters
 26248                                  ; Function:
 26249                                  ;       Frees cluster chain starting with [BX]
 26250                                  ;       Carry set if error (currently user FAILed to I 24)
 26251                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 26252                                  ;
 26253                                  ;-----------------------------------------------------------------------------
 26254                                  
 26255                                  RELEASE:
 26256 000057CE 31D2                            XOR     DX,DX
 26257                                  
 26258                                  	;entry	RELBLKS
 26259                                  RELBLKS:
 26260                                  
 26261                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 26262                                  ;   and free the rest in the chain.
 26263                                  
 26264 000057D0 E85E05                  	call	UNPACK
 26265 000057D3 72F8                    	jc	short RELEASE_flush
 26266 000057D5 74F6                    	jz	short RELEASE_flush
 26267 000057D7 89F8                            MOV     AX,DI
 26268 000057D9 52                              PUSH    DX
 26269 000057DA E8A805                  	call	PACK
 26270 000057DD 5A                              POP     DX
 26271 000057DE 72ED                    	jc	short RELEASE_flush
 26272 000057E0 09D2                            OR      DX,DX
 26273 000057E2 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 26274                                  	;cmp	word [es:bp+1Eh],-1
 26275 000057E4 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 26276 000057E9 7404                            JZ	short NO_DEALLOC	; No
 26277 000057EB 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 26278                                  NO_DEALLOC:
 26279 000057EF 89C3                            MOV     BX,AX
 26280 000057F1 48                              dec     ax              ; check for "1"
 26281 000057F2 74D9                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 26282 000057F4 E82305                  	call	IsEOF
 26283 000057F7 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 26284                                  
 26285                                  ;RELEASE_flush:
 26286                                  	; MSDOS 6.0
 26287                                  	;mov	al,[es:bp]
 26288                                  	;;MOV	AL,[ES:BP+DPB.DRIVE]
 26289                                  	;push	si		; FLUSHBUF may trash these and we guarantee
 26290                                  	;push	cx		;  them to be preserved.
 26291                                  	;push	es
 26292                                  	;push	bp
 26293                                  	;call	FLUSHBUF	; commit buffers for this drive
 26294                                  	;pop	bp
 26295                                  	;pop	es
 26296                                  	;pop	cx
 26297                                  	;pop	si
 26298                                  RET12:
 26299 000057F9 C3                      	retn
 26300                                  
 26301                                  ;Break	<GETEOF -- Find the end of a file>
 26302                                  ;------------------------------------------------------------------------
 26303                                  ;
 26304                                  ; Procedure Name : GETEOF
 26305                                  ;
 26306                                  ; Inputs:
 26307                                  ;       ES:BP Points to DPB
 26308                                  ;       BX = Cluster in a file
 26309                                  ;       DS = CS
 26310                                  ; Outputs:
 26311                                  ;       BX = Last cluster in the file
 26312                                  ;       Carry set if error (currently user FAILed to I 24)
 26313                                  ; DI destroyed. No other registers affected.
 26314                                  ;
 26315                                  ;--------------------------------------------------------------------------
 26316                                  
 26317                                  GETEOF:
 26318 000057FA E83405                  	call	UNPACK
 26319 000057FD 72FA                            jc	short RET12
 26320 000057FF 53                              PUSH    BX
 26321 00005800 89FB                            MOV     BX,DI
 26322 00005802 E81505                  	call	IsEOF
 26323 00005805 5B                              POP     BX
 26324 00005806 73F1                            JAE     short RET12
 26325 00005808 89FB                            MOV     BX,DI
 26326 0000580A EBEE                            JMP     short GETEOF
 26327                                  
 26328                                  ;============================================================================
 26329                                  ; FCB.ASM, MSDOS 6.0, 1991
 26330                                  ;============================================================================
 26331                                  ; 30/07/2018 - Retro DOS v3.0
 26332                                  
 26333                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 26334                                  ;	NAME	FCB
 26335                                  
 26336                                  ;**	FCB.ASM -  Low level routines for parsing names into FCBs and analyzing
 26337                                  ;		   filename characters
 26338                                  ;
 26339                                  ;	MakeFcb
 26340                                  ;	NameTrans
 26341                                  ;	PATHCHRCMP
 26342                                  ;	GetLet
 26343                                  ;	UCase
 26344                                  ;	GetLet3
 26345                                  ;	GetCharType
 26346                                  ;	TESTKANJ
 26347                                  ;	NORMSCAN
 26348                                  ;	DELIM
 26349                                  ;
 26350                                  ;	Revision history:
 26351                                  ;
 26352                                  ;		A000  version 4.00  Jan. 1988
 26353                                  ;	
 26354                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 26355                                  
 26356                                  TableLook	EQU -1
 26357                                  
 26358                                  SCANSEPARATOR	EQU	1
 26359                                  DRVBIT		EQU	2
 26360                                  NAMBIT		EQU	4
 26361                                  EXTBIT		EQU	8
 26362                                  
 26363                                  ;
 26364                                  ;----------------------------------------------------------------------------
 26365                                  ;
 26366                                  ; Procedure : MakeFcb
 26367                                  ;
 26368                                  ;----------------------------------------------------------------------------
 26369                                  ;
 26370                                  
 26371                                  MAKEFCB:
 26372                                  ;hkn; SS override
 26373 0000580C 36C606[1803]00          	MOV	BYTE [SS:SpaceFlag],0
 26374 00005812 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 26375                                  	;test	al,2
 26376 00005814 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 26377 00005816 7504                    	JNZ	short DEFDRV
 26378 00005818 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 26379                                  DEFDRV:
 26380 0000581C 47                      	INC	DI
 26381 0000581D B90800                  	MOV	CX,8
 26382                                  	;test	al,4
 26383 00005820 A804                    	test	AL,NAMBIT	; Use current name fields as default?
 26384 00005822 93                      	XCHG	AX,BX		; Save bits in BX
 26385 00005823 B020                    	MOV	AL," "
 26386 00005825 7404                    	JZ	short FILLB	; If not, go fill with blanks
 26387 00005827 01CF                    	ADD	DI,CX
 26388 00005829 31C9                    	XOR	CX,CX		; Don't fill any
 26389                                  FILLB:
 26390 0000582B F3AA                    	REP	STOSB
 26391 0000582D B103                    	MOV	CL,3
 26392 0000582F F6C308                  	test	BL,EXTBIT	; Use current extension as default
 26393 00005832 7404                    	JZ	short FILLB2
 26394 00005834 01CF                    	ADD	DI,CX
 26395 00005836 31C9                    	XOR	CX,CX
 26396                                  FILLB2:
 26397 00005838 F3AA                    	REP	STOSB
 26398 0000583A 91                      	XCHG	AX,CX		; Put zero in AX
 26399 0000583B AB                      	STOSW
 26400 0000583C AB                      	STOSW			; Initialize two words after to zero
 26401 0000583D 83EF10                  	SUB	DI,16		; Point back at start
 26402                                  	;test	bl,1
 26403 00005840 F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 26404 00005843 7409                    	JZ	short SKPSPC
 26405 00005845 E87300                  	CALL	SCANB		; Peel off blanks and tabs
 26406 00005848 E8CA00                  	CALL	DELIM		; Is it a one-time-only delimiter?
 26407 0000584B 7504                    	JNZ	short NOSCAN
 26408 0000584D 46                      	INC	SI		; Skip over the delimiter
 26409                                  SKPSPC:
 26410 0000584E E86A00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 26411                                  NOSCAN:
 26412 00005851 E89C00                  	CALL	GETLET
 26413 00005854 7616                    	JBE	short NODRV	; Quit if termination character
 26414 00005856 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 26415 00005859 7511                    	JNZ	short NODRV
 26416 0000585B 46                      	INC	SI		; Skip over colon
 26417 0000585C 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 26418 0000585E 7607                    	JBE	short BADDRV	; Drive letter out of range
 26419                                  
 26420 00005860 50                      	PUSH	AX
 26421 00005861 E83E14                  	call	GetVisDrv
 26422 00005864 58                      	POP	AX
 26423 00005865 7302                    	JNC	short HAVDRV
 26424                                  
 26425                                  	; MSDOS 6.0
 26426                                  ;hkn; SS override
 26427                                  	;CMP	byte [SS:DrvErr],error_not_DOS_disk
 26428                                  	;				; if not FAT drive ;AN000;
 26429                                  	;JZ	short HAVDRV		; assume ok	   ;AN000;
 26430                                  BADDRV:
 26431 00005867 B2FF                    	MOV	DL,-1
 26432                                  HAVDRV:
 26433 00005869 AA                      	STOSB			; Put drive specifier in first byte
 26434 0000586A 46                      	INC	SI
 26435 0000586B 4F                      	DEC	DI		; Counteract next two instructions
 26436                                  NODRV:
 26437 0000586C 4E                      	DEC	SI		; Back up
 26438 0000586D 47                      	INC	DI		; Skip drive byte
 26439                                  
 26440                                  	;entry	NORMSCAN
 26441                                  NORMSCAN:
 26442 0000586E B90800                  	MOV	CX,8
 26443 00005871 E81300                  	CALL	GETWORD 	; Get 8-letter file name
 26444 00005874 803C2E                  	CMP	BYTE [SI],"."
 26445 00005877 7507                    	JNZ	short NODOT
 26446 00005879 46                      	INC	SI		; Skip over dot if present
 26447                                  
 26448                                  	; MSDOS 6.0
 26449                                  ;hkn; SS override
 26450                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2	;AN000;
 26451                                  	;JZ	short VOLOK				;AN000;
 26452                                  	;MOVSB			; 2nd byte of DBCS	;AN000;
 26453                                  	;MOV	CX,2					;AN000;
 26454                                  	;JMP	SHORT contvol				;AN000;
 26455                                  ;VOLOK:
 26456 0000587A B90300                  	MOV	CX,3		; Get 3-letter extension
 26457                                  contvol:
 26458 0000587D E80D00                  	CALL	MUSTGETWORD
 26459                                  NODOT:
 26460 00005880 88D0                    	MOV	AL,DL
 26461                                  
 26462                                  	; MSDOS 6.0
 26463                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 26464                                  
 26465 00005882 C3                      	retn
 26466                                  
 26467                                  NONAM:
 26468 00005883 01CF                    	ADD	DI,CX
 26469 00005885 4E                      	DEC	SI
 26470 00005886 C3                      	retn
 26471                                  
 26472                                  GETWORD:
 26473 00005887 E86600                  	CALL	GETLET		
 26474 0000588A 76F7                    	JBE	short NONAM	; Exit if invalid character
 26475 0000588C 4E                      	DEC	SI
 26476                                  
 26477                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 26478                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 26479                                  
 26480                                  MUSTGETWORD:
 26481 0000588D E86000                  	CALL	GETLET
 26482                                  
 26483                                  ;	If spaceFlag is set then we allow spaces in a pathname
 26484                                  
 26485                                  ;IF NOT TABLELOOK
 26486 00005890 7223                    	JB	short FILLNAM
 26487                                  ;ENDIF
 26488 00005892 750C                    	JNZ	short MustCheckCX
 26489                                  
 26490                                  ;hkn; SS override
 26491 00005894 36F606[1803]FF          	test	BYTE [SS:SpaceFlag],0FFh
 26492 0000589A 7419                    	JZ	short FILLNAM
 26493 0000589C 3C20                    	CMP	AL," "
 26494 0000589E 7515                    	JNZ	short FILLNAM
 26495                                  
 26496                                  MustCheckCX:
 26497 000058A0 E3EB                    	JCXZ	MUSTGETWORD
 26498 000058A2 49                      	DEC	CX
 26499 000058A3 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 26500 000058A5 7504                    	JNZ	short NOSTAR
 26501 000058A7 B03F                    	MOV	AL,"?"
 26502 000058A9 F3AA                    	REP	STOSB
 26503                                  NOSTAR:
 26504 000058AB AA                      	STOSB
 26505 000058AC 3C3F                    	CMP	AL,"?"
 26506 000058AE 75DD                    	JNZ	short MUSTGETWORD
 26507 000058B0 80CA01                  	OR	DL,1		; Flag ambiguous file name
 26508 000058B3 EBD8                    	JMP	short MUSTGETWORD
 26509                                  FILLNAM:
 26510 000058B5 B020                    	MOV	AL," "
 26511 000058B7 F3AA                    	REP	STOSB
 26512 000058B9 4E                      	DEC	SI
 26513 000058BA C3                      	retn
 26514                                  
 26515                                  SCANB:
 26516 000058BB AC                      	LODSB
 26517 000058BC E86200                  	CALL	SPCHK
 26518 000058BF 74FA                    	JZ	short SCANB
 26519 000058C1 4E                      	DEC	SI
 26520                                  scanb_retn:
 26521 000058C2 C3                      	retn
 26522                                  
 26523                                  ;----------------------------------------------------------------------------
 26524                                  ;
 26525                                  ; Procedure Name : NameTrans
 26526                                  ;
 26527                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 26528                                  ; allow spaces in pathnames
 26529                                  ;
 26530                                  ;   Inputs:	DS:SI points to start of path element
 26531                                  ;   Outputs:	Name1 has unpacked name, uppercased
 26532                                  ;		ES = DOSGroup
 26533                                  ;		DS:SI advanced after name
 26534                                  ;   Registers modified: DI,AX,DX,CX
 26535                                  ;
 26536                                  ;----------------------------------------------------------------------------
 26537                                  
 26538                                  NameTrans:
 26539                                  ;hkn; SS override
 26540 000058C3 36C606[1803]01          	MOV	BYTE [SS:SpaceFlag],1
 26541 000058C9 16                      	push	ss
 26542 000058CA 07                      	pop	es
 26543                                  
 26544                                  ;hkn; NAME1 is in DOSDATA
 26545 000058CB BF[0805]                	MOV	DI,NAME1
 26546 000058CE 57                      	PUSH	DI
 26547 000058CF B82020                  	MOV	AX,'  '
 26548 000058D2 B90500                  	MOV	CX,5
 26549 000058D5 AA                      	STOSB
 26550 000058D6 F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 26551 000058D8 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 26552 000058DA 88C2                    	MOV	DL,AL
 26553 000058DC AA                      	STOSB
 26554 000058DD 5F                      	POP	DI
 26555                                  
 26556 000058DE E88DFF                  	CALL	NORMSCAN
 26557                                  
 26558                                  ;hkn; SS override for NAME1
 26559 000058E1 36803E[0805]E5          	CMP	byte [SS:NAME1],0E5H
 26560 000058E7 75D9                    	jnz	short scanb_retn
 26561 000058E9 36C606[0805]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 26562 000058EF C3                      	retn
 26563                                  
 26564                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 26565                                  
 26566                                  ;----------------------------------------------------------------------------
 26567                                  ;
 26568                                  ; Procedure Names : GetLet, UCase, GetLet3
 26569                                  ;
 26570                                  ; These routines take a character, convert it to upper case, and check
 26571                                  ; for delimiters.  Three different entry points:
 26572                                  ;	GetLet -  DS:[SI] = character to convert
 26573                                  ;	UCase  -  AL = character to convert
 26574                                  ;	GetLet3 - AL = character
 26575                                  ;		  [BX] = translation table to use
 26576                                  ;
 26577                                  ;	Exit (in all cases) : AL = upper case character
 26578                                  ;			      CY set if char is control char other than TAB
 26579                                  ;			      ZF set if char is a delimiter
 26580                                  ;	Uses : AX, flags
 26581                                  ;
 26582                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 26583                                  ; inline version.  Return with carry set is only possible in the inline
 26584                                  ; version.  The table lookup version is the one in use.
 26585                                  ;
 26586                                  ;----------------------------------------------------------------------------
 26587                                  
 26588                                  
 26589                                  ; This entry point has character at [SI]
 26590                                  
 26591                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 26592                                  GETLET:	
 26593 000058F0 AC                      	LODSB
 26594                                  
 26595                                  ; This entry point has character in AL
 26596                                  
 26597                                  	;entry	UCase
 26598                                  UCase:	
 26599                                  	; 09/08/2018
 26600                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 26601                                  _UCase:
 26602 000058F1 53                      	PUSH	BX
 26603 000058F2 BB[4811]                	MOV	BX,FILE_UCASE_TAB+2
 26604                                  
 26605                                  ; Convert the character in AL to upper case
 26606                                  
 26607                                  gl_0:
 26608 000058F5 3C61                    	CMP	AL,"a"
 26609 000058F7 720E                    	JB	short gl_2	; Already upper case, go check type
 26610 000058F9 3C7A                    	CMP	AL,"z"
 26611 000058FB 7702                    	JA	short gl_1
 26612 000058FD 2C20                    	SUB	AL,20H		; Convert to upper case
 26613                                  
 26614                                  ; Map European character to upper case
 26615                                  
 26616                                  gl_1:
 26617 000058FF 3C80                    	CMP	AL,80H
 26618 00005901 7204                    	JB	short gl_2	; Not EuroChar, go check type
 26619 00005903 2C80                    	SUB	AL,80H		; translate to upper case with this index
 26620                                  
 26621                                  	; M048 - Start 
 26622                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 26623                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 26624                                  	; preserve it.
 26625                                  	;
 26626                                  
 26627                                  	;push	ds
 26628                                  	;push	cs
 26629                                  	;pop	ds
 26630                                  
 26631                                  	; 09/08/2018
 26632                                  	;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 26633 00005905 2ED7                    	CS	XLAT
 26634                                  
 26635                                  	;pop	ds
 26636                                  
 26637                                  	; M048 - End
 26638                                  
 26639                                  ; Now check the type
 26640                                  
 26641                                  ;If TableLook
 26642                                  
 26643                                  gl_2:
 26644 00005907 50                      	PUSH	AX
 26645                                  	
 26646                                  	; MSDOS 6.0
 26647                                  	;CALL	GetCharType	; returns type flags in AL
 26648                                  	
 26649                                  	; MSDOS 3.3
 26650 00005908 BB[5413]                	mov	bx,CharType
 26651                                  	; 09/08/2018
 26652                                  	;xlat	byte [cs:bx]
 26653 0000590B 2ED7                    	cs	xlat	
 26654                                  
 26655                                  	;test	al,1	
 26656 0000590D A801                    	TEST	AL,FCHK 	; test for normal character
 26657 0000590F 58                      	POP	AX
 26658 00005910 5B                      	POP	BX
 26659 00005911 C3                      	RETN
 26660                                  
 26661                                  ; This entry has character in AL and lookup table in BX
 26662                                  
 26663                                  	; MSDOS 6.0
 26664                                  ;	;entry GetLet3
 26665                                  GETLET3: ; 10/08/2018
 26666 00005912 53                      	PUSH	BX
 26667 00005913 EBE0                    	JMP	short gl_0
 26668                                  
 26669                                  ;ELSE
 26670                                  ;
 26671                                  ;gl_2:
 26672                                  ;	POP	BX
 26673                                  ;	CMP	AL,"."
 26674                                  ;	retz
 26675                                  ;	CMP	AL,'"'
 26676                                  ;	retz
 26677                                  ;	CALL	PATHCHRCMP
 26678                                  ;	retz
 26679                                  ;	CMP	AL,"["
 26680                                  ;	retz
 26681                                  ;	CMP	AL,"]"
 26682                                  ;	retz
 26683                                  ;ENDIF
 26684                                  
 26685                                  ;---------------------------------------------------------------------
 26686                                  ;
 26687                                  ; DELIM - check if character is a delimiter
 26688                                  ;	Entry : AX = character to check
 26689                                  ;	Exit  : ZF set if character is not a delimiter
 26690                                  ;	Uses  : Flags
 26691                                  ;
 26692                                  ;--------------------------------------------------------------------
 26693                                  
 26694                                  	;entry	DELIM
 26695                                  DELIM:
 26696                                  ;IF TableLook
 26697 00005915 50                      	PUSH	AX
 26698                                  
 26699                                  	; MSDOS 6.0
 26700                                  	;CALL	GetCharType
 26701                                  	
 26702                                  	; MSDOS 3.3
 26703 00005916 53                      	push	bx
 26704 00005917 BB[5413]                	mov	bx,CharType
 26705                                  	;09/08/2018
 26706                                  	;xlat	byte [cs:bx]
 26707 0000591A 2ED7                    	cs	xlat
 26708 0000591C 5B                      	pop	bx
 26709                                  
 26710                                  	;test	al,2
 26711 0000591D A802                    	TEST	AL,FDELIM
 26712 0000591F 58                      	POP	AX
 26713 00005920 C3                      	RETN
 26714                                  ;ELSE
 26715                                  ;	CMP	AL,":"
 26716                                  ;	retz
 26717                                  ;
 26718                                  ;	CMP	AL,"<"
 26719                                  ;	retz
 26720                                  ;	CMP	AL,"|"
 26721                                  ;	retz
 26722                                  ;	CMP	AL,">"
 26723                                  ;	retz
 26724                                  ;
 26725                                  ;	CMP	AL,"+"
 26726                                  ;	retz
 26727                                  ;	CMP	AL,"="
 26728                                  ;	retz
 26729                                  ;	CMP	AL,";"
 26730                                  ;	retz
 26731                                  ;	CMP	AL,","
 26732                                  ;	retz
 26733                                  ;ENDIF
 26734                                  
 26735                                  ;-------------------------------------------------------------------------
 26736                                  ;
 26737                                  ;  SPCHK - checks to see if a character is a space or equivalent
 26738                                  ;	Entry : AL = character to check
 26739                                  ;	Exit  : ZF set if character is a space
 26740                                  ;	Uses  : flags
 26741                                  ;
 26742                                  ;-------------------------------------------------------------------------
 26743                                  
 26744                                  	;entry SPCHK
 26745                                  SPCHK:
 26746                                  ;IF TableLook
 26747 00005921 50                      	PUSH	AX
 26748                                  
 26749                                  	; MSDOS 6.0
 26750                                  	;CALL	GetCharType
 26751                                  	
 26752                                  	; MSDOS 3.3
 26753 00005922 53                      	push	bx
 26754 00005923 BB[5413]                	mov	bx,CharType
 26755                                  	; 09/08/2018
 26756                                  	;xlat	byte [cs:bx]
 26757 00005926 2ED7                    	cs	xlat
 26758 00005928 5B                      	pop	bx
 26759                                  
 26760                                  	;test	al,4
 26761 00005929 A804                    	TEST	AL,FSPCHK
 26762 0000592B 58                      	POP	AX
 26763 0000592C C3                      	RETN
 26764                                  ;ELSE
 26765                                  ;	CMP	AL,9		; Filter out tabs too
 26766                                  ;	retz
 26767                                  ;; WARNING! " " MUST be the last compare
 26768                                  ;	CMP	AL," "
 26769                                  ;	return
 26770                                  ;ENDIF
 26771                                  
 26772                                  ; MSDOS 6.0
 26773                                  ;-------------------------------------------------------------------------
 26774                                  ;
 26775                                  ;  GetCharType - return flag bits indicating character type
 26776                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 26777                                  ;	defined above at label CharType.
 26778                                  ;
 26779                                  ;	Entry : AL = character to return type flags for
 26780                                  ;	Exit  : AL = type flags
 26781                                  ;	Uses  : AL, flags
 26782                                  ;
 26783                                  ;-------------------------------------------------------------------------
 26784                                  ;
 26785                                  ;GetCharType:
 26786                                  ;	cmp	al,CharType_last	; beyond end of table?
 26787                                  ;	jae	short gct_90		; return standard value
 26788                                  ;
 26789                                  ;	push	bx
 26790                                  ;	mov	bx,CharType		; load lookup table
 26791                                  ;	shr	al,1			; adjust for half-byte table entry size
 26792                                  ;	;xlat	cs:[bx] 		; get flags
 26793                                  ;	cs	xlat	
 26794                                  ;	pop	bx
 26795                                  ;
 26796                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 26797                                  ; we have to shift the flags down to the low nibble
 26798                                  ;
 26799                                  ;	jnc	short gct_80		; carry clear, no shift needed
 26800                                  ;
 26801                                  ;	shr	al,1			; we want high nibble, shift it down
 26802                                  ;	shr	al,1
 26803                                  ;	shr	al,1
 26804                                  ;	shr	al,1
 26805                                  ;
 26806                                  ;gct_80:
 26807                                  ;	and	al,0Fh			; clear the unused nibble
 26808                                  ;	retn
 26809                                  ;
 26810                                  ;gct_90:
 26811                                  ;	mov	al,0Fh			; set all flags
 26812                                  ;	retn
 26813                                  
 26814                                  ;----------------------------------------------------------------------------
 26815                                  ;
 26816                                  ; Procedure : PATHCHRCMP
 26817                                  ;
 26818                                  ;----------------------------------------------------------------------------
 26819                                  
 26820                                  PATHCHRCMP:
 26821 0000592D 3C2F                    	CMP	AL,'/'
 26822 0000592F 7606                    	JBE	short PathRet
 26823 00005931 3C5C                    	CMP	AL,'\'
 26824 00005933 C3                      	retn
 26825                                  GotFor:
 26826 00005934 B05C                    	MOV	AL,'\'
 26827 00005936 C3                      	retn
 26828                                  PathRet:
 26829 00005937 74FB                    	JZ	short GotFor
 26830 00005939 C3                      	retn
 26831                                  
 26832                                  ;============================================================================
 26833                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 26834                                  ;============================================================================
 26835                                  ; 30/07/2018 - Retro DOS v3.0
 26836                                  
 26837                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 26838                                  
 26839                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 26840                                  
 26841                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 26842                                  ;	NAME	IBMCTRLC
 26843                                  
 26844                                  ;**	Low level routines for detecting special characters on CON input,
 26845                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 26846                                  ;	process termination code, and the INT 0 divide overflow handler.
 26847                                  ;
 26848                                  ;	FATAL
 26849                                  ;	FATAL1
 26850                                  ;	reset_environment
 26851                                  ;	DSKSTATCHK
 26852                                  ;	SPOOLINT
 26853                                  ;	STATCHK
 26854                                  ;	CNTCHAND
 26855                                  ;	DIVOV
 26856                                  ;	CHARHARD
 26857                                  ;	HardErr
 26858                                  ;
 26859                                  ;	Revision history:
 26860                                  ;
 26861                                  ;	    AN000	version 4.0   Jan 1988
 26862                                  ;	    A002	PTM    -- dir >lpt3 hangs
 26863                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 26864                                  ;
 26865                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 26866                                  ;	      flags register. In order to return to user normally DOS used to
 26867                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 26868                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 26869                                  ;
 26870                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 26871                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 26872                                  ;	      charhard.
 26873                                  
 26874                                  
 26875                                  	; MSDOS 6.0
 26876                                  ;		public	LowInt23Addr		
 26877                                  ;LowInt23Addr	LABEL	DWORD
 26878                                  ;	DW	offset DOSDATA:LowInt23, 0
 26879                                  ;
 26880                                  ;		public	LowInt24Addr
 26881                                  ;LowInt24Addr	LABEL	DWORD
 26882                                  ;	DW	offset DOSDATA:LowInt24, 0
 26883                                  ;
 26884                                  ;		public	LowInt28Addr
 26885                                  ;LowInt28Addr	LABEL	DWORD
 26886                                  ;	DW	offset DOSDATA:LowInt28, 0
 26887                                  
 26888                                  ;Break	<Checks for ^C in CON I/O>
 26889                                  
 26890                                  ;---------------------------------------------------------------------------
 26891                                  ;
 26892                                  ; Procedure Name : DSKSTATCHK
 26893                                  ;
 26894                                  ; Check for ^C if only one level in
 26895                                  ;
 26896                                  ;---------------------------------------------------------------------------
 26897                                  
 26898                                          ;procedure   DSKSTATCHK,NEAR ; Check for ^C if only one level in
 26899                                  
 26900                                  DSKSTATCHK:        
 26901                                  	;CMP	BYTE [INDOS],1
 26902 0000593A 36803E[ED02]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 26903                                  	;retnz			; Do NOTHING
 26904 00005940 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 26905                                  
 26906 00005942 51                      	PUSH    CX
 26907 00005943 06                              PUSH    ES
 26908 00005944 53                              PUSH    BX
 26909 00005945 1E                              PUSH    DS
 26910 00005946 56                              PUSH    SI
 26911                                          
 26912                                  	;PUSH	CS
 26913                                          ;POP	ES
 26914                                          ;PUSH	CS
 26915                                          ;POP	DS
 26916                                  
 26917 00005947 8CD3                    	MOV	BX, SS		; SS is DOSDATA. ES:BX must be set up
 26918 00005949 8EC3                    	MOV	ES, BX		; for deviocall2
 26919 0000594B 8EDB                    	MOV	DS, BX
 26920                                  
 26921                                  	; 09/09/2018
 26922 0000594D C606[5E03]05                    MOV     BYTE [DSKSTCOM],DEVRDND
 26923 00005952 C606[5C03]0E                    MOV     BYTE [DSKSTCALL],DRDNDHL
 26924 00005957 C706[5F03]0000          	mov	word [DSKSTST],0
 26925                                  
 26926 0000595D BB[5C03]                        MOV     BX,DSKSTCALL
 26927 00005960 C536[3200]                      LDS     SI,[BCON]
 26928 00005964 E8CDF7                          CALL	DEVIOCALL2
 26929                                   	; 15/03/2018
 26930                                  	;test	word [ss:DSKSTST],200h
 26931                                          ;TEST	WORD [SS:DSKSTST],STBUI
 26932                                  	; 28/07/2019
 26933 00005967 36F606[6003]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 26934                                  	;JNZ	SHORT ZRET		; No characters available
 26935                                  	; 30/07/2018
 26936 0000596D 7408                    	jz	short _GotCh
 26937                                  ;ZRET:
 26938 0000596F 30C0                            XOR     AL,AL                   ; Set zero
 26939                                  RET36:
 26940 00005971 5E                              POP     SI
 26941 00005972 1F                              POP     DS
 26942 00005973 5B                              POP     BX
 26943 00005974 07                              POP     ES
 26944 00005975 59                              POP     CX
 26945                                  _RET37:
 26946 00005976 C3                              RETN
 26947                                  
 26948                                  _GotCh:
 26949 00005977 36A0[6903]                      MOV     AL,[SS:DSKCHRET]	; SS override
 26950                                  
 26951 0000597B 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 26952 0000597D 75F2                            JNZ     SHORT RET36
 26953 0000597F 36C606[5E03]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 26954 00005985 36C606[5C03]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 26955 0000598B 36880E[6903]                    MOV     [SS:DSKCHRET],CL
 26956                                  	; 09/09/2018
 26957 00005990 36C706[5F03]0000        	MOV	word [SS:DSKSTST],0
 26958 00005997 36C706[6E03]0100        	MOV	word [SS:DSKSTCNT],1
 26959 0000599E E893F7                  	CALL	DEVIOCALL2              ; Eat the ^C
 26960 000059A1 5E                              POP     SI
 26961 000059A2 1F                              POP     DS
 26962 000059A3 5B                              POP     BX                      ; Clean stack
 26963 000059A4 07                              POP     ES
 26964 000059A5 59                              POP     CX
 26965 000059A6 E9BF00                          JMP	CNTCHAND ; 10/08/2018
 26966                                  
 26967                                  NOSTOP:
 26968                                  	; MSDOS 6.0
 26969                                  	;CMP	AL,"P"-"@"
 26970                                  	;JNZ	short check_next
 26971                                  				    	; SS override
 26972                                  	;CMP	BYTE [SS:Scan_Flag],0	; ALT_Q ?
 26973                                  	;JZ	short INCHKJ		; no
 26974                                  	;retn
 26975                                  ;check_next:
 26976                                  	;;IF	NOT TOGLPRN
 26977                                  	;CMP	AL,"N"-"@"
 26978                                  	;JZ	short INCHKJ
 26979                                  	;;ENDIF
 26980                                  
 26981                                  	;CMP	AL,"C"-"@"
 26982                                  	;JZ	short INCHKJ
 26983                                  ;check_end:
 26984                                  	;retn
 26985                                  
 26986                                  	; MSDOS 3.3
 26987 000059A9 3C10                            CMP     AL,"P"-"@"  ; cmp al,16	
 26988 000059AB 7405                            JZ	short INCHKJ
 26989                                  
 26990                                  	; 15/04/2018
 26991                                          ;;IF	NOT TOGLPRN
 26992                                          ;CMP	AL,"N"-"@"
 26993                                          ;JZ	SHORT INCHKJ
 26994                                          ;;ENDIF
 26995                                  
 26996 000059AD 3C03                            CMP     AL,"C"-"@"  ; cmp al,3	
 26997 000059AF 7401                            JZ	short INCHKJ
 26998 000059B1 C3                      	RETN
 26999                                  
 27000                                  	; 08/09/2018
 27001                                  INCHKJ:	; 10/08/2018
 27002 000059B2 E98F00                  	JMP	INCHK
 27003                                  
 27004                                  ;----------------------------------------------------------------------------
 27005                                  ;
 27006                                  ; Procedure Name : SpoolInt
 27007                                  ;
 27008                                  ; SpoolInt - signal processes that the DOS is truly idle.  We are allowed to
 27009                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 27010                                  ; the middle of an INT 24.
 27011                                  ;
 27012                                  ;----------------------------------------------------------------------------
 27013                                  
 27014                                  SPOOLINT:
 27015 000059B5 9C                              PUSHF
 27016                                  	; 15/03/2018
 27017 000059B6 36803E[2203]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 27018 000059BC 7414                            JZ      SHORT POPFRET
 27019 000059BE 36803E[EC02]00                  CMP     BYTE [SS:ERRORMODE],0
 27020 000059C4 750C                            JNZ     SHORT POPFRET		;No spool ints in error mode
 27021                                  
 27022                                  	; 30/07/2018
 27023                                  
 27024                                  	; Note that we are going to allow an external program to issue system 
 27025                                  	; calls at this time.  We MUST preserve IdleInt across this.
 27026                                  
 27027                                  
 27028 000059C6 36FF36[2203]            	PUSH	WORD [SS:IDLEINT]
 27029                                   
 27030                                  	; MSDOS 6.0
 27031                                  	;cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 27032                                  	;jne	short do_low_int28	; Y: the int must be done from low mem
 27033                                  	;INT	int_spooler		; N: Execute user int 28 handler
 27034                                  	;jmp	short spool_ret_addr
 27035                                  
 27036                                  ;do_low_int28:
 27037                                  	;call	far [SS:LowInt28Addr]
 27038                                  
 27039                                  ;spool_ret_addr:
 27040                                  
 27041 000059CB CD28                            INT     int_spooler		; INT 28h
 27042                                  
 27043 000059CD 368F06[2203]            	POP	WORD [SS:IDLEINT]
 27044                                  
 27045                                  POPFRET:
 27046 000059D2 9D                              POPF
 27047                                  _RET18:  
 27048 000059D3 C3                      	RETN
 27049                                  
 27050                                  ;----------------------------------------------------------------------------
 27051                                  ;
 27052                                  ; Procedure Name : STATCHK
 27053                                  ;
 27054                                  ;----------------------------------------------------------------------------
 27055                                  
 27056                                  STATCHK:
 27057 000059D4 E863FF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 27058                                                                          ; input redirection
 27059 000059D7 53                              PUSH    BX
 27060 000059D8 31DB                            XOR     BX,BX
 27061 000059DA E8BBE7                          CALL	GET_IO_SFT
 27062 000059DD 5B                              POP     BX
 27063 000059DE 72F3                            JC      SHORT _RET18
 27064 000059E0 B401                            MOV     AH,1
 27065 000059E2 E8A2F5                          CALL	IOFUNC
 27066 000059E5 74CE                            JZ      SHORT SPOOLINT
 27067 000059E7 3C13                            CMP     AL,'S'-'@'
 27068 000059E9 75BE                            JNZ     SHORT NOSTOP
 27069                                  
 27070                                  	; MSDOS 6.0			; SS override
 27071                                  	;CMP	BYTE [SS:Scan_Flag],0	; AN000; ALT_R ?
 27072                                  	;JNZ	short check_end		; AN000; yes
 27073                                  
 27074 000059EB 30E4                            XOR     AH,AH
 27075 000059ED E897F5                          CALL	IOFUNC                  ; Eat Cntrl-S
 27076 000059F0 EB4B                            JMP     SHORT PAUSOSTRT
 27077                                  
 27078                                  PRINTOFF:
 27079                                  PRINTON:
 27080 000059F2 36F616[CA02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 27081                                  
 27082                                  	; 30/07/2018 - Retro DOS v3.0
 27083 000059F7 53                      	PUSH	BX
 27084 000059F8 BB0400                  	MOV	BX,4
 27085 000059FB E89AE7                  	call	GET_IO_SFT
 27086 000059FE 5B                      	POP	BX
 27087 000059FF 72D2                    	jc	short _RET18
 27088 00005A01 06                      	PUSH	ES
 27089 00005A02 57                      	PUSH	DI
 27090 00005A03 1E                      	PUSH	DS
 27091 00005A04 07                      	POP	ES
 27092 00005A05 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 27093                                  	;test	word [es:di+5],800h
 27094 00005A07 26F745050008            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 27095 00005A0D 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 27096                                  
 27097                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 27098                                  					; See if allowed
 27099 00005A0F 50                      	push	ax
 27100 00005A10 B82611                  	mov	ax, 1126h
 27101 00005A13 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 27102                                  			; Return: CF set on error, AX = error code
 27103                                  			; STACK unchanged
 27104 00005A15 58                      	pop	ax
 27105                                  
 27106 00005A16 730F                    	JNC	short NORM_PR 		; Echo is OK
 27107                                  
 27108                                  					; SS override
 27109 00005A18 36C606[CA02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 27110                                  
 27111                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 27112                                  
 27113 00005A1E 50                      	push    ax
 27114 00005A1F B82411                  	mov     ax,1124h
 27115 00005A22 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 27116                                  			; ES:DI -> SFT, SS = DOS CS
 27117 00005A24 58                      	pop     ax
 27118                                  
 27119 00005A25 EB10                    	JMP	SHORT RETP6
 27120                                  
 27121                                  NORM_PR:
 27122 00005A27 36803E[CA02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 27123 00005A2D 7505                    	JNZ	short PRNOPN
 27124 00005A2F E884F6                  	call	DEV_CLOSE_SFT
 27125 00005A32 EB03                    	JMP	SHORT RETP6
 27126                                  
 27127                                  PRNOPN:
 27128 00005A34 E878F6                  	call	DEV_OPEN_SFT
 27129                                  RETP6:
 27130 00005A37 5F                      	POP	DI
 27131 00005A38 07                      	POP	ES
 27132                                  
 27133                                  STATCHK_RETN:
 27134 00005A39 C3                              RETN
 27135                                  
 27136                                  PAUSOLP:
 27137 00005A3A E878FF                          CALL    SPOOLINT
 27138                                  PAUSOSTRT:
 27139 00005A3D B401                            MOV     AH,1
 27140 00005A3F E845F5                          CALL	IOFUNC
 27141 00005A42 74F6                            JZ      SHORT PAUSOLP
 27142                                  INCHK:
 27143 00005A44 53                              PUSH    BX
 27144 00005A45 31DB                            XOR     BX,BX
 27145 00005A47 E84EE7                          CALL	GET_IO_SFT
 27146 00005A4A 5B                              POP     BX
 27147 00005A4B 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 27148 00005A4D 30E4                            XOR     AH,AH
 27149 00005A4F E835F5                          CALL	IOFUNC
 27150                                  	; 30/07/2018
 27151                                  	; MSDOS 3.3
 27152 00005A52 3C10                            CMP     AL,'P'-'@' ;cmp al,16
 27153 00005A54 750E                            JNZ	SHORT NOPRINT
 27154                                  
 27155 00005A56 36803E[C10F]00          	cmp	byte [SS:SCAN_FLAG],0
 27156 00005A5C 7494                    	JZ	SHORT PRINTON	
 27157 00005A5E 36C606[C10F]00          	mov	byte [ss:SCAN_FLAG],0
 27158                                  
 27159                                  	; MSDOS 6.0
 27160                                  	;CMP	AL,"P"-"@"
 27161                                  	;;;;;  7/14/86	ALT_Q key fix
 27162                                  	;JZ	short PRINTON		; no! must be CTRL_P
 27163                                  
 27164                                  NOPRINT:	
 27165                                  	;IF	NOT TOGLPRN
 27166                                  	;CMP	AL,"N"-"@"
 27167                                  	;JZ	short PRINTOFF
 27168                                  	;ENDIF
 27169 00005A64 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 27170                                  	;retnz
 27171 00005A66 75D1                    	jnz	short STATCHK_RETN
 27172                                  
 27173                                  ;	!! NOTE: FALL THROUGH !!
 27174                                  
 27175                                  ;---------------------------------------------------------------------------
 27176                                  ;
 27177                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 27178                                  ;
 27179                                  ; "^C" and CR/LF is printed.  Then the user registers are restored and the
 27180                                  ; user CTRL-C handler is executed.  At this point the top of the stack has 1)
 27181                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 27182                                  ; processing to continue; 2) the original interrupt return address to the code
 27183                                  ; that performed the function call in the first place.	If the user CTRL-C
 27184                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 27185                                  ; (not IRET) with carry CLEAR.	If carry is SET then an terminate system call
 27186                                  ; is simulated.
 27187                                  ;
 27188                                  ;---------------------------------------------------------------------------
 27189                                  
 27190                                  CNTCHAND:
 27191                                  	; MSDOS 6.0			; SS override
 27192                                  					; AN002; from RAWOUT
 27193                                  	;TEST	word [SS:Dos34_Flag],CTRL_BREAK_FLAG  
 27194                                  	;JNZ	short around_deadlock 	; AN002;
 27195                                  
 27196 00005A68 B003                            MOV     AL,3			; Display "^C"
 27197 00005A6A E842CA                          CALL	BUFOUT
 27198 00005A6D E8E2C8                          CALL	CRLF
 27199                                  ;around_deadlock:
 27200 00005A70 16                              PUSH    SS
 27201 00005A71 1F                              POP     DS
 27202 00005A72 803E[2103]00                    CMP     BYTE [CONSWAP],0
 27203 00005A77 7403                            JZ      SHORT NOSWAP
 27204 00005A79 E835E4                          CALL	SWAPBACK
 27205                                  NOSWAP:
 27206 00005A7C FA                      	CLI				; Prepare to play with stack
 27207 00005A7D 8E16[4205]              	MOV	SS,[USER_SS]		; User stack now restored
 27208 00005A81 8B26[4005]              	MOV	SP,[USER_SP]
 27209 00005A85 E89BBB                          CALL	restore_world       ; User registers now restored
 27210                                  
 27211                                  	; 30/07/2018 - Retro DOS v3.0 
 27212                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 27213                                          ; 14/03/2018 - Retro DOS v2.0
 27214 00005A88 2EC606[ED02]00          	MOV     BYTE [CS:INDOS],0	
 27215 00005A8E 2EC606[EC02]00                  MOV     BYTE [CS:ERRORMODE],0
 27216 00005A94 2E8926[FE02]                    MOV     [CS:ConC_Spsave],SP
 27217 00005A99 F8                      	clc	;30/07/2018
 27218 00005A9A CD23                            INT     int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 27219                                  	;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 27220                                  			; Return: return via RETF 2 with CF set
 27221                                  			; DOS will abort program with errorlevel 0
 27222                                  			; else
 27223                                  			; interrupted DOS call continues
 27224                                  
 27225                                  	; 30/07/2018 
 27226                                  
 27227                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 27228                                  
 27229                                  ; The user has returned to us.	The circumstances we allow are:
 27230                                  ;
 27231                                  ;   IRET	We retry the operation by redispatching the system call
 27232                                  ;   CLC/RETF	POP the stack and retry
 27233                                  ;   ... 	Exit the current process with ^C exit
 27234                                  ;
 27235                                  ; User's may RETURN to us and leave interrupts on. 
 27236                                  ; Turn 'em off just to be sure
 27237                                  
 27238 00005A9C FA                      	CLI
 27239                                  
 27240 00005A9D 2EA3[0403]              	MOV	[CS:USER_IN_AX],ax	; save the AX
 27241 00005AA1 9C                      	PUSHF				; and the flags (maybe new call)
 27242 00005AA2 58                      	POP	AX
 27243                                  
 27244                                  ; See if the input stack is identical to the output stack
 27245                                  
 27246 00005AA3 2E3B26[FE02]                    CMP	SP,[CS:ConC_Spsave]
 27247 00005AA8 7507                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 27248                                  
 27249                                  ; Repeat the operation by redispatching the system call.
 27250                                  
 27251                                  ctrlc_repeat:
 27252 00005AAA 2EA1[0403]                      MOV     AX,[CS:USER_IN_AX]
 27253                                  	;transfer COMMAND           ; Repeat command otherwise
 27254                                  COMMANDJ:
 27255 00005AAE E937BA                  	JMP	COMMAND
 27256                                  
 27257                                  ; The current SP is NOT the same as the input SP. Presume that he 
 27258                                  ; RETF'd leaving some flags on the stack and examine the input
 27259                                  
 27260                                  ctrlc_try_new:
 27261 00005AB1 83C402                  	ADD	SP,2			; pop those flags
 27262                                  	;test	ax,1
 27263 00005AB4 A90100                  	TEST	AX,f_Carry		; did he return with carry?
 27264 00005AB7 74F1                    	JZ	short ctrlc_repeat	; no carry set, just retry
 27265                                  
 27266                                  	; Well...  time to abort the user.  
 27267                                  	; Signal a ^C exit and use the EXIT system call..
 27268                                  
 27269                                  ctrlc_abort:
 27270                                          ;MOV	AX,(EXIT SHL 8) + 0
 27271 00005AB9 B8004C                          MOV	AX, (EXIT*256) + 0  ; 4C00h
 27272 00005ABC 2EC606[1703]FF          	mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 27273                                          ;transfer COMMAND	    ; give up by faking $EXIT
 27274                                  	;JMP	SHORT COMMANDJ
 27275 00005AC2 E923BA                  	JMP	COMMAND
 27276                                  
 27277                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 27278                                  ;----------------------------------------------------------------------------
 27279                                  ;
 27280                                  ; Procedure Name : DIVOV
 27281                                  ;
 27282                                  ; Default handler for division overflow trap
 27283                                  ;
 27284                                  ;----------------------------------------------------------------------------
 27285                                  
 27286                                  DIVOV: 
 27287                                  	; 30/07/2018
 27288                                  	; 07/07/2018 - Retro DOS v3.0
 27289 00005AC5 BE[FA12]                	mov	si,DIVMES
 27290 00005AC8 2E8B1E[0D13]            	mov	bx,[cs:DivMesLen]
 27291 00005ACD 8CC8                    	mov     ax,cs
 27292 00005ACF 8ED0                    	mov	ss,ax
 27293 00005AD1 BC[3607]                	mov     sp,AUXSTACK
 27294 00005AD4 E80200                  	call	RealDivOv
 27295                                  	;call	_outmes ; MSDOS 6.0
 27296 00005AD7 EBE0                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 27297                                  
 27298                                  ; 30/07/2018
 27299                                  
 27300                                  ; MSDOS 6.0
 27301                                  ;---------------------------------------------------------------------------
 27302                                  ;
 27303                                  ; Procedure Name : OutMes
 27304                                  ;
 27305                                  ;
 27306                                  ; OutMes: perform message output
 27307                                  ; Inputs:   SS:SI points to message
 27308                                  ;	    BX has message length
 27309                                  ; Outputs:  message to BCON
 27310                                  ;
 27311                                  ;Actually, cs:si points to the message now. The segment address is filled in
 27312                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 27313                                  ;NB. This procedure is called only from DIVOV. -SR
 27314                                  ;
 27315                                  ;---------------------------------------------------------------------------
 27316                                  
 27317                                  ;MSDOS 3.3
 27318                                  ;---------------------------------------------------------------------------
 27319                                  ; RealDivOv: perform actual divide overflow stuff.
 27320                                  ; Inputs:   none
 27321                                  ; Outputs:  message to BCON
 27322                                  ;---------------------------------------------------------------------------
 27323                                  
 27324                                  	; 30/07/2018
 27325                                  	; MSDOS 6.0
 27326                                  ;_OUTMES:
 27327                                  	;MSDOS 3.3
 27328                                  RealDivOv:
 27329                                  	 
 27330                                  	; 07/07/2018 - Retro DOS v3.0
 27331                                          ;Context ES
 27332                                          ;push	ss ; 30/07/2018
 27333 00005AD9 0E                      	PUSH	CS			; get ES addressability
 27334 00005ADA 07                      	POP	ES
 27335                                          ;Context DS
 27336                                  	;push	ss ; 30/07/2018
 27337 00005ADB 0E                      	PUSH	CS			; get DS addressability
 27338 00005ADC 1F                      	POP	DS
 27339 00005ADD C606[5E03]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 27340 00005AE2 C606[5C03]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 27341 00005AE7 C706[5F03]0000                  MOV     WORD [DSKSTST],0
 27342                                  	; BX = [DivMesLen] = 19
 27343 00005AED 891E[6E03]                      MOV     [DSKSTCNT],BX
 27344 00005AF1 BB[5C03]                        MOV     BX,DSKSTCALL
 27345                                          ;MOV     [DSKCHRET+1],SI	; transfer address (need an EQU)
 27346                                  	; 08/09/2018
 27347 00005AF4 8936[6A03]              	mov	[DEVIOBUF_PTR],si
 27348                                  	; MSDOS 6.0
 27349                                  					; CS is used for string, fill in 
 27350                                  					; segment address 
 27351                                  	;MOV	[DskChRet+3],CS
 27352                                  
 27353 00005AF8 C536[3200]                      LDS     SI,[BCON]
 27354 00005AFC E835F6                          CALL	DEVIOCALL2
 27355                                  	; 14/03/2018
 27356                                          ;MOV     WORD [CS:DSKCHRET+1],DEVIOBUF
 27357                                  	; 08/09/2018
 27358 00005AFF 2EC706[6A03][8003]      	mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 27359 00005B06 2EC706[6E03]0100                MOV     WORD [CS:DSKSTCNT],1
 27360 00005B0D C3                              RETN
 27361                                  
 27362                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 27363                                  ;---------------------------------------------------------------------------
 27364                                  ;
 27365                                  ; Procedure Name : CHARHARD
 27366                                  ;
 27367                                  ;
 27368                                  ; Character device error handler
 27369                                  ; Same function as HARDERR
 27370                                  ;
 27371                                  ;---------------------------------------------------------------------------
 27372                                  
 27373                                  CHARHARD:
 27374                                  	; 30/07/2018
 27375                                  	; 08/07/2018 - Retro DOS v3.0
 27376                                  
 27377                                  	; MSDOS 6.0
 27378                                  ;		   			; M024 - start
 27379                                  ;	cmp	byte ptr [ERRORMODE], 0	; Q: are we in the middle of int 24
 27380                                  ;	jne	@f			; Y: allow fail
 27381                                  ;
 27382                                  ;	OR	AH, Allowed_RETRY	; assume ctrl p
 27383                                  ;
 27384                                  ;	test	byte ptr [PFLAG], -1	; Q: has ctrl p been pressed
 27385                                  ;	jnz	ctrlp			; Y: 
 27386                                  ;@@:					; M024 - end
 27387                                  
 27388                                  ; Character device error handler
 27389                                  ; Same function as HARDERR
 27390                                  
 27391                                  	;or	ah,38h
 27392 00005B0E 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 27393                                  ;ctrlp:			; SS override for Allowed and EXITHOLD
 27394 00005B11 368826[1503]            	mov	[SS:ALLOWED],ah
 27395                                  
 27396                                  	; 15/03/2018
 27397 00005B16 368C06[3E05]                    MOV     [SS:EXITHOLD+2],ES
 27398 00005B1B 36892E[3C05]                    MOV     [SS:EXITHOLD],BP
 27399 00005B20 56                              PUSH    SI
 27400                                  	;and	di,0FFh
 27401 00005B21 81E7FF00                        AND     DI,STECODE
 27402 00005B25 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 27403 00005B27 E86400                          CALL    FATALC
 27404 00005B2A 5E                              POP     SI
 27405                                  	;return
 27406 00005B2B C3                              RETN
 27407                                  
 27408                                  ;---------------------------------------------------------------------------
 27409                                  ;
 27410                                  ; Procedure Name : HardErr
 27411                                  ;
 27412                                  ; Hard disk error handler. Entry conditions:
 27413                                  ;	DS:BX = Original disk transfer address
 27414                                  ;	DX = Original logical sector number
 27415                                  ;	CX = Number of sectors to go (first one gave the error)
 27416                                  ;	AX = Hardware error code
 27417                                  ;	DI = Original sector transfer count	
 27418                                  ;	ES:BP = Base of drive parameters
 27419                                  ;	[READOP] = 0 for read, 1 for write
 27420                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 27421                                  ; Output:
 27422                                  ;	[FAILERR] will be set if user responded FAIL
 27423                                  ;
 27424                                  ;--------------------------------------------------------------------------
 27425                                  
 27426                                  HARDERR:
 27427                                  	; 30/07/2018
 27428                                  	; 08/07/2018 - Retro DOS v3.0
 27429 00005B2C 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 27430                                          ;and	di,0FFh
 27431 00005B2D 81E7FF00                	AND     DI,STECODE              ; And off status bits
 27432                                          ;CMP	DI,WRECODE		; Write Protect Error?
 27433                                  	;cmp	di,0
 27434 00005B31 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 27435 00005B34 750A                            JNZ     short NOSETWRPERR
 27436 00005B36 50                              PUSH    AX
 27437                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 27438                                          ;MOV	AL,[ES:BP+0]
 27439 00005B37 268A4600                	mov	al,[ES:BP]
 27440                                          	; 15/03/2018
 27441 00005B3B 36A2[EE02]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 27442 00005B3F 58                              POP     AX
 27443                                  NOSETWRPERR:
 27444 00005B40 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 27445 00005B42 01C2                            ADD     DX,AX                   ; First sector number to retry
 27446 00005B44 52                              PUSH    DX
 27447                                  	; 08/07/2018
 27448                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 27449 00005B45 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 27450 00005B49 5A                              POP     DX
 27451 00005B4A 01C3                            ADD     BX,AX                   ; First address for retry
 27452 00005B4C 30E4                            XOR     AH,AH                   ; Flag disk section in error
 27453                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 27454 00005B4E 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 27455 00005B52 721A                            JB      SHORT ERRINT
 27456 00005B54 FEC4                            INC     AH                      ; Flag for FAT
 27457                                          ;CMP	DX,[ES:BP+10H] 		; In FAT?
 27458 00005B56 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]   
 27459 00005B5A 7308                    	JAE	short TESTDIR 		; No
 27460                                  		 ; Err in FAT must force recomp of freespace
 27461                                  	;mov	word[ES:BP+1Eh],-1
 27462 00005B5C 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 27463 00005B62 EB0A                    	JMP	SHORT ERRINT
 27464                                  TESTDIR:
 27465 00005B64 FEC4                            INC     AH
 27466                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 27467 00005B66 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 27468 00005B6A 7202                            JB      SHORT ERRINT
 27469 00005B6C FEC4                            INC     AH                      ; Must be in data area
 27470                                  ERRINT:
 27471 00005B6E D0E4                            SHL     AH,1                    ; Make room for read/write bit
 27472 00005B70 360A26[3205]                    OR      AH,[SS:READOP] ; 15/03/2018
 27473                                  
 27474                                  	; 15/08/2018
 27475                                  					; SS override for allowed and EXITHOLD
 27476 00005B75 360A26[1503]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 27477                                  
 27478                                          ;entry   FATAL
 27479                                  FATAL:
 27480                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 27481                                          ;MOV	AL,[ES:BP+0]		; Get drive number
 27482 00005B7A 268A4600                	MOV	AL,[ES:BP]        
 27483                                  
 27484                                  	;entry   FATAL1
 27485                                  FATAL1:  
 27486                                  	; 15/03/2018      
 27487 00005B7E 368C06[3E05]            	MOV     [SS:EXITHOLD+2],ES
 27488 00005B83 36892E[3C05]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 27489                                  	;LES	SI,[ES:BP+12H]
 27490 00005B88 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 27491 00005B8C 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 27492                                  
 27493                                  	; DI has the INT-24-style extended error. We now map the error code 
 27494                                  	; for this into the normalized get extended error set by using the 
 27495                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 27496                                  	; the device returned codes and leave all others beyond the look up 
 27497                                  	; table alone.
 27498                                  
 27499                                  	; 08/07/2018 - Retro DOS v3.0
 27500                                  FATALC:
 27501 00005B8E E86701                  	call	SET_I24_EXTENDED_ERROR
 27502                                  	;cmp	di,0Ch
 27503 00005B91 83FF0C                  	CMP	DI,error_I24_gen_failure
 27504 00005B94 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 27505 00005B96 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 27506                                  					;  Only come via GetExtendedError
 27507                                  ;**
 27508                                  ;
 27509                                  ; Entry point used by REDIRector on Network I 24 errors.
 27510                                  ;
 27511                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 27512                                  ;
 27513                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 27514                                  ;     EXITHOLD set for restore of ES:BP.
 27515                                  ;
 27516                                  	;entry	NET_I24_ENTRY
 27517                                  NET_I24_ENTRY:
 27518                                  GOT_RIGHT_CODE:
 27519 00005B99 36803E[EC02]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 27520 00005B9F 7404                            JZ	SHORT NoSetFail
 27521 00005BA1 B003                    	MOV	AL,3
 27522 00005BA3 EB51                    	JMP	short FailRet
 27523                                  NoSetFail:
 27524 00005BA5 368926[4405]                    MOV     [SS:CONTSTK],SP		; SS override
 27525 00005BAA 16                              PUSH	SS
 27526 00005BAB 07                              POP	ES
 27527                                      
 27528                                  	; Wango!!! We may need to free some user state info... In 
 27529                                  	; particular, we may have locked down a JFN for a user and he may 
 27530                                  	; NEVER return to us. Thus,we need to free it here and then 
 27531                                  	; reallocate it when we come back.
 27532                                  
 27533 00005BAC 36833E[6605]FF          	CMP	word [SS:SFN],-1
 27534 00005BB2 740C                    	JZ	short _NoFree
 27535 00005BB4 1E                      	push	ds
 27536 00005BB5 56                      	push	si
 27537 00005BB6 36C536[6A05]            	LDS	SI,[SS:PJFN]
 27538 00005BBB C604FF                  	MOV	BYTE [SI],0FFH
 27539 00005BBE 5E                      	pop	si
 27540 00005BBF 1F                      	pop	ds
 27541                                  
 27542                                  _NoFree:
 27543 00005BC0 FA                      	CLI
 27544                                  					; Prepare to play with stack
 27545 00005BC1 36FE06[EC02]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 27546 00005BC6 36FE0E[ED02]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 27547 00005BCB 368E16[4205]                    MOV     SS,[SS:USER_SS]
 27548 00005BD0 268B26[4005]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 27549                                  	;int	24h	
 27550 00005BD5 CD24                            INT     int_fatal_abort         ; Fatal error interrupt vector, must preserve ES
 27551 00005BD7 268926[4005]                    MOV     [ES:USER_SP],SP         ; restore our stack
 27552 00005BDC 268C16[4205]                    MOV     [ES:USER_SS],SS
 27553 00005BE1 8CC5                            MOV     BP,ES
 27554 00005BE3 8ED5                            MOV     SS,BP
 27555 00005BE5 368B26[4405]                    MOV     SP,[SS:CONTSTK]
 27556 00005BEA 36FE06[ED02]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 27557 00005BEF 36C606[EC02]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 27558 00005BF5 FB                              STI
 27559                                  FailRet:
 27560 00005BF6 36C42E[3C05]                    LES     BP,[SS:EXITHOLD]
 27561                                  	
 27562                                  	; 08/07/2018
 27563                                  
 27564                                  	; Triage the user's reply.
 27565                                  
 27566 00005BFB 3C01                    	CMP	AL,1
 27567 00005BFD 7235                    	JB	short CheckIgnore	; 0 => ignore
 27568 00005BFF 743D                    	JZ	short CheckRetry	; 1 => retry
 27569 00005C01 3C03                    	CMP	AL,3			; 3 => fail
 27570 00005C03 7543                    	JNZ	short DoAbort 		; 2, invalid => abort
 27571                                  
 27572                                  	; The reply was fail.  See if we are allowed to fail.
 27573                                  
 27574                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 27575                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 27576                                  	;test	byte [ss:ALLOWED],8
 27577 00005C05 36F606[1503]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 27578 00005C0B 743B                    	jz	short DoAbort	; No, do abort
 27579                                  DoFail:
 27580 00005C0D B003                    	MOV	AL,3		; just in case...
 27581                                  				; AN000;EO. I24 error disabled
 27582                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 27583                                  	;test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 27584                                  	;jnz	short Cleanup 		; AN000;EO. no
 27585                                  	
 27586 00005C0F 36FE06[1403]            	inc	byte [SS:FAILERR]	; Tell everybody
 27587                                  
 27588                                  CleanUp:
 27589 00005C14 36C606[EE02]FF          	MOV	byte [SS:WPERR],-1
 27590 00005C1A 36833E[6605]FF          	CMP	word [SS:SFN],-1
 27591                                  	;jnz	short CleanUp2
 27592                                  	;retn
 27593 00005C20 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 27594                                  ;CleanUp2:
 27595 00005C22 1E                      	push	ds
 27596 00005C23 56                      	push	si
 27597 00005C24 50                      	push	ax
 27598 00005C25 36A1[6605]              	MOV	AX,[ss:SFN]
 27599 00005C29 36C536[6A05]            	LDS	SI,[ss:PJFN]
 27600 00005C2E 8804                    	MOV	[SI],AL
 27601 00005C30 58                      	pop	ax
 27602 00005C31 5E                      	pop	si
 27603 00005C32 1F                      	pop	ds
 27604                                  Cleanup_retn:
 27605 00005C33 C3                      	retn
 27606                                  
 27607                                  	; The reply was IGNORE. See if we are allowed to ignore.
 27608                                  
 27609                                  CheckIgnore:
 27610                                  	;test	byte [ss:ALLOWED],20h
 27611 00005C34 36F606[1503]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 27612 00005C3A 74D1                    	jz	short DoFail			 ; No, do fail
 27613 00005C3C EBD6                    	jmp	short CleanUp
 27614                                  
 27615                                  	; The reply was RETRY. See if we are allowed to retry.
 27616                                  
 27617                                  CheckRetry:
 27618                                  	;test	byte [ss:ALLOWED],10h
 27619 00005C3E 36F606[1503]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 27620 00005C44 74C7                    	jz	short DoFail			; No, do fail
 27621 00005C46 EBCC                    	JMP	short CleanUp
 27622                                  
 27623                                  	; The reply was ABORT.
 27624                                  
 27625                                  DoAbort:
 27626 00005C48 16                      	push	ss
 27627 00005C49 1F                      	pop	ds
 27628                                  
 27629 00005C4A 803E[2103]00            	CMP	byte [CONSWAP],0
 27630 00005C4F 7403                    	JZ	short NOSWAP2
 27631 00005C51 E85DE2                  	call	SWAPBACK
 27632                                  NOSWAP2:
 27633                                  	; See if we are to truly abort. If we are in the process of aborting, 
 27634                                  	; turn this abort into a fail.
 27635                                  
 27636                                  	;test	byte [fAborting],0FFh
 27637                                  	;jnz	short DoFail
 27638                                  
 27639 00005C54 803E[2303]00            	cmp	byte [fAborting],0
 27640 00005C59 75B2                    	JNZ	short DoFail
 27641                                  
 27642                                  	; Set return code
 27643                                  
 27644 00005C5B C606[3905]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR
 27645 00005C60 30C0                    	XOR	AL,AL
 27646                                  
 27647                                  	; we are truly aborting the process. Go restore information from 
 27648                                  	; the PDB as necessary.
 27649                                  
 27650 00005C62 E9A00B                  	jmp	exit_inner
 27651                                  
 27652                                  ;**
 27653                                  ;
 27654                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 27655                                  ; different, then an old-style return is performed. If they are the same,
 27656                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 27657                                  ; the source of the terminate addresses.
 27658                                  ;
 27659                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 27660                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 27661                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 27662                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 27663                                  ; flag that will indicate that if any abort code is seen, we just continue the
 27664                                  ; operation. In essence, we dis-allow the abort response.
 27665                                  ;
 27666                                  ; output:   none.
 27667                                  ;
 27668                                  	;entry	reset_environment
 27669                                  	
 27670                                  reset_environment:
 27671                                  	; 30/07/2018 - Retro DOS v3.0
 27672                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 27673                                  
 27674                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 27675                                  
 27676 00005C65 1E                      	PUSH	DS			; save PDB of process
 27677                                  
 27678                                  	; There are no critical sections in force. Although we may enter 
 27679                                  	; here with critical sections locked down, they are no longer 
 27680                                  	; relevant. We may safely free all allocated resources.
 27681                                  
 27682 00005C66 B482                    	MOV	AH,82h
 27683                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 27684                                  	;int	2Ah 	
 27685 00005C68 CD2A                    	INT	int_IBM
 27686                                  
 27687                                  					; SS override
 27688 00005C6A 36C606[2303]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 27689                                  
 27690                                  					; DOS 4.00 doesn't need it
 27691                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 27692                                  					; Allow REDIR to clear some stuff
 27693                                  					; On process exit.
 27694 00005C70 B82211                  	mov     ax, 1122h
 27695 00005C73 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 27696                                  			; SS = DOS CS
 27697                                  	;mov	al,22h	
 27698 00005C75 B022                    	MOV	AL,int_terminate
 27699 00005C77 E884C0                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 27700                                  
 27701 00005C7A 59                      	POP	CX			; get ThisPDB
 27702 00005C7B 06                      	push	es
 27703 00005C7C 53                      	push	bx			; save return address
 27704                                  
 27705 00005C7D 368B1E[FC02]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 27706 00005C82 8EDB                    	MOV	DS,BX
 27707 00005C84 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 27708                                  
 27709                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 27710                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 27711                                  	; is not Exit_keep_process
 27712                                  	
 27713 00005C87 39D8                    	CMP	AX,BX
 27714 00005C89 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 27715 00005C8B 39CB                    	CMP	BX,CX
 27716 00005C8D 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 27717 00005C8F 50                      	PUSH	AX			; save parent
 27718                                  
 27719                                  					; SS override
 27720                                  	;cmp	byte [SS:EXIT_TYPE],3
 27721 00005C90 36803E[3905]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 27722 00005C96 7406                    	JZ	short reset_to_parent 	; keeping this process
 27723                                  
 27724                                  	; We are truly removing a process. Free all allocation blocks 
 27725                                  	; belonging to this PDB
 27726                                  
 27727                                  	;invoke	arena_free_process
 27728 00005C98 E8A10B                  	call	arena_free_process
 27729                                  
 27730                                  	; Kill off remainder of this process. Close file handles and signal 
 27731                                  	; to relevant network folks that this process is dead. Remember that 
 27732                                  	; CurrentPDB is STILL the current process!
 27733                                  
 27734                                  	;invoke	DOS_ABORT
 27735 00005C9B E828DE                  	call	DOS_ABORT
 27736                                  
 27737                                  reset_to_parent:
 27738                                  					; SS override
 27739 00005C9E 368F06[FC02]            	POP	word [SS:CurrentPDB]	; set up process as parent
 27740                                  
 27741                                  reset_return:				; come here for normal return
 27742                                  	;Context DS			; DS is used to refer to DOSDATA  
 27743 00005CA3 16                      	push	ss
 27744 00005CA4 1F                      	pop	ds	
 27745                                  
 27746 00005CA5 B0FF                    	MOV	AL,-1
 27747                                  
 27748                                  	; make sure that everything is clean In this case ignore any errors, 
 27749                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 27750                                  
 27751                                  	;EnterCrit critDisk
 27752 00005CA7 E865C4                  	call	EcritDisk
 27753                                  	;invoke	FLUSHBUF
 27754 00005CAA E8C305                  	call	FLUSHBUF
 27755                                  	;LeaveCrit critDisk
 27756 00005CAD E867C4                  	call	LcritDisk
 27757                                  
 27758                                  	; Decrement open ref. count if we had done a virtual open earlier.
 27759                                  
 27760 00005CB0 E88DF8                  	call	CHECK_VIRT_OPEN
 27761 00005CB3 FA                      	CLI
 27762 00005CB4 C606[ED02]00            	MOV	BYTE [INDOS],0		; Go to known state
 27763 00005CB9 C606[EE02]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 27764 00005CBE C606[2303]00            	MOV	byte [fAborting],0	; let aborts occur
 27765 00005CC3 8F06[3C05]              	POP	WORD [EXITHOLD]
 27766 00005CC7 8F06[3E05]              	POP	WORD [EXITHOLD+2]
 27767                                  
 27768                                  	; Snake into multitasking... Get stack from CurrentPDB person
 27769                                  
 27770 00005CCB 8E1E[FC02]              	MOV	DS,[CurrentPDB]
 27771 00005CCF 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 27772 00005CD3 8B262E00                	MOV	SP,[PDB.USER_STACK]
 27773                                  
 27774 00005CD7 E849B9                  	call	restore_world
 27775                                  
 27776                                  	; MSDOS 6.0
 27777                                  	;push	ax			; set up ds, but save ds in TEMPSEG 
 27778                                  	;mov	ax, ds			; and not on stack.
 27779                                  	;getdseg <ds>			; ds -> dosdata
 27780                                  	;mov	TempSeg, ax
 27781                                  	;pop	ax
 27782                                  					; set up ds to DOSDATA
 27783 00005CDA 2EA3[4005]              	MOV	[CS:USER_SP],AX
 27784                                  
 27785 00005CDE 58                      	POP	AX			; suck off CS:IP of interrupt...
 27786 00005CDF 58                      	POP	AX
 27787 00005CE0 58                      	POP	AX
 27788                                  
 27789                                  ; M011 : BEGIN
 27790                                  
 27791                                  	; MSDOS 3.3
 27792                                  ;	MOV	AX,0F202h	; STI
 27793                                  
 27794                                  	; MSDOS 6.0
 27795 00005CE1 9F                      	LAHF
 27796 00005CE2 86E0                    	XCHG	AH, AL
 27797 00005CE4 2402                    	AND	AL, 02
 27798 00005CE6 B4F2                    	MOV	AH, 0F2h
 27799                                  
 27800                                  ; M011 : END
 27801                                  
 27802                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27803 00005CE8 50                      	PUSH	AX
 27804                                   
 27805 00005CE9 2EFF36[3E05]            	PUSH	word [CS:EXITHOLD+2]
 27806 00005CEE 2EFF36[3C05]            	PUSH	word [CS:EXITHOLD]
 27807                                  
 27808 00005CF3 2EA1[4005]              	MOV	AX,[CS:USER_SP]
 27809                                  
 27810                                  	; MSDOS 6.0
 27811                                  	;mov	ds,TempSeg	; restore ds
 27812                                  
 27813 00005CF7 CF                      	IRET			; Long return back to user terminate address
 27814                                  
 27815                                  ;---------------------------------------------------------------------------
 27816                                  ;
 27817                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 27818                                  ;
 27819                                  ; This routine handles extended error codes.
 27820                                  ; Input : DI = error code from device
 27821                                  ; Output: All EXTERR fields are set
 27822                                  ;
 27823                                  ;--------------------------------------------------------------------------
 27824                                  
 27825                                  SET_I24_EXTENDED_ERROR:
 27826 00005CF8 50                      	PUSH	AX
 27827                                  					; ErrMap24End is in DOSDATA
 27828 00005CF9 B8[330E]                	MOV	AX,ErrMap24End
 27829 00005CFC 2D[230E]                	SUB	AX,ErrMap24
 27830                                  					; Change to dosdata to access 
 27831                                  					; ErrMap24 and EXTERR -SR
 27832                                  	; MSDOS 6.0
 27833                                  	;push	ds
 27834                                  	;getdseg <ds>			; ds ->dosdata
 27835                                  
 27836                                  	; AX is the index of the first unavailable error. Do not translate 
 27837                                  	; if greater or equal to AX.
 27838                                  
 27839 00005CFF 39C7                    	CMP	DI,AX
 27840 00005D01 89F8                    	MOV	AX,DI
 27841 00005D03 7307                    	JAE	short NoTrans
 27842                                  
 27843 00005D05 2E8A85[230E]            	MOV	AL,[CS:DI+ErrMap24]
 27844 00005D0A 30E4                    	XOR	AH,AH
 27845                                  NoTrans:
 27846 00005D0C 2EA3[F002]              	MOV	[CS:EXTERR],AX
 27847                                  	;pop	ds
 27848                                  	;assume	ds:nothing
 27849 00005D10 58                      	POP	AX
 27850                                  
 27851                                  	; Now Extended error is set correctly. Translate it to get correct 
 27852                                  	; error locus class and recommended action.
 27853                                  
 27854 00005D11 56                      	PUSH	SI
 27855                                  					; ERR_TABLE_24 is in DOSCODE 
 27856 00005D12 BE[D30D]                	MOV	SI,ERR_TABLE_24
 27857 00005D15 E8C6BA                  	call	CAL_LK			; Set other extended error fields
 27858 00005D18 5E                      	POP	SI
 27859 00005D19 C3                      	retn
 27860                                  
 27861                                  ;============================================================================
 27862                                  ; FAT.ASM, MSDOS 6.0, 1991
 27863                                  ;============================================================================
 27864                                  ; 30/07/2018 - Retro DOS v3.0
 27865                                  
 27866                                  ;	TITLE	FAT - FAT maintenance routines
 27867                                  ;	NAME	FAT
 27868                                  
 27869                                  ;**	FAT.ASM
 27870                                  ;
 27871                                  ;	Low level local device routines for performing disk change sequence,
 27872                                  ;	setting cluster validity, and manipulating the FAT
 27873                                  ;
 27874                                  ;	IsEof
 27875                                  ;	UNPACK
 27876                                  ;	PACK
 27877                                  ;	MAPCLUSTER
 27878                                  ;	FATREAD_SFT
 27879                                  ;	FATREAD_CDS
 27880                                  ;	FAT_operation
 27881                                  ;
 27882                                  ;	Revision history:
 27883                                  ;
 27884                                  ;	  AN000  version Jan. 1988
 27885                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 27886                                  ;
 27887                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 27888                                  ;	       from CL0FATENTRY rather than disk.
 27889                                  ;
 27890                                  
 27891                                  ;Break <IsEOF - check the quantity in BX for EOF>
 27892                                  ;----------------------------------------------------------------------------
 27893                                  ;
 27894                                  ; Procedure Name : IsEOF
 27895                                  ;
 27896                                  ; IsEOF - check the fat value in BX for eof.
 27897                                  ;
 27898                                  ;   Inputs:	ES:BP point to DPB
 27899                                  ;		BX has fat value
 27900                                  ;   Outputs:	JAE eof
 27901                                  ;   Registers modified: none
 27902                                  ;
 27903                                  ;---------------------------------------------------------------------------
 27904                                  
 27905                                  IsEOF:
 27906                                  	;cmp	word [es:bp+0Dh],0FF6h
 27907 00005D1A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 27908 00005D20 730B                    	JAE	short EOF16			; yes, check for eof there
 27909                                  
 27910                                  ;J.K. 8/27/86
 27911                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 27912                                  ;of any media that has "F0"(Other) as a MediaByte.
 27913                                  ;Hopely, this does not create any side effect for those who may use any value
 27914                                  ;other than "FF8-FFF" as an EOF for their own file.
 27915                                  
 27916 00005D22 81FBF00F                	cmp	bx,0FF0h
 27917 00005D26 7404                    	je	short IsEOF_other
 27918                                  
 27919 00005D28 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 27920                                  IsEOF_other:
 27921 00005D2C C3                      	retn
 27922                                  EOF16:
 27923 00005D2D 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 27924 00005D30 C3                      	retn
 27925                                  
 27926                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 27927                                  ;---------------------------------------------------------------------------
 27928                                  ;
 27929                                  ; Procedur Name : UNPACK
 27930                                  ;
 27931                                  ; Inputs:
 27932                                  ;	BX = Cluster number (may be full 16-bit quantity)
 27933                                  ;	ES:BP = Base of drive parameters
 27934                                  ; Outputs:
 27935                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 27936                                  ;	Zero set means DI=0 (free cluster)
 27937                                  ;	Carry set means error (currently user FAILed to I 24)
 27938                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 27939                                  ;
 27940                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 27941                                  ;
 27942                                  ;----------------------------------------------------------------------------
 27943                                  
 27944                                  	; 25/07/2019 - Retro DOS v3.2
 27945                                  	; 20/05/2019 - Retro DOS v4.0
 27946                                  UNPACK:
 27947                                  	; MSDOS 6.0			; M014 - Start
 27948 00005D31 09DB                    	or	bx,bx			; Q: are we unpacking cluster 0
 27949 00005D33 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 27950 00005D35 8B3E[CB0F]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 27951 00005D39 09FF                    	or	di,di 			; return z if di=0
 27952 00005D3B C3                      	retn				; done
 27953                                  up_cont:				; M014 - End
 27954                                  	; MSDOS 3.3 & MSDOS 6.0
 27955                                  	;cmp	bx,[es:bp+0Dh]
 27956 00005D3C 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 27957 00005D40 7726                    	JA	short HURTFAT
 27958 00005D42 E8CA00                  	CALL	MAPCLUSTER
 27959 00005D45 721E                    	jc	short _DoContext
 27960 00005D47 8B3D                    	MOV	DI,[DI]
 27961 00005D49 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 27962 00005D4B 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 27963 00005D4F 81FEF60F                	CMP	SI,4096-10
 27964 00005D53 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 27965 00005D55 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 27966 00005D57 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 27967                                  High12:
 27968 00005D59 D1EF                    	SHR	DI,1
 27969 00005D5B D1EF                    	SHR	DI,1
 27970 00005D5D D1EF                    	SHR	DI,1
 27971 00005D5F D1EF                    	SHR	DI,1
 27972                                  Unpack12:
 27973 00005D61 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 27974                                  _DoContext:
 27975 00005D65 16                      	PUSH	SS
 27976 00005D66 1F                      	POP	DS
 27977 00005D67 C3                      	retn
 27978                                  HURTFAT:
 27979                                  	;;mov	word [es:bp+1Eh],0FFFFh
 27980                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 27981 00005D68 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 27982 00005D6E 50                      	PUSH	AX
 27983 00005D6F B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 27984                                  
 27985                                  ;hkn; SS override
 27986 00005D71 36C606[1503]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 27987                                  ;
 27988                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 27989                                  ;
 27990 00005D77 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 27991 00005D7A E8FDFD                  	call	FATAL
 27992 00005D7D 3C03                    	CMP	AL,3
 27993 00005D7F F8                      	CLC
 27994 00005D80 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 27995 00005D82 F9                      	STC				; User said FAIL
 27996                                  OKU_RET:
 27997 00005D83 58                      	POP	AX
 27998                                  hurtfat_retn:
 27999 00005D84 C3                      	retn
 28000                                  
 28001                                  ;Break	<PACK -- PACK FAT ENTRIES>
 28002                                  ;----------------------------------------------------------------------------
 28003                                  ;
 28004                                  ; Procedure Name : PACK
 28005                                  ;
 28006                                  ; Inputs:
 28007                                  ;	BX = Cluster number
 28008                                  ;	DX = Data
 28009                                  ;	ES:BP = Pointer to drive DPB
 28010                                  ; Outputs:
 28011                                  ;	The data is stored in the FAT at the given cluster.
 28012                                  ;	SI,DX,DI all destroyed
 28013                                  ;	Carry set means error (currently user FAILed to I 24)
 28014                                  ;	No other registers affected
 28015                                  ;
 28016                                  ; NOTE: if BX = 0 then data in DX is atored in CL0FATENTRY.
 28017                                  ;
 28018                                  ;---------------------------------------------------------------------------
 28019                                  
 28020                                  	; 24/07/2019 - Retro DOS v3.2
 28021                                  	; 20/05/2019 - Retro DOS v4.0
 28022                                  PACK:
 28023                                  	; MSDOS 6.0			; M014 - start
 28024 00005D85 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 28025 00005D87 7505                    	jnz	short p_cont		; N: proceed with normal pack
 28026 00005D89 8916[CB0F]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 28027 00005D8D C3                      	retn				; done
 28028                                  p_cont:					; M014 - end
 28029                                  	; MSDOS 3.3 & MSDOS 6.0
 28030 00005D8E E87E00                  	CALL	MAPCLUSTER
 28031 00005D91 72D2                    	JC	short _DoContext
 28032 00005D93 8B35                    	MOV	SI,[DI]
 28033 00005D95 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 28034 00005D97 51                      	PUSH	CX			; move data to upper 12 bits
 28035 00005D98 B104                    	MOV	CL,4
 28036 00005D9A D3E2                    	SHL	DX,CL
 28037 00005D9C 59                      	POP	CX
 28038 00005D9D 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 28039 00005DA0 EB14                    	JMP	SHORT PACKIN
 28040                                  ALIGNED:
 28041                                  	;cmp	word [es:bp+0Dh],0FF6h
 28042 00005DA2 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 28043 00005DA8 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 28044 00005DAA 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 28045 00005DAE 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 28046 00005DB2 EB02                    	JMP	SHORT PACKIN		; MZ go store
 28047                                  Pack16:
 28048 00005DB4 31F6                    	XOR	SI,SI			; MZ no original data
 28049                                  PACKIN:
 28050 00005DB6 09D6                    	OR	SI,DX
 28051 00005DB8 8935                    	MOV	[DI],SI
 28052                                  
 28053                                  ;hkn; SS override
 28054 00005DBA 36C536[9E05]            	LDS	SI,[SS:CURBUF]
 28055                                  	; MSDOS 6.0
 28056                                  	;TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 28057                                  					;LB. if already dirty		  ;AN000;
 28058                                  	;JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 28059                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 28060                                  	
 28061                                  	;or	byte [si+5],40h
 28062 00005DBF 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 28063                                  ;yesdirty11:				;LB.				  ;AN000;
 28064                                  ;hkn; SS override
 28065 00005DC3 36803E[3505]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 28066                                  ;hkn; SS is DOSDATA
 28067 00005DC9 16                      	push	ss
 28068 00005DCA 1F                      	pop	ds
 28069 00005DCB 74B7                    	jz	short hurtfat_retn	; Carry clear
 28070 00005DCD 50                      	PUSH	AX
 28071 00005DCE 53                      	PUSH	BX
 28072 00005DCF 51                      	PUSH	CX
 28073 00005DD0 A1[4A05]                	MOV	AX,[CLUSSAVE]
 28074 00005DD3 8E1E[A005]              	MOV	DS,[CURBUF+2]
 28075                                  	;;add	si,16 ; MSDOS 3.3
 28076                                  	;add	si,20 ; MSDOS 6.0
 28077 00005DD7 83C614                  	ADD	SI,BUFINSIZ
 28078 00005DDA 8824                    	MOV	[SI],AH
 28079                                  ;hkn; SS is DOSDATA
 28080                                  	;Context DS
 28081 00005DDC 16                      	push	ss
 28082 00005DDD 1F                      	pop	ds
 28083                                  	
 28084 00005DDE 50                      	PUSH	AX
 28085                                  	
 28086                                  	; MSDOS 6.0
 28087 00005DDF 8B16[4E05]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 28088 00005DE3 8916[B005]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 28089                                  
 28090                                  	; MSDOS 3.3 & MSDOS 6.0
 28091 00005DE7 8B16[4C05]              	MOV	DX,[CLUSSEC]
 28092 00005DEB BE0100                  	MOV	SI,1
 28093 00005DEE 30C0                    	XOR	AL,AL
 28094 00005DF0 E8B103                  	call	GETBUFFRB
 28095 00005DF3 58                      	POP	AX
 28096 00005DF4 7213                    	JC	short POPP_RET
 28097 00005DF6 C53E[9E05]              	LDS	DI,[CURBUF]
 28098                                  	; MSDOS 6.0
 28099                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 28100                                  	;				;LB. if already dirty		  ;AN000;
 28101                                  	;JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 28102                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 28103                                  	
 28104                                  	;or	byte [di+5],40h
 28105 00005DFA 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 28106                                  ;yesdirty12:
 28107                                  	;;add	di,16
 28108                                  	;add	di,20 ; MSDOS 6.0
 28109 00005DFE 83C714                  	ADD	DI,BUFINSIZ
 28110 00005E01 4F                      	DEC	DI
 28111                                  	;add	di,[es:bp+2]
 28112 00005E02 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 28113 00005E06 8805                    	MOV	[DI],AL
 28114 00005E08 F8                      	CLC
 28115                                  POPP_RET:
 28116 00005E09 16                      	PUSH	SS
 28117 00005E0A 1F                      	POP	DS
 28118 00005E0B 59                      	POP	CX
 28119 00005E0C 5B                      	POP	BX
 28120 00005E0D 58                      	POP	AX
 28121 00005E0E C3                      	retn
 28122                                  
 28123                                  ; 31/07/2018 - Retro DOS v3.0
 28124                                  
 28125                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 28126                                  ;---------------------------------------------------------------------------
 28127                                  ;
 28128                                  ; Procedure Name : MAPCLUSTER
 28129                                  ;
 28130                                  ; Inputs:
 28131                                  ;	ES:BP Points to DPB
 28132                                  ;	BX Is cluster number
 28133                                  ; Function:
 28134                                  ;	Get a pointer to the cluster
 28135                                  ; Outputs:
 28136                                  ;	DS:DI Points to contents of FAT for given cluster
 28137                                  ;	DS:SI Points to start of buffer
 28138                                  ;	Zero Not set if cluster data is in high 12 bits of word
 28139                                  ;	Zero set if cluster data is in low 12 or 16 bits
 28140                                  ;	Carry set if failed.
 28141                                  ; SI is destroyed.
 28142                                  ;
 28143                                  ;---------------------------------------------------------------------------
 28144                                  
 28145                                  	; 24/07/2019 - Retro DOS v3.2
 28146                                  	; 20/05/2019 - Retro DOS v4.0
 28147                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 28148                                  MAPCLUSTER:
 28149                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 28150 00005E0F C606[3505]00            	MOV	BYTE [CLUSSPLIT],0
 28151                                  	;SAVE	<AX,BX,CX,DX>
 28152 00005E14 50                      	push	ax
 28153 00005E15 53                      	push	bx
 28154 00005E16 51                      	push	cx
 28155 00005E17 52                      	push	dx
 28156 00005E18 89D8                    	MOV	AX,BX			; AX = BX
 28157 00005E1A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 28158 00005E20 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 28159 00005E22 D1E8                    	SHR	AX,1			; AX = BX/2
 28160                                  Map16:	
 28161                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 28162 00005E24 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 28163                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28164 00005E26 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 28165 00005E28 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 28166 00005E2A 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 28167                                  
 28168                                  ;IF FastDiv
 28169                                  ;
 28170                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 28171                                  ; case and apply a really fast algorithm to get the desired results
 28172                                  ;
 28173                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 28174                                  ; Fast method takes 39+20*4=119
 28175                                  ;
 28176                                  ; This saves a bunch.
 28177                                  ;
 28178 00005E2E 81F90002                	CMP	CX,512			; 4	Is this 512 byte sector?
 28179 00005E32 7510                    	jne	short _DoDiv		; 4     for no jump
 28180 00005E34 89C2                    	MOV	DX,AX			; 2	get set for remainder
 28181 00005E36 81E2FF01                	AND	DX,512-1		; 4	Form remainder
 28182 00005E3A 88E0                    	MOV	AL,AH			; 2     Quotient in formation in AL
 28183                                  	; MDOS 3.3
 28184                                  	;shr	al,1	
 28185                                  	; MDOS 6.0
 28186 00005E3C D1EF                    	shr	di,1			; 2
 28187 00005E3E D0D8                    	rcr	al,1			; 2
 28188                                  	; MDOS 3.3 (& MSDOS 6.0)
 28189 00005E40 30E4                    	xor	ah,ah			; 3
 28190 00005E42 EB04                    	jmp	short DivDone		; 16
 28191                                  _DoDiv:
 28192                                  ;ENDIF
 28193                                  	; MSDOS 3.3
 28194                                  	;xor	dx,dx
 28195                                  	; MSDOS 6.0
 28196 00005E44 89FA                    	mov	dx,di			; 2
 28197                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 28198 00005E46 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 28199                                  ;IF FastDiv
 28200                                  DivDone:
 28201                                  ;ENDIF
 28202                                  	;add	ax,[es:bp+6]
 28203 00005E48 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 28204 00005E4C 49                      	DEC	CX			; CX is sector size - 1
 28205                                  	;SAVE	<AX,DX,CX>
 28206 00005E4D 50                      	push	ax
 28207 00005E4E 52                      	push	dx
 28208 00005E4F 51                      	push	cx
 28209 00005E50 89C2                    	MOV	DX,AX
 28210                                  
 28211                                  	; MSDOS 6.0
 28212 00005E52 C706[B005]0000          	MOV	word [HIGH_SECTOR],0 	;F.C. >32mb  low sector #
 28213                                  	; MDOS 3.3 (& MSDOS 6.0)
 28214 00005E58 30C0                    	XOR	AL,AL
 28215 00005E5A BE0100                  	MOV	SI,1
 28216                                  	;invoke	GETBUFFRB
 28217 00005E5D E84403                  	call	GETBUFFRB
 28218                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 28219 00005E60 59                      	pop	cx
 28220 00005E61 58                      	pop	ax
 28221 00005E62 5A                      	pop	dx
 28222 00005E63 7257                    	JC	short MAP_POP
 28223                                  
 28224 00005E65 C536[9E05]              	LDS	SI,[CURBUF]
 28225                                  	;;lea	di,[si+16]
 28226                                  	;lea	di,[si+20] ; MSDOS 6.0
 28227 00005E69 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 28228 00005E6C 01C7                    	ADD	DI,AX
 28229 00005E6E 39C8                    	CMP	AX,CX
 28230 00005E70 7537                    	JNZ	short MAPRET
 28231 00005E72 8A05                    	MOV	AL,[DI]
 28232                                  	;Context DS		 	;hkn; SS is DOSDATA
 28233 00005E74 16                      	push	ss
 28234 00005E75 1F                      	pop	ds	
 28235 00005E76 FE06[3505]              	INC	BYTE [CLUSSPLIT]
 28236 00005E7A A2[4A05]                	MOV	[CLUSSAVE],AL
 28237 00005E7D 8916[4C05]              	MOV	[CLUSSEC],DX
 28238                                  	; MSDOS 6.0
 28239 00005E81 C706[4E05]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb		;AN000;
 28240 00005E87 42                      	INC	DX
 28241 00005E88 C706[B005]0000          	MOV	word [HIGH_SECTOR],0	;F.C. >32mb FAT sector <32mb ;AN000;
 28242                                  	; MDOS 3.3 (& MSDOS 6.0)
 28243 00005E8E 30C0                    	XOR	AL,AL
 28244 00005E90 BE0100                  	MOV	SI,1
 28245                                  	;invoke	GETBUFFRB
 28246 00005E93 E80E03                  	call	GETBUFFRB
 28247 00005E96 7224                    	JC	short MAP_POP
 28248 00005E98 C536[9E05]              	LDS	SI,[CURBUF]
 28249 00005E9C 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 28250 00005E9F 8A05                    	MOV	AL,[DI]
 28251                                  	;Context DS			;hkn; SS is DOSDATA
 28252 00005EA1 16                      	push	ss
 28253 00005EA2 1F                      	pop	ds
 28254 00005EA3 A2[4B05]                	MOV	[CLUSSAVE+1],AL
 28255                                  
 28256                                  ;hkn; CLUSSAVE is in DOSDATA
 28257 00005EA6 BF[4A05]                	MOV	DI,CLUSSAVE
 28258                                  MAPRET:
 28259                                  	;RESTORE <DX,CX,BX>
 28260 00005EA9 5A                      	pop	dx
 28261 00005EAA 59                      	pop	cx
 28262 00005EAB 5B                      	pop	bx
 28263 00005EAC 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 28264 00005EAE 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 28265 00005EB4 7302                    	JAE	short MapSet		; MZ no, set flags
 28266 00005EB6 89D8                    	MOV	AX,BX
 28267                                  MapSet:
 28268 00005EB8 A801                    	TEST	AL,1			; set zero flag if not on boundary
 28269                                  	;RESTORE <AX>
 28270 00005EBA 58                      	pop	ax
 28271 00005EBB C3                      	retn
 28272                                  
 28273                                  MAP_POP:
 28274                                  	;RESTORE <DX,CX,BX,AX>
 28275 00005EBC 5A                      	pop	dx
 28276 00005EBD 59                      	pop	cx
 28277 00005EBE 5B                      	pop	bx
 28278 00005EBF 58                      	pop	ax
 28279 00005EC0 C3                      	retn
 28280                                  
 28281                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 28282                                  ;----------------------------------------------------------------------------
 28283                                  ;
 28284                                  ; Procedure Name : FATREAD_SFT
 28285                                  ;
 28286                                  ; Inputs:
 28287                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 28288                                  ;		giving a NET SFT will produce system crashing results).
 28289                                  ;	DS DOSDATA
 28290                                  ; Function:
 28291                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 28292                                  ;	if disk changed.
 28293                                  ;	In other respects, same as FATREAD_CDS.
 28294                                  ;	(note ES:DI destroyed!)
 28295                                  ; Outputs:
 28296                                  ;	Carry set if error (currently user FAILed to I 24)
 28297                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 28298                                  ;	as far as invalidating curdir_ID is concerned.
 28299                                  ;	Since getting a true disk changed on this call is a screw up
 28300                                  ;	anyway, that's the way it goes.
 28301                                  ;
 28302                                  ;---------------------------------------------------------------------------
 28303                                  
 28304                                  FATREAD_SFT:
 28305 00005EC1 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 28306                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 28307 00005EC5 268A4600                	mov	AL,[ES:BP]
 28308 00005EC9 A2[3305]                	MOV	[THISDRV],AL
 28309 00005ECC E8C3B8                  	call	GOTDPB			;Set THISDPB
 28310 00005ECF E87A00                  	CALL	FAT_GOT_DPB
 28311                                  fatread_sft_retn:
 28312 00005ED2 C3                      	retn
 28313                                  
 28314                                  ;----------------------------------------------------------------------------
 28315                                  ;
 28316                                  ; Procedure Name : FATREAD_CDS
 28317                                  ;
 28318                                  ; Inputs:
 28319                                  ;	DS:DOSDATA
 28320                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 28321                                  ;		giving a NET or NUL CDS will produce system crashing results).
 28322                                  ; Function:
 28323                                  ;	If disk may have been changed, media is determined and buffers are
 28324                                  ;	flagged invalid. If not, no action is taken.
 28325                                  ; Outputs:
 28326                                  ;	ES:BP = Drive parameter block
 28327                                  ;	THISDPB = ES:BP
 28328                                  ;	THISDRV set
 28329                                  ;	Carry set if error (currently user FAILed to I 24)
 28330                                  ; DS preserved , all other registers destroyed
 28331                                  ;
 28332                                  ;---------------------------------------------------------------------------
 28333                                  
 28334                                  FATREAD_CDS:
 28335 00005ED3 06                      	PUSH	ES
 28336 00005ED4 57                      	PUSH	DI
 28337                                  	;les	bp,[es:di+45h]
 28338 00005ED5 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 28339                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 28340 00005ED9 268A4600                	mov	AL,[ES:BP]
 28341 00005EDD A2[3305]                	MOV	[THISDRV],AL
 28342 00005EE0 E8AFB8                  	call	GOTDPB			;Set THISDPB
 28343 00005EE3 E86600                  	CALL	FAT_GOT_DPB
 28344 00005EE6 5F                      	POP	DI			;Get back CDS pointer
 28345 00005EE7 07                      	POP	ES
 28346 00005EE8 72E8                    	jc	short fatread_sft_retn
 28347 00005EEA 7539                    	JNZ	short NO_CHANGE		;Media NOT changed
 28348                                  
 28349                                  ;	Media changed. We now need to find all CDS structures which use this
 28350                                  ;	DPB and invalidate their ID pointers.
 28351                                  
 28352                                  MED_CHANGE:
 28353 00005EEC 31C0                    	XOR	AX,AX
 28354 00005EEE 48                      	DEC	AX			; AX = -1
 28355 00005EEF 1E                      	PUSH	DS
 28356 00005EF0 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 28357 00005EF4 30ED                    	XOR	CH,CH			; CX is number of structures
 28358                                  	;lds	si,[es:di+45h]
 28359 00005EF6 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 28360                                  
 28361                                  ;hkn; SS override
 28362                                  
 28363                                  ;	Find all CDSs with this DevPtr
 28364                                  ;
 28365                                  ;	(ax) = -1
 28366                                  ;	(ds:si) = DevPtr
 28367                                  
 28368 00005EFA 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 28369                                  frcd20: 
 28370                                  	;test	word [es:di+43h],8000h
 28371 00005EFF 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 28372 00005F05 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 28373                                  
 28374                                  	; MSDOS 3.3
 28375                                  	;push	es
 28376                                  	;push	di
 28377                                  	;les	di,[es:di+45h]
 28378                                  	;;les	di,[ES:DI+curdir.devptr]
 28379                                  	;call	POINTCOMP
 28380                                  	;pop	di
 28381                                  	;pop	es
 28382                                  	;jnz	short frcd25
 28383                                  
 28384                                  	; MSDOS 6.0
 28385 00005F07 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 28386 00005F0B 7512                    	jne	short frcd25		; no match
 28387 00005F0D 8CDB                    	mov	bx,ds
 28388 00005F0F 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 28389 00005F13 750A                    	jne	short frcd25		; CDS not for this drive
 28390                                  
 28391                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28392                                  	;test	[es:di+49h],ax
 28393 00005F15 26854549                	test	[ES:DI+curdir.ID],AX
 28394 00005F19 7404                    	JZ	short frcd25		; If root (0), leave root
 28395                                  	;mov	[es:di+49h],ax
 28396 00005F1B 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 28397                                  frcd25:	
 28398                                  	;add	di,81 ; MSDOS 3.3
 28399                                  	;add	di,88 ; MSDOS 6.0
 28400 00005F1F 83C751                  	ADD	DI,curdir.size	; 81	; Point to next CDS
 28401 00005F22 E2DB                    	LOOP	frcd20
 28402 00005F24 1F                      	POP	DS
 28403                                  NO_CHANGE:
 28404 00005F25 C42E[4605]              	LES	BP,[THISDPB]
 28405 00005F29 F8                      	CLC
 28406 00005F2A C3                      	retn
 28407                                  
 28408                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 28409                                  ;----------------------------------------------------------------------------
 28410                                  ;
 28411                                  ; Procedure Name : FAT_operation
 28412                                  ;
 28413                                  ;----------------------------------------------------------------------------
 28414                                  FAT_operation:
 28415                                  	; 24/07/2019 - Retro DOS v3.2
 28416                                  	; 31/07/2018 - Retro DOS v3.0
 28417                                  FATERR:
 28418                                  	;mov	word [es:bp+1Eh],-1
 28419                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28420 00005F2B 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 28421                                  					; Err in FAT must force recomp of freespace
 28422                                  	;and	di,0FFh
 28423 00005F31 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 28424                                  	;mov	byte [ALLOWED],18h
 28425 00005F35 C606[1503]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 28426                                  	;mov	ah,1Ah
 28427 00005F3A B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 28428 00005F3C A0[3305]                	MOV	AL,[THISDRV]		; Tell which drive
 28429 00005F3F E83CFC                  	call	FATAL1
 28430 00005F42 C42E[4605]              	LES	BP,[THISDPB]
 28431 00005F46 3C03                    	CMP	AL,3
 28432 00005F48 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 28433 00005F4A F9                      	STC				; User said FAIL
 28434 00005F4B C3                      	retn
 28435                                  
 28436                                  FAT_GOT_DPB:
 28437                                  	;Context DS			;hkn; SS is DOSDATA
 28438 00005F4C 16                      	push	ss			
 28439 00005F4D 1F                      	pop	ds
 28440                                  	;mov	al,0Fh
 28441 00005F4E B00F                    	MOV	AL,DMEDHL
 28442                                  	;mov	al,[es:bp+1]
 28443 00005F50 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 28444 00005F54 A3[2403]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 28445 00005F57 C606[2603]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 28446 00005F5C C706[2703]0000          	MOV	word [DEVCALL_REQSTAT],0
 28447                                  	;;mov	al,[es:bp+16h]
 28448                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 28449 00005F62 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 28450 00005F66 A2[3103]                	MOV	[CALLMED],AL
 28451 00005F69 06                      	PUSH	ES
 28452 00005F6A 1E                      	PUSH	DS
 28453                                  
 28454                                  ;hkn; DEVCALL is in DOSDATA
 28455 00005F6B BB[2403]                	MOV	BX,DEVCALL
 28456                                  	;;lds	si,[es:bp+12h]
 28457                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 28458 00005F6E 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 28459 00005F72 07                      	POP	ES			; ES:BX Points to call header
 28460 00005F73 E8BEF1                  	call	DEVIOCALL2
 28461                                  	;Context DS		 	;hkn; SS is DOSDATA
 28462 00005F76 16                      	push	ss
 28463 00005F77 1F                      	pop	ds
 28464 00005F78 07                      	POP	ES			; Restore ES:BP
 28465 00005F79 8B3E[2703]              	MOV	DI,[DEVCALL_REQSTAT]
 28466                                  	;test	di,8000h
 28467                                  	;jnz	short FATERR
 28468 00005F7D 09FF                    	or	di,di
 28469 00005F7F 78AA                    	js	short FATERR		; have error
 28470 00005F81 30E4                    	XOR	AH,AH
 28471                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 28472                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 28473 00005F83 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 28474 00005F87 A0[3305]                	MOV	AL,[THISDRV]		; Use physical unit number
 28475                                  ; See if we had changed volume id by creating one on the diskette
 28476 00005F8A 3806[370A]              	cmp	[VOLCHNG_FLAG],AL
 28477 00005F8E 7508                    	jnz	short CHECK_BYT
 28478 00005F90 C606[370A]FF            	mov	byte [VOLCHNG_FLAG],-1
 28479 00005F95 E98800                  	jmp	GOGETBPB		; Need to get device driver to read in
 28480                                  					; new volume label.
 28481                                  CHECK_BYT:
 28482 00005F98 0A26[3203]              	OR	AH,[CALLRBYT]
 28483                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 28484                                  	;JMP	short NEWDSK
 28485 00005F9C 785D                    	js	short NEWDSK
 28486                                  CHECK_ZR:
 28487 00005F9E 743D                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 28488 00005FA0 F8                      	CLC
 28489 00005FA1 C3                      	retn				; If Media not changed (NZ)
 28490                                  
 28491                                  DISK_CHNG_ERR:
 28492 00005FA2 06                      	PUSH	ES
 28493 00005FA3 55                      	PUSH	BP
 28494                                  	;;les	bp,[es:bp+12h]
 28495                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 28496 00005FA4 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 28497                                  	;test	word [es:bp+4],800h
 28498 00005FA8 26F746040008            	TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 28499 00005FAE 5D                      	POP	BP
 28500 00005FAF 07                      	POP	ES
 28501 00005FB0 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 28502 00005FB2 1E                      	PUSH	DS			; Save buffer pointer for ignore
 28503 00005FB3 57                      	PUSH	DI
 28504 00005FB4 16                      	push	ss			;hkn; SS is DOSDATA
 28505 00005FB5 1F                      	pop	ds
 28506                                  	;mov	byte [ALLOWED],18h
 28507 00005FB6 C606[1503]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 28508 00005FBB 06                      	PUSH	ES
 28509 00005FBC C43E[3303]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 28510 00005FC0 8C06[F602]              	MOV	[EXTERRPT+2],ES
 28511 00005FC4 07                      	POP	ES
 28512 00005FC5 893E[F402]              	MOV	[EXTERRPT],DI
 28513                                  	;mov	ax,0Fh
 28514 00005FC9 B80F00                  	MOV	AX,error_I24_wrong_disk
 28515 00005FCC C606[3205]01            	MOV	byte [READOP],1		; Write
 28516                                  	;invoke	HARDERR
 28517 00005FD1 E858FB                  	call	HARDERR
 28518 00005FD4 5F                      	POP	DI			; Get back buffer for ignore
 28519 00005FD5 1F                      	POP	DS
 28520 00005FD6 3C03                    	CMP	AL,3
 28521                                  FAIL_OPJ2:
 28522 00005FD8 7416                    	JZ	short FAIL_OP
 28523 00005FDA E96FFF                  	JMP	FAT_GOT_DPB		; Retry
 28524                                  
 28525                                  CHKBUFFDIRT:
 28526                                  	; 24/07/2019 - Retro DOS v3.2
 28527                                  
 28528                                  	; MSDOS 6.0
 28529                                  	;cmp	word [DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 28530                                  	;je	short NEWDSK			; no, skip the check
 28531                                  	;call	GetCurHead			; get pointer to first buffer
 28532                                  
 28533                                  	; MSDOS 3.3
 28534 00005FDD C53E[3800]              	lds	di,[BUFFHEAD]
 28535                                  nbuffer:
 28536                                  	;cmp	al,[di+4]
 28537 00005FE1 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 28538 00005FE4 750E                    	jne	short lfnxt			; no, go for next buffer
 28539                                  	;test   byte [di+5],40h
 28540 00005FE6 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty ; is the buffer dirty ?
 28541 00005FEA 7408                    	jz	short lfnxt			; no, go for next buffer
 28542                                  	;Context DS
 28543 00005FEC 16                      	push	ss
 28544 00005FED 1F                      	pop	ds
 28545 00005FEE F8                      	clc
 28546 00005FEF C3                      	retn
 28547                                  
 28548                                  FAIL_OP:					; This label & code is here
 28549                                  	;Context DS				;  for reachability
 28550 00005FF0 16                      	push	ss
 28551 00005FF1 1F                      	pop	ds
 28552 00005FF2 F9                      	STC
 28553 00005FF3 C3                      	retn
 28554                                  
 28555                                  lfnxt:
 28556                                  	; 24/07/2019 - Retro DOS v3.2
 28557                                  	; 20/05/2019 - Retro DOS v4.0
 28558                                  	; 15/08/2018
 28559                                  	;mov	di,[di]
 28560                                  	;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 28561                                  	;
 28562 00005FF4 C53D                    	lds	di,[di]
 28563                                  	;
 28564                                  	; MSDOS 6.0
 28565                                  	;cmp	[FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 28566                                  	;jne	short nbuffer			; no, check this guy also
 28567                                  	; MSDOS 3.3
 28568 00005FF6 83FFFF                  	cmp	di,-1
 28569 00005FF9 75E6                    	jne	short nbuffer
 28570                                  
 28571                                  ; If no dirty buffers, assume Media changed
 28572                                  NEWDSK:
 28573                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 28574                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 28575 00005FFB 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 28576                                  	; MSDOS 6.0				;  recompute
 28577                                  	;call	GetCurHead
 28578                                  	; MSDOS 3.3
 28579 00006001 E8BE00                  	call	SETVISIT
 28580                                  nxbuffer:
 28581                                  	; MSDOS 3.3
 28582 00006004 804D0520                	or 	byte [di+5],20h
 28583                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28584                                  	;cmp	[di+4],al
 28585 00006008 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 28586 0000600B 750E                    	jne	short lfnxt2
 28587                                  	;test	byte [di+5],40h
 28588 0000600D F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 28589 00006011 758F                    	jnz	short DISK_CHNG_ERR
 28590                                  	;mov	word [di+4],20FFh
 28591 00006013 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 28592 00006018 E8D400                  	call	SCANPLACE
 28593                                  	; MSDOS 6.0
 28594                                  	;jmp	short skpbuff
 28595                                  ;lfnxt2:
 28596                                  	;;mov	di,[di+BUFFINFO.buf_next]
 28597                                  	;mov	di,[di]
 28598                                  ;skpbuff:
 28599                                  	;cmp	di,[FIRST_BUFF_ADDR]					;hkn;
 28600                                  	;jne	short nxbuffer
 28601                                  
 28602                                  	;CMP	word [SC_CACHE_COUNT],0	;LB.  look ahead buffers ?	;AN001;
 28603                                  	;JZ	short GOGETBPB		;LB.  no			;AN001;
 28604                                  	;CMP	AL,[CURSC_DRIVE]	;LB.  same as changed drive	;AN001;
 28605                                  	;JNZ	short GOGETBPB		;LB.  no			;AN001;
 28606                                  	;MOV	byte [CURSC_DRIVE],-1	;LB.  invalidate look ahead buffers ;AN000;
 28607                                  lfnxt2:
 28608                                  	; MSDOS 3.3
 28609 0000601B E8BD00                  	call	SKIPVISIT
 28610 0000601E 75E4                    	jnz	short nxbuffer
 28611                                  GOGETBPB:
 28612                                  	; MSDOS 3.3 & MSDOS 6.0
 28613                                  	;;lds	di,[es:bp+12h]
 28614                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0
 28615 00006020 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 28616                                  	; 20/05/2019
 28617                                  	;test	word [di+4],2000h
 28618                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 28619 00006024 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 28620 00006028 7510                    	JNZ	short GETFREEBUF
 28621                                  	;context DS	    		;hkn; SS is DOSDATA
 28622 0000602A 16                      	push	ss
 28623 0000602B 1F                      	pop	ds
 28624 0000602C BB0200                  	MOV	BX,2
 28625 0000602F E8FFFC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 28626                                  FAIL_OPJ:
 28627 00006032 72BC                    	JC	short FAIL_OP
 28628 00006034 C53E[9E05]              	LDS	DI,[CURBUF]
 28629 00006038 EB15                    	JMP	SHORT GOTGETBUF
 28630                                  
 28631                                  GETFREEBUF:
 28632                                  	; 24/07/2019 - Retro DOS v3.2
 28633 0000603A 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 28634 0000603B 55                      	PUSH	BP
 28635                                  	; MSDOS 3.3
 28636 0000603C 36C53E[3800]            	LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 28637                                  	; 25/07/2019
 28638                                  	; MSDOS 6.0
 28639 00006041 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 28640                                  ;hkn; SS override
 28641 00006043 368916[B005]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 28642                                  	;call	GETCURHEAD		;LB.			  ;AN000;
 28643                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28644 00006048 E87402                  	call	BUFWRITE
 28645 0000604B 5D                      	POP	BP
 28646 0000604C 07                      	POP	ES
 28647                                  	;JC	short FAIL_OPJ
 28648 0000604D 72A1                    	jc	short FAIL_OP
 28649                                  GOTGETBUF:
 28650                                  	;;add	di,16
 28651                                  	;add	di,20 ; MSDOS 6.0
 28652 0000604F 83C714                  	ADD	DI,BUFINSIZ
 28653                                  
 28654                                  ;hkn; SS override
 28655 00006052 368C1E[3403]            	MOV	[SS:CALLXAD+2],DS
 28656                                  	;Context DS			;hkn; SS is DOSDATA
 28657 00006057 16                      	push	ss
 28658 00006058 1F                      	pop	ds
 28659 00006059 893E[3203]              	MOV	[CALLXAD],DI
 28660                                  	;mov	al,16h
 28661 0000605D B016                    	MOV	AL,DBPBHL
 28662                                  	;mov	ah,[es:bp+1]
 28663 0000605F 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 28664 00006063 A3[2403]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 28665 00006066 C606[2603]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 28666 0000606B C706[2703]0000          	MOV	word [DEVCALL_REQSTAT],0
 28667                                  	;mov	al,[es:bp+16h]
 28668 00006071 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 28669 00006075 A2[3103]                	MOV	[CALLMED],AL
 28670 00006078 06                      	PUSH	ES
 28671 00006079 1E                      	PUSH	DS
 28672                                  	;;push	word [es:bp+14h]
 28673                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 28674 0000607A 26FF7615                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 28675                                  	;;push	word [es:bp+12h]
 28676                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 28677 0000607E 26FF7613                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 28678                                  
 28679                                  ;hkn; DEVCALL is in DOSDATA
 28680 00006082 BB[2403]                	MOV	BX,DEVCALL
 28681 00006085 5E                      	POP	SI
 28682 00006086 1F                      	POP	DS			; DS:SI Points to device header
 28683 00006087 07                      	POP	ES			; ES:BX Points to call header
 28684                                  	;invoke	DEVIOCALL2
 28685 00006088 E8A9F0                  	call	DEVIOCALL2
 28686 0000608B 07                      	POP	ES			; Restore ES:BP
 28687                                  	;Context DS
 28688 0000608C 16                      	push	ss		 	;hkn; SS is DOSDATA
 28689 0000608D 1F                      	pop	ds
 28690 0000608E 8B3E[2703]              	MOV	DI,[DEVCALL_REQSTAT]
 28691                                  	; MSDOS 3.3
 28692                                  	;test	di,8000h
 28693                                  	;jnz	short FATERRJ
 28694                                  	; MSDOS 6.0
 28695 00006092 09FF                    	or	di,di
 28696 00006094 7829                    	js	short FATERRJ 		; have error
 28697                                  	;;mov	al,[es:bp+16h]
 28698                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 28699 00006096 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 28700 0000609A C536[3603]              	LDS	SI,[CALLBPB]
 28701                                  	;;mov	word [es:bp+1Ch],0
 28702                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 28703 0000609E 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 28704                                  	;invoke	$SETDPB
 28705 000060A4 E879BD                  	call	_$SETDPB
 28706                                  
 28707                                  ;hkn; SS override
 28708 000060A7 36C53E[3203]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 28709                                  	;mov	al,[es:bp+8]
 28710 000060AC 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 28711                                  
 28712                                  	; 24/07/2019 - Retro DOS v3.2
 28713                                  
 28714                                  	; MSDOS 3.3
 28715                                  	;;mov	ah,[es:bp+0Fh]
 28716                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 28717                                  	;;mov	[DI-8],ax
 28718                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 28719                                  
 28720                                  	; MSDOS 6.0
 28721                                  	;mov	[di-0Ah],al
 28722 000060B0 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL  
 28723                                  					;>32mb	  ;AN000;
 28724                                  	;mov	ax,[es:bp+0Fh]
 28725 000060B3 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]	;>32mb
 28726                                  	;mov	[di-9h],ax			  ;AC000;
 28727 000060B7 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 28728                                  
 28729                                  	;Context DS			;hkn; SS is DOSDATA
 28730 000060BA 16                      	push	ss
 28731 000060BB 1F                      	pop	ds
 28732 000060BC 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 28733 000060BE C3                      	retn
 28734                                  
 28735                                  FATERRJ: 
 28736 000060BF E969FE                  	JMP	FATERR
 28737                                  
 28738                                  ;============================================================================
 28739                                  ; STDBUF.ASM
 28740                                  ;============================================================================
 28741                                  ; Retro DOS v2.0 - 12/03/2018
 28742                                  
 28743                                  ;
 28744                                  ; Standard buffer management for MSDOS
 28745                                  ;
 28746                                  
 28747                                  ;.xlist
 28748                                  ;.xcref
 28749                                  ;INCLUDE STDSW.ASM
 28750                                  ;.cref
 28751                                  ;.list
 28752                                  
 28753                                  ;TITLE	STDBUF - MSDOS buffer management
 28754                                  ;NAME	STDBUF
 28755                                  
 28756                                  ;INCLUDE BUF.ASM
 28757                                  
 28758                                  ;============================================================================
 28759                                  ; BUF.ASM
 28760                                  ;============================================================================
 28761                                  ; 31/07/2018 - Retro DOS v3.0
 28762                                  ; Retro DOS v2.0 - 12/03/2018
 28763                                  
 28764                                  ;
 28765                                  ; buffer management for MSDOS
 28766                                  ;
 28767                                  
 28768                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 28769                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 28770                                  
 28771                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 28772                                  
 28773                                  SETVISIT:
 28774                                  	; 31/07/2018 - Retro DOS v3.0
 28775                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 28776                                  ; Inputs:
 28777                                  ;       None
 28778                                  ; Function:
 28779                                  ;       Set up a scan of I/O buffers
 28780                                  ; Outputs:
 28781                                  ;       All visit flags = 0
 28782                                  ;               NOTE: This pre-scan is needed because a hard disk error
 28783                                  ;                     may cause a scan to stop in the middle leaving some
 28784                                  ;                     visit flags set, and some not set.
 28785                                  ;       DS:DI Points to [BUFFHEAD]
 28786                                  ; No other registers altered
 28787                                  
 28788 000060C2 36C53E[3800]                    LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 28789 000060C7 50                      	PUSH    AX
 28790                                          ;;XOR	AX,AX	  ;; MSDOS 2.11
 28791                                  	;mov	al,0DFh
 28792 000060C8 B0DF                    	mov	al,~buf_visit
 28793                                  SETLOOP:
 28794                                          ;;MOV	[DI+7],AL ;; MSDOS 2.11
 28795                                  	;and	[DI+5],al
 28796 000060CA 204505                  	AND	[DI+BUFFINFO.buf_flags],AL
 28797 000060CD C53D                            LDS     DI,[DI]
 28798 000060CF 83FFFF                          CMP     DI,-1
 28799 000060D2 75F6                            JNZ     SHORT SETLOOP
 28800 000060D4 58                              POP     AX ; 09/09/2018
 28801 000060D5 36C53E[3800]            	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 28802                                  SVISIT_RETN:
 28803 000060DA C3                              RETN
 28804                                  
 28805                                  SKIPVISIT:
 28806                                  	; 31/07/2018 - Retro DOS v3.0
 28807                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 28808                                  
 28809                                  ; Inputs:
 28810                                  ;       DS:DI Points to a buffer
 28811                                  ; Function:
 28812                                  ;       Skip visited buffers
 28813                                  ; Outputs:
 28814                                  ;       DS:DI Points to next unvisited buffer
 28815                                  ;       Zero is set if skip to LAST buffer
 28816                                  ; No other registers altered
 28817                                  
 28818 000060DB 83FFFF                          CMP     DI,-1
 28819                                          ;retz
 28820 000060DE 74FA                            JZ	SHORT SVISIT_RETN  ; zf = 1 
 28821                                  
 28822                                  	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 28823                                          ;;;retnz
 28824                                          ;;JNZ	SHORT SVISIT_RETN
 28825                                  
 28826                                  	;test	byte [di+5],20h
 28827 000060E0 F6450520                	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 28828 000060E4 7505                    	JNZ	short SKIPLOOP
 28829                                  	
 28830 000060E6 50                      	push	ax
 28831 000060E7 0C01                    	or	al,1
 28832 000060E9 58                      	pop	ax
 28833                                  		; zf = 0
 28834 000060EA C3                      	retn	
 28835                                  
 28836                                  SKIPLOOP:
 28837 000060EB C53D                    	LDS     DI,[DI]
 28838 000060ED EBEC                            JMP     SHORT SKIPVISIT
 28839                                  
 28840                                  ;============================================================================
 28841                                  ; BUF.ASM, MSDOS 6.0, 1991
 28842                                  ;============================================================================
 28843                                  ; 31/07/2018 - Retro DOS v3.0
 28844                                  
 28845                                  ;	TITLE	BUF - MSDOS buffer management
 28846                                  ;	NAME	BUF
 28847                                  
 28848                                  ;**	BUF.ASM - Low level routines for buffer cache management
 28849                                  ;
 28850                                  ;	GETCURHEAD
 28851                                  ;	ScanPlace
 28852                                  ;	PLACEBUF
 28853                                  ;	PLACEHEAD
 28854                                  ;	PointComp
 28855                                  ;	GETBUFFR
 28856                                  ;	GETBUFFRB
 28857                                  ;	FlushBuf
 28858                                  ;	BufWrite
 28859                                  ;	SET_RQ_SC_PARMS
 28860                                  ;
 28861                                  ;	Revision history:
 28862                                  ;
 28863                                  ;		AN000  version 4.00  Jan. 1988
 28864                                  ;		A004   PTM 3765 -- Disk reset failed
 28865                                  ;		M039 DB 10/17/90 - Disk write optimization
 28866                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 28867                                  
 28868                                  ;Break	<GETCURHEAD -- Get current buffer header>
 28869                                  ;----------------------------------------------------------------------------
 28870                                  ; Procedure Name : GetCurHead
 28871                                  ; Inputs:
 28872                                  ;	 No Inputs
 28873                                  ; Function:
 28874                                  ;	Returns the pointer to the first buffer in Queue
 28875                                  ;	and updates FIRST_BUFF_ADDR
 28876                                  ;       and invalidates LASTBUFFER (recency pointer)
 28877                                  ; Outputs:
 28878                                  ;	DS:DI = pointer to the first buffer in Queue
 28879                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 28880                                  ;       LASTBUFFER = -1
 28881                                  ; No other registers altered
 28882                                  ;----------------------------------------------------------------------------
 28883                                  
 28884                                  ;procedure   GETCURHEAD,NEAR
 28885                                  ;
 28886                                  ;	lds	di, BufferQueue		; Pointer to the first buffer;smr;SS Override
 28887                                  ;	mov	word ptr [LastBuffer],-1; invalidate last buffer;smr;SS Override
 28888                                  ;	mov	[FIRST_BUFF_ADDR],di	;save first buffer addr;smr;SS Override
 28889                                  ;	ret
 28890                                  ;
 28891                                  ;EndProc GETCURHEAD
 28892                                  
 28893                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 28894                                  ;----------------------------------------------------------------------------
 28895                                  ; Procedure Name : ScanPlace
 28896                                  ; Inputs:
 28897                                  ;	Same as PLACEBUF
 28898                                  ; Function:
 28899                                  ;	Save scan location and call PLACEBUF
 28900                                  ; Outputs:
 28901                                  ;	DS:DI Points to saved scan location
 28902                                  ; All registers, except DS:DI, preserved.
 28903                                  ;----------------------------------------------------------------------------
 28904                                  ;M039: Rewritten to preserve registers.
 28905                                  
 28906                                  SCANPLACE:
 28907                                  	; 31/07/2018 - Retro DOS v3.0
 28908                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 28909 000060EF 06                      	push	es
 28910 000060F0 C435                    	les	si,[di]
 28911                                  	;les	si,[DI+BUFFINFO.buf_link]
 28912 000060F2 E80600                  	call	PLACEBUF
 28913 000060F5 06                      	push	es
 28914 000060F6 1F                      	pop	ds
 28915 000060F7 89F7                    	mov	di,si
 28916 000060F9 07                      	pop	es
 28917                                  scanplace_retn:
 28918 000060FA C3                      	retn	
 28919                                  	
 28920                                  	; MSDOS 6.0
 28921                                  ;ScanPlace:
 28922                                  	;push	word [di+BUFFINFO.buf_next]	;Save scan location
 28923                                  	;call	PLACEBUF
 28924                                  	;pop	di
 28925                                  	;retn
 28926                                  
 28927                                  ;----------------------------------------------------------------------------
 28928                                  ; Procedure Name : PlaceBuf
 28929                                  ; Input:
 28930                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 28931                                  ; Function:
 28932                                  ;	Remove buffer from queue and re-insert it in proper place.
 28933                                  ; NO registers altered
 28934                                  ;----------------------------------------------------------------------------
 28935                                  
 28936                                  ;procedure   PLACEBUF,NEAR
 28937                                  
 28938                                  ;PLACEBUF:
 28939                                  	; 31/07/2018 - Retro DOS v3.0
 28940                                  
 28941                                  	; MSDOS 6.0
 28942                                  	;push	AX			;Save only regs we modify	;AN000;
 28943                                  	;push	BX							;AN000;
 28944                                  	;push	SI							;AN000;
 28945                                  	;mov	ax,[di].BUF_NEXT
 28946                                  	;mov	bx,word ptr[BufferQueue]	; bx = offset of head of list;smr;SS Override
 28947                                  	;
 28948                                  	;cmp	ax,bx				;Buf = last?		;AN000;
 28949                                  	;je	nret				;Yes, special case	;AN000;
 28950                                  	;cmp	di,bx				;Buf = first?		;AN000;
 28951                                  	;jne	not_first 			;Yes, special case	;AN000;
 28952                                  	;mov	word ptr [BufferQueue],ax	;smr;SS Override
 28953                                  	;jmp	short nret 			;Continue with repositioning;AN000;
 28954                                  ;not_first:
 28955                                  	;mov	SI,[DI].BUF_PREV		;No, SI = prior Buf	;AN000;
 28956                                  	;mov	[SI].BUF_NEXT,AX		; ax has di->buf_next	;AN000;
 28957                                  	;xchg	si, ax
 28958                                  	;mov	[SI].BUF_PREV,AX		;			;AN000;
 28959                                  	;
 28960                                  	;mov	SI,[BX].BUF_PREV		;SI-> last buffer	;AN000;
 28961                                  	;mov	[SI].BUF_NEXT,DI		;Add Buf to end of list ;AN000;
 28962                                  	;mov	[BX].BUF_PREV,DI					;AN000;
 28963                                  	;mov	[DI].BUF_PREV,SI		;Update link in Buf too	;AN000;
 28964                                  	;mov	[DI].BUF_NEXT,BX					;AN000;
 28965                                  ;nret:									;AN000;
 28966                                  	;pop	SI							;AN000;
 28967                                  	;pop	BX							;AN000;
 28968                                  	;pop	AX							;AN000;
 28969                                  	;								;AN000;
 28970                                  	;cmp	[di.buf_ID],-1			; Buffer FREE?		;AN000;
 28971                                          ;jne	pbx                             ; M039: -no, jump.
 28972                                  	;mov	WORD PTR [BufferQueue],di	; M039: -yes, make it LRU.
 28973                                  ;pbx:	
 28974                                  ;	ret								;AN000;
 28975                                  
 28976                                  	; 31/07/2018 - Retro DOS v3.0
 28977                                  
 28978                                  	; MSDOS 3.3
 28979                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 28980                                  
 28981                                  PLACEBUF:
 28982                                  	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 28983                                  	
 28984 000060FB E838B5                          CALL	save_world
 28985 000060FE C40D                            LES     CX,[DI]
 28986 00006100 83F9FF                          CMP     CX,-1           	; Buf is LAST?
 28987 00006103 744B                            JZ      SHORT NRET		; Buffer already last
 28988 00006105 8CC5                            MOV     BP,ES           	; Pointsave = Buf.nextbuf
 28989 00006107 1E                              PUSH    DS
 28990 00006108 07                              POP     ES              	; Buf is ES:DI
 28991                                  	; 15/03/2018
 28992 00006109 36C536[3800]                    LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 28993 0000610E E88200                          CALL    POINTCOMP       	; Buf == HEAD?
 28994 00006111 750C                            JNZ     SHORT BUFLOOP
 28995 00006113 36890E[3800]                    MOV     [SS:BUFFHEAD],CX
 28996 00006118 36892E[3A00]                    MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 28997 0000611D EB14                            JMP     SHORT LOOKEND
 28998                                  
 28999                                  BUFLOOP:
 29000                                  	; 31/07/2018
 29001 0000611F 8CD8                    	mov	ax,ds
 29002 00006121 89F3                    	mov	bx,si
 29003                                  	;lds	si,[SI+BUFFINFO.buf_link]
 29004 00006123 C534                            LDS     SI,[SI]
 29005 00006125 E86B00                          CALL    POINTCOMP
 29006 00006128 75F5                            jnz	short BUFLOOP
 29007                                  	;
 29008 0000612A 8ED8                    	mov	ds,ax
 29009 0000612C 89DE                    	mov	si,bx
 29010 0000612E 890C                    	mov	[SI],cx
 29011                                  	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 29012 00006130 896C02                  	mov	[SI+2],bp
 29013                                  	;mov	[SI+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 29014                                  LOOKEND:
 29015 00006133 8CD8                    	mov	ax,ds
 29016 00006135 89F3                    	mov	bx,si
 29017 00006137 C534                            LDS     SI,[SI]
 29018 00006139 83FEFF                          CMP     SI,-1
 29019 0000613C 75F5                            jnz     short LOOKEND
 29020                                  GOTHEEND:
 29021 0000613E 8ED8                            mov	ds,ax
 29022 00006140 893F                    	mov	[BX],di
 29023 00006142 8C4702                          MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 29024 00006145 26C705FFFF                      MOV     WORD [ES:DI],-1
 29025                                  	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 29026 0000614A 26C74502FFFF                    MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 29027                                  	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 29028                                  NRET:
 29029 00006150 E8D0B4                          CALL	restore_world
 29030                                  	
 29031                                  	;cmp	byte [di+4],-1
 29032 00006153 807D04FF                	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 29033 00006157 75A1                    	jnz     short scanplace_retn
 29034                                  
 29035                                  	; 26/07/2019
 29036                                  	;call	PLACEHEAD
 29037                                  	;retn
 29038                                  	;jmp	PLACEHEAD
 29039                                  
 29040                                  ;EndProc PLACEBUF
 29041                                  
 29042                                  ;M039 - Removed PLACEHEAD.
 29043                                  ;----------------------------------------------------------------------------
 29044                                  ; places buffer at head
 29045                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 29046                                  ;	ONE IN THE LIST!!!!!!!
 29047                                  ; BUGBUG ---- this routine can be removed because it has only
 29048                                  ; BUGBUG ---- one instruction. This routine is called from
 29049                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 29050                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 29051                                  ; BUGBUG ---- But kept as it is for modularity
 29052                                  ;----------------------------------------------------------------------------
 29053                                  ;procedure   PLACEHEAD,NEAR
 29054                                  ;	mov	word ptr [BufferQueue], di
 29055                                  ;	ret
 29056                                  ;EndProc PLACEHEAD
 29057                                  ;M039
 29058                                  
 29059                                  ;----------------------------------------------------------------------------
 29060                                  ; Procedure Name : PLACEHEAD
 29061                                  ;
 29062                                  ; SAME AS PLACEBUF except places buffer at head
 29063                                  ;----------------------------------------------------------------------------
 29064                                  
 29065                                  	; MSDOS 3.3 (Retro DOS v3.0)
 29066                                  	; 05/09/2018
 29067                                  	; MSDOS 2.11 (Retro DOS v2.0)
 29068                                  PLACEHEAD:
 29069                                  	; 31/07/2018 - Retro DOS v3.0
 29070                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 29071                                  
 29072 00006159 E8DAB4                          CALL	save_world
 29073 0000615C 1E                              PUSH	DS
 29074 0000615D 07                              POP	ES
 29075                                  	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 29076 0000615E 36C536[3800]                    LDS     SI,[SS:BUFFHEAD]
 29077                                  	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 29078 00006163 E82D00                  	CALL	POINTCOMP
 29079 00006166 7427                            JZ      SHORT GOTHEEND2
 29080 00006168 268935                  	MOV	[ES:DI],SI
 29081                                  	;mov	[ES:DI+BUFFINFO.buf_link],si
 29082 0000616B 268C5D02                        MOV	[ES:DI+2],DS
 29083                                  	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 29084 0000616F 36893E[3800]                    MOV	[SS:BUFFHEAD],DI
 29085 00006174 368C06[3A00]                    MOV	[SS:BUFFHEAD+2],ES
 29086                                  LOOKEND2:
 29087 00006179 8CD8                            mov	ax,ds
 29088 0000617B 89F3                    	mov	bx,si
 29089                                  	;lds	si,[SI+BUFFINFO.buf_link]
 29090 0000617D C534                            LDS     SI,[SI]
 29091 0000617F E81100                          CALL    POINTCOMP
 29092 00006182 75F5                            JNZ	SHORT LOOKEND2 ; 05/09/2018
 29093 00006184 8ED8                            mov	ds,ax
 29094 00006186 C707FFFF                	mov	word [bx],-1
 29095                                  	;mov	word [BX+BUFFINFO.buf_link],-1
 29096 0000618A C74702FFFF              	mov	word [bx+2],-1
 29097                                  	;mov	word [BX+BUFFINFO.buf_link+2],-1
 29098                                  GOTHEEND2:
 29099 0000618F E891B4                         	call	restore_world
 29100                                  placehead_retn:
 29101 00006192 C3                      	retn
 29102                                  
 29103                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 29104                                  ;----------------------------------------------------------------------------
 29105                                  ;
 29106                                  ; Procedure Name : PointComp
 29107                                  ; Inputs:
 29108                                  ;         DS:SI & ES:DI
 29109                                  ; Function:
 29110                                  ;          Checks for ((SI==DI) && (ES==DS))
 29111                                  ;	   Assumes that pointers are normalized for the
 29112                                  ;	   same segment
 29113                                  ;
 29114                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 29115                                  ; DO NOT USE FOR < or >
 29116                                  ; No Registers altered
 29117                                  ;
 29118                                  ;----------------------------------------------------------------------------
 29119                                  
 29120                                  POINTCOMP:
 29121                                  	; 31/07/2018 - Retro DOS v3.0
 29122                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 29123 00006193 39FE                    	CMP	SI,DI
 29124                                  	;jnz	short _ret_label	; return if nz
 29125 00006195 75FB                    	jnz	short placehead_retn 
 29126 00006197 51                      	PUSH	CX
 29127 00006198 52                      	PUSH	DX
 29128 00006199 8CD9                    	MOV	CX,DS
 29129 0000619B 8CC2                    	MOV	DX,ES
 29130 0000619D 39D1                    	CMP	CX,DX
 29131 0000619F 5A                      	POP	DX
 29132 000061A0 59                      	POP	CX
 29133                                  ;_ret_label:
 29134 000061A1 C3                      	retn
 29135                                  
 29136                                  
 29137                                  ; 01/08/2018 - Retro DOS v3.0
 29138                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 29139                                  
 29140                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 29141                                  
 29142                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 29143                                  ;----------------------------------------------------------------------------
 29144                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 29145                                  ;	It gets the specified local sector into one of the I/O buffers
 29146                                  ;	and shuffles the queue
 29147                                  ; 
 29148                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 29149                                  ;		       ELSE no pre-read
 29150                                  ;		(DX) = Desired physical sector number	      (LOW)
 29151                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 29152                                  ;		(ES:BP) = Pointer to drive parameters
 29153                                  ;		ALLOWED set in case of INT 24
 29154                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 29155                                  ;		'C' clear if OK
 29156                                  ;		CURBUF Points to the Buffer for the sector
 29157                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 29158                                  ;	USES	AX, BX, CX, SI, DI, Flags
 29159                                  ;----------------------------------------------------------------------------
 29160                                  
 29161                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 29162                                  ;----------------------------------------------------------------------------
 29163                                  ;	GetBuffr reads a sector from the FAT file system's FAT table.
 29164                                  ;	It gets the specified sector into one of the I/O buffers
 29165                                  ;	and shuffles the queue. We need a special entry point so that
 29166                                  ;	we can read the alternate FAT sector if the first read fails, also
 29167                                  ;	so we can mark the buffer as a FAT sector.
 29168                                  ; 
 29169                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 29170                                  ;		       ELSE no pre-read
 29171                                  ;		(DX) = Desired physical sector number	      (LOW)
 29172                                  ;		(SI) != 0
 29173                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 29174                                  ;		(ES:BP) = Pointer to drive parameters
 29175                                  ;		ALLOWED set in case of INT 24
 29176                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 29177                                  ;		'C' clear if OK
 29178                                  ;		CUR ddBUF Points to the Buffer for the sector
 29179                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 29180                                  ;	USES	AX, BX, CX, SI, DI, Flags
 29181                                  ;----------------------------------------------------------------------------
 29182                                  
 29183                                  GETBUFFR:
 29184 000061A2 31F6                    	XOR	SI,SI
 29185                                  
 29186                                  ;	This entry point is called for FAT buffering with SI != 0
 29187                                  
 29188                                  GETBUFFRB:
 29189 000061A4 A3[5005]                	MOV	[PREREAD],AX			; save pre-read flag
 29190 000061A7 268A4600                	mov	al,[ES:BP]
 29191                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 29192 000061AB C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 29193                                  	; 22/07/2019 - Retro DOS v3.2
 29194                                  	; MSDOS 6.0
 29195                                  ;hkn; SS override
 29196 000061AF 368B0E[B005]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb		;AN000;
 29197                                  
 29198                                  ;	See if this is the buffer that was most recently returned.
 29199                                  ;	A big performance win if it is.
 29200                                  
 29201 000061B4 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 29202 000061B7 7412                    	je	short getb5			; No
 29203                                  	;cmp	dx,[di+6]
 29204 000061B9 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 29205 000061BC 750D                    	JNZ	short getb5			; Wrong sector
 29206                                  	
 29207                                  	; 22/07/2019
 29208                                  	; MSDOS 6.0
 29209                                  	;cmp	cx,[di+8]
 29210 000061BE 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb		;AN000;
 29211 000061C1 7508                    	JNZ	short getb5			; F.C. >32mb		;AN000;
 29212                                  	
 29213                                  	;cmp	al,[di+4]
 29214 000061C3 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 29215                                  	;JZ	getb35				; Just asked for same buffer
 29216 000061C6 7503                    	jnz	short getb5
 29217                                  	;jmp	getb35
 29218                                  	; 28/07/2019
 29219 000061C8 E99800                  	jmp	getb35x 
 29220                                  
 29221                                  ;	It's not the buffer most recently returned. See if it's in the
 29222                                  ;	cache.
 29223                                  ;
 29224                                  ;	(cx:dx) = sector #
 29225                                  ;	(al) = drive #
 29226                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 29227                                  ;	??? list may be incomplete ???
 29228                                  
 29229                                  getb5:	
 29230                                  	; MSDOS 6.0
 29231                                  	;CALL	GETCURHEAD			; get Q Head
 29232                                  	; MSDOS 3.3
 29233 000061CB 36C53E[3800]            	lds	di,[SS:BUFFHEAD]
 29234                                  getb10:	
 29235                                  	;cmp	dx,[di+6]
 29236 000061D0 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 29237 000061D3 750A                    	jne	short getb12			; wrong sector lo
 29238                                  	
 29239                                  	; 22/07/2019 - Retro DOS v3.2
 29240                                  	; MSDOS 6.0
 29241                                  	;cmp	cx,[di+8]
 29242 000061D5 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 29243 000061D8 7505                    	jne	short getb12			; wrong sector hi
 29244                                  	
 29245                                  	;cmp	al,[di+4]
 29246 000061DA 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 29247 000061DD 745E                    	je	short getb25 ; 05/09/2018	; Found the requested sector
 29248                                  	; MSDOS 6.0
 29249                                  	;jne	short getb12
 29250                                  	;jmp	getb25
 29251                                  getb12:	
 29252                                  	; 22/07/2019 - Retro DOS v3.2
 29253                                  	; MSDOS 6.0
 29254                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 29255                                  	;cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 29256                                  	;jne	short getb10			; no, continue looking
 29257                                  
 29258                                  	; MSDOS 3.3
 29259                                  	;mov	di,[DI]
 29260                                  	;mov	di,[DI+BUFFINFO.buf_link]
 29261                                  	
 29262                                  	; 15/08/2018
 29263 000061DF C53D                    	lds	di,[di]
 29264                                  	;
 29265 000061E1 83FFFF                  	cmp	di,-1 ; 0FFFFh
 29266 000061E4 75EA                    	jne	short getb10
 29267 000061E6 36C53E[3800]            	lds	di,[SS:BUFFHEAD]		
 29268                                  
 29269                                  ;	The requested sector is not available in the buffers. DS:DI now points
 29270                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 29271                                  ;	new sector into it.
 29272                                  ;
 29273                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 29274                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 29275                                  ;	him, we should take LRU. And the above lookup shouldn't be
 29276                                  ;	down a chain, but should be hashed.
 29277                                  ;
 29278                                  ;	(DS:DI) = first buffer in the queue
 29279                                  ;	(CX:DX) = sector # we want
 29280                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 29281                                  
 29282                                  ;hkn; SS override
 29283 000061EB 51                      	PUSH	cx ; 22/07/2019 (MSDOS 6.0)
 29284 000061EC 56                      	push	si
 29285 000061ED 52                      	push	dx
 29286 000061EE 55                      	push	bp
 29287 000061EF 06                      	push	es
 29288 000061F0 E8CC00                  	CALL	BUFWRITE			; Write out the dirty buffer
 29289 000061F3 07                      	pop	es
 29290 000061F4 5D                      	pop	bp
 29291 000061F5 5A                      	pop	dx
 29292 000061F6 5E                      	pop	si
 29293 000061F7 368F06[B005]            	POP	word [SS:HIGH_SECTOR] ; 22/07/2019 (MSDOS 6.0)
 29294 000061FC 726F                    	jc	short getbx			; if got hard error
 29295                                  	
 29296                                  	; MSDOS 6.0
 29297                                  	;jnc	short getb13
 29298                                  	;jmp	getbx
 29299                                  ;getb13:
 29300                                  	; MSDOS 6.0
 29301                                  	;CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 29302                                  
 29303                                  ;	We're ready to read in the buffer, if need be. If the caller
 29304                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 29305                                  
 29306 000061FE 30E4                    	XOR	AH,AH				; initial flags
 29307                                  ;hkn; SS override
 29308                                  	;test	byte [ss:PREREAD],0FFh
 29309                                  	;jnz	short getb20
 29310 00006200 363826[5005]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 29311 00006205 751E                    	JNZ	short getb20			; no, we're done 
 29312                                  	;lea	bx,[di+16] ; MSDOS 3.3
 29313                                  	;lea	bx,[di+20] ; MSDOS 6.0
 29314 00006207 8D5D14                  	LEA	BX,[DI+BUFINSIZ]		; (ds:bx) = data address
 29315 0000620A B90100                  	MOV	CX,1
 29316 0000620D 56                      	push	si
 29317 0000620E 57                      	push	di
 29318 0000620F 52                      	push	dx
 29319                                  	
 29320                                  	; MSDOS 6.0
 29321                                  	;push	es ; ***
 29322                                  
 29323                                  ; Note: As far as I can tell, all disk reads into buffers go through
 29324                                  ;	this point. -mrw 10/88
 29325                                  	
 29326                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 29327                                  	;jz	short getb14
 29328                                  	;push	ds ; **
 29329                                  	;push	bx ; *
 29330                                  	;lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 29331                                  ;getb14:
 29332                                  ;M039: Eliminated redundant HMA code.
 29333                                  
 29334                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29335 00006210 09F6                    	OR	SI,SI			; FAT sector ?
 29336 00006212 7407                    	JZ	short getb15		
 29337                                  
 29338 00006214 E819E0                  	call	FATSECRD
 29339                                  	;mov	ah,2
 29340 00006217 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 29341                                  
 29342 00006219 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 29343                                  getb15:
 29344 0000621B E83EE0                  	call	DREAD			; Buffer is marked free if read barfs
 29345 0000621E B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 29346                                  getb17:	
 29347                                  	; MSDOS 6.0							  ;I001
 29348                                  	;pushf								  ;I001
 29349                                  	;cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 29350                                  	;jz	short not_in_hma	; no				  ;I001
 29351                                  	;mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 29352                                  	;shr	cx,1							  ;I001
 29353                                  	;popf				; Retrieve possible CY from DREAD ;I001
 29354                                  	;mov	si,bx							  ;I001
 29355                                  	;pop	di ; *	 						  ;I001
 29356                                  	;pop	es ; **							  ;I001
 29357                                  	;cld								  ;I001
 29358                                  	;pushf				; Preserve possible CY from DREAD ;I001
 29359                                  	;rep	movsw			; move the contents of scratch buf;I001
 29360                                  	;push	es							  ;I001
 29361                                  	;pop	ds							  ;I001
 29362                                  ;not_in_hma:								  ;I001
 29363                                  	;popf							 	  ;I001
 29364                                  	;pop	es ; ***	
 29365                                  	;
 29366 00006220 5A                      	pop	dx
 29367 00006221 5F                      	pop	di
 29368 00006222 5E                      	pop	si
 29369 00006223 7248                    	JC	short getbx
 29370                                  
 29371                                  ;	The buffer has the data setup in it (if we were to read)
 29372                                  ;	Setup the various buffer fields
 29373                                  ;
 29374                                  ;	(ds:di) = buffer address
 29375                                  ;	(es:bp) = DPB address
 29376                                  ;	(HIGH_SECTOR:DX) = sector #
 29377                                  ;	(ah) = BUF_FLAGS value
 29378                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 29379                                  
 29380                                  ;hkn; SS override
 29381                                  getb20:	
 29382                                  	; 22/07/2019 - Retro DOS v3.2
 29383                                  	; MSDOS 6.0
 29384 00006225 368B0E[B005]            	MOV	CX,[SS:HIGH_SECTOR]
 29385                                  	;mov	[di+8],cx
 29386 0000622A 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 29387                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 29388                                   	;mov	[di+6],dx
 29389 0000622D 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 29390                                  	;mov	[di+0Ah],bp  ; MSDOS 3.3
 29391                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 29392 00006230 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 29393                                  	;mov	[di+0Ch],es
 29394                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 29395 00006233 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 29396 00006236 268A4600                	mov	al,[es:bp]
 29397                                  	;mov	al,[es:bp+0]
 29398                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29399                                  	;mov	[di+4],ax
 29400 0000623A 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 29401                                  getb25:	
 29402                                  	; 22/07/2019
 29403                                  	; MSDOS 6.0
 29404                                  	;mov	byte [di+0Ah],1
 29405 0000623D C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 29406 00006241 31C0                    	XOR	AX,AX
 29407                                  
 29408                                  	; MSDOS 3.3
 29409                                  	;mov	ax,1
 29410                                  
 29411 00006243 09F6                    	OR	SI,SI				; FAT sector ?
 29412 00006245 740B                    	JZ	short getb30
 29413                                  
 29414                                  	;mov	al,[es:bp+8]
 29415 00006247 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 29416                                  	; MSDOS 6.0
 29417 0000624B 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 29418                                  	;mov	ax,[es:bp+0Fh]
 29419 0000624E 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 29420                                  						;  sectors
 29421                                  	; MSDOS 3.3
 29422                                  	;;mov	ah,[es:bp+0Fh]
 29423                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 29424                                  
 29425                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 29426                                  ;		is set
 29427                                  
 29428                                  getb30:	
 29429                                  	; MSDOS 3.3
 29430                                  	;mov	[di+8],ax ; 15/08/2018	
 29431                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 29432                                  
 29433                                  	; 22/07/2019 - Retro DOS v3.2
 29434                                  	; MSDOS 6.0
 29435                                  	;mov	[di+0Bh],ax
 29436 00006252 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 29437                                  
 29438 00006255 E8A3FE                  	CALL	PLACEBUF
 29439                                  
 29440                                  ;hkn; SS override for next 4
 29441                                  getb35: 
 29442 00006258 368C1E[2000]            	MOV	[SS:LastBuffer+2],DS
 29443 0000625D 36893E[1E00]            	MOV	[SS:LastBuffer],DI
 29444 00006262 F8                      	CLC
 29445                                  getb35x: ; 28/07/2019
 29446 00006263 368C1E[A005]            	MOV	[SS:CURBUF+2],DS
 29447 00006268 36893E[9E05]            	MOV	[SS:CURBUF],DI
 29448                                  
 29449                                  ;	Return with 'C' set appropriately
 29450                                  ;
 29451                                  ;	(dx) = caller's original value
 29452                                  
 29453                                  getbx:	
 29454 0000626D 16                      	push	ss
 29455 0000626E 1F                      	pop	ds
 29456 0000626F C3                      	retn
 29457                                  
 29458                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 29459                                  ;----------------------------------------------------------------------------
 29460                                  ; Input:
 29461                                  ;	DS = DOSGROUP
 29462                                  ;	AL = Physical unit number local buffers only
 29463                                  ;	   = -1 for all units and all remote buffers
 29464                                  ; Function:
 29465                                  ;	Write out all dirty buffers for unit, and flag them as clean
 29466                                  ;	Carry set if error (user FAILed to I 24)
 29467                                  ;	    Flush operation completed.
 29468                                  ; DS Preserved, all others destroyed (ES too)
 29469                                  ;----------------------------------------------------------------------------
 29470                                  
 29471                                  FLUSHBUF:
 29472                                  	; MSDOS 6.0
 29473                                  	;call	GetCurHead
 29474                                  	;TEST	word [DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 29475                                  	;jnz	short scan_buf_queue
 29476                                  	;cmp	word [DirtyBufferCount], 0			;hkn;
 29477                                  	;je	short end_scan
 29478                                  	
 29479                                  	; MSDOS 3.3
 29480                                  	;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 29481 00006270 C53E[3800]              	lds	di,[BUFFHEAD]
 29482                                  scan_buf_queue:
 29483 00006274 E81F00                  	call	CHECKFLUSH
 29484                                  	;push	ax  ; MSDOS 3.3
 29485                                  	; MSDOS 6.0
 29486 00006277 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 29487 0000627A 363826[EE02]            	cmp	[SS:WPERR],ah					;hkn;
 29488                                  	;je	short free_the_buf
 29489                                  	;TEST	word [DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 29490                                  	;jz	short dont_free_the_buf
 29491                                  	; MSDOS 3.3
 29492                                  	;mov	al,[di+4]
 29493                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 29494                                  	;cmp	[SS:WPERR],al					;hkn;
 29495                                  	; 15/08/2018
 29496 0000627F 7505                    	jne	short dont_free_the_buf	
 29497                                  free_the_buf:
 29498                                  	; MSDOS 6.0 (& MSDOS 3.3)
 29499 00006281 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 29500                                  dont_free_the_buf:
 29501                                  	;pop	ax  ; MSDOS 3.3 	   	
 29502                                  	
 29503                                  	; MSDOS 6.0
 29504                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 29505                                  	;cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 29506                                  	;jne	short scan_buf_queue
 29507                                  
 29508                                  	; MSDOS 3.3
 29509                                  	;mov	di,[DI]
 29510                                  	;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 29511                                  	;
 29512                                  	; 15/08/2018
 29513 00006286 C53D                    	lds	di,[di]
 29514                                  	;
 29515 00006288 83FFFF                  	cmp	di,-1 ; 0FFFFh
 29516 0000628B 75E7                    	jnz	short scan_buf_queue 
 29517                                  
 29518                                  end_scan:
 29519 0000628D 16                      	push	ss
 29520 0000628E 1F                      	pop	ds
 29521                                  	; 01/08/2018 - Retro DOS v3.0
 29522                                  	;cmp	byte [FAILERR],0
 29523                                  	;jne	short bad_flush
 29524                                  	;retn
 29525                                  ;bad_flush:
 29526                                  	;stc
 29527                                  	;retn
 29528                                  	; 01/08/2018 - Retro DOS v3.0
 29529 0000628F 803E[1403]01            	cmp	byte [FAILERR],1
 29530 00006294 F5                      	cmc
 29531                                  flushbuf_retn:
 29532 00006295 C3                      	retn
 29533                                  
 29534                                  ;----------------------------------------------------------------------------
 29535                                  ;
 29536                                  ; Procedure Name : CHECKFLUSH
 29537                                  ;
 29538                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 29539                                  ;	   DS:DI - pointer to buffer
 29540                                  ;
 29541                                  ; Function : Write out a buffer if it is dirty
 29542                                  ;
 29543                                  ; Carry set if problem (currently user FAILed to I 24)
 29544                                  ;
 29545                                  ;----------------------------------------------------------------------------
 29546                                  
 29547                                  CHECKFLUSH:
 29548                                  	; MSDOS 6.0
 29549 00006296 B4FF                    	mov	ah,-1 ; 01/08/2018 Retro DOS v3.0
 29550                                  	;cmp	[di+4],ah
 29551 00006298 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 29552 0000629B 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 29553 0000629D 38C4                    	CMP	AH,AL			; 
 29554 0000629F 7406                    	JZ	short DOBUFFER		; do this buffer
 29555                                  	;cmp	al,[di+4]
 29556 000062A1 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 29557 000062A4 F8                      	CLC
 29558 000062A5 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 29559                                  DOBUFFER:
 29560                                  	;test	byte [di+5],40h
 29561 000062A7 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 29562 000062AB 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 29563 000062AD 50                      	PUSH	AX
 29564                                  	;push	word [di+4]
 29565 000062AE FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 29566 000062B1 E80B00                  	CALL	BUFWRITE
 29567 000062B4 58                      	POP	AX
 29568 000062B5 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 29569                                  	;and	ah,0BFh
 29570 000062B7 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 29571                                  	;mov	[di+4],ax
 29572 000062BA 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 29573                                  LEAVE_BUF:
 29574 000062BD 58                      	POP	AX			; Search info
 29575                                  checkflush_retn:
 29576 000062BE C3                      	retn
 29577                                  
 29578                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 29579                                  ;----------------------------------------------------------------------------
 29580                                  ;
 29581                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 29582                                  ;
 29583                                  ;	ENTRY	DS:DI Points to the buffer
 29584                                  ;
 29585                                  ;	EXIT	Buffer marked free
 29586                                  ;		Carry set if error (currently user FAILed to I 24)
 29587                                  ;
 29588                                  ;	USES	All buf DS:DI
 29589                                  ;		HIGH_SECTOR
 29590                                  ;----------------------------------------------------------------------------
 29591                                  
 29592                                  BUFWRITE:
 29593                                  	; 22/07/2019 - Retro DOS v3.2
 29594                                  	; 10/09/2018
 29595                                  	; 01/08/2018 - Retro DOS v3.0
 29596                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 29597 000062BF B8FF00                  	MOV	AX,00FFH
 29598                                  	;xchg	ax,[di+4]
 29599 000062C2 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 29600 000062C5 3CFF                    	CMP	AL,0FFH
 29601 000062C7 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 29602                                  	;test	ah,40h
 29603 000062C9 F6C440                  	test	AH,buf_dirty
 29604 000062CC 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 29605                                  	; MSDOS 6.0
 29606                                  	;call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 29607                                  
 29608                                  ;hkn; SS override
 29609 000062CE 363A06[EE02]            	CMP	AL,[SS:WPERR]
 29610 000062D3 74E9                    	jz      short checkflush_retn	; If in WP error zap buffer
 29611                                  
 29612                                  ;hkn; SS override
 29613                                  	; 22/07/2019 - Retro DOS v3.2
 29614                                  	; MSDOS 6.0
 29615                                  	;MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 29616                                  	
 29617                                  	;;les	bp,[di+10] ; MSDOS 3.3
 29618                                  	;les	bp,[di+13] ; MSDOS 6.0
 29619 000062D5 C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 29620                                  	;;lea	bx,[di+16]
 29621                                  	;lea	bx,[di+20] ; MSDOS 6.0
 29622 000062D8 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 29623                                  	;mov	dx,[di+6]
 29624 000062DB 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 29625                                  	
 29626                                  	; MSDOS 6.0
 29627                                  	;mov	cx,[di+8]
 29628 000062DE 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 29629                                  ;hkn; SS override
 29630 000062E1 36890E[B005]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 29631 000062E6 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 29632                                  	; MSDOS 3.3
 29633                                  	;; mov	cx,[DI+8]
 29634                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 29635                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 29636 000062E9 30ED                    	XOR	CH,CH
 29637                                  	;;mov	ah,ch ; MSDOS 3.3
 29638                                  
 29639                                  ;hkn; SS override for ALLOWED
 29640                                  	;mov	byte [SS:ALLOWED],18h
 29641 000062EB 36C606[1503]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 29642                                  	;test	byte [di+5],8
 29643                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 29644                                  	;test	ah,8
 29645 000062F1 F6C408                  	test	AH,buf_isDATA
 29646 000062F4 7406                    	JZ	short NO_IGNORE
 29647                                  	;or	byte [SS:ALLOWED],20h
 29648 000062F6 36800E[1503]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 29649                                  NO_IGNORE:
 29650                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 29651                                  	; MSDOS 6.0
 29652                                  	;mov	ax,[di+11]
 29653 000062FC 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 29654                                  
 29655 000062FF 57                      	PUSH	DI		; Save buffer pointer
 29656 00006300 31FF                    	XOR	DI,DI		; Indicate failure
 29657                                  
 29658                                  	;push	ds
 29659                                  	;push	bx
 29660                                  WRTAGAIN:
 29661 00006302 57                      	push	di
 29662 00006303 51                      	push	cx
 29663 00006304 50                      	push	ax
 29664                                  	;MOV	CX,1
 29665 00006305 B101                    	mov	cl,1 ; 24/07/2019
 29666 00006307 53                      	push	bx
 29667 00006308 52                      	push	dx
 29668 00006309 1E                      	push	ds
 29669                                  
 29670                                  ; Note:  As far as I can tell, all disk reads into buffers go through this point.  -mrw 10/88
 29671                                  
 29672                                  	; MSDOS 6.0
 29673                                  	;cmp	byte [BuffInHMA],0
 29674                                  	;jz	short NBUFFINHMA
 29675                                  	;push	cx
 29676                                  	;push	es
 29677                                  	;mov	si,bx
 29678                                  	;mov	cx,[es:bp+DPB.SECTOR_SIZE]
 29679                                  	;shr	cx,1
 29680                                  	;les	di,[LoMemBuff]
 29681                                  	;mov	bx,di
 29682                                  	;cld
 29683                                  	;rep	movsw
 29684                                  	;push	es
 29685                                  	;pop	ds
 29686                                  	;pop	es
 29687                                  	;pop	cx
 29688                                  ;NBUFFINHMA:
 29689 0000630A E8AFDF                  	call	DWRITE		; Write out the dirty buffer
 29690 0000630D 1F                      	pop	ds
 29691 0000630E 5A                      	pop	dx
 29692 0000630F 5B                      	pop	bx
 29693 00006310 58                      	pop	ax
 29694 00006311 59                      	pop	cx
 29695 00006312 5F                      	pop	di
 29696 00006313 7201                    	JC	short NOSET
 29697 00006315 47                      	INC	DI		; If at least ONE write succeedes, the operation
 29698                                  NOSET:				;	succeedes.
 29699 00006316 01C2                    	ADD	DX,AX
 29700 00006318 E2E8                    	LOOP	WRTAGAIN
 29701                                  	;pop	bx
 29702                                  	;pop	ds
 29703 0000631A 09FF                    	OR	DI,DI		; Clears carry
 29704 0000631C 7501                    	JNZ	short BWROK	; At least one write worked
 29705 0000631E F9                      	STC			; DI never got INCed, all writes failed.
 29706                                  BWROK:	
 29707 0000631F 5F                      	POP	DI
 29708 00006320 C3                      	retn
 29709                                  
 29710                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 29711                                  ;----------------------------------------------------------------------------
 29712                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 29713                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 29714                                  ;	SC_DRIVE even if SC is disabled to save the testing
 29715                                  ;	code and time
 29716                                  ;
 29717                                  ;	ENTRY	ES:BP = drive parameter block
 29718                                  ;
 29719                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 29720                                  ;		[SC_DRIVE]= drive #
 29721                                  ;
 29722                                  ;	USES	Flags
 29723                                  ;----------------------------------------------------------------------------
 29724                                  
 29725                                  ;procedure   SET_RQ_SC_PARMS,NEAR
 29726                                  ;
 29727                                  ;;hkn; SS override for all variables used in this procedure.
 29728                                  ;
 29729                                  ;	SAVE	<ax>
 29730                                  ;
 29731                                  ;	MOV	ax,ES:[BP].DPB_SECTOR_SIZE	; save sector size
 29732                                  ;	MOV	SC_SECTOR_SIZE,ax
 29733                                  ;
 29734                                  ;	MOV	al,ES:[BP].DPB_DRIVE		; save drive #
 29735                                  ;	MOV	SC_DRIVE,al
 29736                                  ;
 29737                                  ;	RESTORE <ax>
 29738                                  ;
 29739                                  ;srspx:	return
 29740                                  ;
 29741                                  ;EndProc SET_RQ_SC_PARMS 			;LB. return
 29742                                  
 29743                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 29744                                  ;----------------------------------------------------------------------------
 29745                                  ; Input:
 29746                                  ;	none
 29747                                  ; Function:
 29748                                  ;	increment dirty buffers count
 29749                                  ; Output:
 29750                                  ;	dirty buffers count is incremented
 29751                                  ;
 29752                                  ; All registers preserved
 29753                                  ;----------------------------------------------------------------------------
 29754                                  
 29755                                  ;procedure   INC_DIRTY_COUNT,NEAR
 29756                                  ;
 29757                                  ;; BUGBUG  ---- remove this routine
 29758                                  ;; BUGBUG ---- only one instruction is needed   (speed win, space loose)
 29759                                  ;	inc	[DirtyBufferCount]			;hkn;
 29760                                  ;	ret
 29761                                  ;EndProc INC_DIRTY_COUNT
 29762                                  
 29763                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 29764                                  ;----------------------------------------------------------------------------
 29765                                  ; Input:
 29766                                  ;	none
 29767                                  ; Function:
 29768                                  ;	decrement dirty buffers count
 29769                                  ; Output:
 29770                                  ;	dirty buffers count is decremented
 29771                                  ;
 29772                                  ; All registers preserved
 29773                                  ;----------------------------------------------------------------------------
 29774                                  
 29775                                  ;procedure   DEC_DIRTY_COUNT,NEAR
 29776                                  ;	cmp	[DirtyBufferCount], 0	;hkn;
 29777                                  ;	jz	ddcx			; BUGBUG - shouldn't it be an
 29778                                  ;	dec	[DirtyBufferCount]	; error condition to underflow here? ;hkn;
 29779                                  ;ddcx:	ret
 29780                                  ;
 29781                                  ;EndProc DEC_DIRTY_COUNT
 29782                                  
 29783                                  ;============================================================================
 29784                                  ; MSPROC.ASM, MSDOS 6.0, 1991
 29785                                  ;============================================================================
 29786                                  ; 02/08/2018 - Retro DOS v3.0
 29787                                  
 29788                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 29789                                  
 29790                                  ; Pseudo EXEC system call for DOS
 29791                                  
 29792                                  ;	TITLE	MSPROC - process maintenance
 29793                                  ;	NAME	MSPROC
 29794                                  
 29795                                  ; =========================================================================
 29796                                  ;**	Process related system calls and low level routines for DOS 2.X.
 29797                                  ;	I/O specs are defined in DISPATCH.
 29798                                  ;
 29799                                  ;	$WAIT
 29800                                  ;	$EXEC
 29801                                  ;	$Keep_process
 29802                                  ;	Stay_resident
 29803                                  ;	$EXIT
 29804                                  ;	$ABORT
 29805                                  ;	abort_inner
 29806                                  ;
 29807                                  ;	Modification history:
 29808                                  ;
 29809                                  ;		Created: ARR 30 March 1983
 29810                                  ;		AN000	version 4.0 jan. 1988
 29811                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 29812                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 29813                                  ;
 29814                                  ;		M000	added support for loading programs into UMBs 7/9/90
 29815                                  ;
 29816                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 29817                                  ;		       dossym.inc. 7/30/90
 29818                                  ;		M005 - Support for EXE programs with out STACK segment and 
 29819                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 29820                                  ;		       stack is provided at the end of the program. Note that
 29821                                  ;		       only SP is changed.
 29822                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 29823                                  ;
 29824                                  ;		M028 - 4b04 implementation
 29825                                  ;
 29826                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 29827                                  ;			in memory block >= 64K, sp = 0. If memory block
 29828                                  ;			obtained is <64K, point sp at the end of the memory
 29829                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 29830                                  ;			added for a stack segment which may be needed if it
 29831                                  ;			is loaded in low memory situations.
 29832                                  ;
 29833                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 29834                                  ;
 29835                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 29836                                  ;			a bad environment if it reached 32767 bytes. Changed
 29837                                  ;			to allow 32768 bytes of environment.
 29838                                  ;
 29839                                  ;		M047 - Release the allocated UMB when we failed to load a 
 29840                                  ;		       COM file high. Also ensure that if the biggest block
 29841                                  ;		       into which we load the com file is less than 64K then
 29842                                  ;		       we provide atleast 256 bytes of stack to the user.
 29843                                  ;
 29844                                  ;		M050 - Made Lie table search CASE insensitive
 29845                                  ;
 29846                                  ;		M060 - Removed special version table from the kernal and
 29847                                  ;                      put it in a device drive which puts the address
 29848                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 29849                                  ;		       as a DWORD.
 29850                                  ;
 29851                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 29852                                  ;		       entry do not try to load low if there is no space in
 29853                                  ;		       UMBs.
 29854                                  ;
 29855                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 29856                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 29857                                  ;		       change return address to LeaveDos if AL=5.
 29858                                  ;
 29859                                  ;               20-Jul-1992 bens    Added ifdef RESTRICTED_BUILD code that
 29860                                  ;                      controls building a version of MSDOS.SYS that only
 29861                                  ;                      runs programs from a fixed list (defined in the
 29862                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 29863                                  ;                      for details.  This feature is used to build a
 29864                                  ;                      "special" version of DOS that can be handed out to
 29865                                  ;                      OEM/ISV customers as part of a "service" disk.
 29866                                  ;
 29867                                  ; =========================================================================
 29868                                  
 29869                                  ;SAVEXIT 	EQU	10
 29870                                  
 29871                                  ;BREAK	<$WAIT - return previous process error code>
 29872                                  ; =========================================================================
 29873                                  ;	$WAIT - Return previous process error code.
 29874                                  ;
 29875                                  ;	Assembler usage:
 29876                                  ;
 29877                                  ;	    MOV     AH, WaitProcess
 29878                                  ;	    INT     int_command
 29879                                  ;
 29880                                  ;	ENTRY	none
 29881                                  ;	EXIT	(ax) = exit code
 29882                                  ;	USES	all
 29883                                  ; =========================================================================
 29884                                  
 29885                                  _$WAIT:
 29886                                  	; 02/08/2018 - Retro DOS v3.0
 29887                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 29888                                  
 29889 00006321 31C0                    	xor	AX,AX
 29890 00006323 368706[0003]            	xchg	AX,[ss:exit_code]
 29891 00006328 E970B4                  	jmp	SYS_RET_OK
 29892                                  
 29893                                  ; =========================================================================
 29894                                  ;BREAK <$exec - load/go a program>
 29895                                  ;	EXEC.ASM - EXEC System Call
 29896                                  ;
 29897                                  ;
 29898                                  ; Assembler usage:
 29899                                  ;	    lds     DX, Name
 29900                                  ;	    les     BX, Blk
 29901                                  ;	    mov     AH, Exec
 29902                                  ;	    mov     AL, FUNC
 29903                                  ;	    int     INT_COMMAND
 29904                                  ;
 29905                                  ;	AL  Function
 29906                                  ;	--  --------
 29907                                  ;	 0  Load and execute the program.
 29908                                  ;	 1  Load, create  the  program	header	but  do  not
 29909                                  ;	    begin execution.
 29910                                  ;	 3  Load overlay. No header created.
 29911                                  ;
 29912                                  ;	    AL = 0 -> load/execute program
 29913                                  ;
 29914                                  ;	    +---------------------------+
 29915                                  ;	    | WORD segment address of	|
 29916                                  ;	    | environment.		|
 29917                                  ;	    +---------------------------+
 29918                                  ;	    | DWORD pointer to ASCIZ	|
 29919                                  ;	    | command line at 80h	|
 29920                                  ;	    +---------------------------+
 29921                                  ;	    | DWORD pointer to default	|
 29922                                  ;	    | FCB to be passed at 5Ch	|
 29923                                  ;	    +---------------------------+
 29924                                  ;	    | DWORD pointer to default	|
 29925                                  ;	    | FCB to be passed at 6Ch	|
 29926                                  ;	    +---------------------------+
 29927                                  ;
 29928                                  ;	    AL = 1 -> load program
 29929                                  ;
 29930                                  ;	    +---------------------------+
 29931                                  ;	    | WORD segment address of	|
 29932                                  ;	    | environment.		|
 29933                                  ;	    +---------------------------+
 29934                                  ;	    | DWORD pointer to ASCIZ	|
 29935                                  ;	    | command line at 80h	|
 29936                                  ;	    +---------------------------+
 29937                                  ;	    | DWORD pointer to default	|
 29938                                  ;	    | FCB to be passed at 5Ch	|
 29939                                  ;	    +---------------------------+
 29940                                  ;	    | DWORD pointer to default	|
 29941                                  ;	    | FCB to be passed at 6Ch	|
 29942                                  ;	    +---------------------------+
 29943                                  ;	    | DWORD returned value of	|
 29944                                  ;	    | CS:IP			|
 29945                                  ;	    +---------------------------+
 29946                                  ;	    | DWORD returned value of	|
 29947                                  ;	    | SS:IP			|
 29948                                  ;	    +---------------------------+
 29949                                  ;
 29950                                  ;	    AL = 3 -> load overlay
 29951                                  ;
 29952                                  ;	    +---------------------------+
 29953                                  ;	    | WORD segment address where|
 29954                                  ;	    | file will be loaded.	|
 29955                                  ;	    +---------------------------+
 29956                                  ;	    | WORD relocation factor to |
 29957                                  ;	    | be applied to the image.	|
 29958                                  ;	    +---------------------------+
 29959                                  ;
 29960                                  ; Returns:
 29961                                  ;	    AX = error_invalid_function
 29962                                  ;	       = error_bad_format
 29963                                  ;	       = error_bad_environment
 29964                                  ;	       = error_not_enough_memory
 29965                                  ;	       = error_file_not_found
 29966                                  ; =========================================================================
 29967                                  ;
 29968                                  ;   Revision history:
 29969                                  ;
 29970                                  ;	 A000	version 4.00  Jan. 1988
 29971                                  ;
 29972                                  ; =========================================================================
 29973                                  
 29974                                  Exec_Internal_Buffer		EQU	OPENBUF
 29975                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 29976                                  
 29977                                  ; =========================================================================
 29978                                  
 29979                                  ;IF1		; warning message on buffers
 29980                                  ;%out	Please make sure that the following are contiguous and of the
 29981                                  ;%out	following sizes:
 29982                                  ;%out
 29983                                  ;%out	OpenBuf     128
 29984                                  ;%out	RenBuf	    128
 29985                                  ;%out	SearchBuf    53
 29986                                  ;%out	DummyCDS    curdirLen
 29987                                  ;ENDIF
 29988                                  
 29989                                  ; =========================================================================
 29990                                  
 29991                                  ; =========================================================================
 29992                                  ;
 29993                                  ; =========================================================================
 29994                                  
 29995                                  _$EXEC:
 29996                                  	; 02/08/2018 - Retro DOS v3.0
 29997                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 29998                                  
 29999                                  EXEC001S:
 30000                                  
 30001                                  	;LocalVar    Exec_Blk		,DWORD
 30002                                  	;LocalVar    Exec_Func		,BYTE
 30003                                  	;LocalVar    Exec_Load_High	,BYTE
 30004                                  	;LocalVar    Exec_FH		,WORD
 30005                                  	;LocalVar    Exec_Rel_Fac	,WORD
 30006                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 30007                                  	;LocalVar    Exec_Environ	,WORD
 30008                                  	;LocalVar    Exec_Size		,WORD
 30009                                  	;LocalVar    Exec_Load_Block	,WORD
 30010                                  	;LocalVar    Exec_DMA		,WORD
 30011                                  	;LocalVar    ExecNameLen 	,WORD
 30012                                  	;LocalVar    ExecName		,DWORD
 30013                                  	;
 30014                                  	;LocalVar    Exec_DMA_Save	,WORD
 30015                                  	;LocalVar    Exec_NoStack	,BYTE
 30016                                  
 30017                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30018                                  	;%define	Exec_Blk	dword [bp-4]
 30019                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 30020                                  	%define		Exec_BlkL	word [bp-4]	
 30021                                  	%define		Exec_BlkH	word [bp-2]
 30022                                  	%define		Exec_Func	byte [bp-5]
 30023                                  	%define		Exec_Load_High	byte [bp-6]
 30024                                  	%define		Exec_FH		word [bp-8]
 30025                                  	%define		Exec_Rel_Fac	word [bp-10]
 30026                                  	%define		Exec_Res_Len_Para word [bp-12]
 30027                                  	%define		Exec_Environ	word [bp-14]
 30028                                  	%define		Exec_Size	word [bp-16]
 30029                                  	%define		Exec_Load_Block	word [bp-18]
 30030                                  	%define		Exec_DMA	word [bp-20]
 30031                                  	%define		ExecNameLen	word [bp-22]
 30032                                  	;%define	ExecName	dword [bp-26]
 30033                                  	%define		ExecName	[bp-26] ; 09/08/2018
 30034                                  	%define		ExecNameL	word [bp-26]	
 30035                                  	%define		ExecNameH	word [bp-24]
 30036                                  	; MSDOS 6.0
 30037                                  	%define		Exec_DMA_Save	word [bp-28]
 30038                                  	%define		Exec_NoStack	byte [bp-29]
 30039                                  	
 30040                                  	; ==================================================================
 30041                                  	; validate function
 30042                                  	; ==================================================================
 30043                                  		      	
 30044                                  	;
 30045                                  	; M068 - Start
 30046                                  	;
 30047                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 30048                                  	; possibility that the count may not be decremented all the way to
 30049                                  	; 0. A typical case is if the program for which we intended to keep 
 30050                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 30051                                  	; calls), exits pre-maturely due to error conditions.
 30052                                  	;
 30053                                  
 30054                                  	; MSDOS 6.0
 30055                                  	;mov	byte [SS:A20OFF_COUNT], 0
 30056                                  
 30057                                  	;
 30058                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 30059                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 30060                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 30061                                  	;
 30062                                  	
 30063                                  	;cmp	al,5			; Q: is this ExecReady call
 30064                                  	;jne	@f			; N: continue
 30065                                  					; Y: change ret addr. to LeaveDos.
 30066                                  	;pop	cx			; Note CX is not input to ExecReady
 30067                                  	;mov	cx, offset DOSCODE:LeaveDos
 30068                                  	;push	cx
 30069                                  ;@@:
 30070                                  	;
 30071                                  	; M068 - End
 30072                                  	;
 30073                                  
 30074                                  	;Enter
 30075                                  
 30076 0000632B 55                      	push	bp
 30077 0000632C 89E5                    	mov	bp,sp
 30078 0000632E 83EC1E                  	sub	sp,30 ; MSDOS 6.0
 30079                                  	;sub	sp,26 ; MSDOS 3.3
 30080                                  
 30081                                  	; MSDOS 6.0
 30082                                  	;cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 30083                                  					; M030
 30084                                  	;jna	short Exec_Check_2
 30085                                  
 30086                                  	; MSDOS 3.3
 30087 00006331 3C03                    	cmp	AL,3
 30088 00006333 760E                    	jna	short Exec_Check_2
 30089                                  
 30090                                  Exec_Bad_Fun:
 30091 00006335 36C606[EF02]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk 
 30092                                  					; Extended Error Locus	;smr;SS Override
 30093                                  	;mov	al,1
 30094 0000633B B001                    	mov	al,error_invalid_function
 30095                                  
 30096                                  Exec_Ret_Err:
 30097                                  	;Leave
 30098 0000633D 89EC                    	mov	sp,bp
 30099 0000633F 5D                      	pop	bp
 30100                                  	;transfer SYS_RET_ERR
 30101 00006340 E961B4                  	jmp	SYS_RET_ERR
 30102                                  
 30103                                  	; MSDOS 6.0
 30104                                  ;ExecReadyJ:
 30105                                  	;call	ExecReady		; M028
 30106                                  	;jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 30107                                  
 30108                                  Exec_Check_2:
 30109 00006343 3C02                    	cmp	AL,2			
 30110 00006345 74EE                    	jz	short Exec_Bad_Fun
 30111                                  
 30112                                  	; MSDOS 6.0
 30113                                  	;cmp	al,4			; 2 & 4 are not allowed
 30114                                  	;je	short Exec_Bad_Fun
 30115                                  	;
 30116                                  	;cmp	al,5			; M028 ; M030
 30117                                  	;je	short ExecReadyJ		; M028
 30118                                  
 30119                                  	;mov	[bp-4],bx
 30120 00006347 895EFC                  	mov	Exec_BlkL,BX		; stash args
 30121                                  	;mov	[bp-2],es
 30122 0000634A 8C46FE                  	mov	Exec_BlkH,ES
 30123                                  	;mov	[bp-5],al
 30124 0000634D 8846FB                  	mov	Exec_Func,AL
 30125                                  	;mov	byte [bp-6],0
 30126 00006350 C646FA00                	mov	Exec_Load_High,0
 30127                                  
 30128                                  	;mov	[bp-26],dx
 30129 00006354 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 30130                                  	;mov	[bp-24],ds
 30131 00006357 8C5EE8                  	mov	ExecNameH,DS
 30132 0000635A 89D6                    	mov	SI,DX			; move pointer to convenient place
 30133                                  	;invoke	DStrLen
 30134 0000635C E8BCBC                  	call	DStrLen
 30135                                  	;mov	[bp-22],cx
 30136 0000635F 894EEA                  	mov	ExecNameLen,CX		; save length
 30137                                  
 30138                                  	; MSDOS 6.0
 30139                                  	;mov	al, [AllocMethod]	; M063: save alloc method in 
 30140                                  	;mov	[AllocMsave], al	; M063: AllocMsave
 30141                                  
 30142 00006362 30C0                    	xor	AL,AL			; open for reading
 30143 00006364 55                      	push	BP
 30144                                  
 30145                                  	; MSDOS 6.0
 30146                                  	;or	byte [DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 30147                                  					; the redir that this open call is
 30148                                  					; due to an exec.
 30149                                  
 30150                                  	;invoke	$OPEN			; is the file there?
 30151 00006365 E81610                  	call	_$OPEN
 30152                                  
 30153                                  	; MSDOS 6.0
 30154                                  	;pushf
 30155                                  	;and	byte [DOS_FLAG],~EXECOPEN; reset flag
 30156                                  	;popf
 30157                                  
 30158 00006368 5D                      	pop	BP
 30159                                  	;MSDOS 3.3
 30160 00006369 72D2                    	jc	short Exec_Ret_Err
 30161                                  
 30162                                  	;mov	[bp-8],ax
 30163 0000636B 8946F8                  	mov	Exec_FH,AX
 30164 0000636E 89C3                    	mov	BX,AX
 30165 00006370 30C0                    	xor	AL,AL
 30166                                  	;invoke	$Ioctl
 30167 00006372 E8BCCC                  	call	_$IOCTL
 30168 00006375 7207                    	jc	short Exec_BombJ
 30169                                  
 30170                                  	;test	dl,80h
 30171 00006377 F6C280                  	test	DL,devid_ISDEV
 30172 0000637A 740A                    	jz	short Exec_Check_Environ
 30173                                  
 30174                                  	;mov	al,2
 30175 0000637C B002                    	mov	AL,error_file_not_found
 30176                                  Exec_BombJ:
 30177 0000637E E9CC00                  	jmp	Exec_Bomb
 30178                                  
 30179                                  BadEnv:
 30180                                  	;mov	al,0Ah
 30181 00006381 B00A                    	mov	AL,error_bad_environment
 30182 00006383 E9C700                  	jmp	Exec_Bomb
 30183                                  
 30184                                  Exec_Check_Environ:
 30185                                  	;mov	word [bp-18],0
 30186 00006386 C746EE0000              	mov	Exec_Load_Block,0
 30187                                  	;mov	word [bp-14],0
 30188 0000638B C746F20000              	mov	Exec_Environ,0
 30189                                  					; overlays... no environment
 30190                                  	;test	byte [bp-5],2
 30191 00006390 F646FB02                	test	Exec_Func,exec_func_overlay
 30192 00006394 7554                    	jnz	short Exec_Read_Header
 30193                                  
 30194                                  	;lds	si,[bp-4]
 30195 00006396 C576FC                  	lds	SI,Exec_Blk		; get block
 30196 00006399 8B04                    	mov	ax,[SI]
 30197                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 30198 0000639B 09C0                    	or	AX,AX
 30199 0000639D 750C                    	jnz	short Exec_Scan_Env
 30200                                  
 30201 0000639F 368E1E[FC02]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 30202                                  	;mov	ax,[44]
 30203 000063A4 A12C00                  	mov	AX,[PDB.ENVIRON]
 30204                                  
 30205                                  ; MSDOS 6.0
 30206                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 30207                                  ;
 30208                                  ; Exec_environ is being correctly initialized after the environment has been
 30209                                  ; allocated and copied form the parent's env. It must not be initialized here.
 30210                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 30211                                  ; parent's environment.
 30212                                  ;	mov	Exec_Environ,AX
 30213                                  ;
 30214                                  ;----------------------------------------------------------------------------
 30215                                  
 30216                                  	;mov	[bp-14],ax
 30217                                  	;mov	Exec_Environ,ax
 30218                                  
 30219 000063A7 09C0                    	or	AX,AX
 30220 000063A9 743F                    	jz	short Exec_Read_Header
 30221                                  
 30222                                  Exec_Scan_Env:
 30223 000063AB 8EC0                    	mov	ES,AX
 30224 000063AD 31FF                    	xor	DI,DI
 30225                                  	;mov	cx,7FFFh ; MSDOS 3.3
 30226 000063AF B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 30227 000063B2 30C0                    	xor	AL,AL
 30228                                  
 30229                                  Exec_Get_Environ_Len:
 30230 000063B4 F2AE                    	repnz	scasb			; find that nul byte
 30231 000063B6 75C9                    	jnz	short BadEnv
 30232                                  
 30233 000063B8 49                      	dec	CX			; Dec CX for the next nul byte test
 30234 000063B9 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 30235                                  
 30236 000063BB AE                      	scasb				; is there another nul byte?
 30237 000063BC 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 30238                                  
 30239 000063BE 57                      	push	DI
 30240                                  	;lea	bx,[DI+11h]
 30241 000063BF 8D5D11                  	lea	BX,[DI+0Fh+2]
 30242                                  	;add	bx,[bp-22]
 30243 000063C2 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 30244                                  					; remember argv[0] length
 30245                                  					; round up and remember argc
 30246 000063C5 B104                    	mov	CL,4
 30247 000063C7 D3EB                    	shr	BX,CL			; number of paragraphs needed
 30248 000063C9 06                      	push	ES
 30249                                  	;invoke	$Alloc			; can we get the space?
 30250 000063CA E8CA04                  	call	_$ALLOC
 30251 000063CD 1F                      	pop	DS
 30252 000063CE 59                      	pop	CX
 30253 000063CF 7302                    	jnc	short Exec_Save_Environ
 30254                                  
 30255 000063D1 EB74                    	jmp	SHORT Exec_No_Mem	; nope... cry and sob
 30256                                  
 30257                                  Exec_Save_Environ:
 30258 000063D3 8EC0                    	mov	ES,AX
 30259                                  	;mov	[bp-14],ax
 30260 000063D5 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 30261 000063D8 31F6                    	xor	SI,SI
 30262 000063DA 89F7                    	mov	DI,SI
 30263 000063DC F3A4                    	rep	movsb			; copy the environment
 30264 000063DE B80100                  	mov	AX,1
 30265 000063E1 AB                      	stosw
 30266                                  	;lds	si,[bp-26]
 30267 000063E2 C576E6                  	lds	SI,ExecName
 30268                                  	;mov	cx,[bp-22]
 30269 000063E5 8B4EEA                  	mov	CX,ExecNameLen
 30270 000063E8 F3A4                    	rep	movsb
 30271                                  
 30272                                  Exec_Read_Header:
 30273                                  	; We read in the program header into the above data area and
 30274                                  	; determine where in this memory the image will be located.
 30275                                  
 30276                                  	;Context DS
 30277 000063EA 16                      	push	ss
 30278 000063EB 1F                      	pop	ds
 30279                                  	;mov	cx,26
 30280 000063EC B91A00                  	mov	CX,Exec_Header_Len	; header size
 30281 000063EF BA[5C14]                	mov	DX,exec_signature
 30282 000063F2 06                      	push	ES
 30283 000063F3 1E                      	push	DS
 30284 000063F4 E87803                  	call	ExecRead
 30285 000063F7 1F                      	pop	DS
 30286 000063F8 07                      	pop	ES
 30287 000063F9 7250                    	jc	short Exec_Bad_File
 30288                                  
 30289 000063FB 09C0                    	or	AX,AX
 30290 000063FD 744C                    	jz	short Exec_Bad_File
 30291                                  	;cmp	ax,26
 30292 000063FF 83F81A                  	cmp	AX,Exec_Header_Len	; did we read the right number?
 30293 00006402 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 30294                                  
 30295 00006404 F706[6814]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 30296 0000640A 7504                    	jnz	short Exec_Check_Sig
 30297                                  
 30298                                  	;mov	byte [bp-6],0FFh
 30299 0000640C C646FAFF                	mov	Exec_Load_High,-1
 30300                                  
 30301                                  Exec_Check_Sig:
 30302 00006410 A1[5C14]                	mov	AX,[exec_signature]	; rms;NSS
 30303                                  	;cmp	ax,5A4Dh ; 'MZ'
 30304 00006413 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 30305 00006416 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 30306                                  
 30307                                  	;cmp	ax,4D5Ah ; 'ZM'
 30308 00006418 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 30309 0000641B 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 30310                                  
 30311                                  Exec_Com_Filej:
 30312 0000641D E9A201                  	jmp	Exec_Com_File
 30313                                  
 30314                                  	; We have the program header... determine memory requirements
 30315                                  
 30316                                  Exec_Save_Start:
 30317 00006420 A1[6014]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 30318 00006423 B105                    	mov	CL,5			; convert to paragraphs
 30319 00006425 D3E0                    	shl	AX,CL
 30320 00006427 2B06[6414]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs;rms;NSS
 30321                                  	;mov	[bp-12],ax
 30322 0000642B 8946F4                  	mov	Exec_Res_Len_Para,AX
 30323                                  
 30324                                  		; Do we need to allocate memory?
 30325                                  		; Yes if function is not load-overlay
 30326                                  
 30327                                  	;test	byte [bp-5],2
 30328 0000642E F646FB02                	test	Exec_Func,exec_func_overlay
 30329 00006432 742C                    	jz	short Exec_Allocate	; allocation of space
 30330                                  
 30331                                  		; get load address from block
 30332                                  
 30333                                  	;les	di,[bp-4]
 30334 00006434 C47EFC                  	les	DI,Exec_Blk
 30335 00006437 268B05                  	mov	ax,[es:di]
 30336                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 30337                                  	;mov	[bp-20],ax
 30338 0000643A 8946EC                  	mov	Exec_DMA,AX
 30339 0000643D 268B4502                	mov	AX,[ES:DI+EXEC3.reloc_fac]
 30340                                  	;mov	[bp-10],ax
 30341 00006441 8946F6                  	mov	Exec_Rel_Fac,AX
 30342                                  	; 10/08/2018
 30343 00006444 E9AB00                  	jmp	Exec_Find_Res		; M000
 30344                                  
 30345                                  Exec_No_Mem:
 30346                                  	;mov	al,8
 30347 00006447 B008                    	mov	AL,error_not_enough_memory
 30348 00006449 EB02                    	jmp	short Exec_Bomb
 30349                                  
 30350                                  Exec_Bad_File:
 30351                                  	;mov	al,0Bh
 30352 0000644B B00B                    	mov	AL,error_bad_format
 30353                                  
 30354                                  Exec_Bomb:
 30355                                  	;mov	bx,[bp-8]
 30356 0000644D 8B5EF8                  	mov	BX,Exec_FH
 30357 00006450 E82B03                  	call	Exec_Dealloc
 30358                                  	;LeaveCrit CritMem
 30359 00006453 E8C1BC                  	call	LcritMem
 30360                                  	;save	<AX,BP>
 30361 00006456 50                      	push	ax
 30362 00006457 55                      	push	bp
 30363                                  	;invoke	$CLOSE
 30364 00006458 E8B00C                  	call	_$CLOSE
 30365                                  	;restore <BP,AX>
 30366 0000645B 5D                      	pop	bp
 30367 0000645C 58                      	pop	ax
 30368 0000645D E9DDFE                  	jmp	Exec_Ret_Err
 30369                                  
 30370                                  Exec_Chk_Mem: 
 30371                                  	; MSDOS 6.0    			; M063 - Start
 30372                                  	;mov	al,[AllocMethod]	; save current alloc method in ax
 30373                                  	;mov	bl,[AllocMsave]
 30374                                  	;mov	[AllocMethod], bl	; restore original allocmethod
 30375                                  	;test	bl,HIGH_ONLY 		; Q: was the HIGH_ONLY bit already set
 30376                                  	;jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 30377                                  	;				; N: continue
 30378                                  	;
 30379                                  	;test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 30380                                  	;jz	short Exec_No_Mem	; N: no memory 
 30381                                  	;mov	ax,[save_AX]		; Y: restore ax and
 30382                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 30383                                  	;				; M063 - End
 30384                                  
 30385                                  Exec_Allocate:
 30386                                  	; 09/09/2018
 30387                                  
 30388                                  	; M005 - START
 30389                                  	; If there is no STACK segment for this exe file and if this
 30390                                  	; not an overlay and the resident size is less than 64K - 
 30391                                  	; 256 bytes we shall add 256bytes bytes to the programs 
 30392                                  	; resident memory requirement and set Exec_SP to this value.
 30393                                  
 30394                                  	; MSDOS 6.0
 30395 00006460 C646E300                	mov	Exec_NoStack,0
 30396 00006464 833E[6A14]00            	cmp	word [exec_SS],0	; Q: is there a stack seg
 30397 00006469 7512                    	jne	short ea1		; Y: continue normal processing
 30398 0000646B 833E[6C14]00            	cmp	word [exec_SP],0	; Q: is there a stack ptr
 30399 00006470 750B                    	jne	short ea1		; Y: continue normal processing
 30400                                  
 30401 00006472 FE46E3                  	inc	Exec_NoStack
 30402 00006475 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 30403 00006478 7303                    	jae	short ea1		; Y: don't set Exec_SP
 30404                                  
 30405 0000647A 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 30406                                  ea1:
 30407                                  	; M005 - END
 30408                                  
 30409                                  	; MSDOS 6.0			; M000 - start
 30410                                  	;test	byte [AllocMethod],HIGH_FIRST
 30411                                  	;				; Q: is the alloc strat high_first
 30412                                  	;jz	short Exec_Norm_Alloc	; N: normal allocate
 30413                                  	;				; Y: set high_only bit
 30414                                  	;or	byte [AllocMethod],HIGH_ONLY
 30415                                  	;				; M000 - end
 30416                                  
 30417                                  ;Exec_Norm_Alloc:
 30418                                  	;mov	[save_ax],ax		; M000: save ax for possible 2nd  
 30419                                  					; M000: attempt at allocating memory
 30420                                  	;;push	ax			; M000
 30421                                  
 30422                                  	; MSDOS 3.3
 30423 0000647D 50                      	push	ax	
 30424                                  
 30425 0000647E BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 30426 00006481 1E                      	push	DS
 30427                                  	;invoke	$Alloc			; should have carry set and BX has max
 30428 00006482 E81204                  	call	_$ALLOC
 30429 00006485 1F                      	pop	DS
 30430                                  
 30431                                  	; MSDOS 6.0
 30432                                  	;mov	ax,[save_ax]		; M000
 30433                                  	;;pop	AX			; M000
 30434                                  
 30435                                  	; MSDOS 3.3
 30436 00006486 58                      	pop	ax
 30437                                  
 30438 00006487 83C010                  	add	AX,10h			; room for header
 30439 0000648A 83FB11                  	cmp	BX,11h			; enough room for a header
 30440                                  	; MSDOS 6.0
 30441                                  	;jb	short Exec_Chk_Mem	; M000
 30442                                  	; MSDOS 3.3	
 30443 0000648D 72B8                    	jb	short Exec_No_Mem
 30444                                  
 30445 0000648F 39D8                    	cmp	AX,BX			; is there enough for bare image?
 30446                                  	; MSDOS 6.0
 30447                                  	;ja	short Exec_Chk_Mem	; M000
 30448                                  	; MSDOS 3.3
 30449 00006491 77B4                    	ja	short Exec_No_Mem
 30450                                  
 30451                                  	;test	byte [bp-6],0FFh
 30452 00006493 F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 30453 00006497 7518                    	jnz	short Exec_BX_Max	; use max
 30454                                  
 30455                                  	; 09/09/2018
 30456                                  
 30457 00006499 0306[6614]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 30458                                  	; MSDOS 6.0
 30459                                  	;jc	short Exec_Chk_Mem		; M000
 30460                                  	; MSDOS 3.3
 30461 0000649D 72A8                    	jc	short Exec_No_Mem
 30462                                  
 30463 0000649F 39D8                    	cmp	AX,BX			; enough space?
 30464                                  	; MSDOS 6.0
 30465                                  	;ja	short Exec_Chk_Mem	; M000: nope...	
 30466                                  	; MSDOS 3.3
 30467 000064A1 77A4                    	ja	short Exec_No_Mem
 30468                                  
 30469 000064A3 2B06[6614]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 30470 000064A7 0306[6814]              	add	AX,[exec_max_BSS] 	; go for the MAX
 30471 000064AB 7204                    	jc	short Exec_BX_Max
 30472                                  
 30473 000064AD 39D8                    	cmp	AX,BX
 30474 000064AF 7602                    	jbe	short Exec_Got_Block
 30475                                  
 30476                                  Exec_BX_Max:
 30477 000064B1 89D8                    	mov	AX,BX
 30478                                  
 30479                                  Exec_Got_Block:
 30480                                  	; 03/08/2018 - Retro DOS v3.0
 30481                                  
 30482 000064B3 1E                      	push	DS
 30483 000064B4 89C3                    	mov	BX,AX
 30484                                  	;mov	[bp-16],bx
 30485 000064B6 895EF0                  	mov	Exec_Size,BX
 30486                                  	;invoke	$Alloc			; get the space
 30487 000064B9 E8DB03                  	call	_$ALLOC
 30488 000064BC 1F                      	pop	DS
 30489                                  	; MSDOS 6.0
 30490                                  	;jc	short Exec_Chk_Mem	; M000
 30491                                  	; MSDOS 3.3
 30492 000064BD 7288                    	jc	short Exec_No_Mem
 30493                                  
 30494                                  	; MSDOS 6.0
 30495                                  	;mov	cl,[AllocMsave]		; M063: 
 30496                                  	;mov	[AllocMethod],cl	; M063: restore allocmethod
 30497                                  
 30498                                  ;M029; Begin changes
 30499                                  ; This code does special handling for programs with no stack segment. If so,
 30500                                  ;check if the current block is larger than 64K. If so, we do not modify
 30501                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 30502                                  ;case Exec_SS is not changed.
 30503                                  ;
 30504                                  	; MSDOS 6.0
 30505 000064BF 807EE300                	cmp	Exec_NoStack,0
 30506                                  	;je	@f
 30507 000064C3 7412                    	je	short ea2
 30508                                  
 30509 000064C5 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 30510                                  	;jae	@f			; Y: Exec_SP = 0
 30511 000064C9 730C                    	jae	short ea2
 30512                                  ;
 30513                                  ;Make Exec_SP point at the top of the memory block
 30514                                  ;
 30515 000064CB B104                    	mov	cl,4
 30516 000064CD D3E3                    	shl	bx,cl			; get byte offset
 30517 000064CF 81EB0001                	sub	bx,100h			; take care of PSP
 30518 000064D3 891E[6C14]              	mov	[exec_SP],bx		; Exec_SP = top of block
 30519                                  ea2:
 30520                                  ;@@:
 30521                                  ;
 30522                                  ;M029; end changes
 30523                                  ;
 30524                                  	;mov	[bp-18],ax
 30525 000064D7 8946EE                  	mov	Exec_Load_Block,AX
 30526 000064DA 83C010                  	add	AX,10h
 30527                                  	;test	byte [bp-6],0FFh
 30528 000064DD F646FAFF                	test	Exec_Load_High,-1
 30529 000064E1 7409                    	jz	short Exec_Use_AX	; use ax for load info
 30530                                  
 30531                                  	;add	ax,[bp-16]
 30532 000064E3 0346F0                  	add	AX,Exec_Size		; go to end
 30533                                  	;sub	ax,[bp-12]
 30534 000064E6 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 30535 000064E9 83E810                  	sub	AX,10h			; drop off pdb
 30536                                  
 30537                                  Exec_Use_AX:
 30538                                  	;mov	[bp-10],ax
 30539 000064EC 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 30540                                  	;mov	[bp-20],ax
 30541 000064EF 8946EC                  	mov	Exec_DMA,AX		; beginning of dma
 30542                                  
 30543                                  	; Determine the location in the file of the beginning of
 30544                                  	; the resident
 30545                                  
 30546                                  Exec_Find_Res:
 30547                                  	; MSDOS 6.0
 30548                                  	;mov	dx,[bp-20]
 30549 000064F2 8B56EC                  	mov	DX,Exec_DMA
 30550                                  	;mov	[bp-28],dx
 30551 000064F5 8956E4                  	mov	Exec_DMA_Save,DX
 30552                                  
 30553                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30554 000064F8 8B16[6414]              	mov	DX,[exec_par_dir]
 30555 000064FC 52                      	push	DX
 30556 000064FD B104                    	mov	CL,4
 30557 000064FF D3E2                    	shl	DX,CL			; low word of location
 30558 00006501 58                      	pop	AX
 30559 00006502 B10C                    	mov	CL,12
 30560 00006504 D3E8                    	shr	AX,CL			; high word of location
 30561 00006506 89C1                    	mov	CX,AX			; CX <- high
 30562                                  
 30563                                  		; Read in the resident image (first, seek to it)
 30564                                  	;mov	bx,[bp-8]
 30565 00006508 8B5EF8                  	mov	BX,Exec_FH
 30566 0000650B 1E                      	push	DS
 30567 0000650C 30C0                    	xor	AL,AL
 30568                                  	;invoke	$Lseek			; Seek to resident
 30569 0000650E E86C0D                  	call	_$LSEEK
 30570 00006511 1F                      	pop	DS
 30571 00006512 7303                    	jnc	short Exec_Big_Read
 30572                                  
 30573 00006514 E936FF                  	jmp	Exec_Bomb
 30574                                  
 30575                                  Exec_Big_Read:				; Read resident into memory
 30576                                  	;mov	bx,[bp-12]
 30577 00006517 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 30578 0000651A 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 30579 0000651E 7203                    	jb	short Exec_Read_OK
 30580                                  
 30581 00006520 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 30582                                  
 30583                                  Exec_Read_OK:
 30584                                  	;sub	[bp-12],bx
 30585 00006523 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 30586 00006526 53                      	push	BX
 30587 00006527 B104                    	mov	CL,4
 30588 00006529 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 30589 0000652B 89D9                    	mov	CX,BX			; Count in correct register
 30590 0000652D 1E                      	push	DS
 30591                                  	;mov	ds,[bp-20]
 30592 0000652E 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 30593                                  
 30594 00006531 31D2                    	xor	DX,DX
 30595 00006533 51                      	push	CX			; Save our count
 30596 00006534 E83802                  	call	ExecRead
 30597 00006537 59                      	pop	CX			; Get old count to verify
 30598 00006538 1F                      	pop	DS
 30599 00006539 7248                    	jc	short Exec_Bad_FileJ
 30600                                  
 30601 0000653B 39C1                    	cmp	CX,AX			; Did we read enough?
 30602 0000653D 5B                      	pop	BX			; Get paragraph count back
 30603 0000653E 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 30604                                  
 30605                                  	; The read did not match the request. If we are off by 512
 30606                                  	; bytes or more then the header lied and we have an error.
 30607                                  
 30608 00006540 29C1                    	sub	CX,AX
 30609 00006542 81F90002                	cmp	CX,512
 30610 00006546 733B                    	jae	short Exec_Bad_FileJ
 30611                                  
 30612                                  	; We've read in CX bytes... bump DTA location
 30613                                  
 30614                                  ExecCheckEnd:
 30615                                  	;add	[bp-20],bx
 30616 00006548 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 30617                                  	;test	word [bp-12],0FFFFh
 30618 0000654B F746F4FFFF              	test	Exec_Res_Len_Para,-1
 30619 00006550 75C5                    	jnz	short Exec_Big_Read
 30620                                  
 30621                                  	; The image has now been read in. We must perform relocation
 30622                                  	; to the current location.
 30623                                  
 30624                                  exec_do_reloc:
 30625                                  	;mov	cx,[bp-10]
 30626 00006552 8B4EF6                  	mov	CX,Exec_Rel_Fac
 30627 00006555 A1[6A14]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 30628 00006558 01C8                    	add	AX,CX			; and relocate him
 30629 0000655A A3[5614]                	mov	[exec_init_SS],AX 	; rms;NSS
 30630                                  
 30631 0000655D A1[6C14]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 30632 00006560 A3[5414]                	mov	[exec_init_SP],AX 	; rms;NSS
 30633                                  
 30634 00006563 C406[7014]              	les	AX,[exec_IP]		; rms;NSS
 30635 00006567 A3[5814]                	mov	[exec_init_IP],AX 	; rms;NSS
 30636 0000656A 8CC0                    	mov	AX,ES			; rms;NSS
 30637 0000656C 01C8                    	add	AX,CX			; relocated...
 30638 0000656E A3[5A14]                	mov	[exec_init_CS],AX 	; rms;NSS
 30639                                  
 30640 00006571 31C9                    	xor	CX,CX
 30641 00006573 8B16[7414]              	mov	DX,[exec_rle_table]	; rms;NSS
 30642                                  	;mov	bx,[bp-8]
 30643 00006577 8B5EF8                  	mov	BX,Exec_FH
 30644 0000657A 1E                      	push	DS
 30645 0000657B 31C0                    	xor	AX,AX
 30646                                  	;invoke	$Lseek
 30647 0000657D E8FD0C                  	call	_$LSEEK
 30648 00006580 1F                      	pop	DS
 30649 00006581 7303                    	jnc	short exec_get_entries
 30650                                  
 30651                                  Exec_Bad_FileJ:
 30652 00006583 E9C5FE                  	jmp	Exec_Bad_File
 30653                                  
 30654                                  exec_get_entries:
 30655 00006586 8B16[6214]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 30656                                  
 30657                                  exec_read_reloc:
 30658 0000658A 52                      	push	DX
 30659                                  	;mov	dx,OPENBUF
 30660 0000658B BA[8203]                	mov	DX,Exec_Internal_Buffer
 30661                                  	;mov	cx,388
 30662 0000658E B98401                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (390>>2)<<2
 30663 00006591 1E                      	push	DS
 30664 00006592 E8DA01                  	call	ExecRead
 30665 00006595 07                      	pop	ES
 30666 00006596 5A                      	pop	DX
 30667 00006597 72EA                    	jc	short Exec_Bad_FileJ
 30668                                  
 30669                                  	;mov	cx,97
 30670 00006599 B96100                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (390>>2)
 30671                                  					; Pointer to byte location in header
 30672                                  	;mov	di,OPENBUF
 30673 0000659C BF[8203]                	mov	DI,Exec_Internal_Buffer
 30674                                  	;mov	si,[bp-10]
 30675 0000659F 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 30676                                  
 30677                                  exec_reloc_one:
 30678 000065A2 09D2                    	or	DX,DX			; Any more entries?
 30679 000065A4 7416                    	jz	short Exec_Set_PDBJ
 30680                                  
 30681                                  exec_get_addr:
 30682 000065A6 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 30683 000065A9 8CD8                    	mov	AX,DS			; Relocate address of item
 30684                                  
 30685                                  	; MSDOS 6.0
 30686                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 30687                                  	;add	ax,[bp-28]
 30688 000065AB 0346E4                  	add	AX,Exec_DMA_Save
 30689                                  
 30690 000065AE 8ED8                    	mov	DS,AX
 30691 000065B0 0137                    	add	[BX],SI
 30692 000065B2 83C704                  	add	DI,4
 30693 000065B5 4A                      	dec	DX
 30694 000065B6 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 30695                                  
 30696                                  	; We've exhausted a single buffer's worth. Read in the next
 30697                                  	; piece of the relocation table.
 30698                                  
 30699 000065B8 06                      	push	ES
 30700 000065B9 1F                      	pop	DS
 30701 000065BA EBCE                    	jmp	short exec_read_reloc
 30702                                  
 30703                                  Exec_Set_PDBJ:
 30704                                  
 30705                                  	; MSDOS 6.0
 30706                                  	;
 30707                                  	; We now determine if this is a buggy exe packed file and if 
 30708                                  	; so we patch in the right code. Note that fixexepatch will
 30709                                  	; point to a ret if dos loads low. The load segment as 
 30710                                  	; determined above will be in exec_dma_save
 30711                                  	;
 30712                                  	;push	es
 30713                                  	;push	ax			; M030
 30714                                  	;push	cx			; M030
 30715                                  	;mov	es,Exec_DMA_Save
 30716                                  	;mov	ax,[exec_init_CS]	; M030
 30717                                  	;mov	cx,[exec_init_IP]	; M030
 30718                                  	;call	word [fixexepatch]
 30719                                  	;call	word [Rational386PatchPtr]
 30720                                  	;pop	cx			; M030
 30721                                  	;pop	ax			; M030
 30722                                  	;pop	es
 30723                                  
 30724 000065BC E99D00                  	jmp	Exec_Set_PDB
 30725                                  
 30726                                  Exec_No_Memj:
 30727 000065BF E985FE                  	jmp	Exec_No_Mem
 30728                                  
 30729                                  	; we have a .COM file. First, determine if we are merely
 30730                                  	; loading an overlay.
 30731                                  
 30732                                  Exec_Com_File:
 30733                                  	;test	byte [bp-5],2
 30734 000065C2 F646FB02                	test	Exec_Func,exec_func_overlay
 30735 000065C6 740C                    	jz	short Exec_Alloc_Com_File
 30736                                  	;lds	si,[bp-4]
 30737 000065C8 C576FC                  	lds	SI,Exec_Blk		; get arg block
 30738 000065CB AD                      	lodsw				; get load address
 30739                                  	;mov	[bp-20],ax
 30740 000065CC 8946EC                  	mov	Exec_DMA,AX
 30741 000065CF B8FFFF                  	mov	AX,0FFFFh
 30742 000065D2 EB34                    	jmp	SHORT Exec_Read_Block	; read it all!
 30743                                  
 30744                                  Exec_Chk_Com_Mem:			
 30745                                  	; MSDOS 6.0	     		; M063 - Start
 30746                                  	;mov	al,[AllocMethod]	; save current alloc method in ax
 30747                                  	;mov	bl,[AllocMsave]
 30748                                  	;mov	[AllocMethod],bl	; restore original allocmethod
 30749                                  	;test	bl,HIGH_ONLY 		; Q: was the HIGH_ONLY bit already set
 30750                                  	;jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 30751                                  	;				; N: continue
 30752                                  	;
 30753                                  	;test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 30754                                  	;jz	short Exec_No_Memj	; N: no memory 
 30755                                  	;
 30756                                  	;mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 30757                                  	;xor	bx,bx			; M047: bx => free arena
 30758                                  	;call	ChangeOwner		; M047: free this block
 30759                                  	;
 30760                                  	;jmp	short Exec_Norm_Com_Alloc
 30761                                  	;				; M063 - End
 30762                                  	
 30763                                  	; We must allocate the max possible size block (ick!)
 30764                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 30765                                  	; size of block.
 30766                                  
 30767                                  Exec_Alloc_Com_File:
 30768                                  	; MSDOS 6.0			; M000 -start
 30769                                  	;test	byte [AllocMethod],HIGH_FIRST
 30770                                  	;				; Q: is the alloc strat high_first
 30771                                  	;jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 30772                                  	;				; Y: set high_only bit
 30773                                  	;or	byte [AllocMethod],HIGH_ONLY
 30774                                  	;				; M000 - end
 30775                                  ;Exec_Norm_Com_Alloc:			; M000
 30776                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30777 000065D4 BBFFFF                  	mov	BX,0FFFFh
 30778                                  	;invoke	$Alloc			; largest piece available as error
 30779 000065D7 E8BD02                  	call	_$ALLOC
 30780 000065DA 09DB                    	or	BX,BX
 30781                                  	; MSDOS 6.0
 30782                                  	;jz	short Exec_Chk_Com_Mem	; M000
 30783                                  	; MSDOS 3.3
 30784 000065DC 74E1                    	jz	short Exec_No_Memj
 30785                                  
 30786                                  	;mov	[bp-16],bx
 30787 000065DE 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 30788 000065E1 53                      	push	BX
 30789                                  	;invoke	$ALLOC			; largest piece available as error
 30790 000065E2 E8B202                  	call	_$ALLOC
 30791 000065E5 5B                      	pop	BX			; get size of block...
 30792                                  	;mov	[bp-18],ax
 30793 000065E6 8946EE                  	mov	Exec_Load_Block,AX
 30794 000065E9 83C010                  	add	AX,10h			; increment for header
 30795                                  	;mov	[bp-20],ax
 30796 000065EC 8946EC                  	mov	Exec_DMA,AX
 30797 000065EF 31C0                    	xor	AX,AX			; presume 64K read...
 30798 000065F1 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 30799 000065F5 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 30800                                  
 30801 000065F7 89D8                    	mov	AX,BX			; convert size to bytes
 30802 000065F9 B104                    	mov	CL,4
 30803 000065FB D3E0                    	shl	AX,CL
 30804                                  	; MSDOS 6.0
 30805 000065FD 3D0002                          cmp     AX,200h                 ; enough memory for PSP and stack?
 30806                                  ;	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 30807                                  ;	;jbe	short Exec_No_Memj	; M000: jump if not
 30808                                  	; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 30809                                  	;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 30810 00006600 76BD                    	jbe	short Exec_No_Memj	; M000: jump if not
 30811                                  
 30812                                  					; M047: size of the block is < 64K
 30813 00006602 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 30814                                  
 30815                                  Exec_Read_Com:
 30816                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30817 00006605 2D0001                  	sub	AX,100h 		; remember size of psp
 30818                                  
 30819                                  Exec_Read_Block:
 30820 00006608 50                      	push	AX			; save number to read
 30821                                  	;mov	bx,[bp-8]
 30822 00006609 8B5EF8                  	mov	BX,Exec_FH		; of com file
 30823 0000660C 31C9                    	xor	CX,CX			; but seek to 0:0
 30824 0000660E 89CA                    	mov	DX,CX
 30825 00006610 31C0                    	xor	AX,AX			; seek relative to beginning
 30826                                  	;invoke	$Lseek			; back to beginning of file
 30827 00006612 E8680C                  	call	_$LSEEK
 30828 00006615 59                      	pop	CX			; number to read
 30829                                  	;mov	ds,[bp-20]
 30830 00006616 8E5EEC                  	mov	DS,Exec_DMA
 30831 00006619 31D2                    	xor	DX,DX
 30832 0000661B 51                      	push	CX
 30833 0000661C E85001                  	call	ExecRead
 30834 0000661F 5E                      	pop	SI			; get number of bytes to read
 30835 00006620 7303                    	jnc	short OkRead
 30836 00006622 E926FE                  	jmp	Exec_Bad_File
 30837                                  
 30838                                  	; 10/09/2018
 30839                                  OkRead:
 30840 00006625 39F0                    	cmp	AX,SI			; did we read them all?
 30841                                  	; MSDOS 6.0
 30842                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 30843                                  	; MSDOS 3.3
 30844 00006627 7496                    	jz	short Exec_No_Memj	; M00: exactly the wrong number...
 30845                                  	
 30846                                  	; MSDOS 6.0
 30847                                  	;mov	bl,[AllocMsave]		; M063
 30848                                  	;mov	[AllocMethod],bl	; M063: restore allocmethod
 30849                                  
 30850                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30851                                  	;test	byte [bp-5],2
 30852 00006629 F646FB02                	test	Exec_Func,exec_func_overlay
 30853 0000662D 752D                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 30854                                  
 30855                                  	;mov	ax,[bp-20]
 30856 0000662F 8B46EC                  	mov	AX,Exec_DMA
 30857 00006632 83E810                  	sub	AX,10h
 30858 00006635 36A3[5A14]              	mov	[SS:exec_init_CS],AX
 30859 00006639 36C706[5814]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 30860                                  
 30861                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 30862                                  	; of 0 on stack.
 30863                                  
 30864 00006640 81C6FE00                	add	SI,0FEh 		; make room for stack
 30865                                  
 30866                                  	; MSDOS 6.0
 30867 00006644 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 30868 00006647 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 30869 00006649 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 30870                                  
 30871                                  Exec_St_Ok:
 30872                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30873 0000664D 368936[5414]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 30874 00006652 36A3[5614]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 30875 00006656 8ED8                    	mov	DS,AX
 30876 00006658 C7040000                	mov	WORD [SI],0		; 0 for return
 30877                                  
 30878                                  	; MSDOS 6.0
 30879                                  	;
 30880                                  	; M068
 30881                                  	;
 30882                                  	; We now determine if this is a Copy Protected App. If so the 
 30883                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 30884                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 30885                                  
 30886                                  	;call	word ptr [ChkCopyProt]	
 30887                                  
 30888                                  Exec_Set_PDB:
 30889                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30890                                  	;mov	bx,[bp-8]
 30891 0000665C 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 30892 0000665F E81C01                  	call	Exec_Dealloc
 30893 00006662 55                      	push	BP
 30894                                  	;invoke	$Close			; release the jfn
 30895 00006663 E8A50A                  	call	_$CLOSE
 30896 00006666 5D                      	pop	BP
 30897 00006667 E81F01                  	call	Exec_Alloc
 30898                                  	;test	byte [bp-5],2
 30899 0000666A F646FB02                	test	Exec_Func,exec_func_overlay
 30900 0000666E 7406                    	jz	short Exec_Build_Header
 30901                                  
 30902                                  	; MSDOS 6.0
 30903                                  	;call	Scan_Execname
 30904                                  	;call	Scan_Special_Entries
 30905                                  	;
 30906                                  ;SR;
 30907                                  ;The current lie strategy uses the PSP to store the lie version. However,
 30908                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 30909                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 30910                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 30911                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 30912                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 30913                                  ;issues the version check, it gets the lie version until the next overlay
 30914                                  ;call is issued.
 30915                                  ;
 30916                                  	;cmp	DriverLoad,0		;was Sysinit processing done?
 30917                                  	;je	norm_ovl		;yes, no special handling
 30918                                  	;push	si
 30919                                  	;push	es
 30920                                  	;les	si,BiosDataPtr		;get ptr to BIOS data block
 30921                                  	;cmp	byte ptr es:[si],0		;in Sysinit?
 30922                                  	;je	sysinit_done		;no, Sysinit is finished
 30923                                  	;
 30924                                  	;mov	es,CurrentPDB		;es = current PSP (Sysinit PSP)
 30925                                  	;push	Special_Version
 30926                                  	;pop	es:PDB_Version		;store lie version in Sysinit PSP
 30927                                  		;;; PDB.VERSION
 30928                                  	;jmp	short setver_done
 30929                                  ;sysinit_done:
 30930                                  	;mov	DriverLoad,0		;Sysinit done,special handling off
 30931                                  ;setver_done:
 30932                                  	;pop	es
 30933                                  	;pop	si
 30934                                  ;norm_ovl:
 30935                                  
 30936                                  	;leave
 30937 00006670 89EC                    	mov	sp,bp		
 30938 00006672 5D                      	pop	bp
 30939                                  
 30940                                  	;transfer SYS_RET_OK		; overlay load -> done
 30941 00006673 E925B1                  	jmp	SYS_RET_OK
 30942                                  
 30943                                  Exec_Build_Header:
 30944                                  	;mov	dx,[bp-18]
 30945 00006676 8B56EE                  	mov	DX,Exec_Load_Block
 30946                                  					; assign the space to the process
 30947                                  	;mov	si,1
 30948 00006679 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 30949                                  	;mov	ax,[bp-14]
 30950 0000667C 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 30951 0000667F 09C0                    	or	AX,AX
 30952 00006681 7405                    	jz	short No_Owner		; no environment
 30953                                  
 30954 00006683 48                      	dec	AX			; point to header
 30955 00006684 8ED8                    	mov	DS,AX
 30956 00006686 8914                    	mov	[SI],DX 		; assign ownership
 30957                                  
 30958                                  No_Owner:
 30959                                  	;mov	ax,[bp-18]
 30960 00006688 8B46EE                  	mov	AX,Exec_Load_Block	; get load block pointer
 30961 0000668B 48                      	dec	AX
 30962 0000668C 8ED8                    	mov	DS,AX			; point to header
 30963 0000668E 8914                    	mov	[SI],DX 		; assign ownership
 30964                                  
 30965                                  	; MSDOS 6.0
 30966                                  	;push	DS			;AN000;MS. make ES=DS
 30967                                  	;pop	ES			;AN000;MS.
 30968                                  	;mov	DI,Arena_Name		;AN000;MS. ES:DI points to destination
 30969                                  	;call	Scan_Execname		;AN007;MS. parse execname
 30970                                  	;				;	   ds:si->name, cx=name length
 30971                                  	;push	CX			;AN007;;MS. save for fake version
 30972                                  	;push	SI			;AN007;;MS. save for fake version
 30973                                  	;
 30974                                  ;MoveName:				;AN000;
 30975                                  	;lodsb				;AN000;;MS. get char
 30976                                  	;cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 30977                                  	;jz	Mem_Done		;AN000;;MS. no, move to header
 30978                                  	;				;AN000;
 30979                                  	;stosb				;AN000;;MS. move char
 30980                                  	;				; MSKK bug fix - limit length copied
 30981                                  	;cmp	di,16			; end of memory arena block?
 30982                                  	;jae	mem_done		; jump if so
 30983                                  	;
 30984                                  	;loop	movename		;AN000;;MS. continue
 30985                                  ;Mem_Done:				;AN000;
 30986                                  	;xor	AL,AL			;AN000;;MS. make ASCIIZ
 30987                                  	;cmp	DI,SIZE ARENA		;AN000;MS. if not all filled
 30988                                  	;jae	Fill8			;AN000;MS.
 30989                                  	;
 30990                                  	;stosb				;AN000;MS.
 30991                                  	;
 30992                                  ;Fill8:					;AN000;
 30993                                  	;pop	SI			;AN007;MS. ds:si -> file name
 30994                                  	;pop	CX			;AN007;MS.
 30995                                  	;
 30996                                  	;call	Scan_Special_Entries	;AN007;MS.
 30997                                  
 30998                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30999 00006690 52                      	push	DX
 31000                                  	;mov	si,[bp-16]
 31001 00006691 8B76F0                  	mov	SI,Exec_Size
 31002 00006694 01D6                    	add	SI,DX
 31003                                  	;Invoke	$Dup_PDB		; ES is now PDB
 31004 00006696 E855B8                  	call	_$DUP_PDB
 31005 00006699 5A                      	pop	DX
 31006                                  
 31007                                  	;push	word [bp-14]
 31008 0000669A FF76F2                  	push	Exec_Environ
 31009                                  	;pop	WORD [ES:2Ch]
 31010 0000669D 268F062C00              	pop	word [ES:PDB.ENVIRON]
 31011                                  
 31012                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 31013                                  					; version number in PSP
 31014                                   	;push	word [Special_Version]	; Set the DOS version number to
 31015                                  	;pop	word [ES:PDB_Version]	; to be used for this application
 31016                                  		; PDB.VERSION
 31017                                  
 31018                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 31019                                  	;lds	si,[bp-4]
 31020 000066A2 C576FC                  	lds	SI,Exec_Blk		; get the block
 31021 000066A5 1E                      	push	DS			; save its location
 31022 000066A6 56                      	push	SI
 31023                                  	;lds	si, [si+6]
 31024 000066A7 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 31025                                  
 31026                                  	; DS points to user space 5C FCB
 31027                                  
 31028 000066AA B90C00                  	mov	CX,12			; copy drive, name and ext
 31029 000066AD 51                      	push	CX
 31030 000066AE BF5C00                  	mov	DI,5Ch
 31031 000066B1 8A1C                    	mov	BL,[SI]
 31032 000066B3 F3A4                    	rep	movsb
 31033                                  
 31034                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 31035                                  
 31036 000066B5 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 31037 000066B7 AB                      	stosw
 31038 000066B8 AB                      	stosw
 31039                                  
 31040                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 31041                                  
 31042 000066B9 59                      	pop	CX
 31043 000066BA 5E                      	pop	SI			; get block
 31044 000066BB 1F                      	pop	DS
 31045 000066BC 1E                      	push	DS			; save (again)
 31046 000066BD 56                      	push	SI
 31047                                  	;lds	si,[si+0Ah]
 31048 000066BE C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 31049                                  
 31050                                  	; DS points to user space 6C FCB
 31051                                  
 31052 000066C1 8A3C                    	mov	BH,[SI] 		; do same as above
 31053 000066C3 F3A4                    	rep	movsb
 31054 000066C5 AB                      	stosw
 31055 000066C6 AB                      	stosw
 31056 000066C7 5E                      	pop	SI			; get block (last time)
 31057 000066C8 1F                      	pop	DS
 31058                                  	;ld	si,[si+2]
 31059 000066C9 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 31060                                  
 31061                                  	; DS points to user space 80 command line
 31062                                  
 31063 000066CC 80C980                  	or	CL,80h
 31064 000066CF 89CF                    	mov	DI,CX
 31065 000066D1 F3A4                    	rep	movsb			; Wham!
 31066                                  
 31067                                  	; Process BX into default AX (validity of drive specs on args).
 31068                                  	; We no longer care about DS:SI.
 31069                                  
 31070 000066D3 FEC9                    	dec	CL			; get 0FFh in CL
 31071 000066D5 88F8                    	mov	AL,BH
 31072 000066D7 30FF                    	xor	BH,BH
 31073                                  	;invoke	GetVisDrv
 31074 000066D9 E8C605                  	call	GetVisDrv
 31075 000066DC 7302                    	jnc	short Exec_BL
 31076                                  
 31077 000066DE 88CF                    	mov	BH,CL
 31078                                  
 31079                                  Exec_BL:
 31080 000066E0 88D8                    	mov	AL,BL
 31081 000066E2 30DB                    	xor	BL,BL
 31082                                  	;invoke	GetVisDrv
 31083 000066E4 E8BB05                  	call	GetVisDrv
 31084 000066E7 7302                    	jnc	short Exec_Set_Return
 31085                                  
 31086 000066E9 88CB                    	mov	BL,CL
 31087                                  
 31088                                  Exec_Set_Return:
 31089                                  	;invoke	Get_User_Stack			; get his return address
 31090 000066EB E85BAF                  	call	Get_User_Stack
 31091                                  
 31092                                  	;push	word [si+14h]
 31093 000066EE FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 31094                                  	;push	word [si+12h]
 31095 000066F1 FF7412                  	push	word [SI+user_env.user_IP]
 31096                                  	;push	word [si+14h]
 31097 000066F4 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 31098                                  	;push	word [si+12h]
 31099 000066F7 FF7412                  	push	word [SI+user_env.user_IP]
 31100                                  	;pop	word [ES:0Ah]
 31101 000066FA 268F060A00              	pop	WORD [ES:PDB.EXIT]
 31102                                  	;pop	word [ES:0Ch]
 31103 000066FF 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 31104                                  
 31105 00006704 31C0                    	xor	AX,AX
 31106 00006706 8ED8                    	mov	DS,AX
 31107                                  					; save them where we can get them
 31108                                  					; later when the child exits.
 31109                                  	;pop	word [88h]
 31110 00006708 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 31111                                  	;pop	word [90h]
 31112 0000670C 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 31113                                  
 31114 00006710 36C706[F802]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 31115 00006717 368E1E[FC02]            	mov	DS,[SS:CurrentPDB]	; SS Override
 31116 0000671C 368C1E[FA02]            	mov	[SS:DMAADD+2],DS	; SS Override
 31117                                  
 31118                                  	;test	byte [bp-5],1
 31119 00006721 F646FB01                	test	Exec_Func,exec_func_no_execute
 31120 00006725 7427                    	jz	short exec_go
 31121                                  
 31122 00006727 36C536[5414]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 31123                                  	;les	di,[bp-4]
 31124 0000672C C47EFC                  	les	DI,Exec_Blk		; and block for return
 31125                                  	;mov	[es:di+10h],ds
 31126 0000672F 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 31127                                  
 31128 00006733 4E                      	dec	SI			; 'push' default AX
 31129 00006734 4E                      	dec	SI
 31130 00006735 891C                    	mov	[SI],BX 		; save default AX reg
 31131                                  	;mov	[es:di+0Eh], si
 31132 00006737 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 31133                                  
 31134 0000673B 36C506[5814]            	lds	AX,[SS:exec_init_IP]	; SS Override
 31135                                  	;mov	[es:di+14h],ds
 31136 00006740 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 31137                                  	;mov	[es:di+12h],ax
 31138 00006744 26894512                	mov	[ES:DI+EXEC1.IP],AX
 31139                                  
 31140                                  	;leave
 31141 00006748 89EC                    	mov	sp,bp
 31142 0000674A 5D                      	pop	bp	
 31143                                  
 31144                                  	;transfer SYS_RET_OK
 31145 0000674B E94DB0                  	jmp	SYS_RET_OK
 31146                                  
 31147                                  exec_go:
 31148 0000674E 36C536[5814]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 31149 00006753 36C43E[5414]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 31150                                  
 31151 00006758 8CC0                    	mov	AX,ES
 31152                                  
 31153                                  	; MSDOS 6.0
 31154                                  	;cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 31155                                  	;je	short Xfer_To_User	; N: transfer control to user
 31156                                  
 31157                                  	;push	ds			; Y: control must go to low mem stub
 31158                                  	;	
 31159                                  	;push	cs			;    where we disable a20 and Xfer 
 31160                                  	;pop	ds			;    control to user 
 31161                                  	;
 31162                                  	;or	byte [DOS_FLAG],EXECA20OFF ; M068:
 31163                                  	;				; M004: Set bit to signal int 21
 31164                                  	;				; ah = 25 & ah= 49. See dossym.inc 
 31165                                  	;				; under TAG M003 & M009 for 
 31166                                  	;				; explanation
 31167                                  	;mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 31168                                  	;				; M068: going to be turned OFF.
 31169                                  	;
 31170                                  	;mov	ax,ds			; ax = segment of low mem stub
 31171                                  	;pop	ds
 31172                                  	;
 31173                                  	;push	ax			; ret far into the low mem stub
 31174                                  	;mov	ax,Disa20_Xfer
 31175                                  	;push	ax
 31176                                  	;mov	AX,ES			; restore ax
 31177                                  	;retf
 31178                                  
 31179                                  Xfer_To_User:
 31180                                  	; DS:SI points to entry point
 31181                                  	; AX:DI points to initial stack
 31182                                  	; DX has PDB pointer
 31183                                  	; BX has initial AX value
 31184                                  
 31185 0000675A FA                      	cli
 31186                                  	; 15/08/2018
 31187 0000675B 36C606[ED02]00          	mov	BYTE [SS:INDOS],0	; SS Override
 31188                                  
 31189 00006761 8ED0                    	mov	SS,AX			; set up user's stack
 31190 00006763 89FC                    	mov	SP,DI			; and SP
 31191 00006765 FB                      	sti
 31192                                  
 31193 00006766 1E                      	push	DS			; fake long call to entry
 31194 00006767 56                      	push	SI
 31195 00006768 8EC2                    	mov	ES,DX			; set up proper seg registers
 31196 0000676A 8EDA                    	mov	DS,DX
 31197 0000676C 89D8                    	mov	AX,BX			; set up proper AX
 31198                                  
 31199 0000676E CB                      	retf
 31200                                  
 31201                                  ; 04/08/2018 - Retro DOS v3.0
 31202                                  
 31203                                  ;----------------------------------------------------------------------------
 31204                                  ;
 31205                                  ;----------------------------------------------------------------------------
 31206                                  
 31207                                  ExecRead:
 31208 0000676F E80C00                  	CALL	Exec_Dealloc
 31209                                  	;mov	bx,[bp-8]
 31210 00006772 8B5EF8                  	MOV	bx,Exec_FH
 31211 00006775 55                      	PUSH	BP
 31212 00006776 E8AA0A                  	call	_$READ
 31213 00006779 5D                      	POP	BP
 31214 0000677A E80C00                  	CALL	Exec_Alloc
 31215 0000677D C3                      	retn
 31216                                  
 31217                                  ;----------------------------------------------------------------------------
 31218                                  ;
 31219                                  ;----------------------------------------------------------------------------
 31220                                  
 31221                                  Exec_Dealloc:
 31222 0000677E 53                      	push	BX
 31223                                  	;mov	bx,0
 31224 0000677F 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 31225 00006781 E88BB9                  	call	EcritMem
 31226 00006784 E81000                  	call	ChangeOwners
 31227 00006787 5B                      	pop	BX
 31228 00006788 C3                      	retn
 31229                                  
 31230                                  ;----------------------------------------------------------------------------
 31231                                  ;
 31232                                  ;----------------------------------------------------------------------------
 31233                                  
 31234                                  Exec_Alloc:
 31235 00006789 53                      	push	BX
 31236                                  	;mov	bx,[SS:CurrentPDB]	; SS Override
 31237 0000678A 2E8B1E[FC02]            	mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 31238 0000678F E80500                  	call	ChangeOwners
 31239 00006792 E882B9                  	call	LcritMem
 31240 00006795 5B                      	pop	BX
 31241 00006796 C3                      	retn
 31242                                  
 31243                                  ;----------------------------------------------------------------------------
 31244                                  ;
 31245                                  ;----------------------------------------------------------------------------
 31246                                  
 31247                                  ChangeOwners:
 31248 00006797 9C                      	pushf
 31249 00006798 50                      	push	AX
 31250                                  	;mov	ax,[bp-14]
 31251 00006799 8B46F2                  	mov	AX,Exec_Environ
 31252 0000679C E80900                  	call	ChangeOwner
 31253                                  	;mov	ax,[bp-18]
 31254 0000679F 8B46EE                  	mov	AX,Exec_Load_Block
 31255 000067A2 E80300                  	call	ChangeOwner
 31256 000067A5 58                      	pop	AX
 31257 000067A6 9D                      	popf
 31258                                  chgown_retn:
 31259 000067A7 C3                      	retn
 31260                                  
 31261                                  ;----------------------------------------------------------------------------
 31262                                  ;
 31263                                  ;----------------------------------------------------------------------------
 31264                                  
 31265                                  ChangeOwner:
 31266 000067A8 09C0                    	or	AX,AX			; is area allocated?
 31267 000067AA 74FB                    	jz	short chgown_retn	; no, do nothing
 31268 000067AC 48                      	dec	AX
 31269 000067AD 1E                      	push	DS
 31270 000067AE 8ED8                    	mov	DS,AX
 31271 000067B0 891E0100                	mov	[ARENA.OWNER],BX
 31272 000067B4 1F                      	pop	DS
 31273 000067B5 C3                      	retn
 31274                                  
 31275                                  
 31276                                  ; MSDOS 6.0
 31277                                  ;----------------------------------------------------------------------------
 31278                                  ;
 31279                                  ;----------------------------------------------------------------------------
 31280                                  
 31281                                  ;Procedure	Scan_Execname,near
 31282                                  ;	ASSUME	SS:DosData
 31283                                  ;
 31284                                  ;	lds	SI,ExecName		; DS:SI points to name
 31285                                  ;Entry	Scan_Execname1			; M028
 31286                                  ;Save_Begin:				;
 31287                                  ;	mov	CX,SI			; CX= starting addr
 31288                                  ;Scan0:					;
 31289                                  ;	lodsb				; get char
 31290                                  ;
 31291                                  ;	cmp	AL,':'			; is ':' , may be A:name
 31292                                  ;	jz	save_begin		; yes, save si
 31293                                  ;	cmp	AL,'\'                  ; is '\', may be A:\name
 31294                                  ;	jz	save_begin		; yes, save si
 31295                                  ;	cmp	AL,0			; is end of name
 31296                                  ;	jnz	scan0			; no, continue scanning
 31297                                  ;	sub	SI,CX			; get name's length
 31298                                  ;	xchg	SI,CX			; cx= length, si= starting addr
 31299                                  ;
 31300                                  ;	return
 31301                                  ;
 31302                                  ;EndProc Scan_Execname
 31303                                  
 31304                                  ; MSDOS 6.0
 31305                                  ;----------------------------------------------------------------------------
 31306                                  ;
 31307                                  ;----------------------------------------------------------------------------
 31308                                  
 31309                                  ;Procedure    Scan_Special_Entries,near
 31310                                  ;	assume	SS:DOSDATA
 31311                                  ;
 31312                                  ;	dec	CX			; cx= name length
 31313                                  ;;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 31314                                  ;					;reset to current version
 31315                                  ;	mov    [Special_Version],(Minor_Version SHL 8) + Major_Version
 31316                                  ;;***	call	Reset_Version
 31317                                  ;
 31318                                  ;;M060	push	SS
 31319                                  ;;M060	pop	ES
 31320                                  ;
 31321                                  ;	les	DI,SS:UU_IFS_DOS_CALL	;M060; ES:DI --> Table in SETVER.SYS
 31322                                  ;	mov	AX,ES			;M060; First do a NULL ptr check to
 31323                                  ;	or	AX,DI			;M060; be sure the table exists
 31324                                  ;	jz	End_List		;M060; If ZR then no table
 31325                                  ;
 31326                                  ;GetEntries:
 31327                                  ;	mov	AL,ES:[DI]		; end of list
 31328                                  ;	or	AL,AL
 31329                                  ;	jz	End_List		; yes
 31330                                  ;
 31331                                  ;	mov	[Temp_Var2],DI		; save di
 31332                                  ;	cmp	AL,CL			; same length ?
 31333                                  ;	jnz	SkipOne 		; no
 31334                                  ;
 31335                                  ;	inc	DI			; es:di -> special name
 31336                                  ;	push	CX			; save length and name addr
 31337                                  ;	push	SI
 31338                                  ;
 31339                                  ;;
 31340                                  ;; M050 - BEGIN
 31341                                  ;;
 31342                                  ;	push	ax			; save len
 31343                                  ;sse_next_char:
 31344                                  ;	lodsb
 31345                                  ;	call	UCase
 31346                                  ;	scasb
 31347                                  ;	jne	Not_Matched
 31348                                  ;	loop	sse_next_char
 31349                                  ;	
 31350                                  ;;
 31351                                  ;;	repz	cmpsb			; same name ?
 31352                                  ;;
 31353                                  ;;	jnz	Not_Matched		; no
 31354                                  ;;
 31355                                  ;	pop	ax			; take len off the stack
 31356                                  ;;
 31357                                  ;; M050 - END
 31358                                  ;;
 31359                                  ;	mov	AX,ES:[DI]		; get special version
 31360                                  ;	mov	[Special_Version],AX	; save it
 31361                                  ;
 31362                                  ;;***	mov	AL,ES:[DI+2]		; get fake count
 31363                                  ;;***	mov	[Fake_Count],AL 	; save it
 31364                                  ;
 31365                                  ;	pop	SI
 31366                                  ;	pop	CX
 31367                                  ;	jmp	SHORT end_list
 31368                                  ;
 31369                                  ;Not_Matched:
 31370                                  ;	pop	ax			; get len from stack ; M050
 31371                                  ;	pop	SI			; restore si,cx
 31372                                  ;	pop	CX
 31373                                  ;
 31374                                  ;SkipOne:
 31375                                  ;	mov	DI,[Temp_Var2]		; restore old di use SS Override
 31376                                  ;	xor	AH,AH			; position to next entry
 31377                                  ;	add	DI,AX
 31378                                  ;
 31379                                  ;	add	DI,3			; DI -> next entry length
 31380                                  ;;***	add	DI,4			; DI -> next entry length
 31381                                  ;
 31382                                  ;	jmp	Getentries
 31383                                  ;
 31384                                  ;End_List:
 31385                                  ;	return
 31386                                  ;
 31387                                  ;EndProc Scan_Special_Entries
 31388                                  
 31389                                  
 31390                                  ; 04/08/2018 - Retro DOS v3.0
 31391                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 31392                                  
 31393                                  ;----------------------------------------------------------------------------
 31394                                  ;SUBTTL Terminate and stay resident handler
 31395                                  ;
 31396                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 31397                                  ;	    truncate the current block.
 31398                                  ;
 31399                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 31400                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 31401                                  ;	    and restoring the vectors.
 31402                                  ;
 31403                                  ;----------------------------------------------------------------------------
 31404                                  
 31405                                  _$KEEP_PROCESS:
 31406 000067B6 50                      	push	AX			; keep exit code around
 31407                                  	;mov	byte [SS:EXIT_TYPE],3
 31408 000067B7 36C606[3905]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 31409 000067BD 368E06[FC02]            	mov	ES,[SS:CurrentPDB]
 31410 000067C2 83FA06                  	cmp	DX,6h			; keep enough space around for system
 31411 000067C5 7303                    	jae	short Keep_Shrink	; info
 31412                                  
 31413 000067C7 BA0600                  	mov	DX,6h
 31414                                  
 31415                                  Keep_Shrink:
 31416 000067CA 89D3                    	mov	BX,DX
 31417 000067CC 53                      	push	BX
 31418 000067CD 06                      	push	ES
 31419 000067CE E8BF01                  	call	_$SETBLOCK		; ignore return codes.
 31420 000067D1 1F                      	pop	DS
 31421 000067D2 5B                      	pop	BX
 31422 000067D3 7207                    	jc	short Keep_Done		; failed on modification
 31423                                  
 31424 000067D5 8CD8                    	mov	AX,DS
 31425 000067D7 01D8                    	add	AX,BX
 31426                                  	;mov	[2],ax
 31427 000067D9 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 31428                                  
 31429                                  Keep_Done:
 31430 000067DC 58                      	pop	AX
 31431 000067DD EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 31432                                  
 31433                                  ;----------------------------------------------------------------------------
 31434                                  ;
 31435                                  ;----------------------------------------------------------------------------
 31436                                  
 31437                                  STAY_RESIDENT:
 31438                                  	;mov	ax,3100h
 31439 000067DF B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 31440 000067E2 83C20F                  	add	DX,15
 31441 000067E5 D1DA                    	rcr	DX,1
 31442 000067E7 B103                    	mov	CL,3
 31443 000067E9 D3EA                    	shr	DX,CL
 31444                                  
 31445 000067EB E9FAAC                  	jmp	COMMAND
 31446                                  
 31447                                  ;----------------------------------------------------------------------------
 31448                                  ;SUBTTL $EXIT - return to parent process
 31449                                  ;   Assembler usage:
 31450                                  ;	    MOV     AL, code
 31451                                  ;	    MOV     AH, Exit
 31452                                  ;	    INT     int_command
 31453                                  ;   Error return:
 31454                                  ;	    None.
 31455                                  ;
 31456                                  ;----------------------------------------------------------------------------
 31457                                  
 31458                                  _$EXIT:
 31459                                  	; 04/08/2018 - Retro DOS v3.0
 31460                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 31461 000067EE 30E4                    	xor	AH,AH
 31462 000067F0 368626[1703]            	xchg	AH,[SS:DidCTRLC]
 31463 000067F5 08E4                    	or	AH,AH
 31464                                  	;mov	BYTE [SS:EXIT_TYPE],0
 31465 000067F7 36C606[3905]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 31466 000067FD 7406                    	jz	short exit_inner
 31467                                  	;mov	BYTE [SS:EXIT_TYPE],1
 31468 000067FF 36C606[3905]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 31469                                  
 31470                                  	;entry	Exit_inner
 31471                                  exit_inner:
 31472 00006805 E841AE                  	call	Get_User_Stack		;PBUGBUG
 31473                                  
 31474 00006808 36FF36[FC02]            	push	word [ss:CurrentPDB]
 31475                                  	;pop	word [si+14h]
 31476 0000680D 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 31477 00006810 EB08                    	jmp	short abort_inner
 31478                                  
 31479                                  ;BREAK <$ABORT -- Terminate a process>
 31480                                  ;----------------------------------------------------------------------------
 31481                                  ; Inputs:
 31482                                  ;	user_CS:00 must point to valid program header block
 31483                                  ; Function:
 31484                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 31485                                  ;	to the terminate address
 31486                                  ; Returns:
 31487                                  ;	TO THE TERMINATE ADDRESS
 31488                                  ;----------------------------------------------------------------------------
 31489                                  
 31490                                  _$ABORT:
 31491 00006812 30C0                    	xor	AL,AL
 31492                                  	;mov	byte [SS:EXIT_TYPE],0
 31493                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 31494 00006814 36C606[3905]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 31495                                  
 31496                                  	; abort_inner must have AL set as the exit code! The exit type
 31497                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 31498                                  	; to be correct as the one that is terminating.
 31499                                  
 31500                                  abort_inner:
 31501 0000681A 368A26[3905]            	mov	AH,[SS:EXIT_TYPE]
 31502 0000681F 36A3[0003]              	mov	[SS:exit_code],AX
 31503 00006823 E823AE                  	call	Get_User_Stack
 31504                                  
 31505                                  	;mov	ds,[si+14h]
 31506 00006826 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 31507 00006829 31C0                    	xor	AX,AX
 31508 0000682B 8EC0                    	mov	ES,AX
 31509                                  	;mov	si,10
 31510 0000682D BE0A00                  	mov	SI,SAVEXIT
 31511                                  	;mov	di,88h
 31512 00006830 BF8800                  	mov	DI,addr_int_terminate
 31513 00006833 A5                      	movsw
 31514 00006834 A5                      	movsw
 31515 00006835 A5                      	movsw
 31516 00006836 A5                      	movsw
 31517 00006837 A5                      	movsw
 31518 00006838 A5                      	movsw
 31519 00006839 E929F4                  	jmp	reset_environment
 31520                                  
 31521                                  ; MSDOS 6.0
 31522                                  ;----------------------------------------------------------------------------
 31523                                  ;
 31524                                  ; fixexepatch will point to this is DOS loads low. 
 31525                                  ;
 31526                                  ;----------------------------------------------------------------------------
 31527                                  
 31528                                  ;retexepatch	proc	near
 31529                                  ;	
 31530                                  ;	ret
 31531                                  ;
 31532                                  ;retexepatch 	endp
 31533                                  
 31534                                  
 31535                                  ;============================================================================
 31536                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 31537                                  ;============================================================================
 31538                                  ; 04/08/2018 - Retro DOS v3.0
 31539                                  
 31540                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 31541                                  
 31542                                  ;**
 31543                                  ;	Microsoft Confidential
 31544                                  ;	Copyright (C) Microsoft Corporation 1991
 31545                                  ;	All Rights Reserved.
 31546                                  ;
 31547                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 31548                                  ;	I/O specs are defined in DISPATCH.
 31549                                  ;
 31550                                  ;	$ALLOC
 31551                                  ;	$SETBLOCK
 31552                                  ;	$DEALLOC
 31553                                  ;	$AllocOper
 31554                                  ;	arena_free_process
 31555                                  ;	arena_next
 31556                                  ;	check_signature
 31557                                  ;	Coalesce
 31558                                  ;
 31559                                  ;	Modification history:
 31560                                  ;
 31561                                  ;	    Created: ARR 30 March 1983
 31562                                  ;
 31563                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 31564                                  ;		      M003 - added support for link/unlink UMBs from
 31565                                  ;			     DOS arena chain. 7/18/90
 31566                                  ;		      M009 - Added error returns invalid function and 
 31567                                  ;			     arena trashed in set link state call.
 31568                                  ;		      M010 - Release UMB arenas allocated to current PDB
 31569                                  ;			     if UMB_HEAD is initialized.
 31570                                  ;
 31571                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 31572                                  ;			     support. Please see under M009 in 
 31573                                  ;			     ..\inc\dossym.inc. 8/31/90.
 31574                                  ;
 31575                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 31576                                  ;			     sure that umb_head arena is valid and also make
 31577                                  ;			     sure that the previous arena is pointing to 
 31578                                  ;			     umb_head.
 31579                                  ;
 31580                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 31581                                  ;			     set allloc strategy.
 31582                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 31583                                  ;			     bx in AllocSetStrat.
 31584                                  ;
 31585                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 31586                                  ;			     a bit to indicate to dos dispatcher to turn
 31587                                  ;			     a20 off before iret. See M016.
 31588                                  ;
 31589                                  
 31590                                  ;	BREAK	<memory allocation utility routines>
 31591                                  
 31592                                  
 31593                                  ; 15/04/2018 - Retro DOS v2.0
 31594                                  ;----------------------------------------------------------------------------
 31595                                  ; xenix memory calls for MSDOS
 31596                                  ;
 31597                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 31598                                  ; arena_owner_system are all equal to zero and are contained in DI.
 31599                                  ;
 31600                                  ;INCLUDE DOSSEG.ASM
 31601                                  
 31602                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 31603                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 31604                                  
 31605                                  ;.xlist
 31606                                  ;.xcref
 31607                                  ;INCLUDE DOSSYM.ASM
 31608                                  ;INCLUDE DEVSYM.ASM
 31609                                  ;.cref
 31610                                  ;.list
 31611                                  
 31612                                  ;TITLE ALLOC.ASM - memory arena manager
 31613                                  ;NAME Alloc
 31614                                  
 31615                                  ;SUBTTL memory allocation utility routines
 31616                                  ;PAGE
 31617                                  ;
 31618                                  ; arena data
 31619                                  ;
 31620                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 31621                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 31622                                  ;       i_need  FirstArena,WORD         ; first free block found
 31623                                  ;       i_need  BestArena,WORD          ; best free block found
 31624                                  ;       i_need  LastArena,WORD          ; last free block found
 31625                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 31626                                  
 31627                                  ;**	Arena_Free_Process
 31628                                  ;----------------------------------------------------------------------------
 31629                                  ;	Free all arena blocks allocated to a prOcess
 31630                                  ;
 31631                                  ;	ENTRY	(bx) = PID of process
 31632                                  ;	EXIT	none
 31633                                  ;	USES	????? BUGBUG
 31634                                  ;----------------------------------------------------------------------------
 31635                                  
 31636                                  arena_free_process:
 31637                                  	; 04/08/2018 - Retro DOS v3.0
 31638 0000683C 36A1[2400]                      MOV	AX,[SS:arena_head]
 31639                                  arena_free_process_start:
 31640 00006840 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 31641                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 31642 00006843 E81F00                          CALL    check_signature         ; ES <- AX, check for valid block
 31643                                  
 31644                                  arena_free_process_loop:
 31645                                          ;retc
 31646 00006846 722C                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 31647 00006848 06                      	PUSH    ES
 31648 00006849 1F                              POP     DS
 31649                                  	;cmp	[1],bx 
 31650 0000684A 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 31651 0000684E 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 31652                                  	; 20/05/2019
 31653                                  	;mov	[1],di
 31654 00006850 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 31655                                  
 31656                                  arena_free_next:
 31657                                  	;cmp	byte [di],5Ah ;'Z'
 31658 00006854 803D5A                          CMP     BYTE [DI],arena_signature_end
 31659                                                                          ; end of road, Jack?
 31660                                          ;retz				; never come back no more
 31661 00006857 741B                    	JZ	SHORT AFP_RETN  ;msdos 3.3 (& MSDOS 2.11)
 31662                                  	; MSDOS 6.0
 31663                                  	;jz	short arena_chk_umbs
 31664                                          
 31665 00006859 E80200                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 31666 0000685C EBE8                            JMP     SHORT arena_free_process_loop
 31667                                  
 31668                                  	; MSDOS 6.0
 31669                                  ;arena_chk_umbs:			; M010 - Start
 31670                                  	;mov	ax,[umb_head]		; ax = umb_head
 31671                                  	;cmp	ax,0FFFFh		; Q: is umb_head initialized
 31672                                  	;je	short ret_label		; N: we're done
 31673                                  	;
 31674                                  	;mov	di,ds			; di = last arena
 31675                                  	;cmp	di,ax			; Q: is last arena above umb_head
 31676                                  	;jae	short ret_label		; Y: we've scanned umbs also. done.
 31677                                  	;jmp	short arena_free_process_start
 31678                                  					; M010 - End
 31679                                  
 31680                                  ;AFP_RETN:
 31681                                  ;	RETN
 31682                                  
 31683                                  ;	BREAK	<Arena Helper Routines>
 31684                                  
 31685                                  ;**	Arena_Next - Find Next item in Arena
 31686                                  ;----------------------------------------------------------------------------
 31687                                  ;	ENTRY	DS - pointer to block head
 31688                                  ;		(di) = 0
 31689                                  ;	EXIT	AX,ES - pointers to next head
 31690                                  ;		'C' set iff arena damaged
 31691                                  ;----------------------------------------------------------------------------
 31692                                  
 31693                                  arena_next:
 31694 0000685E 8CD8                            MOV     AX,DS                   ; AX <- current block
 31695 00006860 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 31696 00006864 40                              INC     AX                      ; remember that header!
 31697                                  ;
 31698                                  ;       fall into check_signature and return
 31699                                  ;
 31700                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 31701                                  ;       RET
 31702                                  
 31703                                  ;**	Check_Signature - Check Memory Block Signature
 31704                                  ;----------------------------------------------------------------------------
 31705                                  ;	ENTRY	(AX) = address of block header
 31706                                  ;		(di) = 0
 31707                                  ;	EXIT	 ES = AX
 31708                                  ;		'C' clear if signature good
 31709                                  ;		'C' set if signature bad
 31710                                  ;	USES	ES, Flags
 31711                                  ;----------------------------------------------------------------------------
 31712                                  
 31713                                  check_signature:        
 31714                                  
 31715 00006865 8EC0                    	MOV     ES,AX                   ; ES <- AX
 31716                                  	;cmp	byte [es:di],4Dh ; 'M'
 31717 00006867 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 31718                                                                          ; IF next signature = not_end THEN
 31719 0000686B 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 31720                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 31721 0000686D 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 31722                                                                          ; IF next signature = end then
 31723 00006871 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 31724 00006873 F9                              STC                             ; set error
 31725                                  ;ret_label: ; MSDOS 6.0
 31726                                  AFP_RETN:
 31727                                   	;  Retro DOS v.20 - 05/03/2018
 31728                                  check_signature_ok:
 31729                                  COALESCE_RETN:
 31730 00006874 C3                      	RETN
 31731                                  
 31732                                  ;**	Coalesce - Combine free blocks ahead with current block
 31733                                  ;----------------------------------------------------------------------------
 31734                                  ;	Coalesce adds the block following the argument to the argument block,
 31735                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 31736                                  ;	some callers (such as $setblock) use it to join a free block to it's
 31737                                  ;	preceeding allocated block.
 31738                                  ;
 31739                                  ;	ENTRY	(ds) = pointer to the head of a free block
 31740                                  ;		(di) = 0
 31741                                  ;	EXIT	'C' clear if OK
 31742                                  ;		  (ds) unchanged, this block updated
 31743                                  ;		  (ax) = address of next block, IFF not at end
 31744                                  ;		'C' set if arena trashed
 31745                                  ;	USES	(cx)
 31746                                  ;----------------------------------------------------------------------------
 31747                                          
 31748                                  Coalesce:
 31749                                  	;cmp	byte [di],5Ah ; 'Z'
 31750 00006875 803D5A                  	CMP     BYTE [DI],arena_signature_end
 31751                                                                          ; IF current signature = END THEN
 31752                                          ;retz				;   GOTO ok
 31753 00006878 74FA                            jz	short COALESCE_RETN
 31754 0000687A E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 31755                                          ;retc				; IF no error THEN GOTO check
 31756 0000687D 72F5                    	jc	short COALESCE_RETN
 31757                                  
 31758                                  coalesce_check:
 31759                                  	;cmp	[es:1],di
 31760 0000687F 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 31761                                          ;retnz				; IF next block isnt free THEN return
 31762 00006884 75EE                            JNZ	SHORT COALESCE_RETN
 31763                                  	;mov	cx,[ES:3]
 31764 00006886 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 31765 0000688B 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 31766                                          ;ADD	[3],CX
 31767 0000688C 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 31768 00006890 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 31769 00006893 880D                            MOV     [DI],CL
 31770 00006895 EBDE                            JMP     SHORT Coalesce		; try again
 31771                                  
 31772                                  ; 04/08/2018 - Retro DOS v3.0
 31773                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 31774                                  
 31775                                  ;	BREAK  <$Alloc - allocate space in memory>
 31776                                  
 31777                                  ; MSDOS 6.0
 31778                                  ;----------------------------------------------------------------------------
 31779                                  ;**	$Alloc - Allocate Memory Space
 31780                                  ;
 31781                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 31782                                  ;	Alloc returns a pointer to a free block of memory that
 31783                                  ;	has the requested size in paragraphs.
 31784                                  ;
 31785                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 31786                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 31787                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 31788                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 31789                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 31790                                  ;
 31791                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 31792                                  ;	starts from arena_head.
 31793                                  ;
 31794                                  ;	Assembler usage:
 31795                                  ;           MOV     BX,size
 31796                                  ;           MOV     AH,Alloc
 31797                                  ;           INT     21h
 31798                                  ;
 31799                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 31800                                  ;	so that we start searching the arena at it's first non-trivial free
 31801                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 31802                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 31803                                  ;	doesn't have too many memory objects in it beyond the first free one.
 31804                                  ;	verify that this is true; if so, this can stay as is
 31805                                  ;
 31806                                  ;	ENTRY	(bx) = requested size, in bytes
 31807                                  ;		(DS) = (ES) = DOSGROUP
 31808                                  ;	EXIT	'C' clear if memory allocated
 31809                                  ;		  (ax:0) = address of requested memory
 31810                                  ;		'C' set if request failed
 31811                                  ;		  (AX) = error_not_enough_memory
 31812                                  ;		    (bx) = max size we could have allocated
 31813                                  ;		  (ax) = error_arena_trashed
 31814                                  ;	USES	All
 31815                                  ;----------------------------------------------------------------------------
 31816                                  
 31817                                  ; MSDOS 2.11 (& MSDOS 3.3)
 31818                                  ;----------------------------------------------------------------------------
 31819                                  ;SUBTTL $Alloc - allocate space in memory
 31820                                  ;
 31821                                  ;   Assembler usage:
 31822                                  ;           MOV     BX,size
 31823                                  ;           MOV     AH,Alloc
 31824                                  ;           INT     21h
 31825                                  ;         AX:0 is pointer to allocated memory
 31826                                  ;         BX is max size if not enough memory
 31827                                  ;
 31828                                  ;   Description:
 31829                                  ;           Alloc returns  a  pointer  to  a  free  block of
 31830                                  ;       memory that has the requested  size  in  paragraphs.
 31831                                  ;
 31832                                  ;   Error return:
 31833                                  ;           AX = error_not_enough_memory
 31834                                  ;              = error_arena_trashed
 31835                                  ;----------------------------------------------------------------------------
 31836                                  
 31837                                  _$ALLOC:
 31838                                  	; 04/08/2018 - Retro DOS v3.0
 31839                                  	;EnterCrit critMem
 31840 00006897 E875B8                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 31841                                  
 31842                                  	; MSDOS 6.0
 31843                                  	;mov	ax,[arena_head]
 31844                                  	;mov	[start_arena],ax	; assume LOW_FIRST
 31845                                  	;			
 31846                                  	;test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 31847                                  	;				; Q: should we start scanning from 
 31848                                  	;				;    UMB's
 31849                                  	;jz	short norm_alloc	; N: scan from arena_head
 31850                                  	;	
 31851                                  	;;cmp	word [umb_head],-1	; Q: Has umb_head been initialized
 31852                                  	;;je	short norm_alloc	; N: scan from arena_head
 31853                                  	;test	byte [UmbFlag],LINKSTATE ; Q: are umb's linked
 31854                                  	;jz	short norm_alloc	; N: scan from arena_head
 31855                                  	;
 31856                                  	;mov	ax,[umb_head]
 31857                                  	;mov	[start_arena],ax	; start_arena = umb_head
 31858                                  	;
 31859                                  					; M000 - end
 31860                                  ;norm_alloc:
 31861 0000689A 31C0                            XOR     AX,AX
 31862 0000689C 89C7                            MOV     DI,AX
 31863                                  	; 15/03/2018
 31864 0000689E 36A3[0A03]                      MOV     [SS:FirstArena],AX	; init the options
 31865 000068A2 36A3[0C03]                      MOV     [SS:BestArena],AX
 31866 000068A6 36A3[0E03]                      MOV     [SS:LastArena],AX
 31867 000068AA 50                              PUSH    AX                      ; alloc_max <- 0
 31868                                  	; 04/08/2018
 31869                                  start_scan:
 31870                                  	; MSDOS 6.0
 31871                                  	;mov	ax,[SS:start_arena]	; M000: AX <- beginning of arena
 31872                                  	;
 31873 000068AB 36A1[2400]              	MOV     AX,[SS:arena_head]	; AX <- beginning of arena
 31874 000068AF E8B3FF                  	CALL    check_signature         ; ES <- AX, carry set if error
 31875 000068B2 7212                            JC      SHORT alloc_err		; IF error THEN GOTO err
 31876                                  
 31877                                  alloc_scan:
 31878 000068B4 06                              PUSH    ES
 31879 000068B5 1F                              POP     DS                      ; DS <- ES
 31880 000068B6 393E0100                        CMP     [ARENA.OWNER],DI
 31881 000068BA 742A                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 31882                                  
 31883                                  alloc_next:
 31884                                  	; MSDOS 6.0			; M000 - start 
 31885                                  	;test	byte [UmbFlag],LINKSTATE ; Q: are umb's linked
 31886                                  	;jz	short norm_strat	; N: see if we reached last arena
 31887                                  	;
 31888                                  	;test	byte [AllocMethod],HIGH_FIRST
 31889                                  	;				; Q: is alloc strategy high_first
 31890                                  	;jz	short norm_strat	; N: see if we reached last arena
 31891                                  	;mov	ax,[start_arena]
 31892                                  	;cmp	ax,[arena_head]		; Q: did we start scan from 
 31893                                  					;    arena_head
 31894                                  	;jne	short norm_strat	; N: see if we reached last arena
 31895                                  	;mov	ax,ds			; ax = current block
 31896                                  	;cmp	ax,[umb_head]		; Q: check against umb_head 
 31897                                  	;jmp	short alloc_chk_end
 31898                                  
 31899                                  ;norm_strat:
 31900                                  	;cmp	byte [di],5Ah ; 'Z'
 31901 000068BC 803D5A                          CMP     BYTE [DI],arena_signature_end
 31902                                                                          ; IF current block is last THEN
 31903 000068BF 740E                            JZ      SHORT alloc_end		;   GOTO end
 31904 000068C1 E89AFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 31905 000068C4 73EE                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 31906                                  
 31907                                  alloc_err:
 31908 000068C6 58                              POP     AX
 31909                                  
 31910                                  alloc_trashed:
 31911                                  	;LeaveCrit critMem
 31912 000068C7 E84DB8                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0	
 31913                                          ;error	error_arena_trashed
 31914                                  	;mov	al,7
 31915 000068CA B007                    	MOV	AL,error_arena_trashed
 31916                                  alloc_errj:
 31917 000068CC E9D5AE                  	JMP	SYS_RET_ERR
 31918                                  
 31919                                  alloc_end:
 31920 000068CF 36833E[0A03]00                  CMP	WORD [SS:FirstArena],0	; 15/03/2018
 31921 000068D5 756B                    	JNZ     SHORT alloc_do_split
 31922                                  
 31923                                  	; MSDOS 6.0
 31924                                  	;mov	ax,[arena_head]
 31925                                  	;cmp	ax,[start_arena]	; Q: started scanning from arena_head
 31926                                  	;je	short alloc_fail	; Y: not enough memory
 31927                                  	;				; N:
 31928                                  	;				; Q: is the alloc strat HIGH_ONLY
 31929                                  	;test 	byte [AllocMethod],HIGH_ONLY
 31930                                  	;jnz	short alloc_fail	; Y: return size of largest UMB
 31931                                  	;
 31932                                  	;mov	[start_arena],ax	; N: start scanning from arena_head
 31933                                  	;jmp	short start_scan
 31934                                  	;				; M000 - end
 31935                                  
 31936                                  alloc_fail:
 31937                                          ;invoke Get_User_Stack
 31938 000068D7 E86FAD                          CALL	Get_User_Stack
 31939 000068DA 5B                      	POP     BX
 31940                                          ;MOV	[SI].user_BX,BX
 31941                                  	;MOV	[SI+2],BX
 31942 000068DB 895C02                  	mov	[SI+user_env.user_BX],bx
 31943                                  	;LeaveCrit critMem
 31944 000068DE E836B8                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 31945                                  	;error	error_not_enough_memory
 31946                                  	;mov	al,8
 31947 000068E1 B008                    	MOV	AL,error_not_enough_memory
 31948                                  	;jmp	short alloc_errj
 31949 000068E3 E9BEAE                  	JMP	SYS_RET_ERR
 31950                                  
 31951                                  alloc_free:
 31952 000068E6 E88CFF                          CALL    Coalesce		; add following free block to current
 31953 000068E9 72DB                            JC	SHORT alloc_err		; IF error THEN GOTO err
 31954 000068EB 8B0E0300                        MOV     CX,[ARENA.SIZE]
 31955 000068EF 5A                              POP     DX                      ; check for max found size
 31956 000068F0 39D1                            CMP     CX,DX
 31957 000068F2 7602                            JNA     SHORT alloc_test
 31958 000068F4 89CA                            MOV     DX,CX
 31959                                  
 31960                                  alloc_test:
 31961 000068F6 52                              PUSH    DX
 31962 000068F7 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 31963 000068F9 77C1                            JA      SHORT alloc_next	;   GOTO next
 31964                                  
 31965                                  	; 15/03/2018
 31966 000068FB 36833E[0A03]00                  CMP     WORD [SS:FirstArena],0
 31967 00006901 7505                    	JNZ	SHORT alloc_best
 31968 00006903 368C1E[0A03]                    MOV     [SS:FirstArena],DS	; save first one found	
 31969                                  alloc_best:
 31970 00006908 36833E[0C03]00                  CMP     WORD [SS:BestArena],0
 31971 0000690E 740E                            JZ      SHORT alloc_make_best	; initial best
 31972 00006910 06                              PUSH	ES
 31973 00006911 368E06[0C03]                    MOV     ES,[SS:BestArena]
 31974 00006916 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 31975 0000691B 07                              POP	ES
 31976 0000691C 7605                            JBE     SHORT alloc_last
 31977                                  alloc_make_best:
 31978 0000691E 368C1E[0C03]                    MOV     [SS:BestArena],DS	; assign best
 31979                                  alloc_last:
 31980 00006923 368C1E[0E03]                    MOV     [SS:LastArena],DS 	; assign last
 31981 00006928 EB92                            JMP     SHORT alloc_next
 31982                                  ;
 31983                                  ; split the block high
 31984                                  ;
 31985                                  alloc_do_split_high:
 31986 0000692A 368E1E[0E03]                    MOV     DS,[SS:LastArena]
 31987 0000692F 8B0E0300                        MOV     CX,[ARENA.SIZE]
 31988 00006933 29D9                            SUB     CX,BX
 31989 00006935 8CDA                            MOV     DX,DS
 31990 00006937 7444                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 31991 00006939 01CA                            ADD     DX,CX                   ; point to next block
 31992 0000693B 8EC2                            MOV     ES,DX                   ; no decrement!
 31993 0000693D 49                              DEC     CX
 31994 0000693E 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 31995 00006940 EB26                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 31996                                  ;
 31997                                  ; we have scanned memory and have found all appropriate blocks
 31998                                  ; check for the type of allocation desired; first and best are identical
 31999                                  ; last must be split high
 32000                                  ;
 32001                                  alloc_do_split:
 32002                                  	; 04/08/2018
 32003                                  	; MSDOS 6.0			; M000 - start
 32004                                  	;xor	cx,cx
 32005                                  	;mov	cl,[AllocMethod]
 32006                                  	;and	cx,STRAT_MASK		; mask off bit 7
 32007                                  	;cmp	cx,BEST_FIT		; Q; is the alloc strategy best_fit
 32008                                  
 32009                                  	; 15/03/2018
 32010                                          ;CMP     BYTE [SS:AllocMethod], 1
 32011                                  	; 04/08/2018
 32012 00006942 36803E[CE02]01          	CMP     BYTE [SS:AllocMethod],BEST_FIT
 32013 00006948 77E0                            JA      SHORT alloc_do_split_high
 32014 0000694A 368E1E[0A03]                    MOV     DS,[SS:FirstArena]        
 32015 0000694F 7205                    	JB      SHORT alloc_get_size
 32016 00006951 368E1E[0C03]            	MOV     DS,[SS:BestArena]
 32017                                  
 32018                                  alloc_get_size:
 32019 00006956 8B0E0300                        MOV     CX,[ARENA.SIZE]
 32020 0000695A 29D9                            SUB     CX,BX                   ; get room left over
 32021 0000695C 8CD8                            MOV     AX,DS
 32022 0000695E 89C2                            MOV     DX,AX                   ; save for owner setting
 32023 00006960 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 32024 00006962 01D8                            ADD     AX,BX
 32025 00006964 40                              INC     AX                      ; remember the header
 32026 00006965 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 32027 00006967 49                              DEC     CX                      ; CX <- size of split block
 32028                                  alloc_set_sizes:
 32029 00006968 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 32030 0000696C 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 32031                                  	;mov	bl,4Dh ; 'M'
 32032 00006971 B34D                            MOV     BL,arena_signature_normal
 32033 00006973 861D                            XCHG    BL,[DI]			; current signature <- 4D
 32034 00006975 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 32035 00006978 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 32036                                  
 32037                                  alloc_set_owner:
 32038 0000697D 8EDA                            MOV     DS,DX
 32039 0000697F 36A1[FC02]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 32040 00006983 A30100                          MOV     [ARENA.OWNER],AX
 32041 00006986 8CD8                            MOV     AX,DS
 32042 00006988 40                              INC     AX
 32043 00006989 5B                              POP     BX
 32044                                  	;LeaveCrit critMem
 32045 0000698A E88AB7                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 32046                                          ;transfer SYS_RET_OK
 32047 0000698D E90BAE                  	JMP	SYS_RET_OK
 32048                                  
 32049                                  
 32050                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 32051                                  
 32052                                  ; MSDOS 6.0
 32053                                  ;----------------------------------------------------------------------------
 32054                                  ;**	$SETBLOCK - Change size of an Alocated Block
 32055                                  ;
 32056                                  ;	Setblock changes the size of an allocated block.  First, we coalesce
 32057                                  ;	any following free space onto this block; then we try to trim the
 32058                                  ;	block down to the size requested.
 32059                                  ;
 32060                                  ;	Note that if the guy wants to grow the block but that growth fails,
 32061                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 32062                                  ;	Thus the maximum-size-possible value that we return has already
 32063                                  ;	been allocated!  This is a bug, dare we fix it?  BUGBUG
 32064                                  ;
 32065                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 32066                                  ;		finish it's work.  FOr this reason we build the allocsf
 32067                                  ;		structure on the frame, to make us compatible with $ALLOCs
 32068                                  ;		code.
 32069                                  ;
 32070                                  ;	ENTRY	(es) = segment of old block
 32071                                  ;		(bx) = newsize
 32072                                  ;		(ah) = SETBLOCK
 32073                                  ;
 32074                                  ;	EXIT	'C' clear if OK
 32075                                  ;		'C' set if error
 32076                                  ;		  (ax) = error_invalid_block
 32077                                  ;		       = error_arena_trashed
 32078                                  ;		       = error_not_enough_memory
 32079                                  ;		       = error_invalid_function
 32080                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 32081                                  ;	USES	???? BUGBUG
 32082                                  ;----------------------------------------------------------------------------
 32083                                  
 32084                                  ; MSDOS 2.11 (& MSDOS 3.3)
 32085                                  ;----------------------------------------------------------------------------
 32086                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 32087                                  ;
 32088                                  ;   Assembler usage:
 32089                                  ;           MOV     ES,block
 32090                                  ;           MOV     BX,newsize
 32091                                  ;           MOV     AH,setblock
 32092                                  ;           INT     21h
 32093                                  ;         if setblock fails for growing, BX will have the maximum
 32094                                  ;         size possible
 32095                                  ;   Error return:
 32096                                  ;           AX = error_invalid_block
 32097                                  ;              = error_arena_trashed
 32098                                  ;              = error_not_enough_memory
 32099                                  ;              = error_invalid_function
 32100                                  ;----------------------------------------------------------------------------
 32101                                  
 32102                                  _$SETBLOCK:        
 32103                                  	; 04/08/2018 - Retro DOS v3.0
 32104                                  	;EnterCrit   critMem
 32105 00006990 E87CB7                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 32106                                  
 32107 00006993 BF0000                  	MOV     DI,ARENA.SIGNATURE
 32108 00006996 8CC0                            MOV     AX,ES
 32109 00006998 48                              DEC     AX
 32110 00006999 E8C9FE                          CALL    check_signature
 32111 0000699C 7303                            JNC     SHORT setblock_grab
 32112                                  
 32113                                  setblock_bad:
 32114 0000699E E926FF                          JMP     alloc_trashed
 32115                                  
 32116                                  setblock_grab:
 32117 000069A1 8ED8                            MOV     DS,AX
 32118 000069A3 E8CFFE                          CALL    Coalesce
 32119 000069A6 72F6                            JC      SHORT setblock_bad
 32120 000069A8 8B0E0300                        MOV     CX,[ARENA.SIZE]
 32121 000069AC 51                              PUSH    CX
 32122 000069AD 39CB                            CMP     BX,CX
 32123 000069AF 76A5                            JBE     SHORT alloc_get_size
 32124 000069B1 E923FF                          JMP     alloc_fail
 32125                                  
 32126                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 32127                                  
 32128                                  ; MSDOS 6.0
 32129                                  ;----------------------------------------------------------------------------
 32130                                  ;**	$DEALLOC - Free Heap Memory
 32131                                  ;
 32132                                  ;	ENTRY	(es) = address of item
 32133                                  ;
 32134                                  ;	EXIT	'C' clear of OK
 32135                                  ;		'C' set if error
 32136                                  ;		  (AX) = error_invalid_block
 32137                                  ;	USES	???? BUGBUG
 32138                                  
 32139                                  ; MSDOS 2.11 (& MSDOS 3.3)
 32140                                  ;----------------------------------------------------------------------------
 32141                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 32142                                  ;
 32143                                  ;   Assembler usage:
 32144                                  ;           MOV     ES,block
 32145                                  ;           MOV     AH,dealloc
 32146                                  ;           INT     21h
 32147                                  ;
 32148                                  ;   Error return:
 32149                                  ;           AX = error_invalid_block
 32150                                  ;              = error_arena_trashed
 32151                                  ;---------------------------------------------------------------------------- 
 32152                                  
 32153                                  _$DEALLOC:    
 32154                                  	; 04/08/2018 - Retro DOS v3.0
 32155                                  	;EnterCrit   critMem
 32156 000069B4 E858B7                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 32157                                  
 32158                                  	; MSDOS 6.0			; M016, M068 - Start
 32159                                  	;test	byte [DOS_FLAG],EXECA20OFF
 32160                                  					; Q: was the previous call an int 21
 32161                                  					;    exec call
 32162                                  	;jz	short deallocate	; N: continue
 32163                                  	;cmp	byte [A20OFF_COUNT], 0	; Q: is count 0
 32164                                  	;jne	short deallocate	; N: continue
 32165                                  	;mov	byte [A20OFF_COUNT], 1	; Y: set count to 1
 32166                                  ;deallocate:				; M016, M068 - End
 32167                                      
 32168 000069B7 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 32169 000069BA 8CC0                            MOV     AX,ES
 32170 000069BC 48                              DEC     AX
 32171 000069BD E8A5FE                          CALL    check_signature
 32172 000069C0 720B                            JC      SHORT dealloc_err
 32173 000069C2 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 32174                                  	;LeaveCrit critMem
 32175 000069C7 E84DB7                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 32176                                          ;transfer SYS_RET_OK
 32177 000069CA E9CEAD                  	JMP	SYS_RET_OK
 32178                                  
 32179                                  dealloc_err:
 32180                                  	;LeaveCrit critMem
 32181 000069CD E847B7                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 32182                                          ;error	error_invalid_block
 32183                                  	;mov	al,9
 32184 000069D0 B009                    	MOV	AL,error_invalid_block
 32185 000069D2 E9CFAD                  	JMP	SYS_RET_ERR
 32186                                  
 32187                                  ;	BREAK $AllocOper - get/set allocation mechanism
 32188                                  
 32189                                  ; MSDOS 6.0
 32190                                  ;----------------------------------------------------------------------------
 32191                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 32192                                  ;
 32193                                  ;	Assembler usage:
 32194                                  ;           MOV     AH,AllocOper
 32195                                  ;           MOV     BX,method
 32196                                  ;           MOV     AL,func
 32197                                  ;           INT     21h
 32198                                  ;
 32199                                  ;	ENTRY	
 32200                                  ;		(al) = 0
 32201                                  ;		  Get allocation Strategy in (ax)
 32202                                  ;
 32203                                  ;		(al) = 1, (bx) = method = zw0000xy
 32204                                  ;		  Set allocation strategy.
 32205                                  ;		   w  = 1  => HIGH_ONLY
 32206                                  ;		   z  = 1  => HIGH_FIRST
 32207                                  ;		   xy = 00 => FIRST_FIT
 32208                                  ;		      = 01 => BEST_FIT
 32209                                  ;		      = 10 => LAST_FIT
 32210                                  ;
 32211                                  ;		(al) = 2
 32212                                  ;		  Get UMB link state in (al)
 32213                                  ;
 32214                                  ;		(al) = 3
 32215                                  ;		  Set UMB link state
 32216                                  ;		   (bx) = 0 => Unlink UMBs
 32217                                  ;		   (bx) = 1 => Link UMBs
 32218                                  ;
 32219                                  ;
 32220                                  ;	EXIT	'C' clear if OK
 32221                                  ;
 32222                                  ;		 if (al) = 0
 32223                                  ;		  (ax) = existing method
 32224                                  ;		 if (al) = 1
 32225                                  ;		  Sets allocation strategy
 32226                                  ;		 if (al) = 2
 32227                                  ;		  (al) = 0 => UMBs not linked
 32228                                  ;		  (al) = 1 => UMBs linked in
 32229                                  ;		 if (al) = 3
 32230                                  ;		  Links/Unlinks the UMBs into DOS chain
 32231                                  ;
 32232                                  ;		'C' set if error
 32233                                  ;		  AX = error_invalid_function
 32234                                  ;
 32235                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 32236                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 32237                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 32238                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 32239                                  ;		    arena' if an arena sig is damaged.
 32240                                  ;----------------------------------------------------------------------------
 32241                                  
 32242                                  ; MSDOS 2.11 (& MSDOS 3.3)
 32243                                  ;----------------------------------------------------------------------------
 32244                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 32245                                  ;
 32246                                  ;   Assembler usage:
 32247                                  ;           MOV     AH,AllocOper
 32248                                  ;           MOV     BX,method
 32249                                  ;           MOV     AL,func
 32250                                  ;           INT     21h
 32251                                  ;
 32252                                  ;   Error return:
 32253                                  ;           AX = error_invalid_function
 32254                                  ;----------------------------------------------------------------------------
 32255                                  
 32256                                  _$ALLOCOPER:
 32257                                  	; MSDOS 6.0
 32258                                  	;or	al, al
 32259                                  	;jz	short AllocGetStrat
 32260                                  	;cmp	al, 1
 32261                                  	;jz	short AllocSetStrat
 32262                                  	;cmp	al, 2
 32263                                  	;jz	short AllocGetLink
 32264                                  	;cmp	al, 3
 32265                                  	;jz	short AllocSetLink
 32266                                  
 32267                                  	; 15/04/2018
 32268 000069D5 3C01                    	CMP     AL,1
 32269 000069D7 720D                            JB      SHORT AllocOperGet
 32270 000069D9 7414                            JZ      SHORT AllocOperSet
 32271                                  
 32272                                  AllocOperError:
 32273                                  	; 04/08/2018 - Retro DOS v3.0
 32274                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 32275                                  	;mov	byte [ss:EXTERR_LOCUS],5
 32276 000069DB 36C606[EF02]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 32277                                  	;error	error_invalid_function
 32278                                  	;mov	al,1
 32279 000069E1 B001                    	MOV	AL,error_invalid_function
 32280                                  AllocOperErrj:
 32281 000069E3 E9BEAD                  	JMP	SYS_RET_ERR
 32282                                  
 32283                                  ;AllocArenaError:
 32284                                  	; MSDOS 6.0
 32285                                  	;MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 32286                                  	;				; M009: Extended Error Locus
 32287                                  	;;error   error_arena_trashed	; M009:
 32288                                  	;MOV	AL,error_arena_trashed
 32289                                  	;;JMP	SYS_RET_ERR
 32290                                  	;jmp	short AllocOperErrj
 32291                                  
 32292                                  ;AllocGetStrat: 
 32293                                  	; MSDOS 6.0
 32294                                  AllocOperGet:
 32295 000069E6 36A0[CE02]                      MOV     AL,[SS:AllocMethod]
 32296 000069EA 30E4                            XOR     AH,AH
 32297                                          ;transfer SYS_RET_OK
 32298 000069EC E9ACAD                  	JMP	SYS_RET_OK
 32299                                  
 32300                                  ;AllocSetStrat: 
 32301                                  	; MSDOS 6.0
 32302                                  	;push	bx			; M000 - start
 32303                                  	;and	bx,STRAT_MASK 		; M064: mask off bit 6 & 7
 32304                                  	;cmp	bx,2			; BX must be 0-2
 32305                                  	;pop	bx			; M000 - end
 32306                                  	;ja	short AllocOperError
 32307                                  
 32308                                  AllocOperSet:
 32309 000069EF 36881E[CE02]                    MOV     [SS:AllocMethod],BL
 32310                                          ;transfer SYS_RET_OK
 32311 000069F4 E9A4AD                  	JMP	SYS_RET_OK
 32312                                  
 32313                                  ;AllocGetLink:
 32314                                  	; MSDOS 6.0
 32315                                  	;mov	al,[UmbFlag]		; return link state in al
 32316                                  	;and 	al,LINKSTATE		
 32317                                  	;;transfer SYS_RET_OK
 32318                                  	;jmp	SYS_RET_OK
 32319                                  
 32320                                  ;AllocSetLink:
 32321                                  	; MSDOS 6.0			; M009 - start
 32322                                  	;mov	cx,[umb_head]		; cx = umb_head
 32323                                  	;cmp	cx,0FFFFh		; Q: has umb_head been initialized
 32324                                  	;je	short AllocOperError	; N: error
 32325                                  	;				; Y: continue
 32326                                  	;				; M009 - end
 32327                                  	;cmp	bx,1			
 32328                                  	;jb	short UnlinkUmbs
 32329                                  	;jz	short LinkUmbs
 32330                                  	;
 32331                                  	;jmp	short AllocOperError
 32332                                  	;
 32333                                  ;UnlinkUmbs:
 32334                                  	;test	byte[UmbFlag],LINKSTATE	; Q: umbs unlinked?
 32335                                  	;jz	short unlinked		; Y: return 
 32336                                  	;
 32337                                  	;call	GetLastArena		; get arena before umb_head in DS
 32338                                  	;jc	short AllocArenaError	; M009: arena trashed
 32339                                  	;
 32340                                  	;				; make it last
 32341                                  	;mov	byte [0],arena_signature_end
 32342                                  	;
 32343                                  	;and	byte [UmbFlag],~LINKSTATE ; indicate unlink'd state in umbflag
 32344                                  	;
 32345                                  ;unlinked:
 32346                                  	;;transfer SYS_RET_OK
 32347                                  	;jmp	SYS_RET_OK
 32348                                  
 32349                                  ;LinkUmbs:
 32350                                  	;test	byte [UmbFlag],LINKSTATE ; Q: umbs linked?
 32351                                  	;jnz	short linked		; Y: return
 32352                                  	;
 32353                                  	;call	GetLastArena		; get arena before umb_head
 32354                                  	;jc	short AllocArenaError	; M009: arena trashed
 32355                                  	;
 32356                                  	;				; make it normal. M061: ds points to
 32357                                  	;				; arena before umb_head
 32358                                  	;mov	byte [0],arena_signature_normal
 32359                                  	;
 32360                                  	;or	byte [UmbFlag],LINKSTATE ; indicate link'd state in umbflag
 32361                                  ;linked:
 32362                                  	;;transfer SYS_RET_OK
 32363                                  	;jmp	SYS_RET_OK
 32364                                  
 32365                                  ; MSDOS 6.0
 32366                                  ;--------------------------------------------------------------------------
 32367                                  ; Procedure Name : GetLastArena		-  M003
 32368                                  ;
 32369                                  ; Inputs	 : cx = umb_head
 32370                                  ;
 32371                                  ;
 32372                                  ; Outputs	 : If UMBs are linked
 32373                                  ;			ES = umb_head
 32374                                  ;			DS = arena before umb_head
 32375                                  ;		   else
 32376                                  ;			DS = last arena
 32377                                  ;			ES = next arena. will be umb_head if NC.
 32378                                  ;
 32379                                  ;		   CY if error
 32380                                  ;
 32381                                  ; Uses		 : DS, ES, DI, BX
 32382                                  ;--------------------------------------------------------------------------
 32383                                  	
 32384                                  ;Procedure	GetLastArena, NEAR
 32385                                  ;
 32386                                  ;	push	ax			; save ax
 32387                                  ;
 32388                                  ;	mov	ax, [arena_head]
 32389                                  ;	mov	es, ax			; es = arena_head
 32390                                  ;	xor	di, di
 32391                                  ;
 32392                                  ;	cmp     byte ptr es:[di],arena_signature_end
 32393                                  ;					; Q: is this the last arena
 32394                                  ;	je	GLA_done		; Y: return last arena in ES		
 32395                                  ;					
 32396                                  ;
 32397                                  ;GLA_next:
 32398                                  ;	mov	ds, ax
 32399                                  ;	call	arena_next		; ax, es -> next arena
 32400                                  ;	jc	GLA_err
 32401                                  ;
 32402                                  ;	test	[UmbFlag], LINKSTATE	; Q: are UMBs linked
 32403                                  ;	jnz	GLA_chkumb		; Y: terminating condition is 
 32404                                  ;					;    umb_head
 32405                                  ;					; N: terminating condition is 05Ah
 32406                                  ;
 32407                                  ;	cmp     byte ptr es:[di],arena_signature_end
 32408                                  ;					; Q: is this the last arena
 32409                                  ;	jmp	short @f
 32410                                  ;GLA_chkumb:
 32411                                  ;	cmp	ax, cx			; Q: is this umb_head
 32412                                  ;@@:
 32413                                  ;	jne	GLA_next		; N: get next arena
 32414                                  ;
 32415                                  ;GLA_done:
 32416                                  ;					; M061 - Start
 32417                                  ;	test	[UmbFlag], LINKSTATE	; Q: are UMBs linked
 32418                                  ;	jnz	GLA_ret			; Y: we're done
 32419                                  ;					; N: let us confirm that the next 
 32420                                  ;					;    arena is umb_head
 32421                                  ;	mov	ds, ax
 32422                                  ;	call	arena_next		; ax, es -> next arena
 32423                                  ;	jc	GLA_err
 32424                                  ;	cmp	ax, cx			; Q: is this umb_head
 32425                                  ;	jne	GLA_err			; N: error
 32426                                  ;					; M061 - End
 32427                                  ;
 32428                                  ;GLA_ret:				
 32429                                  ;	clc
 32430                                  ;	pop	ax			; M061
 32431                                  ;	ret				; M061
 32432                                  ;
 32433                                  ;GLA_err:
 32434                                  ;	stc				; M061
 32435                                  ;	pop	ax
 32436                                  ;	ret
 32437                                  ;
 32438                                  ;EndProc GetLastArena
 32439                                  
 32440                                  ;============================================================================
 32441                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 32442                                  ;============================================================================
 32443                                  ; 04/08/2018 - Retro DOS v3.0
 32444                                  
 32445                                  ;	TITLE SRVCALL - Server DOS call
 32446                                  ;	NAME  SRVCALL
 32447                                  
 32448                                  ;**	SRVCALL.ASM - Server DOS call functions
 32449                                  ;
 32450                                  ;
 32451                                  ;	$ServerCall
 32452                                  ;
 32453                                  ;	Modification history:
 32454                                  ;
 32455                                  ;	    Created: ARR 08 August 1983
 32456                                  
 32457                                  ;AsmVars <Installed>
 32458                                  
 32459                                  ;include dpl.asm
 32460                                  
 32461                                  ;Installed = TRUE
 32462                                  
 32463                                  ;BREAK <ServerCall -- Server DOS call>
 32464                                  ;----------------------------------------------------------------------------
 32465                                  ;
 32466                                  ; Procedure Name : $ServerCall
 32467                                  ;
 32468                                  ; Inputs:
 32469                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 32470                                  ; Function:
 32471                                  ;	AL=0	Server DOS call
 32472                                  ;	AL=1	Commit All files
 32473                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 32474                                  ;	AL=3	Close all files for DPL_UID
 32475                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 32476                                  ;	AL=5	Get open file list entry
 32477                                  ;		    IN: BX File Index
 32478                                  ;			CX User Index
 32479                                  ;		    OUT:ES:DI -> Name
 32480                                  ;			BX = UID
 32481                                  ;		    CX = # locked blocks held by this UID
 32482                                  ;	AL=6	Get DOS data area
 32483                                  ;		    OUT: DS:SI -> Start
 32484                                  ;			CX size in bytes of swap if indos
 32485                                  ;			DX size in bytes of swap always
 32486                                  ;	AL=7	Get truncate flag
 32487                                  ;	AL=8	Set truncate flag
 32488                                  ;	AL=9	Close all spool files
 32489                                  ;	AL=10	SetExtendedError
 32490                                  ;
 32491                                  ;----------------------------------------------------------------------------
 32492                                  
 32493                                  _$ServerCall:
 32494                                  	; 05/08/2018 - Retro DOS v3.0
 32495                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 32496 000069F7 3C07                    	CMP	AL,7
 32497 000069F9 7204                    	JB	short SET_STUFF
 32498 000069FB 3C09                    	CMP	AL,9
 32499 000069FD 7612                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 32500                                  SET_STUFF:
 32501 000069FF 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 32502                                  	;mov	bx,[si+12h]
 32503 00006A01 8B5C12                  	MOV	BX,[SI+DPL.UID]
 32504                                  
 32505                                  	; MSDOS 6.0
 32506                                  ;SR;
 32507                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 32508                                  ; of USER_ID
 32509                                  ;
 32510                                  	;test	byte [SS:IsWin386],1
 32511                                  	;jnz	short skip_win386
 32512                                  
 32513                                  ;hkn; SS override for user_id and proc_id
 32514                                  	; 15/08/2018
 32515 00006A04 36891E[0803]            	MOV	[SS:USER_ID],BX		; Set UID
 32516                                  
 32517                                  ;skip_win386:
 32518                                  
 32519 00006A09 8B5C14                  	MOV	BX,[SI+DPL.PID]
 32520 00006A0C 36891E[0603]            	MOV	[SS:PROC_ID],BX		; Set process ID
 32521                                  NO_SET_ID:
 32522 00006A11 36FF36[7814]            	PUSH	word [SS:SERVERLEAVE]	; push return address
 32523 00006A16 36FF36[7614]            	PUSH	word [SS:SERVERTAB]	; push table address
 32524 00006A1B 50                      	PUSH	AX
 32525 00006A1C E827B6                  	call	TableDispatch
 32526                                  
 32527                                  ;hkn; SS override
 32528                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 32529 00006A1F 36C606[EF02]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 32530                                  	;error	error_invalid_function
 32531                                  	;mov	al,1
 32532 00006A25 B001                    	MOV	AL,error_invalid_function
 32533                                  servercall_error:
 32534 00006A27 E97AAD                  	JMP	SYS_RET_ERR
 32535                                  
 32536                                  SERVERRETURN:
 32537 00006A2A C3                      	retn
 32538                                  
 32539                                  ; Commit - iterate through the open file list and make sure that the
 32540                                  ; directory entries are correctly updated.
 32541                                  
 32542                                  COMMIT_ALL:
 32543 00006A2B 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 32544 00006A2D 16                      	push	ss
 32545 00006A2E 1F                      	pop	ds
 32546 00006A2F E8DDB6                  	call	EcritSFT		; Gonna scan SFT cache, lock it down
 32547                                  CommitLoop:
 32548 00006A32 53                      	push	bx
 32549 00006A33 E82501                  	call	SFFromSFN
 32550 00006A36 7223                    	JC	short CommitDone
 32551 00006A38 26833D00                	cmp	word [es:di],0
 32552                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 32553                                  					; if (ThisSFT->refcount != 0)
 32554 00006A3C 7419                    	JZ	short CommitNext
 32555                                  	;cmp	word [es:di],0FFFFh ; -1
 32556 00006A3E 26833DFF                	cmp	word [ES:DI],sf_busy
 32557                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 32558                                  					; BUSY SFTs have god knows what
 32559 00006A42 7413                    	JZ	short CommitNext	;   in them.
 32560 00006A44 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 32561 00006A4A 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 32562                                  					;	doesn't deadlock
 32563 00006A4C 893E[5A05]              	MOV	[THISSFT],DI
 32564 00006A50 8C06[5C05]              	MOV	[THISSFT+2],ES
 32565 00006A54 E82BD2                  	call	DOS_COMMIT		;	DOSCommit ();
 32566                                  CommitNext:
 32567 00006A57 5B                      	pop	bx
 32568 00006A58 43                      	INC	BX
 32569 00006A59 EBD7                    	JMP	short CommitLoop
 32570                                  CommitDone:
 32571 00006A5B E8B9B6                  	call	LcritSFT
 32572 00006A5E 5B                      	pop	bx
 32573 00006A5F E939AD                  	jmp	SYS_RET_OK
 32574                                  
 32575                                  CLOSE_NAME:
 32576                                  
 32577                                  ;if installed
 32578                                  
 32579                                  ;hkn; SS override
 32580 00006A62 36FF1E[7000]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 32581                                  ;else
 32582                                  ;	Call	MFTcloN
 32583                                  ;endif
 32584                                  
 32585                                  CheckReturns:
 32586 00006A67 7203                    	JC	short func_err
 32587 00006A69 E92FAD                  	jmp	SYS_RET_OK
 32588                                  func_err:
 32589                                  	;transfer SYS_RET_ERR
 32590                                  	;jmp	SYS_RET_ERR
 32591 00006A6C EBB9                    	jmp	short servercall_error
 32592                                  
 32593                                  CLOSE_UID:
 32594                                  
 32595                                  ;if installed
 32596                                  ;hkn; SS override
 32597 00006A6E 36FF1E[6800]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 32598                                  ;else
 32599                                  ;	Call	MFTclU
 32600                                  ;endif
 32601 00006A73 EBF2                    	JMP	short CheckReturns
 32602                                  
 32603                                  CLOSE_UID_PID:
 32604                                  
 32605                                  ;if installed
 32606                                  ;hkn; SS override
 32607 00006A75 36FF1E[6C00]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 32608                                  ;else
 32609                                  ;	Call	MFTCloseP
 32610                                  ;endif
 32611 00006A7A EBEB                    	JMP	CheckReturns
 32612                                  
 32613                                  GET_LIST:
 32614                                  
 32615                                  ;if installed
 32616                                  ;hkn; SS override
 32617 00006A7C 36FF1E[8000]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 32618                                  ;else
 32619                                  ;	Call	MFT_get
 32620                                  ;endif
 32621 00006A81 72E9                    	JC	short func_err
 32622 00006A83 E8C3AB                  	call	Get_User_Stack
 32623                                  	;mov	[si+2],bx
 32624 00006A86 895C02                  	MOV	[SI+user_env.user_BX],BX
 32625                                  	;mov	[si+10],di
 32626 00006A89 897C0A                  	MOV	[SI+user_env.user_DI],DI
 32627                                  	;mov	[si+16],es
 32628 00006A8C 8C4410                  	MOV	[SI+user_env.user_ES],ES
 32629                                  SetCXOK:
 32630                                  	;mov	[si+4],cx
 32631 00006A8F 894C04                  	MOV	[SI+user_env.user_CX],CX
 32632 00006A92 E906AD                  	jmp	SYS_RET_OK
 32633                                  
 32634                                  SRV_CALL:
 32635 00006A95 58                      	POP	AX			; get rid of call to $srvcall
 32636 00006A96 1E                      	push	ds
 32637 00006A97 56                      	push	si
 32638 00006A98 E8AEAB                  	call	Get_User_Stack
 32639 00006A9B 5F                      	pop	di
 32640 00006A9C 07                      	pop	es
 32641                                  ;
 32642                                  ; DS:SI point to stack
 32643                                  ; ES:DI point to DPL
 32644                                  ;
 32645 00006A9D E885B5                  	call	XCHGP
 32646                                  ;
 32647                                  ; DS:SI point to DPL
 32648                                  ; ES:DI point to stack
 32649                                  ;
 32650                                  ; We now copy the registers from DPL to save stack
 32651                                  ;
 32652 00006AA0 56                      	push	si
 32653 00006AA1 B90600                  	MOV	CX,6
 32654 00006AA4 F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 32655 00006AA6 47                      	INC	DI
 32656 00006AA7 47                      	INC	DI			; Skip user_BP
 32657 00006AA8 A5                      	MOVSW				; DS
 32658 00006AA9 A5                      	MOVSW				; ES
 32659 00006AAA 5E                      	pop	si			; DS:SI -> DPL
 32660 00006AAB 8B04                    	mov	ax,[SI]
 32661                                  	;MOV	AX,[SI+DPL.AX]
 32662                                  	;mov	bx,[si+2]
 32663 00006AAD 8B5C02                  	MOV	BX,[SI+DPL.BX]
 32664                                  	;mov	cx,[si+4]
 32665 00006AB0 8B4C04                  	MOV	CX,[SI+DPL.CX]
 32666                                  	;mov	dx,[si+6]
 32667 00006AB3 8B5406                  	MOV	DX,[SI+DPL.DX]
 32668                                  	;mov	di,[si+10]
 32669 00006AB6 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 32670                                  	;mov	es,[si+14]
 32671 00006AB9 8E440E                  	MOV	ES,[SI+DPL.ES]
 32672                                  	;push	word [si+8]
 32673 00006ABC FF7408                  	PUSH	word [SI+DPL.SI]
 32674                                  	;mov	ds,[si+12]
 32675 00006ABF 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 32676 00006AC2 5E                      	POP	SI
 32677                                  
 32678                                  ;hkn; SS override for next 3
 32679 00006AC3 368C1E[A805]            	MOV	[SS:SAVEDS],DS
 32680 00006AC8 36891E[A605]            	MOV	[SS:SAVEBX],BX
 32681 00006ACD 36C606[2F05]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 32682 00006AD3 E9ADAA                  	jmp	REDISP
 32683                                  
 32684                                  GET_DOS_DATA:
 32685 00006AD6 16                      	push	ss
 32686 00006AD7 07                      	pop	es
 32687 00006AD8 BF[EC02]                	MOV     DI,SWAP_START
 32688 00006ADB B9[390A]                	MOV     CX,SWAP_END
 32689 00006ADE BA[0403]                	MOV     DX,SWAP_ALWAYS
 32690 00006AE1 29F9                    	SUB     CX,DI
 32691 00006AE3 29FA                    	SUB     DX,DI
 32692 00006AE5 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 32693 00006AE7 83D100                  	ADC     CX,0                    ; div by 2 + round up
 32694 00006AEA D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 32695 00006AEC E85AAB                  	call	Get_User_Stack
 32696                                  	;mov	[si+14],es
 32697 00006AEF 8C440E                  	MOV     [SI+user_env.user_DS],ES
 32698                                  	;mov	[si+8],di
 32699 00006AF2 897C08                  	MOV     [SI+user_env.user_SI],DI
 32700                                  	;mov	[si+6],dx
 32701 00006AF5 895406                  	MOV     [SI+user_env.user_DX],DX
 32702 00006AF8 EB95                    	JMP	short SetCXOK
 32703                                  
 32704                                  SPOOL_OPER:
 32705                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 32706                                  
 32707 00006AFA 50                      	push    ax
 32708 00006AFB B82511                  	mov     ax, 1125h
 32709 00006AFE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 32710                                  			; STACK: WORD subfunction
 32711                                  			; Return: CF set on error, AX = error code
 32712                                  			; STACK unchanged
 32713 00006B00 5B                      	pop	bx
 32714 00006B01 7203                    	JC	short func_err2
 32715 00006B03 E995AC                  	jmp	SYS_RET_OK
 32716                                  func_err2:
 32717 00006B06 E99BAC                  	jmp	SYS_RET_ERR
 32718                                  
 32719                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 32720                                  ;--------------------------------------------------------------------------
 32721                                  ;
 32722                                  ; Procedure Name : $SetExtendedError
 32723                                  ;
 32724                                  ; $SetExtendedError takes extended error information and loads it up for the
 32725                                  ; next extended error call.  This is used by interrupt-level proccessors to
 32726                                  ; mask their actions.
 32727                                  ;
 32728                                  ;   Inputs: DS:SI points to DPL which contains all registers
 32729                                  ;   Outputs: none
 32730                                  ;
 32731                                  ;---------------------------------------------------------------------------
 32732                                  
 32733                                  _$SetExtendedError:
 32734                                  
 32735                                  ;hkn; SS override for all variables used
 32736                                  
 32737 00006B09 8B04                    	mov	ax,[si]
 32738                                  	;MOV	AX,[SI+DPL.AX]
 32739 00006B0B 36A3[F002]              	MOV	[SS:EXTERR],AX
 32740                                  	;mov	ax,[si+10]
 32741 00006B0F 8B440A                  	MOV	AX,[SI+DPL.DI]
 32742 00006B12 36A3[F402]              	MOV	[SS:EXTERRPT],AX
 32743                                  	;mov	ax,[si+14]
 32744 00006B16 8B440E                  	MOV	AX,[SI+DPL.ES]
 32745 00006B19 36A3[F602]              	MOV	[SS:EXTERRPT+2],AX
 32746                                  	;mov	ax,[si+2]
 32747 00006B1D 8B4402                  	MOV	AX,[SI+DPL.BX]
 32748 00006B20 36A3[F202]              	MOV	[SS:EXTERR_ACTION],AX
 32749                                  	;mov	ax,[si+4]
 32750 00006B24 8B4404                  	MOV	AX,[SI+DPL.CX]
 32751 00006B27 368826[EF02]            	MOV	[SS:EXTERR_LOCUS],AH
 32752 00006B2C C3                      	retn
 32753                                  
 32754                                  ;============================================================================
 32755                                  ; UTIL.ASM, MSDOS 6.0, 1991
 32756                                  ;============================================================================
 32757                                  ; 05/08/2018 - Retro DOS v3.0
 32758                                  
 32759                                  ;**	Handle related utilities for MSDOS 2.X.
 32760                                  ;
 32761                                  ;	pJFNFromHandle	written
 32762                                  ;	SFFromHandle	written
 32763                                  ;	SFFromSFN	written
 32764                                  ;	JFNFree 	written
 32765                                  ;	SFNFree 	written
 32766                                  ;
 32767                                  ;	Modification history:
 32768                                  ;
 32769                                  ;	    Created: MZ 1 April 1983
 32770                                  
 32771                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 32772                                  
 32773                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 32774                                  ;----------------------------------------------------------------------------
 32775                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 32776                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 32777                                  ;
 32778                                  ;	NOTE:
 32779                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 32780                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 32781                                  ;
 32782                                  ;	ENTRY	(bx) = handle
 32783                                  ;	EXIT	'C' clear if ok
 32784                                  ;		  (es:di) = address of JFN value
 32785                                  ;		'C' set if error
 32786                                  ;		  (ax) = error code
 32787                                  ;	USES	AX, DI, ES, Flags
 32788                                  ;----------------------------------------------------------------------------
 32789                                  
 32790                                  pJFNFromHandle:
 32791 00006B2D 2E8E06[FC02]            	MOV	ES,[cs:CurrentPDB]	; get user process data block
 32792                                  	;cmp	bx,[ES:32h]
 32793 00006B32 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 32794 00006B37 7204                    	JB	short pjfn10		; no, get offset
 32795                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 32796                                  	;mov	al,6
 32797 00006B39 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 32798                                  ReturnCarry:
 32799 00006B3B F9                      	STC                             ; signal error
 32800 00006B3C C3                      	retn				; go back
 32801                                  pjfn10: 
 32802                                  	;les	di,[es:34h]
 32803 00006B3D 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 32804 00006B42 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 32805                                  	;clc
 32806                                  pJFNFromHandle_error:
 32807 00006B44 C3                      	retn
 32808                                  
 32809                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 32810                                  ;----------------------------------------------------------------------------
 32811                                  ;
 32812                                  ; Procedure Name : SFFromHandle
 32813                                  ;
 32814                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 32815                                  ;
 32816                                  ;   Input:      BX has handle
 32817                                  ;   Output:     Carry Set
 32818                                  ;                   AX has error code
 32819                                  ;               Carry Reset
 32820                                  ;                   ES:DI has pointer to SF entry
 32821                                  ;   Registers modified: If error, AX,ES, else ES:DI
 32822                                  ; NOTE:
 32823                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 32824                                  ;       at DOSINIT time with SS NOT DOSGROUP
 32825                                  ;
 32826                                  ;----------------------------------------------------------------------------
 32827                                  
 32828                                  SFFromHandle:
 32829 00006B45 E8E5FF                  	CALL    pJFNFromHandle          ; get jfn pointer
 32830                                  	;retc				; return if error
 32831 00006B48 72FA                    	jc	short pJFNFromHandle_error
 32832 00006B4A 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 32833                                  	;JNZ	short GetSF		; nope, suck out SF
 32834                                  	;;mov	al,6
 32835                                  	;MOV	AL,error_invalid_handle ; appropriate error
 32836                                  	;jmp	short ReturnCarry	; signal it
 32837 00006B4E 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 32838                                  GetSF:
 32839 00006B50 53                      	push	bx			; save handle
 32840 00006B51 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 32841 00006B54 30FF                    	XOR     BH,BH                   ; ignore upper half
 32842 00006B56 E80200                  	CALL    SFFromSFN               ; get real sf spot
 32843 00006B59 5B                      	pop	bx			; restore
 32844 00006B5A C3                      	retn                          ; say goodbye
 32845                                  
 32846                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 32847                                  
 32848                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 32849                                  ;----------------------------------------------------------------------------
 32850                                  ;	SFFromSfn uses an SFN to index an entry into the SF table.  This
 32851                                  ;	is more than just a simple index instruction because the SF table
 32852                                  ;	can be made up of multiple pieces chained together. We follow the
 32853                                  ;	chain to the right piece and then do the index operation.
 32854                                  ;
 32855                                  ;   NOTE:
 32856                                  ;	This routine is called from SFFromHandle which is called
 32857                                  ;       at DOSINIT time with SS NOT DOSGROUP
 32858                                  ;
 32859                                  ;	ENTRY	BX has SF index
 32860                                  ;	EXIT	'C' clear if OK
 32861                                  ;		  ES:DI points to SF entry
 32862                                  ;		'C' set if index too large
 32863                                  ;	USES	BX, DI, ES
 32864                                  ;----------------------------------------------------------------------------
 32865                                  
 32866                                  SFFromSFN:
 32867 00006B5B 2EC43E[2A00]            	LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 32868                                  sfsfn5:	
 32869                                  	;cmp	bx,[es:di+4]
 32870 00006B60 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 32871 00006B64 720E                    	JB	short sfsfn7		; yes, go grab it
 32872                                  	;sub	bx,[es:di+4]
 32873 00006B66 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 32874 00006B6A 26C43D                  	les	di,[es:di] ; 14/08/2018
 32875                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 32876 00006B6D 83FFFF                  	CMP     DI,-1                   ; end of tables?
 32877 00006B70 75EE                    	JNZ	short sfsfn5		; no, try again
 32878 00006B72 F9                      	STC
 32879 00006B73 C3                      	retn				; return with error, not found
 32880                                  sfsfn7:
 32881 00006B74 50                      	push	ax
 32882                                  	;mov	ax,53
 32883                                  	;mov	ax,59 ; MSDOS 6.0
 32884                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 32885 00006B75 B03B                    	mov	al,SF_ENTRY.size ; 28/07/2019
 32886 00006B77 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 32887 00006B79 01C7                    	ADD	DI,AX			; add base of SF block
 32888 00006B7B 58                      	pop	ax
 32889                                  	;add	di,6
 32890 00006B7C 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 32891 00006B7F C3                      	retn				; return with 'C' clear
 32892                                  
 32893                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 32894                                  
 32895                                  ;**	JFNFree - Find a Free JFN Slot
 32896                                  ;----------------------------------------------------------------------------
 32897                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 32898                                  ;
 32899                                  ;	ENTRY	(ss) = DOSDATA
 32900                                  ;	EXIT	'C' clear if OK
 32901                                  ;		  (bx) = new handle
 32902                                  ;		  (es:di) = pointer to JFN slot
 32903                                  ;		'C' set if error
 32904                                  ;		  (al) = error code
 32905                                  ;	USES	bx, di, es, flags
 32906                                  ;----------------------------------------------------------------------------
 32907                                  
 32908                                  JFNFree:
 32909 00006B80 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 32910                                  jfnf1:	
 32911 00006B82 E8A8FF                  	CALL	pJFNFromHandle		; get the appropriate handle
 32912 00006B85 7209                    	JC	short jfnf5		; no more handles
 32913 00006B87 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 32914 00006B8B 7405                    	je	short jfnfx		; yes, carry is clear
 32915 00006B8D 43                      	INC     BX                      ; no, next handle
 32916 00006B8E EBF2                    	JMP	short jfnf1		; and try again
 32917                                  
 32918                                  ;	Error.	'C' set
 32919                                  jfnf5:	
 32920                                  	;mov	al,4
 32921 00006B90 B004                    	MOV	AL,error_too_many_open_files
 32922                                  jfnfx:	
 32923 00006B92 C3                      	retn				; bye
 32924                                  
 32925                                  ;	BREAK <SFNFree - Allocate a free SFN>
 32926                                  
 32927                                  ;**	SFNFree - Allocate a Free SFN/SFT
 32928                                  ;----------------------------------------------------------------------------
 32929                                  ;	SFNFree scans through the sf table looking for a free entry
 32930                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 32931                                  ;
 32932                                  ;	The problem is that we want to mark the SFT busy so that other threads
 32933                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 32934                                  ;	we can't just mark it busy because we may get blown out of our open
 32935                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 32936                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 32937                                  ;	an SFT with this value we look to see if it belongs to this user
 32938                                  ;	and process.  If it does belong to us then it must be an orphan
 32939                                  ;	and we reclaim it.
 32940                                  ;
 32941                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 32942                                  ;		over and over, but we could at least set a high water mark...
 32943                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 32944                                  ;		even though this is not a frequently called routine - jgl
 32945                                  ;
 32946                                  ;	ENTRY	(ss) = DOSDATA
 32947                                  ;	EXIT	'C' clear if no error
 32948                                  ;		  (bx) = SFN
 32949                                  ;		  (es:di) = pointer to SFT
 32950                                  ;		  es:[di].SFT_REF_COUNT = -1
 32951                                  ;		'C' set if error
 32952                                  ;		  (al) = error code
 32953                                  ;	USES	bx, di, es, Flags
 32954                                  ;----------------------------------------------------------------------------
 32955                                  
 32956                                  SFNFree:
 32957                                  	;12/08/2018
 32958                                  	;05/08/2018 - Retro DOS v3.0
 32959                                  	; MSDOS 6.0
 32960 00006B93 50                      	push	ax
 32961 00006B94 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 32962                                  sfnf5:	
 32963 00006B96 53                      	push	bx
 32964 00006B97 E8C1FF                  	call	SFFromSFN		; get the potential handle
 32965 00006B9A 5B                      	pop	bx
 32966 00006B9B 723A                    	jc	short sfnf95		; no more free SFNs
 32967 00006B9D 26833D00                	cmp	word [ES:DI],0
 32968                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 32969 00006BA1 741D                    	je	short sfnf20			; yep, got one
 32970                                  	
 32971                                  	;cmp	word [es:di],0FFFFh ; -1
 32972 00006BA3 26833DFF                	cmp	word [ES:DI],sf_busy
 32973                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 32974 00006BA7 7403                    	je	short sfnf10		; special busy mark
 32975                                  sfnf7:	
 32976 00006BA9 43                      	inc	bx			; try the next one
 32977 00006BAA EBEA                    	jmp	short sfnf5
 32978                                  
 32979                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 32980                                  ;	it was abandoned during a earlier call and we can use it.
 32981                                  ;
 32982                                  ;	(bx)	= SFN
 32983                                  ;	(es:di) = pointer to SFT
 32984                                  ;	(TOS)	= caller's (ax)
 32985                                  
 32986                                  sfnf10:	
 32987 00006BAC 36A1[0803]              	mov	ax,[SS:USER_ID]
 32988                                  	;cmp	[es:di+2Fh],ax
 32989 00006BB0 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 32990 00006BB4 75F3                    	jnz	short sfnf7		; not ours
 32991 00006BB6 36A1[0603]              	mov	ax,[SS:PROC_ID]
 32992                                  	;cmp	[es:di+31h],ax
 32993 00006BBA 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 32994 00006BBE 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 32995                                  
 32996                                  ;	We have an SFT to allocate
 32997                                  ;
 32998                                  ;	(bx)	= SFN
 32999                                  ;	(es:di) = pointer to SFT
 33000                                  ;	(TOS)	= caller's (ax)
 33001                                  
 33002                                  sfnf20:
 33003                                  	; cf = 0 ;; Retro DOS v3.0
 33004                                  
 33005                                  	;mov	word [es:di],0FFFFh
 33006 00006BC0 26C705FFFF              	mov	word [ES:DI],sf_busy
 33007                                  					; make sure that this is allocated
 33008                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 33009                                  
 33010 00006BC5 36A1[0803]              	mov	ax,[SS:USER_ID]
 33011                                  	;mov	[es:di+2Fh],ax
 33012 00006BC9 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 33013 00006BCD 36A1[0603]              	mov	ax,[SS:PROC_ID]
 33014                                  	;mov	[es:di+31h],ax
 33015 00006BD1 26894531                	mov	[es:DI+SF_ENTRY.sf_PID],ax
 33016                                  sfnf21: ;; Retro DOS v3.0
 33017 00006BD5 58                      	pop	ax
 33018                                  	;clc
 33019 00006BD6 C3                      	retn				; return with no error
 33020                                  
 33021                                  ;**	Error - no more free SFNs
 33022                                  ;
 33023                                  ;	'C' set
 33024                                  ;	(TOS) = saved ax
 33025                                  
 33026                                  sfnf95: 
 33027 00006BD7 58                      	pop	ax
 33028                                  	;mov	al,4
 33029 00006BD8 B004                    	mov	al,error_too_many_open_files
 33030 00006BDA C3                      	retn				; return with 'C' and error
 33031                                  
 33032                                  ;============================================================================
 33033                                  ; MACRO.ASM, MSDOS 6.0, 1991
 33034                                  ;============================================================================
 33035                                  ; Retro	DOS v3.0 - 11/07/2018
 33036                                  
 33037                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 33038                                  ;	NAME	MACRO
 33039                                  
 33040                                  ;	Microsoft Confidential
 33041                                  ;	Copyright (C) Microsoft Corporation 1991
 33042                                  ;	All Rights Reserved.
 33043                                  
 33044                                  ;**	MACRO.ASM
 33045                                  ;
 33046                                  ;	$AssignOper
 33047                                  ;	FIND_DPB
 33048                                  ;	InitCDS
 33049                                  ;	$UserOper
 33050                                  ;	GetVisDrv
 33051                                  ;	GetThisDrv
 33052                                  ;	GetCDSFromDrv
 33053                                  ;
 33054                                  ;   Revision history:
 33055                                  ;
 33056                                  ;	Created: MZ 4 April 1983
 33057                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 33058                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 33059                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 33060                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 33061                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 33062                                  ;				    aliasing.
 33063                                  ;
 33064                                  ;   MSDOS performs several types of name translation. First, we maintain for
 33065                                  ;   each valid drive letter the text of the current directory on that drive.
 33066                                  ;   For invalid drive letters, there is no current directory so we pretend to
 33067                                  ;   be at the root. A current directory is either the raw local directory
 33068                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 33069                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 33070                                  ;
 33071                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 33072                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 33073                                  ;   this and all * are expanded into ?'s.
 33074                                  ;
 33075                                  ;   The second part of name translation involves subtree aliasing. A list of
 33076                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 33077                                  ;   the previous 'canonicalization' are then examined to see if any of the
 33078                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 33079                                  ;   replaced with the other subtree in the pair.
 33080                                  ;
 33081                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 33082                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 33083                                  ;   The output of the previous translation is examined to see if any of the
 33084                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 33085                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 33086                                  ;   'mount' one device under another.
 33087                                  ;
 33088                                  ;   The final form of name translation involves the mapping of a user's
 33089                                  ;   logical drive number into the internal physical drive. This is
 33090                                  ;   accomplished by converting the drive number into letter:CON, performing
 33091                                  ;   the above translation and then converting the character back into a drive
 33092                                  ;   number.
 33093                                  ;
 33094                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 33095                                  ;   take a path and form the real text of the pathname with all . and ..
 33096                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 33097                                  ;   TransPath.
 33098                                  ;
 33099                                  ;	A000	version 4.00  Jan. 1988
 33100                                  
 33101                                  ;Installed = TRUE
 33102                                  
 33103                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 33104                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 33105                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 33106                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 33107                                  ;					; current drive)
 33108                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 33109                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 33110                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 33111                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 33112                                  ;	I_need	MYNAME,16		; machine name
 33113                                  ;	I_need	MYNUM,WORD		; machine number
 33114                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 33115                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 33116                                  ;	I_need	DrvErr,BYTE		; drive error
 33117                                  
 33118                                  ;BREAK <$AssignOper -- Set up a Macro>
 33119                                  ;----------------------------------------------------------------------------
 33120                                  ; Inputs:
 33121                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 33122                                  ;	AL = 01 set assign mode 		    (SetMode)
 33123                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 33124                                  ;	AL = 03 Define Macro (attch start)
 33125                                  ;	    BL = Macro type
 33126                                  ;	       = 0 alias
 33127                                  ;	       = 1 file/device
 33128                                  ;	       = 2 drive
 33129                                  ;	       = 3 Char device -> network
 33130                                  ;	       = 4 File device -> network
 33131                                  ;	    DS:SI -> ASCIZ source name
 33132                                  ;	    ES:DI -> ASCIZ destination name
 33133                                  ;	AL = 04 Cancel Macro
 33134                                  ;	    DS:SI -> ASCIZ source name
 33135                                  ;	AL = 05 Modified get attach list entry
 33136                                  ;	AL = 06 Get ifsfunc item
 33137                                  ;	AL = 07 set in_use of a drive's CDS
 33138                                  ;	     DL = drive number, 0=default  0=A,,
 33139                                  ;	AL = 08 reset in_use of a drive's CDS
 33140                                  ;	     DL = drive number, 0=A, 1=B,,,
 33141                                  ; Function:
 33142                                  ;	Do macro stuff
 33143                                  ; Returns:
 33144                                  ;	Std Xenix style error return
 33145                                  ;----------------------------------------------------------------------------
 33146                                  
 33147                                  _$AssignOper:
 33148                                  	; MSDOS 6.0
 33149                                  	;CMP	AL,7			      ; set in_use ?		;AN000;
 33150                                  	;JNZ	short chk08		      ; no			;AN000;
 33151                                  ;srinuse:								;AN000;
 33152                                  	;PUSH	AX			      ; save al 		;AN000;
 33153                                  	;MOV	AL,DL			      ; AL= drive id		;AN000;
 33154                                  	;CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 33155                                  	;POP	AX			      ; 			;AN000;
 33156                                  	;JC	short baddrv		      ; bad drive		;AN000;
 33157                                  	;CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 33158                                  	;JZ	short baddrv		      ;     no			;AN000;
 33159                                  	;CMP	AL,7			      ; set ?			;AN000;
 33160                                  	;JNZ	short resetdrv		      ; no			;AN000;
 33161                                  	;OR	word [SI+curdir.flags],curdir_inuse; set in_use		;AN000;
 33162                                  	;JMP	SHORT okdone		      ; 			;AN000;
 33163                                  ;resetdrv:								;AN000;
 33164                                  	;AND	word [SI+curdir_flags],~curdir_inuse ; reset in_use	;AN000;
 33165                                  	;JMP	SHORT okdone			; 			;AN000;
 33166                                  ;baddrv: 								;AN000;
 33167                                  	;MOV	AX,error_invalid_drive	      ; error			;AN000;
 33168                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 33169                                  ;chk08:									;AN000;
 33170                                  	;CMP	AL,8			      ; reset inuse ?		;AN000;
 33171                                  	;JZ	short srinuse 		      ; yes			;AN000;
 33172                                  
 33173                                  	;IF	NOT INSTALLED
 33174                                  	;transfer NET_ASSOPER
 33175                                  	;ELSE
 33176                                  
 33177                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33178 00006BDB 50                      	PUSH	AX
 33179                                  	;mov	ax,111Eh
 33180                                  	;MOV	AX,(MultNET SHL 8) OR 30
 33181 00006BDC B81E11                  	mov	ax,(MultNET*256)+30
 33182 00006BDF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 33183                                  			; SS = DOS CS
 33184                                  			; STACK: WORD function to execute
 33185                                  			; Return: CF set on error, AX = error code
 33186                                  			; STACK unchanged
 33187 00006BE1 5B                      	POP	BX			; Don't zap error code in AX
 33188 00006BE2 7203                    	JC	short ASS_ERR
 33189                                  okdone:
 33190 00006BE4 E9B4AB                  	jmp	SYS_RET_OK
 33191                                  
 33192                                  ASS_ERR:
 33193 00006BE7 E9BAAB                  	jmp	SYS_RET_ERR
 33194                                  
 33195                                  	;ENDIF
 33196                                  
 33197                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 33198                                  ;----------------------------------------------------------------------------
 33199                                  ;**	FIND_DPB - Find a DPB from a Drive #
 33200                                  ;
 33201                                  ;	ENTRY	AL has drive number A = 0
 33202                                  ;	EXIT	'C' set
 33203                                  ;		    No DPB for this drive number
 33204                                  ;		'C' clear
 33205                                  ;		    DS:SI points to DPB for drive
 33206                                  ;	USES	SI, DS, Flags
 33207                                  ;----------------------------------------------------------------------------
 33208                                  
 33209                                  FIND_DPB:
 33210 00006BEA 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 33211                                  fdpb5:	
 33212 00006BEF 83FEFF                  	CMP	SI,-1
 33213 00006BF2 7409                    	JZ	short fdpb10
 33214 00006BF4 3A04                    	cmp	al,[si]
 33215                                  	;CMP	AL,[SI+DPB.DRIVE]
 33216 00006BF6 7406                    	jz	short ret_label15	; Carry clear (retz)
 33217                                  	;lds	si,[si+18h]
 33218 00006BF8 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 33219 00006BFB EBF2                    	JMP	short fdpb5
 33220                                  
 33221                                  fdpb10:	
 33222 00006BFD F9                      	STC
 33223                                  
 33224                                  ret_label15:
 33225 00006BFE C3                      	retn
 33226                                  
 33227                                  ;	Break <InitCDS - set up an empty CDS>
 33228                                  ;----------------------------------------------------------------------------
 33229                                  ;**	InitCDS - Setup an Empty CDS
 33230                                  ;
 33231                                  ;	ENTRY	ThisCDS points to CDS
 33232                                  ;		AL has uppercase drive letter
 33233                                  ;	EXIT	ThisCDS is now empty
 33234                                  ;		(ES:DI) = CDS
 33235                                  ;		'C' set if no DPB associated with drive
 33236                                  ;	USES	AH,ES,DI, Flags
 33237                                  ;----------------------------------------------------------------------------
 33238                                  
 33239                                  InitCDS:
 33240                                  	; 19/08/2018
 33241                                  	; 05/08/2018 - Retro DOS v3.0
 33242                                  	; MSDOS 6.0
 33243 00006BFF 50                      	push	ax			; save (AL) for caller
 33244 00006C00 36C43E[5E05]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 33245                                  	;mov	word [es:di+67],0
 33246 00006C05 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 33247 00006C0B 2C40                    	SUB	AL,"A"-1                ; A = 1
 33248 00006C0D 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 33249 00006C12 7236                    	JC	short icdsx		; Drive does not map a physical drive
 33250 00006C14 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 33251 00006C15 50                      	PUSH	AX			; save drive number for later
 33252 00006C16 0441                    	add	al,"A"
 33253 00006C18 B43A                    	MOV	AH,':'
 33254 00006C1A 268905                  	mov	[ES:DI],ax
 33255                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 33256                                  	;mov	ax,"\"
 33257                                  	;mov	[es:di+2],ax
 33258                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 33259 00006C1D 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 33260                                  	;or	word [es:di+67],4000h
 33261                                  	;or	byte [es:di+68],40h
 33262 00006C23 26804D4440              	OR	byte [ES:DI+curdir.flags+1],curdir_inuse>>8
 33263 00006C28 29C0                    	sub	ax,ax
 33264                                  	;MOV	[es:di+73],ax ; 0
 33265 00006C2A 26894549                	MOV	[ES:DI+curdir.ID],ax
 33266                                  	;mov	[es:di+75],ax ; 0
 33267 00006C2E 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 33268 00006C32 B002                    	mov	al,2
 33269                                  	;mov	[es:di+79],aX ; 2
 33270 00006C34 2689454F                	MOV	[ES:DI+curdir.end],ax
 33271 00006C38 58                      	POP	AX			; (al) = drive number
 33272 00006C39 1E                      	push	ds
 33273 00006C3A 56                      	push	si
 33274 00006C3B E8ACFF                  	call	FIND_DPB
 33275 00006C3E 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 33276                                  	;mov	[es:di+69],si
 33277 00006C40 26897545                	MOV	[ES:DI+curdir.devptr],SI
 33278                                  	;mov	[es:di+71],ds
 33279 00006C44 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 33280                                  icds5:	
 33281 00006C48 5E                      	pop	si
 33282 00006C49 1F                      	pop	ds
 33283                                  icdsx:	
 33284 00006C4A 58                      	pop	ax
 33285                                  RET45:
 33286 00006C4B C3                      	retn
 33287                                  
 33288                                  ;Break <$UserOper - get/set current user ID (for net)>
 33289                                  ;----------------------------------------------------------------------------
 33290                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 33291                                  ;	maintain this string and do no verifications.
 33292                                  ;
 33293                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 33294                                  ;				      4-printer-set-flags,5-printer-get-flags)
 33295                                  ;		DS:DX is user string pointer (calls 1,2)
 33296                                  ;		ES:DI is user buffer (call 3)
 33297                                  ;		BX is assign index (calls 2,3,4,5)
 33298                                  ;		CX is user number (call 1)
 33299                                  ;		DX is flag word (call 4)
 33300                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 33301                                  ;			and user CX is set to the user number
 33302                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 33303                                  ;		If AL = 5 then DX is flag word
 33304                                  ;----------------------------------------------------------------------------
 33305                                  
 33306                                  _$UserOper:
 33307                                  	; 05/08/2018 - Retro DOS v3.0
 33308                                  	; MSDOS 6.0 (& MSDOS 3.3)
 33309 00006C4C 50                      	PUSH	AX
 33310 00006C4D 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 33311 00006C4F 58                      	POP	AX
 33312 00006C50 7211                    	JB	short UserGet 		; return to user the string
 33313 00006C52 742E                    	JZ	short UserSet 		; set the current user
 33314 00006C54 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 33315 00006C56 763D                    	JBE	short UserPrint		; yep
 33316                                  	;mov	byte [ss:EXTERR_LOCUS],1
 33317 00006C58 36C606[EF02]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 33318                                  					; Extended Error Locus
 33319                                  	;error	error_invalid_function	; not 0,1,2,3
 33320                                  	;mov	al,1
 33321 00006C5E B001                    	MOV	AL,error_invalid_function
 33322                                  useroper_error:
 33323 00006C60 E941AB                  	JMP	SYS_RET_ERR
 33324                                  
 33325                                  UserGet:
 33326                                  ; Transfer MYNAME to DS:DX
 33327                                  ; Set Return CX to MYNUM
 33328 00006C63 1E                      	PUSH	DS			; switch registers
 33329 00006C64 07                      	POP	ES
 33330 00006C65 89D7                    	MOV	DI,DX			; destination
 33331 00006C67 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 33332 00006C6C E8DAA9                  	call	Get_User_Stack
 33333 00006C6F 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 33334 00006C72 16                      	push	ss			; point to DOSDATA
 33335 00006C73 1F                      	pop	ds
 33336 00006C74 BE[D102]                	MOV	SI,MYNAME		; point source to user string
 33337                                  UserMove:
 33338 00006C77 B90F00                  	MOV	CX,15
 33339 00006C7A F3A4                    	REP	MOVSB			; blam.
 33340 00006C7C 31C0                    	XOR	AX,AX			; 16th byte is 0
 33341 00006C7E AA                      	STOSB
 33342                                  UserBye:
 33343 00006C7F E919AB                  	jmp	SYS_RET_OK		; no errors here
 33344                                  
 33345                                  UserSet:
 33346                                  ; Transfer DS:DX to MYNAME
 33347                                  ; CX to MYNUM
 33348 00006C82 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 33349 00006C87 89D6                    	MOV	SI,DX			; user space has source
 33350 00006C89 16                      	push	ss
 33351 00006C8A 07                      	pop	es
 33352 00006C8B BF[D102]                	MOV	DI,MYNAME		; point dest to user string
 33353 00006C8E 36FE06[D002]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 33354 00006C93 EBE2                    	JMP	short UserMove
 33355                                  
 33356                                  UserPrint:
 33357                                  
 33358                                  ;IF NOT Installed
 33359                                  ;	transfer PRINTER_GETSET_STRING
 33360                                  ;ELSE
 33361 00006C95 50                      	PUSH	AX
 33362                                  	;mov	ax,111Fh
 33363                                  	;MOV	AX,(MultNET SHL 8) OR 31
 33364 00006C96 B81F11                  	mov	ax,(MultNET<<8)|31
 33365 00006C99 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 33366                                  			; STACK: WORD function
 33367                                  			; Return: CF set on error, AX = error code
 33368                                  			; STACK unchanged
 33369 00006C9B 5A                      	POP	DX			; Clean stack
 33370 00006C9C 7302                    	JNC	short OKPA
 33371 00006C9E EBC0                    	jmp	short useroper_error
 33372                                  OKPA:
 33373 00006CA0 EBDD                    	jmp	short UserBye
 33374                                  ;ENDIF
 33375                                  
 33376                                  
 33377                                  ;Break	<GetVisDrv - return visible drive>
 33378                                  ;----------------------------------------------------------------------------
 33379                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 33380                                  ;
 33381                                  ;   Inputs:	AL has drive identifier (0=default)
 33382                                  ;   Outputs:	Carry Set - invalid drive/macro
 33383                                  ;		Carry Clear - AL has physical drive (0=A)
 33384                                  ;		    ThisCDS points to CDS
 33385                                  ;   Registers modified: AL
 33386                                  ;----------------------------------------------------------------------------
 33387                                  
 33388                                  GetVisDrv:
 33389                                  	; 05/08/2018 - Retro DOS v3.0
 33390                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 33391 00006CA2 E81400                  	CALL	GETTHISDRV		; get inuse drive
 33392 00006CA5 72A4                    	jc	short RET45
 33393 00006CA7 1E                      	push	ds
 33394 00006CA8 56                      	push	si
 33395 00006CA9 36C536[5E05]            	LDS	SI,[SS:THISCDS]			;smr;SS Override
 33396                                  	;test	word [si+67],2000h
 33397 00006CAE F744430020              	TEST	word [SI+curdir.flags],curdir_splice
 33398 00006CB3 5E                      	pop	si
 33399 00006CB4 1F                      	pop	ds
 33400 00006CB5 7494                    	jz	short RET45		; if not spliced, return OK
 33401                                  	; MSDOS 6.0
 33402                                  	;MOV	[SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 33403                                  	;
 33404 00006CB7 F9                      	STC				; signal error
 33405 00006CB8 C3                      	retn
 33406                                  
 33407                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 33408                                  ;----------------------------------------------------------------------------
 33409                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 33410                                  ;	macro pointer
 33411                                  ;
 33412                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 33413                                  ;   Outputs:
 33414                                  ;		Carry Set - invalid drive/macro
 33415                                  ;		Carry Clear - AL has physical drive (0=A)
 33416                                  ;		   ThisCDS points to macro
 33417                                  ;   Registers modified: AL
 33418                                  ;----------------------------------------------------------------------------
 33419                                  
 33420                                  GETTHISDRV:
 33421                                  	; 05/08/2018
 33422                                  	; 12/07/2018 - Retro DOS v3.0
 33423                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 33424                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33425 00006CB9 08C0                    	OR	AL,AL			; are we using default drive?
 33426 00006CBB 7506                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 33427 00006CBD 36A0[0203]              	MOV	AL,[SS:CURDRV]		; get the current drive
 33428                                  	;INC	ax			; Counteract next instruction
 33429                                  	; 04/09/2018
 33430 00006CC1 FEC0                    	inc	al
 33431                                  GTD10:	
 33432                                  	;DEC	ax			; 0 = A
 33433 00006CC3 FEC8                    	dec	al
 33434 00006CC5 1E                      	PUSH	DS			; save world
 33435 00006CC6 56                      	PUSH	SI
 33436                                  	;mov	byte [ss:EXTERR_LOCUS],2
 33437 00006CC7 36C606[EF02]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 33438 00006CCD 36F606[2F05]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 33439 00006CD3 7421                    	JZ	SHORT GTD20		; Logical
 33440 00006CD5 50                      	PUSH	AX
 33441 00006CD6 06                      	PUSH	ES
 33442 00006CD7 57                      	PUSH	DI
 33443 00006CD8 36C706[5E05][B704]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 33444 00006CDF 368C0E[6005]            	mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 33445                                  	;MOV	[SS:THISCDS+2],SS	;ThisCDS = &DummyCDS;smr;
 33446 00006CE4 0441                    	ADD	AL,'A'
 33447 00006CE6 E816FF                  	CALL	InitCDS			;	InitCDS(c);
 33448                                  	;test	word [es:di+67],4000h
 33449 00006CE9 26F745430040            	TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 33450 00006CEF 5F                      	POP	DI
 33451 00006CF0 07                      	POP	ES
 33452 00006CF1 58                      	POP	AX
 33453 00006CF2 740E                    	JZ	SHORT GTD30		; Not a physical drive.
 33454 00006CF4 EB13                    	JMP	SHORT GTDX		; carry clear
 33455                                  GTD20:
 33456 00006CF6 E81300                  	CALL	GetCDSFromDrv
 33457 00006CF9 7207                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 33458                                  	;test	word [si+43h],4000h
 33459 00006CFB F744430040              	TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 33460 00006D00 7507                    	JNZ	SHORT GTDX		; carry clear
 33461                                  GTD30:	
 33462                                  	; 14/08/2018
 33463                                  	;MOV	AL,error_invalid_drive	; invalid FAT drive
 33464                                  	;MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 33465 00006D02 36C606[EF02]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 33466 00006D08 F9                      	STC
 33467                                  GTDX:	
 33468 00006D09 5E                      	POP	SI			; restore world
 33469 00006D0A 1F                      	POP	DS
 33470 00006D0B C3                      	RETN
 33471                                   
 33472                                  
 33473                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 33474                                  ;----------------------------------------------------------------------------
 33475                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 33476                                  ;	pointer, returning an error if the drive number is greater than the
 33477                                  ;	number of CDS's
 33478                                  ;
 33479                                  ;   Inputs:	AL is physical unit # A=0...
 33480                                  ;   Outputs:	Carry Set if Bad Drive
 33481                                  ;		Carry Clear
 33482                                  ;		    DS:SI -> CDS
 33483                                  ;		    [THISCDS] = DS:SI
 33484                                  ;   Registers modified: DS,SI
 33485                                  ;----------------------------------------------------------------------------
 33486                                  
 33487                                  GetCDSFromDrv:
 33488 00006D0C 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 33489 00006D11 7202                    	JB	SHORT GetCDS		; yes, go get the macro
 33490 00006D13 F9                      	STC				; signal error
 33491 00006D14 C3                      	RETN				; bye
 33492                                  GetCDS:
 33493 00006D15 53                      	PUSH	BX
 33494 00006D16 50                      	PUSH	AX
 33495 00006D17 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 33496                                  	;mov	bl,81
 33497 00006D1C B351                    	MOV	BL,curdir.size		; size in convenient spot
 33498 00006D1E F6E3                    	MUL	BL			; get net offset
 33499 00006D20 01C6                    	ADD	SI,AX			; convert to true pointer
 33500 00006D22 368936[5E05]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 33501 00006D27 368C1E[6005]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 33502 00006D2C 58                      	POP	AX
 33503 00006D2D 5B                      	POP	BX
 33504 00006D2E F8                      	CLC				; no error
 33505 00006D2F C3                      	RETN				; bye!
 33506                                  
 33507                                  ;============================================================================
 33508                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 33509                                  ;============================================================================
 33510                                  ; Retro	DOS v3.0 - 12/07/2018
 33511                                  
 33512                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 33513                                  ;----------------------------------------------------------------------------
 33514                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 33515                                  ;       gritty substitution.
 33516                                  ;
 33517                                  ;   Inputs:     DS:DX - pointer to FCB
 33518                                  ;               ES:DI - point to destination
 33519                                  ;   Outputs:    Carry Set - invalid path in final map
 33520                                  ;               Carry Clear - FCB has been mapped into ES:DI
 33521                                  ;                   Sattrib is set from possibly extended FCB
 33522                                  ;                   ExtFCB set if extended FCB found
 33523                                  ;   Registers modified: most
 33524                                  ;----------------------------------------------------------------------------
 33525                                  
 33526                                  TransFCB:
 33527                                  	; 12/07/2018 - Retro DOS v3.0
 33528                                  	;LocalVar FCBTmp,16
 33529                                  	;ENTER
 33530 00006D30 55                      	push	bp
 33531 00006D31 89E5                    	mov	bp,sp
 33532                                  	;sub	sp,15	; MSDOS 3.3
 33533 00006D33 83EC10                  	sub	sp,16	; MSDOS 6.0
 33534 00006D36 16                      	push	ss
 33535 00006D37 07                      	pop	es
 33536 00006D38 06                      	push	es
 33537 00006D39 57                      	push	di
 33538                                  	;lea	di,[bp-15] ; MSDOS 3.3
 33539                                  	;LEA	DI,FCBTmp 
 33540 00006D3A 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 33541 00006D3D 36C606[2905]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 33542 00006D43 36C606[2A05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 33543 00006D49 E8E2BC                  	call	GetExtended             ; get FCB, extended or not
 33544 00006D4C 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 33545 00006D4E 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 33546 00006D51 36A2[2A05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 33547 00006D55 36C606[2905]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 33548                                  GetDrive:
 33549 00006D5B AC                      	lodsb				; get drive byte
 33550 00006D5C E85AFF                  	call	GETTHISDRV
 33551 00006D5F 722C                    	jc	short BadPack
 33552 00006D61 E87C03                  	call	TextFromDrive           ; convert 0-based drive to text
 33553                                  ;
 33554                                  ; Scan the source to see if there are any illegal chars
 33555                                  ;
 33556 00006D64 BB[5413]                	mov	bx,CharType		; load lookup table
 33557 00006D67 B90B00                  	mov	cx,11
 33558 00006D6A 56                      	push	si			; back over name, ext
 33559                                  FCBScan:
 33560 00006D6B AC                      	lodsb				; get a byte
 33561                                  	; 09/08/2018
 33562                                  	;xlat	byte [es:bx]
 33563 00006D6C 26D7                    	es	xlat			; get flags
 33564                                  	;test	al,8	
 33565 00006D6E A808                    	test	al,FFCB
 33566 00006D70 741B                    	jz	short BadPack
 33567                                  NextCh: 
 33568 00006D72 E2F7                    	loop	FCBScan
 33569 00006D74 5E                      	pop	si
 33570 00006D75 89FB                    	mov	bx,di
 33571 00006D77 E81AC1                  	call	PackName                ; crunch the path
 33572 00006D7A 5F                      	pop	di			; get original destination
 33573 00006D7B 07                      	pop	es
 33574 00006D7C 16                      	push	ss			; get DS addressability
 33575 00006D7D 1F                      	pop	ds
 33576                                  	;lea	si,[bp-15] ; MSDOS 3.3
 33577                                  	;LEA	SI,FCBTmp		; point at new pathname
 33578 00006D7E 8D76F0                  	lea	si,[bp-16]
 33579 00006D81 803F00                  	cmp	byte [bx],0
 33580 00006D84 7407                    	jz	short BadPack
 33581 00006D86 55                      	push	bp
 33582 00006D87 E80E00                  	call	TransPathSet            ; convert the path
 33583 00006D8A 5D                      	pop	bp
 33584 00006D8B 7303                    	jnc	short FCBRet		; bye with transPath error code
 33585                                  BadPack:
 33586 00006D8D F9                      	STC
 33587                                  	;mov	al,3
 33588 00006D8E B003                    	MOV     AL,error_path_not_found
 33589                                  FCBRet: 
 33590                                  	;LEAVE
 33591 00006D90 89EC                    	mov	sp,bp
 33592 00006D92 5D                      	pop	bp
 33593                                  TransPath_retn:
 33594 00006D93 C3                      	retn
 33595                                  
 33596                                  ; 12/07/2018 - Retro DOS v3.0
 33597                                  
 33598                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 33599                                  ;----------------------------------------------------------------------------
 33600                                  ;
 33601                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 33602                                  ;       substitution, insertion of current directory and fixing . and ..
 33603                                  ;       entries. Perform splicing. Allow input string to match splice
 33604                                  ;       exactly.
 33605                                  ;
 33606                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 33607                                  ;       matches splice.
 33608                                  ;
 33609                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 33610                                  ;
 33611                                  ;   The following anomalous behaviour is required:
 33612                                  ;
 33613                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 33614                                  ;       Paths on devices are ignored. (truncate to 0-length)
 33615                                  ;       Raw net I/O sets ThisCDS => NULL.
 33616                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 33617                                  ;
 33618                                  ;   Other behaviour:
 33619                                  ;
 33620                                  ;       ThisCDS set up.
 33621                                  ;       FatRead done on local CDS.
 33622                                  ;       ValidateCDS done on local CDS.
 33623                                  ;
 33624                                  ;   Brief flowchart:
 33625                                  ;
 33626                                  ;       if fSharing then
 33627                                  ;           set up DummyCDS (ThisCDS)
 33628                                  ;           canonicalize (sets cMeta)
 33629                                  ;           splice
 33630                                  ;           fatRead
 33631                                  ;           return
 33632                                  ;       if \\ or d:\\ lead then
 33633                                  ;           set up null CDS (ThisCDS)
 33634                                  ;           canonicalize (sets cMeta)
 33635                                  ;           return
 33636                                  ;       if device then
 33637                                  ;           set up dummyCDS (ThisCDS)
 33638                                  ;           canonicalize (sets cMeta)
 33639                                  ;           return
 33640                                  ;       if file then
 33641                                  ;           getCDS (sets (ThisCDS) from name)
 33642                                  ;           validateCDS (may reset current dir)
 33643                                  ;           Copy current dir
 33644                                  ;           canonicalize (set cMeta)
 33645                                  ;           splice
 33646                                  ;           generate correct CDS (ThisCDS)
 33647                                  ;           if local then
 33648                                  ;               fatread
 33649                                  ;           return
 33650                                  ;
 33651                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 33652                                  ;               DI - point to buffer in DOSDATA
 33653                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 33654                                  ;                   syntax, etc. or user FAILed to I 24.
 33655                                  ;               WFP_Start - points to beginning of buffer
 33656                                  ;               Curr_Dir_End - points to end of current dir in path
 33657                                  ;               DS - DOSDATA
 33658                                  ;   Registers modified: most
 33659                                  ;
 33660                                  ;----------------------------------------------------------------------------
 33661                                  
 33662                                  TransPath:
 33663 00006D94 30C0                    	XOR     AL,AL
 33664 00006D96 EB02                    	JMP     SHORT SetSplice
 33665                                  TransPathSet:
 33666 00006D98 B0FF                    	MOV     AL,-1
 33667                                  SetSplice:
 33668 00006D9A 36A2[1603]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 33669 00006D9E B0FF                    	MOV     AL,-1
 33670                                  TransPathNoSet:
 33671 00006DA0 36A2[2E05]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 33672 00006DA4 36C606[3705]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 33673 00006DAA 36893E[6E05]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 33674 00006DAF 36C706[7205]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 33675 00006DB6 16                      	push	ss
 33676 00006DB7 07                      	pop	es
 33677                                  	;lea	bp,[di+134]
 33678 00006DB8 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 33679                                  ;
 33680                                  ; if this is through the server dos call, fsharing is set. We set up a
 33681                                  ; dummy cds and let the operation go.
 33682                                  ;
 33683 00006DBC 36F606[2F05]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 33684 00006DC2 7435                    	JZ	short CheckUNC		; skip to UNC check
 33685                                  ;
 33686                                  ; ES:DI point to buffer
 33687                                  ;
 33688 00006DC4 E80203                  	CALL	DriveFromText           ; get drive and advance DS:SI
 33689 00006DC7 E8EFFE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 33690 00006DCA 722A                    	jc	short NoPath
 33691 00006DCC E81103                  	CALL	TextFromDrive		; drop in new
 33692 00006DCF 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 33693 00006DD2 E83801                  	CALL	Canonicalize            ; copy and canonicalize
 33694 00006DD5 72BC                    	jc	short TransPath_retn	; errors
 33695                                  ;
 33696                                  ; Perform splices for net guys.
 33697                                  ;
 33698 00006DD7 16                      	push	ss
 33699 00006DD8 1F                      	pop	ds
 33700 00006DD9 8B36[6E05]              	MOV     SI,[WFP_START] 		; point to name
 33701 00006DDD F606[2E05]FF            	TEST	byte [FSPLICE],-1
 33702 00006DE2 7403                    	JZ	short NoServerSplice
 33703 00006DE4 E83602                  	CALL    Splice
 33704                                  NoServerSplice:
 33705 00006DE7 16                      	push	ss
 33706 00006DE8 1F                      	pop	ds                      ; for FATREAD
 33707 00006DE9 C43E[5E05]              	LES     DI,[THISCDS]		; for fatread
 33708 00006DED E81FB3                  	call	EcritDisk
 33709 00006DF0 E8E0F0                  	call	FATREAD_CDS
 33710 00006DF3 E821B3                  	call	LcritDisk
 33711                                  NoPath:
 33712                                  	;mov	al,3
 33713 00006DF6 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 33714 00006DF8 C3                      	retn				; any errors are in Carry flag
 33715                                  
 33716                                  ;
 33717                                  ; Let the network decide if the name is for a spooled device. It will map
 33718                                  ; the name if so.
 33719                                  ;
 33720                                  CheckUNC:
 33721 00006DF9 36C706[5E05]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 33722                                  	;CallInstall NetSpoolCheck,MultNET,35
 33723 00006E00 B82311                  	mov	ax,1123h
 33724 00006E03 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 33725                                  			; DS:SI -> ASCIZ filename to canonicalize
 33726                                  			; ES:DI -> 128-byte buffer for qualified name
 33727                                  			; Return: CF set if not resolved
 33728 00006E05 7329                    	JNC	short UNCDone
 33729                                  ;
 33730                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 33731                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 33732                                  ; input, then the name has been changed to the remote spooler by the above net
 33733                                  ; call. Also, there may be a drive in front of the \\.
 33734                                  ;
 33735                                  NO_CHECK:
 33736 00006E07 E8BF02                  	CALL    DriveFromText		; eat drive letter
 33737 00006E0A 50                      	PUSH    AX                      ; save it
 33738 00006E0B 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 33739 00006E0D E81DEB                  	call    PATHCHRCMP              ; convert to normal form
 33740 00006E10 86E0                    	XCHG    AH,AL                   ; swap for second byte
 33741 00006E12 E818EB                  	call    PATHCHRCMP              ; convert to normal form
 33742 00006E15 751F                    	JNZ	short CheckDevice	; not a path char
 33743 00006E17 38C4                    	CMP     AH,AL                   ; are they same?
 33744 00006E19 751B                    	JNZ	short CheckDevice	; nope
 33745                                  ;
 33746                                  ; We have a UNC request. We must copy the string up to the beginning of the
 33747                                  ; local machine root path
 33748                                  ;
 33749                                  
 33750 00006E1B 58                      	POP     AX
 33751 00006E1C A5                      	MOVSW                           ; get the lead \\.
 33752                                  UNCCpy:
 33753 00006E1D AC                      	LODSB                           ; get a byte
 33754 00006E1E E8D0EA                   	call	UCase                   ;AN000;; convert the char
 33755 00006E21 08C0                    	OR      AL,AL
 33756 00006E23 740E                    	JZ	short UNCTerm		; end of string. All done.
 33757 00006E25 E805EB                  	call    PATHCHRCMP              ; is it a path char?
 33758 00006E28 89FB                    	MOV     BX,DI                   ; backup position
 33759 00006E2A AA                      	STOSB
 33760 00006E2B 75F0                    	JNZ	short UNCCpy		; no, go copy
 33761 00006E2D E8DD00                  	CALL    Canonicalize            ; wham (and set cMeta)
 33762                                  UNCDone:
 33763 00006E30 16                      	push	ss
 33764 00006E31 1F                      	pop	ds
 33765 00006E32 C3                       	retn				; return error code
 33766                                  UNCTerm:
 33767 00006E33 AA                      	STOSB                           ;AN000;
 33768 00006E34 EBFA                    	JMP	short UNCDone		;AN000;
 33769                                  
 33770                                  CheckDevice:
 33771                                  ;
 33772                                  ; Check DS:SI for device. First eat any path stuff
 33773                                  ;
 33774 00006E36 58                      	POP     AX                      ; retrieve drive info
 33775 00006E37 803C00                  	CMP     BYTE [SI],0		; check for null file
 33776 00006E3A 7504                    	JNZ	short CheckPath
 33777                                  	;mov	al,2 
 33778 00006E3C B002                    	MOV     AL,error_file_not_found ; bad file error
 33779 00006E3E F9                      	STC                             ; signal error on null input
 33780 00006E3F C3                      	RETN				; bye!
 33781                                  CheckPath:
 33782 00006E40 50                      	push	ax
 33783 00006E41 55                      	push	bp			; save drive number
 33784                                  
 33785                                  	; MSDOS 6.0
 33786                                  ;;;BUGBUG BUG 10-26-1992 scottq
 33787                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 33788                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 33789                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 33790                                  ;;;end up having a 5D in the opcode's displacement field. The
 33791                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 33792                                  ;;;
 33793                                  ;;;What we do here is do a call to a function that is less than 5Dh
 33794                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 33795                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 33796                                  ;;;
 33797                                  ;;;More info:
 33798                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 33799                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 33800                                  ;;;
 33801 00006E42 E82000                  	call	no5Dshere
 33802                                  start5Dhack:
 33803                                  ;following is replaced with 5Dhack code--Invoke  CheckThisDevice         
 33804                                  backfrom5Dhack:
 33805 00006E45 5D                      	pop	bp
 33806 00006E46 58                      	pop	ax			; get drive letter back
 33807 00006E47 731F                    	JNC	short DoFile		; yes we have a file.
 33808                                  ;
 33809                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 33810                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 33811                                  ; call.
 33812                                  ;
 33813 00006E49 36C606[2F05]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 33814 00006E4F E867FE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 33815 00006E52 36C606[2F05]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 33816                                  ;
 33817                                  ; Now that we have noted that we have a device, we put it into a form that
 33818                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 33819                                  ; string. We relax this to state that if the d:\ is present then the path
 33820                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 33821                                  ; a device.
 33822                                  ;
 33823 00006E58 E88502                  	CALL    TextFromDrive
 33824 00006E5B B02F                    	MOV     AL,'/'                  ; path sep.
 33825 00006E5D AA                      	STOSB
 33826 00006E5E E894B1                  	call	StrCpy			; move remainder of string
 33827                                  
 33828 00006E61 F8                      	CLC                             ; everything OK.
 33829 00006E62 16                      	push	ss
 33830 00006E63 1F                      	pop	ds                      ; remainder of OK stuff
 33831                                  DoFile_retn:
 33832 00006E64 C3                      	retn
 33833                                  
 33834                                  no5Dshere:
 33835                                  	; 10/08/2018
 33836 00006E65 E9B3DF                  	jmp	CheckThisDevice		; snoop for device
 33837                                  
 33838                                  ;.erre (no5Dshere - start5Dhack - 5D)
 33839                                  
 33840                                  ;
 33841                                  ; We have a file. Get the raw CDS.
 33842                                  ;
 33843                                  
 33844                                  DoFile:
 33845                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33846                                  
 33847 00006E68 E837FE                  	call	GetVisDrv               ; get proper CDS
 33848                                  	;mov	al,3 
 33849 00006E6B B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 33850 00006E6D 72F5                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 33851                                  ;
 33852                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 33853                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 33854                                  ; Use the one that we are going to use (ES:DI).
 33855                                  ;
 33856                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 33857 00006E6F 1E                      	push	ds
 33858 00006E70 56                      	push	si
 33859 00006E71 06                      	push	es
 33860 00006E72 57                      	push	di
 33861 00006E73 E8F1DE                  	call	ValidateCDS             ; poke CDS and make everything OK
 33862                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 33863 00006E76 5F                      	pop	di
 33864 00006E77 07                      	pop	es
 33865 00006E78 5E                      	pop	si
 33866 00006E79 1F                      	pop	ds
 33867                                  	;mov	al,3
 33868 00006E7A B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 33869                                  	;retc				; someone failed an operation
 33870 00006E7C 72E6                    	jc	short DoFile_retn
 33871                                  ;
 33872                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 33873                                  ; current directory. Copy it in.
 33874                                  ;
 33875 00006E7E 1E                      	push	ds
 33876 00006E7F 56                      	push	si
 33877 00006E80 36C536[5E05]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 33878 00006E85 89FB                    	MOV     BX,DI                   ; point to destination
 33879 00006E87 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 33880                                  ;       LEA     SI,[SI+curdir.text]	; point to text
 33881                                  	;lea	bp,[di+134]
 33882 00006E8A 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 33883                                  					;AN000;
 33884 00006E8E E873B1                  	call	FStrCpy                 ; copy string. ES:DI point to end
 33885 00006E91 4F                      	DEC     DI                      ; point to NUL byte
 33886                                  
 33887                                  ;
 33888                                  ; Make sure that there is a path char at end.
 33889                                  ;
 33890 00006E92 B05C                    	MOV     AL,'\'
 33891 00006E94 263845FF                	CMP     [ES:DI-1],AL
 33892 00006E98 7401                    	JZ	short GetOrig
 33893 00006E9A AA                      	STOSB
 33894                                  ;
 33895                                  ; Now get original string.
 33896                                  ;
 33897                                  GetOrig:
 33898 00006E9B 4F                      	DEC     DI                      ; point to path char
 33899 00006E9C 5E                      	pop	si
 33900 00006E9D 1F                      	pop	ds
 33901                                  ;
 33902                                  ; BX points to the end of the root part of the CDS (at where a path char
 33903                                  ; should be). Now, we decide whether we use this root or extend it with the
 33904                                  ; current directory.  See if the input string begins with a leading ;
 33906 00006E9E E8D100                  	CALL    PathSep                 ; is DS:SI a path sep?
 33907 00006EA1 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 33908 00006EA3 08C0                    	OR      AL,AL                   ; end of string?
 33909 00006EA5 7410                    	JZ	short DoCanon		; yes, skip.
 33910                                  ;
 33911                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 33912                                  ; to this root. Make sure that there is a path char there and advance the
 33913                                  ; source string over all leading \'s.
 33914                                  ;
 33915 00006EA7 89DF                    	MOV     DI,BX                   ; back up to root point.
 33916                                  SkipPath:
 33917 00006EA9 AC                      	LODSB
 33918 00006EAA E880EA                  	call    PATHCHRCMP
 33919 00006EAD 74FA                    	JZ	short SkipPath
 33920 00006EAF 4E                      	DEC     SI
 33921 00006EB0 08C0                    	OR      AL,AL
 33922 00006EB2 7403                    	JZ	short DoCanon
 33923                                  ;
 33924                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 33925                                  ; for yucks.
 33926                                  ;
 33927                                  PathAssure:
 33928 00006EB4 B05C                    	MOV     AL,'\'
 33929 00006EB6 AA                      	STOSB
 33930                                  ;
 33931                                  ; ES:DI point to the correct spot for canonicalization to begin.
 33932                                  ; BP is the max extent to advance DI
 33933                                  ; BX is the backup limit for ..
 33934                                  ;
 33935                                  DoCanon:
 33936 00006EB7 E85300                  	CALL    Canonicalize            ; wham.
 33937                                  	;retc				; badly formatted path.
 33938 00006EBA 72A8                    	jc	short DoFile_retn
 33939                                  
 33940                                  ;
 33941                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 33942                                  ; to wfp_start and do string substitution. BP is still the max position in
 33943                                  ; buffer.
 33944                                  ;
 33945 00006EBC 16                      	push	ss
 33946 00006EBD 1F                      	pop	ds
 33947 00006EBE 8B3E[6E05]              	MOV     DI,[WFP_START]		; DS:SI point to string
 33948 00006EC2 C536[5E05]              	LDS     SI,[THISCDS]		; point to CDS
 33949                                  ;       LEA     SI,[SI+curdir.text]	; point to text
 33950 00006EC6 E81F02                  	CALL    PathPref                ; is there a prefix?
 33951 00006EC9 7514                    	JNZ	short DoSplice		; no, do splice
 33952                                  ;
 33953                                  ; We have a match. Check to see if we ended in a path char.
 33954                                  ;
 33955 00006ECB 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 33956 00006ECE E85CEA                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 33957 00006ED1 740C                    	JZ	short DoSplice		; yes, no current dir here.
 33958                                  Pathline:                               ; 2/13/KK
 33959 00006ED3 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 33960 00006ED7 7406                    	JZ	short DoSplice
 33961 00006ED9 47                      	INC     DI                      ; point to after current path char
 33962 00006EDA 36893E[7205]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 33963                                  ;
 33964                                  ; Splice the result.
 33965                                  ;
 33966                                  DoSplice:
 33967 00006EDF 16                      	push	ss
 33968 00006EE0 1F                      	pop	ds			; back to DOSDATA
 33969 00006EE1 8B36[6E05]              	MOV     SI,[WFP_START]		; point to beginning of string
 33970 00006EE5 31C9                    	XOR     CX,CX
 33971 00006EE7 F606[2E05]FF            	TEST	byte [FSPLICE],-1
 33972 00006EEC 7403                    	JZ	short SkipSplice
 33973 00006EEE E82C01                  	CALL    Splice                  ; replaces in place.
 33974                                  SkipSplice:
 33975                                  ;
 33976                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 33977                                  ; device.
 33978                                  ;
 33979 00006EF1 16                      	push	ss
 33980 00006EF2 1F                      	pop	ds
 33981 00006EF3 C43E[5E05]              	LES     DI,[THISCDS]		; point to correct drive
 33982                                  	;test	word [es:di+67],8000h
 33983 00006EF7 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 33984 00006EFD 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 33985 00006EFF E30B                    	JCXZ    Done
 33986 00006F01 E80BB2                  	call	EcritDisk
 33987 00006F04 E8CCEF                  	call	FATREAD_CDS
 33988 00006F07 E80DB2                  	call	LcritDisk
 33989                                  	;mov	al, 3
 33990 00006F0A B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 33991                                  Done:   
 33992 00006F0C C3                      	retn                         ; any errors in carry flag.
 33993                                  
 33994                                  ; 13/07/2018
 33995                                  
 33996                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 33997                                  ;----------------------------------------------------------------------------
 33998                                  ;   Canonicalize - copy path removing . and .. entries.
 33999                                  ;
 34000                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 34001                                  ;               ES:DI - point to buffer
 34002                                  ;               BX - backup limit (offset from ES) points to slash
 34003                                  ;               BP - end of buffer
 34004                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 34005                                  ;                   syntax, etc.
 34006                                  ;               Carry Clear -
 34007                                  ;                   DS:DI - advanced to end of string
 34008                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 34009                                  ;   Registers modified: AX CX DX (in addition to those above)
 34010                                  ;----------------------------------------------------------------------------
 34011                                  
 34012                                  Canonicalize:
 34013                                  ;
 34014                                  ; We copy all leading path separators.
 34015                                  ;
 34016 00006F0D AC                      	LODSB                           ;   while (PathChr (*s))
 34017 00006F0E E81CEA                  	call    PATHCHRCMP
 34018 00006F11 7507                    	JNZ	short CanonDec
 34019 00006F13 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 34020 00006F15 7319                    	JAE	short CanonBad		;           goto error;
 34021 00006F17 AA                      	STOSB
 34022 00006F18 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 34023                                  CanonDec:
 34024 00006F1A 4E                      	DEC     SI
 34025                                  ;
 34026                                  ; Main canonicalization loop.  We come here with DS:SI pointing to a textual
 34027                                  ; component (no leading path separators) and ES:DI being the destination
 34028                                  ; buffer.
 34029                                  ;
 34030                                  CanonLoop:
 34031                                  ;
 34032                                  ; If we are at the end of the source string, then we need to check to see that
 34033                                  ; a potential drive specifier is correctly terminated with a path sep char.
 34034                                  ; Otherwise, do nothing
 34035                                  ;
 34036 00006F1B 31C0                    	XOR     AX,AX
 34037 00006F1D 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 34038 00006F1F 751A                    	JNZ	short DoComponent
 34039 00006F21 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 34040 00006F26 7505                    	JNZ	short DoTerminate
 34041 00006F28 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 34042 00006F2A AA                      	STOSB
 34043 00006F2B 88E0                    	MOV     AL,AH
 34044                                  DoTerminate:
 34045 00006F2D AA                      	STOSB                           ;           *d++ = 0;
 34046 00006F2E F8                      	CLC                             ;           return (0);
 34047 00006F2F C3                      	retn
 34048                                  
 34049                                  CanonBad:
 34050 00006F30 E8CE01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 34051                                  	;mov	al,3
 34052 00006F33 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 34053 00006F35 7402                    	JZ	short PathEnc		; path character encountered in string
 34054                                  	;mov	al,2
 34055 00006F37 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 34056                                  PathEnc:
 34057 00006F39 F9                      	STC
 34058                                  CanonBad_retn:
 34059 00006F3A C3                      	retn
 34060                                  ;
 34061                                  ; We have a textual component that we must copy.  We uppercase it and truncate
 34062                                  ; it to 8.3
 34063                                  ;
 34064                                  DoComponent:                            ;           }
 34065 00006F3B E85100                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 34066 00006F3E 72FA                    	jc	short CanonBad_retn	;           return (-1);
 34067                                  ;
 34068                                  ; We special case the . and .. cases.  These will be backed up.
 34069                                  ;
 34070                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 34071 00006F40 26833D2E                	CMP	WORD [ES:DI],002Eh
 34072 00006F44 7408                    	JZ	short Skip1
 34073                                  	;CMP	WORD PTR ES:[DI],'..'
 34074 00006F46 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 34075 00006F4B 750A                    	JNZ	short CanonNormal
 34076 00006F4D 4F                      	DEC     DI                      ;           d--;
 34077                                  Skip1:  
 34078 00006F4E E82B00                  	CALL    SkipBack                ;           SkipBack ();
 34079                                  	;mov	al,3
 34080 00006F51 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 34081 00006F53 72E5                    	jc	short CanonBad_retn
 34082 00006F55 EB02                    	JMP     short CanonPath         ;           }
 34083                                  ;
 34084                                  ; We have a normal path.  Advance destination pointer over it.
 34085                                  ;
 34086                                  CanonNormal:                            ;       else
 34087 00006F57 01CF                    	ADD     DI,CX                   ;           d += ct;
 34088                                  ;
 34089                                  ; We have successfully copied a component.  We are now pointing at a path
 34090                                  ; sep char or are pointing at a nul or are pointing at something else.
 34091                                  ; If we point at something else, then we have an error.
 34092                                  ;
 34093                                  CanonPath:
 34094 00006F59 E81600                  	CALL    PathSep
 34095 00006F5C 75D2                    	JNZ	short CanonBad		; something else...
 34096                                  ;
 34097                                  ; Copy the first path char we see.
 34098                                  ;
 34099 00006F5E AC                      	LODSB                           ; get the char
 34100 00006F5F E8CBE9                  	call    PATHCHRCMP              ; is it path char?
 34101 00006F62 75B6                    	JNZ	short CanonDec		; no, go test for nul
 34102 00006F64 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 34103 00006F66 73C8                    	JAE	short CanonBad		; yep, error.
 34104 00006F68 AA                      	STOSB                           ; copy the one byte
 34105                                  ;
 34106                                  ; Skip all remaining path chars
 34107                                  ;
 34108                                  CanonPathLoop:
 34109 00006F69 AC                      	LODSB                           ; get next byte
 34110 00006F6A E8C0E9                  	call    PATHCHRCMP              ; path char again?
 34111 00006F6D 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 34112 00006F6F 4E                      	DEC     SI                      ; back up
 34113 00006F70 EBA9                    	JMP	short  CanonLoop	; go copy component
 34114                                  
 34115                                  ;BREAK <PathSep - determine if char is a path separator>
 34116                                  ;----------------------------------------------------------------------------
 34117                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 34118                                  ;   Inputs:     DS:SI - point to a char
 34119                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 34120                                  ;               Zero set if AL is / \ or NUL
 34121                                  ;               Zero reset otherwise
 34122                                  ;   Registers modified: AL
 34123                                  ;----------------------------------------------------------------------------
 34124                                  
 34125                                  PathSep:
 34126 00006F72 8A04                    	MOV     AL,[SI]                 ; get the character
 34127                                  PathSepGotCh:				; already have character
 34128 00006F74 08C0                    	OR      AL,AL                   ; test for zero
 34129 00006F76 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 34130 00006F78 E8B2E9                  	call    PATHCHRCMP              ; check for path character
 34131 00006F7B C3                      	retn				; and return HIS determination
 34132                                  
 34133                                  ;BREAK <SkipBack - move backwards to a path separator>
 34134                                  ;----------------------------------------------------------------------------
 34135                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 34137                                  ;               BX has current directory back up limit (point to a / \)
 34138                                  ;   Outputs:    ES:DI backed up to point to a path char
 34139                                  ;               AL has char from output ES:DI (path sep if carry clear)
 34140                                  ;               Carry set if illegal backup
 34141                                  ;               Carry Clear if ok
 34142                                  ;   Registers modified: DI,AL
 34143                                  ;----------------------------------------------------------------------------
 34144                                  
 34145                                  SkipBack:
 34146 00006F7C 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 34147 00006F7E 720B                    	JB	short SkipBad		;       if (d < dlim)
 34148 00006F80 4F                      	DEC     DI                      ;           goto err;
 34149 00006F81 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 34150 00006F84 E8A6E9                  	call    PATHCHRCMP              ;           break;
 34151 00006F87 75F3                    	JNZ	short SkipBack		;       }
 34152 00006F89 F8                      	CLC                             ;   return (0);
 34153 00006F8A C3                      	retn				;
 34154                                  SkipBad:                                ;err:
 34155                                  	;mov	al,3
 34156 00006F8B B003                    	MOV     AL,error_path_not_found ; bad path error
 34157 00006F8D F9                      	STC                             ;   return (-1);
 34158 00006F8E C3                      	retn                          ;
 34159                                  
 34160                                  ;Break <CopyComponent - copy out a file path component>
 34161                                  ;----------------------------------------------------------------------------
 34162                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 34163                                  ;
 34164                                  ;   Inputs:     DS:SI - source path
 34165                                  ;               ES:DI - destination
 34166                                  ;               ES:BP - end of buffer
 34167                                  ;   Outputs:    Carry Set - too long
 34168                                  ;               Carry Clear - DS:SI moved past component
 34169                                  ;                   CX has length of destination
 34170                                  ;   Registers modified: AX,CX,DX
 34171                                  ;----------------------------------------------------------------------------
 34172                                  
 34173                                  CopyComponent:
 34174                                  
 34175                                  %define CopyBP	 [BP]		; word
 34176                                  %define CopyD	 [BP+2]		; dword
 34177                                  %define CopyDoff [BP+2]		; word
 34178                                  %define CopyS	 [BP+6]		; dword
 34179                                  %define CopySoff [BP+6]		; word
 34180                                  %define CopyTemp [BP+10]	; byte
 34181                                  
 34182 00006F8F 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 34183 00006F92 1E                      	push	ds
 34184 00006F93 56                      	push	si
 34185 00006F94 06                      	push	es
 34186 00006F95 57                      	push	di
 34187 00006F96 55                      	push	bp
 34188 00006F97 89E5                    	MOV     BP,SP
 34189 00006F99 B42E                    	MOV     AH,'.'
 34190 00006F9B AC                      	LODSB
 34191 00006F9C AA                      	STOSB
 34192 00006F9D 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 34193 00006F9F 7518                    	JNZ	short NormalComp
 34194 00006FA1 E8CEFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 34195 00006FA4 740B                    	JZ	short NulTerm
 34196                                  TryTwoDot:
 34197 00006FA6 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 34198 00006FA7 AA                      	STOSB
 34199 00006FA8 38E0                    	CMP     AL,AH
 34200 00006FAA 7557                    	JNZ	short CopyBad
 34201 00006FAC E8C3FF                  	CALL    PathSep
 34202 00006FAF 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 34203                                  NulTerm:                                ;               return -1;
 34204 00006FB1 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 34205 00006FB3 AA                      	STOSB
 34206 00006FB4 897606                  	MOV     CopySoff,SI
 34207 00006FB7 EB47                    	JMP     SHORT _GoodRet		;       }
 34208                                  NormalComp:                             ;   else {
 34209 00006FB9 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 34210 00006FBC E804E9                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 34211 00006FBF 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 34212 00006FC2 743F                    	JZ	short CopyBad		;           return (-1);
 34213 00006FC4 36F606[2F05]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 34214 00006FCA 7510                    	JNZ	short DoPack
 34215 00006FCC 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 34216 00006FCF 360016[3705]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 34217 00006FD4 7F2D                    	JG	short CopyBad		;               return (-1);
 34218 00006FD6 7504                    	JNZ	short DoPack		;           else
 34219 00006FD8 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 34220 00006FDA 742F                    	JZ	short CopyBadPath	;               return (-1);
 34221                                  DoPack:                                 ;           }
 34222 00006FDC 897606                  	MOV     CopySoff,SI ; [bp+6]
 34223 00006FDF 16                      	push	ss
 34224 00006FE0 1F                      	pop	ds
 34225 00006FE1 BE[0805]                	MOV     SI,NAME1
 34226 00006FE4 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 34227 00006FE7 57                      	push	di
 34228 00006FE8 E8A9BE                  	call	PackName                ;       PackName (Name1, temp);
 34229 00006FEB 5F                      	pop	di
 34230 00006FEC E81EB0                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 34231 00006FEF 49                      	DEC     CX
 34232 00006FF0 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 34233 00006FF3 3B4E00                  	CMP     CX,CopyBP   ; [bp+0]
 34234 00006FF6 730B                    	JAE	short CopyBad		;           return (-1);
 34235 00006FF8 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 34236 00006FFA C47E02                  	LES     DI,CopyD    ; [bp+2]	
 34237 00006FFD E804B0                  	call	FStrCpy
 34238                                  _GoodRet:				;       }
 34239 00007000 F8                      	CLC
 34240 00007001 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 34241                                  CopyBad:
 34242 00007003 F9                      	STC
 34243 00007004 E8FA00                  	CALL    ScanPathChar            ; check for path chars in rest of string
 34244                                  	;mov	al,2
 34245 00007007 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 34246 00007009 7503                    	JNZ	short CopyEnd
 34247                                  CopyBadPath:
 34248 0000700B F9                      	STC
 34249                                  	;mov	al,3
 34250 0000700C B003                    	MOV     AL,error_path_not_found ; Set bad path error
 34251                                  CopyEnd:
 34252 0000700E 5D                      	pop	bp
 34253 0000700F 5F                      	pop	di
 34254 00007010 07                      	pop	es
 34255 00007011 5E                      	pop	si
 34256 00007012 1F                      	pop	ds
 34257 00007013 9F                      	LAHF
 34258 00007014 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 34259 00007017 E8F3AF                  	call	StrLen
 34260 0000701A 49                      	DEC     CX
 34261 0000701B 9E                      	SAHF
 34262 0000701C C3                      	retn
 34263                                  
 34264                                  ;Break <Splice - pseudo mount by string substitution>
 34265                                  ;----------------------------------------------------------------------------
 34266                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 34267                                  ;       ThisCDS to point to physical drive CDS.
 34268                                  ;   Inputs:     DS:SI point to string
 34269                                  ;               NoSetDir = TRUE => exact matches with splice fail
 34270                                  ;   Outputs:    DS:SI points to thisCDS
 34271                                  ;               ES:DI points to DPB
 34272                                  ;               String at DS:SI may be reduced in length by removing prefix
 34273                                  ;               and substituting drive letter.
 34274                                  ;               CX = 0 If no splice done
 34275                                  ;               CX <> 0 otherwise
 34276                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 34277                                  ;                   left alone
 34278                                  ;               ThisDPB points to proper DPB
 34279                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 34280                                  ;----------------------------------------------------------------------------
 34281                                  
 34282                                  Splice:
 34283 0000701D 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 34284 00007023 746A                    	JZ	short AllDone
 34285 00007025 36FF36[5E05]            	push	word [SS:THISCDS]
 34286 0000702A 36FF36[6005]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 34287 0000702F 1E                      	push	ds
 34288 00007030 56                      	push	si
 34289 00007031 5F                      	pop	di
 34290 00007032 07                      	pop	es
 34291 00007033 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 34292                                  SpliceScan:
 34293 00007035 E8D4FC                  	call	GetCDSFromDrv
 34294 00007038 724B                    	JC	short SpliceDone
 34295 0000703A FEC0                    	INC     AL
 34296                                  	;test	word [si+67],2000h
 34297 0000703C F744430020              	TEST    word [SI+curdir.flags],curdir_splice
 34298 00007041 74F2                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 34299 00007043 57                      	push	di
 34300 00007044 E8A100                  	CALL    PathPref                ;           if (!PathPref (s, d))
 34301 00007047 7403                    	JZ	short SpliceFound	;
 34302                                  SpliceSkip:
 34303 00007049 5F                      	pop	di
 34304 0000704A EBE9                    	JMP	short SpliceScan	;               continue;
 34305                                  SpliceFound:
 34306 0000704C 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 34307 00007050 7508                    	JNZ	short SpliceDo
 34308 00007052 36F606[1603]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 34309 00007058 75EF                    	JNZ	short SpliceSkip
 34310                                  SpliceDo:
 34311 0000705A 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 34312 0000705C 06                      	push	es
 34313 0000705D 1F                      	pop	ds
 34314 0000705E 5F                      	pop	di
 34315 0000705F E88000                  	CALL    TextFromDrive1          ;               src = TextFromDrive1(src,i);
 34316 00007062 36A1[7205]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 34317 00007066 09C0                    	OR      AX,AX
 34318 00007068 7808                    	JS	short NoPoke
 34319 0000706A 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 34320 0000706C 29F0                    	SUB     AX,SI
 34321 0000706E 36A3[7205]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 34322                                  NoPoke:
 34323 00007072 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 34324 00007075 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 34325 00007077 B05C                    	MOV     AL,"\"
 34326 00007079 AA                      	STOSB
 34327                                  SpliceCopy:                             ;               strcpy (src, p);
 34328 0000707A E887AF                  	call	FStrCpy
 34329 0000707D 83C404                  	ADD     SP,4                    ; throw away saved stuff
 34330 00007080 80C901                  	OR      CL,1                    ; signal splice done.
 34331 00007083 EB0C                    	JMP     SHORT DoSet             ;               return;
 34332                                  SpliceDone:                             ;               }
 34333 00007085 368F06[6005]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 34334 0000708A 368F06[5E05]            	pop	word [SS:THISCDS]			;smr;SS Override
 34335                                  AllDone:
 34336 0000708F 31C9                    	XOR     CX,CX
 34337                                  DoSet:
 34338 00007091 36C536[5E05]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 34339                                  	;les	di,[si+69]
 34340 00007096 C47C45                  	LES     DI,[SI+curdir.devptr]	
 34341 00007099 36893E[4605]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 34342 0000709E 368C06[4805]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 34343                                  Splice_retn:
 34344 000070A3 C3                      	retn
 34345                                  
 34346                                  ;Break <$NameTrans - partially process a name>
 34347                                  ;----------------------------------------------------------------------------
 34348                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 34349                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 34350                                  ;   to Transpath playing games with devices, we need to insure that the output
 34351                                  ;   has drive letter and : in it.
 34352                                  ;
 34353                                  ;   Inputs:     DS:SI - source string for translation
 34354                                  ;               ES:DI - pointer to buffer
 34355                                  ;   Outputs:
 34356                                  ;       Carry Clear
 34357                                  ;               Buffer at ES:DI is filled in with data
 34358                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 34359                                  ;       Carry Set
 34360                                  ;               AX = error_path_not_found
 34361                                  ;   Registers modified: all
 34362                                  ;----------------------------------------------------------------------------
 34363                                  
 34364                                  _$NameTrans:
 34365 000070A4 1E                      	push	ds
 34366 000070A5 56                      	push	si
 34367 000070A6 06                      	push	es
 34368 000070A7 57                      	push	di
 34369 000070A8 51                      	push	cx ; MSDOS 6.0
 34370                                  	
 34371                                  	; MSDOS 6.0	
 34372                                  ; M027 - Start
 34373                                  ;
 34374                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 34375                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 34376                                  ; device if the old call set the volume attribute bit. Note that devname in
 34377                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 34378                                  ; and restore CX.
 34379                                  ;
 34380 000070A9 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 34381 000070AB E81C05                  	call	SetAttrib
 34382                                  
 34383                                  ; M027 - End
 34384                                  
 34385                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34386 000070AE BF[8203]                	MOV     DI,OPENBUF
 34387 000070B1 E8E0FC                  	CALL    TransPath               ; to translation (everything)
 34388 000070B4 59                      	pop	cx ; MSDOS 6.0
 34389 000070B5 5F                      	pop     di
 34390 000070B6 07                      	pop	es
 34391 000070B7 5E                      	pop     si
 34392 000070B8 1F                      	pop     ds
 34393 000070B9 7303                    	JNC	short TransOK
 34394 000070BB E9E6A6                  	jmp	SYS_RET_ERR
 34395                                  TransOK:
 34396 000070BE BE[8203]                	MOV     SI,OPENBUF
 34397 000070C1 16                      	push	ss
 34398 000070C2 1F                      	pop	ds
 34399                                  GotText:
 34400 000070C3 E83EAF                  	call	FStrCpy
 34401 000070C6 E9D2A6                  	jmp	SYS_RET_OK
 34402                                  
 34403                                  ;Break   <DriveFromText - return drive number from a text string>
 34404                                  ;----------------------------------------------------------------------------
 34405                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 34406                                  ;   pointer.
 34407                                  ;
 34408                                  ;   Inputs:     DS:SI point to a text string
 34409                                  ;   Outputs:    AL has drive number
 34410                                  ;               DS:SI advanced
 34411                                  ;   Registers modified: AX,SI.
 34412                                  ;----------------------------------------------------------------------------
 34413                                  
 34414                                  DriveFromText:
 34415 000070C9 30C0                    	XOR     AL,AL                   ;       drive = 0;
 34416 000070CB 803C00                  	CMP     BYTE [SI],0		;       if (*s &&
 34417 000070CE 74D3                    	jz	short Splice_retn
 34418 000070D0 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 34419 000070D4 75CD                    	jnz	short Splice_retn
 34420 000070D6 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 34421 000070D7 0C20                    	OR      AL,20h
 34422                                  	;sub	al,60h
 34423 000070D9 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 34424 000070DB 75C6                    	jnz	short Splice_retn
 34425 000070DD B0FF                    	MOV     AL,-1                   ; nuke AL...
 34426 000070DF C3                      	retn				;           }
 34427                                  
 34428                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 34429                                  ;----------------------------------------------------------------------------
 34430                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 34431                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 34432                                  ;
 34433                                  ;   Inputs:     AL has 0-based drive number
 34434                                  ;   Outputs:    ES:DI advanced
 34435                                  ;   Registers modified: AX
 34436                                  ;----------------------------------------------------------------------------
 34437                                  
 34438                                  TextFromDrive:
 34439 000070E0 FEC0                    	INC     AL
 34440                                  TextFromDrive1:
 34441                                  	;add	al,40h
 34442 000070E2 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 34443 000070E4 B43A                    	MOV     AH,":"                  ;   strcat (d, ":");
 34444 000070E6 AB                      	STOSW
 34445                                  PathPref_retn:
 34446 000070E7 C3                      	retn
 34447                                  
 34448                                  ;Break   <PathPref - see if one path is a prefix of another>
 34449                                  ;----------------------------------------------------------------------------
 34450                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 34451                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 34452                                  ;   prefix: A:\ and A:\FOO
 34453                                  ;
 34454                                  ;   Inputs:     DS:SI potential prefix
 34455                                  ;               ES:DI string
 34456                                  ;   Outputs:    Zero set => prefix found
 34457                                  ;                   DI/SI advanced past matching part
 34458                                  ;               Zero reset => no prefix, DS/SI garbage
 34459                                  ;   Registers modified: CX
 34460                                  ;----------------------------------------------------------------------------
 34461                                  
 34462                                  PathPref:
 34463 000070E8 E830AF                  	call	DStrLen                 ; get length
 34464 000070EB 49                      	DEC     CX                      ; do not include nul byte
 34465 000070EC F3A6                    	REPZ    CMPSB                   ; compare
 34466 000070EE 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 34467 000070F0 50                      	push	ax			; save char register
 34468 000070F1 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 34469 000070F4 E836E8                  	call    PATHCHRCMP              ; is it a path char (Root!)
 34470 000070F7 7406                    	JZ	short Prefix		; yes, match root (I hope)
 34471                                  NotSep:                                 ; 2/13/KK
 34472 000070F9 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 34473 000070FC E875FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 34474                                  Prefix:
 34475 000070FF 58                      	pop	ax			; get back original
 34476 00007100 C3                      	retn
 34477                                  
 34478                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 34479                                  ;----------------------------------------------------------------------------
 34480                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 34481                                  ;     a path separator.
 34482                                  ;
 34483                                  ;     Input:    DS:SI target string (null terminated)
 34484                                  ;     Output:   Zero set => path separator encountered in string
 34485                                  ;               Zero clear => null encountered
 34486                                  ;     Registers modified: SI
 34487                                  ;----------------------------------------------------------------------------
 34488                                  
 34489                                  ScanPathChar:
 34490 00007101 AC                      	LODSB                           ; fetch a character
 34491 00007102 E86FFE                  	call    PathSepGotCh
 34492 00007105 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 34493 00007107 E823E8                  	call    PATHCHRCMP              ; path separator?
 34494 0000710A C3                      	retn
 34495                                  
 34496                                  ;============================================================================
 34497                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 34498                                  ;============================================================================
 34499                                  ; 13/07/2018 - Retro DOS v3.0
 34500                                  
 34501                                  ;	BREAK <$Close - return a handle to the system>
 34502                                  ;----------------------------------------------------------------------------
 34503                                  ;
 34504                                  ;**	$Close - Close a file Handle
 34505                                  ;
 34506                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 34507                                  ;		path
 34508                                  ;
 34509                                  ;	Assembler usage:
 34510                                  ;	    MOV     BX, handle
 34511                                  ;	    MOV     AH, Close
 34512                                  ;	    INT     int_command
 34513                                  ;
 34514                                  ;	ENTRY	(bx) = handle
 34515                                  ;	EXIT	<normal INT21 return convention>
 34516                                  ;	USES	all
 34517                                  ;
 34518                                  ;----------------------------------------------------------------------------
 34519                                  
 34520                                  _$CLOSE:
 34521                                  ;	Grab the SFT pointer from the JFN.
 34522                                  
 34523 0000710B E85B02                  	call	CheckOwner		; get system file entry
 34524 0000710E 722B                    	jc	short CloseError	; error return
 34525 00007110 16                      	push	ss
 34526 00007111 1F                      	pop	ds			; For DOS_CLOSE
 34527 00007112 893E[5A05]              	MOV	[THISSFT],DI		; save offset of pointer
 34528 00007116 8C06[5C05]              	MOV	[THISSFT+2],ES		; save segment value
 34529                                  
 34530                                  ; DS:SI point to JFN table entry.
 34531                                  ; ES:DI point to SFT
 34532                                  ;
 34533                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 34534                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 34535                                  ; If the file was not a net FCB, we free the JFN too.
 34536                                  
 34537                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 34538 0000711A 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 34539 0000711E 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 34540                                  	;mov	al,[ES:DI+2]
 34541 00007120 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 34542                                  	;and	al,0F0h
 34543 00007124 24F0                    	AND	AL,SHARING_MASK
 34544                                  	;cmp	al,70h
 34545 00007126 3C70                    	CMP	AL,SHARING_NET_FCB
 34546 00007128 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 34547                                  
 34548                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 34549                                  ; -1.
 34550                                  
 34551                                  FreeJFN:
 34552 0000712A E800FA                  	call	pJFNFromHandle		;   d = pJFN (handle);
 34553 0000712D 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 34554                                  PostFree:
 34555                                  
 34556                                  ; ThisSFT is correctly set, we have DS = DOSDATA.  Looks OK for a DOS_CLOSE!
 34557                                  
 34558 00007131 E8FFC9                  	call	DOS_CLOSE
 34559                                  
 34560                                  ; DOS_Close may return an error.  If we see such an error, we report it but
 34561                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 34562                                  
 34563 00007134 7205                    	JC	short CloseError
 34564                                  	;mov	ah,3Eh
 34565 00007136 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 34566 00007138 E960A6                  	jmp	SYS_RET_OK
 34567                                  CloseError:
 34568 0000713B E966A6                  	jmp	SYS_RET_ERR
 34569                                  
 34570                                  
 34571                                  ;	BREAK <$Commit - commit the file>
 34572                                  ;----------------------------------------------------------------------------
 34573                                  ;
 34574                                  ;**	$Commit - Commit a File
 34575                                  ;
 34576                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 34577                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 34578                                  ;	the directory entry, etc., so this commit is pretty useless.  check
 34579                                  ;	and fix this!! jgl
 34580                                  ;
 34581                                  ;	Assembler usage:
 34582                                  ;	    MOV     BX, handle
 34583                                  ;	    MOV     AH, Commit
 34584                                  ;	    INT     int_command
 34585                                  ;
 34586                                  ;	ENTRY	(bx) = handle
 34587                                  ;	EXIT	none
 34588                                  ;	USES	all
 34589                                  ;;----------------------------------------------------------------------------
 34590                                  
 34591                                  _$COMMIT:
 34592                                  ;	Grab the SFT pointer from the JFN.
 34593                                  
 34594 0000713E E82802                  	call	CheckOwner		; get system file entry
 34595 00007141 7214                    	JC	short CommitError	; error return
 34596 00007143 16                      	push	ss
 34597 00007144 1F                      	pop	ds			; For DOS_COMMIT
 34598 00007145 893E[5A05]              	MOV	[THISSFT],DI		; save offset of pointer
 34599 00007149 8C06[5C05]              	MOV	[THISSFT+2],ES		; save segment value
 34600                                  
 34601                                  ;	ThisSFT is correctly set, we have DS = DOSDATA.  Looks OK for a DOS_COMMIT
 34602                                  ;
 34603                                  ;	ES:DI point to SFT
 34604                                  
 34605 0000714D E832CB                  	call	DOS_COMMIT
 34606 00007150 7205                    	JC	short CommitError
 34607                                  	;mov	ah,68h
 34608 00007152 B468                    	MOV	AH,COMMIT		;
 34609 00007154 E944A6                  	jmp	SYS_RET_OK
 34610                                  CommitError:
 34611 00007157 E94AA6                  	jmp	SYS_RET_ERR
 34612                                  
 34613                                  ;	BREAK <$ExtHandle - extend handle count>
 34614                                  
 34615                                  ;**	$ExtHandle - Extend Handle Count
 34616                                  ;----------------------------------------------------------------------------
 34617                                  ;	Assembler usage:
 34618                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 34619                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 34620                                  ;	    INT     int_command 		 busy )
 34621                                  ;
 34622                                  ;	ENTRY	(bx) = new number of handles
 34623                                  ;	EXIT	'C' clear if OK
 34624                                  ;		'C' set iff err
 34625                                  ;		  (ax) = error code
 34626                                  ;			 AX = error_not_enough_memory
 34627                                  ;			      error_too_many_open_files
 34628                                  ;	USES	all
 34629                                  ;----------------------------------------------------------------------------
 34630                                  
 34631                                  _$ExtHandle:
 34632 0000715A 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 34633                                  	;cmp	bx,20
 34634 0000715C 83FB14                  	CMP	BX,FILPERPROC
 34635 0000715F 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 34636 00007161 BB1400                  	MOV	BX,FILPERPROC
 34637                                  exth2:	
 34638 00007164 368E06[FC02]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 34639                                  	;mov	cx,[ES:32h]
 34640 00007169 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 34641 0000716E 39CB                    	CMP	BX,CX			; the requested == current
 34642 00007170 7452                    	JE	short ok_done 		; yes and exit
 34643 00007172 7722                    	JA	short larger		; go allocate new table
 34644                                  
 34645                                  ;	We're going to shrink the # of handles available
 34646                                  
 34647 00007174 BD0100                  	MOV	BP,1			; shrink
 34648                                  	;mov	ds,[ES:36h]
 34649 00007177 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 34650 0000717C 89DE                    	MOV	SI,BX			;
 34651 0000717E 29D9                    	SUB	CX,BX			; get difference
 34652                                  
 34653                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 34654                                  chck_handles:
 34655 00007180 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 34656 00007183 7542                    	JNZ	short too_many_files	; status
 34657 00007185 46                      	INC	SI
 34658 00007186 E2F8                    	LOOP	chck_handles
 34659 00007188 83FB14                  	CMP	BX,FILPERPROC		; = 20
 34660 0000718B 7709                    	JA	short larger		; no
 34661                                  
 34662 0000718D BD0200                  	MOV	BP,2			; psp
 34663                                  	;mov	di,24
 34664 00007190 BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 34665 00007193 53                      	PUSH	BX
 34666 00007194 EB1F                    	JMP	short movhandl
 34667                                  
 34668                                  larger:
 34669 00007196 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 34670 00007199 0F848100                	JZ	invalid_func ; 10/08/2018
 34671 0000719D F8                      	CLC
 34672 0000719E 53                      	PUSH	BX			; save requested number
 34673 0000719F 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 34674 000071A2 B104                    	MOV	CL,4
 34675                                  	;ror	bx,cl			; MSDOS 3.3
 34676 000071A4 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 34677 000071A6 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 34678                                  
 34679 000071AA 55                      	PUSH	BP
 34680 000071AB E8E9F6                  	call	_$ALLOC			; allocate memory
 34681 000071AE 5D                      	POP	BP
 34682 000071AF 7267                    	JC	short no_memory		; not enough meory
 34683                                  
 34684 000071B1 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 34685 000071B3 31FF                    	XOR	DI,DI
 34686                                  movhandl:
 34687 000071B5 368E1E[FC02]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 34688                                  
 34689 000071BA F7C50300                	test	BP,3			; enlarge ?
 34690 000071BE 740C                    	JZ	short enlarge 		; yes
 34691 000071C0 59                      	POP	CX			; cx = the amount you shrink
 34692 000071C1 51                      	PUSH	CX
 34693 000071C2 EB0C                    	JMP	short copy_hand
 34694                                  
 34695                                  ;	Done.  'C' clear
 34696                                  
 34697                                  ok_done:
 34698 000071C4 E9D4A5                  	jmp	SYS_RET_OK
 34699                                  
 34700                                  too_many_files:
 34701                                  	;mov	al,4
 34702 000071C7 B004                    	MOV	AL,error_too_many_open_files
 34703 000071C9 E9D8A5                  	jmp	SYS_RET_ERR
 34704                                  
 34705                                  enlarge:
 34706                                  	;mov	cx,[32h]
 34707 000071CC 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 34708                                  copy_hand:
 34709 000071D0 89CA                    	MOV	DX,CX
 34710                                  	;lds	si,[34h]
 34711 000071D2 C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 34712 000071D6 F3A4                    	REP	MOVSB			; copy infomation to new table
 34713 000071D8 59                      	POP	CX			; get new number of handles
 34714 000071D9 51                      	PUSH	CX			; save it again
 34715 000071DA 29D1                    	SUB	CX,DX			; get the difference
 34716 000071DC B0FF                    	MOV	AL,-1			; set availability to handles
 34717 000071DE F3AA                    	REP	STOSB
 34718 000071E0 368E1E[FC02]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 34719                                  	;cmp	word [34h],0
 34720 000071E5 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 34721 000071EA 750D                    	JNZ	short update_info	; yes, go update PDB entries
 34722 000071EC 55                      	PUSH	BP
 34723 000071ED 1E                      	PUSH	DS			; save old table segment
 34724 000071EE 06                      	PUSH	ES			; save new table segment
 34725 000071EF 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 34726 000071F3 E8BEF7                  	call	_$DEALLOC		; deallocate old table meomory
 34727 000071F6 07                      	POP	ES			; restore new table segment
 34728 000071F7 1F                      	POP	DS			; restore old table segment
 34729 000071F8 5D                      	POP	BP
 34730                                  
 34731                                  update_info:
 34732 000071F9 F7C50200                	test	BP,2			; psp?
 34733 000071FD 7408                    	JZ	short non_psp 		; no
 34734                                  	;mov	word [34h],18h ; 24
 34735 000071FF C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 34736 00007205 EB06                    	JMP	short final
 34737                                  non_psp:
 34738                                  	;mov	word [34h],0
 34739 00007207 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 34740                                  final:
 34741                                  	;mov	word [36h],es	
 34742 0000720D 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 34743                                  	;pop	word [32h]
 34744 00007211 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 34745 00007215 E983A5                  	jmp	SYS_RET_OK
 34746                                  
 34747                                  no_memory:
 34748 00007218 5B                      	POP	BX			; clean stack
 34749                                  	;mov	al,8
 34750 00007219 B008                    	MOV	AL,error_not_enough_memory
 34751 0000721B E986A5                  	jmp	SYS_RET_ERR
 34752                                  invalid_func:
 34753                                  	;mov	al,1
 34754 0000721E B001                    	MOV	AL,error_invalid_function
 34755 00007220 E981A5                  	jmp	SYS_RET_ERR
 34756                                  
 34757                                  
 34758                                  ;	BREAK <$READ - Read from a file handle>
 34759                                  ;----------------------------------------------------------------------------
 34760                                  ;
 34761                                  ;**	$Read - Read from a File Handle
 34762                                  ;
 34763                                  ;   Assembler usage:
 34764                                  ;
 34765                                  ;	LDS	DX, buf
 34766                                  ;	MOV	CX, count
 34767                                  ;	MOV	BX, handle
 34768                                  ;	MOV	AH, Read
 34769                                  ;	INT	int_command
 34770                                  ;	  AX has number of bytes read
 34771                                  ;
 34772                                  ;	ENTRY	(bx) = file handle
 34773                                  ;		(cx) = byte count
 34774                                  ;		(ds:dx) = buffer address
 34775                                  ;	EXIT	Through system call return so that to user:
 34776                                  ;		  'C' clear if OK
 34777                                  ;		    (ax) = bytes read
 34778                                  ;		  'C' set if error
 34779                                  ;		    (ax) = error code
 34780                                  ;
 34781                                  ;----------------------------------------------------------------------------
 34782                                  
 34783                                  _$READ:
 34784 00007223 BE[CB3E]                	MOV	SI,DOS_READ
 34785                                  ReadDo:
 34786 00007226 E804F9                  	call	pJFNFromHandle
 34787 00007229 7208                    	JC	short ReadError
 34788 0000722B 268A05                  	MOV	AL,[ES:DI]
 34789 0000722E E83801                  	call	CheckOwner		; get the handle
 34790 00007231 7303                    	JNC	short ReadSetup		; no errors do the operation
 34791                                  
 34792                                  ;	Have an error.	'C' set
 34793                                  
 34794                                  ReadError:
 34795 00007233 E96EA5                  	jmp	SYS_RET_ERR		; go to error traps
 34796                                  
 34797                                  ReadSetup:
 34798 00007236 36893E[5A05]            	MOV	[SS:THISSFT],DI		; save offset of pointer;smr;SS Override
 34799 0000723B 368C06[5C05]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 34800                                  	;;; MSDOS 6.0 
 34801                                  ;; Extended Open
 34802                                  	;;;testb [ES:DI+SF_ENTRY.sf_mode],INT_24_ERROR  ;AN000;;EO. need i24
 34803                                  	;;;JZ	short needi24 		      ;AN000;;EO. yes
 34804                                  	;;;OR	byte [EXTOPEN_ON],EXT_OPEN_I24_OFF 
 34805                                  					;AN000;;EO. set it off;smr;SS Override
 34806                                  needi24:				;AN000;
 34807                                  ;; Extended Open
 34808 00007240 36FF36[F802]            	push	word [SS:DMAADD]
 34809 00007245 36FF36[FA02]            	push	word [SS:DMAADD+2]	;smr;SS Override
 34810                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 34811                                  	;;; MSDOS 6.0
 34812                                  	;;; CALL Align_Buffer		;AN000;MS. align user's buffer
 34813                                  	; MSDOS 3.3
 34814 0000724A 89D3                    	MOV	BX,DX			; copy offset
 34815 0000724C 51                      	push	cx			; don't stomp on count
 34816 0000724D B104                    	MOV	CL,4			; bits to shift bytes->para
 34817 0000724F D3EB                    	SHR	BX,CL			; get number of paragraphs
 34818 00007251 59                      	pop	cx			; get count back
 34819 00007252 8CD8                    	MOV	AX,DS			; get original segment
 34820 00007254 01D8                    	ADD	AX,BX			; get new segment
 34821 00007256 8ED8                    	MOV	DS,AX			; in seg register
 34822 00007258 83E20F                  	AND	DX,0Fh			; normalize offset
 34823 0000725B 368916[F802]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 34824 00007260 368C1E[FA02]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 34825                                  						;smr;SS Override
 34826                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 34827 00007265 16                      	push	ss			; go for DOS addressability
 34828 00007266 1F                      	pop	ds
 34829                                  
 34830 00007267 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 34831                                  
 34832 00007269 8F06[FA02]              	pop	word [DMAADD+2]
 34833 0000726D 8F06[F802]              	pop	word [DMAADD]
 34834                                  	;JNC	short READ_OK		;AN002;
 34835                                  	;JMP	ReadError		;AN002; if error, say bye bye
 34836 00007271 72C0                    	jc	short ReadError
 34837                                  READ_OK:
 34838 00007273 89C8                    	MOV	AX,CX			; get correct return in correct reg
 34839 00007275 E923A5                  	jmp	SYS_RET_OK		; successful return
 34840                                  
 34841                                  ; 13/07/2018 - Retro DOS v3.0
 34842                                  
 34843                                  ;   Input: DS:DX points to user's buffer addr
 34844                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 34845                                  ;   Output: [DMAADD] set
 34846                                  
 34847                                  ;Align_Buffer:
 34848                                  ;	MOV	BX,DX			; copy offset
 34849                                  ;	push	cx			; don't stomp on count
 34850                                  ;	MOV	CL,4			; bits to shift bytes->para
 34851                                  ;	SHR	BX,CL			; get number of paragraphs
 34852                                  ;	pop	cx			; get count back
 34853                                  ;	MOV	AX,DS			; get original segment
 34854                                  ;	ADD	AX,BX			; get new segment
 34855                                  ;	MOV	DS,AX			; in seg register
 34856                                  ;	AND	DX,0Fh			; normalize offset
 34857                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 34858                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 34859                                  ;						;smr;SS Override
 34860                                  ;	retn
 34861                                  
 34862                                  ;BREAK <$WRITE - write to a file handle>
 34863                                  ;----------------------------------------------------------------------------
 34864                                  ;
 34865                                  ;   Assembler usage:
 34866                                  ;	    LDS     DX, buf
 34867                                  ;	    MOV     CX, count
 34868                                  ;	    MOV     BX, handle
 34869                                  ;	    MOV     AH, Write
 34870                                  ;	    INT     int_command
 34871                                  ;	  AX has number of bytes written
 34872                                  ;   Errors:
 34873                                  ;	    AX = write_invalid_handle
 34874                                  ;	       = write_access_denied
 34875                                  ;
 34876                                  ;   Returns in register AX
 34877                                  ;
 34878                                  ;----------------------------------------------------------------------------
 34879                                  
 34880                                  _$WRITE:
 34881 00007278 BE[5640]                	MOV	SI,DOS_WRITE
 34882 0000727B EBA9                    	JMP	short ReadDo
 34883                                  
 34884                                  ;BREAK <$LSEEK - move r/w pointer>
 34885                                  ;----------------------------------------------------------------------------
 34886                                  ;
 34887                                  ;   Assembler usage:
 34888                                  ;	    MOV     DX, offsetlow
 34889                                  ;	    MOV     CX, offsethigh
 34890                                  ;	    MOV     BX, handle
 34891                                  ;	    MOV     AL, method
 34892                                  ;	    MOV     AH, LSeek
 34893                                  ;	    INT     int_command
 34894                                  ;	  DX:AX has the new location of the pointer
 34895                                  ;   Error returns:
 34896                                  ;	    AX = error_invalid_handle
 34897                                  ;	       = error_invalid_function
 34898                                  ;   Returns in registers DX:AX
 34899                                  ;
 34900                                  ;----------------------------------------------------------------------------
 34901                                  
 34902                                  _$LSEEK:
 34903 0000727D E8E900                  	call	CheckOwner		; get system file entry
 34904                                  LSeekError:
 34905 00007280 7302                    	JNC	short CHKOWN_OK		;AN002;
 34906 00007282 EBAF                    	JMP	short ReadError		;AN002; error return
 34907                                  
 34908                                  CHKOWN_OK:				;AN002;
 34909 00007284 3C02                    	CMP	AL,2			; is the seek value correct?
 34910 00007286 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 34911                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 34912 00007288 36C606[EF02]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 34913                                  					;smr;SS Override
 34914                                  	;mov	al,1
 34915 0000728E B001                    	mov	al, error_invalid_function ; invalid method
 34916 00007290 EBA1                    	jmp	short ReadError
 34917                                  LSeekDisp:
 34918 00007292 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 34919 00007294 720A                    	JB	short LSeekStore	; just store CX:DX
 34920 00007296 771C                    	JA	short LSeekEOF		; seek from end of file
 34921                                  	;add	dx,[es:di+21]
 34922 00007298 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 34923                                  	;adc	cx,[es:di+23]
 34924 0000729C 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 34925                                  LSeekStore:
 34926 000072A0 89C8                    	MOV	AX,CX			; AX:DX
 34927 000072A2 92                      	XCHG	AX,DX			; DX:AX is the correct value
 34928                                  LSeekSetpos:
 34929                                  	;mov	[es:di+21],ax
 34930 000072A3 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 34931                                  	;mov	[es:di+23],dx
 34932 000072A7 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 34933 000072AB E89BA3                  	call	Get_User_Stack
 34934                                  	;mov	[si+6],dx
 34935 000072AE 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 34936                                  	;jmp	SYS_RET_OK		; successful return
 34937                                  	; 26/07/2019
 34938 000072B1 E9EAA4                  	jmp	SYS_RET_OK_clc
 34939                                  
 34940                                  LSeekEOF:
 34941                                  	;test	word [es:di+5],8000h
 34942 000072B4 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 34943 000072BA 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 34944                                  LOCAL_LSeek:
 34945                                  	;add	dx,[es:di+17]
 34946 000072BC 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 34947                                  	;adc	cx,[es:di+19]
 34948 000072C0 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 34949 000072C4 EBDA                    	JMP	short LSeekStore	; go and set the position
 34950                                  
 34951                                  Check_LSeek_Mode:
 34952                                  	;test	word [es:di+2],8000h
 34953 000072C6 26F745020080            	test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 34954 000072CC 75EE                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 34955                                  	;mov	ax,[es:di+2]
 34956 000072CE 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 34957                                  	;and	ax, 0F0h
 34958 000072D2 25F000                  	AND	AX,SHARING_MASK
 34959                                  	;cmp	ax,40h
 34960 000072D5 83F840                  	CMP	AX,SHARING_DENY_NONE
 34961 000072D8 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 34962                                  	;cmp	ax,30h
 34963 000072DA 83F830                  	CMP	AX,SHARING_DENY_READ
 34964 000072DD 75DD                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 34965                                  NET_LSEEK:
 34966                                  ;	JMP	short LOCAL_LSeek
 34967                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 34968                                  	;CallInstall Net_Lseek,MultNET,33
 34969                                  	;JNC	short LSeekSetPos
 34970                                  
 34971 000072DF B82111                  	mov     ax, 1121h
 34972 000072E2 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 34973                                  			; CX:DX = offset (in bytes) from end
 34974                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 34975                                  			; SS = DOS CS
 34976                                  			; Return: CF set on error
 34977                                  			; CF clear if successful, DX:AX = new file position
 34978 000072E4 73BD                    	jnb     short LSeekSetpos
 34979 000072E6 E9BBA4                  	jmp	SYS_RET_ERR
 34980                                  
 34981                                  ;BREAK <FileTimes - modify write times on a handle>
 34982                                  ;----------------------------------------------------------------------------
 34983                                  ;
 34984                                  ;   Assembler usage:
 34985                                  ;	    MOV AH, FileTimes (57H)
 34986                                  ;	    MOV AL, func
 34987                                  ;	    MOV BX, handle
 34988                                  ;	; if AL = 1 then then next two are mandatory
 34989                                  ;	    MOV CX, time
 34990                                  ;	    MOV DX, date
 34991                                  ;	    INT 21h
 34992                                  ;	; if AL = 0 then CX/DX has the last write time/date
 34993                                  ;	; for the handle.
 34994                                  ;
 34995                                  ;	AL=02		 get extended attributes
 34996                                  ;	   BX=handle
 34997                                  ;	   CX=size of buffer (0, return max size )
 34998                                  ;	   DS:SI query list (si=-1, selects all EA)
 34999                                  ;	   ES:DI buffer to hold EA list
 35000                                  ;
 35001                                  ;	AL=03		 get EA name list
 35002                                  ;	   BX=handle
 35003                                  ;	   CX=size of buffer (0, return max size )
 35004                                  ;	   ES:DI buffer to hold name list
 35005                                  ;
 35006                                  ;	AL=04		 set extended attributes
 35007                                  ;	   BX=handle
 35008                                  ;	   ES:DI buffer of EA list
 35009                                  ;
 35010                                  ;
 35011                                  ;   Error returns:
 35012                                  ;	    AX = error_invalid_function
 35013                                  ;	       = error_invalid_handle
 35014                                  ;
 35015                                  ;----------------------------------------------------------------------------
 35016                                  
 35017                                  _$FILE_TIMES:
 35018                                  	; 13/07/2018 - Retro DOS v3.0
 35019                                  
 35020                                  	; MSDOS 3.3
 35021 000072E9 3C02                    	cmp	al,2			; correct subfunction ?
 35022 000072EB 720B                    	jb	short ft1
 35023                                  
 35024                                          ;mov	byte [ss:EXTERR_LOCUS], 1
 35025 000072ED 36C606[EF02]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35026                                  						;SS Overr
 35027                                  	;mov	al,1
 35028 000072F3 B001                    	mov	al,error_invalid_function ; give bad return
 35029 000072F5 E9ACA4                  	jmp     SYS_RET_ERR
 35030                                  
 35031                                  	; MSDOS 6.0
 35032                                  	;cmp	al,2			; correct subfunction ?
 35033                                  	;jae	short inval_func
 35034                                  ft1:
 35035 000072F8 E86E00                  	call	CheckOwner		; get sft
 35036 000072FB 7283                    	jc	short LSeekError	; bad handle
 35037                                  
 35038 000072FD 08C0                    	or	al,al			; get time/date ?
 35039 000072FF 7515                    	jnz	short ft_set_time
 35040                                  
 35041                                  ;------ here we get the time & date from the sft for the user
 35042                                  
 35043 00007301 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 35044                                  	;mov	cx,[es:di+13]
 35045 00007302 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 35046                                  	;mov	dx,[es:di+15]
 35047 00007306 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 35048 0000730A FB                      	sti
 35049 0000730B E83BA3                  	call	Get_User_Stack
 35050                                  	;mov	[si+4],cx
 35051 0000730E 894C04                  	mov	[si+user_env.user_CX],cx
 35052                                  	;mov	[si+6],dx
 35053 00007311 895406                  	mov	[si+user_env.user_DX],dx
 35054 00007314 EB20                    	jmp	short ok_ret
 35055                                  
 35056                                  ;------ here we set the time in sft
 35057                                  
 35058                                  ft_set_time:
 35059 00007316 E8F6AD                  	call    EcritSFT
 35060                                  	;mov	[es:di+13],cx
 35061 00007319 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 35062                                  	;mov	[es:di+15],dx
 35063 0000731D 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 35064                                  
 35065 00007321 31C0                    	xor	ax, ax
 35066 00007323 36FF1E[9400]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 35067                                  
 35068                                  ;------ set the flags in SFT entry
 35069                                  	;and	word [es:di+5],0FFBFh
 35070 00007328 26836505BF              	and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 35071                                  							; mark file as dirty
 35072                                  	;or	word [es:di+5],4000h
 35073 0000732D 26814D050040            	or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 35074                                  							; ask close not to
 35075                                  							;   bother about date
 35076                                  							;   and time
 35077 00007333 E8E1AD                  	call	LcritSFT
 35078                                  ok_ret:
 35079 00007336 E962A4                  	jmp	SYS_RET_OK
 35080                                  
 35081                                  ;inval_func:
 35082                                  ;	mov	byte [ss:EXTERR_LOCUS], 1
 35083                                  ;	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35084                                  ;						;SS Overr
 35085                                  ;	;mov	al,1
 35086                                  ;	mov	al,error_invalid_function ; give bad return
 35087                                  ;	jmp     SYS_RET_ERR
 35088                                  
 35089                                  ;BREAK <$DUP - duplicate a jfn>
 35090                                  ;----------------------------------------------------------------------------
 35091                                  ;
 35092                                  ;   Assembler usage:
 35093                                  ;	    MOV     BX, fh
 35094                                  ;	    MOV     AH, Dup
 35095                                  ;	    INT     int_command
 35096                                  ;	  AX has the returned handle
 35097                                  ;   Errors:
 35098                                  ;	    AX = dup_invalid_handle
 35099                                  ;	       = dup_too_many_open_files
 35100                                  ;
 35101                                  ;----------------------------------------------------------------------------
 35102                                  
 35103                                  _$DUP:
 35104 00007339 89D8                    	MOV	AX,BX			; save away old handle in AX
 35105 0000733B E842F8                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 35106                                  DupErrorCheck:
 35107 0000733E 7218                    	JC	short DupErr		; nope, bye
 35108 00007340 06                      	push	es
 35109 00007341 57                      	push	di			; save away SFT
 35110 00007342 5E                      	pop	si			; into convenient place DS:SI
 35111 00007343 1F                      	pop	ds
 35112 00007344 93                      	XCHG	AX,BX			; get back old handle
 35113 00007345 E82100                  	call	CheckOwner		; get sft in ES:DI
 35114 00007348 720E                    	JC	short DupErr		; errors go home
 35115 0000734A E804C4                  	call	DOS_Dup_Direct
 35116 0000734D E8DDF7                  	call	pJFNFromHandle		; get pointer
 35117 00007350 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 35118 00007353 881C                    	MOV	[SI],BL			; stuff in new SFT
 35119 00007355 E943A4                  	jmp	SYS_RET_OK		; and go home
 35120                                  DupErr:
 35121 00007358 E949A4                  	jmp	SYS_RET_ERR
 35122                                  
 35123                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 35124                                  ;----------------------------------------------------------------------------
 35125                                  ;
 35126                                  ;   Assembler usage:
 35127                                  ;	    MOV     BX, fh
 35128                                  ;	    MOV     CX, newfh
 35129                                  ;	    MOV     AH, Dup2
 35130                                  ;	    INT     int_command
 35131                                  ;   Error returns:
 35132                                  ;	    AX = error_invalid_handle
 35133                                  ;
 35134                                  ;----------------------------------------------------------------------------
 35135                                  
 35136                                  _$DUP2:
 35137 0000735B 53                      	push	bx
 35138 0000735C 51                      	push	cx			; save source
 35139 0000735D 89CB                    	MOV	BX,CX			; get one to close
 35140 0000735F E8A9FD                  	call	_$CLOSE			; close destination handle
 35141 00007362 5B                      	pop	bx
 35142 00007363 58                      	pop	ax			; old in AX, new in BX
 35143 00007364 E8C6F7                  	call	pJFNFromHandle		; get pointer
 35144 00007367 EBD5                    	JMP	short DupErrorCheck	; check error and do dup
 35145                                  
 35146                                  ;Break	<CheckOwner - verify ownership of handles from server>
 35147                                  ;----------------------------------------------------------------------------
 35148                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 35149                                  ;   process without the process knowing it (delete/rename of open files, for
 35150                                  ;   example), it is possible for the redirector to issue a call to a handle
 35151                                  ;   that it soes not rightfully own.  We check here to make sure that the
 35152                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 35153                                  ;   SFFromHandle to really make sure that the SFT is good.
 35154                                  ;
 35155                                  ;	ENTRY	BX has the handle
 35156                                  ;		User_ID is the current user
 35157                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 35158                                  ;		Carry Set => AX has error code
 35159                                  ;	USES	none
 35160                                  ;----------------------------------------------------------------------------
 35161                                  
 35162                                  CheckOwner:
 35163                                  	; 13/07/2018 - Retro DOS v3.0
 35164                                  
 35165 00007369 E8D9F7                  	call	SFFromHandle
 35166 0000736C 720F                    	jc	short co_ret_label	; retc
 35167                                  
 35168 0000736E 50                      	push	ax
 35169                                  
 35170                                  	; MSDOS 6.0
 35171                                  ;SR;
 35172                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 35173                                  ;SR; are shared across multiple VMs in win386.
 35174                                  ;SR;
 35175                                  	;test	byte [IsWin386],1
 35176                                  	;jz	short no_win386		;win386 is not present
 35177                                  	;xor	ax,ax			;set the zero flag
 35178                                  	;jmp	short skip_win386	
 35179                                  
 35180                                  ;no_win386:
 35181 0000736F 36A1[0803]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 35182                                  	;cmp	ax,[es:di+47]
 35183 00007373 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 35184                                  
 35185                                  ;skip_win386:
 35186 00007377 58                      	pop	ax
 35187                                  	
 35188 00007378 7403                    	jz	short co_ret_label
 35189                                  	
 35190                                  	;mov	al,6
 35191 0000737A B006                    	mov	al,error_invalid_handle
 35192 0000737C F9                      	stc
 35193                                  
 35194                                  co_ret_label:
 35195 0000737D C3                      	retn
 35196                                  
 35197                                  ;============================================================================
 35198                                  ; FILE.ASM, MSDOS 6.0, 1991
 35199                                  ;============================================================================
 35200                                  ; 14/07/2018 - Retro DOS v3.0
 35201                                  
 35202                                  ; MSDOS 2.11
 35203                                  ;BREAK <$Open - open a file handle>
 35204                                  ;----------------------------------------------------------------------------
 35205                                  ;   Assembler usage:
 35206                                  ;           LDS     DX, Name
 35207                                  ;           MOV     AH, Open
 35208                                  ;           MOV     AL, access
 35209                                  ;           INT     int_command
 35210                                  ;
 35211                                  ;       ACCESS          Function
 35212                                  ;       ------          --------
 35213                                  ;       open_for_read   file is opened for reading
 35214                                  ;       open_for_write  file is opened for writing
 35215                                  ;       open_for_both   file is opened for both reading and writing.
 35216                                  ;
 35217                                  ;   Error returns:
 35218                                  ;           AX = error_invalid_access
 35219                                  ;              = error_file_not_found
 35220                                  ;              = error_access_denied
 35221                                  ;              = error_too_many_open_files
 35222                                  ;----------------------------------------------------------------------------
 35223                                  
 35224                                  ; MSDOS 6.0
 35225                                  ;	BREAK <$Open - open a file from a path string>
 35226                                  ;----------------------------------------------------------------------------
 35227                                  ;
 35228                                  ;**	$OPen - Open a File
 35229                                  ;
 35230                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 35231                                  ;	file and and returns a handle
 35232                                  ;
 35233                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 35234                                  ;		(AL) = open mode
 35235                                  ;	EXIT	'C' clear if OK
 35236                                  ;		  (ax) = file handle
 35237                                  ;		'C' set if error
 35238                                  ;		  (ax) = error code
 35239                                  ;	USES	all
 35240                                  ;
 35241                                  ;----------------------------------------------------------------------------
 35242                                  
 35243                                  _$OPEN:       
 35244 0000737E 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 35245                                  _$Open2:
 35246                                  	;mov	ch,16h
 35247 00007380 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 35248 00007382 E84502                  	call	SetAttrib
 35249 00007385 B9[F337]                	mov	cx,DOS_OPEN
 35250                                  
 35251                                  	;xor	ah,ah  ; MSDOS 3.3
 35252                                  
 35253 00007388 50                      	push	ax
 35254                                  
 35255                                  ;*	General file open/create code. The $CREATE call and the various
 35256                                  ;	$OPEN calls all come here.
 35257                                  ;
 35258                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 35259                                  ;	path names, etc., and then dispatch to our individual handlers.
 35260                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 35261                                  ;
 35262                                  ;	(TOS) = create mode
 35263                                  ;	(CX) = address of routine to call to do actual function
 35264                                  ;	(DS:DX) = ASCIZ name
 35265                                  ;	SAttrib = Attribute mask
 35266                                  
 35267                                  ;	Get a free SFT and mark it "being allocated"
 35268                                  
 35269                                  AccessFile:
 35270 00007389 E883AD                  	call	EcritSFT
 35271 0000738C E804F8                  	call	SFNFree			; get a free sfn
 35272 0000738F E885AD                  	call	LcritSFT
 35273 00007392 7214                    	jc	short OpenFailJ		; oops, no free sft's
 35274 00007394 36891E[6605]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 35275 00007399 36893E[5A05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 35276 0000739E 368C06[5C05]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 35277                                  
 35278                                  ;	Find a free area in the user's JFN table.
 35279                                  
 35280 000073A3 E8DAF7                  	call	JFNFree			; get a free jfn
 35281 000073A6 7303                    	jnc	short SaveJFN
 35282                                  OpenFailJ:
 35283 000073A8 E98100                  	JMP	OpenFail		; there were free JFNs... try SFN
 35284                                  
 35285                                  SaveJFN:
 35286 000073AB 36893E[6A05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 35287 000073B0 368C06[6C05]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 35288 000073B5 36891E[6805]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 35289                                  
 35290                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 35291                                  ;	reusing the same JFN.
 35292                                  
 35293 000073BA 368B1E[6605]            	MOV	BX,[ss:SFN]					;smr;SS Override
 35294 000073BF 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 35295 000073C2 89D6                    	MOV	SI,DX			; get name in appropriate place
 35296 000073C4 BF[8203]                	MOV	DI,OPENBUF		; appropriate buffer
 35297 000073C7 51                      	push	cx			; save routine to call
 35298 000073C8 E8C9F9                  	call	TransPath		; convert the path
 35299 000073CB 5B                      	pop	bx			; (bx) = routine to call
 35300                                  
 35301 000073CC 36C536[5A05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 35302 000073D1 720A                    	JC	short OpenCleanJ	; no error, go and open file
 35303 000073D3 36803E[3705]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 35304 000073D9 7404                    	JZ	short SetSearch
 35305                                  	;mov	al,2
 35306 000073DB B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 35307                                  OpenCleanJ:
 35308 000073DD EB3E                    	JMP	short OpenClean
 35309                                  
 35310                                  SetSearch:
 35311 000073DF 58                      	pop	ax			; Mode (Open), Attributes (Create)
 35312                                  
 35313                                  ;	We need to get the new inheritance bits.
 35314                                  
 35315 000073E0 31C9                    	xor	cx,cx
 35316                                  	; MSDOS 6.0
 35317                                  	;mov	[si+2],cx ; 0
 35318 000073E2 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 35319                                  	;mov    [si+51],cx ; 0
 35320 000073E5 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 35321                                  	;
 35322 000073E8 81FB[F337]              	CMP	BX,DOS_OPEN
 35323 000073EC 7509                    	JNZ	short _DoOper
 35324                                  	;test   al,80h
 35325 000073EE A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 35326 000073F0 7405                    	JZ	short _DoOper ; 10/08/2018
 35327 000073F2 247F                    	AND	AL,7Fh			; mask off inherit bit
 35328                                  	;mov	cx,1000h
 35329 000073F4 B90010                  	MOV	CX,sf_no_inherit
 35330                                  _DoOper:
 35331                                  	;; MSDOS 3.3
 35332                                  	;;mov	word [si+2], 0
 35333                                  	;;mov	word [si+33h], 0
 35334                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 35335                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 35336                                  
 35337                                  	; MSDOS 6.0
 35338                                  ;**	Check if this is an extended open. If so you must set the
 35339                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 35340                                  ;	Set_EXT_mode in creat.asm
 35341                                  
 35342                                  	; MSDOS 6.0
 35343                                  	;;SAVE	<di, es>                ;M022 conditional removed here
 35344                                  	;push	di
 35345                                  	;push	es
 35346                                  	;push	ds
 35347                                  	;pop	es
 35348                                  	;push	si
 35349                                  	;pop	di			; (es:di) = SFT address
 35350                                  	;call	Set_EXT_mode
 35351                                  	;;RESTORE <es, di>
 35352                                  	;pop	es
 35353                                  	;pop	di
 35354                                  
 35355                                  	;Context DS
 35356 000073F7 16                      	push	ss
 35357 000073F8 1F                      	pop	ds	
 35358                                  
 35359 000073F9 51                      	push	cx
 35360 000073FA FFD3                    	CALL	BX			; blam!
 35361 000073FC 59                      	pop	cx
 35362 000073FD C536[5A05]              	LDS	SI,[THISSFT]
 35363                                  	;JC	short OpenE2		;AN000;FT. chek extended open hooks first
 35364 00007401 721B                    	jc	short OpenE ; MSDOS 3.3
 35365                                  
 35366                                  ;	The SFT was successfully opened. Remove busy mark.
 35367                                  
 35368                                  OpenOK:
 35369                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 35370 00007403 C7040100                	mov	word [SI],1
 35371                                  	;or	[SI+5],cx
 35372 00007407 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 35373                                  
 35374                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 35375                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 35376                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 35377                                  ;
 35378                                  ; Since this is only relevant on sharer systems, we stick this code into the
 35379                                  ; sharer.
 35380                                  
 35381 0000740A 36A1[6805]              	MOV	AX,[ss:JFN]				;smr;SS Override
 35382 0000740E 36FF1E[8C00]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 35383                                  
 35384 00007413 36C706[6605]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 35385 0000741A E97EA3                  	jmp	SYS_RET_OK		; bye with no errors
 35386                                  
 35387                                  	; MSDOS 6.0
 35388                                  ;Extended Open hooks check
 35389                                  ;OpenE2:					;AN000;;EO.
 35390                                  ;	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 35391                                  ;	JNZ	short OpenE		;AN000;;EO. no.
 35392                                  ;	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 35393                                  
 35394                                  ;	Extended Open hooks check
 35395                                  ;
 35396                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 35397                                  
 35398                                  OpenClean:
 35399 0000741D 5B                      	pop	bx			; clean off stack
 35400                                  OpenE:
 35401                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 35402 0000741E C7040000                	mov	word [SI],0
 35403 00007422 36C536[6A05]            	LDS	SI,[ss:PJFN]				;smr;SS Override
 35404 00007427 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 35405 0000742A EB02                    	JMP	SHORT OpenCritLeave
 35406                                  
 35407                                  OpenFail:
 35408 0000742C FB                      	STI
 35409 0000742D 59                      	pop	cx			; Clean stack
 35410                                  OpenCritLeave:
 35411 0000742E 36C706[6605]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 35412                                  
 35413                                  	; MSDOS 6.0
 35414                                  ;; File Tagging DOS 4.00
 35415                                  ;	CMP	[SS:EXTERR],error_Code_Page_Mismatched 
 35416                                  ;				;AN000;;FT. code page mismatch;smr;SS Override
 35417                                  ;	JNZ	short NORERR	  	;AN000;;FT. no
 35418                                  ;	jmp	From_GetSet		;AN000;;FT. yes
 35419                                  ;NORERR: 				;AN000;
 35420                                  ;; File Tagging DOS 4.00
 35421                                  
 35422 00007435 E96CA3                  	jmp	SYS_RET_ERR		; no free, return error
 35423                                  
 35424                                  ; MSDOS 2.11
 35425                                  ;BREAK <$CREAT - creat a new file and open him for input>
 35426                                  ;----------------------------------------------------------------------------
 35427                                  ;   Assembler usage:
 35428                                  ;           LDS     DX, name
 35429                                  ;           MOV     AH, Creat
 35430                                  ;           MOV     CX, access
 35431                                  ;           INT     21h
 35432                                  ;       ; AX now has the handle
 35433                                  ;
 35434                                  ;   Error returns:
 35435                                  ;           AX = error_access_denied
 35436                                  ;              = error_path_not_found
 35437                                  ;              = error_too_many_open_files
 35438                                  ;----------------------------------------------------------------------------
 35439                                  
 35440                                  ; MSDOS 6.0
 35441                                  ;	BREAK <$Creat - create a brand-new file>
 35442                                  ;----------------------------------------------------------------------------
 35443                                  ;
 35444                                  ;**	$Creat - Create a File
 35445                                  ;
 35446                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 35447                                  ;	initial attributes contained in CX
 35448                                  ;
 35449                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 35450                                  ;		(CX) = initial attributes
 35451                                  ;	EXIT	'C' set if error
 35452                                  ;		  (ax) = error code
 35453                                  ;		'C' clear if OK
 35454                                  ;		  (ax) = file handle
 35455                                  ;	USES	all
 35456                                  ;
 35457                                  ;----------------------------------------------------------------------------
 35458                                  
 35459                                  _$CREAT:
 35460 00007438 51                      	push	cx			; Save attributes on stack
 35461 00007439 B9[5D37]                	mov	CX,DOS_CREATE		; routine to call
 35462                                  AccessSet:
 35463                                  	;mov	byte [ss:SATTRIB],6
 35464 0000743C 36C606[2A05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 35465                                  	; 10/08/2018
 35466 00007442 E944FF                  	JMP	AccessFile		; use good ol' open
 35467                                  
 35468                                  
 35469                                  ; MSDOS 6.0 (MSDOS 3.3)
 35470                                  ;	BREAK <$CHMOD - change file attributes>
 35471                                  ;----------------------------------------------------------------------------
 35472                                  ;
 35473                                  ;**	$CHMOD - Change File Attributes
 35474                                  ;
 35475                                  ;   Assembler usage:
 35476                                  ;	    LDS     DX, name
 35477                                  ;	    MOV     CX, attributes
 35478                                  ;	    MOV     AL,func (0=get, 1=set)
 35479                                  ;	    INT     21h
 35480                                  ;   Error returns:
 35481                                  ;	    AX = error_path_not_found
 35482                                  ;	    AX = error_access_denied
 35483                                  ;
 35484                                  ;----------------------------------------------------------------------------
 35485                                  
 35486                                  _$CHMOD:
 35487                                  	; 05/08/2018 - Retro DOS v3.0
 35488                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 35489 00007445 BF[8203]                	MOV	DI,OPENBUF		; appropriate buffer
 35490 00007448 50                      	push	ax
 35491 00007449 51                      	push	cx			; save function and attributes
 35492 0000744A 89D6                    	MOV	SI,DX			; get things in appropriate places
 35493 0000744C E849F9                  	call	TransPathSet		; get correct path
 35494 0000744F 59                      	pop	cx
 35495 00007450 58                      	pop	ax			; and get function and attrs back
 35496 00007451 7235                    	JC	short ChModErr		; errors get mapped to path not found
 35497 00007453 16                      	push	ss			; set up for later possible calls
 35498 00007454 1F                      	pop	ds
 35499 00007455 803E[3705]FF            	CMP	byte [CMETA],-1
 35500 0000745A 752C                    	JNZ	short ChModErr
 35501                                  	;mov	byte [SATTRIB],16h
 35502 0000745C C606[2A05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 35503 00007461 2C01                    	SUB	AL,1			; fast way to discriminate
 35504 00007463 720B                    	JB	short ChModGet		; 0 -> go get value
 35505 00007465 7417                    	JZ	short ChModSet		; 1 -> go set value
 35506                                  	;mov	byte [EXTERR_LOCUS],1
 35507 00007467 C606[EF02]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35508                                  	;mov	al,1
 35509 0000746C B001                    	mov	al,error_invalid_function ; bad value
 35510                                  	;jmp	SYS_RET_ERR
 35511 0000746E EB1A                    	jmp	short ChModE	
 35512                                  ChModGet:
 35513 00007470 E8F1C1                  	call	GET_FILE_INFO		; suck out the ol' info
 35514 00007473 7215                    	JC	short ChModE		; error codes are already set for ret
 35515 00007475 E8D1A1                  	call	Get_User_Stack		; point to user saved vaiables
 35516                                  	;mov	[SI+4],ax
 35517 00007478 894404                  	MOV	[SI+user_env.user_CX],AX  ; return the attributes
 35518                                  	;jmp	SYS_RET_OK		; say sayonara
 35519                                  	; 26/07/2019
 35520 0000747B E920A3                  	jmp	SYS_RET_OK_clc
 35521                                  ChModSet:
 35522 0000747E 89C8                    	MOV	AX,CX			; get attrs in position
 35523 00007480 E842C2                  	call	SET_FILE_ATTRIBUTE	; go set
 35524 00007483 7205                    	JC	short ChModE		; errors are set
 35525 00007485 E913A3                  	jmp	SYS_RET_OK
 35526                                  ChModErr:
 35527                                  	;mov	al, 3
 35528 00007488 B003                    	mov	al,error_path_not_found
 35529                                  ChModE:
 35530 0000748A E917A3                  	jmp	SYS_RET_ERR
 35531                                  
 35532                                  ;	BREAK <$UNLINK - delete a file entry>
 35533                                  ;----------------------------------------------------------------------------
 35534                                  ;
 35535                                  ;**	$UNLINK - Delete a File
 35536                                  ;
 35537                                  ;
 35538                                  ;	Assembler usage:
 35539                                  ;	    LDS     DX, name
 35540                                  ;	    IF VIA SERVER DOS CALL
 35541                                  ;	     MOV     CX,SEARCH_ATTRIB
 35542                                  ;	    MOV     AH, Unlink
 35543                                  ;	    INT     21h
 35544                                  ;
 35545                                  ;	ENTRY	(ds:dx) = path name
 35546                                  ;		(cx) = search_attribute, if via server_dos
 35547                                  ;	EXIT	'C' clear if no error
 35548                                  ;		'C' set if error
 35549                                  ;		  (ax) = error code
 35550                                  ;			= error_file_not_found
 35551                                  ;			= error_access_denied
 35552                                  ;
 35553                                  ;----------------------------------------------------------------------------
 35554                                  
 35555                                  _$UNLINK:
 35556 0000748D 51                      	push	cx			; Save possible CX input parm
 35557 0000748E 89D6                    	MOV	SI,DX			; Point at input string
 35558 00007490 BF[8203]                	MOV	DI,OPENBUF		; temp spot for path
 35559 00007493 E802F9                  	call	TransPathSet		; go get normalized path
 35560 00007496 59                      	pop	cx
 35561 00007497 72EF                    	JC	short ChModErr		; badly formed path
 35562 00007499 36803E[3705]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 35563 0000749F 750F                    	JNZ	short NotFound
 35564 000074A1 16                      	push	ss
 35565 000074A2 1F                      	pop	ds
 35566                                  	;mov	ch,6
 35567 000074A3 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 35568 000074A5 E82201                  	call	SetAttrib
 35569 000074A8 E836BE                  	call	DOS_DELETE		; remove that file
 35570 000074AB 7205                    	JC	short UnlinkE 		; error is there
 35571 000074AD E9EBA2                  	jmp	SYS_RET_OK		; okey doksy
 35572                                  NotFound:
 35573                                  	;mov	al, 3
 35574 000074B0 B003                    	MOV	AL,error_path_not_found
 35575                                  UnlinkE:
 35576 000074B2 E9EFA2                  	jmp	SYS_RET_ERR		; bye
 35577                                  
 35578                                  ;BREAK <$RENAME - move directory entries around>
 35579                                  ;----------------------------------------------------------------------------
 35580                                  ;
 35581                                  ;   Assembler usage:
 35582                                  ;	    LDS     DX, source
 35583                                  ;	    LES     DI, dest
 35584                                  ;	    IF VIA SERVER DOS CALL
 35585                                  ;	     MOV     CX,SEARCH_ATTRIB
 35586                                  ;	    MOV     AH, Rename
 35587                                  ;	    INT     21h
 35588                                  ;
 35589                                  ;   Error returns:
 35590                                  ;	    AX = error_file_not_found
 35591                                  ;	       = error_not_same_device
 35592                                  ;	       = error_access_denied
 35593                                  ;
 35594                                  ;----------------------------------------------------------------------------
 35595                                  
 35596                                  _$RENAME:
 35597                                  	; MSDOS 3.3 (& MSDOS 6.0)
 35598 000074B5 51                      	push	cx
 35599 000074B6 1E                      	push	ds
 35600 000074B7 52                      	push	dx			; save source and possible CX arg
 35601 000074B8 06                      	PUSH	ES
 35602 000074B9 1F                      	POP	DS			; move dest to source
 35603 000074BA 89FE                    	MOV	SI,DI			; save for offsets
 35604 000074BC BF[0204]                	MOV	DI,RENBUF
 35605 000074BF E8D6F8                  	call	TransPathSet		; munge the paths
 35606 000074C2 36FF36[6E05]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 35607 000074C7 368F06[7005]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 35608 000074CC 5E                      	pop	si
 35609 000074CD 1F                      	pop	ds
 35610 000074CE 59                      	pop	cx			; get back source and possible CX arg
 35611                                  epjc2:	
 35612 000074CF 72B7                    	JC	short ChModErr		; get old error
 35613 000074D1 36803E[3705]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 35614 000074D7 75D7                    	JNZ	short NotFound
 35615 000074D9 51                      	push	cx			; Save possible CX arg
 35616 000074DA BF[8203]                	MOV	DI,OPENBUF		; appropriate buffer
 35617 000074DD E8B8F8                  	call	TransPathSet		; wham
 35618 000074E0 59                      	pop	cx
 35619 000074E1 72EC                    	JC	short epjc2
 35620 000074E3 16                      	push	ss
 35621 000074E4 1F                      	pop	ds
 35622 000074E5 803E[3705]FF            	CMP	byte [CMETA],-1
 35623 000074EA 72C4                    	JB	short NotFound
 35624                                  
 35625                                  	; MSDOS 6.0
 35626 000074EC FF36[5E05]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 35627 000074F0 FF36[6005]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 35628 000074F4 BF[8203]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 35629 000074F7 16                      	PUSH	SS			   ;AN000;;MS.
 35630 000074F8 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 35631 000074F9 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 35632                                  rnloop: 				   ;AN000;
 35633 000074FB E80EF8                  	call	GetCDSFromDrv		   ;AN000;;MS.
 35634 000074FE 7211                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 35635 00007500 E8D4AA                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 35636 00007503 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 35637 00007505 FEC0                    	INC	AL			   ;AN000;;MS.	next
 35638 00007507 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 35639                                  rnerr:					   ;AN000;
 35640 00007509 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 35641                                  	;error	error_current_directory    ;AN000;;MS.
 35642 0000750C B010                    	mov	al,error_current_directory 
 35643 0000750E E993A2                  	jmp	SYS_RET_ERR
 35644                                  dorn:					   ;AN000;
 35645 00007511 368F06[6005]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 35646 00007516 368F06[5E05]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 35647                                  
 35648 0000751B 16                      	push	ss
 35649 0000751C 1F                      	pop	ds
 35650                                  
 35651                                  	; MSDOS 3.3 (& MSDOS 6.0)
 35652                                  	;mov	ch,16h
 35653 0000751D B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 35654                                  					; rename appropriate files
 35655 0000751F E8A800                  	call	SetAttrib
 35656 00007522 E867BF                  	call	DOS_RENAME		; do the deed
 35657 00007525 728B                    	JC	short UnlinkE 		; errors
 35658                                  
 35659 00007527 E971A2                  	jmp	SYS_RET_OK
 35660                                  
 35661                                  
 35662                                  ; 14/07/2018 - Retro DOS v3.0
 35663                                  ; MSDOS 3.3 (& MSDOS 6.0)
 35664                                  
 35665                                  ;Break <$CreateNewFile - Create a new directory entry>
 35666                                  ;----------------------------------------------------------------------------
 35667                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 35668                                  ;	was no previous directory entry, and fail if a directory entry with
 35669                                  ;	the same name existed previously.
 35670                                  ;
 35671                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 35672                                  ;		CX contains default file attributes
 35673                                  ;   Outputs:	Carry Clear:
 35674                                  ;		    AX has file handle opened for read/write
 35675                                  ;		Carry Set:
 35676                                  ;		    AX has error code
 35677                                  ;   Registers modified: All
 35678                                  ;----------------------------------------------------------------------------
 35679                                  
 35680                                  _$CreateNewFile:
 35681 0000752A 51                      	push	cx			; Save attributes on stack
 35682 0000752B B9[EE37]                	MOV	CX,DOS_Create_New	; routine to call
 35683 0000752E E90BFF                  	JMP	AccessSet		; use good ol' open
 35684                                  
 35685                                  ;**	BinToAscii - convert a number to a string.
 35686                                  ;----------------------------------------------------------------------------
 35687                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 35688                                  ;	This routine is used to generate temp file names so we don't spend
 35689                                  ;	the time and code needed for a true hex number, we just use
 35690                                  ;	A thorugh O.
 35691                                  ;
 35692                                  ;	ENTRY	(ax) = value
 35693                                  ;		(es:di) = destination
 35694                                  ;	EXIT	(es:di) updated by 4
 35695                                  ;	USES	cx, di, flags
 35696                                  ;----------------------------------------------------------------------------
 35697                                  
 35698                                  ; MSDOS 3.3
 35699                                  ;BinToAscii:
 35700                                  ;	mov     cx,4
 35701                                  ;bta5:
 35702                                  ;	push    cx
 35703                                  ;	mov     cl,4
 35704                                  ;	rol     ax,cl
 35705                                  ;	push    ax
 35706                                  ;	and     al,0Fh
 35707                                  ;	add     al,'0'
 35708                                  ;	cmp     al,'9'
 35709                                  ;	jbe     short bta6
 35710                                  ;	add     al,7
 35711                                  ;bta6: 
 35712                                  ;	stosb
 35713                                  ;	pop     ax
 35714                                  ;	pop     cx
 35715                                  ;	loop    bta5
 35716                                  ;	retn
 35717                                  
 35718                                  ; MSDOS 6.0
 35719                                  BinToAscii:
 35720 00007531 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 35721                                  bta5:	
 35722 00007534 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 35723 00007536 50                      	push	ax			; preserve remainder of digits
 35724 00007537 240F                    	AND	AL,0Fh			; grab low nibble
 35725 00007539 0441                    	ADD	AL,'A'			; turn into ascii
 35726 0000753B AA                      	STOSB				; drop in the character
 35727 0000753C 58                      	pop	ax			; (ax) = shifted number
 35728 0000753D FECD                    	dec	ch
 35729 0000753F 75F3                    	jnz	short bta5		; process 4 digits
 35730 00007541 C3                      	retn
 35731                                  
 35732                                  ;Break	<$CreateTempFile - create a unique name>
 35733                                  ;----------------------------------------------------------------------------
 35734                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 35735                                  ;	Method used is to get the current time, convert to a name and attempt
 35736                                  ;	a create new.  Repeat until create new succeeds.
 35737                                  ;
 35738                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 35739                                  ;		CX  contains default attributes
 35740                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 35741                                  ;		AX has handle
 35742                                  ;   Registers modified: all
 35743                                  ;----------------------------------------------------------------------------
 35744                                  
 35745                                  _$CreateTempFile:
 35746                                  	;Enter
 35747 00007542 55                      	push	bp
 35748 00007543 89E5                    	mov	bp,sp
 35749                                  
 35750                                  	;LocalVar    EndPtr,DWORD
 35751                                  	;LocalVar    FilPtr,DWORD
 35752                                  	;LocalVar    Attr,WORD
 35753                                  
 35754 00007545 83EC0A                  	sub	sp,10
 35755                                  
 35756                                  	;test	cx,0FFD8h
 35757 00007548 F7C1D8FF                	test	CX,~attr_changeable
 35758 0000754C 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 35759                                  ;
 35760                                  ; We need this "hook" here to detect these cases (like user sets one both of
 35761                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 35762                                  ; below.  The code loops on error_access_denied, but if one of the non
 35763                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 35764                                  ; infinite because CreateNewFile will fail with access_denied always.  Thus we
 35765                                  ; need to detect these cases before getting to the loop.
 35766                                  ;
 35767                                  	;mov	ax, 5
 35768 0000754E B80500                  	MOV	AX,error_access_denied
 35769 00007551 EB6B                    	JMP	SHORT SETTMPERR
 35770                                  
 35771                                  OKatts:
 35772                                  	;MOV	attr,CX 		; save attribute
 35773 00007553 894EF6                  	mov     [bp-10],cx
 35774                                  	;MOV	FilPtrL,DX		; pointer to file
 35775 00007556 8956F8                  	mov	[bp-8],dx
 35776                                  	;MOV	FilPtrH,DS
 35777 00007559 8C5EFA                  	mov	[bp-6],ds
 35778                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 35779 0000755C 8C5EFE                  	mov	[bp-2],ds
 35780 0000755F 1E                      	PUSH	DS
 35781 00007560 07                      	POP	ES			; destination for nul search
 35782 00007561 89D7                    	MOV	DI,DX
 35783 00007563 89F9                    	MOV	CX,DI
 35784 00007565 F7D9                    	NEG	CX			; number of bytes remaining in segment
 35785                                  	; MSDOS 6.0
 35786 00007567 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 35787 00007569 7501                    	JNZ	short okok		;AN000;MS. no
 35788                                  	;MOV	CX,-1			;AN000;MS.
 35789 0000756B 49                      	dec	cx  ; mov cx,-1
 35790                                  	;
 35791                                  okok:					;AN000;
 35792 0000756C 31C0                    	XOR	AX,AX			;AN000;
 35793 0000756E F2AE                    	REPNZ	SCASB			;AN000;
 35794                                  					;AN000;
 35795 00007570 4F                      	DEC	DI			; point back to the null
 35796 00007571 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 35797 00007575 E8B5E3                  	call	PATHCHRCMP		; Is it a path separator?
 35798 00007578 7403                    	JZ	short SETENDPTR		; Yes
 35799                                  STOREPTH:
 35800 0000757A B05C                    	MOV	AL,'\'
 35801 0000757C AA                      	STOSB				; Add a path separator (and INC DI)
 35802                                  SETENDPTR:
 35803                                  	;MOV	EndPtrL,DI		; pointer to the tail
 35804 0000757D 8856FC                  	mov	[bp-4],dl
 35805                                  CreateLoop:
 35806 00007580 16                      	push	ss			; let ReadTime see variables
 35807 00007581 1F                      	pop	ds
 35808 00007582 55                      	push	bp
 35809 00007583 E8F5A3                  	call	READTIME		; go get time
 35810 00007586 5D                      	pop	bp
 35811                                  ;
 35812                                  ; Time is in CX:DX.  Go drop it into the string.
 35813                                  ;
 35814                                  	;les	di,EndPtr		; point to the string
 35815 00007587 C47EFC                  	les	di,[BP-4]
 35816 0000758A 89C8                    	mov	ax,cx
 35817 0000758C E8A2FF                  	call	BinToAscii		; store upper word
 35818 0000758F 89D0                    	mov	ax,dx
 35819 00007591 E89DFF                  	call	BinToAscii		; store lower word
 35820 00007594 30C0                    	xor	al,al
 35821 00007596 AA                      	STOSB				; nul terminate
 35822                                  	;LDS	DX,FilPtr		; get name
 35823 00007597 C556F8                  	lds	dx,[bp-8]
 35824                                  	;MOV	CX,Attr 		; get attr
 35825 0000759A 8B4EF6                  	mov	cx,[bp-10]
 35826 0000759D 55                      	push	bp
 35827 0000759E E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 35828 000075A1 5D                      	pop	bp
 35829 000075A2 731B                    	JNC	short CreateDone	; failed, go try again
 35830                                  ;
 35831                                  ; The operation failed and the error has been mapped in AX.  Grab the extended
 35832                                  ; error and figure out what to do.
 35833                                  ;
 35834                                  	;; MSDOS 3.3			; M049 - start
 35835                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 35836                                  ;;	cmp	al,error_file_exists
 35837                                  ;;	jz	short CreateLoop	; file existed => try with new name
 35838                                  ;;	cmp	al,error_access_denied
 35839                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 35840                                  
 35841                                  	; MSDOS 6.0
 35842                                  	;cmp	al,50h
 35843 000075A4 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 35844 000075A6 74D8                    	JZ	short CreateLoop	; Y: try again
 35845                                  	;cmp	al,5
 35846 000075A8 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 35847 000075AA 7512                    	JNZ	short SETTMPERR		; N: Error out
 35848                                  					; Y: Check to see if we got this due
 35849                                  					;    to the network drive. Note that
 35850                                  					;    the redir will set the exterr
 35851                                  					;    to error_cannot_make if this is 
 35852                                  					;    so. 
 35853 000075AC 36803E[F002]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 35854                                  					; See if it's REALLY an att mismatch
 35855 000075B2 740A                    	je	short SETTMPERR		; no, network error, stop
 35856                                  ;M070
 35857                                  ; If the user failed on an I24, we do not want to try again
 35858                                  ;
 35859 000075B4 36803E[F002]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 35860 000075BA 7402                    	je	short SETTMPERR		;yes, do not try again ;M070
 35861                                  
 35862 000075BC EBC2                    	jmp	short CreateLoop	;attr mismatch, try again ;M070
 35863                                  
 35864                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 35865                                  					; M049 - end
 35866                                  SETTMPERR:
 35867 000075BE F9                      	STC
 35868                                  CreateDone:
 35869                                  	;Leave
 35870 000075BF 89EC                    	mov	sp,bp
 35871 000075C1 5D                      	pop	bp
 35872 000075C2 7203                    	JC	short CreateFail
 35873 000075C4 E9D4A1                  	jmp	SYS_RET_OK		; success!
 35874                                  CreateFail:
 35875 000075C7 E9DAA1                  	jmp	SYS_RET_ERR
 35876                                  
 35877                                  ;
 35878                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 35879                                  ;   (CH) or to the value in CL if the current system call is through
 35880                                  ;   serverdoscall.
 35881                                  ;
 35882                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 35883                                  ;		fSharing == TRUE => set sattrib to CL
 35884                                  ;   Outputs:	none
 35885                                  ;   Registers changed:	CX
 35886                                  
 35887                                  SetAttrib:
 35888 000075CA 36F606[2F05]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 35889 000075D0 7502                    	jnz	short Set
 35890 000075D2 88E9                    	mov	cl,ch
 35891                                  Set:
 35892 000075D4 36880E[2A05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 35893 000075D9 C3                      	retn
 35894                                  
 35895                                  ; 14/07/2018 - Retro DOS v3.0
 35896                                  ; MSDOS 6.0
 35897                                  
 35898                                  ;Break	<Extended_Open- Extended open the file>
 35899                                  ;----------------------------------------------------------------------------
 35900                                  ; Input: AL= 0 reserved  AH=6CH
 35901                                  ;	 BX= mode
 35902                                  ;	 CL= create attribute  CH=search attribute (from server)
 35903                                  ;	 DX= flag
 35904                                  ;	 DS:SI = file name
 35905                                  ;	 ES:DI = parm list
 35906                                  ;			   DD  SET EA list (-1) null
 35907                                  ;			   DW  n  parameters
 35908                                  ;			   DB  type (TTTTTTLL)
 35909                                  ;			   DW  IOMODE
 35910                                  ; Function: Extended Open
 35911                                  ; Output: carry clear
 35912                                  ;		     AX= handle
 35913                                  ;		     CX=1 file opened
 35914                                  ;			2 file created/opened
 35915                                  ;			3 file replaced/opened
 35916                                  ;	  carry set: AX has error code
 35917                                  ;----------------------------------------------------------------------------
 35918                                  
 35919                                  ;_$Extended_Open:			  ;AN000;
 35920                                  ;	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 35921                                  ;	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 35922                                  ;	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 35923                                  ;	TEST	DX,reserved_bits_mask	  ;AN000;EO. reserved bits 0  ?
 35924                                  ;	JNZ	short ext_inval2	  ;AN000;EO. no
 35925                                  ;	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 35926                                  ;	CMP	DL,0			  ;AN000;EO. all fail ?
 35927                                  ;	JZ	short ext_inval2	  ;AN000;EO. yes, error
 35928                                  ;	AND	DL,exists_mask		  ;AN000;EO. get exists action byte
 35929                                  ;	CMP	DL,2			  ;AN000;EO, > 02
 35930                                  ;	JA	short ext_inval2	  ;AN000;EO. yes ,error
 35931                                  ;	AND	AH,not_exists_mask	  ;AN000;EO. get no exists action byte
 35932                                  ;	CMP	AH,10H			  ;AN000;EO. > 10
 35933                                  ;	JA	short ext_inval2	  ;AN000;EO. yes error
 35934                                  ;
 35935                                  ;	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 35936                                  ;	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 35937                                  ;	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 35938                                  ;	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 35939                                  ;	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 35940                                  ;	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 35941                                  ;	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 35942                                  ;	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 35943                                  ;	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 35944                                  ;	MOV	AX,BX			  ;AN000;EO. ax= mode
 35945                                  ;	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 35946                                  ;ext_inval2:				  ;AN000;;EO.
 35947                                  ;	mov	al,error_invalid_function ;AN000;EO.. invalid function
 35948                                  ;	jmp	SYS_RET_ERR
 35949                                  ;error_return:				  ;AN000;EO.
 35950                                  ;	retn				  ;AN000;EO.. return with error
 35951                                  ;goopen2:				  ;AN000;
 35952                                  ;	TEST	BX,int_24_error 	  ;AN000;EO.. disable INT 24 error ?
 35953                                  ;	JZ	short goopen		  ;AN000;EO.. no
 35954                                  ;	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 35955                                  ;goopen:					  ;AN000;
 35956                                  ;	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 35957                                  ;	AND	word [SS:EXTOPEN_FLAG],0FFH  ;AN000;EO.create new ?;smr;SS Override
 35958                                  ;	CMP	word [SS:EXTOPEN_FLAG],ext_exists_fail + ext_nexists_create ;AN000;FT.;smr;SS Override
 35959                                  ;	JNZ	short chknext 		  ;AN000;;EO. no
 35960                                  ;	call	_$CreateNewFile		  ;AN000;;EO. yes
 35961                                  ;	JC	short error_return	  ;AN000;;EO. error
 35962                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 35963                                  ;	JZ	short ok_return2	  ;AN000;;EO. yes
 35964                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened ;AN000;EO. creted/opened;smr;SS Override
 35965                                  ;	JMP	short setXAttr		  ;AN000;;EO. set XAs
 35966                                  ;ok_return2:
 35967                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 35968                                  ;chknext:
 35969                                  ;	TEST	word [SS:EXTOPEN_FLAG],ext_exists_open ;AN000;;EO. exists open;smr;SS Override
 35970                                  ;	JNZ	short exist_open	  ;AN000;;EO. yes
 35971                                  ;	call	_$CREAT			  ;AN000;;EO. must be replace open
 35972                                  ;	JC	short error_return	  ;AN000;;EO. return with error
 35973                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 35974                                  ;	JZ	short ok_return2	  ;AN000;;EO. yes
 35975                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened ;AN000;EO. prsume create/open;smr;SS Override
 35976                                  ;	TEST	byte [SS:EXTOPEN_ON],ext_file_not_exists ;AN000;;EO. file not exists ?;smr;SS Override
 35977                                  ;	JNZ	short setXAttr		  ;AN000;;EO. no
 35978                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_replaced_opened ;AN000;;EO. replaced/opened;smr;SS Override
 35979                                  ;	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 35980                                  ;error_return2:
 35981                                  ;	STC 				  ; Set Carry again to flag error ;AN001;
 35982                                  ;	retn				  ;AN000;;EO. return with error
 35983                                  ;					  ;AN000;
 35984                                  ;exist_open:				  ;AN000;
 35985                                  ;	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 35986                                  ;	jz	short noserver		  ;AN000;;EO. no
 35987                                  ;	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 35988                                  ;noserver:
 35989                                  ;	call	_$Open2			  ;AN000;;EO. do open
 35990                                  ;	JNC	short ext_ok		  ;AN000;;EO.
 35991                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 35992                                  ;	JZ	short error_return2	  ;AN000;;EO. return with error
 35993                                  ;local_extopen:
 35994                                  ;	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 35995                                  ;	JNZ	short error_return2	  ;AN000;;EO. no,
 35996                                  ;	TEST	word [SS:EXTOPEN_FLAG],ext_nexists_create;AN000;;EO. want to fail;smr;SS Override
 35997                                  ;	JNZ	short do_creat		  ;AN000;;EO. yes
 35998                                  ;	JMP	short extexit 		  ;AN000;;EO. yes
 35999                                  ;do_creat:
 36000                                  ;	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 36001                                  ;	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 36002                                  ;	MOV	DX,SI			  ;AN000;;EO.
 36003                                  ;	call	_$CREAT			  ;AN000;;EO. do create
 36004                                  ;	JC	short extexit 		  ;AN000;;EO. error
 36005                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened 
 36006                                  ;					  ;AN000;;EO. is created/opened;smr;SS Override
 36007                                  ;	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 36008                                  ;
 36009                                  ;ext_ok:
 36010                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 36011                                  ;	JZ	short ok_return		  ;AN000;;EO. yes
 36012                                  ;	MOV	[SS:EXTOPEN_FLAG],action_opened ;AN000;;EO.  opened;smr;SS Override
 36013                                  ;setXAttr:
 36014                                  ;	call	Get_User_Stack		  ;AN000;;EO.
 36015                                  ;	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 36016                                  ;	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 36017                                  ;	POP	AX			  ;AN000;;EO.
 36018                                  ;	MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 36019                                  ;
 36020                                  ;ok_return:				  ;AN000;
 36021                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 36022                                  ;
 36023                                  ;extexit2:				  ;AN000; ERROR RECOVERY
 36024                                  ;	POP	BX			  ;AN000;EO. close the handle
 36025                                  ;	PUSH	AX			  ;AN000;EO. save error code from set XA
 36026                                  ;	CMP	word [SS:EXTOPEN_FLAG],action_created_opened 
 36027                                  ;					  ;AN000;EO. from create;smr;SS Override
 36028                                  ;	JNZ	short justopen		  ;AN000;EO.
 36029                                  ;	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 36030                                  ;	LDS	DX,[SI]			  ;AN000;EO.
 36031                                  ;	call	_$UNLINK 		  ;AN000;EO. delete the file
 36032                                  ;	JMP	SHORT reserror		  ;AN000;EO.
 36033                                  ;
 36034                                  ;justopen:				  ;AN000;
 36035                                  ;	call	$CLOSE			  ;AN000;EO. pretend never happend
 36036                                  ;reserror:				  ;AN000;
 36037                                  ;	POP	AX			  ;AN000;EO. restore error code from set XA
 36038                                  ;	JMP	SHORT extexit		  ;AN000;EO.
 36039                                  ;
 36040                                  ;ext_file_unfound:			  ;AN000;
 36041                                  ;	MOV	AX,error_file_not_found   ;AN000;EO.
 36042                                  ;	JMP	SHORT extexit		  ;AN000;EO.
 36043                                  ;ext_inval:				  ;AN000;
 36044                                  ;	MOV	AX,error_invalid_function ;AN000;EO.
 36045                                  ;extexit:
 36046                                  ;	jmp	SYS_RET_ERR		  ;AN000;EO.
 36047                                  
 36048                                  ;============================================================================
 36049                                  ; LOCK.ASM, MSDOS 6.0, 1991
 36050                                  ;============================================================================
 36051                                  ; 14/07/2018 - Retro DOS v3.0
 36052                                  
 36053                                  ;BREAK <$LockOper - Lock Calls>
 36054                                  
 36055                                  ;
 36056                                  ;   Assembler usage:
 36057                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 36058                                  ;	    MOV     CX, OffsetHigh
 36059                                  ;	    MOV     DX, OffsetLow
 36060                                  ;	    MOV     SI, LengthHigh
 36061                                  ;	    MOV     DI, LengthLow
 36062                                  ;	    MOV     AH, LockOper
 36063                                  ;	    MOV     AL, Request
 36064                                  ;	    INT     21h
 36065                                  ;
 36066                                  ;   Error returns:
 36067                                  ;	    AX = error_invalid_handle
 36068                                  ;	       = error_invalid_function
 36069                                  ;	       = error_lock_violation
 36070                                  ;
 36071                                  ;   Assembler usage:
 36072                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 36073                                  ;
 36074                                  ;				    0? lock all
 36075                                  ;				    8? lock write
 36076                                  ;				    ?2 lock multiple
 36077                                  ;				    ?3 unlock multiple
 36078                                  ;				    ?4 lock/read
 36079                                  ;				    ?5 write/unlock
 36080                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 36081                                  ;	    MOV     BX, Handle
 36082                                  ;	    MOV     CX, count or size
 36083                                  ;	    LDS     DX, buffer
 36084                                  ;	    INT     21h
 36085                                  ;
 36086                                  ;   Error returns:
 36087                                  ;	    AX = error_invalid_handle
 36088                                  ;	       = error_invalid_function
 36089                                  ;	       = error_lock_violation
 36090                                  
 36091                                  _$LockOper:
 36092 000075DA 3C01                    	CMP	AL,1
 36093 000075DC 770C                    	JA	short lock_bad_func
 36094                                  
 36095 000075DE 57                      	PUSH	DI			       ; Save LengthLow
 36096 000075DF E863F5                  	call	SFFromHandle		       ; ES:DI -> SFT
 36097 000075E2 7311                    	JNC	short lock_do 		       ; have valid handle
 36098 000075E4 5F                      	POP	DI			       ; Clean stack
 36099                                  	;mov	al,6
 36100 000075E5 B006                    	mov	al,error_invalid_handle
 36101 000075E7 E9BAA1                  	jmp	SYS_RET_ERR
 36102                                  
 36103                                  lock_bad_func:
 36104                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36105 000075EA 36C606[EF02]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 36106                                  	;mov	al,1
 36107 000075F0 B001                    	mov	al,error_invalid_function
 36108 000075F2 E9AFA1                  	jmp	SYS_RET_ERR
 36109                                  
 36110                                  	; MSDOS 6.0 
 36111                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 36112                                  ; Dead code deleted, MD, 23 Mar 90
 36113                                  
 36114                                  lock_do:
 36115                                  	; MSDOS 3.3
 36116 000075F5 08C0                    	or	al,al
 36117 000075F7 58                      	pop	ax
 36118 000075F8 741E                    	jz	short DOS_Lock
 36119                                  DOS_Unlock:
 36120                                   	;test	word [es:di+5],8000h
 36121 000075FA 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36122 00007600 7409                    	JZ	short LOCAL_UNLOCK
 36123 00007602 50                      	push    ax
 36124 00007603 B80B11                  	mov     ax,110Bh
 36125 00007606 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 36126                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 36127                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 36128                                  			; SFT DPB field -> DPB of drive containing file
 36129                                  			; Return: CF set error
 36130 00007608 5B                      	pop     bx
 36131 00007609 EB05                    	jmp     short ValChk
 36132                                  
 36133                                  LOCAL_UNLOCK:
 36134 0000760B 36FF1E[7800]            	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 36135                                  ValChk:
 36136 00007610 7303                    	JNC	short Lock_OK
 36137                                  lockerror:
 36138 00007612 E98FA1                  	jmp	SYS_RET_ERR
 36139                                  Lock_OK:
 36140                                  	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 36141 00007615 E983A1                  	jmp	SYS_RET_OK
 36142                                  DOS_Lock:
 36143                                  	;test	word [es:di+5],8000h
 36144 00007618 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36145 0000761E 7407                    	JZ	short LOCAL_LOCK
 36146                                  	;CallInstall NET_XLock,MultNET,10
 36147 00007620 B80A11                  	mov     ax, 110Ah
 36148 00007623 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 36149                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 36150                                  			; STACK: WORD low word of size, ES:DI -> SFT
 36151                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 36152                                  			; Return: CF set error
 36153 00007625 EBE9                    	JMP	short ValChk
 36154                                  
 36155                                  LOCAL_LOCK:
 36156 00007627 36FF1E[7400]            	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 36157 0000762C EBE2                    	JMP	short ValChk
 36158                                  
 36159                                  ;lock_do:
 36160                                  ;	; MSDOS 6.0
 36161                                  ;	MOV	BX,AX				; save AX
 36162                                  ;	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 36163                                  ;	MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 36164                                  ;	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 36165                                  ;	POP	CX				; get low length
 36166                                  ;	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 36167                                  ;	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 36168                                  ;	MOV	CX,1				; one range
 36169                                  ;
 36170                                  ;;	PUSH	CS				;
 36171                                  ;;	POP	DS				; DS:DX points to
 36172                                  ;
 36173                                  ;	push	ss
 36174                                  ;	pop	ds
 36175                                  ;
 36176                                  ;	MOV	DX,BP				;   Lock_Buffer
 36177                                  ;	TEST	AL,Unlock_all			; function 1
 36178                                  ;	JNZ	short DOS_Unlock		; yes
 36179                                  ;	JMP	short DOS_Lock			; function 0
 36180                                  ;
 36181                                  ;DOS_Unlock:
 36182                                  ;	;test	word [es:di+5],8000h
 36183                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36184                                  ;	JZ	short LOCAL_UNLOCK
 36185                                  ;	;CallInstall Net_Xlock,MultNET,10
 36186                                  ;	mov     ax, 110Bh
 36187                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 36188                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 36189                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 36190                                  ;			; SFT DPB field -> DPB of drive containing file
 36191                                  ;			; Return: CF set error
 36192                                  ;
 36193                                  ;	JMP	SHORT ValChk
 36194                                  ;LOCAL_UNLOCK:
 36195                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 36196                                  ;ValChk:
 36197                                  ;	JNC	short Lock_OK
 36198                                  ;lockerror:
 36199                                  ;	jmp	SYS_RET_ERR
 36200                                  ;Lock_OK:
 36201                                  ;	MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 36202                                  ;	jmp	SYS_RET_OK
 36203                                  ;DOS_Lock:
 36204                                  ;	;test	word [es:di+5],8000h
 36205                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36206                                  ;	JZ	short LOCAL_LOCK
 36207                                  ;	;CallInstall NET_XLock,MultNET,10
 36208                                  ;	mov     ax,110Ah
 36209                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 36210                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 36211                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 36212                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 36213                                  ;			; Return: CF set error
 36214                                  ;	JMP	short ValChk
 36215                                  ;
 36216                                  ;LOCAL_LOCK:
 36217                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 36218                                  ;	JMP	short ValChk
 36219                                  
 36220                                  ; 14/07/2018 - Retro DOS v3.0
 36221                                  ; LOC_CHECK
 36222                                  ;MSDOS 6.0 (& MSDOS 3.3)
 36223                                  
 36224                                  ; Inputs:
 36225                                  ;	Outputs of SETUP
 36226                                  ;	[USER_ID] Set
 36227                                  ;	[PROC_ID] Set
 36228                                  ; Function:
 36229                                  ;	Check for lock violations on local I/O
 36230                                  ;	Retries are attempted with sleeps in between
 36231                                  ; Outputs:
 36232                                  ;    Carry clear
 36233                                  ;	Operation is OK
 36234                                  ;    Carry set
 36235                                  ;	A lock violation detected
 36236                                  ; Outputs of SETUP preserved
 36237                                  
 36238                                  LOCK_CHECK:
 36239 0000762E 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 36240                                  LockRetry:
 36241 00007632 53                      	push	bx		; save regs
 36242                                  	; 26/07/2019
 36243                                  	;push	ax ; MSDOS 6.0
 36244                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36245 00007633 FF1E[7C00]              	call	far [JShare+(8*4)] ; 8 = chk_block
 36246                                  	;pop	ax ; MSDOS 6.0
 36247 00007637 5B                      	pop	bx		; restrore regs
 36248 00007638 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 36249                                  LockN:
 36250 0000763A E8EFA9                  	call	Idle		; wait a while
 36251 0000763D 4B                      	DEC	BX		; remember a retry
 36252 0000763E 75F2                    	JNZ	short LockRetry	; more retries left...
 36253 00007640 F9                      	STC
 36254                                  lc_ret_label:
 36255 00007641 C3                      	retn
 36256                                  
 36257                                  ; 14/07/2018 - Retro DOS v3.0
 36258                                  ; LOCK_VIOLATION
 36259                                  ;MSDOS 6.0 (& MSDOS 3.3)
 36260                                  
 36261                                  ; Inputs:
 36262                                  ;	[THISDPB] set
 36263                                  ;	[READOP] indicates whether error on read or write
 36264                                  ; Function:
 36265                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 36266                                  ; Outputs:
 36267                                  ;	Carry set if user says FAIL, causes error_lock_violation
 36268                                  ;	Carry clear if user wants a retry
 36269                                  ;
 36270                                  ; DS, ES, DI, CX preserved, others destroyed
 36271                                  
 36272                                  LOCK_VIOLATION:
 36273 00007642 1E                      	PUSH	DS
 36274 00007643 06                      	PUSH	ES
 36275 00007644 57                      	PUSH	DI
 36276 00007645 51                      	PUSH	CX
 36277                                  	;mov	ax,21h
 36278 00007646 B82100                  	MOV	AX,error_lock_violation
 36279                                  	;mov	byte [ALLOWED],18h
 36280 00007649 C606[1503]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 36281 0000764E C42E[4605]              	LES	BP,[THISDPB]
 36282 00007652 BF0100                  	MOV	DI,1		; Fake some registers
 36283 00007655 89F9                    	MOV	CX,DI
 36284                                  	;mov	dx,[es:bp+11]
 36285 00007657 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 36286 0000765B E8CEE4                  	call	HARDERR
 36287 0000765E 59                      	POP	CX
 36288 0000765F 5F                      	POP	DI
 36289 00007660 07                      	POP	ES
 36290 00007661 1F                      	POP	DS
 36291 00007662 3C01                    	CMP	AL,1
 36292 00007664 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 36293 00007666 F9                      	STC
 36294 00007667 C3                      	retn
 36295                                  
 36296                                  ; 14/07/2018 - Retro DOS v3.0
 36297                                  
 36298                                  ;	do a retz to return error
 36299                                  
 36300                                  CheckShare:
 36301                                  	; MSDOS 6.0
 36302                                  	;push	ds			;smr;
 36303                                  	;;getdseg <ds>			; ds -> dosdata
 36304                                  	;push	cs
 36305                                  	;pop	ds
 36306                                  	;CMP	byte [fShare],0
 36307                                  	;pop	ds			;smr;
 36308                                  	;retn
 36309                                  	
 36310                                  	; MSDOS 3.3
 36311 00007668 2E803E[CF02]00          	cmp	byte [cs:fShare],0
 36312 0000766E C3                      	retn
 36313                                  
 36314                                  ;============================================================================
 36315                                  ; SHARE.ASM, MSDOS 6.0, 1991
 36316                                  ;============================================================================
 36317                                  ; 14/07/2018 - Retro DOS v3.0
 36318                                  
 36319                                  ; SHARE_CHECK
 36320                                  
 36321                                  ; Inputs:
 36322                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 36323                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 36324                                  ;       [WFP_START] has full path of name
 36325                                  ;       [USER_ID] Set
 36326                                  ;       [PROC_ID] Set
 36327                                  ; Function:
 36328                                  ;       Check for sharing violations on local file/device access
 36329                                  ; Outputs:
 36330                                  ;    Carry clear
 36331                                  ;       Sharing approved
 36332                                  ;    Carry set
 36333                                  ;       A sharing violation detected
 36334                                  ;           AX is error code
 36335                                  ; USES    ALL but DS
 36336                                  
 36337                                  SHARE_CHECK:
 36338                                  	; 26/07/2019
 36339 0000766F FF1E[6000]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 36340                                  shchk_retn:
 36341 00007673 C3                      	retn
 36342                                  
 36343                                  ; SHARE_VIOLATION
 36344                                  
 36345                                  ; Inputs:
 36346                                  ;       [THISDPB] Set
 36347                                  ;       AX has error code
 36348                                  ; Function:
 36349                                  ;       Handle Sharing errors
 36350                                  ; Outputs:
 36351                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 36352                                  ;       Carry clear if user wants a retry
 36353                                  ;
 36354                                  ; DS, ES, DI preserved, others destroyed
 36355                                  
 36356                                  SHARE_VIOLATION:
 36357 00007674 1E                      	PUSH    DS
 36358 00007675 06                      	PUSH	ES
 36359 00007676 57                      	PUSH    DI
 36360 00007677 C606[3205]00            	MOV     byte [READOP],0		; All share errors are reading
 36361                                  	;mov	byte [ALLOWED],18h
 36362 0000767C C606[1503]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 36363 00007681 C42E[4605]              	LES     BP,[THISDPB]
 36364 00007685 BF0100                  	MOV     DI,1			; Fake some registers
 36365 00007688 89F9                    	MOV     CX,DI
 36366                                  	;mov	dx,[es:bp+16]
 36367 0000768A 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 36368 0000768E E89BE4                  	call	HARDERR
 36369 00007691 5F                      	POP     DI
 36370 00007692 07                      	POP	ES
 36371 00007693 1F                      	POP     DS
 36372 00007694 3C01                    	CMP     AL,1
 36373 00007696 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 36374 00007698 F9                      	STC
 36375 00007699 C3                      	retn
 36376                                  
 36377                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID.  This does
 36378                                  ;       NOT perform a close, it merely asserts that the sharing information
 36379                                  ;       for the SFT/UID/PID may be safely released.
 36380                                  ;
 36381                                  ;   Inputs:     ES:DI points to an SFT
 36382                                  ;   Outputs:    None
 36383                                  ;   Registers modified: all except DS,ES,DI
 36384                                  
 36385                                  ShareEnd:
 36386                                  	; 26/07/2019
 36387 0000769A FF1E[6400]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 36388 0000769E C3                      	retn
 36389                                  
 36390                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 36391                                  
 36392                                  ;
 36393                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set.  If
 36394                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 36395                                  ;
 36396                                  ;   Inputs:     ThisSFT points to the SFT
 36397                                  ;               WFP_Start points to the WFP
 36398                                  ;   Outputs:    Carry clear => successful entry
 36399                                  ;               Carry set => failed system call
 36400                                  ;   Registers modified: all
 36401                                  
 36402                                  ShareEnter:
 36403 0000769F 51                      	push	cx
 36404                                  retry:
 36405 000076A0 8B0E[1A00]              	mov     cx,[RetryCount]
 36406                                  attempt:
 36407 000076A4 C43E[5A05]              	les     di,[THISSFT]		; grab sft
 36408 000076A8 31C0                    	XOR     AX,AX
 36409                                   	;mov	[es:di+51],ax
 36410 000076AA 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 36411 000076AE 51                      	push	cx
 36412 000076AF E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 36413 000076B2 59                      	pop	cx
 36414 000076B3 730A                    	jnc	short done		; success, let the user see this
 36415 000076B5 E874A9                  	call	Idle                    ; wait a while
 36416 000076B8 E2EA                    	loop    attempt                 ; go back for another attempt
 36417 000076BA E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 36418 000076BD 73E1                    	jnc	short retry		; user said to retry, go do it
 36419                                  done:
 36420 000076BF 59                      	pop	cx
 36421 000076C0 C3                      	retn
 36422                                  
 36423                                  ;----------------------------------------------------------------------------
 36424                                  
 36425                                  ;----------------------------------------------------------------------------
 36426                                  
 36427                                  ;align 2 ; 05/09/2018 (Error!)
 36428                                  
 36429 000076C1 90<rep Fh>              align 16 ; 08/09/2018 (OK.)
 36430                                  
 36431                                  ; 06/08/2018 - Retro DOS v3.0
 36432                                  
 36433                                  ;============================================================================
 36434                                  ; MSINIT.ASM
 36435                                  ;============================================================================
 36436                                  ;
 36437                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 36438                                  ;
 36439                                  	; 15/07/2018 - Retro DOS v3.0
 36440                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 36441                                  
 36442                                  SYSBUF:
 36443                                  IRETT:
 36444 000076D0 CF                      	iret
 36445                                  
 36446                                  	; 07/07/2018 - Retro DOS v3.0
 36447                                  	; Retro DOS v2.0 - 03/03/2018
 36448                                  DOSINIT:
 36449                                  	; Far call from SYSINIT
 36450                                  	; DX = Memory size in paragraphs
 36451                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 36452                                  	;	  (Retro DOS v2.0, 16/03/2018)
 36453 000076D1 FA                              CLI
 36454 000076D2 FC                              CLD
 36455 000076D3 2E8916[1003]                    MOV     [CS:ENDMEM],DX
 36456 000076D8 2E8926[8A04]                    MOV     [CS:INITSP],SP
 36457 000076DD 2E8C16[8C04]                    MOV     [CS:INITSS],SS
 36458 000076E2 8CC8                            MOV     AX,CS
 36459 000076E4 8ED0                            MOV     SS,AX
 36460 000076E6 BC[C879]                        MOV     SP,INITSTACK
 36461                                  	; 08/08/2018
 36462 000076E9 368C1E[4A00]            	MOV     [SS:NULDEV+2],DS
 36463 000076EE 368936[4800]                    MOV     [SS:NULDEV],SI	; DS:SI Points to CONSOLE Device
 36464                                  	; 15/07/2018
 36465                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 36466                                  	; (Set INT 2Ah handler address to an 'IRET')
 36467 000076F3 1E                      	push    ds
 36468 000076F4 31C0                    	xor     ax,ax
 36469 000076F6 8ED8                    	mov     ds,ax
 36470 000076F8 B8[D076]                	mov     ax,IRETT
 36471 000076FB A3A800                  	mov     [2Ah*4],ax ; 00A8h
 36472 000076FE 8CC8                    	mov     ax,cs
 36473 00007700 A3AA00                  	mov     [(2Ah*4)+2],ax ; 00AAh
 36474 00007703 1F                      	pop     ds
 36475                                  	;
 36476 00007704 E81102                          CALL    CHARINIT	; initialize console driver
 36477                                  
 36478 00007707 56                              PUSH	SI		; save pointer to header	
 36479 00007708 0E                      	PUSH	CS
 36480 00007709 07                              POP	ES
 36481                                          ; 07/07/2018
 36482 0000770A BF[9E00]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 36483 0000770D B80300                          MOV     AX,3
 36484 00007710 AB                              STOSW           	; Refcount
 36485 00007711 FEC8                            DEC     AL
 36486 00007713 AB                              STOSW           	; Access rd/wr, compatibility
 36487 00007714 30C0                            XOR     AL,AL
 36488 00007716 AA                              STOSB           	; attribute
 36489                                  	;mov	al,0C3h
 36490 00007717 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 36491 00007719 AB                      	STOSw			; flags
 36492 0000771A 89F0                            mov	ax,si
 36493 0000771C AB                              stosw			; device pointer in devptr	
 36494 0000771D 8CD8                            mov	ax,ds
 36495 0000771F AB                      	stosw
 36496 00007720 31C0                    	xor	ax,ax	; 0
 36497 00007722 AB                      	stosw			; firclus
 36498 00007723 AB                      	stosw			; time
 36499 00007724 AB                      	stosw			; date
 36500 00007725 48                      	dec	ax	; -1
 36501 00007726 AB                      	stosw			; size
 36502 00007727 AB                      	stosw
 36503 00007728 40                      	inc	ax	; 0
 36504 00007729 AB                      	stosw			; position
 36505 0000772A AB                      	stosw
 36506                                  	;add	di,7
 36507 0000772B 83C707                  	add	di,SF_ENTRY.sf_name - SF_ENTRY.sf_cluspos
 36508                                  				; point at name
 36509                                  	;add	si,10
 36510 0000772E 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 36511                                  				; point to name
 36512 00007731 B90400                  	mov	cx,4
 36513 00007734 F3A5                    	rep	movsw		; name
 36514 00007736 B103                    	mov	cl,3
 36515 00007738 B020                    	mov	al," "
 36516 0000773A F3AA                    	rep	stosb		; extension
 36517 0000773C 5E                      	POP	SI		; get back pointer to header
 36518                                  
 36519                                  				; mark device as CON I/O
 36520                                  	; 15/07/2018
 36521                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 36522 0000773D 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 36523                                  	; 12/03/2018
 36524 00007741 368936[3200]            	MOV     [SS:BCON],SI
 36525 00007746 368C1E[3400]                    MOV     [SS:BCON+2],DS
 36526                                  
 36527                                  CHAR_INIT_LOOP:
 36528 0000774B C534                            LDS     SI,[SI]				; AUX device
 36529 0000774D E8C801                          CALL    CHARINIT
 36530                                         	;15/07/2018
 36531                                  	;test	byte [SI+4],8
 36532 00007750 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 36533 00007754 74F5                            JZ      SHORT CHAR_INIT_LOOP
 36534                                  	; 12/03/2018
 36535 00007756 368936[2E00]                    MOV     [SS:BCLOCK],SI
 36536 0000775B 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 36537 00007760 BD[CA79]                        MOV     BP,MEMSTRT			; ES:BP points to DPB
 36538                                  PERDRV:
 36539                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 36540 00007763 C534                            LDS     SI,[SI]				; Next device
 36541 00007765 83FEFF                          CMP     SI,-1
 36542 00007768 7468                    	JZ      SHORT CONTINIT
 36543                                  
 36544 0000776A E8AB01                          CALL    CHARINIT
 36545                                  
 36546                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 36547                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 36548                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 36549                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 36550                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 36551                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 36552                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 36553                                  
 36554                                          ; 15/07/2018
 36555                                  	;test	word [SI+4],8000h		; DEVTYP
 36556 0000776D F744040080                      TEST    word [SI+SYSDEV.ATT],DEVTYP
 36557 00007772 75EF                    	JNZ     SHORT PERDRV			; Skip any other character devs
 36558                                  
 36559 00007774 368A0E[3103]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 36560 00007779 30ED                    	XOR     CH,CH
 36561                                          ; 07/07/2018
 36562                                  	;MOV	[SI+10],CL		; Number of units in name field
 36563 0000777B 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 36564 0000777E 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 36565 00007783 30F6                    	XOR     DH,DH
 36566 00007785 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 36567 0000778A 1E                      	PUSH    DS
 36568 0000778B 56                              PUSH    SI
 36569 0000778C 36C51E[3603]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 36570                                  PERUNIT:
 36571 00007791 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 36572 00007793 43                              INC     BX
 36573 00007794 43                              INC     BX                      ; On to next BPB
 36574                                  	;07/07/2018
 36575                                          ;mov	[ES:BP+DPB.DRIVE],dl
 36576 00007795 26885600                	MOV     [ES:BP],DL
 36577                                  	;MOV	[ES:BP+1],DH
 36578 00007799 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 36579 0000779D 53                              PUSH    BX
 36580 0000779E 51                              PUSH    CX
 36581 0000779F 52                              PUSH    DX
 36582                                  
 36583                                          ;invoke	$SETDPB
 36584 000077A0 E87DA6                          CALL	_$SETDPB
 36585                                  
 36586                                  	; 07/07/2018
 36587                                  	;MOV	AX,[ES:BP+2]
 36588 000077A3 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 36589                                          ; 12/03/2018
 36590 000077A7 363B06[3600]            	CMP	AX,[SS:MAXSEC]
 36591 000077AC 7604                    	JBE     SHORT NOTMAX
 36592 000077AE 36A3[3600]              	MOV	[SS:MAXSEC],AX
 36593                                  NOTMAX:
 36594 000077B2 5A                              POP     DX
 36595 000077B3 59                              POP     CX
 36596 000077B4 5B                              POP     BX
 36597 000077B5 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 36598 000077B7 5E                              POP     SI
 36599 000077B8 1F                              POP     DS
 36600                                  					; ds:si -> device header
 36601                                  					; store it in the corresponding dpb
 36602                                  	; 07/07/2018
 36603                                          ;MOV	[ES:BP+18],SI
 36604 000077B9 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 36605                                          ;MOV	[ES:BP+20],DS
 36606 000077BD 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 36607                                  
 36608 000077C1 1E                              PUSH    DS			; save pointer to device header
 36609 000077C2 56                              PUSH    SI
 36610 000077C3 FEC6                            INC     DH			; inc unit #
 36611 000077C5 FEC2                            INC     DL			; inc drive #
 36612 000077C7 8ED8                            MOV     DS,AX			; restore segment of BPB array
 36613                                          ;add	bp,32 ; 15/07/2018
 36614                                  	;add	bp,33 ; MSDOS 6.0 ; 31/07/2019
 36615 000077C9 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 36616 000077CC E2C3                    	LOOP    PERUNIT			; process all units in each driver
 36617                                          
 36618 000077CE 5E                      	POP     SI			; restore pointer to device header
 36619 000077CF 1F                              POP     DS
 36620 000077D0 EB91                    	JMP	SHORT PERDRV		; process all drivers in chain
 36621                                  
 36622                                  CONTINIT:
 36623 000077D2 0E                              PUSH    CS
 36624 000077D3 1F                              POP     DS
 36625                                  ; Calculate true address of buffers, FATs, free space
 36626 000077D4 89EF                            MOV     DI,BP           ; First byte after current DPBs
 36627 000077D6 8B2E[3600]                      MOV     BP,[MAXSEC]
 36628 000077DA B8[D076]                        MOV     AX,SYSBUF	; = IRETT (15/07/2018)
 36629                                          ; 07/07/2018
 36630                                  	;MOV	[BUFFSTRT],AX
 36631 000077DD 01E8                            ADD     AX,BP           ; One I/O buffer
 36632 000077DF 83C014                          ADD     AX,BUFINSIZ ; = 16
 36633 000077E2 A3[2600]                        MOV     [DPBHEAD],AX	; True start of DPBs
 36634 000077E5 89C2                            MOV     DX,AX
 36635 000077E7 81EA[D076]                      SUB     DX,SYSBUF	; = IRETT (15/07/2018)
 36636 000077EB 89D5                            MOV     BP,DX
 36637 000077ED 01FD                            ADD     BP,DI           ; Allocate buffer space
 36638                                  	;sub	bp,918 ; = ADJFAC for current DOSINIT (07/07/2018)
 36639 000077EF 81EDFA02                        SUB     BP,ADJFAC       ; True address of free memory
 36640 000077F3 55                              PUSH    BP ; ### ; *fmem* (start of free memory)		
 36641                                          ; 24/07/2019
 36642 000077F4 BF[CA79]                	MOV     DI,MEMSTRT	; Current start of DPBs  ; 75A6h for MSDOS 3.3
 36643                                  	;add	di,24 ; MSDOS 3.3
 36644                                  	;add	di,25 ; MSDOS 6.0
 36645 000077F7 83C719                          ADD     DI,DPB.NEXT_DPB	; Point at dpb.next_dpb field
 36646 000077FA 8A0E[4600]                      MOV     CL,[NUMIO]
 36647 000077FE 30ED                            XOR     CH,CH
 36648                                  TRUEDPBAD:
 36649                                  	;add	ax,32 ; MSDOS 3.3
 36650                                  	;add	ax,33 ; MSDOS 6.0
 36651 00007800 83C021                          ADD     AX,DPBSIZ       ; Compute address of next DPB
 36652 00007803 AB                              STOSW                   ; Set the link to next DPB
 36653 00007804 83C71F                          ADD     DI,DPBSIZ-2     ; Point at next address
 36654 00007807 E2F7                            LOOP    TRUEDPBAD
 36655 00007809 83EF21                          SUB     DI,DPBSIZ       ; Point at last dpb.next_dpb field
 36656 0000780C B8FFFF                          MOV     AX,-1
 36657 0000780F AB                              STOSW                   ; End of list
 36658 00007810 83C50F                          ADD     BP,15           ; True start of free space (round up to segment)
 36659                                  	; 15/07/2018
 36660                                  	;MOV	CL,4
 36661                                          ;SHR	BP,CL           ; Number of segments for DOS resources
 36662 00007813 D1DD                            rcr	bp,1
 36663 00007815 B103                    	mov	cl,3
 36664 00007817 D3ED                    	shr	bp,cl
 36665                                  	;
 36666 00007819 8CCA                    	MOV     DX,CS
 36667 0000781B 01EA                            ADD     DX,BP           ; First free segment
 36668                                  	
 36669                                    	; 06/07/2019
 36670                                  	;MOV	BX,15 ; 0Fh
 36671                                  	;MOV	CX,[ENDMEM]
 36672                                  	
 36673 0000781D 8CCD                    	MOV     BP,CS
 36674                                  
 36675                                  ; BP has segment of DOS (whether to load high or run in place)
 36676                                  ; DX has program segment (whether after DOS or overlaying DOS)
 36677                                  ; CX has size of memory in paragraphs (reduced by DOS size if HIGHMEM)
 36678                                          
 36679                                  	; 06/07/2019
 36680                                  	;MOV	[ENDMEM],CX
 36681                                          ;MOV	ES,BP
 36682                                          ;MOV	[ES:DSKCHRET+3],ES ; mov [ES:DOSEG_INIT],es
 36683                                  
 36684 0000781F 2E892E[6C03]            	mov	[cs:DSKCHRET+3],bp        
 36685                                  
 36686 00007824 31C0                    	XOR     AX,AX
 36687 00007826 8ED8                            MOV     DS,AX
 36688 00007828 8EC0                            MOV     ES,AX
 36689                                  	;mov	di,82h 
 36690 0000782A BF8200                          MOV     DI,INTBASE+2
 36691                                  	; 15/07/2018
 36692 0000782D 89E8                            MOV     AX,BP
 36693                                  	; Set INT 0 (divide by zero) handler
 36694 0000782F C7060000[C55A]          	mov     word [0],DIVOV
 36695 00007835 A30200                  	mov     word [2],ax  ; = cs
 36696                                  	; Set INT 20h to INT 28h handler segments 
 36697                                  	;mov	cx,17
 36698 00007838 B111                    	mov	cl,17 ; 06/07/2019
 36699 0000783A F3AB                    	rep	stosw
 36700                                  	; DI points to INT 29h vector, offset
 36701 0000783C 83C706                  	add	di,6 
 36702                                  	; DI points to INT 2Ah vector, segment
 36703                                  	;Set  INT 2Ah to INT 3Fh handler segments		
 36704                                  	;mov	cx,43
 36705 0000783F B12B                    	mov	cl,43 ; 06/07/2019
 36706 00007841 F3AB                    	rep	stosw
 36707                                  	; DI points to INT 40h vector, segment
 36708 00007843 BF8000                  	mov	di,80h
 36709                                  	; Set INT 20h to INT 28h vectors to their default handler offsets
 36710 00007846 B8[CF14]                	mov	ax,_IRET
 36711                                  	;mov	cx,9
 36712 00007849 B109                    	mov	cl,9 ; 06/07/2019
 36713                                  iset1:
 36714 0000784B AB                      	stosw
 36715 0000784C 83C702                  	add	di,2
 36716 0000784F E2FA                    	loop	iset1
 36717 00007851 83C704                  	add	di,4
 36718                                  	; Set INT 2Ah to INT 3Fh vectors to their default handler offsets
 36719                                  	;mov	cx,22
 36720 00007854 B116                    	mov	cl,22 ; 06/07/2019
 36721                                  iset2:
 36722 00007856 AB                      	stosw
 36723 00007857 83C702                  	add	di,2
 36724 0000785A E2FA                    	loop	iset2
 36725                                  	
 36726                                  	; 06/07/2019
 36727 0000785C 89E8                    	mov	ax,bp ; *ax=cs*
 36728                                  
 36729                                  	; Set	INT 2Fh handler offset to INT2F
 36730 0000785E C706BC00[5C18]          	mov	word [2Fh*4],INT2F  ; 00BCh
 36731                                  
 36732                                  	; set up entry point call at vectors 30-31h
 36733                                  
 36734 00007864 C606C000EA                      MOV     BYTE [ENTRYPOINT],mi_Long_JMP
 36735 00007869 C706C100[D014]                  MOV     WORD [ENTRYPOINT+1],CALL_ENTRY
 36736                                  
 36737 0000786F A3C300                  	MOV    [ENTRYPOINT+3],AX ; = cs
 36738                                  
 36739                                  	; Set	INT 20h, 21h, 22h, 23h handler offsets
 36740 00007872 C7068000[C914]                  MOV     WORD [addr_int_abort],QUIT
 36741 00007878 C7068400[E814]                  MOV     WORD [addr_int_command],COMMAND
 36742 0000787E C70688000001                    MOV     WORD [addr_int_terminate],100H
 36743 00007884 89168A00                        MOV     [addr_int_terminate+2],DX ; *cmc*
 36744                                  	; 15/07/2018 - Retro DOS v3.0
 36745 00007888 C7069400[F616]                  MOV     WORD [addr_int_disk_read],ABSDRD   ; INT 25h
 36746 0000788E C7069800[4117]                  MOV     WORD [addr_int_disk_write],ABSDWRT ; INT 26h
 36747 00007894 C7069C00[DF67]                  MOV     WORD [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 36748                                  
 36749                                  	; 15/07/2018
 36750                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 36751 0000789A 0E                      	push	cs
 36752 0000789B 1F                      	pop	ds
 36753 0000789C 0E                      	push	cs
 36754 0000789D 07                      	pop	es
 36755                                  	; initialize the jump table for the sharer..
 36756                                  	;	(MSDOS 6.0, MSINIT.ASM, 1991, "patch_misc_segments")
 36757                                  	; MSDOS 3.3
 36758                                  	; (set JSharer jump table segments)
 36759 0000789E BF[5C00]                	mov	di,JShare
 36760                                  	;mov	ax,cs ; *ax=cs*
 36761                                  	;mov	cx,15
 36762 000078A1 B10F                    	mov	cl,15 ; 06/07/2019
 36763                                  iset3:
 36764 000078A3 83C702                  	add	di,2
 36765 000078A6 AB                      	stosw
 36766 000078A7 E2FA                    	loop	iset3
 36767                                  
 36768                                  	; MSDOS 2.11, MSDOS 3.3
 36769 000078A9 B8[7A03]                        MOV     AX,INITBLOCK
 36770 000078AC 83C00F                          ADD	AX,0Fh		; round to a paragraph
 36771 000078AF B104                            MOV     CL,4
 36772 000078B1 D3E8                            SHR     AX,CL
 36773 000078B3 8CDF                            MOV     DI,DS
 36774 000078B5 01C7                            ADD     DI,AX
 36775 000078B7 47                              INC     DI
 36776 000078B8 893E[FC02]                      MOV     [CurrentPDB],DI
 36777 000078BC 55                              PUSH    BP ; ## ; = cs
 36778 000078BD 52                              PUSH    DX ; #	; *cmc*	; Save COMMAND address
 36779 000078BE A1[1003]                        MOV     AX,[ENDMEM]
 36780 000078C1 89FA                            MOV     DX,DI
 36781                                  
 36782                                          ;invoke	SETMEM		; Basic Header
 36783 000078C3 E8ABA6                  	CALL	SETMEM
 36784 000078C6 0E                              PUSH	CS
 36785 000078C7 1F                              POP	DS
 36786                                  	;mov	di,24
 36787 000078C8 BF1800                          MOV     DI,PDB.JFN_TABLE
 36788 000078CB 31C0                            XOR     AX,AX
 36789 000078CD AB                              STOSW
 36790 000078CE AA                              STOSB                   ; 0,1 and 2 are CON device
 36791 000078CF B0FF                            MOV     AL,0FFH
 36792                                  	;mov	cx,17
 36793                                          ;MOV	CX,FILPERPROC-3 ; 17
 36794 000078D1 B111                    	mov	cl,FILPERPROC-3 ; 06/07/2019
 36795 000078D3 F3AA                            REP     STOSB           ; Rest are unused
 36796 000078D5 0E                              PUSH	CS
 36797 000078D6 07                              POP	ES
 36798 000078D7 8C1E[2C00]                      MOV     [SFT_ADDR+2],DS	; Must be set to print messages
 36799                                  
 36800                                  	; 15/07/2018 - Retro DOS v3.0
 36801                                  	; MSDOS 3.3
 36802                                  	; (set country cdpg table segments)
 36803 000078DB BE[3B10]                	mov	si,COUNTRY_CDPG ; country_tab
 36804                                  	;mov	[es:si+79],es	; Ucase table segment
 36805                                  	;mov	[es:si+84],es	; File ucase table segment
 36806                                  	;mov	[es:si+89],es	; File char list segment
 36807                                  	;mov	[es:si+94],es	; Collate table segment
 36808                                  	;mov	[es:si+123],es	; Monocase routine segment
 36809 000078DE 8C444F                  	mov	[si+79],es
 36810 000078E1 8C4454                  	mov	[si+84],es
 36811 000078E4 8C4459                  	mov	[Si+89],es
 36812 000078E7 8C445E                  	mov	[si+94],es
 36813 000078EA 8C447B                  	mov	[si+123],es
 36814                                  	; (set SysInitTable -sysinitvars and country_cdpg- segments)
 36815 000078ED BE[6B0F]                	mov     si,SysInitTable
 36816                                  	;;mov	[es:si+6], es
 36817                                  	;;mov	[es:si+2], es
 36818                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 36819                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 36820 000078F0 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 36821 000078F3 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 36822                                  
 36823                                  	; (set FastOpen table FastRet segment)
 36824 000078F6 BE[730F]                	mov     si,FastTable
 36825                                  	;mov	[es:si+4],es
 36826                                  	;;mov	[es:si+8],es
 36827 000078F9 8C4404                  	mov     [si+4],es
 36828                                  	;mov	[si+8],es
 36829                                  
 36830                                  	; 24/07/2019 - Retro DOS v3.2
 36831                                  
 36832                                  	; IBMDOS.COM (Offset 7259h), IBM PC DOS 3.30
 36833                                  	;mov	word [FETCHI_TAG],5872h ; ? ('Xr')
 36834                                  
 36835                                  	; 10/08/2018 - Retro DOS v3.0
 36836                                  
 36837                                  	; MSDOS 2.11 (Retro DOS v2.0), MSDOS 3.3
 36838                                  
 36839                                  ; After this points the char device functions for CON will work for
 36840                                  ; printing messages
 36841                                  
 36842                                  	;;IF	NOT IBM
 36843                                  	;;IF	NOT ALTVECT
 36844                                  	;MOV	SI,HEADER
 36845                                  	;;invoke OUTMES
 36846                                  	;CALL	OUTMES
 36847                                  	;;PUSH	CS		; Outmes stomps on segments
 36848                                  	;;POP	DS
 36849                                  	;;PUSH	CS
 36850                                  	;;POP	ES
 36851                                  	;;ENDIF
 36852                                  	;;ENDIF
 36853                                  
 36854                                  ; Move the FATs into position
 36855 000078FC 5A                              POP     DX ; #	; *cmc*		; Restore COMMAND address
 36856 000078FD 5D                              POP     BP ; ## ; = cs
 36857 000078FE 59                              POP     CX ; ### ; *fmem*	; True address of free memory
 36858 000078FF BE[CA79]                        MOV     SI,MEMSTRT		; Place to move DPBs from
 36859 00007902 8B3E[2600]                      MOV     DI,[DPBHEAD]		; Place to move DPBs to
 36860 00007906 29F9                            SUB     CX,DI                   ; Total length of DPBs
 36861 00007908 39F7                            CMP     DI,SI
 36862 0000790A 7607                            JBE     SHORT MOVJMP		; Are we moving to higher or 
 36863                                  					; lower memory?
 36864 0000790C 49                              DEC     CX                      ; Move backwards to higher memory
 36865 0000790D 01CF                            ADD     DI,CX
 36866 0000790F 01CE                            ADD     SI,CX
 36867 00007911 41                              INC     CX
 36868 00007912 FD                              STD
 36869                                  MOVJMP:
 36870 00007913 8EC5                            MOV	ES,BP
 36871 00007915 E9768B                          JMP	MOVDPB
 36872                                  
 36873                                  CHARINIT:
 36874                                  	; 07/07/2018 - Retro DOS v3.0
 36875 00007918 36C606[2403]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 36876 0000791E 36C606[2503]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 36877 00007924 36C606[2603]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 36878 0000792A 36C706[2703]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 36879 00007931 06                              PUSH	ES
 36880 00007932 53                              PUSH	BX
 36881 00007933 50                              PUSH	AX
 36882 00007934 BB[2403]                        MOV	BX,DEVCALL
 36883 00007937 0E                              PUSH	CS
 36884 00007938 07                              POP	ES
 36885 00007939 E8F8D7                          CALL	DEVIOCALL2	
 36886 0000793C 58                      	POP	AX
 36887 0000793D 5B                              POP	BX
 36888 0000793E 07                              POP	ES
 36889 0000793F C3                              RETN
 36890                                  
 36891                                  align 2
 36892                                          ;;DB	80H DUP(?)
 36893                                  	;TIMES 	64 dw 0 ; 05/09/2018
 36894                                  	; 10/08/2018
 36895                                  	;times	128 dw 0
 36896                                  	; 12/08/2018
 36897                                  	;times	132 dW 0 ; ADJFAC = 918 ; 08/09/2018 (OK.)
 36898                                  	; 08/09/2018 
 36899 00007940 00<rep 88h>             	times	136 db 0 ; ADJFAC = 790	; 08/09/2018 (OK.)
 36900                                  
 36901                                  			 ; ADJFAC = 770 ; 06/07/2019
 36902                                  
 36903                                  	; 06/07/2019 - Retro DOS v3.1
 36904                                  	;times	148 db 0 ; ADJFAC = 918
 36905                                  
 36906                                  INITSTACK:	; INITSTACK LABEL BYTE
 36907 000079C8 0000                    	DW	0 ; DW ?
 36908                                  
 36909                                  ;MEMSTRT LABEL	WORD
 36910                                  MEMSTRT EQU	$
 36911                                  
 36912                                  ADJFAC  EQU     MEMSTRT-SYSBUF
 36913                                  
 36914                                  	; 01/08/2019
 36915                                  
 36916                                  	;db 0,0,0,0,0,0,0,0,0,0
 36917                                  
 36918 000079CA 18                      	db 24
 36919 000079CB 07                      	db 7
 36920 000079CC E307                    	dw 2019
 36921 000079CE 0000                    	dw 0	
 36922                                  
 36923                                  PcDosVersion:
 36924 000079D0 1A4040402323232050-     	db 1Ah,'@@@### PC-DOS Version 3.30',0Dh,0Ah
 36924 000079D9 432D444F5320566572-
 36924 000079E2 73696F6E20332E3330-
 36924 000079EB 0D0A               
 36925 000079ED 1A00                    	db 1Ah,0
 36926                                  
 36927                                          ;do_ext
 36928                                  ;LAST	ENDS
