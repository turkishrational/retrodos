     1                                  ; ****************************************************************************
     2                                  ; MSDOS3.BIN (MSDOS 3.3 Kernel) - RETRO DOS v3.2 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 10/07/2024 (BugFix) - (Previous: 22/01/2024)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2019 (Retro DOS 3.0), 29/06/2019 (Retro DOS 3.1)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.14 (2.15)  
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	    ((nasm msdos3.asm -l msdos3.txt -o MSDOS3.BIN)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    15                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    16                                  ; ****************************************************************************
    17                                  ; main file: 'retrodos3.s'
    18                                  ; incbin 'MSDOS3.BIN' ; (DOSGROUP CODE SEGMENT)
    19                                  ; ----------------------------------------------------------------------------
    20                                  ; 07/07/2018 - Erdogan Tan
    21                                  ; (Note: I have not got MSDOS 3.3 kernel source files; so, I need to continue
    22                                  ; by using disassembled MSDOS.SYS -v3.3- and MSDOS 6.0 kernel source files.)
    23                                  ; ----------------------------------------------------------------------------
    24                                  ; MSDOS 6.0 Kernel source files:
    25                                  ;	MSDATA.ASM, 
    26                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    27                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC)
    28                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    29                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    30                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    31                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    32                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    33                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    34                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    35                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    36                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    37                                  ;
    38                                  ; MSDOS 2.0 Kernel source files:
    39                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    40                                  ;	MSCODE.ASM
    41                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    42                                  
    43                                  ; -----------------------------------------
    44                                  ; 20/05/2019 - MSDOS3.S - Retro DOS v3.0
    45                                  ; 29/06/2019 - MSDOS3.ASM - Retro DOS v3.1
    46                                  ; 17/07/2019 - MSDOS33.ASM - Retro DOS v3.2
    47                                  ; -----------------------------------------
    48                                  
    49                                  ;============================================================================
    50                                  ; DOSLINK
    51                                  ;============================================================================
    52                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    53                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    54                                  ;stdio time xenix xenix2
    55                                  
    56                                  ;============================================================================
    57                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    58                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    59                                  ;============================================================================
    60                                  ;
    61                                  ; ###########################################################################
    62                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    63                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    64                                  ; #			 Licensed to: Freeware version			    #
    65                                  ; ###########################################################################
    66                                  ;
    67                                  ; Input	MD5   :	EF2ADCA1CB3882118FD247DD4C672C81
    68                                  
    69                                  ; ---------------------------------------------------------------------------
    70                                  ; File Name   :	D:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS33.BIN
    71                                  ; Format      :	Binary file
    72                                  ; Base Address:	0000h Range: 0000h - 75CFh Loaded length: 75CFh
    73                                  ;============================================================================
    74                                  ; MSDOS33.BIN = IBMDOS.COM, 17/03/1987, 30159 bytes (IBM PC DOS 3.30 kernel)
    75                                  
    76                                  ;============================================================================
    77                                  ; MSDOS.ASM
    78                                  ;============================================================================
    79                                  
    80                                  ;TITLE   Standard MSDOS
    81                                  ;NAME    MSDOS_2
    82                                  
    83                                  ; Number of disk I/O buffers
    84                                  
    85                                  ;	INCLUDE STDSW.ASM
    86                                  ;       INCLUDE MSHEAD.ASM
    87                                  ;       INCLUDE MSDATA.ASM
    88                                  
    89                                  ;	END
    90                                  
    91                                  ;============================================================================
    92                                  ; STDSW.ASM
    93                                  ;============================================================================
    94                                  
    95                                  TRUE    EQU     0FFFFH
    96                                  FALSE   EQU     ~TRUE ; NOT TRUE
    97                                  
    98                                  ; Use the switches below to produce the standard Microsoft version or the IBM
    99                                  ; version of the operating system
   100                                  ;MSVER   EQU     false
   101                                  ;IBM     EQU     true
   102                                  ;WANG    EQU     FALSE
   103                                  ;ALTVECT EQU     FALSE
   104                                  
   105                                  ; Set this switch to cause DOS to move itself to the end of memory
   106                                  ;HIGHMEM EQU     FALSE
   107                                  
   108                                  ;	IF      IBM
   109                                  ESCCH   EQU     0			; character to begin escape seq.
   110                                  CANCEL  EQU     27			;Cancel with escape
   111                                  TOGLINS EQU     TRUE			;One key toggles insert mode
   112                                  TOGLPRN EQU     TRUE			;One key toggles printer echo
   113                                  ZEROEXT EQU     TRUE
   114                                  ;       ELSE
   115                                  ;       IF      WANG			;Are we assembling for WANG?
   116                                  ;ESCCH   EQU     1FH			;Yes. Use 1FH for escape character
   117                                  ;       ELSE
   118                                  ;ESCCH   EQU     1BH
   119                                  ;       ENDIF
   120                                  ;CANCEL  EQU     "X"-"@"		;Cancel with Ctrl-X
   121                                  ;TOGLINS EQU     WANG			;Separate keys for insert mode on
   122                                  					;and off if not WANG
   123                                  ;TOGLPRN EQU     FALSE			;Separate keys for printer echo on
   124                                  					;and off
   125                                  ;ZEROEXT EQU     TRUE
   126                                  ;        ENDIF
   127                                  
   128                                  ;============================================================================
   129                                  ; MSHEAD.ASM
   130                                  ;============================================================================
   131                                  
   132                                  ;--------------------------------------------------------------
   133                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   134                                  ;--------------------------------------------------------------
   135                                  
   136                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   137                                  ;        by Microsoft MSDOS development group:
   138                                  ;           Tim Paterson (Ret.)
   139                                  ;           Aaron Reynolds
   140                                  ;           Nancy Panners (Parenting)
   141                                  ;           Mark Zbikowski
   142                                  ;           Chris Peters (BIOS) (ret.)
   143                                  
   144                                  ; ****************** Revision History *************************
   145                                  ;          >> EVERY change must noted below!! <<
   146                                  ;
   147                                  ; 0.34 12/29/80 General release, updating all past customers
   148                                  ; 0.42 02/25/81 32-byte directory entries added
   149                                  ; 0.56 03/23/81 Variable record and sector sizes
   150                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   151                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   152                                  ; 0.75 04/17/81 Improve and correct buffer handling
   153                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   154                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   155                                  ; 1.00 04/28/81 Renumber for general release
   156                                  ; 1.01 05/12/81 Fix bug in `STORE'
   157                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   158                                  ;               RENAME fix, general cleanup
   159                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   160                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   161                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   162                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   163                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   164                                  ;               of smaller improvements
   165                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   166                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   167                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   168                                  ;               zero extent field in IBM version (back to 1.01!)
   169                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   170                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   171                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   172                                  ;               is searched first when possible to minimize I/O
   173                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   174                                  ;               full sector write when file is growing
   175                                  ;      03/09/82 Multiple I/O buffers
   176                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   177                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   178                                  ;               must invalidate all buffers (disk and directory).
   179                                  ; 1.27 03/31/82 Installable device drivers
   180                                  ;                 Function call 47 - Get pointer to device table list
   181                                  ;                 Function call 48 - Assign CON AUX LIST
   182                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   183                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   184                                  ;               call entries.  Most CS relative references changed to SS
   185                                  ;               relative with an eye toward putting a portion of the DOS in
   186                                  ;               ROM.  DOS source also broken into header, data and code pieces
   187                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   188                                  ;               return the current values.
   189                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   190                                  ;               call to return flag location (call 29)
   191                                  ;      04/15/82 Volume ID attribute added
   192                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   193                                  ;               avoid a CS relative reference.
   194                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   195                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   196                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   197                                  ;               call 49.
   198                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   199                                  ;               address of DPB
   200                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   201                                  ;               writting to console device via file I/O.  Added a console
   202                                  ;               output attribute to devices.
   203                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   204                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   205                                  ;               as devices....  pipes, redirection now possible
   206                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   207                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   208                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   209                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   210                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   211                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   212                                  ;               out back about 1.27 or so (oops).  ARR
   213                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   214                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   215                                  ;               RMDIR Xenix calls
   216                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   217                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   218                                  ;               Frees up lots of memory.
   219                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   220                                  ;               system buffers
   221                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   222                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   223                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   224                                  ;               changed to set file handle environment.
   225                                  ; 2.00 08/01/82 Number for IBM release
   226                                  ;      01/19/83 No environ bug in EXEC
   227                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   228                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   229                                  ;      01/27/83 Growcnt fixed for 32-bits
   230                                  ;      01/27/83 Find-first problem after create
   231                                  ; 2.01 02/17/83 International DOS
   232                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   233                                  ;               an IBM PC
   234                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   235                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   236                                  ; 2.10 03/09/83 Start of NETWORK support
   237                                  ;		New Buffer structure
   238                                  ;		New Sytem file table structure
   239                                  ;		FCB moved to internal representation
   240                                  ;		DOS re-organized
   241                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   242                                  ;		device interface.
   243                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   244                                  ;               an IBM PC
   245                                  ; 2.50 09/12/83 More network stuff
   246                                  ;
   247                                  ; *************************************************************
   248                                  
   249                                  ; ----------------------------------------------------------------------------
   250                                  ; EQUATES
   251                                  
   252                                  ; Interrupt Entry Points:
   253                                  
   254                                  ; INTBASE:      ABORT
   255                                  ; INTBASE+4:    COMMAND
   256                                  ; INTBASE+8:    BASE EXIT ADDRESS
   257                                  ; INTBASE+C:    CONTROL-C ABORT
   258                                  ; INTBASE+10H:  FATAL ERROR ABORT
   259                                  ; INTBASE+14H:  BIOS DISK READ
   260                                  ; INTBASE+18H:  BIOS DISK WRITE
   261                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   262                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   263                                  ; INTBASE+40H:  Long jump to CALL entry point
   264                                  
   265                                  ENTRYPOINTSEG   EQU     0CH
   266                                  MAXDIF          EQU     0FFFH
   267                                  SAVEXIT         EQU     10
   268                                  ;08/07/2018 - Retro DOS v3.0
   269                                  ;WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   270                                  
   271                                         ; INCLUDE DOSSYM.ASM
   272                                         ; INCLUDE DEVSYM.ASM
   273                                  
   274                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   275                                  ; PAGE
   276                                  ; There are three kinds of context resets that can occur during normal DOS
   277                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   278                                  ; be handles in a clean fashion that allows nested executions along with the
   279                                  ; ability to trap one's own errors.
   280                                  ;
   281                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   282                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   283                                  ;           follows:
   284                                  ;
   285                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   286                                  ;           Save it in static memory.
   287                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   288                                  ;
   289                                  ;           The interrupt service routine must preserve all registers and
   290                                  ;           return carry set iff the operation is to be aborted (via abort
   291                                  ;           system call), otherwise, carry is reset and the operation is
   292                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   293                                  ;           RESULTS.
   294                                  ;
   295                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   296                                  ;           restore INT int_ctrl_c from the saved vector.
   297                                  ;
   298                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   299                                  ;           also preserve registers and return one of three values in AL: 0 and
   300                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   301                                  ;           himself is not to issue the abort, rather, the dos will do it for
   302                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   303                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   304                                  ;
   305                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   306                                  ;           abort call.  This is reserved for knowledgeable system programs.
   307                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   308                                  
   309                                  ;SUBTTL SEGMENT DECLARATIONS
   310                                  
   311                                  ; The following are all of the segments used.  They are declared in the order
   312                                  ; that they should be placed in the executable
   313                                  
   314                                  ;
   315                                  ; segment ordering for MSDOS
   316                                  ;
   317                                  
   318                                  ;START           SEGMENT BYTE PUBLIC 'START'
   319                                  ;START           ENDS
   320                                  
   321                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   322                                  ;CONSTANTS       ENDS
   323                                  
   324                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   325                                  ;DATA            ENDS
   326                                  
   327                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   328                                  ;CODE            ENDS
   329                                  
   330                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   331                                  ;LAST            ENDS
   332                                  
   333                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   334                                  
   335                                  ; The following segment is defined such that the data/const classes appear
   336                                  ; before the code class for ROMification
   337                                  
   338                                  ;START		SEGMENT BYTE PUBLIC 'START'
   339                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   340                                  ;		JMP     DOSINIT
   341                                  ;START		ENDS
   342                                  
   343                                  ;============================================================================
   344                                  ; DOSSYM.ASM
   345                                  ;============================================================================
   346                                  
   347                                  ;<Control character definitions>
   348                                  
   349                                  c_DEL       EQU     7Fh         ;    ASCII rubout or delete previous char
   350                                  c_BS        EQU     08h         ; ^H ASCII backspace
   351                                  c_CR        EQU     0Dh         ; ^M ASCII carriage return
   352                                  c_LF        EQU     0Ah         ; ^J ASCII linefeed
   353                                  c_ETB       EQU     17h         ; ^W ASCII end of transmission
   354                                  c_NAK       EQU     15h         ; ^U ASCII negative acknowledge
   355                                  c_ETX       EQU     03h         ; ^C ASCII end of text
   356                                  c_HT        EQU     09h         ; ^I ASCII tab
   357                                  
   358                                  ;============================================================================
   359                                  ; BPB.INC, MSDOS 3.3, 1987
   360                                  ;============================================================================
   361                                  ; 09/07/2018 - Retro DOS v3.0
   362                                  
   363                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   364                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   365                                  ;									   ;
   366                                  
   367                                  ; BIOS PARAMETER BLOCK DEFINITION
   368                                  ; THIS STRUCTURE IS USED TO BUILD A FULL DPB
   369                                  
   370                                  struc BPBLOCK
   371 00000000 ????                    .SECSZ: resw 1		; Size in bytes of physical sector
   372 00000002 ??                      .CLUS:  resb 1		; Sectors/Alloc unit
   373 00000003 ????                    .RES:   resw 1		; Number of reserved sectors
   374 00000005 ??                      .FTCNT: resb 1		; Number of FATs
   375 00000006 ????                    .DRCNT: resw 1		; Number of directory entries
   376 00000008 ????                    .SCCNT: resw 1		; Total number of sectors
   377 0000000A ??                      .MEDIA: resb 1		; Media descriptor byte
   378 0000000B ????                    .FTSEC:	resw 1		; Number of sectors taken up by one FAT
   379                                  .size:
   380                                  endstruc
   381                                  
   382                                  ; 09/07/2018 - Retro DOS v3.0
   383                                  ; (BPB.INC, MSDOS 6.0, 1991)
   384                                  
   385                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   386                                  ;
   387                                  ;	The BPB contains information about the disk structure. It dates
   388                                  ;	back to the earliest FAT systems and so FAT information is
   389                                  ;	intermingled with physical driver information.
   390                                  ;
   391                                  ;	A boot sector contains a BPB for its device; for other disks
   392                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   393                                  ;	information in the DPB.
   394                                  ;
   395                                  ;	The BDS structure contains a BPB within it. 
   396                                  
   397                                  struc A_BPB
   398 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   399 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   400 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   401 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   402 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   403 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   404 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   405 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   406 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   407 0000000F ????                    .BPB_HEADS:		resw	1
   408 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   409 00000013 ????                    			resw	1
   410 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   411 00000017 ????                    			resw	1
   412 00000019 ????????????            			resb	6	; NOTE:  many times these
   413                                  ;					; 	 6 bytes are omitted
   414                                  ;					;	 when BPB manipulations
   415                                  ;					;	 are performed!
   416                                  .size:
   417                                  endstruc
   418                                  
   419                                  ;                                                                          ;
   420                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   421                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   422                                  
   423                                  ;============================================================================
   424                                  ; BUFFER.INC, MSDOS 6.0, 1991
   425                                  ;============================================================================
   426                                  ; 04/05/2019 - Retro DOS v4.0
   427                                  
   428                                  ; 22/07/2019 - Retro DOS v3.2
   429                                  
   430                                  ; <Disk I/O Buffer Header>
   431                                  
   432                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   433                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   434                                  ;									   ;
   435                                  
   436                                  ; Field definition for I/O buffer information
   437                                  
   438                                  struc BUFFINFO
   439                                  ; MSDOS 3.3
   440 00000000 ????????                .buf_link:	resd 1		; Pointer to next buffer in list  ; Retro DOS v3.2
   441                                  ; MSDOS 6.0
   442                                  ;.buf_next:	resw 1		; Pointer to next buffer in list
   443                                  ;.buf_prev:	resw 1		; Pointer to prev buffer in list
   444 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   445                                  				; SFT table index (bit 7 = 1)
   446                                  				; = FFH if buffer free
   447 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   448                                  				;	= 0 if Local device buffer
   449                                  				; Bit 6 = 1 if buffer dirty
   450                                  				; Bit 5 = Reserved
   451                                  				; Bit 4 = Search bit (bit 7 = 1)
   452                                  				; Bit 3 = 1 if buffer is DATA
   453                                  				; Bit 2 = 1 if buffer is DIR
   454                                  				; Bit 1 = 1 if buffer is FAT
   455                                  				; Bit 0 = Reserved
   456 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   457                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   458 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   459 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   460 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   461 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   462 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   463                                  .size:	; 20 bytes
   464                                  endstruc
   465                                  
   466                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   467                                  				;For buf_flags bit 7 = 1, this is the byte
   468                                  				;offset of the start of the buffer in
   469                                  				;the file pointed to by buf_ID. Thus
   470                                  				;the buffer starts at location
   471                                  				;buf_offset in the file and contains
   472                                  				;buf_fill bytes.
   473                                  
   474                                  BUFINSIZ        EQU     BUFFINFO.size
   475                                  
   476                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   477                                  
   478                                  ;Flag byte masks
   479                                  buf_isnet	EQU	10000000b
   480                                  buf_dirty	EQU	01000000b
   481                                  ;***
   482                                  buf_visit	EQU	00100000b
   483                                  ;***
   484                                  buf_snbuf	EQU	00010000b
   485                                  
   486                                  buf_isDATA	EQU	00001000b
   487                                  buf_isDIR	EQU	00000100b
   488                                  buf_isFAT	EQU	00000010b
   489                                  buf_type_0	EQU	11110001b	; AND sets type to "none"
   490                                  
   491                                  buf_NetID	EQU	BUFINSIZ
   492                                  
   493                                  ;                                                                          ;
   494                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   495                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   496                                  
   497                                  ; <User stack inside of system call>
   498                                  ; Location of user registers relative user stack pointer
   499                                  
   500                                  struc	user_env   ; user_environ
   501 00000000 ????                    .user_AX: resw 1
   502 00000002 ????                    .user_BX: resw 1
   503 00000004 ????                    .user_CX: resw 1
   504 00000006 ????                    .user_DX: resw 1
   505 00000008 ????                    .user_SI: resw 1
   506 0000000A ????                    .user_DI: resw 1
   507 0000000C ????                    .user_BP: resw 1
   508 0000000E ????                    .user_DS: resw 1
   509 00000010 ????                    .user_ES: resw 1
   510 00000012 ????                    .user_IP: resw 1
   511 00000014 ????                    .user_CS: resw 1
   512 00000016 ????                    .user_F:  resw 1
   513                                  .size:
   514                                  endstruc
   515                                  
   516                                  ; 09/07/2018 - Retro DOS v3.0
   517                                  ; (VECTOR.INC, MSDOS 3.3, 1987)
   518                                  ; ----------------------------------------------------------------------------
   519                                  
   520                                  ; <interrupt definitions>
   521                                  
   522                                  INTTAB          EQU     20H
   523                                  INTBASE         EQU     4 * INTTAB
   524                                  ENTRYPOINT      EQU     INTBASE+40H
   525                                  
   526                                  ;	IF      ALTVECT
   527                                  ;ALTTAB  EQU     0F0H
   528                                  ;ALTBASE EQU     4 * ALTTAB
   529                                  ;	ENDIF
   530                                  
   531                                  ;
   532                                  ; interrupt assignments
   533                                  ;
   534                                  ;	IF	NOT ALTVECT
   535                                  int_abort	    EQU     INTTAB	; abort process
   536                                  int_command	    EQU     int_abort+1 ; call MSDOS
   537                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   538                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   539                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   540                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   541                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   542                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   543                                  					; resident
   544                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   545                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   546                                  ;									   ;
   547                                  int_spooler	    EQU     int_abort+8 ; spooler call
   548                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   549                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   550                                  ;									   ;
   551                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   552                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   553                                  ;	ELSE
   554                                  ;int_abort	    EQU     INTTAB	; abort process
   555                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   556                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   557                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   558                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   559                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   560                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   561                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   562                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   563                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   564                                  ;									   ;
   565                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   566                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   567                                  ;									   ;
   568                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   569                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   570                                  ;	ENDIF
   571                                  
   572                                  addr_int_abort		EQU    4 * int_abort
   573                                  addr_int_command	EQU    4 * int_command
   574                                  addr_int_terminate	EQU    4 * int_terminate
   575                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   576                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   577                                  addr_int_disk_read	EQU    4 * int_disk_read
   578                                  addr_int_disk_write	EQU    4 * int_disk_write
   579                                  addr_int_keep_process	EQU    4 * int_keep_process
   580                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   581                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   582                                  ;									   ;
   583                                  addr_int_spooler	EQU    4 * int_spooler
   584                                  addr_int_fastcon	EQU    4 * int_fastcon
   585                                  addr_int_IBM		EQU    4 * int_IBM
   586                                  ;									   ;
   587                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   588                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   589                                  
   590                                  
   591                                  ; <Disk map>
   592                                  ;  MSDOS partitions the disk into 4 sections:
   593                                  ;
   594                                  ;  phys sector 0:   +-------------------+
   595                                  ;       |           | boot/reserved     |
   596                                  ;       |           +-------------------+
   597                                  ;       |           |  File allocation  |
   598                                  ;       v           |      table(s)     |
   599                                  ;                   |  (multiple copies |
   600                                  ;                   |     are kept)     |
   601                                  ;                   +-------------------+
   602                                  ;                   |     Directory     |
   603                                  ;                   +-------------------+
   604                                  ;                   |     File space    |
   605                                  ;                   +-------------------+
   606                                  ;                   |   Unaddressable   |
   607                                  ;                   |  (to end of disk) |
   608                                  ;                   +-------------------+
   609                                  ;
   610                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   611                                  ; adjusted to maximize the file space addressable.
   612                                  
   613                                  ; BREAK <Directory entry>
   614                                  
   615                                  ;
   616                                  ;       +---------------------------+
   617                                  ;       |  (12 BYTE) filename/ext   |       0       0
   618                                  ;       +---------------------------+
   619                                  ;       |     (BYTE) attributes     |       11      B
   620                                  ;       +---------------------------+
   621                                  ;       |    (10 BYTE) reserved     |       12      C
   622                                  ;       +---------------------------+
   623                                  ;       | (WORD) time of last write |       22      16
   624                                  ;       +---------------------------+
   625                                  ;       | (WORD) date of last write |       24      18
   626                                  ;       +---------------------------+
   627                                  ;       |   (WORD) First cluster    |       26      1A
   628                                  ;       +---------------------------+
   629                                  ;       |     (DWORD) file size     |       28      1C
   630                                  ;       +---------------------------+
   631                                  ;
   632                                  ;   First byte of filename  = E5 -> free directory entry
   633                                  ;                           = 00 -> end of allocated directory
   634                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   635                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   636                                  ;
   637                                  struc dir_entry
   638 00000000 <res Bh>                .dir_name:	resb 11			; file name
   639 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   640 0000000C <res Ah>                .dir_pad:	resb 10			; reserved for expansion
   641 00000016 ????                    .dir_time:	resw 1			; time of last write
   642 00000018 ????                    .dir_date:	resw 1			; date of last write
   643 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   644 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   645 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   646                                  .size:
   647                                  endstruc
   648                                  
   649                                  attr_read_only      EQU      1h
   650                                  attr_hidden         EQU      2h
   651                                  attr_system         EQU      4h
   652                                  attr_volume_id      EQU      8h
   653                                  attr_directory      EQU     10h
   654                                  attr_archive        EQU     20h
   655                                  ;09/07/2018 - Retro DOS v3.0
   656                                  ;(DIRENT.INC, MSDOS 3.3, 1987)
   657                                  attr_device	    EQU     40h	; This is a VERY special bit.
   658                                  				;   NO directory entry on a disk EVER
   659                                  				;   has this bit set. It is set non-zero
   660                                  				;   when a device is found by GETPATH
   661                                  
   662                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   663                                                                          ; OR of hard attributes for FINDENTRY
   664                                  
   665                                  attr_ignore         EQU     attr_read_only+attr_archive
   666                                                                          ; ignore this(ese) attribute(s)
   667                                                                          ; during search first/next
   668                                  
   669                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   670                                                                          ; changeable via CHMOD
   671                                  
   672                                  ; 09/08/2018 - Retro DOS v3.0
   673                                  ; (DIRENT.INC, MSDOS 6,0, 1991)
   674                                  DIRFREE 	equ	0E5h	; stored in dir_name[0] to indicate free slot
   675                                  
   676                                  ; <File allocation Table information>
   677                                  ;
   678                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on the
   679                                  ; disk.  These entries are packed, two for every three bytes.  The contents of
   680                                  ; entry number N is found by 1) multiplying N by 1.5; 2) adding the result to
   681                                  ; the base address of the Allocation Table; 3) fetching the 16-bit word at this
   682                                  ; address; 4) If N was odd (so that N*1.5 was not an integer), shift the word
   683                                  ; right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry number zero
   684                                  ; is used as an end-of-file trap in the OS and is passed to the BIOS to help
   685                                  ; determine disk format.  Entry 1 is reserved for future use.  The first
   686                                  ; available allocation unit is assigned entry number two, and even though it is
   687                                  ; the first, is called cluster 2.  Entries greater than 0FF8H are end of file
   688                                  ; marks; entries of zero are unallocated.  Otherwise, the contents of a FAT
   689                                  ; entry is the number of the next cluster in the file.
   690                                  ;
   691                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would do
   692                                  ; because these clusters show as allocated, but are not part of any allocation
   693                                  ; chain and thus will never be allocated to a file.  A particular number is
   694                                  ; selected so that disk checking programs know what to do (ie.  a cluster with
   695                                  ; entry FF7H which is not in a chain is not an error).
   696                                  
   697                                  ;DIRSTRLEN       EQU     64	; Max length in bytes of directory strings
   698                                  
   699                                  ;============================================================================
   700                                  ; DPB.INC, MSDOS 6.0, 1991
   701                                  ;============================================================================
   702                                  ; 24/04/2019 - Retro DOS v4.0
   703                                  
   704                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   705                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   706                                  
   707                                  ; 24/07/2019 - Retro DOS v3.2
   708                                  
   709                                  ; ---------------------------------------------------------------------------
   710                                  ;**	DPB - Drive Parameter Block
   711                                  ;
   712                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   713                                  ;	possibly inaccurate deductions from code study... - jgl
   714                                  ;
   715                                  ;	The DPB is DOS's main structure for describing block devices.
   716                                  ;	It contains info about the "Drive" intermingled with info about
   717                                  ;	the FAT file system which is presumably on the drive.  I don't know
   718                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   719                                  ;
   720                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   721                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   722                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   723                                  ; ---------------------------------------------------------------------------
   724                                  
   725                                  struc	DPB
   726 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   727 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   728 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   729 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   730 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   731 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   732 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   733 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   734 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   735 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   736                                  ; MSDOS 3.3
   737                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   738                                  ; MSDOS 6.0
   739 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   740 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   741 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   742 00000017 ??                      .MEDIA:		resb 1		; Media byte
   743 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   744                                  				; check the first time this DPB is used
   745 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   746 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   747 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   748                                  .size:
   749                                  endstruc
   750                                  
   751                                  DPBSIZ  EQU     DPB.size ; = 33	; Size of the structure in bytes
   752                                  
   753                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   754                                  
   755                                  ;                                                                          ;
   756                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   757                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   758                                  
   759                                  ; 12/07/2018 - Retro DOS v3.0 
   760                                  ; (DOSSYM.INC, MSDOS 6.0, 1991)
   761                                  
   762                                  ;**	Character Type Flags
   763                                  ;
   764                                  ;	These flags are used in a lookup table indexed by the character code.
   765                                  ;	They're used to quickly classify characters when parsing paths.
   766                                  ;	I think that these are only used to parse FCBs - jgl
   767                                  
   768                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   769                                  FDELIM	equ 2		; is a delimiter
   770                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   771                                  FFCB	equ 8		; is valid in an FCB
   772                                  
   773                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   774                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   775                                  ;                                                                          ;
   776                                  devid_file_clean        EQU     40h     ; true if file and not written
   777                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   778                                  
   779                                  devid_device            EQU     80h     ; true if a device
   780                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   781                                  devid_device_raw        EQU     20h     ; true if in raw mode
   782                                  devid_device_special    EQU     10h     ; true if special device
   783                                  devid_device_clock      EQU     08h     ; true if clock device
   784                                  devid_device_null       EQU     04h     ; true if null device
   785                                  devid_device_con_out    EQU     02h     ; true if console output
   786                                  devid_device_con_in     EQU     01h     ; true if consle input
   787                                  
   788                                  ;
   789                                  ; structure of devid field as returned by IOCTL is:
   790                                  ;
   791                                  ;       BIT     7   6   5   4   3   2   1   0
   792                                  ;             |---|---|---|---|---|---|---|---|
   793                                  ;             | I | E | R | S | I | I | I | I |
   794                                  ;             | S | O | A | P | S | S | S | S |
   795                                  ;             | D | F | W | E | C | N | C | C |
   796                                  ;             | E |   |   | C | L | U | O | I |
   797                                  ;             | V |   |   | L | K | L | T | N |
   798                                  ;             |---|---|---|---|---|---|---|---|
   799                                  ;       ISDEV = 1 if this channel is a device
   800                                  ;             = 0 if this channel is a disk file
   801                                  ;
   802                                  ;       If ISDEV = 1
   803                                  ;
   804                                  ;             EOF = 0 if End Of File on input
   805                                  ;             RAW = 1 if this device is in Raw mode
   806                                  ;                 = 0 if this device is cooked
   807                                  ;             ISCLK = 1 if this device is the clock device
   808                                  ;             ISNUL = 1 if this device is the null device
   809                                  ;             ISCOT = 1 if this device is the console output
   810                                  ;             ISCIN = 1 if this device is the console input
   811                                  ;
   812                                  ;       If ISDEV = 0
   813                                  ;             EOF = 0 if channel has been written
   814                                  ;             Bits 0-5  are  the  block  device  number  for
   815                                  ;                 the channel (0 = A, 1 = B, ...)
   816                                  ;
   817                                  devid_ISDEV     EQU     80h
   818                                  devid_EOF       EQU     40h
   819                                  devid_RAW       EQU     20h
   820                                  devid_SPECIAL   EQU     10H
   821                                  devid_ISCLK     EQU     08h
   822                                  devid_ISNUL     EQU     04h
   823                                  devid_ISCOT     EQU     02h
   824                                  devid_ISCIN     EQU     01h
   825                                  
   826                                  devid_block_dev EQU     1Fh             ; mask for block device number
   827                                  
   828                                  ; 08/07/2018 - Retro DOS v3.0
   829                                  ; (PDB.INC, MSDOS 6.0, 1991)
   830                                  ; ----------------------------------------------------------------------------
   831                                  ; BREAK <Process data block>
   832                                  ;
   833                                  ;**	Process data block (otherwise known as program header)
   834                                  ;
   835                                  
   836                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
   837                                  ;	can be rearranged here, ever.  Reserved areas are probably safe
   838                                  ;	for use.
   839                                  
   840                                  FILPERPROC	EQU     20
   841                                  
   842                                  struc PDB	; Process_data_block
   843 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   844 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   845 00000004 ??                                      resb 1
   846 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   847 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   848 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   849 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   850 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   851 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   852 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   853 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   854 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
   855 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
   856 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
   857 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
   858 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
   859 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
   860 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
   861 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
   862 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   863 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
   864                                  				;  an extended FCB
   865                                  ;endstruc 	; MSDOS 3.3
   866                                  	  	; MSDOS 6.0
   867 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
   868 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
   869 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
   870 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
   871                                  endstruc
   872                                  
   873                                  ; BREAK <EXEC and EXE file structures>
   874                                  ;
   875                                  ; EXEC arg block - load/go program
   876                                  ;
   877                                  
   878                                  ;
   879                                  ; The following get used as arguments to the EXEC system call. They indicate
   880                                  ; whether or not the program is executed or whether or not a program header
   881                                  ; gets created.
   882                                  ;
   883                                  exec_func_no_execute    EQU 1           ; no execute bit
   884                                  exec_func_overlay       EQU 2           ; overlay bit
   885                                  
   886                                  struc EXEC0
   887 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
   888 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
   889 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
   890 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
   891                                  .size:
   892                                  endstruc
   893                                  
   894                                  struc EXEC1
   895 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
   896 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
   897 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
   898 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
   899 0000000E ????                    .SP:		resw 1		; stack pointer of program
   900 00000010 ????                    .SS:		resw 1		; stack seg register of program
   901 00000012 ????                    .IP:		resw 1		; entry point IP
   902 00000014 ????                    .CS:		resw 1		; entry point CS
   903                                  .size:
   904                                  endstruc
   905                                  
   906                                  struc EXEC3
   907 00000000 ????                    .load_addr:	resw 1		; seg address of load point
   908 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
   909                                  endstruc
   910                                  
   911                                  ; 02/08/2018 (MSDOS 6.0, EXEC.INC, 1991)
   912                                  ;**	Exit codes (in upper byte) for terminating programs
   913                                  
   914                                  EXIT_TERMINATE		EQU	0
   915                                  EXIT_ABORT		EQU	0
   916                                  EXIT_CTRL_C		EQU	1
   917                                  EXIT_HARD_ERROR 	EQU	2
   918                                  EXIT_KEEP_PROCESS	EQU	3
   919                                  
   920                                  ;
   921                                  ; EXE file header
   922                                  ;
   923                                  
   924                                  struc EXE
   925 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
   926 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
   927 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
   928 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
   929 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
   930 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
   931 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
   932 0000000E ????                    .SS:          resw 1		; stack of image
   933 00000010 ????                    .SP:          resw 1		; SP of image
   934 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
   935 00000014 ????                    .IP:          resw 1		; IP of entry
   936 00000016 ????                    .CS:          resw 1		; CS of entry
   937 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
   938 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
   939 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
   940                                  .size:
   941                                  endstruc
   942                                  
   943                                  exe_valid_signature     EQU 5A4Dh
   944                                  exe_valid_old_signature EQU 4D5Ah
   945                                  
   946                                  struc symbol_entry
   947 00000000 ????????                .value:	resd 1
   948 00000004 ????                    .type:	resw 1
   949 00000006 ??                      .len:	resb 1
   950 00000007 <res FFh>               .name:	resb 255
   951                                  endstruc
   952                                  
   953                                  ; 07/07/2018 - Retro DOS v3.0
   954                                  ; MSDOS 6.0 (SF.INC, 1991)
   955                                  ; ----------------------------------------------------------------------------
   956                                  ;**	SF.INC - System File Table
   957                                  ;
   958                                  ;   AN000   version 4.00   Jan. 1988
   959                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   960                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   961                                  
   962                                  ;**	System File Table SuperStructure
   963                                  ;
   964                                  ;	The system file table entries are allocated in contiguous groups.
   965                                  ;	There may be more than one such groups; the SF "superstructure"
   966                                  ;	tracks the groups.
   967                                  
   968                                  struc	SFT
   969 00000000 ????????                .SFLink:	resd 1
   970 00000004 ????                    .SFCount:	resw 1		; number of entries
   971 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   972                                  .size:
   973                                  endstruc
   974                                  
   975                                  ; 07/07/2018 - Retro DOS v3.0
   976                                  ; MSDOS 6.0 (SF.INC, 1991)
   977                                  
   978                                  ; ---------------------------------------------------------------------------
   979                                  ;**	System file table entry
   980                                  ;
   981                                  ;	These are the structures which are at SFTABLE in the SF structure.
   982                                  ; ---------------------------------------------------------------------------
   983                                  
   984                                  ; 25/04/2019 - Retro DOS v4.0
   985                                  ; 24/04/2019 - Retro DOS v3.2
   986                                  
   987                                  struc SF_ENTRY
   988 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   989                                  				;   if FCB then ref count
   990 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   991 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   992 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   993                                  				; Bit 15 = 1 if remote file
   994                                  				;	 = 0 if local file or device
   995                                  				; Bit 14 = 1 if date/time is not to be
   996                                  				;   set from clock at CLOSE.  Set by
   997                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   998                                  				;   other reseters of the dirty bit
   999                                  				;   (WRITE)
  1000                                  				; Bit 13 = Pipe bit (reserved)
  1001                                  				;
  1002                                  				; Bits 0-7 (old FCB_devid bits)
  1003                                  				; If remote file or local file, bit
  1004                                  				; 6=0 if dirty Device ID number, bits
  1005                                  				; 0-5 if local file.
  1006                                  				; bit 7=0 for local file, bit 7
  1007                                  				;      =1 for local I/O device
  1008                                  				; If local I/O device, bit 6=0 if EOF (input)
  1009                                  				;		Bit 5=1 if Raw mode
  1010                                  				;		Bit 0=1 if console input device
  1011                                  				;		Bit 1=1 if console output device
  1012                                  				;		Bit 2=1 if null device
  1013                                  				;		Bit 3=1 if clock device
  1014 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
  1015                                  				; to device header if local device,
  1016                                  				; points to net device header if
  1017                                  				; remote
  1018 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
  1019 0000000D ????                    .sf_time:	resw	1	; Time associated with file
  1020 0000000F ????                    .sf_date:	resw	1	; Date associated with file
  1021 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
  1022 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
  1023                                  
  1024                                  ; Starting here, the next 7 bytes may be used by the file system to store
  1025                                  ; an ID
  1026                                  
  1027                                  ; 09/07/2018 - Retro DOS v3.0
  1028                                  
  1029                                  ; MSDOS 3.3 SF.INC, 1987
  1030                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
  1031                                  ;.sf_lstclus	resw	1	; Last cluster accessed
  1032                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
  1033                                  ;				; for this file
  1034                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
  1035                                  
  1036                                  ; MSDOS 6.0, SF.INC, 1991
  1037 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
  1038 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
  1039                                  				; for this file
  1040 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
  1041                                  
  1042                                  ; End of 7 bytes of file-system specific info.
  1043                                  
  1044 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
  1045                                  				; directory entry.  This is used by
  1046                                  				; close to detect file deleted and
  1047                                  				; disk changed errors.
  1048                                  ; SHARING INFO
  1049 0000002B ????????                .sf_chain:	resd	1	; link to next SF
  1050 0000002F ????                    .sf_UID:	resw	1
  1051 00000031 ????                    .sf_PID:	resw	1
  1052 00000033 ????                    .sf_MFT:	resw	1
  1053                                  
  1054                                  ; MSDOS 6.0, SF.INC, 1991
  1055 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
  1056 00000037 ????????                .sf_IFS_HDR:	resd	1
  1057                                  
  1058                                  .size:
  1059                                  endstruc
  1060                                  
  1061                                  ; 20/07/2018
  1062                                  ; MSDOS 3.3, SF.INC, 1987
  1063                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
  1064                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
  1065                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
  1066                                  ; MSDOS 6.0, SF.INC, 1991
  1067                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
  1068                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
  1069                                  
  1070                                  ; 19/07/2018
  1071                                  
  1072                                  ; MSDOS 3.3, SF.INC, 1987
  1073                                  
  1074                                  sf_default_number  EQU	5
  1075                                  
  1076                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE. This is
  1077                                  ; because an INT 24 may prevent us from 'freeing' it. We mark this as such
  1078                                  ; by placing a -1 in the ref_count field.
  1079                                  
  1080                                  sf_busy EQU -1
  1081                                  
  1082                                  ; mode mask for FCB detection
  1083                                  sf_isFCB		EQU	1000000000000000B
  1084                                  
  1085                                  ; Flag word masks
  1086                                  sf_isnet		EQU	1000000000000000B
  1087                                  sf_close_nodate 	EQU	0100000000000000B
  1088                                  sf_pipe 		EQU	0010000000000000B
  1089                                  sf_no_inherit		EQU	0001000000000000B
  1090                                  sf_net_spool		EQU	0000100000000000B
  1091                                  
  1092                                  ; 19/04/2018
  1093                                  sf_entry_size equ SF_ENTRY.size ; 53
  1094                                  
  1095                                  ;                                                                          ;
  1096                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1097                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1098                                  
  1099                                  ; 09/07/2018 - Retro DOS v3.0
  1100                                  ; (ARENA.INC, MSDOS 3.3, 1987)
  1101                                  ; ----------------------------------------------------------------------------
  1102                                  ;BREAK <Memory arena structure>
  1103                                  
  1104                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1105                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1106                                  ;                                                                          ;
  1107                                  ;
  1108                                  ; arena item
  1109                                  ;
  1110                                  
  1111                                  struc ARENA
  1112 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1113 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1114 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1115                                  ; MSDOS 6.0
  1116 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1117 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1118                                  .headersize:			
  1119                                  endstruc
  1120                                  
  1121                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1122                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1123                                  ; Change them and change ALLOC.ASM.
  1124                                  
  1125                                  arena_owner_system  EQU 0               ; free block indication
  1126                                  
  1127                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1128                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1129                                  
  1130                                  ; 04/08/2018 - Retro DOS v3.0
  1131                                  ; (ARENA.INC, MSDOS 6.0, 1991)
  1132                                  
  1133                                  FIRST_FIT	EQU	00000000B
  1134                                  BEST_FIT	EQU	00000001B
  1135                                  LAST_FIT	EQU	00000010B
  1136                                  
  1137                                  ; MSDOS 6.0
  1138                                  ;LOW_FIRST	EQU	00000000B	; M001
  1139                                  ;HIGH_FIRST	EQU	10000000B	; M001
  1140                                  ;HIGH_ONLY	EQU	01000000B	; M001
  1141                                  
  1142                                  ;LINKSTATE	EQU	00000001B	; M002
  1143                                  
  1144                                  ;HF_MASK		EQU	~HIGH_FIRST	; M001
  1145                                  ;HO_MASK		EQU	~HIGH_ONLY	; M001
  1146                                  
  1147                                  ;STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1148                                  						; M026: used to mask of bits
  1149                                  						; M026: 6 & 7 of AllocMethod
  1150                                  ; 07/07/2018 - Retro DOS v3.0
  1151                                  ; (MI.INC, MSDOS 6.0, 1991)
  1152                                  ; ----------------------------------------------------------------------------
  1153                                  ;BREAK <Machine instruction, flag definitions and character types>
  1154                                  
  1155                                  mi_INT		EQU	0CDh
  1156                                  mi_Long_JMP	EQU	0EAh
  1157                                  mi_Long_CALL	EQU	09Ah
  1158                                  mi_Long_RET	EQU	0CBh
  1159                                  mi_Near_RET	EQU	0C3h
  1160                                  
  1161                                  ;			xxxxoditszxaxpxc
  1162                                  f_Overflow	EQU	0000100000000000B
  1163                                  f_Direction	EQU	0000010000000000B
  1164                                  f_Interrupt	EQU	0000001000000000B
  1165                                  f_Trace 	EQU	0000000100000000B
  1166                                  f_Sign		EQU	0000000010000000B
  1167                                  f_Zero		EQU	0000000001000000B
  1168                                  f_Aux		EQU	0000000000010000B
  1169                                  f_Parity	EQU	0000000000000100B
  1170                                  f_Carry 	EQU	0000000000000001B
  1171                                  
  1172                                  ; <Standard I/O assignments>
  1173                                  
  1174                                  stdin       EQU     0
  1175                                  stdout      EQU     1
  1176                                  stderr      EQU     2
  1177                                  stdaux      EQU     3
  1178                                  stdprn      EQU     4
  1179                                  
  1180                                  ; <Xenix subfunction assignments>
  1181                                  
  1182                                  open_for_read   EQU 0
  1183                                  open_for_write  EQU 1
  1184                                  open_for_both   EQU 2
  1185                                  
  1186                                  ; 13/07/2018 - Retro DOS v3.0
  1187                                  ; (FILEMODE.INC, MSDOS 6.0, 1991)
  1188                                  
  1189                                  access_mask	EQU 0Fh ; 09/08/2018
  1190                                  
  1191                                  EXEC_OPEN	EQU 3		; access code of 3 indicates that open was 
  1192                                  				; made from exec
  1193                                  SHARING_MASK	    equ 0F0h
  1194                                  SHARING_COMPAT	    equ 000h
  1195                                  SHARING_DENY_BOTH   equ 010h
  1196                                  SHARING_DENY_WRITE  equ 020h
  1197                                  SHARING_DENY_READ   equ 030h
  1198                                  SHARING_DENY_NONE   equ 040h
  1199                                  SHARING_NET_FCB     equ 070h
  1200                                  SHARING_NO_INHERIT  equ 080h
  1201                                  
  1202                                  ; 09/07/2018 - Retro DOS v3.0
  1203                                  ; (SYSCALL.INC, MSDOS 3.3, 1987)
  1204                                  ; ----------------------------------------------------------------------------
  1205                                  
  1206                                  ; <system call definitions>
  1207                                  
  1208                                  ABORT                           EQU 0   ;  0      0
  1209                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1210                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1211                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1212                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1213                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1214                                  RAW_CON_IO                      EQU 6   ;  6      6
  1215                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1216                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1217                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1218                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1219                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1220                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1221                                  DISK_RESET                      EQU 13  ; 13      D
  1222                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1223                                  FCB_OPEN                        EQU 15  ; 15      F
  1224                                  FCB_CLOSE                       EQU 16  ; 16     10
  1225                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1226                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1227                                  FCB_DELETE                      EQU 19  ; 19     13
  1228                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1229                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1230                                  FCB_CREATE                      EQU 22  ; 22     16
  1231                                  FCB_RENAME                      EQU 23  ; 23     17
  1232                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1233                                  SET_DMA                         EQU 26  ; 26     1A
  1234                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1235                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1236                                  ;                                                                          ;
  1237                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1238                                  ;                                                                          ;
  1239                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1240                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1241                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1242                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1243                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1244                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1245                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1246                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1247                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1248                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1249                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1250                                  GET_DATE                        EQU 42  ; 42     2A
  1251                                  SET_DATE                        EQU 43  ; 43     2B
  1252                                  GET_TIME                        EQU 44  ; 44     2C
  1253                                  SET_TIME                        EQU 45  ; 45     2D
  1254                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1255                                  ; Extended functionality group
  1256                                  GET_DMA                         EQU 47  ; 47     2F
  1257                                  GET_VERSION                     EQU 48  ; 48     30
  1258                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1259                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1260                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1261                                  ;                                                                          ;
  1262                                  GET_DPB                         EQU 50  ; 50     32
  1263                                  ;                                                                          ;
  1264                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1265                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1266                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1267                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1268                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1269                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1270                                  CHAR_OPER                       EQU 55  ; 55     37
  1271                                  INTERNATIONAL                   EQU 56  ; 56     38
  1272                                  ; XENIX CALLS
  1273                                  ;   Directory Group
  1274                                  MKDIR                           EQU 57  ; 57     39
  1275                                  RMDIR                           EQU 58  ; 58     3A
  1276                                  CHDIR                           EQU 59  ; 59     3B
  1277                                  ;   File Group
  1278                                  CREAT                           EQU 60  ; 60     3C
  1279                                  OPEN                            EQU 61  ; 61     3D
  1280                                  CLOSE                           EQU 62  ; 62     3E
  1281                                  READ                            EQU 63  ; 63     3F
  1282                                  WRITE                           EQU 64  ; 64     40
  1283                                  UNLINK                          EQU 65  ; 65     41
  1284                                  LSEEK                           EQU 66  ; 66     42
  1285                                  CHMOD                           EQU 67  ; 67     43
  1286                                  IOCTL                           EQU 68  ; 68     44
  1287                                  XDUP                            EQU 69  ; 69     45
  1288                                  XDUP2                           EQU 70  ; 70     46
  1289                                  CURRENT_DIR                     EQU 71  ; 71     47
  1290                                  ;    Memory Group
  1291                                  ALLOC                           EQU 72  ; 72     48
  1292                                  DEALLOC                         EQU 73  ; 73     49
  1293                                  SETBLOCK                        EQU 74  ; 74     4A
  1294                                  ;    Process Group
  1295                                  EXEC                            EQU 75  ; 75     4B
  1296                                  EXIT                            EQU 76  ; 76     4C
  1297                                  _WAIT				EQU 77  ; 77     4D
  1298                                  FIND_FIRST                      EQU 78  ; 78     4E
  1299                                  ;   Special Group
  1300                                  FIND_NEXT                       EQU 79  ; 79     4F
  1301                                  ; SPECIAL SYSTEM GROUP
  1302                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1303                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1304                                  ;                                                                          ;
  1305                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1306                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1307                                  GET_IN_VARS                     EQU 82  ; 82     52
  1308                                  SETDPB                          EQU 83  ; 83     53
  1309                                  ;                                                                          ;
  1310                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1311                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1312                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1313                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1314                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1315                                  ;                                                                          ;
  1316                                  DUP_PDB                         EQU 85  ; 85     55
  1317                                  ;                                                                          ;
  1318                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1319                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1320                                  RENAME                          EQU 86  ; 86     56
  1321                                  FILE_TIMES                      EQU 87  ; 87     57
  1322                                  ALLOCOPER			EQU 88	; 88	 58
  1323                                  ; Network extention system calls
  1324                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1325                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1326                                  CREATENEWFILE			EQU 91	; 91	 5B
  1327                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1328                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1329                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1330                                  ;									   ;
  1331                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1332                                  					;	    CloseByName, CloseUser,
  1333                                  					;	    CloseUserProcess,
  1334                                  					;	    GetOpenFileList
  1335                                  ;									   ;
  1336                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1337                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1338                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1339                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1340                                  XNAMETRANS			EQU 96	; 96	 60
  1341                                  PATHPARSE			EQU 97	; 97	 61
  1342                                  GETCURRENTPSP			EQU 98	; 98	 62
  1343                                  HONGEUL 			EQU 99	; 99	 63
  1344                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1345                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1346                                  ;									   ;
  1347                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1348                                  ;									   ;
  1349                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1350                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1351                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1352                                  GETSETCDPG			EQU 102 ; 102	 66
  1353                                  EXTHANDLE			EQU 103 ; 103	 67
  1354                                  COMMIT				EQU 104 ; 104	 68
  1355                                  
  1356                                  ; 09/07/2018 - Retro DOS v3.0
  1357                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1358                                  
  1359                                  ;GetSetMediaID			EQU 105 ; 105	 69
  1360                                  ;IFS_IOCTL			EQU 107 ; 107	 6B
  1361                                  ;ExtOpen 			EQU 108 ; 108	 6C
  1362                                  
  1363                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1364                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1365                                  ;                                                                          ;
  1366                                  ;ifdef ROMEXEC
  1367                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1368                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1369                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1370                                  ;endif
  1371                                  ;                                                                          ;
  1372                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1373                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1374                                  
  1375                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1376                                  ;OEM_C1				EQU 249 ; 249    F9
  1377                                  ;OEM_C2				EQU 250 ; 250    FA
  1378                                  ;OEM_C3				EQU 251 ; 251    FB
  1379                                  ;OEM_C4				EQU 252 ; 252    FC
  1380                                  ;OEM_C5				EQU 253 ; 253    FD
  1381                                  ;OEM_C6				EQU 254 ; 254    FE
  1382                                  ;OEM_C7				EQU 255 ; 255    FF
  1383                                  
  1384                                  ;============================================================================
  1385                                  ; VERSIONA.INC (MSDOS 3.3, 24/07/1987)
  1386                                  ;============================================================================
  1387                                  ; 08/07/2018 - Retro DOS 3.0
  1388                                  
  1389                                  MAJOR_VERSION   EQU     3
  1390                                  MINOR_VERSION   EQU     30
  1391                                  
  1392                                  ;============================================================================
  1393                                  ; DOSSYM_V211.ASM (-*-)
  1394                                  ;============================================================================
  1395                                  
  1396                                  ;DOS_MAJOR_VERSION   EQU      2
  1397                                  ;DOS_MINOR_VERSION   EQU     11
  1398                                  
  1399                                  ;============================================================================
  1400                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1401                                  ;============================================================================
  1402                                  ; 09/07/2018 - Retro DOS 3.0
  1403                                  
  1404                                  ;
  1405                                  ; Current structure of the data returned by the international call
  1406                                  ;
  1407                                  
  1408                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1409                                  .Date_tim_format:
  1410 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1411                                  .Currency_sym:
  1412 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1413                                  .Thous_sep:
  1414 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1415                                  .Decimal_sep:
  1416 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1417                                  .Date_sep:
  1418 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1419                                  .Time_sep:
  1420 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1421                                  .Bit_field:	
  1422 0000000F ??                      		RESB 1		; Bit values
  1423                                                                     ;   Bit 0 = 0 if currency symbol first
  1424                                                                     ;         = 1 if currency symbol last
  1425                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1426                                                                     ;         = 1 if space after currency symbol
  1427                                  .Currency_cents:
  1428 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1429                                  .Time_24:
  1430 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1431                                  .Map_call:
  1432 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1433 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1434                                  				;  in pieces.
  1435                                  .Data_sep:
  1436 00000016 ????                    		RESB	2	; Data list separator character
  1437                                  .size:		
  1438                                  endstruc
  1439                                  
  1440                                  ;
  1441                                  ; Max size of the block returned by the INTERNATIONAL call
  1442                                  ;
  1443                                  internat_block_max	EQU	32
  1444                                  
  1445                                  ;============================================================================
  1446                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1447                                  ;============================================================================
  1448                                  ; 08/07/2018 - Retro DOS v3.0
  1449                                  
  1450                                  ;SysInitVars STRUC
  1451                                  struc SYSI
  1452 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1453 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1454 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1455 0000000C ????????                .CON:	    resd 1		; CON device
  1456 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1457 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1458 00000016 ????????                .CDS:	    resd 1		; CDS list
  1459 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1460 0000001E ????                    .Keep:	    resw 1		; keep count
  1461 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1462 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1463 00000022 ????????                .DEV:	    resd 1		; device list
  1464                                  ; 09/07/2018
  1465                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1466                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1467 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1468 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1469 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1470 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1471 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splices being done
  1472 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1473 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1474 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1475 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1476 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1477 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1478 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1479                                  endstruc
  1480                                  ;SysInitVars ENDS
  1481                                  
  1482                                  ;This is added for more information exchange between DOS, BIOS.
  1483                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1484                                  
  1485                                  ;SysInitVars_Ext struc
  1486                                  struc SYSI_EXT
  1487 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1488 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1489                                  endstruc
  1490                                  ;SysInitVars_Ext ends
  1491                                  
  1492                                  ;============================================================================
  1493                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1494                                  ;============================================================================
  1495                                  ; 09/07/2018 - Retro DOS v3.0
  1496                                  
  1497                                  ;*** J.K.
  1498                                  ;General Guide -
  1499                                  ;Category Code:
  1500                                  ; 0... .... DOS Defined
  1501                                  ; 1... .... User defined
  1502                                  ; .xxx xxxx Code
  1503                                  
  1504                                  ;Function Code:
  1505                                  ; 0... .... Return error if unsupported
  1506                                  ; 1... .... Ignore if unsupported
  1507                                  ; .0.. .... Intercepted by DOS
  1508                                  ; .1.. .... Passed to driver
  1509                                  ; ..0. .... Sends data/commands to device
  1510                                  ; ..1. .... Quries data/info from device
  1511                                  ; ...x .... Subfunction
  1512                                  ;
  1513                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1514                                  ; function set.  It plays no critical role; some functions may contain both
  1515                                  ; command and query elements. The convention is that such commands are
  1516                                  ; defined as "sends data".
  1517                                  
  1518                                  ;*****************************;*
  1519                                  ; BLOCK DRIVERS 	      ;*
  1520                                  ;*****************************;*
  1521                                  
  1522                                  ; IOCTL SUB-FUNCTIONS
  1523                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1524                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1525                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1526                                  IOCTL_READ_HANDLE	EQU	2
  1527                                  IOCTL_WRITE_HANDLE	EQU	3
  1528                                  IOCTL_READ_DRIVE	EQU	4
  1529                                  IOCTL_WRITE_DRIVE	EQU	5
  1530                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1531                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1532                                  IOCTL_CHANGEABLE?	EQU	8
  1533                                  IOCTL_DeviceLocOrRem?	EQU	9
  1534                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1535                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1536                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1537                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1538                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1539                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1540                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1541                                  ; (MSDOS 6.0)
  1542                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1543                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1544                                  
  1545                                  ; GENERIC IOCTL CATEGORY CODES
  1546                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1547                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1548                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1549                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1550                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1551                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1552                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1553                                  
  1554                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1555                                  RAWIO			EQU	8
  1556                                  
  1557                                  ; RAWIO SUB-FUNCTIONS
  1558                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1559                                  GET_DEVICE_PARAMETERS	EQU	60H
  1560                                  SET_DEVICE_PARAMETERS	EQU	40H
  1561                                  READ_TRACK		EQU	61H
  1562                                  WRITE_TRACK		EQU	41H
  1563                                  VERIFY_TRACK		EQU	62H
  1564                                  FORMAT_TRACK		EQU	42H
  1565                                  ; (MSDOS 6.0)
  1566                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1567                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1568                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1569                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1570                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1571                                  
  1572                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1573                                  BUILD_DEVICE_BPB	EQU	000000001B
  1574                                  
  1575                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1576                                  INSTALL_FAKE_BPB	EQU	000000001B
  1577                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1578                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1579                                  
  1580                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1581                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1582                                  STATUS_FOR_FORMAT	EQU	000000001B
  1583                                  ; (MSDOS 6.0)
  1584                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1585                                  
  1586                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1587                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1588                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1589                                  
  1590                                  ; DEVICETYPE VALUES
  1591                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1592                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1593                                  DEV_5INCH		EQU	0
  1594                                  DEV_5INCH96TPI		EQU	1
  1595                                  DEV_3INCH720KB		EQU	2
  1596                                  DEV_8INCHSS		EQU	3
  1597                                  DEV_8INCHDS		EQU	4
  1598                                  DEV_HARDDISK		EQU	5
  1599                                  DEV_OTHER		EQU	7
  1600                                  ; (MSDOS 6.0)
  1601                                  ;DEV_3INCH1440KB	EQU	7
  1602                                  DEV_3INCH2880KB		EQU	9
  1603                                  ; Retro DOS v2.0 - 26/03/2018
  1604                                  ;;DEV_TAPE		EQU	6
  1605                                  ;;DEV_ERIMO		EQU	8
  1606                                  ;DEV_3INCH2880KB	EQU	9
  1607                                  DEV_3INCH1440KB		EQU	10
  1608                                  
  1609                                  ; (MSDOS 3.3)
  1610                                  ;MAX_DEV_TYPE		EQU	7
  1611                                  
  1612                                  ; (MSDOS 6.0)
  1613                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1614                                  					; CURRENTLY SUPPORT.
  1615                                  
  1616                                  struc A_SECTORTABLE
  1617 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1618 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1619                                  .size:
  1620                                  endstruc
  1621                                  
  1622                                  ;============================================================================
  1623                                  ; DEVSYM.ASM
  1624                                  ;============================================================================
  1625                                  
  1626                                  ;SUBTTL DEVICE TABLE AND SRH DEFINITION
  1627                                  ;PAGE
  1628                                  
  1629                                  ; 07/07/2018 - Retro DOS v3.0
  1630                                  ; (DEVSYM.INC, MSDOS 6.0, 1991)
  1631                                  
  1632                                  ;**	DevSym.inc - Device Symbols
  1633                                  
  1634                                  ; The device table list has the form:
  1635                                  struc	SYSDEV
  1636 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1637 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1638 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1639 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1640 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1641                                  .size:
  1642                                  endstruc
  1643                                  
  1644                                  ;
  1645                                  ; ATTRIBUTE BIT MASKS
  1646                                  ;
  1647                                  ; CHARACTER DEVICES:
  1648                                  ;
  1649                                  ; BIT 15 -> MUST BE 1
  1650                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1651                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1652                                  ;     12 -> UNUSED
  1653                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1654                                  ;     10 -> MUST BE 0
  1655                                  ;      9 -> MUST BE 0
  1656                                  ;      8 -> UNUSED
  1657                                  ;      7 -> UNUSED
  1658                                  ;      6 -> UNUSED
  1659                                  ;      5 -> UNUSED
  1660                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1661                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1662                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1663                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1664                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1665                                  ;
  1666                                  ; BLOCK DEVICES:
  1667                                  ;
  1668                                  ; BIT 15 -> MUST BE 0
  1669                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1670                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1671                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1672                                  ;	    THE SAME PLACE.
  1673                                  ;     12 -> UNUSED
  1674                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1675                                  ;     10 -> MUST BE 0
  1676                                  ;      9 -> MUST BE 0
  1677                                  ;      8 -> UNUSED
  1678                                  ;      7 -> UNUSED
  1679                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1680                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1681                                  ;      5 -> UNUSED
  1682                                  ;      4 -> UNUSED
  1683                                  ;      3 -> UNUSED
  1684                                  ;      2 -> UNUSED
  1685                                  ;      1 -> UNUSED
  1686                                  ;      0 -> UNUSED
  1687                                  ;
  1688                                  
  1689                                  ;Attribute bit masks
  1690                                  DEVTYP  EQU     8000H           ;Bit 15 - 1  if Char, 0 if block
  1691                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1692                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1693                                  
  1694                                  ; 09/07/2018 - Retro DOS
  1695                                  ; (DEVSYM.INC, MSDOS 3.3, 1987) 
  1696                                  
  1697                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1698                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1699                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1700                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1701                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1702                                  				;  ENTRY POINTS, 0 IF NOT
  1703                                  
  1704                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1705                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1706                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1707                                  				;  ITS CURRENT FORM.
  1708                                  
  1709                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1710                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1711                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1712                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1713                                  
  1714                                  ; 18/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
  1715                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query M017
  1716                                  
  1717                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1718                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1719                                  				;LOGICAL DRIVES, AND SUPPORTS
  1720                                  				;GENERIC IOCTL CALLS.
  1721                                  				;FOR CHARACTER DEVICES, THIS
  1722                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1723                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1724                                  
  1725                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1726                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1727                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1728                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1729                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1730                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1731                                  ; 23/07/2019 - Retro DOS v3.2
  1732                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1733                                  				; (MSDOS 6.0, DEVSYM.INC, 1991)
  1734                                  
  1735                                  ;Static Reguest Header
  1736                                  struc	SRHEAD
  1737 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1738 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1739 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1740 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1741 00000005 ????????????????                	resb 8		;Reserved for queue links
  1742                                  .size:
  1743                                  endstruc
  1744                                  
  1745                                  ;Status word masks
  1746                                  STERR   EQU     8000H           ;Bit 15 - Error
  1747                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1748                                  STDON   EQU     0100H           ;Bit 8 - Done
  1749                                  STECODE EQU     00FFH           ;Error code
  1750                                  WRECODE EQU     0
  1751                                  
  1752                                  ;Function codes
  1753                                  DEVINIT EQU     0               ;Initialization
  1754                                  DINITHL EQU     26              ;Size of init header
  1755                                  DEVMDCH EQU     1               ;Media check
  1756                                  DMEDHL  EQU     15              ;Size of media check header
  1757                                  DEVBPB  EQU     2               ;Get BPB
  1758                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1759                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1760                                  DEVRD   EQU     4               ;Read
  1761                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1762                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1763                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1764                                  DEVIST  EQU     6               ;Input status
  1765                                  DSTATHL EQU     13              ;Size of status header
  1766                                  DEVIFL  EQU     7               ;Input flush
  1767                                  DFLSHL  EQU     15              ;Size of flush header
  1768                                  DEVWRT  EQU     8               ;Write
  1769                                  DEVWRTV EQU     9               ;Write with verify
  1770                                  DEVOST  EQU     10              ;Output status
  1771                                  DEVOFL  EQU     11              ;Output flush
  1772                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1773                                  
  1774                                  ; 09/07/2018 - Retro DOS v3.0
  1775                                  ; (DEVSYM.INC, MSDOS 3.3, 1987) 
  1776                                  
  1777                                  DEVOPN	EQU	13		;DEVICE OPEN
  1778                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1779                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1780                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1781                                  ; 07/08/2018 - Retro DOS v3.0
  1782                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1783                                  GENIOCTL EQU	19
  1784                                  
  1785                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1786                                  ;		     20
  1787                                  ;		     21
  1788                                  ;		     22
  1789                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1790                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1791                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1792                                  
  1793                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1794                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1795                                  
  1796                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1797                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1798                                  ;
  1799                                  
  1800                                  struc IOCTL_REQ
  1801 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1802                                  				; GENERIC IOCTL ADDITION.
  1803 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1804 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1805 0000000F ????                    .REG_SI:	resw 1
  1806 00000011 ????                    .REG_DI:	resw 1
  1807 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1808                                  .size: ; 07/08/2018
  1809                                  endstruc
  1810                                  
  1811                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1812                                  GEN_IOCTL_WRT_TRK EQU	40H
  1813                                  GEN_IOCTL_RD_TRK  EQU	60H
  1814                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1815                                  
  1816                                  ; 24/07/2019 - Retro DOS v3.2
  1817                                  
  1818                                  ;; 32-bit absolute read/write input list structure
  1819                                  
  1820                                  struc ABS_32RW
  1821 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1822 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1823 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1824                                  .size:
  1825                                  endstruc
  1826                                  
  1827                                  ;============================================================================
  1828                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1829                                  ;============================================================================
  1830                                  ; 16/07/2018 - Retro DOS v3.0 
  1831                                  
  1832                                  ;**	ERROR.INC - DOS Error Codes
  1833                                  ;
  1834                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1835                                  ;    return error codes through AX. If an error occurred then
  1836                                  ;    the carry bit will be set and the error code is in AX. If no error
  1837                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1838                                  ;
  1839                                  ;    Since the set of error codes is being extended as we extend the operating
  1840                                  ;    system, we have provided a means for applications to ask the system for a
  1841                                  ;    recommended course of action when they receive an error.
  1842                                  ;
  1843                                  ;    The GetExtendedError system call returns a universal error, an error
  1844                                  ;    location and a recommended course of action. The universal error code is
  1845                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1846                                  ;    is issued.
  1847                                  
  1848                                  
  1849                                  ;	2.0 error codes
  1850                                  
  1851                                  error_invalid_function		EQU	1
  1852                                  error_file_not_found		EQU	2
  1853                                  error_path_not_found		EQU	3
  1854                                  error_too_many_open_files	EQU	4
  1855                                  error_access_denied		EQU	5
  1856                                  error_invalid_handle		EQU	6
  1857                                  error_arena_trashed		EQU	7
  1858                                  error_not_enough_memory 	EQU	8
  1859                                  error_invalid_block		EQU	9
  1860                                  error_bad_environment		EQU	10
  1861                                  error_bad_format		EQU	11
  1862                                  error_invalid_access		EQU	12
  1863                                  error_invalid_data		EQU	13
  1864                                  ;**** reserved			EQU	14	; *****
  1865                                  error_invalid_drive		EQU	15
  1866                                  error_current_directory 	EQU	16
  1867                                  error_not_same_device		EQU	17
  1868                                  error_no_more_files		EQU	18
  1869                                  
  1870                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1871                                  
  1872                                  error_write_protect		EQU	19
  1873                                  error_bad_unit			EQU	20
  1874                                  error_not_ready 		EQU	21
  1875                                  error_bad_command		EQU	22
  1876                                  error_CRC			EQU	23
  1877                                  error_bad_length		EQU	24
  1878                                  error_seek			EQU	25
  1879                                  error_not_DOS_disk		EQU	26
  1880                                  error_sector_not_found		EQU	27
  1881                                  error_out_of_paper		EQU	28
  1882                                  error_write_fault		EQU	29
  1883                                  error_read_fault		EQU	30
  1884                                  error_gen_failure		EQU	31
  1885                                  
  1886                                  ;	the new 3.0 error codes reported through INT 24
  1887                                  
  1888                                  error_sharing_violation 	EQU	32
  1889                                  error_lock_violation		EQU	33
  1890                                  error_wrong_disk		EQU	34
  1891                                  error_FCB_unavailable		EQU	35
  1892                                  error_sharing_buffer_exceeded	EQU	36
  1893                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  1894                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  1895                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  1896                                  
  1897                                  ;	New OEM network-related errors are 50-79
  1898                                  
  1899                                  error_not_supported		EQU	50
  1900                                  
  1901                                  error_net_access_denied		EQU	65	;M028
  1902                                  
  1903                                  ;	End of INT 24 reportable errors
  1904                                  
  1905                                  error_file_exists		EQU	80
  1906                                  error_DUP_FCB			EQU	81	; *****
  1907                                  error_cannot_make		EQU	82
  1908                                  error_FAIL_I24			EQU	83
  1909                                  
  1910                                  ;	New 3.0 network related error codes
  1911                                  
  1912                                  error_out_of_structures 	EQU	84
  1913                                  error_already_assigned		EQU	85
  1914                                  error_invalid_password		EQU	86
  1915                                  error_invalid_parameter 	EQU	87
  1916                                  error_NET_write_fault		EQU	88
  1917                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  1918                                  
  1919                                  ;	BREAK <Interrupt 24 error codes>
  1920                                  
  1921                                  ;**	Int24 Error Codes
  1922                                  
  1923                                  error_I24_write_protect 	EQU	0
  1924                                  error_I24_bad_unit		EQU	1
  1925                                  error_I24_not_ready		EQU	2
  1926                                  error_I24_bad_command		EQU	3
  1927                                  error_I24_CRC			EQU	4
  1928                                  error_I24_bad_length		EQU	5
  1929                                  error_I24_Seek			EQU	6
  1930                                  error_I24_not_DOS_disk		EQU	7
  1931                                  error_I24_sector_not_found	EQU	8
  1932                                  error_I24_out_of_paper		EQU	9
  1933                                  error_I24_write_fault		EQU	0Ah
  1934                                  error_I24_read_fault		EQU	0Bh
  1935                                  error_I24_gen_failure		EQU	0Ch
  1936                                  ; NOTE: Code 0DH is used by MT-DOS.
  1937                                  error_I24_wrong_disk		EQU	0Fh
  1938                                  
  1939                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  1940                                  ;
  1941                                  ;	NOTE: ABORT is ALWAYS allowed
  1942                                  
  1943                                  Allowed_FAIL			EQU	00001000B
  1944                                  Allowed_RETRY			EQU	00010000B
  1945                                  Allowed_IGNORE			EQU	00100000B
  1946                                  
  1947                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  1948                                  I24_area			EQU	00000110B  ; 00 if DOS
  1949                                  						   ; 01 if FAT
  1950                                  						   ; 10 if root DIR
  1951                                  						   ; 11 if DATA
  1952                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  1953                                  
  1954                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  1955                                  
  1956                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  1957                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  1958                                  ;	to take for error codes that they don't explicitly understand.
  1959                                  
  1960                                  ;	Values for error CLASS
  1961                                  
  1962                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  1963                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  1964                                  errCLASS_Auth		EQU	3	; Permission problem
  1965                                  errCLASS_Intrn		EQU	4	; Internal System Error
  1966                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  1967                                  errCLASS_SysFail	EQU	6	; System Failure
  1968                                  errCLASS_Apperr 	EQU	7	; Application Error
  1969                                  errCLASS_NotFnd 	EQU	8	; Not Found
  1970                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  1971                                  errCLASS_Locked 	EQU	10	; Locked
  1972                                  errCLASS_Media		EQU	11	; Media Failure
  1973                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  1974                                  errCLASS_Unk		EQU	13	; Unknown/other
  1975                                  
  1976                                  ;	Values for error ACTION
  1977                                  
  1978                                  errACT_Retry		EQU	1	; Retry
  1979                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  1980                                  errACT_User		EQU	3	; Ask user to regive info
  1981                                  errACT_Abort		EQU	4	; abort with clean up
  1982                                  errACT_Panic		EQU	5	; abort immediately
  1983                                  errACT_Ignore		EQU	6	; ignore
  1984                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  1985                                  
  1986                                  ;	Values for error LOCUS
  1987                                  
  1988                                  errLOC_Unk		EQU	1	; No appropriate value
  1989                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  1990                                  errLOC_Net		EQU	3	; Network
  1991                                  errLOC_SerDev		EQU	4	; Serial Device
  1992                                  errLOC_Mem		EQU	5	; Memory
  1993                                  
  1994                                  ;============================================================================
  1995                                  ; MULT.INC (MSDOS 3.3, 1987)
  1996                                  ;============================================================================
  1997                                  
  1998                                  ;Break <Critical section and Multiplex channels>
  1999                                  
  2000                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2001                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2002                                  ;									   ;
  2003                                  ; Critical section definitions
  2004                                  ;
  2005                                  ; These below are subject to leave-all sections
  2006                                  critDisk    EQU     1			; Disk I/O critical section
  2007                                  critDevice  EQU     2			; Device I/O critical section
  2008                                  critShare   EQU     1			; Sharer I/O critical section
  2009                                  critMem     EQU     1			; memory maintenance critical section
  2010                                  critNet     EQU     5			; network critical section
  2011                                  critSFT     EQU     1			; sft table allocation
  2012                                  ; These below are not subject to leave-all sections
  2013                                  critASSIGN  EQU     8			; Assign has munged a system call
  2014                                  ;									   ;
  2015                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2016                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2017                                  
  2018                                  ;
  2019                                  ; The current set of defined multiplex channels is (* means documented):
  2020                                  ;
  2021                                  ;   Channel(h)	Issuer		Receiver    Function
  2022                                  ;      00	server		PSPRINT     print job control
  2023                                  ;     *01	print/apps	PRINT	    Queueing of files
  2024                                  ;      02	BIOS		REDIR	    signal open/close of printers
  2025                                  ;
  2026                                  ;      05	command 	REDIR	    obtain text of net int 24 message
  2027                                  ;     *06	server/assign	ASSIGN	    Install check
  2028                                  ;
  2029                                  ;      08	external driver IBMBIO	    interface to internal routines
  2030                                  ;
  2031                                  ;      10	sharer/server	Sharer	    install check
  2032                                  ;      11	DOS/server	Redir	    install check/redirection funcs
  2033                                  ;      12	sharer/redir	DOS	    dos functions and structure maint
  2034                                  ;      13	MSNET		MSNET	    movement of NCBs
  2035                                  ;      14	DOS		NLSFUNC     down load NLS country info,DOS 3.3
  2036                                  ;      14	Apps		Popup	    DOS 4.XX popup screen functions
  2037                                  ;	  ***> NOTE <***  Yes there are 2 users of 14h but since DOS 4.XX
  2038                                  ;			  doesn't use NLSFUNC, there is no conflict
  2039                                  ;      15	Apps		MSCDEX	    CD-ROM redirector interface
  2040                                  ;      16	Winoldap (?)	WIN386	    Private Windows communication
  2041                                  ;      17	Winoldap (?)	WIN386	    Win386 clipboard interface
  2042                                  ;      18	Apps		MS-Manager  Toggle interface to manager
  2043                                  ;      19,(13h) external driver IBMBIO	    Reset_Int_13, allows installation
  2044                                  ;					    of alternative INT_13 drivers after
  2045                                  ;					    boot_up
  2046                                  ;      B0	GRAFTABL	GRAFTABL
  2047                                  ;
  2048                                  
  2049                                  MultSHARE   EQU     10h 		; sharer
  2050                                      ;	1   MFT_enter
  2051                                      ;	2   MFTClose
  2052                                      ;	3   MFTclU
  2053                                      ;	4   MFTCloseP
  2054                                      ;	5   MFTCloN
  2055                                      ;	6   set_block
  2056                                      ;	7   clr_block
  2057                                      ;	8   chk_block
  2058                                      ;	9   MFT_get
  2059                                      ;	10  ShSave
  2060                                      ;	11  ShChk
  2061                                      ;	12  ShCol
  2062                                      ;	13  ShCloseFile
  2063                                  
  2064                                  MultNET     EQU     11h 		; Network support
  2065                                      ;	1   NET_RMDIR
  2066                                      ;	2   NET_SEQ_RMDIR
  2067                                      ;	3   NET_MKDIR
  2068                                      ;	4   NET_SEQ_MKDIR
  2069                                      ;	5   NET_CHDIR
  2070                                      ;	6   NET_CLOSE
  2071                                      ;	7   NET_COMMIT
  2072                                      ;	8   NET_READ
  2073                                      ;	9   NET_WRITE
  2074                                      ;	10  NET_LOCK
  2075                                      ;	11  NET_UNLOCK
  2076                                      ;	12  NET_DISK_INFO
  2077                                      ;	13  NET_SET_FILE_ATTRIBUTE
  2078                                      ;	14  NET_SEQ_SET_FILE_ATTRIBUTE
  2079                                      ;	15  NET_GET_FILE_INFO
  2080                                      ;	16  NET_SEQ_GET_FILE_INFO
  2081                                      ;	17  NET_RENAME
  2082                                      ;	18  NET_SEQ_RENAME
  2083                                      ;	19  NET_DELETE
  2084                                      ;	20  NET_SEQ_DELETE
  2085                                      ;	21  NET_OPEN
  2086                                      ;	22  NET_SEQ_OPEN
  2087                                      ;	23  NET_CREATE
  2088                                      ;	24  NET_SEQ_CREATE
  2089                                      ;	25  NET_SEQ_SEARCH_FIRST
  2090                                      ;	26  NET_SEQ_SEARCH_NEXT
  2091                                      ;	27  NET_SEARCH_FIRST
  2092                                      ;	28  NET_SEARCH_NEXT
  2093                                      ;	29  NET_ABORT
  2094                                      ;	30  NET_ASSOPER
  2095                                      ;	31  Printer_SET_STRING
  2096                                      ;	32  NetFlushBuf
  2097                                      ;	33  NetBufWrite
  2098                                      ;	34  NetResetEnvironment
  2099                                      ;	35  NetSpoolCheck
  2100                                      ;	36  NetSpoolClose
  2101                                  
  2102                                  MultDOS     EQU     12h 		; DOS call back
  2103                                      ;	1   DOS_CLOSE
  2104                                      ;	2   RECSET
  2105                                      ;	3   Get DOSGROUP
  2106                                      ;	4   PATHCHRCMP
  2107                                      ;	5   OUT
  2108                                      ;	6   NET_I24_ENTRY
  2109                                      ;	7   PLACEBUF
  2110                                      ;	8   FREE_SFT
  2111                                      ;	9   BUFWRITE
  2112                                      ;	10  SHARE_VIOLATION
  2113                                      ;	11  SHARE_ERROR
  2114                                      ;	12  SET_SFT_MODE
  2115                                      ;	13  DATE16
  2116                                      ;	14  SETVISIT
  2117                                      ;	15  SCANPLACE
  2118                                      ;	16  SKIPVISIT
  2119                                      ;	17  StrCpy
  2120                                      ;	18  StrLen
  2121                                      ;	19  UCase
  2122                                      ;	20  POINTCOMP
  2123                                      ;	21  CHECKFLUSH
  2124                                      ;	22  SFFromSFN
  2125                                      ;	23  GetCDSFromDrv
  2126                                      ;	24  Get_User_Stack
  2127                                      ;	25  GetThisDrv
  2128                                      ;	26  DriveFromText
  2129                                      ;	27  SETYEAR
  2130                                      ;	28  DSUM
  2131                                      ;	29  DSLIDE
  2132                                      ;	30  StrCmp
  2133                                      ;	31  initcds
  2134                                      ;	32  pjfnfromhandle
  2135                                      ;	33  $NameTrans
  2136                                      ;	34  CAL_LK
  2137                                      ;	35  DEVNAME
  2138                                      ;	36  Idle
  2139                                      ;
  2140                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2141                                      ;	0   NLSInstall
  2142                                      ;	1   ChgCodePage
  2143                                      ;	2   GetExtInfo
  2144                                      ;	3   SetCodePage
  2145                                      ;	4   GetCntry
  2146                                      ;
  2147                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2148                                  ;	  it calls Multdos 42 to set up an entry routine address
  2149                                      ;	0   Install status  (reserved)
  2150                                      ;	1   Lookup
  2151                                      ;	2   Insert
  2152                                      ;	3   Delete
  2153                                      ;	4   Purge	    (reserved)
  2154                                  
  2155                                  ;============================================================================
  2156                                  ; FIND.INC (MSDOS 3.3, 1987)
  2157                                  ;============================================================================
  2158                                  ; 09/07/2018 - Retro DOS v3.0
  2159                                  
  2160                                  ;Break	<find first/next buffer>
  2161                                  
  2162                                  struc find_buf
  2163 00000000 ??                      .drive:	    resb 1		; drive of search
  2164 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2165 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2166 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2167 0000000F ????                    .DirStart:  resw 1		; DirStart
  2168 00000011 ??                      .attr:	    resb 1		; attribute found
  2169 00000012 ????                    .time:	    resw 1		; time
  2170 00000014 ????                    .date:	    resw 1		; date
  2171 00000016 ????                    .size_l:    resw 1		; low(size)
  2172 00000018 ????                    .size_h:    resw 1		; high(size)
  2173 0000001A <res Dh>                .pname:	    resb 13		; packed name
  2174                                  .size:
  2175                                  endstruc
  2176                                  
  2177                                  ;============================================================================
  2178                                  ; DOSCNTRY.INC (MSDOS 3.3, 1987)
  2179                                  ;============================================================================
  2180                                  ; 09/07/2018 - Retro DOS v3.0
  2181                                  
  2182                                  ;Equates for COUNTRY INFORMATION.
  2183                                  SetCountryInfo	EQU	1	;country info
  2184                                  SetUcase	EQU	2	;uppercase table
  2185                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2186                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2187                                  SetFileList	EQU	5	;valid file character list
  2188                                  SetCollate	EQU	6	;collating sequence
  2189                                  SetDBCS 	EQU	7	;double byte character set
  2190                                  SetALL		EQU	-1	;all the entries
  2191                                  
  2192                                  
  2193                                  ;DOS country and code page information table structure.
  2194                                  ;Internally, IBMDOS gives a pointer to this table.
  2195                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2196                                  ;this structure.
  2197                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2198 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2199 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2200 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2201 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 5)
  2202 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2203 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2204                                  
  2205 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2206 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2207                                  
  2208 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2209 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2210                                  
  2211 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2212 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2213                                  
  2214 00000060 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2215 00000061 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2216 00000063 ????                    .ccDosCountry:		resw 1	;system country code id
  2217 00000065 ????                    .ccDosCodePage:		resw 1	;system code page id
  2218 00000067 ????                    .ccDFormat:		resw 1	;date format
  2219 00000069 ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2220 0000006E ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2221 00000070 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2222 00000072 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2223 00000074 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2224 00000076 ??                      .ccCFormat:		resb 1	;currency format flags
  2225 00000077 ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2226 00000078 ??                      .ccTFormat:		resb 1	;time format
  2227 00000079 ????????                .ccMono_Ptr:		resd 1	;monocase routine entry point
  2228 0000007D ????                    .ccListSep:		resb 2	;data list separator
  2229 0000007F <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2230                                  .size:
  2231                                  endstruc
  2232                                  
  2233                                  ;Ucase table
  2234                                  struc CC_UCASE_TAB
  2235 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2236 00000002 <res 80h>               .ccUcase_data:		resb 128
  2237                                  endstruc
  2238                                  
  2239                                  ;File Ucase table
  2240                                  struc CC_FILE_UCASE_TAB
  2241 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2242 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2243                                  endstruc
  2244                                  
  2245                                  ;File char list
  2246                                  struc CC_FILE_CHAR_TAB
  2247 00000000 ????                    .ccFilechar_leng:	resw 1
  2248 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2249                                  endstruc
  2250                                  
  2251                                  ;collate table
  2252                                  struc CC_COLLATE_TAB
  2253 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2254 00000002 <res 100h>              .ccCollate_data:	resb 256
  2255                                  endstruc
  2256                                  
  2257                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2258                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) 
  2259                                  
  2260                                  ; 06/08/2018
  2261                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2262                                  
  2263                                  ;CAPITALIZATION equates
  2264                                  CAP_ONE_CHAR	equ	20H
  2265                                  CAP_STRING	equ	21H
  2266                                  CAP_ASCIIZ	equ	22H
  2267                                  CHECK_YES_NO	equ	23H
  2268                                  UPPER_TABLE	equ	80H
  2269                                  
  2270                                  ;NLS_YES	equ	59H  ; 'Y'
  2271                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2272                                  ;NLS_NO		equ	4EH  ; 'N'	
  2273                                  ;NLS_no2	equ	6EH  ; 'n'	
  2274                                  
  2275                                  ;============================================================================
  2276                                  ; CURDIR.INC (MSDOS 3.3, 1987)
  2277                                  ;============================================================================
  2278                                  ; 09/07/2018 - Retro DOS v3.0
  2279                                  
  2280                                  ;BREAK <Current directory list structure>
  2281                                  
  2282                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2283                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2284                                  ;									   ;
  2285                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2286                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2287                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2288                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2289                                  ; of the disk being changed or if the path must be recracked.  The END	   ;
  2290                                  ; field is the location of the end of the definition.  No .. is allowed    ;
  2291                                  ; past this point							   ;
  2292                                  
  2293                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2294                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2295                                  
  2296                                  struc curdir	; curdir_list
  2297 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2298 00000043 ????                    .flags:		resw 1			; various flags
  2299 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2300 00000049 ????                    .ID:		resw 1			; cluster of current dir (net ID)
  2301 0000004B ????                    		resw 1
  2302 0000004D ????                    .user_word:	resw 1
  2303 0000004F ????                    .end:		resw 1			; end of assignment
  2304                                  .size:
  2305                                  endstruc
  2306                                  
  2307                                  curdirLen	EQU curdir.size		; Needed for screwed up
  2308                                  
  2309                                  %define curdir_netID curdir_ID  ; dword
  2310                                  
  2311                                  ;Flag word masks
  2312                                  curdir_isnet	EQU	1000000000000000B
  2313                                  curdir_inuse	EQU	0100000000000000B
  2314                                  curdir_splice	EQU	0010000000000000B
  2315                                  curdir_local	EQU	0001000000000000B
  2316                                  ;									   ;
  2317                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2318                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2319                                  
  2320                                  ;============================================================================
  2321                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2322                                  ;============================================================================
  2323                                  ; 09/07/2018 - Retro DOS v3.0
  2324                                  
  2325                                  ;BREAK <File Control Block definition>
  2326                                  
  2327                                  ;
  2328                                  ; Field definition for FCBs
  2329                                  ; The FCB has the following structure:
  2330                                  ;
  2331                                  ;	+---------------------------+
  2332                                  ;	|   Drive indicator(byte)   |
  2333                                  ;	+---------------------------+
  2334                                  ;	|    Filename (8 chars)     |
  2335                                  ;	+---------------------------+
  2336                                  ;	|    Extension (3 chars)    |
  2337                                  ;	+---------------------------+
  2338                                  ;	|   Current Extent(word)    |
  2339                                  ;	+---------------------------+
  2340                                  ;	|    Record size (word)     |
  2341                                  ;	+---------------------------+
  2342                                  ;	|    File Size (2 words)    |
  2343                                  ;	+---------------------------+
  2344                                  ;	|	Date of write	    |
  2345                                  ;	+---------------------------+
  2346                                  ;	|	Time of write	    |
  2347                                  ;	+---------------------------+
  2348                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2349                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2350                                  ;									   ;
  2351                                  ;	+---------------------------+
  2352                                  ;	|   8 bytes reserved	    |
  2353                                  ;	+---------------------------+
  2354                                  ;									   ;
  2355                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2356                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2357                                  ;	|    next record number     |
  2358                                  ;	+---------------------------+
  2359                                  ;	|   random record number    |
  2360                                  ;	+---------------------------+
  2361                                  ;
  2362                                  
  2363                                  struc	SYS_FCB
  2364 00000000 ??                      .drive:	resb 1
  2365 00000001 ????????????????        .name:	resb 8
  2366 00000009 ??????                  .ext:	resb 3
  2367 0000000C ????                    .EXTENT: resw 1
  2368 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2369 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2370                                  				; following word
  2371 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2372 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2373 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2374                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2375                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2376                                  ;									   ;
  2377 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2378                                  ;									   ;
  2379                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2380                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2381 00000020 ??                      .NR:	resb 1			; Next record
  2382 00000021 ????????                .RR:	resb 4			; Random record
  2383                                  endstruc
  2384                                  
  2385                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2386                                  				; NEXT
  2387                                  ; 20/07/2018
  2388                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2389                                  
  2390                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2391                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2392                                  ; NOTE about this byte (fcb_nsl_drive)
  2393                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2394                                  ;	00 means a local file or device with sharing loaded
  2395                                  ;	10 means a remote (network) file
  2396                                  ;	01 means a local file with no sharing loaded
  2397                                  ;	11 means a local device with no sharing loaded
  2398                                  
  2399                                  ; 20/07/2018
  2400                                  
  2401                                  ;
  2402                                  ; Network FCB
  2403                                  ;
  2404                                  
  2405                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2406                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2407                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2408                                  
  2409                                  ;
  2410                                  ; No sharing local file FCB
  2411                                  ;
  2412                                  
  2413                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2414                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2415                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2416                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2417                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2418                                  
  2419                                  ;
  2420                                  ; No sharing local device FCB
  2421                                  ;
  2422                                  
  2423                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2424                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2425                                  
  2426                                  ;
  2427                                  ; Sharing local FCB
  2428                                  ;
  2429                                  
  2430                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2431                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2432                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2433                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2434                                  
  2435                                  ;
  2436                                  ; Bogusness:  the four cases are:
  2437                                  ;
  2438                                  ;   local file	    00
  2439                                  ;   local device    40
  2440                                  ;   local sharing   C0
  2441                                  ;   network	    80
  2442                                  ;
  2443                                  ; Since sharing and network collide, we cannot use a test instruction for
  2444                                  ; deciding whether a network or a share check in involved
  2445                                  ;
  2446                                  FCBDEVICE   EQU 040h
  2447                                  FCBNETWORK  EQU 080h
  2448                                  FCBSHARE    EQU 0C0h
  2449                                  
  2450                                  ; FCBSPECIAL must be able to mask off both net and share
  2451                                  FCBSPECIAL  EQU 080h
  2452                                  FCBMASK     EQU 0C0h
  2453                                  
  2454                                  ;============================================================================
  2455                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2456                                  ;============================================================================
  2457                                  ; 11/07/2018 - Retro DOS v3.0
  2458                                  
  2459                                  ; 22/07/2019 - Retro DOS v3.2
  2460                                  
  2461                                  struc	FEI	; FASTOPEN_EXTENDED_INFO
  2462 00000000 ??                      .dirpos:	resb 1
  2463 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2464                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2465 00000005 ????                    .clusnum:	resw 1
  2466 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2467 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2468                                  .size:
  2469                                  endstruc
  2470                                  
  2471                                  ; 23/07/2018
  2472                                  ;FASTOPEN NAME CACHING Subfunctions
  2473                                  FONC_Look_up	equ	1
  2474                                  FONC_insert	equ	2
  2475                                  FONC_delete	equ	3
  2476                                  FONC_update	equ	4
  2477                                  FONC_purge	equ	5	;reserved for the future use.
  2478                                  FONC_Rename	equ	6	;AN001
  2479                                  
  2480                                  ; 27/07/2018
  2481                                  ;FastOpen Data Structure
  2482                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2483 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2484 00000002 ????????                .name_caching:	resd 1
  2485                                  ; MSDOS 6.0
  2486                                  ;.fatchain_caching: resd 1	;reserved for future use
  2487                                  .size:
  2488                                  endstruc
  2489                                  
  2490                                  ; 27/07/2018
  2491                                  ;Equates used in DOS.
  2492                                  FastOpen_Set	       equ     00000001b
  2493                                  FastOpen_Reset	       equ     11111110b
  2494                                  Lookup_Success	       equ     00000010b
  2495                                  Lookup_Reset	       equ     11111101b
  2496                                  Special_Fill_Set       equ     00000100b
  2497                                  Special_Fill_Reset     equ     11111011b
  2498                                  No_Lookup	       equ     00001000b
  2499                                  Set_For_Search	       equ     00010000b	;DCR 167
  2500                                  
  2501                                  ; 09/08/2018 
  2502                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2503                                  ; Fastxxx equates
  2504                                  FastOpen_ID	   equ	   1
  2505                                  FastSeek_ID	   equ	   2
  2506                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2507                                  
  2508                                  ;Structure definitions
  2509                                  ;
  2510                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2511 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2512 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2513                                  endstruc
  2514                                  
  2515                                  ;============================================================================
  2516                                  ; LOCK.INC, MSDOS 6.0, 1991
  2517                                  ;============================================================================
  2518                                  ; 14/07/2018 - Retro DOS v3.0
  2519                                  
  2520                                  ;**	LOCK.INC - Definitions for Record Locking
  2521                                  
  2522                                  ;**	LOCK functions
  2523                                  
  2524                                  LOCK_ALL	    equ    0
  2525                                  UNLOCK_ALL	    equ    1
  2526                                  LOCK_MUL_RANGE	    equ    2
  2527                                  UNLOCK_MUL_RANGE    equ    3
  2528                                  LOCK_READ	    equ    4
  2529                                  WRITE_UNLOCK	    equ    5
  2530                                  LOCK_ADD	    equ    6
  2531                                  
  2532                                  ;**	Structure for Lock buffer
  2533                                  
  2534                                  struc LockBuf
  2535 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2536 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2537                                  endstruc
  2538                                  
  2539                                  ;============================================================================
  2540                                  ; DPL.ASM, MSDOS 6.0, 1991
  2541                                  ;============================================================================
  2542                                  ; 04/08/2018 - Retro DOS v3.0
  2543                                  
  2544                                  ; (SRVCALL.ASM)
  2545                                  
  2546                                  struc DPL
  2547 00000000 ????                    .AX:	resw	1	; AX register
  2548 00000002 ????                    .BX:	resw	1	; BX register
  2549 00000004 ????                    .CX:	resw	1	; CX register
  2550 00000006 ????                    .DX:	resw	1	; DX register
  2551 00000008 ????                    .SI:	resw	1	; SI register
  2552 0000000A ????                    .DI:	resw	1	; DI register
  2553 0000000C ????                    .DS:	resw	1	; DS register
  2554 0000000E ????                    .ES:	resw	1	; ES register
  2555 00000010 ????                    .rsrvd: resw	1	; Reserved
  2556 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2557 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2558                                  .size:
  2559                                  endstruc
  2560                                   
  2561                                  ;============================================================================
  2562                                  ; MSDATA.ASM
  2563                                  ;============================================================================
  2564                                  ;============================================================================
  2565                                  ; MS_DATA.ASM (MSDOS 6.0, 1991) (1)
  2566                                  ;============================================================================
  2567                                  ; 16/07/2018 - Retro DOS 3.0	
  2568                                  
  2569                                  ;Break <Uninitialized data overlayed by initialization code>
  2570                                  
  2571                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
  2572                                  ; Init code overlaps with data area below
  2573                                  
  2574                                  		; Offset 0358h in IBMDOS.COM (MSDOS 3.3)
  2575                                  
  2576                                  ;	I_am    TIMEBUF,6               ; Time read from clock device
  2577                                  ;	I_am    DEVIOBUF,2              ; Buffer for I/O under file assignment
  2578                                  
  2579                                  TIMEBUF		EQU 	DATASEGMENT	; Offset 0358h (in IBMDOS.COM 3.3)
  2580                                  DEVIOBUF	EQU	TIMEBUF+6
  2581                                  ;
  2582                                  ; The following areas are used as temp buffer in EXEC system call
  2583                                  ;
  2584                                  ;       I_am    OPENBUF,128             ; buffer for name operations
  2585                                  ;       I_am    RenBuf,128              ; buffer for rename destination
  2586                                  
  2587                                  OPENBUF		EQU	DEVIOBUF+2	; DATASEGMENT+8 
  2588                                  RENBUF		EQU	OPENBUF+128	; DATASEGMENT+136
  2589                                  
  2590                                  ; Buffer for search calls
  2591                                  ;        I_am    SEARCHBUF,53		; internal search buffer
  2592                                  ;        I_am    DummyCDS,curdirLen
  2593                                  
  2594                                  SEARCHBUF	EQU	RENBUF+128	; DATASEGMENT+264
  2595                                  DUMMYCDS	EQU	SEARCHBUF+53	; DATASEGMENT+317 
  2596                                  						; Offset 495h in MSDOS 3.3
  2597                                  ;
  2598                                  ; End of contiguous buffer
  2599                                  ;
  2600                                  
  2601                                  ; Temporary directory entry for use by many routines. Device directory
  2602                                  ; entries (bogus) are built here.
  2603                                  ;
  2604                                  ;        PUBLIC  DevFCB
  2605                                  ;DEVFCB  LABEL   BYTE                    ; Uses NAME1, NAME2, combined
  2606                                  ; WARNING.. do not alter position of NAME1 relative to DEVFCB
  2607                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
  2608                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
  2609                                  
  2610                                  DEVFCB		EQU	DUMMYCDS+curdirLen ; DATASEGMENT+398
  2611                                  
  2612                                  ;	I_am    NAME1,12                ; File name buffer
  2613                                  ;       I_am    NAME2,13                ;
  2614                                  ;	I_am    DESTSTART,WORD          ;
  2615                                  ;	DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
  2616                                  
  2617                                  NAME1		EQU	DEVFCB		; Offset 04E6h in IBMDOS.COM 3.3
  2618                                  NAME2		EQU	NAME1+12	; DATASEGMENT+410
  2619                                  DESTSTART	EQU	NAME2+13	; DATASEGMENT+423
  2620                                  
  2621                                  ;
  2622                                  ; End Temporary directory entry.
  2623                                  ;
  2624                                  
  2625                                  ;       I_am    ATTRIB,BYTE             ; storage for file attributes
  2626                                  ;	I_am    EXTFCB,BYTE             ; TRUE => extended FCB in use
  2627                                  
  2628                                  ATTRIB		EQU	DEVFCB + dir_entry.size ; Offset 0506h
  2629                                  	; Offset 0507h in IBMDOS.COM (MSDOS 3.3) 
  2630                                  EXTFCB		EQU	ATTRIB+1	; DATASEGMENT+431
  2631                                  
  2632                                  ;       I_am    SATTRIB,BYTE            ; Storage for search attributes
  2633                                  ;       I_AM    open_access,BYTE        ; access of open system call
  2634                                  ;       I_am    FoundDel,BYTE           ; true => file was deleted
  2635                                  ;       I_am    Found_dev,BYTE          ; true => search found a device
  2636                                  ;       I_am    fSplice,BYTE            ; true => do a splice in transpath
  2637                                  ;       I_am    fSharing,BYTE           ; TRUE => no redirection
  2638                                  ;       I_am    SECCLUSPOS,BYTE         ; Position of first sector within cluster
  2639                                  ;       I_am    TRANS,BYTE              ;
  2640                                  ;       I_am    READOP,BYTE             ;
  2641                                  ;       I_am    THISDRV,BYTE            ;
  2642                                  ;       I_am    CLUSFAC,BYTE            ;
  2643                                  ;       I_am    CLUSSPLIT,BYTE          ;
  2644                                  ;       I_am    INSMODE,BYTE            ; true => insert mode in buffered read
  2645                                  ;       I_am    cMeta,BYTE              ; count of meta'ed components found
  2646                                  ;       I_am    VOLID,BYTE              ;
  2647                                  ;       I_am    exit_type,BYTE          ; type of exit...
  2648                                  
  2649                                  SATTRIB		EQU	EXTFCB+1	; DATASEGMENT+432
  2650                                  OPEN_ACCESS	EQU	SATTRIB+1	; DATASEGMENT+433
  2651                                  FOUNDDEL	EQU	OPEN_ACCESS+1	; DATASEGMENT+434
  2652                                  FOUND_DEV	EQU	FOUNDDEL+1	; DATASEGMENT+435
  2653                                  FSPLICE		EQU	FOUND_DEV+1	; DATASEGMENT+436
  2654                                  FSHARING	EQU	FSPLICE+1	; DATASEGMENT+437
  2655                                  SECCLUSPOS	EQU	FSHARING+1	; DATASEGMENT+438
  2656                                  TRANS		EQU	SECCLUSPOS+1	; DATASEGMENT+439
  2657                                  READOP		EQU	TRANS+1		; DATASEGMENT+440	
  2658                                  THISDRV		EQU	READOP+1	; DATASEGMENT+441
  2659                                  CLUSFAC		EQU	THISDRV+1	; DATASEGMENT+442
  2660                                  CLUSSPLIT	EQU	CLUSFAC+1	; DATASEGMENT+443
  2661                                  INSMODE		EQU	CLUSSPLIT+1	; DATASEGMENT+444
  2662                                  CMETA		EQU	INSMODE+1	; DATASEGMENT+445
  2663                                  VOLID		EQU	CMETA+1		; DATASEGMENT+446
  2664                                  EXIT_TYPE	EQU	VOLID+1		; DATASEGMENT+447
  2665                                          
  2666                                  ;	EVEN
  2667                                  
  2668                                  ; WARNING - the following two items are accessed as a word
  2669                                  
  2670                                  ;	I_am    CREATING,BYTE           ; true => creating a file
  2671                                  ;	I_am	DELALL,BYTE		; = 0 iff BUGBUG
  2672                                  ;					; = DIRFREE iff BUGBUG
  2673                                  ;	I_am    EXITHOLD,DWORD          ; Temp location for proc terminate
  2674                                  ;	I_am    user_SP,WORD            ; User SP for system call
  2675                                  ;	I_am    user_SS,WORD            ; User SS for system call
  2676                                  ;	I_am    CONTSTK,WORD            ;
  2677                                  ;	I_am    THISDPB,DWORD           ;
  2678                                  ;	I_am    CLUSSAVE,WORD           ;
  2679                                  ; MSDOS 3.3
  2680                                  ;	I_am    CLUSSEC,WORD		;	
  2681                                  ;; MSDOS 6.0
  2682                                  ;;	I_am    CLUSSEC,DWORD           ;>32mb         ; AC0000
  2683                                  
  2684                                  	; Offset 0518h in IBMDOS.COM (MSDOS 3.3) 
  2685                                  
  2686                                  CREATING	EQU	EXIT_TYPE+1 	; DATASEGMENT+448
  2687                                  	; (End of 'MOVDPB' (in MSINIT) - Offset 0519h (just after 'retf'))
  2688                                  DELALL		EQU	CREATING+1	; DATASEGMENT+449
  2689                                  EXITHOLD	EQU	DELALL+1	; DATASEGMENT+450
  2690                                  USER_SP		EQU	EXITHOLD+4	; DATASEGMENT+454
  2691                                  USER_SS		EQU	USER_SP+2	; DATASEGMENT+456
  2692                                  CONTSTK		EQU	USER_SS+2	; DATASEGMENT+458	
  2693                                  THISDPB		EQU	CONTSTK+2	; DATASEGMENT+460
  2694                                  CLUSSAVE	EQU	THISDPB+4	; DATASEGMENT+464
  2695                                  CLUSSEC		EQU	CLUSSAVE+2	; Offset 052Ah ; DATASEGMENT+466
  2696                                  
  2697                                  ;       I_am    PREREAD,WORD            ; 0 means preread; 1 means optional
  2698                                  ;       I_am    FATBYT,WORD             ; Used by ALLOCATE
  2699                                  ;       I_am    FATBYTE,WORD            ; Used by $SLEAZEFUNC
  2700                                  ;       I_am    DEVPT,DWORD             ;
  2701                                  ;       I_am    THISSFT,DWORD           ; Address of user SFT
  2702                                  ;       I_am    THISCDS,DWORD           ; Address of current CDS
  2703                                  ;       I_am    THISFCB,DWORD           ; Address of user FCB
  2704                                  
  2705                                  ; 27/07/2019 - Retro DOS v3.2
  2706                                  ; MSDOS 3.3
  2707                                  ;PREREAD	EQU	CLUSSEC+2	; OffseT 052Ch ; DATASEGMENT+468
  2708                                  ; MSDOS 6.0
  2709                                  PREREAD		EQU	CLUSSEC+4	; DATASEGMENT+470 (27/07/2019)
  2710                                  
  2711                                  FATBYT		EQU	PREREAD+2	; DATASEGMENT+472 (27/07/2019) 
  2712                                  FATBYTE		EQU	FATBYT+2	; DATASEGMENT+474 (27/07/2019)
  2713                                  DEVPT		EQU	FATBYTE+2	; DATASEGMENT+476 (27/07/2019)	
  2714                                  THISSFT		EQU	DEVPT+4		; DATASEGMENT+480 (27/07/2019)
  2715                                  THISCDS		EQU	THISSFT+4	; DATASEGMENT+484 (27/07/2019)	
  2716                                  THISFCB		EQU	THISCDS+4	; DATASEGMENT+488 (27/07/2019)
  2717                                  
  2718                                  ; DATASEGMENT+490 :  ; *!!!*
  2719                                  	; Here is offset 0542h in IBMDOS.COM, 1987 (MSDOS 3.3 kernel) 
  2720                                  
  2721                                  ; 27/07/2019 - Retro DOS v3.2
  2722                                  ; Here is...
  2723                                  ; DATASEGMENT+492 :  ; *!!!*
  2724                                  
  2725                                  ;SFN		EQU	THISFCB+4	; DATASEGMENT + 0542h - 0358h
  2726                                  
  2727                                  ;       I_am    SFN,WORD,<-1>           ; SystemFileNumber found for accessfile
  2728                                  ;       I_am    JFN,WORD                ; JobFileNumber found for accessfile
  2729                                  ;       I_am    PJFN,DWORD              ; PointerJobFileNumber found for accessfile
  2730                                  ;       I_am    WFP_START,WORD          ;
  2731                                  ;       I_am    REN_WFP,WORD            ;
  2732                                  ;       I_am    CURR_DIR_END,WORD       ;
  2733                                  ;       I_am    NEXTADD,WORD            ;
  2734                                  ;       I_am    LASTPOS,WORD            ;
  2735                                  ;       I_am    CLUSNUM,WORD            ;
  2736                                  ;       I_am    DIRSEC,DWORD            ;>32mb 		; AC0000
  2737                                  ;       I_am    DIRSTART,WORD           ;
  2738                                  ;       I_am    SECPOS,DWORD		;>32mb Position of first sector accessed
  2739                                  ;       I_am    VALSEC,DWORD		;>32mb Number of valid (previously written)
  2740                                  ;                                       ; sectors
  2741                                  ;       I_am    BYTSECPOS,WORD          ; Position of first byte within sector
  2742                                  ;       I_am    BYTPOS,4                ; Byte position in file of access
  2743                                  ;       I_am    BYTCNT1,WORD            ; No. of bytes in first sector
  2744                                  ;       I_am    BYTCNT2,WORD            ; No. of bytes in last sector
  2745                                  ;       I_am    SECCNT,WORD             ; No. of whole sectors
  2746                                  ;       I_am    ENTFREE,WORD            ;
  2747                                  ;       I_am    ENTLAST,WORD            ;
  2748                                  ;       I_am    NXTCLUSNUM,WORD         ;
  2749                                  ;       I_am    GROWCNT,DWORD           ;
  2750                                  ;       I_am    CURBUF,DWORD            ;
  2751                                  ;       I_am    CONSft,DWORD            ; SFT of console swapped guy.
  2752                                  ;       I_am    SAVEBX,WORD             ;
  2753                                  ;       I_am    SAVEDS,WORD             ;
  2754                                  ;       I_am    restore_tmp,WORD        ; return address for restore world
  2755                                  ;       I_am    NSS,WORD
  2756                                  ;       I_am    NSP,WORD	
  2757                                  
  2758                                  ;	....  [ MS_DATA.ASM (MSDOS 6.0, 1991) (2) ] ; $$$
  2759                                  
  2760                                  ;DOSDATA ENDS
  2761                                  
  2762                                  ;============================================================================
  2763                                  ; MSHEAD.ASM
  2764                                  ;============================================================================
  2765                                  
  2766                                  [BITS 16]
  2767                                  [ORG 0]
  2768                                  
  2769                                  START:
  2770 00000000 E9BE76                          JMP     DOSINIT
  2771                                  
  2772                                  ;============================================================================
  2773                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2774                                  ;============================================================================
  2775                                  ; 16/07/2018 - Retro DOS 3.0
  2776                                  
  2777                                  	; MSDOS 6.0
  2778                                  ;	dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  2779                                  ;BioDataSeg:
  2780                                  ;	dw	0070h		; Bios data segment fixed at 70h
  2781                                  
  2782                                  	; MSDOS 3.3
  2783 00000003 0000                    	dw	0
  2784 00000005 00                      	db	0 ; 12/08/2018
  2785 00000006 42554720                	db	"BUG "
  2786 0000000A 0000                    	dw	0
  2787 0000000C 0000                    	dw	0
  2788                                  
  2789                                  ;============================================================================
  2790                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
  2791                                  ;============================================================================
  2792                                  ; 16/07/2018 - Retro DOS 3.0	
  2793                                  
  2794                                  	; MSDOS 3.3
  2795                                  MYNUM:			; Offset 000Eh
  2796 0000000E 0000                    	dw	0	
  2797                                  FCBLRU: 
  2798 00000010 0000                    	dw	0
  2799                                  OpenLRU:
  2800 00000012 0000                    	dw	0
  2801                                  OEM_HANDLER: 		; Pointer to OEM handler code	
  2802 00000014 FFFFFFFF                	dd	-1
  2803                                  LeaveAddr:
  2804                                  	;dd	LeaveDOS
  2805 00000018 [FA15]                  	dw	LeaveDOS ; 12/08/2018
  2806                                  RetryCount:		; Share retries
  2807 0000001A 0300                    	dw	3
  2808                                  RetryLoop:
  2809 0000001C 0100                    	dw	1
  2810                                  LastBuffer:
  2811 0000001E FFFFFFFF                	dd	-1	; Buffer queue recency pointer
  2812                                  CONTPOS:
  2813 00000022 0000                    	dw	0	; location in buffer of next read
  2814                                  arena_head:
  2815 00000024 0000                    	dw	0	; Segment # of first arena in memory
  2816                                  
  2817                                  ;; 16/07/2018
  2818                                  ;;****************************************************************************
  2819                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
  2820                                  ;;****************************************************************************
  2821                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
  2822                                  ;;
  2823                                  ;;	AH = 52h
  2824                                  ;;
  2825                                  ;;	on return:
  2826                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
  2827                                  ;;		Known "invars" fields follow (varies with DOS version):
  2828                                  ;;
  2829                                  ;;	Offset Size		 Description
  2830                                  ;;
  2831                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
  2832                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
  2833                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
  2834                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
  2835                                  ;;		      0 indicates no unread input (DOS 3.x)
  2836                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
  2837                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
  2838                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
  2839                                  ;;	  08   dword  pointer to $CLOCK device driver
  2840                                  ;;	  0C   dword  pointer to CON device driver
  2841                                  ;;	  10   byte   number of logical drives in system
  2842                                  ;;	  11   word   maximum bytes/block of any block device
  2843                                  ;;	  13   dword  pointer to DOS cache buffer header
  2844                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
  2845                                  ;;		      point to the next device in device chain
  2846                                  ;;
  2847                                  ;;****************************************************************************
  2848                                  
  2849                                  ; The following block of data is used by SYSINIT. 
  2850                                  ; Do not change the order or size of this block
  2851                                  
  2852                                  ;SYSINITVAR:
  2853                                  SYSINITVARS:
  2854                                  DPBHEAD:
  2855 00000026 00000000                	dd	0	; Pointer to head of DPB-FAT list
  2856                                  SFT_ADDR:
  2857 0000002A [98000000]              	dd	SFTABL	; Pointer to first SFT table
  2858                                  BCLOCK:
  2859 0000002E 00000000                	dd	0	; The CLOCK device
  2860                                  BCON:
  2861 00000032 00000000                	dd	0	; Console device entry points
  2862                                  MAXSEC:
  2863 00000036 8000                    	dw	128	; Maximum allowed sector size
  2864                                  BUFFHEAD:
  2865 00000038 00000000                	dd	0	; Pointer to head of buffer queue
  2866                                  CDSADDR:
  2867 0000003C 00000000                	dd	0	; Pointer to curdir structure table
  2868                                  SFTFCB:
  2869 00000040 00000000                	dd	0	; pointer to FCB cache table
  2870                                  KEEPCOUNT:
  2871 00000044 0000                    	dw	0	; count of FCB opens to keep
  2872                                  NUMIO:
  2873 00000046 00                      	db	0	; Number of disk tables
  2874                                  CDSCOUNT:
  2875 00000047 00                      	db	0	; Number of CDS structures in above
  2876                                  ; A fake header for the NUL device
  2877                                  NULDEV:
  2878 00000048 00000000                	dd	0	; Link to rest of device list
  2879                                  	;dw	8004h
  2880 0000004C 0480                    	dw	DEVTYP | ISNULL	; Null device attributes
  2881 0000004E [6A16]                  	dw	SNULDEV	; Strategy entry point
  2882 00000050 [7016]                  	dw	INULDEV	; Interrupt entry point
  2883 00000052 4E554C2020202020        	db	"NUL     " ; Name of null device
  2884                                  SPLICES:
  2885 0000005A 00                      	db	0	; TRUE => splices being done
  2886                                  
  2887                                  	; MSDOS 6.0 
  2888                                  ;Special_Entries:
  2889                                  ;	dw	0	; address of special entries	;AN000;
  2890                                  ;UU_IFS_DOS_CALL:
  2891                                  ;	dd	0	; entry for IFS DOS service	;AN000;
  2892                                  ;; 
  2893                                  ;; UU_IFS_HEADER:
  2894                                  ;; 	dd	0	; IFS header chain		;AN000;
  2895                                  ;;
  2896                                  ;ChkCopyProt:
  2897                                  ;	dw	0	; M068
  2898                                  ;A20OFF_PSP:
  2899                                  ;	dw	0	; M068
  2900                                  ;BUFFERS_PARM1:
  2901                                  ;	dw	0	; value of BUFFERS= ,m 	;AN000;
  2902                                  ;BUFFERS_PARM2:
  2903                                  ;	dw	0	; value of BUFFERS= ,n 	;AN000
  2904                                  ;BOOTDRIVE:
  2905                                  ;	db	0	; the boot drive	;AN000;
  2906                                  ;DDMOVE:
  2907                                  ;	db	0 	; 1 if we need DWORD move ;AN000;
  2908                                  ;EXT_MEM_SIZE:
  2909                                  ;	dw	0	; extended memory size 	;AN000;
  2910                                  
  2911                                  ;HASHINITVAR: ; LABEL   WORD	; AN000;
  2912                                  ;;
  2913                                  ;; Replaced by next two declarations
  2914                                  ;;
  2915                                  ;;UU_BUF_HASH_PTR:
  2916                                  ;;	dd	0	; buffer Hash table addr
  2917                                  ;;UU_BUF_HASH_COUNT:
  2918                                  ;;	dw	1	; number of Hash entries
  2919                                  ;
  2920                                  ;BufferQueue:
  2921                                  ;	dd	0	; Head of the buffer Queue
  2922                                  ;DirtyBufferCount:
  2923                                  ;	dw	0	; Count of Dirty buffers in the Que
  2924                                  ;			; BUGBUG ---- change to byte
  2925                                  ;SC_CACHE_PTR:
  2926                                  ;	dd	0	; secondary cache pointer
  2927                                  ;SC_CACHE_COUNT:
  2928                                  ;	dw	0 	; secondary cache count
  2929                                  ;BuffInHMA:
  2930                                  ;	db	0	; Flag to indicate that buffs are in HMA
  2931                                  ;LoMemBuff:
  2932                                  ;	dd	0	; Ptr to intermediate buffer
  2933                                  ;			;  in Low mem when buffs are in HMA
  2934                                  ;;
  2935                                  ;; All variables which have UU_ as prefix can be reused for other
  2936                                  ;; purposes and can be renamed. All these variables were used for
  2937                                  ;; EMS support of Buffer Manager. Now they are useless for Buffer
  2938                                  ;; manager ---- MOHANS
  2939                                  ;;
  2940                                  ;
  2941                                  ;	I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
  2942                                  ;UU_BUF_EMS_FIRST_PAGE:	
  2943                                  ;	db	0,0,0	; holds the first page above 640K
  2944                                  ;
  2945                                  ;;	I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
  2946                                  ;;					   ; above 640K
  2947                                  ;;UU_BUF_EMS_NPA640:
  2948                                  ;;	dw	0			
  2949                                  ;
  2950                                  ;CL0FATENTRY:
  2951                                  ;	dw	-1	; M014:	Holds the data that
  2952                                  ;			; is used in pack/unpack rts.
  2953                                  ;			; in fat.asm if cluster 0 is specified.
  2954                                  ;			; SR;
  2955                                  ;IoStatFail:
  2956                                  ;	db	0	; IoStatFail has been added to 
  2957                                  ;			; record a fail on an I24 
  2958                                  ;			; issued from IOFUNC on a status call. 
  2959                                  ;
  2960                                  ;;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
  2961                                  ;;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
  2962                                  ;;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
  2963                                  ;;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
  2964                                  ;;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
  2965                                  ;;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
  2966                                  ;
  2967                                  ;;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
  2968                                  ;						; state of the 	buffers page.
  2969                                  ;						; This one byte is retained to 
  2970                                  ;						; keep the size of this data 
  2971                                  ;						; block the same.;
  2972                                  ;ALLOCMSAVE:
  2973                                  ;	db	0	; M063: temp var. used to 
  2974                                  ;			; M063: save alloc method in
  2975                                  ;			; M063: msproc.asm
  2976                                  ;A20OFF_COUNT:
  2977                                  ;	db	0	; M068: indiactes the # of 
  2978                                  ;			; M068: int 21 calls for 
  2979                                  ;			; M068: which A20 is off
  2980                                  ;DOS_FLAG:
  2981                                  ;	db	0	; see DOSSYM.INC for Bit 
  2982                                  ;			; definitions
  2983                                  ;UNPACK_OFFSET:
  2984                                  ;	dw	0	; saves pointer to the start
  2985                                  ;			; of unpack code in exepatch.
  2986                                  ;			; asm.
  2987                                  ;UMBFLAG:
  2988                                  ;	db	0 	; M003: bit 0 indicates the 
  2989                                  ;			; M003: link state of the UMBs
  2990                                  ;			; M003: whether linked or not 
  2991                                  ;			; M003: to the DOS arena chain
  2992                                  ;SAVE_AX:
  2993                                  ;	dw	0	; M000: temp varibale to store ax
  2994                                  ;			; M000: in msproc.asm
  2995                                  ;UMB_HEAD:
  2996                                  ;	dw	-1	; M000: this is initialized to  
  2997                                  ;			; M000: the first umb arena by 
  2998                                  ;			; M000: BIOS sysinit.
  2999                                  ;START_ARENA:
  3000                                  ;	dw	1	; M000: this is the first arena 
  3001                                  ;			; M000: from which DOS will 
  3002                                  ;			; M000: start its scan for alloc.
  3003                                  
  3004                                  ; End of SYSINITVar block
  3005                                  
  3006                                  ; 16/07/2018
  3007                                  ; MSDOS 3.3 (& MDOS 6.0)
  3008                                  
  3009                                  ;
  3010                                  ; Sharer jump table
  3011                                  ;
  3012                                  
  3013                                  ;PUBLIC	JShare
  3014                                  	;EVEN
  3015 0000005B 90                      align 2
  3016                                  
  3017                                  JShare: ; LABEL	DWORD
  3018 0000005C [5618]0000              		DW	BadCall,0
  3019 00000060 [5A18]0000              MFT_enter	DW	OKCall, 0  ; 1   MFT_enter
  3020 00000064 [5A18]0000              MFTClose	DW	OKCall, 0  ; 2   MFTClose
  3021 00000068 [5618]0000              MFTclU		DW	BadCall,0  ; 3   MFTclU
  3022 0000006C [5618]0000              MFTCloseP	DW	BadCall,0  ; 4   MFTCloseP
  3023 00000070 [5618]0000              MFTCloN		DW	BadCall,0  ; 5   MFTCloN
  3024 00000074 [5618]0000              set_block	DW	BadCall,0  ; 6   set_block
  3025 00000078 [5618]0000              clr_block	DW	BadCall,0  ; 7   clr_block
  3026 0000007C [5A18]0000              chk_block	DW	OKCall, 0  ; 8   chk_block
  3027 00000080 [5618]0000              MFT_get		DW	BadCall,0  ; 9   MFT_get
  3028 00000084 [5618]0000              ShSave		DW	BadCall,0  ; 10  ShSave
  3029 00000088 [5618]0000              ShChk		DW	BadCall,0  ; 11  ShChk
  3030 0000008C [5A18]0000              ShCol		DW	OKCall, 0  ; 12  ShCol
  3031 00000090 [5618]0000              ShCloseFile	DW	BadCall,0  ; 13  ShCloseFile
  3032 00000094 [5618]0000              ShSU		DW	BadCall,0  ; 14  ShSU
  3033                                  
  3034                                  ;============================================================================
  3035                                  ; CONST2.ASM (MSDOS 6.0, 1991)
  3036                                  ;============================================================================
  3037                                  ; 16/07/2018 - Retro DOS 3.0	
  3038                                  
  3039                                  ;Break <Initialized data and data used at DOS initialization>
  3040                                  
  3041                                  ;
  3042                                  ; We need to identify the parts of the data area that are relevant to tasks
  3043                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
  3044                                  ; data will be gathered with the system code.  The process data under 2.x will
  3045                                  ; be available for swapping and under 3.0 it will be allocated per-process.
  3046                                  ;
  3047                                  ; The data that is system data will be identified by [SYSTEM] in the comments
  3048                                  ; describing that data item.
  3049                                  
  3050                                  ;	AsmVars <Debug, Redirector, ShareF>
  3051                                  
  3052                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
  3053                                  
  3054                                  ;
  3055                                  ; Table of routines for assignable devices
  3056                                  ;
  3057                                  ; MSDOS allows assignment if the following standard devices:
  3058                                  ;   stdin  (usually CON input)
  3059                                  ;   stdout (usually CON output)
  3060                                  ;   auxin  (usually AUX input)
  3061                                  ;   auxout (usually AUX output)
  3062                                  ;   stdlpt (usually PRN output)
  3063                                  ;
  3064                                  ; SPECIAL NOTE:
  3065                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
  3066                                  ;   If we're not at end-of-file, then we always say that we have a character.
  3067                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
  3068                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
  3069                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
  3070                                  ;   as EOF).
  3071                                  
  3072                                  ; Default SFTs for boot up
  3073                                  
  3074                                  		;PUBLIC	SFTABL
  3075                                  
  3076                                  SFTABL:	   ; LABEL   DWORD		; file table
  3077 00000098 FFFF                    		DW -1			; link to next table
  3078 0000009A FFFF                    		DW -1			; link seg to next table
  3079 0000009C 0500                    		DW sf_default_number	; Number of entries in table
  3080 0000009E 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
  3081                                  
  3082                                  ; the next two variables relate to the position of the logical stdout/stdin
  3083                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
  3084                                  ; console.
  3085                                  
  3086                                  		; Offset 01A7h in IBMDOS.COM (MSDOS 3.3)
  3087 000001C5 00                      CARPOS:		db 0			; cursor position in stdin
  3088 000001C6 00                      STARTPOS:	db 0			; position of cursor at beginning
  3089 000001C7 00<rep 80h>             INBUF:		times 128 db 0		; general device input buffer
  3090 00000247 00<rep 83h>             CONBUF:		times 131 db 0		; The rest of INBUF and console buffer
  3091                                  		; Offset 02ACh in IBMDOS.COM (MSDOS 3.3)
  3092 000002CA 00                      PFLAG:		db 0			; printer echoing flag
  3093 000002CB 00                      VERFLG:		db 0			; Initialize with verify off
  3094 000002CC 03                      CHARCO:		db 00000011b		; Allows statchks every 4 chars...
  3095                                  switch_character:
  3096 000002CD 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
  3097 000002CE 00                      AllocMethod:	db 0			; how to alloc first(best)last
  3098 000002CF 00                      fShare:		db 0			; TRUE => sharing installed
  3099 000002D0 01                      DIFFNAM:	db 1			; Indicates when MYNAME has changed                                        ; of buffered input call
  3100 000002D1 20<rep 10h>             MYNAME:		times 16 db 20h		; My network name
  3101                                  
  3102                                  ;
  3103                                  ; The following table is a list of addresses that the sharer patches to be
  3104                                  ; PUSH AX to enable the critical sections
  3105                                  ;
  3106                                  		; Offset 02C3h in IBMDOS.COM (MSDOS 3.3)
  3107                                  
  3108                                  ;PUBLIC	CritPatch
  3109                                  
  3110                                  CritPatch:	; LABEL WORD
  3111                                  
  3112                                  ;IRP sect,<critDisk,critDevice>
  3113                                  
  3114                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
  3115                                  ;
  3116                                  ;SR; Change code patch address to a variable in data segment
  3117                                  ;
  3118                                  ;       dw OFFSET DOSDATA: redir_patch
  3119                                  ;       dw OFFSET DOSDATA: redir_patch
  3120                                  ;
  3121                                  ;;hkn	Short_Addr  E&sect
  3122                                  ;;hkn	Short_Addr  L&sect
  3123                                  ;
  3124                                  ;ELSE
  3125                                  ;	DW	0
  3126                                  ;	DW	0
  3127                                  ;ENDIF
  3128                                  ;ENDM
  3129                                  ;	DW	0
  3130                                  
  3131                                  	; 16/07/2018 - Retro DOS v3.0
  3132                                  	; IBMDOS.COM (MSDOS 3.3), offset 02C3h
  3133                                   
  3134 000002E1 [0F21]                  	dw 	EcritDisk
  3135 000002E3 [1721]                  	dw 	LcritDisk			
  3136 000002E5 [1F21]                  	dw	EcritDevice
  3137 000002E7 [2721]                  	dw 	LcritDevice
  3138                                  
  3139 000002E9 0000                    	dw	0
  3140                                  
  3141                                  ;
  3142                                  ; WARNING!!!  PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
  3143                                  ; Also, IBM server 1.0 requires this also.
  3144                                  ;
  3145                                  	;EVEN			; Force swap area to start on word boundry
  3146 000002EB 90                      align 2
  3147                                  	;PUBLIC	SWAP_START
  3148                                  SWAP_START:	; LABEL BYTE
  3149 000002EC 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
  3150 000002ED 00                      INDOS:		db 0		; DOS status for interrupt processing
  3151 000002EE FF                      WPERR:		db -1		; Write protect error flag
  3152 000002EF 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
  3153 000002F0 0000                    EXTERR:		dw 0		; Extended Error code
  3154                                  
  3155                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
  3156 000002F2 00                      EXTERR_ACTION:	db 0		; Extended Error Action
  3157 000002F3 00                      EXTERR_CLASS:	db 0		; Extended Error Class
  3158                                  ; end warning
  3159                                   
  3160 000002F4 00000000                EXTERRPT:	dd 0		; Extended Error pointer
  3161                                  
  3162 000002F8 8000                    DMAADD:		dw 80H		; User's disk transfer address (disp/seg)
  3163 000002FA 0000                                    dw 0	
  3164 000002FC 0000                    CurrentPDB:	dw 0		; Current process identifier
  3165 000002FE 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
  3166 00000300 0000                    exit_code:	dw 0		; exit code of last proc.
  3167 00000302 00                      CURDRV:		db 0		; Default drive (init A)
  3168 00000303 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
  3169                                  ;				; F.C. 2/17/86
  3170                                  ;CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
  3171                                  ;CPSWSAVE:	db 0		; copy of above in case of ABORT
  3172                                  SWAP_ALWAYS:	; 05/08/2018
  3173 00000304 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
  3174                                  				;   extended error type stuff.
  3175                                  				;   NOTE: does not have Correct value on
  3176                                  				;   1-12, OEM, Get/Set CurrentPDB,
  3177                                  				;   GetExtendedError system calls)
  3178 00000306 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
  3179 00000308 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
  3180 0000030A 0000                    FirstArena:	dw 0		; first free block found
  3181 0000030C 0000                    BestArena:	dw 0		; best free block found
  3182 0000030E 0000                    LastArena:	dw 0		; last free block found
  3183 00000310 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
  3184 00000312 0000                    LASTENT:	dw 0		; Last entry for directory search
  3185 00000314 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
  3186 00000315 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
  3187 00000316 00                      NoSetDir:	db 0		; true -> do not set directory
  3188 00000317 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
  3189 00000318 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
  3190                                  
  3191                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
  3192                                  	;EVEN
  3193 00000319 90                      align 2
  3194                                  	; Offset 02FCh in IBMDOS.COM (MSDOS 3.3); 
  3195 0000031A 00                      DAY:		db 0		; Day of month
  3196 0000031B 00                      MONTH:		db 0		; Month of year
  3197 0000031C 0000                    YEAR:		dw 0		; Year (with century)
  3198 0000031E FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
  3199 00000320 00                      WEEKDAY:	db 0		; Day of week
  3200                                  ; end warning
  3201                                  
  3202 00000321 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
  3203 00000322 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
  3204 00000323 00                      fAborting:	db 0		; TRUE => abort in progress
  3205                                  
  3206                                  ; Combination of all device call parameters
  3207                                  	;PUBLIC	DEVCALL 	;
  3208                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
  3209                                  DEVCALL: ; 08/08/2018
  3210 00000324 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
  3211 00000325 00                      DEVCALL_REQUNIT: db 0		;Device unit number
  3212 00000326 00                      DEVCALL_REQFUNC: db 0		;Type of request
  3213 00000327 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
  3214 00000329 00<rep 8h>                       times 8 db 0		;Reserved for queue links
  3215                                  
  3216                                  	;PUBLIC	CALLUNIT
  3217                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
  3218                                  CALLFLSH: ; LABEL   WORD	;
  3219 00000331 00                      CALLMED:	db 0		; media byte
  3220                                  CALLBR:	  ; LABEL   DWORD	;
  3221                                  	;PUBLIC	CALLXAD 	;
  3222                                  CALLXAD:  ; LABEL   DWORD	;
  3223 00000332 00                      CALLRBYT:	db 0		;
  3224                                  	;PUBLIC	CALLVIDM	;
  3225                                  CALLVIDM: ; LABEL   DWORD	;
  3226 00000333 00<rep 3h>              	times 3 db 0	;
  3227                                  	;PUBLIC CallBPB		;
  3228                                  CALLBPB:  ; LABEL   DWORD	;
  3229                                  CALLSCNT:			;
  3230 00000336 0000                    		dw 0		;
  3231                                  	;PUBLIC	CALLSSEC	;
  3232                                  CALLSSEC: ; LABEL   WORD	;
  3233 00000338 0000                    		dw 0		;
  3234 0000033A 00000000                CALLVIDRW:	dd 0		;
  3235                                  		; 24/07/2019
  3236                                  ;MSDOS 6.0
  3237 0000033E 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
  3238 00000342 00000000                CALLDEVAD:	dd 0		; stash for device entry point
  3239                                  
  3240                                  ; Same as above for I/O calls	;
  3241                                  				;
  3242                                  	;PUBLIC	IOCall		;
  3243                                  ;IOCALL	SRHEAD	<>		;
  3244                                  IOCALL:	; 07/08/2018
  3245 00000346 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
  3246 00000347 00                      IOCALL_REQUNIT:	db 0		;Device unit number
  3247 00000348 00                      IOCALL_REQFUNC: db 0		;Type of request
  3248 00000349 0000                    IOCALL_REQSTAT: dw 0		;Status Word
  3249 0000034B 00<rep 8h>              	times 8	db 0		;Reserved for queue links
  3250                                  IOFLSH:	  ; LABEL   WORD	;
  3251                                          ;PUBLIC  IORCHR		;
  3252                                  IORCHR:	  ; LABEL   BYTE	;
  3253 00000353 00                      IOMED:		db 0		;
  3254 00000354 00000000                IOXAD:		dd 0		;
  3255 00000358 0000                    IOSCNT:		dw 0		;	
  3256 0000035A 0000                    IOSSEC:		dw 0		;
  3257                                  
  3258                                  ; Call struct for DSKSTATCHK	;
  3259 0000035C 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
  3260 0000035D 00                      		db 0
  3261 0000035E 05                      DSKSTCOM:	db DEVRDND	; = 5
  3262 0000035F 0000                    DSKSTST:	dw 0		;
  3263 00000361 00<rep 8h>              	times 8	db 0		;
  3264 00000369 00                      DSKCHRET:	db 0		;
  3265                                  
  3266                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
  3267                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
  3268                                  ;hkn   short_addr  DEVIOBUF	;
  3269                                  	
  3270 0000036A [8003]                  DEVIOBUF_PTR	dw DEVIOBUF
  3271 0000036C 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
  3272 0000036E 0100                    DSKSTCNT:	dw 1		;
  3273 00000370 0000                    		dw 0		;
  3274                                  
  3275 00000372 00                      CreatePDB:	db 0		; flag for creating a process
  3276                                  
  3277                                  ;* MSDOS 6.0
  3278                                  ;*	;PUBLIC	Lock_Buffer	;
  3279                                  ;*Lock_Buffer: ; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
  3280                                  ;*	    	dd 0		;MS. position
  3281                                  ;*	 	dd 0		;MS. length
  3282                                  
  3283                                  ;hkn; the foll. was moved from dosmes.asm.
  3284                                  
  3285                                  	;EVEN
  3286 00000373 90                      align 2				; needed to maintain offsets
  3287                                  
  3288                                  	; Offset 0352h in IBMDOS.COM (MSDOS 3.3)
  3289                                  	;PUBLIC  UserNum, OEMNum
  3290                                  USERNUM:
  3291 00000374 0000                     		dw 0		; 24 bit user number
  3292 00000376 00                      		db 0
  3293                                  ;IF IBM
  3294                                  ;IF IBMCOPYRIGHT
  3295 00000377 00                      OEMNUM:		DB 0		; 8 bit OEM number
  3296                                  ;ELSE
  3297                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
  3298                                  ;ENDIF
  3299                                  ;ELSE
  3300                                  ;OEMNUM:	DB 0FFh
  3301                                  ;ENDIF
  3302                                  
  3303                                  ; 17/07/2018
  3304                                  ;----------------------------------------------------------------------------
  3305                                  ; (MSDOS 3.3, DOSMES.INC, 1987)
  3306                                  
  3307                                  ; The next variable points to the country table for the current country
  3308                                  ;	(the table returned by the AL=0 INTERNATIONAL call).
  3309                                  
  3310 00000378 [2210]                  CurrentCounry:	dw USTABLE			
  3311                                  
  3312                                  
  3313                                  ;DOSDATA ENDS
  3314                                  
  3315                                  ;----------------------------------------------------------------------------
  3316                                  
  3317                                  ; 16/07/2018 - Retro DOS v3.0
  3318                                  
  3319                                  align 2
  3320                                  
  3321                                  DATASEGMENT EQU $ ; 17/04/2018
  3322                                  
  3323                                  ;============================================================================
  3324                                  ; MSINIT.ASM
  3325                                  ;============================================================================
  3326                                  ; 16/07/2018 - Retro DOS v3.0
  3327                                  ;	      (MSINIT code order/reference: MSDOS 3.3, IBMDOS.COM, 1987)
  3328                                  	
  3329                                  ; 15/04/2018 - Retro DOS v2.0 (DATA adaption for NASM)
  3330                                  
  3331                                  ; TITLE MSINIT.ASM -- MS-DOS INITIALIZATION CODE
  3332                                  
  3333                                  ;       ORG     0                       ; reset to beginning of data segment
  3334                                  ; Init code below overlaps with data area
  3335                                  	
  3336                                  	; Offset 0358h in IBMDOS.COM (MSDOS 3.3)
  3337                                  
  3338                                  ;INITBLOCK DB	110H DUP(0)     ; Allow for segment round up
  3339 0000037A 00<rep 110h>            INITBLOCK:	TIMES 272 DB 0
  3340                                  
  3341                                  	; Offset 0468h in IBMDOS.COM (MSDOS 3.3)
  3342                                  
  3343 0000048A 0000                    INITSP:		DW 0
  3344 0000048C 0000                    INITSS:		DW 0
  3345                                  ;BUFFSTRT:	DW 0
  3346                                  
  3347                                  	; Offset 046Ch in IBMDOS.COM (MSDOS 3.3)	
  3348                                  
  3349                                  ;ASSUME  CS:DOSGROUP,DS:DOSGROUP,ES:DOSGROUP,SS:NOTHING
  3350                                  ;
  3351                                  ;        EXTRN   QUIT:NEAR,IRET:NEAR,ABSDRD:FAR,ABSDWRT:FAR
  3352                                  ;        EXTRN   COMMAND:NEAR,CALL_ENTRY:NEAR
  3353                                  ;        IF      NOT IBM
  3354                                  ;        EXTRN   HEADER:BYTE
  3355                                  ;        ENDIF
  3356                                  
  3357                                  MOVDPB:
  3358                                  	; 08/07/2018 - Retro DOS v3.0
  3359                                  ; This section of code is safe from being overwritten by block move
  3360                                          ;MOV     SP,[CS:INITSP]
  3361                                          ;MOV     SS,[CS:INITSS]
  3362                                          ; 30/03/2018
  3363 0000048E 8B26[8A04]              	MOV     SP,[INITSP]
  3364 00000492 8E16[8C04]                      MOV     SS,[INITSS]
  3365 00000496 F3A4                    	REP     MOVSB
  3366 00000498 FC                              CLD
  3367                                          ; 15/07/2018
  3368                                  	;MOV	[ES:DMAADD+2],DX
  3369 00000499 8916[FA02]              	MOV	[DMAADD+2],DX
  3370 0000049D 8B36[2600]                      MOV     SI,[DPBHEAD]	; Address of first DPB
  3371                                  	;MOV	[ES:DPBHEAD+2],ES
  3372 000004A1 8C06[2800]                      MOV	[DPBHEAD+2],ES
  3373                                  	;MOV	[ES:SFT_ADDR+2],ES
  3374 000004A5 8C06[2C00]              	MOV     [SFT_ADDR+2],ES
  3375 000004A9 8A0E[4600]                      MOV     CL,[NUMIO]	; Number of DPBs
  3376 000004AD 30ED                            XOR     CH,CH
  3377                                  SETFINDPB:
  3378                                  	; 24/07/2019 - Retro DOS v3.2
  3379                                  	; 06/07/2019 - Retro DOS v3.1
  3380                                          ;MOV	[ES:SI+1AH],ES
  3381                                  	;mov	[si+1Ah],es ; MSDOS 3.3
  3382                                  	;mov	[si+1Bh],es ; MSDOS 6.0
  3383 000004AF 8C441B                          mov	[si+DPB.NEXT_DPB+2],es
  3384                                  	;MOV	BYTE [ES:SI+17H],-1  ; Never accessed before
  3385                                  	;mov	byte [si+17h],-1 ; MSDOS 3.3
  3386                                  	;mov	byte [si+18h],-1 ; MSDOS 6.0
  3387 000004B2 C64418FF                	mov	byte [si+DPB.FIRST_ACCESS],-1
  3388                                  	;add	si,32 ; MSDOS 3.3
  3389                                  	;add	si,33 ; MSDOS 6.0
  3390 000004B6 83C621                          ADD     SI,DPBSIZ ; Point to next DPB
  3391 000004B9 E2F4                    	LOOP    SETFINDPB
  3392                                  	;sub	si,32 ; MSDOS 3.3
  3393                                  	;sub	si,33 ; MSDOS 6.0
  3394 000004BB 83EE21                          SUB     SI,DPBSIZ
  3395                                  	;MOV	WORD [ES:SI+1AH],-1
  3396                                  	;mov	word [SI+1Ah],-1 ; MSDOS 3.3 
  3397                                  	;mov	word [si+1Bh],-1 ; MSDOS 6.0
  3398 000004BE C7441BFFFF              	mov	word [si+DPB.NEXT_DPB+2],-1
  3399                                  
  3400                                          ; 15/07/2018 - Retro DOS v3.0
  3401                                  	;; MSDOS 2.11
  3402                                          ;MOV	DI,[BUFFSTRT]		; Set up one default buffer
  3403                                  	;MOV	[ES:BUFFHEAD+2],ES
  3404                                          ;MOV	[ES:BUFFHEAD],DI
  3405                                  	; MSDOS 3.3
  3406 000004C3 06                      	push	es ; *
  3407 000004C4 BF[CF76]                	mov	di,SYSBUF+15  ; 721Fh for MSDOS 3.3 kernel (MSDOS.SYS)
  3408 000004C7 D1DF                    	rcr	di,1
  3409 000004C9 D1EF                    	shr	di,1
  3410 000004CB D1EF                    	shr	di,1
  3411 000004CD D1EF                    	shr	di,1
  3412 000004CF 8CC0                    	mov	ax,es
  3413 000004D1 01F8                    	add	ax,di
  3414 000004D3 8EC0                    	mov	es,ax
  3415 000004D5 31FF                    	xor	di,di
  3416 000004D7 8C06[3A00]              	mov     [BUFFHEAD+2],es
  3417 000004DB 893E[3800]              	mov     [BUFFHEAD],di
  3418                                  	;	
  3419 000004DF 26C74504FF00                    MOV     WORD [ES:DI+4],00FFH
  3420 000004E5 26C705FFFF                      MOV     WORD [ES:DI],-1
  3421 000004EA 26C74502FFFF                    MOV     WORD [ES:DI+2],-1
  3422 000004F0 07                      	pop	es ; * ; 15/07/2018
  3423 000004F1 06                              PUSH    ES
  3424 000004F2 42                              INC     DX ; **			; Leave enough room for the ARENA
  3425 000004F3 8B36[1003]              	mov	si,[ENDMEM] ; 15/07/2018
  3426                                  
  3427                                  	; 11/08/2018 - Retro DOS v3.0
  3428                                          ;invoke _$DUP_PDB		; create jfns and set CurrentPDB
  3429 000004F7 E8F419                  	CALL	_$DUP_PDB
  3430 000004FA 07                              POP	ES
  3431                                  
  3432                                  	; [CurrentPDB] = dx ; **
  3433                                  	; ds = previous [CurrentPDB]
  3434                                  	; es = cs
  3435                                  
  3436                                  ; set up memory arena
  3437                                  ;SPECIAL NOTE FOR HIGHMEM VERSION
  3438                                  ; At this point a process header has been built where the start of the 
  3439                                  ; CONSTANTS segment as refed by CS is. From this point until the return 
  3440                                  ; below be careful about references off of CS.
  3441                                  
  3442                                  	; 13/04/2018 ; *
  3443                                          ;PUSH	AX ; *
  3444                                          ;MOV	AX,[CurrentPDB]
  3445                                         	
  3446                                  	; 06/07/2019
  3447                                  	;MOV	AX,[CS:CurrentPDB] ; 15/03/2018
  3448                                  	;MOV    [ES:CurrentPDB],AX	; Put it in the REAL location
  3449                                          ;MOV	BYTE [ES:CreatePDB],0	; reset flag in REAL location
  3450                                          
  3451 000004FB 2EA1[FC02]              	mov	ax,[cs:CurrentPDB]  ; es = cs
  3452                                  
  3453 000004FF 48                      	DEC     AX
  3454 00000500 26A3[2400]                      MOV     [ES:arena_head],AX
  3455 00000504 1E                              PUSH    DS
  3456 00000505 8ED8                            MOV     DS,AX
  3457 00000507 C60600005A                      MOV     BYTE [ARENA.SIGNATURE],arena_signature_end
  3458 0000050C C70601000000                    MOV     WORD [ARENA.OWNER],arena_owner_system
  3459 00000512 262B06[1003]                    SUB     AX,[ES:ENDMEM]
  3460 00000517 F7D8                            NEG     AX
  3461 00000519 48                              DEC     AX
  3462 0000051A A30300                          MOV     [ARENA.SIZE],AX
  3463 0000051D 1F                              POP     DS
  3464                                          ;POP	AX ; *
  3465                                  
  3466 0000051E BF[9E00]                        MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
  3467                                  	; 15/07/2018
  3468 00000521 B80300                          MOV     AX,3
  3469 00000524 AB                              STOSW		; Adjust Refcount
  3470                                  	;MOV	DI,SYSINITVAR	; 16/03/2018 (Retro DOS v2.0)
  3471 00000525 BF[6B0F]                	MOV     DI,SysInitTable ; 15/07/2018 (Retro DOS v3.0)
  3472 00000528 CB                              RETF
  3473                                  	
  3474                                  	; 18/04/2018
  3475                                  FILL1	equ	$ - DATASEGMENT
  3476                                  ; ---------------------------------------------------------------------------
  3477                                  ; 16/07/2018 - Retro DOS v3.0
  3478                                  	;times (490-FILL1) db 0	; *!!!*
  3479                                  ; 27/07/2019 - Retro DOS v3.2
  3480 00000529 00<rep 3Dh>             	times (492-FILL1) db 0	; *!!!*
  3481                                  
  3482                                  ;============================================================================
  3483                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)  (2)
  3484                                  ;============================================================================
  3485                                  ; 16/07/2018 - Retro DOS 3.0	
  3486                                  ; 27/07/2019 - Retro DOS 3.2
  3487                                  
  3488                                  ;  MS_DATA.ASM (MSDOS 6.0, 1991) (1) ... $$$
  3489                                   
  3490                                  ; (continues from 'SFN' ..) - from offset 0542h in IBMDOS.COM, 1987 -
  3491                                  
  3492                                  ; DATASEGMENT + 490 ; Retro DOS v3.0
  3493                                  ; DATASEGMENT + 492 ; Retro DOS v3.2
  3494                                  
  3495                                  ;       I_am    SFN,WORD,<-1>           ; SystemFileNumber found for accessfile
  3496                                  ;       I_am    JFN,WORD                ; JobFileNumber found for accessfile
  3497                                  ;       I_am    PJFN,DWORD              ; PointerJobFileNumber found for accessfile
  3498                                  ;       I_am    WFP_START,WORD          ;
  3499                                  ;       I_am    REN_WFP,WORD            ;
  3500                                  ;       I_am    CURR_DIR_END,WORD       ;
  3501                                  ;       I_am    NEXTADD,WORD            ;
  3502                                  ;       I_am    LASTPOS,WORD            ;
  3503                                  ;       I_am    CLUSNUM,WORD            ;
  3504                                  ; MSDOS 3.3
  3505                                  ;	I_am	DIRSEC,WORD
  3506                                  ;; MSDOS 6.0
  3507                                  ;;      I_am    DIRSEC,DWORD            ;>32mb		; AC0000
  3508                                  ;       I_am    DIRSTART,WORD           ;
  3509                                  ;       I_am    SECPOS,DWORD		;>32mb Position of first sector accessed
  3510                                  ;       I_am    VALSEC,DWORD		;>32mb Number of valid (previously written)
  3511                                  ;                                       ; sectors
  3512                                  ;       I_am    BYTSECPOS,WORD          ; Position of first byte within sector
  3513                                  ;       I_am    BYTPOS,4                ; Byte position in file of access
  3514                                  ;       I_am    BYTCNT1,WORD            ; No. of bytes in first sector
  3515                                  ;       I_am    BYTCNT2,WORD            ; No. of bytes in last sector
  3516                                  ;       I_am    SECCNT,WORD             ; No. of whole sectors
  3517                                  
  3518 00000566 FFFF                    SFN:		dw -1
  3519 00000568 0000                    JFN:		dw 0
  3520 0000056A 00000000                PJFN:		dd 0
  3521 0000056E 0000                    WFP_START: 	dw 0
  3522 00000570 0000                    REN_WFP: 	dw 0
  3523 00000572 0000                    CURR_DIR_END: 	dw 0
  3524 00000574 0000                    NEXTADD: 	dw 0
  3525 00000576 0000                    LASTPOS: 	dw 0
  3526 00000578 0000                    CLUSNUM: 	dw 0
  3527                                  ; MSDOS 3.3
  3528                                  ;DIRSEC: 	dw 0
  3529                                  ; MSDOS 6.0
  3530 0000057A 00000000                DIRSEC:		dd 0 ; 24/07/2019	;>32mb
  3531 0000057E 0000                    DIRSTART: 	dw 0
  3532                                  ; MSDOS 3.3
  3533                                  ;SECPOS: 	dw 0
  3534                                  ; MSDOS 6.0
  3535 00000580 00000000                SECPOS: 	dd 0 ; 24/07/2019	;>32mb Position of first sector accessed
  3536                                  ; MSDOS 3.3
  3537                                  ;VALSEC: 	dw 0
  3538                                  ; MSDOS 6.0
  3539 00000584 00000000                VALSEC: 	dd 0 ; 24/07/2019  ;>32mb Num of valid (previously written) sectors	
  3540 00000588 0000                    BYTSECPOS: 	dw 0
  3541 0000058A 00000000                BYTPOS:		dd 0
  3542 0000058E 0000                    BYTCNT1: 	dw 0
  3543 00000590 0000                    BYTCNT2: 	dw 0
  3544 00000592 0000                    SECCNT: 	dw 0
  3545                                  
  3546                                  	; Offset 056Ah in IBMDOS.COM (MSDOS 3.3)
  3547                                  ; DATASEGMENT + 530 (in Retro DOS v3.0)
  3548                                  
  3549                                  ;       I_am    ENTFREE,WORD            ;
  3550                                  ;       I_am    ENTLAST,WORD            ;
  3551                                  ;       I_am    NXTCLUSNUM,WORD         ;
  3552                                  ;       I_am    GROWCNT,DWORD           ;
  3553                                  ;       I_am    CURBUF,DWORD            ;
  3554                                  ;       I_am    CONSft,DWORD            ; SFT of console swapped guy.
  3555                                  ;       I_am    SAVEBX,WORD             ;
  3556                                  ;       I_am    SAVEDS,WORD             ;
  3557                                  ;       I_am    restore_tmp,WORD        ; return address for restore world
  3558                                  ;       I_am    NSS,WORD
  3559                                  ;       I_am    NSP,WORD
  3560                                  
  3561 00000594 0000                    ENTFREE:	dw 0
  3562 00000596 0000                    ENTLAST:	dw 0
  3563 00000598 0000                    NXTCLUSNUM:	dw 0
  3564 0000059A 00000000                GROWCNT:	dd 0
  3565 0000059E 00000000                CURBUF:		dd 0
  3566 000005A2 00000000                CONSFT:		dd 0
  3567 000005A6 0000                    SAVEBX:		dw 0
  3568 000005A8 0000                    SAVEDS:		dw 0
  3569 000005AA 0000                    RESTORE_TMP:	dw 0
  3570 000005AC 0000                    NSS:		dw 0
  3571 000005AE 0000                    NSP:		dw 0	 ; Offset 0584h in IBMDOS.COM (MSDOS 3.3)
  3572                                  
  3573                                  ; DATASEGMENT+558 :  ; *!!!*
  3574                                  	; Here is offset 0586h in IBMDOS.COM, 1987 (MSDOS 3.3 kernel) 
  3575                                  
  3576                                  ; MSDOS 6.0
  3577                                  ;       I_am    EXTOPEN_FLAG,WORD,<0>   ;FT. extended open input flag       ;AN000;
  3578                                  ;       I_am    EXTOPEN_ON,BYTE,<0>     ;FT. extended open conditional flag ;AN000;
  3579                                  ;       I_am    EXTOPEN_IO_MODE,WORD,<0>;FT. extended open io mode          ;AN000;
  3580                                  ;       I_am    SAVE_DI,WORD            ;FT. extended open saved DI         ;AN000;
  3581                                  ;       I_am    SAVE_ES,WORD            ;FT. extended open saved ES         ;AN000;
  3582                                  ;       I_am    SAVE_DX,WORD            ;FT. extended open saved DX         ;AN000;
  3583                                  ;       I_am    SAVE_CX,WORD            ;FT. extended open saved CX         ;AN000;
  3584                                  ;       I_am    SAVE_BX,WORD            ;FT. extended open saved BX         ;AN000;
  3585                                  ;       I_am    SAVE_SI,WORD            ;FT. extended open saved SI         ;AN000;
  3586                                  ;       I_am    SAVE_DS,WORD            ;FT. extended open saved DS         ;AN000;
  3587                                  
  3588                                  ;	HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
  3589                                  ;	we used to just pass 16 bits in a register.  Now High_SECTOR holds
  3590                                  ;	the high 16, the low 16 are still in the register.
  3591                                  ;
  3592                                  ;       I_am    HIGH_SECTOR,WORD,<0>    ;>32mb higher sector #		    ;AN000;
  3593                                  ;
  3594                                  ;       ;I_am    UU_HIGH_SECTOR_TEMP,WORD,<0> ;M019: Unused
  3595                                  ;       I_am    OffsetMagicPatch,WORD,<offset MagicPatch> ;scottq 8/6/92
  3596                                  ;                                                         ;see dos\mpatch.asm
  3597                                  ;
  3598                                  ;       I_am    DISK_FULL,BYTE          ;>32mb indicating disk full when 1  ;AN000;
  3599                                  ;       I_am    TEMP_VAR,WORD           ; temporary variable for everyone   ;AN000;
  3600                                  ;       I_am    TEMP_VAR2,WORD          ; temporary variable 2 for everyone ;AN000;
  3601                                  ;       I_am    DrvErr,BYTE             ; used to save drive error          ;AN000;
  3602                                  ;       I_am    DOS34_FLAG,WORD,<0>     ; common flag for DOS 3.4           ;AN000;
  3603                                  ;       I_am    NO_FILTER_PATH,DWORD    ; pointer to orignal path           ;AN000;
  3604                                  ;       I_am    NO_FILTER_DPATH,DWORD   ; pointer to orignal path of destination;AN000;
  3605                                  ;; M008
  3606                                  ;       I_am   AbsRdWr_SS,WORD         ; INT 25/26 user stack segment
  3607                                  ;       I_am   AbsRdWr_SP,WORD         ; INT 25/26 user stack offset
  3608                                  ;       I_am   UU_Callback_flag,BYTE,<0>  ; Unused
  3609                                  ;; M008
  3610                                  
  3611                                  ; 23/07/2019 - Retro DOS v3.2
  3612                                  
  3613                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
  3614                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
  3615                                  ; the high 16, the low 16 are still in the register.
  3616                                  
  3617                                  HIGH_SECTOR:	
  3618 000005B0 0000                    	dw	0		;>32mb higher sector #		;AN000;
  3619                                  ; 24/07/2019
  3620                                  ;DISK_FULL:
  3621                                  ;	db	0		;>32mb indicating disk full when 1 ;AN000;
  3622                                  ;	db	0 ; reserved
  3623                                  TEMP_VAR:
  3624 000005B2 0000                    	dw	0		; temporary variable for everyone ;AN000;
  3625                                  TEMP_VAR2:
  3626 000005B4 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
  3627                                   
  3628                                  ; make those pushes fast!!!
  3629                                  	;.EVEN
  3630                                  align 2
  3631                                  
  3632                                  ; MSDOS 3.3 (& MSDOS 6.0)
  3633                                  StackSize equ 180h			; gross but effective
  3634                                  
  3635                                  ;;;StackSize = 300h			; This is a "trial" change IBM hasn't
  3636                                  ;;;					; made up their minds about
  3637                                   
  3638                                  ;
  3639                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
  3640                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
  3641                                  ;
  3642                                          ;PUBLIC  RENAMEDMA,AuxStack,DskStack,IOStack
  3643                                  RENAMEDMA:  ; LABEL   BYTE		; See DOS_RENAME
  3644                                  	;DB	StackSize DUP (?)       ;
  3645 000005B6 00<rep 180h>            	times	StackSize db 0
  3646                                  AUXSTACK:   ; LABEL   BYTE		;  Offset 0706h in IBMDOS.COM, 1987
  3647                                   	;DB	StackSize DUP (?)       ;
  3648 00000736 00<rep 180h>            	times	StackSize db 0
  3649                                  DSKSTACK:   ; LABEL   BYTE		;  Offset 0886h in IBMDOS.COM, 1987
  3650                                   	;DB	StackSize DUP (?)       ;
  3651 000008B6 00<rep 180h>            	times	StackSize db 0
  3652                                  IOSTACK:    ; LABEL   BYTE		;  Offset 0A06h in IBMDOS.COM, 1987
  3653                                   
  3654                                  ; patch space for Boca folks.
  3655                                  ; Say What????!!! This does NOT go into the swappable area!
  3656                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
  3657                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
  3658                                   
  3659                                  ;PUBLIC  IBMPATCH
  3660                                  ;IBMPATCH label byte
  3661                                  ;	I_am    PRINTER_FLAG,BYTE,<0>   ; status of PRINT utility
  3662                                  ;	I_am    VOLCHNG_FLAG,BYTE,<0>   ; true if volume label created
  3663                                  ;	I_am    VIRTUAL_OPEN,BYTE,<0>   ; non-zero if we opened a virtual file
  3664                                  
  3665                                  IBMPATCH:
  3666 00000A36 00                      PRINTER_FLAG:	db 0
  3667 00000A37 00                      VOLCHNG_FLAG:	db 0
  3668 00000A38 00                      VIRTUAL_OPEN:	db 0
  3669                                  
  3670                                  ; MSDOS 6.0
  3671                                  ;; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
  3672                                  ;      I_am     FSeek_drive,BYTE         ;AN000; fastseek drive #
  3673                                  ;      I_am     FSeek_firclus,WORD       ;AN000; fastseek first cluster #
  3674                                  ;      I_am     FSeek_logclus,WORD       ;AN000; fastseek logical cluster #
  3675                                  ;      I_am     FSeek_logsave,WORD       ;AN000; fastseek returned log clus #
  3676                                  ;      I_am     UU_ACT_PAGE,WORD,<-1>    ;;;;;;; ;BL ; active EMS page ;AN000;
  3677                                  ;      I_am     TEMP_DOSLOC,WORD,<-1>    ;stores the temporary location of dos
  3678                                  					 ;at SYSINIT time.
  3679                                  ;SWAP_END LABEL   BYTE
  3680                                  ;PUBLIC  SWAP_END
  3681                                  
  3682                                  SWAP_END:
  3683                                   
  3684                                  ;; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
  3685                                  ;;   BE USED. If the size of the swap data area is ODD, it will be rounded up
  3686                                  ;;   to include this byte.
  3687                                  ;       DB      ?
  3688                                  
  3689 00000A39 00                      	db	0
  3690                                   
  3691                                  ;;hkn;	DB      (512+80+32-(SWAP_END-ibmpatch)) DUP (?)
  3692                                  
  3693                                  ;DOSDATA    ENDS
  3694                                  
  3695                                  ; 08/09/2018
  3696 00000A3A 00<rep 243h>            	times 579 db 0
  3697                                  
  3698                                  ;12/08/2018 - Retro DOS v3.0
  3699                                  ;15/07/2018
  3700                                  ;============================================================================
  3701                                  ; 	Retro DOS v3.0
  3702                                  ;============================================================================
  3703 00000C7D 00                      	db 	0
  3704                                  RETRODOSMSG:
  3705 00000C7E 0D0A                    	db	13,10
  3706                                  	;;;;db	"Retro DOS v3.0 by Erdogan Tan [2018]"
  3707                                  	;;;db	"Retro DOS v3.1 by Erdogan Tan [2019]" ; 29/06/2019
  3708                                  	;;db	"Retro DOS v3.2 by Erdogan Tan [2019]" ; 17/07/2019
  3709                                  	;db	"Retro DOS v3.2 by Erdogan Tan [2019-2022]" ; 22/11/2022
  3710 00000C80 526574726F20444F53-     	db	"Retro DOS v3.2 by Erdogan Tan [2019-2024]" ; 16/01/2024
  3710 00000C89 2076332E3220627920-
  3710 00000C92 4572646F67616E2054-
  3710 00000C9B 616E205B323031392D-
  3710 00000CA4 323032345D         
  3711 00000CA9 0D0A2400                	db	13,10,"$", 0 
  3712                                  
  3713                                  ;============================================================================
  3714                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3715                                  ;============================================================================
  3716                                  ; 16/07/2018 - Retro DOS 3.0
  3717                                  
  3718                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3719                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3720 00000CAD 03                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3721 00000CAE 1E                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3722                                  
  3723                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3724                                  ;        I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3725                                  ;        I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3726                                  
  3727                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3728                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3729                                  ;
  3730                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3731                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3732                                  
  3733                                  ; Days in year
  3734                                  
  3735                                  YRTAB:   
  3736 00000CAF C8A6                    	DB	200,166			; Leap year
  3737 00000CB1 C8A5                    	DB	200,165
  3738 00000CB3 C8A5                    	DB	200,165
  3739 00000CB5 C8A5                    	DB	200,165
  3740                                  
  3741                                  ; Days of each month
  3742                                  
  3743                                  MONTAB:        
  3744 00000CB7 1F                      	DB      31                      ; January
  3745                                  february:
  3746 00000CB8 1C                      	DB	28 			; February--reset each 
  3747                                  					; time year changes
  3748 00000CB9 1F                              DB      31                      ; March
  3749 00000CBA 1E                              DB      30                      ; April
  3750 00000CBB 1F                              DB      31                      ; May
  3751 00000CBC 1E                              DB      30                      ; June
  3752 00000CBD 1F                              DB      31                      ; July
  3753 00000CBE 1F                              DB      31                      ; August
  3754 00000CBF 1E                              DB      30                      ; September
  3755 00000CC0 1F                              DB      31                      ; October
  3756 00000CC1 1E                              DB      30                      ; November
  3757 00000CC2 1F                              DB      31                      ; December
  3758                                  
  3759                                  ;
  3760                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3761                                  ; those error codes which are "allowed" for each system call. If the error
  3762                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3763                                  ; is to return the "real" error via Extended error, and one of the allowed
  3764                                  ; errors on the actual call.
  3765                                  ;
  3766                                  ; The table is organized as follows:
  3767                                  ;
  3768                                  ;    Each entry in the table is of variable size, but the first
  3769                                  ;       two bytes are always:
  3770                                  ;
  3771                                  ;       Call#,Cnt of bytes following this byte
  3772                                  ;
  3773                                  ; EXAMPLE:
  3774                                  ;       Call 61 (OPEN)
  3775                                  ;
  3776                                  ;       DB      61,5,12,3,2,4,5
  3777                                  ;
  3778                                  ;       61 is the AH INT 21 call value for OPEN.
  3779                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3780                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3781                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3782                                  ;       this case 5). The last value will be the one returned on the call if
  3783                                  ;       the "real" error is not one of the allowed ones.
  3784                                  ;
  3785                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3786                                  ;   there is NO entry. This means that NO error codes are returned on this
  3787                                  ;   call, so set up an Extended error and leave the current error code alone.
  3788                                  ;
  3789                                  ; The table is terminated by a call value of 0FFh
  3790                                  
  3791                                  ;PUBLIC I21_MAP_E_TAB
  3792                                  	; 10/08/2018
  3793                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3794 00000CC3 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3795 00000CC7 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3796 00000CCC 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3797 00000CD0 0205                        DB          error_file_not_found,error_access_denied
  3798 00000CD2 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3799 00000CD6 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3800 00000CDA 04                          DB          error_too_many_open_files
  3801 00000CDB 05                          DB          error_access_denied
  3802                                      ; MSDOS 6.0
  3803                                      ;DB  OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3804                                      ;DB          error_too_many_open_files
  3805                                      ;DB          error_not_dos_disk,error_access_denied
  3806                                      ; MSDOS 3.3
  3807 00000CDC 3D0503020C                  DB  OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3808 00000CE1 0405                        DB          error_too_many_open_files,error_access_denied
  3809 00000CE3 3E0106                      DB  CLOSE,1,error_invalid_handle
  3810 00000CE6 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3811 00000CEA 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3812 00000CEE 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3813 00000CF3 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3814 00000CF7 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3815 00000CFC 05                          DB          error_access_denied
  3816 00000CFD 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3817 00000D02 0605                        DB          error_invalid_handle,error_access_denied
  3818 00000D04 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3819 00000D08 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3820                                      ; MSDOS 6.0	
  3821                                      ;DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3822                                      ; MSDOS 3.3	
  3823 00000D0C 47010F                      DB  CURRENT_DIR,1,error_invalid_drive
  3824 00000D0F 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3825 00000D13 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3826 00000D17 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3827 00000D1C 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3828 00000D21 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3829 00000D24 0805                        DB          error_not_enough_memory,error_access_denied
  3830 00000D26 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3831 00000D2B 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3832                                      ; MSDOS 6.0
  3833                                      ;DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3834                                      ;DB          error_current_directory,error_access_denied
  3835                                      ; MSDOS 3.3
  3836 00000D2E 5604110302                  DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3837 00000D33 05                          DB          error_access_denied
  3838                                      ; MSDOS 6.0	
  3839                                      ;DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3840                                      ;DB             error_invalid_data,error_invalid_function
  3841                                      ; MSDOS 3.03	
  3842 00000D34 57020601                    DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3843 00000D38 580101                      DB  ALLOCOPER,1,error_invalid_function
  3844 00000D3B 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3845 00000D3F 0405                        DB          error_too_many_open_files,error_access_denied
  3846 00000D41 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3847 00000D45 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3848 00000D48 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3849 00000D4C 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3850 00000D4E 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3851 00000D52 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3852 00000D56 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3853 00000D59 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3854 00000D5D 01                          DB              error_invalid_function
  3855                                      ; MSDOS 6.0		
  3856                                      ;DB	ExtOpen,10
  3857                                      ;DB   error_path_not_found,error_file_not_found,error_invalid_access
  3858                                      ;DB         error_too_many_open_files,error_file_exists,error_not_enough_memory
  3859                                      ;DB         error_not_dos_disk,error_invalid_data
  3860                                      ;DB             error_invalid_function,error_access_denied
  3861                                      ;DB GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3862                                      ;DB         error_invalid_function,error_access_denied
  3863 00000D5E FF                          DB  0FFh
  3864                                  
  3865                                  ;============================================================================
  3866                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3867                                  ;============================================================================
  3868                                  ; 16/07/2018 - Retro DOS 3.0
  3869                                  
  3870                                  ;**
  3871                                  ;
  3872                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
  3873                                  ; errors.  Each entry is 4 bytes long:
  3874                                  ;
  3875                                  ;       Err#,Class,Action,Locus
  3876                                  ;
  3877                                  ; A value of 0FFh indicates a call specific value (ie.  should already
  3878                                  ; be set).  AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
  3879                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
  3880                                  ;
  3881                                  
  3882                                  ;PUBLIC  ERR_TABLE_21
  3883                                  ERR_TABLE_21: ; LABEL   BYTE
  3884 00000D5F 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,     0FFh
  3885 00000D63 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3886 00000D67 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3887 00000D6B 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,     errLOC_Unk
  3888 00000D6F 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,      0FFh
  3889 00000D73 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3890 00000D77 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,     errLOC_Mem
  3891 00000D7B 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3892 00000D7F 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,     errLOC_Mem
  3893 00000D83 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,     errLOC_Mem
  3894 00000D87 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,      errLOC_Unk
  3895 00000D8B 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3896 00000D8F 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,     errLOC_Unk
  3897 00000D93 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3898 00000D97 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,      errLOC_Disk
  3899 00000D9B 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,      errLOC_Disk
  3900 00000D9F 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3901 00000DA3 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,      errLOC_Disk
  3902 00000DA7 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3903 00000DAB 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3904 00000DAF 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,     0FFh
  3905 00000DB3 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,      errLOC_Unk
  3906 00000DB7 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,     errLOC_Disk
  3907 00000DBB 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,      errLOC_Net
  3908 00000DBF 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,      errLOC_Net
  3909 00000DC3 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,      errLOC_Unk
  3910 00000DC7 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,     errLOC_Unk
  3911 00000DCB 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3912                                      ; MSDOS 6.0
  3913                                      ;DB  error_handle_EOF,            errCLASS_OutRes,    errACT_Abort,     errLOC_Unk ;AN000;
  3914                                      ;DB  error_handle_Disk_Full,      errCLASS_OutRes,    errACT_Abort,     errLOC_Unk ;AN000;
  3915                                      ;DB  error_sys_comp_not_loaded,   errCLASS_Unk,       errACT_Abort,     errLOC_Disk ;AN001;
  3916 00000DCF FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	    0FFh
  3917                                  
  3918                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
  3919                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
  3920                                  ;		db 2,8,3,2
  3921                                  ;		db 3,8,3,2
  3922                                  ;		db 4,1,4,1
  3923                                  ;		db 5,3,3,0FFh
  3924                                  ;		db 6,7,4,1
  3925                                  ;		db 7,7,5,5
  3926                                  ;		db 8,1,4,5
  3927                                  ;		db 9,7,4,5
  3928                                  ;		db 0Ah,7,4,5
  3929                                  ;		db 0Bh,9,3,1
  3930                                  ;		db 0Ch,7,4,1
  3931                                  ;		db 0Dh,9,4,1
  3932                                  ;		db 0Fh,8,3,2
  3933                                  ;		db 10h,3,3,2
  3934                                  ;		db 11h,0Dh,3,2
  3935                                  ;		db 12h,8,3,2
  3936                                  ;		db 50h,0Ch,3,2
  3937                                  ;		db 20h,0Ah,2,2
  3938                                  ;		db 21h,0Ah,2,2
  3939                                  ;		db 54h,1,4,0FFh
  3940                                  ;		db 56h,3,3,1
  3941                                  ;		db 52h,1,4,2
  3942                                  ;		db 32h,9,3,3
  3943                                  ;		db 55h,0Ch,3,3
  3944                                  ;		db 57h,9,3,1
  3945                                  ;		db 53h,0Dh,4,1
  3946                                  ;		db 24h,1,4,5
  3947                                  ;		db 0FFh,0FFh,0FFh,0FFh
  3948                                  
  3949                                  ;
  3950                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
  3951                                  ; errors.  Each entry is 4 bytes long:
  3952                                  ;
  3953                                  ;       Err#,Class,Action,Locus
  3954                                  ;
  3955                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
  3956                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
  3957                                  ; THE END.
  3958                                  
  3959                                  ;PUBLIC  ERR_TABLE_24
  3960                                  ERR_TABLE_24: ; LABEL   BYTE
  3961 00000DD3 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3962 00000DD7 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3963 00000DDB 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,    0FFh
  3964 00000DDF 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3965 00000DE3 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,     errLOC_Disk
  3966 00000DE7 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3967 00000DEB 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,     errLOC_Disk
  3968 00000DEF 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3969 00000DF3 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,     errLOC_Disk
  3970 00000DF7 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,    errLOC_SerDev
  3971 00000DFB 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,     0FFh
  3972 00000DFF 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,     0FFh
  3973 00000E03 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,     0FFh
  3974 00000E07 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3975 00000E0B 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3976 00000E0F 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3977 00000E13 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,      errLOC_Net
  3978 00000E17 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3979 00000E1B 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3980 00000E1F FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,     0FFh
  3981                                  
  3982                                  
  3983                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
  3984                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
  3985                                  ;		db 14h,4,5,1
  3986                                  ;		db 15h,5,7,0FFh
  3987                                  ;		db 16h,4,5,1
  3988                                  ;		db 17h,0Bh,4,2
  3989                                  ;		db 18h,4,5,1
  3990                                  ;		db 19h,5,1,2
  3991                                  ;		db 1Ah,0Bh,7,2
  3992                                  ;		db 1Bh,0Bh,4,2
  3993                                  ;		db 1Ch,2,7,4
  3994                                  ;		db 1Dh,5,4,0FFh
  3995                                  ;		db 1Eh,5,4,0FFh
  3996                                  ;		db 1Fh,0Dh,4,0FFh
  3997                                  ;		db 20h,0Ah,2,2
  3998                                  ;		db 21h,0Ah,2,2
  3999                                  ;		db 22h,0Bh,7,2
  4000                                  ;		db 32h,9,3,3
  4001                                  ;		db 23h,7,4,1
  4002                                  ;		db 24h,1,4,5
  4003                                  ;		db 0FFh,0Dh,5,0FFh
  4004                                  
  4005                                  ;
  4006                                  ; We need to map old int 24 errors and device driver errors into the new set
  4007                                  ; of errors. The following table is indexed by the new errors
  4008                                  ;
  4009                                  
  4010                                  ;Public  ErrMap24
  4011                                  ErrMap24: ; Label   BYTE
  4012 00000E23 13                          DB  error_write_protect	; 0
  4013 00000E24 14                          DB  error_bad_unit		; 1
  4014 00000E25 15                          DB  error_not_ready		; 2
  4015 00000E26 16                          DB  error_bad_command	; 3
  4016 00000E27 17                          DB  error_CRC		; 4
  4017 00000E28 18                          DB  error_bad_length	; 5
  4018 00000E29 19                          DB  error_seek		; 6
  4019 00000E2A 1A                          DB  error_not_DOS_disk	; 7
  4020 00000E2B 1B                          DB  error_sector_not_found	; 8
  4021 00000E2C 1C                          DB  error_out_of_paper	; 9
  4022 00000E2D 1D                          DB  error_write_fault	; A
  4023 00000E2E 1E                          DB  error_read_fault	; B
  4024 00000E2F 1F                          DB  error_gen_failure	; C
  4025 00000E30 1F                          DB  error_gen_failure	; D  RESERVED
  4026 00000E31 1F                          DB  error_gen_failure	; E  RESERVED
  4027 00000E32 22                          DB  error_wrong_disk	; F
  4028                                  
  4029                                  ;Public  ErrMap24End
  4030                                  ErrMap24End: ; LABEL   BYTE
  4031                                  
  4032                                  ; 16/07/2018 - Retro DOS v3.0
  4033                                  ;_MAXCALL:	db 	36
  4034                                  ;_MAXCOM:	db	104
  4035                                  
  4036                                  ; 08/09/2018
  4037 00000E33 24                          db  36
  4038 00000E34 68                          db  104
  4039                                  
  4040                                  ;============================================================================
  4041                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  4042                                  ;============================================================================
  4043                                  ; 11/07/2018 - Retro DOS v3.0
  4044                                  
  4045                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  4046                                  
  4047 00000E35 90                      align 2
  4048                                  
  4049                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  4050                                  
  4051                                  ; Standard Functions
  4052                                  ;DISPATCH    LABEL WORD
  4053                                  DISPATCH:
  4054                                  	; 16/07/2018 - Retro DOS v3.0
  4055                                  	; (MSDOS 3.3)
  4056                                  
  4057 00000E36 [0E68]                          short_addr  _$ABORT			    ;  0      0
  4058 00000E38 [0A24]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  4059 00000E3A [1324]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  4060 00000E3C [CC24]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  4061 00000E3E [E924]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  4062 00000E40 [EF24]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  4063 00000E42 [5C23]                          short_addr  _$RAW_CON_IO		    ;  6      6
  4064 00000E44 [8823]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  4065 00000E46 [2F21]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  4066 00000E48 [8921]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  4067 00000E4A [9521]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  4068 00000E4C [0325]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  4069 00000E4E [0D25]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  4070 00000E50 [F01D]                          short_addr  _$DISK_RESET		    ; 13      D
  4071 00000E52 [EC1C]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  4072 00000E54 [E82B]                          short_addr  _$FCB_OPEN			    ; 15      F
  4073 00000E56 [B625]                          short_addr  _$FCB_CLOSE			    ; 16     10
  4074 00000E58 [FC2C]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  4075 00000E5A [912D]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  4076 00000E5C [5225]                          short_addr  _$FCB_DELETE		    ; 19     13
  4077 00000E5E [E82C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  4078 00000E60 [ED2C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  4079 00000E62 [CE2C]                          short_addr  _$FCB_CREATE		    ; 22     16
  4080 00000E64 [2726]                          short_addr  _$FCB_RENAME		    ; 23     17
  4081                                  	; 16/07/2018
  4082                                          ;short_addr _CPMFUNC			    ; 24     18	
  4083 00000E66 [B717]                          short_addr  NO_OP			    ; 24     18
  4084 00000E68 [E71C]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  4085 00000E6A [DC1C]                          short_addr  _$SET_DMA			    ; 26     1A
  4086                                  
  4087                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4088                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4089                                  ;                                                                          ;
  4090 00000E6C [791D]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  4091 00000E6E [7B1D]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  4092                                  ;                                                                          ;
  4093                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4094                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4095                                  
  4096                                          ;short_addr  _CPMFUNC			    ; 29     1D
  4097                                          ;short_addr  _CPMFUNC			    ; 30     1E
  4098                                  
  4099                                  ; 08/07/2018 - Retro DOS v3.0
  4100                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4101                                  
  4102 00000E70 [B717]                  	short_addr  NO_OP			    ; 29     1D
  4103 00000E72 [B717]                  	short_addr  NO_OP			    ; 30     1E
  4104                                  
  4105                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4106                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4107                                  ;                                                                          ;
  4108 00000E74 [BF1D]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  4109                                  ;                                                                          ;
  4110                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4111                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4112                                          ;short_addr _CPMFUNC			    ; 32     20
  4113                                  
  4114                                  ; 08/07/2018 - Retro DOS v3.0
  4115                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4116                                  
  4117 00000E76 [B717]                  	short_addr  NO_OP			    ; 32     20
  4118                                  
  4119 00000E78 [F22C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  4120 00000E7A [F72C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  4121 00000E7C [6725]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  4122 00000E7E [3A25]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  4123                                  
  4124                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  4125                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  4126                                  
  4127                                  ; Extended Functions
  4128 00000E80 [0E1D]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  4129                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4130                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4131                                  ;                                                                          ;
  4132 00000E82 [FC1E]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  4133                                  ;                                                                          ;
  4134                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4135                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4136 00000E84 [E32C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  4137 00000E86 [DE2C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  4138 00000E88 [6E1D]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  4139 00000E8A [BF18]                          short_addr  _$GET_DATE                      ; 42     2A
  4140 00000E8C [DC18]                          short_addr  _$SET_DATE                      ; 43     2B
  4141 00000E8E [FC18]                          short_addr  _$GET_TIME                      ; 44     2C
  4142 00000E90 [0D19]                          short_addr  _$SET_TIME                      ; 45     2D
  4143 00000E92 [BA1A]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  4144                                  
  4145                                  ; Extended functionality group
  4146 00000E94 [C81C]                          short_addr  _$GET_DMA                       ; 47     2F
  4147 00000E96 [9C1A]                          short_addr  _$GET_VERSION                   ; 48     30
  4148 00000E98 [B267]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  4149                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4150                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4151                                  ;                                                                          ;
  4152 00000E9A [C11D]                          short_addr  _$GET_DPB			    ; 50     32
  4153                                  ;                                                                          ;
  4154                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4155                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4156 00000E9C [9D14]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  4157 00000E9E [A71D]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  4158 00000EA0 [FE1C]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  4159 00000EA2 [9D1C]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  4160 00000EA4 [261D]                          short_addr  _$CHAR_OPER                     ; 55     37
  4161 00000EA6 [C11A]                          short_addr  _$INTERNATIONAL                 ; 56     38
  4162                                  ; XENIX CALLS
  4163                                  ;   Directory Group
  4164 00000EA8 [D02F]                          short_addr  _$MKDIR			    ; 57     39
  4165 00000EAA [222F]                          short_addr  _$RMDIR			    ; 58     3A
  4166 00000EAC [5E2F]                          short_addr  _$CHDIR			    ; 59     3B
  4167                                  ;   File Group
  4168 00000EAE [3474]                          short_addr  _$CREAT			    ; 60     3C
  4169 00000EB0 [7A73]                          short_addr  _$OPEN			    ; 61     3D
  4170 00000EB2 [0771]                          short_addr  _$CLOSE		 	    ; 62     3E
  4171 00000EB4 [1F72]                          short_addr  _$READ			    ; 63     3F
  4172 00000EB6 [7472]                          short_addr  _$WRITE			    ; 64     40
  4173 00000EB8 [8974]                          short_addr  _$UNLINK			    ; 65     41
  4174 00000EBA [7972]                          short_addr  _$LSEEK			    ; 66     42
  4175 00000EBC [4174]                          short_addr  _$CHMOD			    ; 67     43
  4176 00000EBE [2D30]                          short_addr  _$IOCTL			    ; 68     44
  4177 00000EC0 [3573]                          short_addr  _$DUP			    ; 69     45
  4178 00000EC2 [5773]                          short_addr  _$DUP2			    ; 70     46
  4179 00000EC4 [C52E]                          short_addr  _$CURRENT_DIR		    ; 71     47
  4180                                  ;   Memory Group
  4181 00000EC6 [9368]                          short_addr  _$ALLOC			    ; 72     48
  4182 00000EC8 [B069]                          short_addr  _$DEALLOC                       ; 73     49
  4183 00000ECA [8C69]                          short_addr  _$SETBLOCK                      ; 74     4A
  4184                                  ;   Process Group
  4185 00000ECC [2763]                          short_addr  _$EXEC			    ; 75     4B
  4186 00000ECE [EA67]                          short_addr  _$EXIT			    ; 76     4C
  4187 00000ED0 [1D63]                          short_addr  _$WAIT			    ; 77     4D
  4188 00000ED2 [042E]                          short_addr  _$FIND_FIRST		    ; 78     4E
  4189                                  ;   Special Group
  4190 00000ED4 [5D2E]                          short_addr  _$FIND_NEXT			    ; 79     4F
  4191                                  ; SPECIAL SYSTEM GROUP
  4192                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4193                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4194                                  ;                                                                          ;
  4195 00000ED6 [9114]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  4196 00000ED8 [9714]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  4197 00000EDA [B31D]                          short_addr  _$GET_IN_VARS                   ; 82     52
  4198 00000EDC [201E]                          short_addr  _$SETDPB			    ; 83     53
  4199                                  ;                                                                          ;
  4200                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4201                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4202 00000EDE [B51A]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  4203                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4204                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4205                                  ;                                                                          ;
  4206 00000EE0 [EE1E]                          short_addr  _$DUP_PDB                       ; 85     55
  4207                                  ;                                                                          ;
  4208                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4209                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4210 00000EE2 [B174]                          short_addr  _$RENAME			    ; 86     56
  4211 00000EE4 [E572]                          short_addr  _$FILE_TIMES                    ; 87     57
  4212 00000EE6 [D169]                          short_addr  _$ALLOCOPER                     ; 88     58
  4213                                  
  4214                                  ; 08/07/2018 - Retro DOS v3.0
  4215                                  ; -------------------------------------------------------------------------;
  4216                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4217                                  
  4218                                  ; Network extention system calls
  4219 00000EE8 [4B1D]                          short_addr  _$GetExtendedError              ; 89     59
  4220 00000EEA [3E75]                          short_addr  _$CreateTempFile                ; 90     5A
  4221 00000EEC [2675]                          short_addr  _$CreateNewFile                 ; 91     5B
  4222 00000EEE [D675]                          short_addr  _$LockOper                      ; 92     5C
  4223 00000EF0 [F369]                          short_addr  _$ServerCall                    ; 93     5D
  4224 00000EF2 [486C]                          short_addr  _$UserOper                      ; 94     5E
  4225 00000EF4 [D76B]                          short_addr  _$AssignOper                    ; 95     5F
  4226 00000EF6 [A070]                          short_addr  _$NameTrans                     ; 96     60
  4227 00000EF8 [B717]                  	short_addr  NO_OP			    ; 97     61
  4228 00000EFA [9714]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  4229                                  ; the next call is reserved for hangool sys call
  4230                                  	; 16/07/2018
  4231                                  	;short_addr  _$ECS_Call			    ; 99     63
  4232 00000EFC [B717]                  	short_addr  NO_OP			    ; 99     63
  4233                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4234                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4235                                  ;                                                                          ;
  4236 00000EFE [C414]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  4237                                  ;                                                                          ;
  4238                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4239                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4240 00000F00 [471B]                          short_addr  _$GetExtCntry                   ; 101    65
  4241 00000F02 [461C]                          short_addr  _$GetSetCdPg                    ; 102    66
  4242 00000F04 [5671]                          short_addr  _$ExtHandle                     ; 103    67
  4243 00000F06 [3A71]                          short_addr  _$COMMIT                        ; 104    68
  4244                                  
  4245                                  ; 08/07/2018
  4246                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  4247                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  4248                                  
  4249                                  ;	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  4250                                  ;	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  4251                                  ;	short_addr  NO_OP                           ; 107    6B   
  4252                                  ;						    ; IFS_IOCTL no longer 
  4253                                  ;						    ; supported
  4254                                  ;	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  4255                                  
  4256                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4257                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4258                                  ;                                                                          ;
  4259                                  ;ifdef ROMEXEC
  4260                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  4261                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  4262                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  4263                                  ;endif
  4264                                  ;                                                                          ;
  4265                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4266                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4267                                  
  4268                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  4269                                  
  4270                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  4271                                  
  4272                                  ; 08/07/2018 - Retro DOS v3.0
  4273                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4274                                  
  4275                                  ;	If	Installed
  4276                                  
  4277                                  align 2
  4278                                  
  4279                                  ;PUBLIC FOO
  4280                                  
  4281                                  FOO:	; LABEL WORD
  4282 00000F08 [6918]                          short_addr  Leave2F
  4283                                  
  4284 00000F0A [0C0F]                  DTab:	DW  DOSTable
  4285                                  
  4286                                  	;PUBLIC FOO,DTAB
  4287                                  
  4288                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  4289                                         
  4290                                  DOSTable:  ; LABEL  WORD
  4291 00000F0C 2F                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  46
  4292 00000F0D [9618]                          short_addr  DOSInstall          ;   0 install check
  4293 00000F0F [2F3B]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  4294 00000F11 [1B1D]                          short_addr  RECSET              ;   2   RECSET
  4295 00000F13 [9318]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  4296 00000F15 [2959]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  4297 00000F17 [1524]                          short_addr  OUTT                ;   5   OUT
  4298 00000F19 [955B]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  4299 00000F1B [F760]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  4300 00000F1D [273C]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  4301 00000F1F [BB62]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  4302 00000F21 [7076]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  4303 00000F23 [D938]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  4304 00000F25 [C238]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  4305 00000F27 [5419]                          short_addr  DATE16              ;   13  DATE16
  4306 00000F29 [2C20]                          short_addr  Idle		;   14      empty slot
  4307 00000F2B [EB60]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  4308 00000F2D [2C20]                          short_addr  Idle		;   16      empty slot
  4309 00000F2F [F51F]                          short_addr  StrCpy              ;   17  StrCpy
  4310 00000F31 [0D20]                          short_addr  StrLen              ;   18  StrLen
  4311 00000F33 [ED58]                          short_addr  UCase		;   19  UCase
  4312 00000F35 [8F61]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  4313 00000F37 [9262]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  4314 00000F39 [576B]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  4315 00000F3B [086D]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  4316 00000F3D [4916]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  4317 00000F3F [B56C]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  4318 00000F41 [C570]                          short_addr  DriveFromText       ;   26  DriveFromText
  4319 00000F43 [FB19]                          short_addr  SETYEAR             ;   27  SETYEAR
  4320 00000F45 [921A]                          short_addr  DSUM                ;   28  DSUM
  4321 00000F47 [EF19]                          short_addr  DSLIDE              ;   29  DSLIDE
  4322 00000F49 [D71F]                          short_addr  StrCmp              ;   30  StrCmp
  4323 00000F4B [FB6B]                          short_addr  InitCDS             ;   31  initcds
  4324 00000F4D [296B]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  4325 00000F4F [A070]                          short_addr  _$NameTrans		;   33  $NameTrans
  4326 00000F51 [DE17]                          short_addr  CAL_LK              ;   34  CAL_LK
  4327 00000F53 [D54C]                          short_addr  DEVNAME             ;   35  DEVNAME
  4328 00000F55 [2C20]                          short_addr  Idle                ;   36  Idle
  4329 00000F57 [1B20]                          short_addr  DStrLen             ;   37  DStrLen
  4330 00000F59 [AE20]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  4331 00000F5B [0771]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  4332 00000F5D [B420]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  4333 00000F5F [1F72]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  4334 00000F61 [8D20]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  4335 00000F63 [ED20]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  4336 00000F65 [E020]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  4337 00000F67 [0A21]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  4338                                          
  4339                                  	; 10/08/2018
  4340                                  	;short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  4341                                  
  4342 00000F69 [B717]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  4343                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  4344                                  
  4345                                  DOSTableEnd:  ; LABEL BYTE
  4346                                  
  4347                                  	;ENDIF
  4348                                  
  4349                                  ;============================================================================
  4350                                  ; DOSTAB.ASM, MSDOS 6.0, 1991
  4351                                  ;============================================================================
  4352                                  ; 16/07/2018 - Retro DOS v3.0
  4353                                  
  4354                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
  4355                                  
  4356                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
  4357                                  ;
  4358                                  	;PUBLIC	SysInitTable
  4359                                  
  4360                                  SysInitTable:	; label  byte
  4361 00000F6B [2600]                  	dw      SYSINITVARS			; pointer to sysinit var
  4362 00000F6D 0000                            dw      0                             	; segment
  4363 00000F6F [3B10]                          dw      COUNTRY_CDPG		   	; pointer to country tabl
  4364 00000F71 0000                            dw      0                            	; segment of pointer
  4365                                  
  4366                                  ; DOS 3.3 F.C. 6/12/86
  4367                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
  4368                                  ;
  4369                                  	;PUBLIC	FastOpenTable
  4370                                  	;PUBLIC	FastTable		; a better name
  4371                                  	;EXTRN	FastRet:FAR		; defined in misc2.asm
  4372                                  
  4373                                  ; MSDOS 6.0
  4374                                  ;FastTable:     ;label  byte		; a better name
  4375                                  ;FastOpenTable: ;label  byte
  4376                                  ;	dw      2                       ; number of entries
  4377                                  ;	dw      FastRet			; pointer to ret instr.
  4378                                  ;	dw      0                       ; and will be modified by
  4379                                  ;	dw      FastRet			; FASTxxx when loaded in
  4380                                  ;	dw      0                       
  4381                                  
  4382                                  ;
  4383                                  ; DOS 3.3 F.C. 6/12/86
  4384                                  ;
  4385                                  
  4386                                  ;	PUBLIC	FastFlg                 ; flags
  4387                                  ;FastFlg:	;label  byte		; don't change the foll: order
  4388                                  ;FastOpenFlg:
  4389                                  ;	db	0  ; I_am    FastOpenFlg,BYTE,<0>
  4390                                  
  4391                                  ; MSDOS 3.3
  4392                                  FastTable:
  4393                                  FastOpenTable:
  4394 00000F73 0400                    	dw	4 
  4395 00000F75 [AA20]                  	dw	FastRet
  4396 00000F77 0000                    	dw	0  ; (('FastRet' segment will be set to CS by DOSINIT))
  4397                                  
  4398                                  	;PUBLIC	FastOpen_Ext_Info
  4399                                  
  4400                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
  4401                                  ; and clusnum  which are filled by DOS 3.ncwhen calling FastOpen Insert
  4402                                  ; or filled by FastOPen when calling FastOpen Lookup
  4403                                  
  4404                                  FastOpen_Ext_Info: ;label  byte		;dirpos
  4405 00000F79 00<rep Bh>              	times	FEI.size db 0	; 5 (for MSDOS 3.3), 11 (for MSDOS 6.0)
  4406                                  
  4407                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
  4408                                  ; when calling FastOpen Lookup
  4409                                  
  4410                                  	;PUBLIC	Dir_Info_Buff
  4411                                  
  4412                                  Dir_Info_Buff:	; label  byte
  4413 00000F84 00<rep 20h>             	times	dir_entry.size db 0 ; 32 ; segment of pointer
  4414                                  
  4415                                  ; MSDOS 3.3 (IBMDOS.COM, 1987)
  4416                                  FastFlg:
  4417                                  FastOpenFlg:
  4418 00000FA4 00                      	db	0
  4419                                  
  4420                                  	;I_am	Next_Element_Start,WORD	; save next element start offset
  4421                                  Next_Element_Start:
  4422 00000FA5 0000                    	dw	0
  4423                                  
  4424                                  	; MSDOS 6.0
  4425                                  	;I_am    Del_ExtCluster,WORD     ; for dos_delete                       
  4426                                  
  4427                                  ; 17/07/2018
  4428                                  
  4429                                  ; The following is a stack and its pointer for interrupt 2F which is uesd
  4430                                  ; by NLSFUNC.  There is no significant use of this stack, we are just trying
  4431                                  ; not to destroy the INT 21 stack saved for the user.
  4432                                  
  4433                                  	;PUBLIC	USER_SP_2F
  4434                                  
  4435                                  USER_SP_2F:	; LABEL  WORD
  4436 00000FA7 [A90F]                  	dw	FAKE_STACK_2F
  4437                                  
  4438                                  	;PUBLIC	Packet_Temp
  4439                                  ;Packet_Temp	label  word		; temporary packet used by readtime
  4440                                  	;PUBLIC  DOS_TEMP		; temporary word
  4441                                  ;DOS_TEMP	label  word
  4442                                  FAKE_STACK_2F:
  4443                                  	;dw	14 dup (0)
  4444 00000FA9 0000<rep Ch>            	times	12 dw 0			; 12 register temporary storage
  4445                                  
  4446                                  	;PUBLIC	Hash_Temp		; temporary word
  4447                                  ;Hash_Temp	label  word              
  4448                                  	;dw	4 dup (0)		; temporary hash table during config.sys
  4449                                  
  4450                                  	;PUBLIC  SCAN_FLAG             	; flag to indicate key ALT_Q
  4451                                  SCAN_FLAG:	; label  byte
  4452 00000FC1 00                      	db	0
  4453                                  
  4454                                  ; MSDOS 3.3
  4455                                  DISK_FULL:
  4456 00000FC2 00                      	db	0
  4457                                  
  4458                                  	;PUBLIC  DATE_FLAG
  4459                                  DATE_FLAG:   	;label  word 		; flag to
  4460 00000FC3 0000                    	dw     0                	; to update the date
  4461                                  
  4462                                  ;FETCHI_TAG:	;label  word		; OBSOLETE - no longer used
  4463                                  ;	dw     0			; formerly part of IBM's piracy protection
  4464                                  
  4465                                  ; 24/07/2019 - Retro DOS v3.2
  4466                                  ; (MSDOS 6.0)
  4467                                  ;*** New FCB Implementation
  4468                                  ; This variable is used as a cache in the new FCB implementation to remember
  4469                                  ;the address of a local SFT that can be recycled for a regenerate operation
  4470                                  
  4471                                  LocalSFT: 
  4472 00000FC5 00000000                	dd	0			; 0 to indicate invalid pointer
  4473                                  OLD_FIRSTCLUS:
  4474 00000FC9 0000                    	dw	0			; save old first cluster for fastopen
  4475                                  CL0FATENTRY:
  4476 00000FCB FFFF                    	dw	-1			; M014:	Holds the data that
  4477                                  					; is used in pack/unpack rts.
  4478                                  					; in fat.asm if cluster 0 is specified.
  4479                                  					; SR;
  4480                                  ; MSDOS 6.0
  4481                                  ;      PUBLIC	MSG_EXTERROR 		; for system message addr              
  4482                                  ;MSG_EXTERROR	label  DWORD                                                     
  4483                                  ;               dd     0                ; for extended error                   
  4484                                  ;               dd     0                ; for parser                           
  4485                                  ;              	dd     0                ; for critical errror                  
  4486                                  ;              	dd     0                ; for IFS                              
  4487                                  ;              	dd     0                ; for code reduction                   
  4488                                  ;
  4489                                  ;      PUBLIC  	SEQ_SECTOR              ; last sector read                     
  4490                                  ;SEQ_SECTOR    	label  DWORD                                                     
  4491                                  ;              	dd     -1                                                        
  4492                                  ;
  4493                                  ;;      I_am    ACT_PAGE,WORD,<-1>      ; active EMS page                       
  4494                                  ;	I_am    SC_SECTOR_SIZE,WORD     ; sector size for SC                 
  4495                                  ;       I_am    SC_DRIVE,BYTE           ; drive # for secondary cache        
  4496                                  ;       I_am    CurSC_DRIVE,BYTE,<-1>   ; current SC drive                   
  4497                                  ;       I_am    CurSC_SECTOR,DWORD      ; current SC starting sector         
  4498                                  ;       I_am    SC_STATUS,WORD,<0>      ; SC status word                     
  4499                                  ;       I_am    SC_FLAG,BYTE,<0>        ; SC flag                            
  4500                                  ;       I_am    AbsDskErr,WORD,<0>	; Storage for Abs dsk read/write err
  4501                                  ;
  4502                                  ;	PUBLIC 	NO_NAME_ID                                                           
  4503                                  ;NO_NAME_ID	label byte                                                           
  4504                                  ;		db   'NO NAME    '	; null media id                      
  4505                                  ;
  4506                                  ;;hkn; moved from TABLE segment in kstrin.asm
  4507                                  ;
  4508                                  ;Public	KISTR001S,KISTR001E,LOOKSIZ	; 2/17/KK
  4509                                  ;KISTR001S	label	byte		; 2/17/KK
  4510                                  ;LOOKSIZ DB	0			; 0 if byte, NZ if word	2/17/KK
  4511                                  ;KISTR001E	label	byte		; 2/17/KK
  4512                                  ;
  4513                                  ;; the nul device driver used to be part of the code. However, since the 
  4514                                  ;; header is in the data, and the entry points are only given as an offset,
  4515                                  ;; the strategy and interrupt entry points must also be in the data now.
  4516                                  ;;
  4517                                  ;
  4518                                  ;procedure   snuldev,far
  4519                                  ;assume ds:nothing,es:nothing,ss:nothing, cs:dosdata
  4520                                  ; 	or	es:[bx.reqstat],stdon	; set done bit
  4521                                  ;entry inuldev
  4522                                  ;	ret				; must not be a return!
  4523                                  ;endproc snuldev
  4524                                  ;
  4525                                  
  4526                                  ; 24/07/2019
  4527                                  AbsDskErr:
  4528 00000FCD 0000                    	dw	0			; Storage for Abs dsk read/write err
  4529                                  
  4530                                  ;============================================================================
  4531                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  4532                                  ;============================================================================
  4533                                  ; 17/07/2018 - Retro DOS v3.0
  4534                                  
  4535                                  ; ----------------------------------------------------------------------------
  4536                                  ; BREAK   <Copyright notice and version>
  4537                                  ; ----------------------------------------------------------------------------
  4538                                  
  4539                                  ;CODSTRT EQU     $
  4540                                  
  4541                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  4542                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  4543                                  
  4544                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  4545                                  ;       module. The reason is so that the data alignments are the same in
  4546                                  ;       IBM-DOS and MS-DOS up through header.
  4547                                  
  4548                                  	;PUBLIC	HEADER
  4549                                  
  4550                                  HEADER:	; LABEL	BYTE
  4551                                          ;IF	DEBUG
  4552                                          ;DB	13,10,"Debugging DOS version "
  4553                                          ;DB	MAJOR_VERSION + "0"
  4554                                          ;DB	"."
  4555                                          ;DB	(MINOR_VERSION / 10) + "0"
  4556                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  4557                                          ;ENDIF
  4558                                  
  4559                                          ;IF	NOT IBM
  4560 00000FCF 0D0A4D532D444F5320-             DB	13,10,"MS-DOS version "
  4560 00000FD8 76657273696F6E20   
  4561 00000FE0 33                              DB	MAJOR_VERSION + "0"
  4562 00000FE1 2E                              DB	"."
  4563 00000FE2 33                              DB	(MINOR_VERSION / 10) + "0"
  4564                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  4565 00000FE3 30                              DB	(MINOR_VERSION % 10) + "0"
  4566                                  
  4567                                          ;IF	HIGHMEM
  4568                                          ;DB	"H"
  4569                                          ;ENDIF
  4570                                  
  4571 00000FE4 0D0A436F7079726967-     	DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  4571 00000FED 687420313938312C38-
  4571 00000FF6 322C38332C38342C38-
  4571 00000FFF 38204D6963726F736F-
  4571 00001008 667420436F72702E0D-
  4571 00001011 0A24               
  4572                                  	;ENDIF
  4573                                  
  4574                                  ;IF DEBUG
  4575                                  ;	DB	13,10,"$"
  4576                                  ;ENDIF
  4577                                  
  4578                                  ;include copyrigh.inc
  4579                                  
  4580                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  4581                                  	;DB	"Licensed Material - Property of Microsoft "
  4582                                  	;DB	"All rights reserved "
  4583                                  
  4584                                  ;============================================================================
  4585                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4586                                  ;============================================================================
  4587                                  ; 17/07/2018 - Retro DOS v3.0
  4588                                  
  4589                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4590                                  ;	NAME	IBMCODE
  4591                                  
  4592                                  ;BREAK <NullDev -- Driver for null device>
  4593                                  
  4594                                  ; ROMDOS note:
  4595                                  ;	NUL device driver used to be here, but it was removed and placed in
  4596                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4597                                  ;	header, which is also in DOSDATA.
  4598                                  
  4599                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4600                                  
  4601                                  ;Public MSC001S,MSC001E
  4602                                  ;MSC001S label byte
  4603                                  	;IF	IBM
  4604                                  ; Codes returned by BIOS
  4605                                  ERRIN:
  4606 00001013 02                      	DB	2			; NO RESPONSE
  4607 00001014 06                      	DB	6			; SEEK FAILURE
  4608 00001015 0C                      	DB	12			; GENERAL ERROR
  4609 00001016 04                      	DB	4			; BAD CRC
  4610 00001017 08                      	DB	8			; SECTOR NOT FOUND
  4611 00001018 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4612                                  ERROUT:
  4613                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4614 00001019 80                      	DB	80H			; NO RESPONSE
  4615 0000101A 40                      	DB	40H			; Seek failure
  4616 0000101B 02                      	DB	2			; Address Mark not found
  4617 0000101C 10                      	DB	10H			; BAD CRC
  4618 0000101D 04                      	DB	4			; SECTOR NOT FOUND
  4619 0000101E 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4620                                  
  4621                                  NUMERR	EQU	$-ERROUT
  4622                                  	;ENDIF
  4623                                  ;MSC001E label byte
  4624                                  
  4625                                  ;============================================================================
  4626                                  ; DOSMES.INC (MSDOS 3.3, 1987)
  4627                                  ;============================================================================
  4628                                  ; 17/07/2018 - Retro DOS v3.0
  4629                                  
  4630                                  ;TABLE	SEGMENT BYTE PUBLIC 'TABLE'
  4631                                  
  4632                                  ; The international table(s). Used for DOS 3.x  (x < 3)
  4633                                  ; This is simply a sequence of tables of the following form:
  4634                                  ;
  4635                                  ; Offset
  4636                                  ;		BYTE  Size of this table excluding this byte and the next
  4637                                  ;		WORD  Country code represented by this table
  4638                                  ;			A sequence of n bytes, where n is the number specified
  4639                                  ;			by the first byte above and is not > internat_block_max,
  4640                                  ;			in the correct order for being returned by the
  4641                                  ;			INTERNATIONAL call as follows:
  4642                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  4643                                  ;		5 BYTE	Currency symbol null terminated
  4644                                  ;		2 BYTE	thousands separator null terminated
  4645                                  ;		2 BYTE	Decimal point null terminated
  4646                                  ;		2 BYTE	Date separator null terminated
  4647                                  ;		2 BYTE	Time separator null terminated
  4648                                  ;		1 BYTE	Bit field.  Currency format.
  4649                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  4650                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  4651                                  ;			Bit 2.	=1 imbedded at decimal point, & no spaces;
  4652                                  ;		1 BYTE	No. of significant decimal digits in currency
  4653                                  ;		1 BYTE	Bit field.  Time format.
  4654                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  4655                                  ;		WORD	Segment offset for address of case conversion routine
  4656                                  ;		WORD	RESERVED. Filled in by DOS. Segment value for above routine
  4657                                  ;		2 BYTE	Data list separator null terminated.
  4658                                  ;		   NOTE: The segment part of the DWORD Map_call is set
  4659                                  ;			by the INTERNATIONAL call. Do not try to initialize
  4660                                  ;			it to anything meaningful.
  4661                                  ;
  4662                                  ; The list of tables is terminated by putting a byte of -1 after the last
  4663                                  ;	table (a table with length -1).
  4664                                  
  4665                                  	; PUBLIC  international_table
  4666                                  
  4667                                  ; Offset 0F95h in IBMDOS.COM (MSDOS 3.3), 1987
  4668                                  
  4669                                  international_table:	; LABEL BYTE
  4670                                  
  4671 0000101F 18                      	DB 	INTERNAT_BLOCK.size  ; = 24 ; Size in bytes of this table
  4672 00001020 0100                    	DW 	1		; Country code
  4673                                  USTABLE:
  4674 00001022 0000                    	dw	0		; 0-USA, 1-EUR, 2-JAP
  4675 00001024 2400000000              	db	'$',0,0,0,0	; Currency Symbol 5 bytes
  4676 00001029 2C00                    	db	',',0		; Thousands separator 2 bytes
  4677 0000102B 2E00                    	db	'.',0		; Decimal separator 2 bytes
  4678 0000102D 2D00                    	db	'-',0		; Date separator 2 bytes
  4679 0000102F 3A00                    	db	':',0		; Time separator 2 bytes
  4680 00001031 00                      	db	0		; Bit values
  4681                                                                 	;   Bit 0 = 0 if currency symbol first
  4682                                                                 	;         = 1 if currency symbol last
  4683                                                                 	;   Bit 1 = 0 if No space after currency symbol
  4684                                                                 	;         = 1 if space after currency symbol
  4685 00001032 02                      	db	2		; Number of places after currency dec point
  4686 00001033 00                      	db	0		; if 24 hour time, 0 if 12 hour time
  4687 00001034 [9918]                  	dw	MAP_CASE	; Address of case mapping call (DWORD)
  4688 00001036 0000                            dw	0		; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  4689                                  				;  in pieces.
  4690 00001038 2C00                    	db	',',0		; Data list separator character
  4691                                  
  4692                                  ;	Tables for the IBM PC character set follow. The values
  4693                                  ;	associated with some of the currency symbols may change with
  4694                                  ;	other character sets. You may wish to add or delete country
  4695                                  ;	entries. NOTE: It is not a mistake that the JAPANESE entry
  4696                                  ;	has different currency symbols for the KANJI and
  4697                                  ;	non-KANJI versions.
  4698                                  	
  4699 0000103A FF                      	DB	-1		; end of table
  4700                                  
  4701                                  ; The following table is used for DOS 3.3
  4702                                  ;DOS country and code page information is defined here for DOS 3.3.
  4703                                  ;The initial value for ccDosCountry is 1 (USA).
  4704                                  ;The initial value for ccDosCodepage is 850.
  4705                                  ;
  4706                                  ;
  4707                                  	;PUBLIC  COUNTRY_CDPG,UCASE_TAB,FILE_UCASE_TAB
  4708                                  	;PUBLIC  FILE_CHAR_TAB
  4709                                  
  4710                                  ; country and code page infomation
  4711                                  
  4712                                  COUNTRY_CDPG:	; label  byte
  4713 0000103B 0000000000000000        	db	0,0,0,0,0,0,0,0		; reserved words
  4714 00001043 5C434F554E5452592E-     	db	'\COUNTRY.SYS',0	; path name of country.sys
  4714 0000104C 53595300           
  4715 00001050 00<rep 33h>             	times	51 db 0
  4716 00001083 B501                    	dw	437			; system code page id
  4717 00001085 0500                    	dw	5			; number of entries
  4718 00001087 02                      	db	SetUcase		; Ucase type
  4719 00001088 [C410]                  	dw	UCASE_TAB		; pointer to upper case table
  4720 0000108A 0000                    	dw	0			; segment of poiter
  4721 0000108C 04                      	db	SetUcaseFile		; Ucase file char type
  4722 0000108D [4611]                  	dw	FILE_UCASE_TAB		; pointer to file upper case table
  4723 0000108F 0000                    	dw	0			; segment of poiter
  4724 00001091 05                      	db	SetFileList		; valid file chars type
  4725 00001092 [C811]                  	dw	FILE_CHAR_TAB		; pointer to valid file char tab
  4726 00001094 0000                    	dw	0			; segment of poiter
  4727 00001096 06                      	db	SetCollate		; collate type
  4728 00001097 [F811]                  	dw	COLLATE_TAB		; pointer to collate table
  4729 00001099 0000                    	dw	0			; segment of pointer
  4730 0000109B 01                      	db	SetCountryInfo		; country info type
  4731 0000109C 2600                    	dw	NEW_COUNTRY_SIZE	; extended country info size
  4732 0000109E 0100                    	dw	1			; USA country id
  4733 000010A0 B501                    	dw	437			; USA system code page id
  4734 000010A2 0000                    	dw	0			; date format
  4735 000010A4 2400000000              	db	'$',0,0,0,0		; currency symbol
  4736 000010A9 2C00                    	db	',',0			; thousand separator
  4737 000010AB 2E00                    	db	'.',0			; decimal separator
  4738 000010AD 2D00                    	db	'-',0			; date separator
  4739 000010AF 3A00                    	db	':',0			; time separator
  4740 000010B1 00                      	db	0			; currency format flag
  4741 000010B2 02                      	db	2			; # of disgit in currency
  4742 000010B3 00                      	db	0			; time format
  4743 000010B4 [9918]                  	dw	MAP_CASE		;mono case routine entry point
  4744 000010B6 0000                    	dw	0			; segment of entry point
  4745 000010B8 2C00                    	db	',',0			; data list separator
  4746 000010BA 000000000000000000-     	dw	0,0,0,0,0		; reserved
  4746 000010C3 00                 
  4747                                  
  4748                                  ; upper case table
  4749                                  
  4750                                  UCASE_TAB: 	; label   byte
  4751 000010C4 8000                    	dw	128
  4752 000010C6 809A45418E418F80        	db	128,154,069,065,142,065,143,128
  4753 000010CE 4545454949498E8F        	db	069,069,069,073,073,073,142,143
  4754 000010D6 9092924F994F5555        	db	144,146,146,079,153,079,085,085
  4755 000010DE 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
  4756 000010E6 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
  4757 000010EE A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
  4758 000010F6 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4759 000010FE B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4760 00001106 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4761 0000110E C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4762 00001116 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4763 0000111E D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4764 00001126 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
  4765 0000112E E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4766 00001136 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4767 0000113E F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4768                                  
  4769                                  ; file upper case table
  4770                                  
  4771                                  FILE_UCASE_TAB: ; label  byte
  4772 00001146 8000                    	dw	128
  4773 00001148 809A45418E418F80        	db	128,154,069,065,142,065,143,128
  4774 00001150 4545454949498E8F        	db	069,069,069,073,073,073,142,143
  4775 00001158 9092924F994F5555        	db	144,146,146,079,153,079,085,085
  4776 00001160 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
  4777 00001168 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
  4778 00001170 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
  4779 00001178 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4780 00001180 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4781 00001188 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4782 00001190 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4783 00001198 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4784 000011A0 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4785 000011A8 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
  4786 000011B0 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4787 000011B8 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4788 000011C0 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4789                                  
  4790                                  ; file char list
  4791                                  
  4792                                  FILE_CHAR_TAB:	; label  byte
  4793 000011C8 1600                    	dw	22				; length
  4794 000011CA 0100FF                  	db	1,0,255 			; include all
  4795 000011CD 000020                  	db	0,0,20h 			; exclude 0 - 20h
  4796 000011D0 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
  4796 000011D9 7C3C3E2B3D3B2C     
  4797                                  	;db	24 dup (?)			; reserved
  4798 000011E0 00<rep 18h>             	times	24 db 0
  4799                                  
  4800                                  ; collate table
  4801                                  
  4802                                  COLLATE_TAB:	; label   byte
  4803 000011F8 0001                    	dw	256
  4804 000011FA 0001020304050607        	db	0,1,2,3,4,5,6,7
  4805 00001202 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
  4806 0000120A 1011121314151617        	db	16,17,18,19,20,21,22,23
  4807 00001212 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
  4808 0000121A 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
  4809 00001222 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
  4810 0000122A 3031323334353637        	db	"0","1","2","3","4","5","6","7"
  4811 00001232 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
  4812 0000123A 4041424344454647        	db	"@","A","B","C","D","E","F","G"
  4813 00001242 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
  4814 0000124A 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
  4815 00001252 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
  4816 0000125A 6041424344454647        	db	"`","A","B","C","D","E","F","G"
  4817 00001262 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
  4818 0000126A 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
  4819 00001272 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
  4820 0000127A 4355454141414143        	db	"C","U","E","A","A","A","A","C"
  4821 00001282 4545454949494141        	db	"E","E","E","I","I","I","A","A"
  4822 0000128A 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
  4823 00001292 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
  4824 0000129A 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
  4825 000012A2 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
  4826 000012AA B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4827 000012B2 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4828 000012BA C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4829 000012C2 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4830 000012CA D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4831 000012D2 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4832 000012DA E053                    	db	224,"S"
  4833 000012DC E2E3E4E5E6E7            	db	226,227,228,229,230,231
  4834 000012E2 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4835 000012EA F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4836 000012F2 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4837                                  
  4838                                  ;include divmes.inc
  4839                                  
  4840                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  4841                                  	;PUBLIC	DIVMES
  4842                                  
  4843 000012FA 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  4843 00001303 6F766572666C6F770D-
  4843 0000130C 0A                 
  4844                                  
  4845                                  	;PUBLIC	DivMesLen
  4846                                  DivMesLen:
  4847 0000130D 1300                    	DW	$-DIVMES	; Length of the above message in bytes
  4848                                  
  4849                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  4850                                  
  4851                                  ; The following two tables implement the current buffered input editing
  4852                                  ; routines. The tables are pairwise associated in reverse order for ease
  4853                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  4854                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  4855                                  
  4856                                  	;PUBLIC	CANCHAR
  4857                                  CANCHAR:
  4858 0000130F 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  4859                                  	
  4860                                  	;PUBLIC	ESCCHAR
  4861                                  ESCCHAR:
  4862 00001310 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  4863                                  	
  4864                                  	;IF	NOT Rainbow
  4865                                  
  4866                                  ESCTAB:	; LABEL BYTE
  4867                                  
  4868                                  	;IF	IBM
  4869 00001311 40                      	DB	64		; Ctrl-Z - F6
  4870 00001312 4D                      	DB	77		; Copy one char - -->
  4871 00001313 3B                      	DB	59		; Copy one char - F1
  4872 00001314 53                      	DB	83		; Skip one char - DEL
  4873 00001315 3C                      	DB	60		; Copy to char - F2
  4874 00001316 3E                      	DB	62		; Skip to char - F4
  4875 00001317 3D                      	DB	61		; Copy line - F3
  4876 00001318 3D                      	DB	61		; Kill line (no change to template ) - Not used
  4877 00001319 3F                      	DB	63		; Reedit line (new template) - F5
  4878 0000131A 4B                      	DB	75		; Backspace - <--
  4879 0000131B 52                      	DB	82		; Enter insert mode - INS (toggle)
  4880 0000131C 52                      	DB	82		; Exit insert mode - INS (toggle)
  4881 0000131D 41                      	DB	65		; Escape character - F7
  4882 0000131E 41                      	DB	65		; End of table
  4883                                  	;ENDIF
  4884                                  
  4885                                  ESCEND: ; LABEL BYTE
  4886                                  
  4887                                  ESCTABLEN EQU ESCEND-ESCTAB
  4888                                  
  4889                                  ESCFUNC: ; LABEL WORD
  4890                                  	
  4891 0000131F [D021]                  	short_addr  GETCH	; Ignore the escape sequence
  4892 00001321 [BD22]                  	short_addr  TWOESC
  4893 00001323 [4523]                  	short_addr  EXITINS
  4894 00001325 [4523]                  	short_addr  ENTERINS
  4895 00001327 [4722]                  	short_addr  BACKSP
  4896 00001329 [3123]                  	short_addr  REEDIT
  4897 0000132B [3422]                  	short_addr  KILNEW
  4898 0000132D [C422]                  	short_addr  COPYLIN
  4899 0000132F [F722]                  	short_addr  SKIPSTR
  4900 00001331 [CA22]                  	short_addr  COPYSTR
  4901 00001333 [ED22]                  	short_addr  SKIPONE
  4902 00001335 [CF22]                  	short_addr  COPYONE
  4903 00001337 [CF22]                  	short_addr  COPYONE
  4904 00001339 [4D23]                  	short_addr  CTRLZ
  4905                                  
  4906                                  	;ENDIF
  4907                                  
  4908                                  ;TABLE	ENDS
  4909                                  
  4910                                  ; 17/07/2018
  4911                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
  4912                                  
  4913                                  ;CRTERRTAB: ; 19/07/2018	
  4914                                  ;	db	0,5,52h,50h,3,5,20h
  4915                                  
  4916                                  ; 08/08/2018
  4917                                  
  4918                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
  4919 0000133B 00                      	DB	0			; none
  4920 0000133C 05                      	DB	error_access_denied	; MakeNode error 1
  4921 0000133D 52                      	DB	error_cannot_make	; MakeNode error 2
  4922 0000133E 50                      	DB	error_file_exists	; MakeNode error 3
  4923 0000133F 03                      	DB	error_path_not_found	; MakeNode error 4
  4924 00001340 05                      	DB	error_access_denied	; MakeNode error 5
  4925 00001341 20                      	DB	error_sharing_violation ; MakeNode error 6
  4926                                  	; MSDOS 6.0
  4927                                  	;DB	error_file_not_found	; MakeNode error 7
  4928                                  
  4929                                  ;============================================================================
  4930                                  ; DEV.ASM (MSDOS 6.0, 1987)
  4931                                  ;============================================================================
  4932                                  ; 17/07/2018 - Retro DOS v3.0
  4933                                  
  4934                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
  4935                                  
  4936                                  ;Public DEV001S, DEV001E 		; Pathgen labels
  4937                                  ;DEV001s:
  4938                                  ;		length of packets
  4939 00001342 160E160D0F0E            LenTab:		DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
  4940                                  ;LenTab:	db	22,14,22,13,15,14
  4941                                  
  4942                                  ;	       Error Function
  4943                                  
  4944                                  CmdTab:
  4945 00001348 8604                    	DB	86h, DEVRD	; 0 input
  4946 0000134A 8605                    	DB	86h, DEVRDND	; 1 input status
  4947 0000134C 8708                    	DB	87h, DEVWRT	; 2 output
  4948 0000134E 870A                    	DB	87h, DEVOST	; 3 output status
  4949 00001350 8607                    	DB	86h, DEVIFL	; 4 input flush
  4950 00001352 8605                    	DB	86H, DEVRDND	; 5 input status with system WAIT
  4951                                  
  4952                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
  4953                                  
  4954                                  ;CmdTab:
  4955                                  ;	db	86h, 4
  4956                                  ;	db	86h, 5
  4957                                  ;	db	87h, 8
  4958                                  ;	db	87h, 10
  4959                                  ;	db	86h, 7
  4960                                  ;	db	86h, 5
  4961                                  
  4962                                  ;DEV001E:
  4963                                  
  4964                                  ;============================================================================
  4965                                  ; FCB.ASM (MSDOS 6.0, 1987)
  4966                                  ;============================================================================
  4967                                  ; 17/07/2018 - Retro DOS v3.0
  4968                                  
  4969                                  ; Character type table for file name scanning
  4970                                  ; Table provides a mapping of characters to validity bits.
  4971                                  ; Four bits are provided for each character.  Values 7Dh and above
  4972                                  ; have all bits set, so that part of the table is chopped off, and
  4973                                  ; the translation routine is responsible for screening these values.
  4974                                  ; The bit values are defined in DOSSYM.INC
  4975                                  
  4976                                  ;	      ; ^A and NUL
  4977                                  ;CharType:
  4978                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4979                                  ;
  4980                                  ;	      ; ^C and ^B
  4981                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4982                                  ;
  4983                                  ;	      ; ^E and ^D
  4984                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4985                                  ;
  4986                                  ;	      ; ^G and ^F
  4987                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4988                                  ;
  4989                                  ;	      ; TAB and BS
  4990                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4991                                  ;
  4992                                  ;	      ; ^K and ^J
  4993                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4994                                  ;
  4995                                  ;	      ; ^M and ^L
  4996                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4997                                  ;
  4998                                  ;	      ; ^O and ^N
  4999                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5000                                  ;
  5001                                  ;	      ; ^Q and ^P
  5002                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5003                                  ;
  5004                                  ;	      ; ^S and ^R
  5005                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5006                                  ;
  5007                                  ;	      ; ^U and ^T
  5008                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5009                                  ;
  5010                                  ;	      ; ^W and ^V
  5011                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5012                                  ;
  5013                                  ;	      ; ^Y and ^X
  5014                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5015                                  ;
  5016                                  ;	      ; ESC and ^Z
  5017                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5018                                  ;
  5019                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5021                                  ;
  5022                                  ;	      ; ^_ and ^^
  5023                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5024                                  ;
  5025                                  ;	      ; ! and SPACE
  5026                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
  5027                                  ;
  5028                                  ;	      ; # and "
  5029                                  ;	 db   LOW (NOT FFCB+FCHK)
  5030                                  ;
  5031                                  ;	      ; $ - )
  5032                                  ;	 db   3 dup (0FFh)
  5033                                  ;
  5034                                  ;	      ; + and *
  5035                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
  5036                                  ;
  5037                                  ;	      ; - and '
  5038                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
  5039                                  ;
  5040                                  ;	      ; / and .
  5041                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
  5042                                  ;
  5043                                  ;	      ; 0 - 9
  5044                                  ;	 db   5 dup (0FFh)
  5045                                  ;
  5046                                  ;	      ; ; and :
  5047                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
  5048                                  ;
  5049                                  ;	      ; = and <
  5050                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
  5051                                  ;
  5052                                  ;	      ; ? and >
  5053                                  ;	 db   NOT FFCB+FCHK+FDELIM
  5054                                  ;
  5055                                  ;	      ; A - Z
  5056                                  ;	 db   13 dup (0FFh)
  5057                                  ;
  5058                                  ;	      ; \ and [
  5059                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
  5060                                  ;
  5061                                  ;	      ; ^ and ]
  5062                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  5063                                  ;
  5064                                  ;	      ; _ - {
  5065                                  ;	 db   15 dup (0FFh)
  5066                                  ;
  5067                                  ;	      ; } and |
  5068                                  ;	 db   NOT FFCB+FCHK+FDELIM
  5069                                  
  5070                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
  5071                                  ;					; character in the table
  5072                                  
  5073                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
  5074                                  
  5075                                  CharType:
  5076 00001354 F6F6F6F6F6F6F6F6                db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  5077 0000135C F6F0F6F6F6F6F6F6        	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  5078 00001364 F6F6F6F6F6F6F6F6        	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  5079 0000136C F6F6F6F6F6F6F6F6        	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  5080 00001374 F8FFF6FFFFFFFFFF        	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
  5081 0000137C FFFFFFF4F4FFFEF6        	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
  5082 00001384 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5083 0000138C FFFFF4F4F4F4F4FF        	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
  5084 00001394 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5085 0000139C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5086 000013A4 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5087 000013AC FFFFFFF6F6F6FFFF        	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
  5088 000013B4 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5089 000013BC FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5090 000013C4 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5091 000013CC FFFFFFFFF4FFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
  5092 000013D4 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5093 000013DC FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5094 000013E4 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5095 000013EC FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5096 000013F4 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5097 000013FC FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5098 00001404 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5099 0000140C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5100 00001414 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5101 0000141C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5102 00001424 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5103 0000142C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5104 00001434 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5105 0000143C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5106 00001444 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5107 0000144C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5108                                  
  5109                                  ; 02/08/2018 - Retro DOS v3.0
  5110                                  ; DOSTAB.ASM - MSDOS 6.0 - 1991
  5111                                  
  5112                                  ; Offset 13CAh of IBMDOS.COM (MSDOS 3.3), 1987
  5113                                  
  5114 00001454 0000                    exec_init_SP:	dw 0
  5115 00001456 0000                    exec_init_SS:	dw 0
  5116 00001458 0000                    exec_init_IP:	dw 0
  5117 0000145A 0000                    exec_init_CS:	dw 0
  5118                                  
  5119 0000145C 0000                    exec_signature:	dw 0	; must contain 4D5A  (yay zibo!)
  5120 0000145E 0000                    exec_len_mod_512: dw 0	; low 9 bits of length
  5121 00001460 0000                    exec_pages:	dw 0	; number of 512b pages in file
  5122 00001462 0000                    exec_rle_count:	dw 0	; count of reloc entries
  5123 00001464 0000                    exec_par_dir:	dw 0	; number of paragraphs before image
  5124 00001466 0000                    exec_min_BSS:	dw 0	; minimum number of para of BSS
  5125 00001468 0000                    exec_max_BSS:	dw 0	; max number of para of BSS
  5126 0000146A 0000                    exec_SS:	dw 0	; stack of image
  5127 0000146C 0000                    exec_SP:	dw 0	; SP of image
  5128 0000146E 0000                    exec_chksum:	dw 0	; checksum  of file (ignored)
  5129 00001470 0000                    exec_IP:	dw 0	; IP of entry
  5130 00001472 0000                    exec_CS:	dw 0	; CS of entry
  5131 00001474 0000                    exec_rle_table:	dw 0	; byte offset of reloc table
  5132                                  
  5133                                  Exec_Header_Len	EQU $-exec_signature
  5134                                  
  5135                                  ; 02/08/2018 - Retro DOS v3.0
  5136                                  ; SRVCALL.ASM - MSDOS 6.0 - 1991
  5137                                  ;** Server DOS call functions
  5138                                  
  5139 00001476 [7A14]                  SERVERTAB:      dw SERVER_DISP
  5140 00001478 [266A]                  SERVERLEAVE:	dw SERVERRETURN
  5141 0000147A 0B                      SERVER_DISP:	db (SERVER_DISP_END-SERVER_DISP-1)/2
  5142 0000147B [916A]                  		dw SRV_CALL	; 0
  5143 0000147D [276A]                  		dw COMMIT_ALL	; 1
  5144 0000147F [5E6A]                  		dw CLOSE_NAME	; 2
  5145 00001481 [6A6A]                  		dw CLOSE_UID	; 3
  5146 00001483 [716A]                  		dw CLOSE_UID_PID ; 4
  5147 00001485 [786A]                  		dw GET_LIST	; 5
  5148 00001487 [D26A]                  		dw GET_DOS_DATA	; 6
  5149 00001489 [F66A]                  		dw SPOOL_OPER	; 7
  5150 0000148B [F66A]                  		dw SPOOL_OPER	; 8
  5151 0000148D [F66A]                  		dw SPOOL_OPER	; 9
  5152 0000148F [056B]                  		dw _$SetExtendedError ; 10
  5153                                  SERVER_DISP_END:
  5154                                  
  5155                                  ;============================================================================
  5156                                  ; MSCODE.ASM
  5157                                  ;============================================================================
  5158                                  
  5159                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  5160                                  ; 03/03/2018
  5161                                  
  5162                                  ;
  5163                                  ; MSCODE.ASM -- MSDOS code
  5164                                  ;
  5165                                  
  5166                                  ;INCLUDE DOSSEG.ASM
  5167                                  ;INCLUDE STDSW.ASM
  5168                                  
  5169                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  5170                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5171                                  
  5172                                  ;.xcref
  5173                                  ;INCLUDE DOSSYM.ASM
  5174                                  ;INCLUDE DEVSYM.ASM
  5175                                  ;.cref
  5176                                  ;.list
  5177                                  
  5178                                  ;IFNDEF  KANJI
  5179                                  ;KANJI   EQU     0       ; FALSE
  5180                                  ;ENDIF
  5181                                  
  5182                                  ;IFNDEF  IBM
  5183                                  ;IBM     EQU     0
  5184                                  ;ENDIF
  5185                                  
  5186                                  ;IFNDEF  HIGHMEM
  5187                                  ;HIGHMEM  EQU     0
  5188                                  ;ENDIF
  5189                                  
  5190                                          ;i_need  USER_SP,WORD
  5191                                          ;i_need  USER_SS,WORD
  5192                                          ;i_need  SAVEDS,WORD
  5193                                          ;i_need  SAVEBX,WORD
  5194                                          ;i_need  INDOS,BYTE
  5195                                          ;i_need  NSP,WORD
  5196                                          ;i_need  NSS,WORD
  5197                                          ;i_need  CURRENTPDB,WORD
  5198                                          ;i_need  AUXSTACK,BYTE
  5199                                          ;i_need  CONSWAP,BYTE
  5200                                          ;i_need  IDLEINT,BYTE
  5201                                          ;i_need  NOSETDIR,BYTE
  5202                                          ;i_need  ERRORMODE,BYTE
  5203                                          ;i_need  IOSTACK,BYTE
  5204                                          ;i_need  WPERR,BYTE
  5205                                          ;i_need  DSKSTACK,BYTE
  5206                                          ;i_need  CNTCFLAG,BYTE
  5207                                          ;i_need  LEAVEADDR,WORD
  5208                                          ;i_need  NULLDEVPT,DWORD
  5209                                  
  5210                                          ;IF NOT IBM
  5211                                          ;i_need  OEM_HANDLER,DWORD
  5212                                          ;ENDIF
  5213                                  
  5214                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  5215                                  
  5216                                  ;============================================================================
  5217                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  5218                                  ;============================================================================
  5219                                  ; 11/07/2018 - Retro DOS v3.0
  5220                                  
  5221                                  ; 18/07/2018
  5222                                  
  5223                                  ; The following two routines are dispatched to directly with ints disabled
  5224                                  ; immediately after the int 21h entry.	no DIS state is set.
  5225                                  
  5226                                  ; ---------------------------------------------------------------------------
  5227                                  ; $Set_current_PDB takes BX and sets it to be the current process
  5228                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  5229                                  ;
  5230                                         ;procedure   $SET_CURRENT_PDB,NEAR
  5231                                  _$SET_CURRENT_PDB:
  5232                                          ;ASSUME	DS:NOTHING,SS:NOTHING
  5233 00001491 2E891E[FC02]                    MOV     [CS:CurrentPDB],BX ; 12/03/2018
  5234 00001496 CF                      	iret ; 08/07/2018 - Retro DOS v3.0
  5235                                  ;$SET_CURRENT_PDB    ENDP
  5236                                  
  5237                                  ; ---------------------------------------------------------------------------
  5238                                  ; $get_current_PDB returns in BX the current process
  5239                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  5240                                  ;
  5241                                          ;procedure $GET_CURRENT_PDB,NEAR
  5242                                  _$GET_CURRENT_PDB:
  5243                                          ;ASSUME	DS:NOTHING,SS:NOTHING
  5244 00001497 2E8B1E[FC02]            	mov	BX,[CS:CurrentPDB] ; 11/07/2018
  5245 0000149C CF                      	iret ; 08/07/2018 - Retro DOS v3.0
  5246                                  ;$GET_CURRENT_PDB    ENDP
  5247                                  ; ---------------------------------------------------------------------------
  5248                                  
  5249                                  ; 11/07/2018 - Retro DOS v3.0
  5250                                  
  5251                                  ;BREAK <$Set_CTRL_C_Trapping -- En/Disable ^C check in dispatcher>
  5252                                  
  5253                                  _$SET_CTRL_C_TRAPPING:
  5254                                  
  5255                                  ; Inputs:
  5256                                  ;       AL = 0 read ^C status
  5257                                  ;       AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  5258                                  ;	AL = 2 Set ^C status to contents of DL.	Output is old state.
  5259                                  ;	     (MSDISP.ASM,MSDOS 6.0, 1991)
  5260                                  ; Function:
  5261                                  ;       Enable disable ^C checking in dispatcher
  5262                                  ; Outputs:
  5263                                  ;       If AL = 0 then DL = 0/1 for ^C off/on
  5264                                  
  5265                                  	; 08/07/2018 - Retro DOS v3.0
  5266                                  
  5267 0000149D 08C0                            OR      AL,AL
  5268 0000149F 7506                            JNZ     SHORT CTRL_C_set
  5269                                  
  5270                                  	; 11/07/2018
  5271 000014A1 2E8A16[0303]            	mov	dl,[CS:CNTCFLAG]
  5272 000014A6 CF                      	iret
  5273                                  
  5274                                  CTRL_C_set:
  5275                                  	; 08/07/2018
  5276 000014A7 3C02                    	cmp	al,2
  5277 000014A9 7716                    	ja	short bad_val
  5278 000014AB 740B                    	je	short scct_3
  5279                                  
  5280 000014AD 52                      	push    dx
  5281 000014AE 80E201                  	and     dl,1
  5282 000014B1 2E8816[0303]            	mov     [cs:CNTCFLAG],dl
  5283 000014B6 5A                      	pop     dx
  5284 000014B7 CF                      	iret
  5285                                  
  5286                                  scct_3:
  5287 000014B8 80E201                  	and	dl,1
  5288 000014BB 2E8616[0303]                    xchg	dl,[CS:CNTCFLAG]
  5289 000014C0 CF                              iret
  5290                                  
  5291                                  bad_val:
  5292 000014C1 B0FF                    	MOV	AL,0FFH
  5293 000014C3 CF                      	iret
  5294                                  
  5295                                  ; 11/07/2018
  5296                                  
  5297                                  _$SET_PRINTER_FLAG:
  5298                                  	; 08/07/2018 - Retro DOS v3.0
  5299                                  	;mov 	[cs:IOSTACK],al
  5300 000014C4 2EA2[360A]              	mov	[cs:PRINTER_FLAG],al
  5301 000014C8 CF                      	iret
  5302                                  
  5303                                  ; 08/07/2018 - Retro DOS v3.0
  5304                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  5305                                  
  5306                                  ; ----------------------------------------------------------------------------
  5307                                  ; BREAK   <System call entry points and dispatcher>
  5308                                  ; ----------------------------------------------------------------------------
  5309                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5310                                  
  5311                                          ;procedure   SYSTEM_CALL,NEAR
  5312                                  SYSTEM_CALL:
  5313                                  ;entry	QUIT				; INT 20H entry point
  5314                                  QUIT:
  5315                                  	;MOV	AH,0
  5316 000014C9 30E4                    	xor	ah,ah ; 08/07/2018
  5317 000014CB EB47                    	JMP     SHORT SAVREGS
  5318                                  
  5319                                  ; ---------------------------------------------------------------------------
  5320                                  
  5321                                  ;COMMAND:
  5322                                  ;	;IF	NOT IBM
  5323                                  ;       CMP	AH,SET_OEM_HANDLER
  5324                                  ;       JB      SHORT NOTOEM
  5325                                  ;	; 18/07/2018
  5326                                  ;	je	_$SET_OEM_HANDLER	
  5327                                  ;
  5328                                  ;	; 20/04/2018
  5329                                  ;       ;JMP	_$SET_OEM_HANDLER
  5330                                  ;
  5331                                  ;	; Retro DOS v2.0 - 20/04/2018
  5332                                  ;	CMP	AX, 0FFFFh
  5333                                  ;	;JNE	_$SET_OEM_HANDLER
  5334                                  ;	; 18/07/2018
  5335                                  ;	jne	DO_OEM_FUNC
  5336                                  ;
  5337                                  ;	PUSHA
  5338                                  ;	MOV     SI,RETRODOSMSG
  5339                                  ;       ;CALL	OUTMES
  5340                                  ;wrdosmsg:
  5341                                  ;	mov	ah, 0Eh
  5342                                  ;	mov	bx, 7
  5343                                  ;wrdosmsg_nxt:
  5344                                  ;	cs	lodsb
  5345                                  ;	cmp	al, '$'
  5346                                  ;	je	short wrdosmsg_ok		
  5347                                  ;	int	10h
  5348                                  ;	jmp	short wrdosmsg_nxt
  5349                                  ;wrdosmsg_ok:
  5350                                  ;	POPA
  5351                                  ;	JMP	SHORT BADCALL 
  5352                                  ;	;
  5353                                  ;NOTOEM:
  5354                                  ;	;ENDIF
  5355                                  ;
  5356                                  ;       CMP     AH,MAXCOM
  5357                                  ;       JBE     SHORT SAVREGS
  5358                                  
  5359                                  	; The system call in AH is out of the range that we know how
  5360                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  5361                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  5362                                  	; error as this may break some programs compatability.
  5363                                  
  5364                                  BADCALL:
  5365                                          ;MOV	AL,0
  5366 000014CD 30C0                    	xor	al,al ; 08/07/2018
  5367                                  ;entry	IRET
  5368                                  _IRET:
  5369 000014CF CF                              IRET
  5370                                  
  5371                                  ; ---------------------------------------------------------------------------
  5372                                  
  5373                                  ;entry	CALL_ENTRY                      ; System call entry point and dispatcher
  5374                                  CALL_ENTRY:
  5375 000014D0 58                              POP     AX                      ; IP from the long call at 5
  5376 000014D1 58                              POP     AX                      ; Segment from the long call at 5
  5377                                          ;POP	WORD [USER_SP]		; IP from the CALL 5
  5378 000014D2 2E8F06[4005]                    POP	WORD [CS:USER_SP] ; 12/03/2018
  5379 000014D7 9C                      	PUSHF                           ; Start re-ordering the stack
  5380 000014D8 FA                              CLI
  5381 000014D9 50                              PUSH    AX                      ; Save segment
  5382                                          ;PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  5383 000014DA 2EFF36[4005]                    PUSH	WORD [CS:USER_SP] ; 12/03/2018
  5384 000014DF 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  5385 000014E2 77E9                            JA      SHORT BADCALL
  5386 000014E4 88CC                            MOV     AH,CL
  5387                                  	; 08/07/2018
  5388 000014E6 EB2C                    	jmp	short SAVREGS 
  5389                                  
  5390                                  COMMAND:
  5391                                  	; 08/07/2018 - Retro DOS v3.0
  5392                                  
  5393                                  	;IF	NOT IBM
  5394 000014E8 80FCF8                          CMP	AH,SET_OEM_HANDLER
  5395 000014EB 7221                            JB      SHORT NOTOEM
  5396                                  	; 18/07/2018
  5397 000014ED 0F845E01                	je	_$SET_OEM_HANDLER	
  5398                                  
  5399                                  	; 20/04/2018
  5400                                          ;JMP	_$SET_OEM_HANDLER
  5401                                  
  5402                                  	; Retro DOS v2.0 - 20/04/2018
  5403 000014F1 83F8FF                  	CMP	AX,0FFFFh
  5404                                  	;JNE	_$SET_OEM_HANDLER
  5405                                  	; 18/07/2018
  5406 000014F4 0F856201                	jne	DO_OEM_FUNC
  5407                                  
  5408 000014F8 60                      	PUSHA
  5409 000014F9 BE[7E0C]                	MOV     SI,RETRODOSMSG
  5410                                          ;CALL	OUTMES
  5411                                  wrdosmsg:
  5412 000014FC B40E                    	mov	ah,0Eh
  5413 000014FE BB0700                  	mov	bx,7
  5414                                  wrdosmsg_nxt:
  5415 00001501 2EAC                    	cs	lodsb
  5416 00001503 3C24                    	cmp	al,'$'
  5417 00001505 7404                    	je	short wrdosmsg_ok		
  5418 00001507 CD10                    	int	10h
  5419 00001509 EBF6                    	jmp	short wrdosmsg_nxt
  5420                                  wrdosmsg_ok:
  5421 0000150B 61                      	POPA
  5422 0000150C EBBF                    	JMP	SHORT BADCALL 
  5423                                  	;
  5424                                  
  5425                                  NOTOEM:
  5426                                  	;ENDIF
  5427                                  
  5428 0000150E FA                      	cli	; 08/07/2018
  5429                                  
  5430                                  _COMMAND: ; MSDOS 3.3 (IBM)
  5431                                  
  5432 0000150F 80FC68                          CMP     AH,MAXCOM
  5433                                  	;JBE	SHORT SAVREGS
  5434 00001512 77B9                            JA	SHORT BADCALL ; 08/07/2018
  5435                                  
  5436                                  SAVREGS:
  5437                                  	; 10/08/2018
  5438                                  	; 08/07/2018 - Retro DOS v3.0
  5439 00001514 80FC33                  	cmp	ah,33h
  5440 00001517 7484                    	jz	short _$SET_CTRL_C_TRAPPING
  5441 00001519 721C                    	jb	short SaveAllRegs
  5442 0000151B 80FC64                  	cmp	ah,64h
  5443 0000151E 7717                    	ja	short SaveAllRegs
  5444 00001520 74A2                    	jz	short _$SET_PRINTER_FLAG
  5445 00001522 80FC51                  	cmp	ah,51h
  5446 00001525 0F846EFF                	jz	_$GET_CURRENT_PDB
  5447 00001529 80FC62                  	cmp	ah,62h
  5448 0000152C 0F8467FF                	jz	_$GET_CURRENT_PDB
  5449 00001530 80FC50                  	cmp     ah,50h
  5450 00001533 0F845AFF                	jz	_$SET_CURRENT_PDB
  5451                                  SaveAllRegs:
  5452 00001537 E8FC00                          CALL    save_world
  5453 0000153A 2E8C1E[A805]                    MOV	[CS:SAVEDS],DS	; 12/03/2018
  5454 0000153F 2E891E[A605]                    MOV	[CS:SAVEBX],BX	; 12/03/2018
  5455 00001544 8CCB                            MOV     BX,CS
  5456 00001546 8EDB                            MOV     DS,BX
  5457                                  ;ASSUME  DS:DOSGROUP
  5458 00001548 FE06[ED02]                      INC     BYTE [INDOS]		; Flag that we're in the DOS
  5459                                  	
  5460                                  	; 08/07/2018 - Retro DOS v3.0        
  5461 0000154C 31C0                    	xor     ax, ax
  5462 0000154E A3[0803]                	mov     [USER_ID],ax
  5463 00001551 A1[FC02]                	mov     ax,[CurrentPDB]
  5464 00001554 A3[0603]                	mov     [PROC_ID],ax
  5465                                  
  5466 00001557 A1[4005]                	MOV     AX,[USER_SP]
  5467 0000155A A3[AE05]                        MOV     [NSP],AX
  5468 0000155D A1[4205]                        MOV     AX,[USER_SS]
  5469 00001560 A3[AC05]                        MOV     [NSS],AX
  5470 00001563 58                              POP     AX
  5471 00001564 50                              PUSH    AX
  5472 00001565 8926[4005]                      MOV     [USER_SP],SP
  5473 00001569 8C16[4205]                      MOV     [USER_SS],SS
  5474                                  ;
  5475                                  ; save user stack in his area for later returns (possibly from EXEC)
  5476                                  ; Here comes multitasking!!!
  5477                                  ;
  5478 0000156D 8E1E[FC02]                      MOV     DS,[CurrentPDB]
  5479 00001571 89262E00                        MOV     [PDB.USER_STACK],SP
  5480 00001575 8C163000                        MOV     [PDB.USER_STACK+2],SS
  5481                                  	; 18/07/2018
  5482 00001579 2EC606[2F05]00          	mov	byte [CS:FSHARING], 0
  5483                                  
  5484 0000157F 8CCB                            MOV     BX,CS                   ; no holes here.
  5485 00001581 8ED3                            MOV     SS,BX
  5486                                  ;ASSUME  SS:DOSGROUP
  5487                                  
  5488                                  ;entry	REDISP
  5489                                  REDISP:
  5490 00001583 BC[3607]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  5491 00001586 FB                              STI                             ; Stack OK now
  5492                                  	; 08/07/2018
  5493                                          ;PUSH	CS
  5494                                          ;POP	DS
  5495 00001587 8CCB                    	mov	bx,cs
  5496 00001589 8EDB                    	mov	ds,bx
  5497 0000158B 30FF                            XOR     BH,BH
  5498 0000158D 883E[2103]                      MOV     [CONSWAP],BH
  5499 00001591 C606[2203]01                    MOV     BYTE [IDLEINT],1
  5500 00001596 883E[1603]                      MOV     BYTE [NoSetDir],bh ; 0	; set directories on search
  5501 0000159A 883E[1403]                      mov	byte [FAILERR],bh ; 0	
  5502 0000159E 88E3                    	MOV     BL,AH
  5503 000015A0 D1E3                            SHL     BX,1
  5504 000015A2 FC                              CLD
  5505 000015A3 08E4                            OR      AH,AH
  5506 000015A5 7416                            JZ      SHORT DSKROUT		; ABORT
  5507                                  
  5508                                          ;CMP	AH,12
  5509                                          ;JBE	SHORT IOROUT		; Character I/O
  5510                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  5511                                          ;JZ	SHORT IOROUT
  5512                                          ;CMP	AH,SET_CURRENT_PDB
  5513                                          ;JNZ	SHORT DSKROUT
  5514                                  
  5515                                  	; 10/08/2018
  5516 000015A7 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  5517 000015AA 743D                    	jz      short DISPCALL
  5518 000015AC 80FC0C                  	cmp     ah,STD_CON_INPUT_FLUSH ; 0Ch
  5519 000015AF 770C                    	ja      short DSKROUT
  5520                                  
  5521                                  IOROUT:
  5522 000015B1 803E[EC02]00                    CMP     BYTE [ERRORMODE],0
  5523 000015B6 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  5524 000015B8 BC[360A]                        MOV     SP,IOSTACK
  5525 000015BB EB2C                            JMP     SHORT DISPCALL
  5526                                  
  5527                                  DSKROUT:
  5528                                  	; 08/07/2018 - Retro DOS v3.0
  5529 000015BD A3[0403]                        mov     [USER_IN_AX],ax
  5530 000015C0 C606[EF02]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk  (Default)
  5531                                  
  5532 000015C5 C606[EC02]00                    MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  5533 000015CA C606[EE02]FF                    MOV     BYTE [WPERR],-1		; error mode, so good place to
  5534                                                                          ; make sure flags are reset
  5535 000015CF 50                      	push    ax
  5536 000015D0 B482                    	mov     ah,82h
  5537 000015D2 CD2A                    	int     2Ah 		; Microsoft Networks 
  5538                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  5539 000015D4 58                      	pop     ax
  5540 000015D5 C606[2203]00            	mov     byte [IDLEINT],0
  5541                                  
  5542 000015DA BC[B608]                        MOV     SP,DSKSTACK
  5543 000015DD F606[0303]FF                    TEST    BYTE [CNTCFLAG],-1
  5544 000015E2 7405                            JZ      SHORT DISPCALL
  5545 000015E4 50                              PUSH    AX
  5546                                          ;invoke	DSKSTATCHK
  5547 000015E5 E84E43                          CALL	DSKSTATCHK
  5548 000015E8 58                      	POP     AX
  5549                                  DISPCALL:
  5550                                  	; 08/07/2018 -Retro DOS v3.0
  5551                                  	;;;PUSH	WORD [LEAVEADDR] ; (***)
  5552                                          ;;;PUSH	WORD [CS:BX+DISPATCH]
  5553                                          ;;;;PUSH WORD [BX+DISPATCH]
  5554                                  
  5555                                  	; 11/07/2018	
  5556                                  	;mov	bx,[CS:BX+DISPATCH]
  5557 000015E9 8B9F[360E]               	mov	bx,[bx+DISPATCH] 
  5558                                  
  5559                                  	;;;MOV	BX,[SAVEBX]
  5560 000015ED 871E[A605]              	xchg    bx,[SAVEBX]        
  5561                                  
  5562 000015F1 8E1E[A805]              	MOV     DS,[SAVEDS]
  5563                                  ;ASSUME	DS:NOTHING
  5564                                          ;return
  5565                                  ;;;	RETN	
  5566                                  
  5567 000015F5 36FF16[A605]            	call	word [SS:SAVEBX]
  5568                                  
  5569                                  ;entry LEAVE
  5570                                  ;;;_LEAVE:				; Exit from a system call
  5571                                  LeaveDOS: ; 18/07/2018 
  5572                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  5573 000015FA FA                      	CLI
  5574                                          ; 12/03/2018
  5575 000015FB 2EFE0E[ED02]            	DEC     BYTE [CS:INDOS]
  5576 00001600 2E8B26[4005]                    MOV     SP,[CS:USER_SP]
  5577 00001605 2E8E16[4205]                    MOV     SS,[CS:USER_SS]
  5578 0000160A 89E5                    	MOV     BP,SP
  5579                                  	;MOV	[BP.user_AX],AL	
  5580                                          ;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  5581 0000160C 884600                          MOV     [BP],AL
  5582 0000160F 2EA1[AE05]              	MOV     AX,[CS:NSP]
  5583 00001613 2EA3[4005]                      MOV     [CS:USER_SP],AX
  5584 00001617 2EA1[AC05]                      MOV     AX,[CS:NSS]
  5585 0000161B 2EA3[4205]                      MOV     [CS:USER_SS],AX
  5586 0000161F E80100                  	CALL    restore_world
  5587                                  
  5588 00001622 CF                              IRET
  5589                                  
  5590                                  ;SYSTEM_CALL ENDP
  5591                                  
  5592                                  ;
  5593                                  ; restore_world restores all registers ('cept SS:SP, CS:IP, flags) from
  5594                                  ; the stack prior to giving the user control
  5595                                  ;
  5596                                  
  5597                                  ; 11/07/2018 - Retro DOS v3.0
  5598                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  5599                                  ;;restore_tmp DW  ?
  5600                                  ;restore_tmp: 
  5601                                  ;	dw	0
  5602                                          ;procedure restore_world,NEAR
  5603                                  restore_world:
  5604 00001623 2E8F06[AA05]                    POP	WORD [CS:RESTORE_TMP] ; 12/03/2018
  5605 00001628 58                              POP     AX              ; PUSH    ES
  5606 00001629 5B                              POP     BX              ; PUSH    DS
  5607 0000162A 59                              POP     CX              ; PUSH    BP
  5608 0000162B 5A                              POP     DX              ; PUSH    DI
  5609 0000162C 5E                              POP     SI              ; PUSH    SI
  5610 0000162D 5F                              POP     DI              ; PUSH    DX
  5611 0000162E 5D                              POP     BP              ; PUSH    CX
  5612 0000162F 1F                              POP     DS              ; PUSH    BX
  5613 00001630 07                              POP     ES              ; PUSH    AX
  5614                                  	; 07/07/2018 - Retro DOS v3.0
  5615 00001631 2EFF26[AA05]                   	jmp	word [CS:RESTORE_TMP]
  5616                                  
  5617                                  ;restore_world	ENDP
  5618                                  
  5619                                  ;
  5620                                  ; save_world saves complete registers on the stack
  5621                                  ;
  5622                                          ;procedure save_world,NEAR
  5623                                  save_world:
  5624 00001636 2E8F06[AA05]                    POP	WORD [CS:RESTORE_TMP] ; 12/03/2018
  5625 0000163B 06                              PUSH    ES
  5626 0000163C 1E                              PUSH    DS
  5627 0000163D 55                              PUSH    BP
  5628 0000163E 57                              PUSH    DI
  5629 0000163F 56                              PUSH    SI
  5630 00001640 52                              PUSH    DX
  5631 00001641 51                              PUSH    CX
  5632 00001642 53                              PUSH    BX
  5633 00001643 50                              PUSH    AX
  5634                                  	; 07/07/2018 - Retro DOS v3.0
  5635 00001644 2EFF26[AA05]                   	jmp	word [CS:RESTORE_TMP]
  5636                                  
  5637                                  ;save_world	ENDP
  5638                                  
  5639                                  ;
  5640                                  ; get_user_stack returns the user's stack (and hence registers) in DS:SI
  5641                                  ;
  5642                                          ;procedure get_user_stack,NEAR
  5643                                  Get_User_Stack:
  5644                                          ;LDS	SI,DWORD PTR [USER_SP]
  5645                                          ;LDS	SI,[USER_SP]
  5646 00001649 2EC536[4005]                    LDS	SI,[CS:USER_SP] ; 12/03/2018
  5647                                  	;return
  5648 0000164E C3                      	RETN
  5649                                  
  5650                                  ;get_user_stack  ENDP
  5651                                  
  5652                                  ; ---------------------------------------------------------------------------
  5653                                  ;
  5654                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  5655                                  ; Inputs:
  5656                                  ;	User registers, User Stack, INTS disabled
  5657                                  ;	If CALL F8, DS:DX is new handler address
  5658                                  ; Function:
  5659                                  ;	Process OEM INT 21 extensions
  5660                                  ; Outputs:
  5661                                  ;	Jumps to OEM_HANDLER if appropriate
  5662                                  ;
  5663                                  ; ---------------------------------------------------------------------------
  5664                                  
  5665                                  ;IF	NOT IBM
  5666                                  
  5667                                  _$SET_OEM_HANDLER:
  5668                                  	; 18/07/2018
  5669                                  
  5670                                  	;JNE	short DO_OEM_FUNC	; If above F8 try to jump to handler
  5671 0000164F 2E8916[1400]            	MOV     [CS:OEM_HANDLER],DX	; Set Handler
  5672 00001654 2E8C1E[1600]            	MOV     [CS:OEM_HANDLER+2],DS
  5673 00001659 CF                      	IRET                            ; Quick return, Have altered no registers
  5674                                  
  5675                                  DO_OEM_FUNC:
  5676 0000165A 2E833E[1400]FF          	CMP     WORD [CS:OEM_HANDLER],-1
  5677 00001660 7503                    	JNZ     short OEM_JMP
  5678 00001662 E968FE                  	JMP     BADCALL                 ; Handler not initialized
  5679                                  
  5680                                  OEM_JMP:
  5681 00001665 2EFF2E[1400]            	JMP     FAR [CS:OEM_HANDLER]
  5682                                  
  5683                                  ;       ENDIF
  5684                                  
  5685                                  ;============================================================================
  5686                                  ; DOSTAB.ASM - MSDOS 6.0 - 1991
  5687                                  ;============================================================================
  5688                                  ; 11/07/2018 - Retro DOS v3.0
  5689                                  
  5690                                  ; the nul device driver used to be part of the code.  However, since the 
  5691                                  ; header is in the data, and the entry points are only given as an offset,
  5692                                  ; the strategy and interrupt entry points must also be in the data now.
  5693                                  ;
  5694                                  
  5695                                  ;procedure	snuldev,far
  5696                                  SNULDEV:
  5697                                  ;assume ds:nothing,es:nothing,ss:nothing, cs:dosdata
  5698                                  ; Offset 1599h in IBMDOS.COM (MSDOS 3.3), 1987
  5699                                  	;or	word [ES:BX+3],0100h
  5700 0000166A 26814F030001             	OR	word [ES:BX+SRHEAD.REQSTAT],STDON ; set done bit
  5701                                  ;entry inuldev
  5702                                  INULDEV:
  5703 00001670 CB                      	retf				; must not be a return!
  5704                                  ;endproc snuldev
  5705                                  
  5706                                  ;============================================================================
  5707                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  5708                                  ;============================================================================
  5709                                  ; 18/07/2018 - Retro DOS v3.0
  5710                                  ; 15/05/2019 - Retro DOS v4.0
  5711                                  
  5712                                  ; 23/07/2019 - Retro DOS v3.2
  5713                                  
  5714                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  5715                                  
  5716                                  ;   AbsSetup - setup for abs disk functions
  5717                                  ;----------------------------------------------------------------------------
  5718                                  
  5719                                  AbsSetup:
  5720 00001671 36FE06[ED02]            	INC	byte [SS:INDOS]		; SS override
  5721 00001676 FB                      	STI
  5722 00001677 FC                      	CLD
  5723 00001678 1E                      	PUSH	DS
  5724 00001679 16                      	push	ss
  5725 0000167A 1F                      	pop	ds
  5726 0000167B E8DE00                  	CALL	GETBP
  5727 0000167E 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  5728 00001680 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  5729                                  errdriv:
  5730 00001686 1F                      	POP	DS
  5731 00001687 7301                    	jnc	short AbsSetup2
  5732                                  AbsSetup_retn:
  5733 00001689 C3                      	retn
  5734                                  
  5735                                  AbsSetup2:
  5736                                  	; 10/07/2019 - Retro DOS v3.1
  5737                                  	; 23/07/2019 - Retro DOS v3.2
  5738                                  	; MSDOS 6.0
  5739                                  	;				; SS override
  5740 0000168A 36C706[B005]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  5741 00001691 E82700                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  5742 00001694 72F3                    	jc	short AbsSetup_retn
  5743                                  	;call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  5744                                  
  5745                                  	; MSDOS 3.3 (& MSDOS 6.0)
  5746 00001696 1E                      	PUSH	DS
  5747 00001697 56                      	PUSH	SI
  5748 00001698 50                      	PUSH	AX
  5749                                  
  5750 00001699 16                      	push	ss
  5751 0000169A 1F                      	pop	ds
  5752                                  	
  5753 0000169B BE[8203]                	MOV	SI,OPENBUF
  5754 0000169E 8804                    	MOV	[SI],AL
  5755 000016A0 800441                  	ADD	BYTE [SI],"A"
  5756 000016A3 C744013A00              	MOV	WORD [SI+1],003Ah ; ":",0
  5757 000016A8 B80003                  	MOV	AX,0300h
  5758 000016AB F8                      	CLC
  5759 000016AC CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  5760 000016AE 58                      	POP	AX
  5761 000016AF 5E                      	POP	SI
  5762 000016B0 1F                      	POP	DS
  5763 000016B1 73D6                    	jnc	short AbsSetup_retn
  5764                                  
  5765                                  	;mov	word [ss:EXTERR],32h
  5766 000016B3 36C706[F002]3200        	MOV	word [ss:EXTERR],error_not_supported
  5767 000016BA C3                      	retn
  5768                                  
  5769                                  ; 15/05/2019 - Retro DOS v4.0
  5770                                  
  5771                                  ;------------------------------------------------------------------------
  5772                                  ;
  5773                                  ; Procedure Name : RW32_CONVERT
  5774                                  ;
  5775                                  ;Input: same as ABSDRD and ABSDWRT
  5776                                  ;	 ES:BP -> DPB
  5777                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  5778                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  5779                                  ;	 carry clear, parms ok
  5780                                  ;
  5781                                  ;------------------------------------------------------------------------
  5782                                  
  5783                                  ; 23/07/2019 - Retro DOS v3.2
  5784                                  
  5785                                  RW32_CONVERT:
  5786 000016BB 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  5787 000016BE 7424                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  5788 000016C0 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  5789 000016C1 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  5790 000016C2 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  5791 000016C6 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  5792 000016CA 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  5793 000016CD 7408                    	JZ	short letold		;>32mb  yes		;AN000;
  5794 000016CF FEC2                    	INC	DL			;>32mb			;AN000;
  5795 000016D1 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  5796 000016D3 F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  5797 000016D5 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  5798                                  letold:
  5799 000016D7 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  5800 000016D8 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  5801 000016D9 7419                    	JZ	short old_style		;>32mb  no 		;AN000;
  5802                                  
  5803                                  	;push	ds
  5804                                  	;;getdseg <ds>
  5805                                  	;mov	ds,[cs:DosDSeg]
  5806                                  	;mov	word [AbsDskErr],207h	;>32mb  bad address mark
  5807                                  	;pop	ds
  5808                                  
  5809                                  	; 23/07/2019
  5810 000016DB 2EC706[CD0F]0702        	mov	word [cs:AbsDskErr],207h ;>32mb  bad address mark
  5811                                  
  5812 000016E2 F9                      	STC				;>32mb			;AN000;
  5813 000016E3 C3                      	retn				;>32mb			;AN000;
  5814                                  
  5815                                  new32format:
  5816                                  	;mov	dx,[bx+2]
  5817 000016E4 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  5818                                  
  5819                                  	;push	ds			; set up ds to DOSDATA
  5820                                  	;;getdseg <ds>
  5821                                  	;mov	ds,[cs:DosDSeg]
  5822                                  	;MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  5823                                  	;pop	ds
  5824                                  
  5825                                  	; 23/07/2019
  5826 000016E7 2E8916[B005]            	mov	[cs:HIGH_SECTOR],dx
  5827                                  
  5828 000016EC 8B17                    	mov	dx,[bx]
  5829                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  5830                                  	;mov	cx,[bx+4]
  5831 000016EE 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  5832                                  	;lds	bx,[bx+6]
  5833 000016F1 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  5834                                  old_style:				;>32mb			;AN000;
  5835 000016F4 F8                      	CLC				;>32mb			;AN000;
  5836 000016F5 C3                      	retn				;>32mb			;AN000;
  5837                                  
  5838                                  ;---------------------------------------------------------------------------
  5839                                  ;
  5840                                  ; Procedure Name : ABSDRD
  5841                                  ;
  5842                                  ; Interrupt 25 handler. Performs absolute disk read.
  5843                                  ; Inputs:	AL - 0-based drive number
  5844                                  ;		DS:BX point to destination buffer
  5845                                  ;		CX number of logical sectors to read
  5846                                  ;		DX starting logical sector number (0-based)
  5847                                  ; Outputs:	Original flags still on stack
  5848                                  ;		Carry set
  5849                                  ;		    AH error from BIOS
  5850                                  ;		    AL same as low byte of DI from INT 24
  5851                                  ;
  5852                                  ;---------------------------------------------------------------------------
  5853                                          ;procedure   ABSDRD,FAR
  5854                                  ABSDRD:
  5855                                  	; 23/07/2019 - Retro DOS v3.2
  5856                                  	; 15/07/2018
  5857                                  ;ASSUME DS:NOTHING,ES:NOTHING,SS:NOTHING
  5858 000016F6 FA                              CLI
  5859                                  	; 15/03/2018
  5860 000016F7 2E8C16[4205]                    MOV	[CS:USER_SS],SS
  5861 000016FC 2E8926[4005]                    MOV	[CS:USER_SP],SP        
  5862 00001701 0E                      	PUSH    CS
  5863 00001702 17                              POP     SS
  5864                                  ;ASSUME SS:DOSGROUP
  5865 00001703 BC[B608]                        MOV	SP,DSKSTACK
  5866                                  
  5867                                  	;; MSDOS 2.11
  5868                                  
  5869                                          ;;;INC	BYTE [INDOS]
  5870                                          ;;INC	BYTE [SS:INDOS]
  5871                                  	;;STI
  5872                                          ;;CLD
  5873                                          ;;PUSH	ES
  5874                                          ;;PUSH	DS
  5875                                          ;;PUSH	SS
  5876                                          ;;POP	DS
  5877                                  ;;;ASSUME DS:DOSGROUP
  5878                                          ;;;invoke GETBP
  5879                                  	;;CALL	GETBP
  5880                                          ;;POP	DS
  5881                                  ;;;ASSUME DS:NOTHING
  5882                                  
  5883                                  	; 15/07/2018 - Retro DOS v3.0
  5884                                  	; MSDOS 3.3 (& MSDOS 6.0, MSCODE.ASM, 1991)
  5885 00001706 06                              PUSH    ES ; **
  5886 00001707 E867FF                  	call    AbsSetup
  5887                                  	;	
  5888 0000170A 721E                            JC      SHORT ILEAVE
  5889                                          ;invoke	DSKREAD
  5890 0000170C E8992B                  	CALL	DSKREAD
  5891                                  TLEAVE:
  5892 0000170F 7419                            JZ      SHORT ILEAVE
  5893                                  
  5894                                  	; 15/07/2018 - Retro DOS v3.0
  5895                                          ;IF	IBM
  5896                                  ; Translate the error code to ancient 1.1 codes
  5897 00001711 06                              PUSH    ES ; *
  5898 00001712 0E                              PUSH    CS
  5899 00001713 07                              POP     ES
  5900 00001714 30E4                            XOR     AH,AH			; Nul error code
  5901                                  	;mov	cx,6
  5902 00001716 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  5903 00001719 BF[1310]                        MOV     DI,ERRIN		; Point to error conditions
  5904 0000171C F2AE                            REPNE   SCASB
  5905 0000171E 7504                            JNZ     SHORT LEAVECODE		; Not found
  5906                                  	;mov	ah,[ES:DI+5]
  5907 00001720 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  5908                                  LEAVECODE:
  5909 00001724 07                              POP     ES ; *
  5910                                  	; 15/05/2019 - Retro DOS v4.0
  5911 00001725 2EA3[CD0F]              	mov	[cs:AbsDskErr],ax
  5912                                          ;ENDIF
  5913                                  
  5914 00001729 F9                              STC
  5915                                  ILEAVE:
  5916 0000172A 07                              POP     ES ; **
  5917 0000172B FA                              CLI
  5918                                  	; 23/07/2019
  5919 0000172C 2EA1[CD0F]              	mov     ax,[cs:AbsDskErr]	; restore error
  5920                                          ; 15/03/2018
  5921 00001730 2EFE0E[ED02]            	DEC	BYTE [CS:INDOS]
  5922                                  	; 15/08/2018
  5923 00001735 2E8E16[4205]                    MOV	SS,[CS:USER_SS]
  5924 0000173A 2E8B26[4005]            	MOV	SP,[CS:USER_SP]
  5925                                  ;ASSUME SS:NOTHING
  5926 0000173F FB                              STI
  5927                                          ;return
  5928 00001740 CB                      	RETF   ; ! FAR return !
  5929                                  
  5930                                  ;ABSDRD	ENDP
  5931                                  
  5932                                  ;---------------------------------------------------------------------------
  5933                                  ;
  5934                                  ; Procedure Name : ABSDWRT
  5935                                  ;
  5936                                  ; Interrupt 26 handler. Performs absolute disk write.
  5937                                  ; Inputs:	AL - 0-based drive number
  5938                                  ;		DS:BX point to source buffer
  5939                                  ;		CX number of logical sectors to write
  5940                                  ;		DX starting logical sector number (0-based)
  5941                                  ; Outputs:	Original flags still on stack
  5942                                  ;		Carry set
  5943                                  ;		    AH error from BIOS
  5944                                  ;		    AL same as low byte of DI from INT 24
  5945                                  ;
  5946                                  ;---------------------------------------------------------------------------
  5947                                          ;procedure   ABSDWRT,FAR
  5948                                  ABSDWRT:
  5949                                  		; 23/07/2019 - Retro DOS v3.2
  5950                                  	; 15/07/2018
  5951                                  ;ASSUME	DS:NOTHING,ES:NOTHING,SS:NOTHING
  5952                                  
  5953 00001741 FA                              CLI
  5954                                  	; 15/08/2018
  5955                                  	; 15/03/2018
  5956 00001742 2E8C16[4205]            	MOV	[CS:USER_SS],SS
  5957 00001747 2E8926[4005]                    MOV	[CS:USER_SP],SP
  5958 0000174C 0E                              PUSH    CS
  5959 0000174D 17                              POP     SS
  5960                                  ;ASSUME	SS:DOSGROUP
  5961                                          ;MOV	SP,OFFSET DOSGROUP:DSKSTACK
  5962 0000174E BC[B608]                        MOV	SP,DSKSTACK
  5963                                  
  5964                                  	;; MSDOS 2.11
  5965                                  
  5966                                          ;;;INC	BYTE [INDOS]
  5967                                          ;;INC	BYTE [SS:INDOS]
  5968                                  	;;STI
  5969                                          ;;CLD
  5970                                          ;;PUSH	ES
  5971                                          ;;PUSH	DS
  5972                                          ;;PUSH	SS
  5973                                          ;;POP	DS
  5974                                  ;;;ASSUME DS:DOSGROUP
  5975                                          ;;;invoke GETBP
  5976                                  	;;CALL	GETBP
  5977                                          ;;POP	DS
  5978                                  ;;;ASSUME DS:NOTHING
  5979                                  
  5980                                  	; 15/07/2018 - Retro DOS v3.0
  5981                                  	; MSDOS 3.3 (& MSDOS 6.0, MSCODE.ASM, 1991)
  5982 00001751 06                              PUSH    ES ; **
  5983 00001752 E81CFF                  	call    AbsSetup
  5984                                  	;
  5985 00001755 72D3                            JC      SHORT ILEAVE
  5986                                          ;invoke DSKWRITE
  5987 00001757 E8772B                          CALL	DSKWRITE
  5988 0000175A EBB3                    	JMP     SHORT TLEAVE
  5989                                  
  5990                                  ;ABSDWRT ENDP
  5991                                  
  5992                                  ;----------------------------------------------------------------------------
  5993                                  ;
  5994                                  ; Procedure Name : GETBP
  5995                                  ;
  5996                                  ; Inputs:
  5997                                  ;	AL = Logical unit number (A = 0)
  5998                                  ; Function:
  5999                                  ;	Find Drive Parameter Block
  6000                                  ; Outputs:
  6001                                  ;	ES:BP points to DPB
  6002                                  ;	[THISDPB] = ES:BP
  6003                                  ;	Carry set if unit number bad or unit is a NET device.
  6004                                  ;		Later case sets extended error error_I24_not_supported
  6005                                  ; No other registers altered
  6006                                  ;
  6007                                  ;----------------------------------------------------------------------------
  6008                                  
  6009                                  GETBP:
  6010                                  	; 23/07/2019 - Retro DOS v3.2
  6011                                  	; 15/05/2019 - Retro DOS v4.0
  6012                                  	; 11/07/2018 - Retro DOS v3.0
  6013 0000175C 50                      	PUSH	AX
  6014 0000175D 0401                    	ADD	AL, 1		; No increment; need carry flag
  6015 0000175F 7216                    	JC	SHORT SKIPGET
  6016 00001761 E85155                  	CALL	GETTHISDRV
  6017                                  	; MSDOS 6.0
  6018 00001764 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  6019 00001766 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  6020 00001768 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  6021 0000176B 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  6022 0000176D F9                      	STC				;DCR.			;AN000;
  6023 0000176E A3[F002]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  6024 00001771 C706[CD0F]0102          	MOV	WORD [AbsDskErr],201h
  6025                                  SKIPGET:
  6026 00001777 58                      	POP	AX
  6027 00001778 7213                    	JC	SHORT GETBP_RETN
  6028                                  
  6029 0000177A C42E[5E05]              	LES	BP,[THISCDS]
  6030                                  	;TEST	WORD [ES:BP+43h],8000H
  6031 0000177E 26F746430080            	TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  6032 00001784 7408                    	JZ	SHORT GETBP_CDS
  6033 00001786 C706[F002]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  6034 0000178C F9                      	STC
  6035                                  GETBP_RETN:
  6036 0000178D C3                      	RETN
  6037                                  
  6038                                  GETBP_CDS:
  6039                                  	;LES	BP,[ES:BP+45h]
  6040 0000178E 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  6041                                  GOTDPB:
  6042                                  	; Load THISDPB from ES:BP
  6043 00001792 892E[4605]              	MOV	[THISDPB],BP
  6044 00001796 8C06[4805]              	MOV	[THISDPB+2],ES
  6045 0000179A C3                      	RETN
  6046                                  
  6047                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  6048                                  
  6049                                  ;----------------------------------------------------------------------------
  6050                                  ;
  6051                                  ; Procedure Name : SYS_RETURN
  6052                                  ;
  6053                                  ; These are the general system call exit mechanisms. All internal system
  6054                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  6055                                  ; is to set the user's flags and set his AX register for return.
  6056                                  ;
  6057                                  ;----------------------------------------------------------------------------
  6058                                  
  6059                                          ;procedure   SYS_RETURN,NEAR
  6060                                  SYS_RETURN:        
  6061                                          ;entry	SYS_RET_OK
  6062                                  SYS_RET_OK:   
  6063                                  	; 18/07/2018
  6064                                  	; Offset 1666h in IBMDOS.COM (MSDOS 3.3), 1987
  6065                                  	; 23/07/2019 - Retro DOS v3.2
  6066                                  	;call	FETCHI_CHECK ; MSDOS 3.3 ! IBMDOS feature ! 
  6067                                  	     
  6068 0000179B E8ABFE                  	call    Get_User_Stack
  6069                                  		; turn off user's carry flag
  6070                                  SYS_RET_OK_clc: ; 26/07/2019 
  6071                                          ;and	word [SI+16h],0FFFEh 
  6072 0000179E 836416FE                        and	word [SI+user_env.user_F],~f_Carry 
  6073 000017A2 EB10                            JMP     SHORT DO_RET
  6074                                  
  6075                                          ;entry	SYS_RET_ERR
  6076                                  SYS_RET_ERR:        
  6077 000017A4 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  6078 000017A6 E86900                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  6079 000017A9 E81A00                  	CALL	ErrorMap
  6080                                  
  6081                                  	;entry	From_GetSet
  6082                                  From_GetSet:
  6083 000017AC E89AFE                          call    Get_User_Stack
  6084                                  		; signal carry to user
  6085                                  	;or	word [SI+16h],1
  6086 000017AF 834C1601                	OR	word [SI+user_env.user_F],f_Carry
  6087 000017B3 F9                      	STC			; also, signal internal error
  6088                                  DO_RET:
  6089                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  6090 000017B4 8904                    	MOV	[SI],AX
  6091 000017B6 C3                      	RETN
  6092                                  
  6093                                  	;entry	FCB_RET_OK
  6094                                  FCB_RET_OK:
  6095                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  6096                                  NO_OP:
  6097 000017B7 30C0                    	XOR	AL,AL
  6098 000017B9 C3                      	retn
  6099                                  
  6100                                  	;entry	FCB_RET_ERR
  6101                                  FCB_RET_ERR:
  6102 000017BA 30E4                    	XOR	AH,AH
  6103 000017BC 36A3[F002]              	mov	[ss:EXTERR],AX
  6104 000017C0 E80300                  	CALL	ErrorMap
  6105 000017C3 B0FF                    	MOV	AL,-1
  6106 000017C5 C3                      	retn
  6107                                  
  6108                                  	;entry	ErrorMap
  6109                                  ErrorMap:
  6110 000017C6 56                      	PUSH	SI
  6111                                  				; ERR_TABLE_21 is now in DOSDATA
  6112 000017C7 BE[5F0D]                	MOV	SI,ERR_TABLE_21
  6113                                  				; SS override for FAILERR and EXTERR
  6114 000017CA 36803E[1403]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  6115 000017D0 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  6116                                  		 ; Ooops, this is the REAL reason
  6117                                  	;mov	word [SS:EXTERR],53h
  6118 000017D2 36C706[F002]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  6119                                  EXTENDED_NORMAL:
  6120 000017D9 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  6121 000017DC 5E                      	POP	SI
  6122 000017DD C3                      	retn
  6123                                  
  6124                                  	;EndProc SYS_RETURN
  6125                                  
  6126                                  ;---------------------------------------------------------------------------
  6127                                  ;
  6128                                  ; Procedure Name : CAL_LK
  6129                                  ;
  6130                                  ; Inputs:
  6131                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  6132                                  ;		(DS NEED not be DOSDATA)
  6133                                  ;	[EXTERR] is set with error
  6134                                  ; Function:
  6135                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  6136                                  ; Outputs:
  6137                                  ;	[EXTERR_CLASS] set
  6138                                  ;	[EXTERR_ACTION] set
  6139                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  6140                                  ; Destroys SI, FLAGS
  6141                                  ;
  6142                                  ;---------------------------------------------------------------------------
  6143                                  
  6144                                  	;procedure CAL_LK,NEAR
  6145                                  CAL_LK:
  6146 000017DE 1E                      	PUSH	DS
  6147 000017DF 50                      	PUSH	AX
  6148 000017E0 53                      	PUSH	BX
  6149                                  
  6150                                  ;M048	Context DS		; DS:SI -> Table
  6151                                  ;
  6152                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6153                                  ; is DOSDATA
  6154                                  
  6155                                  	;getdseg	<ds>	; M048: DS:SI -> Table
  6156                                  
  6157                                  	; 18/07/2018
  6158 000017E1 16                      	push	ss
  6159 000017E2 1F                      	pop	ds
  6160                                  
  6161 000017E3 8B1E[F002]              	MOV	BX,[EXTERR]	; Get error in BL
  6162                                  TABLK1:
  6163 000017E7 AC                      	LODSB
  6164                                  
  6165 000017E8 3CFF                    	CMP	AL,0FFH
  6166 000017EA 7409                    	JZ	short GOT_VALS	; End of table
  6167 000017EC 38D8                    	CMP	AL,BL
  6168 000017EE 7405                    	JZ	short GOT_VALS	; Got entry
  6169 000017F0 83C603                  	ADD	SI,3		; Next table entry
  6170                                  	; 15/08/2018
  6171 000017F3 EBF2                    	JMP	short TABLK1
  6172                                  
  6173                                  GOT_VALS:
  6174 000017F5 AD                      	LODSW			; AL is CLASS, AH is ACTION
  6175                                  
  6176 000017F6 80FCFF                  	CMP	AH,0FFH
  6177 000017F9 7404                    	JZ	short NO_SET_ACT
  6178 000017FB 8826[F202]              	MOV	[EXTERR_ACTION],AH	; Set ACTION
  6179                                  NO_SET_ACT:
  6180 000017FF 3CFF                    	CMP	AL,0FFH
  6181 00001801 7403                    	JZ	short NO_SET_CLS
  6182 00001803 A2[F302]                	MOV	[EXTERR_CLASS],AL	; Set CLASS
  6183                                  NO_SET_CLS:
  6184 00001806 AC                      	LODSB			; Get LOCUS
  6185                                  
  6186 00001807 3CFF                    	CMP	AL,0FFH
  6187 00001809 7403                    	JZ	short NO_SET_LOC
  6188 0000180B A2[EF02]                	MOV	[EXTERR_LOCUS],AL
  6189                                  NO_SET_LOC:
  6190 0000180E 5B                      	POP	BX
  6191 0000180F 58                      	POP	AX
  6192 00001810 1F                      	POP	DS
  6193 00001811 C3                      	retn
  6194                                  
  6195                                  	;EndProc CAL_LK
  6196                                  
  6197                                  ;---------------------------------------------------------------------------
  6198                                  ;
  6199                                  ; Procedure Name : ETAB_LK
  6200                                  ;
  6201                                  ; Inputs:
  6202                                  ;	AX is error code
  6203                                  ;	[USER_IN_AX] has AH value of system call involved
  6204                                  ; Function:
  6205                                  ;	Make sure error code is appropriate to this call.
  6206                                  ; Outputs:
  6207                                  ;	AX MAY be mapped error code
  6208                                  ;	[EXTERR] = Input AX
  6209                                  ; Destroys ONLY AX and FLAGS
  6210                                  ;
  6211                                  ;---------------------------------------------------------------------------
  6212                                  
  6213                                  	;procedure ETAB_LK,NEAR
  6214                                  
  6215                                  ETAB_LK: ; 10/08/2018
  6216 00001812 1E                      	PUSH	DS
  6217 00001813 56                      	PUSH	SI
  6218 00001814 51                      	PUSH	CX
  6219 00001815 53                      	PUSH	BX
  6220                                  
  6221                                  	;Context DS			; SS is DOSDATA
  6222                                  
  6223 00001816 16                      	push	ss
  6224 00001817 1F                      	pop	ds
  6225                                  
  6226 00001818 A3[F002]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  6227                                  
  6228                                  					; I21_MAP_E_TAB is now in DOSCODE
  6229 0000181B BE[C30C]                	MOV	SI,I21_MAP_E_TAB
  6230 0000181E 88C7                    	MOV	BH,AL			; Real code to BH
  6231 00001820 8A1E[0503]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  6232                                  TABLK2:
  6233                                  ;;hkn;	LODSW
  6234                                  ;	LODS	word ptr cs:[si] ; MSDOS 6.0
  6235                                  	
  6236                                  	; 18/07/2018
  6237 00001824 AD                      	lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  6238                                  
  6239 00001825 3CFF                    	CMP	AL,0FFH 		; End of table?
  6240 00001827 740C                    	JZ	short NOT_IN_TABLE	; Yes
  6241 00001829 38D8                    	CMP	AL,BL			; Found call?
  6242 0000182B 740C                    	JZ	short GOT_CALL		; Yes
  6243 0000182D 86E0                    	XCHG	AH,AL			; Count to AL
  6244 0000182F 30E4                    	XOR	AH,AH			; Make word for add
  6245 00001831 01C6                    	ADD	SI,AX			; Next table entry
  6246 00001833 EBEF                    	JMP	short TABLK2
  6247                                  
  6248                                  NOT_IN_TABLE:
  6249 00001835 88F8                    	MOV	AL,BH			; Restore original code
  6250 00001837 EB0B                    	JMP	SHORT NO_MAP
  6251                                  
  6252                                  GOT_CALL:
  6253 00001839 88E1                    	MOV	CL,AH
  6254 0000183B 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  6255                                  CHECK_CODE:
  6256                                  ;;hkn;	LODSB
  6257                                  ;	LODS	byte ptr cs:[si]
  6258                                  
  6259                                  	; 18/07/2018
  6260 0000183D AC                      	lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  6261                                  
  6262 0000183E 38F8                    	CMP	AL,BH			; Code OK?
  6263 00001840 7402                    	JZ	short NO_MAP		; Yes
  6264 00001842 E2F9                    	LOOP	CHECK_CODE
  6265                                  NO_MAP:
  6266 00001844 30E4                    	XOR	AH,AH			; AX is now valid code
  6267 00001846 5B                      	POP	BX
  6268 00001847 59                      	POP	CX
  6269 00001848 5E                      	POP	SI
  6270 00001849 1F                      	POP	DS
  6271 0000184A C3                      	retn
  6272                                  
  6273                                  	;EndProc ETAB_LK
  6274                                  
  6275                                  ; 18/07/2018 - Retro DOS v3.0
  6276                                  ;---------------------------------------------------------------------------
  6277                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  6278                                  
  6279                                  ;IF installed
  6280                                  ;---------------------------------------------------------------------------
  6281                                  ;
  6282                                  ; Procedure Name : SetBad
  6283                                  ;
  6284                                  ; SetBad sets up info for bad functions
  6285                                  ;
  6286                                  ;---------------------------------------------------------------------------
  6287                                  
  6288                                  SetBad:
  6289                                  	;mov	ax,1
  6290 0000184B B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  6291                                  
  6292                                  ;	set up ds to point to DOSDATA
  6293                                  
  6294                                  	; MSDOS 6.0
  6295                                  	;push	ds
  6296                                  
  6297                                  	;getdseg <ds>
  6298                                  	;MOV	[EXTERR_LOCUS],errLOC_Unk	
  6299                                  
  6300                                  	; MSDOS 3.3
  6301                                  	;mov	byte [cs:EXTERR_LOCUS],1
  6302 0000184E 2EC606[EF02]01          	MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  6303                                  
  6304                                  	;pop	ds	  		;hkn; restore ds
  6305                                  
  6306 00001854 F9                      	STC
  6307 00001855 C3                      	retn
  6308                                  
  6309                                  ;--------------------------------------------------------------------------
  6310                                  ;
  6311                                  ; Procedure Name : BadCall
  6312                                  ;
  6313                                  ; BadCall is the initial routine for bad function calls
  6314                                  ;
  6315                                  ;--------------------------------------------------------------------------
  6316                                  
  6317                                  BadCall:
  6318 00001856 E8F2FF                  	call	SetBad
  6319 00001859 CB                      	retf
  6320                                  
  6321                                  ;--------------------------------------------------------------------------
  6322                                  ;
  6323                                  ; OKCall always sets carry to off.
  6324                                  ;
  6325                                  ;-----------------------------------------------------------------------
  6326                                  
  6327                                  OKCall:
  6328 0000185A F8                      	CLC
  6329 0000185B CB                      	retf
  6330                                  
  6331                                  ;---------------------------------------------------------------------------
  6332                                  ;
  6333                                  ; Procedure Name : INT2F
  6334                                  ;
  6335                                  ; INT 2F handler works as follows:
  6336                                  ;   PUSH    AX
  6337                                  ;   MOV     AX,multiplex:function
  6338                                  ;   INT     2F
  6339                                  ;   POP     ...
  6340                                  ; The handler itself needs to make the AX available for the various routines.
  6341                                  ;
  6342                                  ;----------------------------------------------------------------------------
  6343                                  
  6344                                  ;PUBLIC	Int2F
  6345                                  ;INT2F	PROC	FAR
  6346                                  
  6347                                  	; 18/07/2018 - Retro DOS v3.0
  6348                                  
  6349                                  INT2F:
  6350                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  6351                                  INT2FNT:
  6352                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  6353 0000185C FB                      	STI
  6354                                  	;cmp	ah,11h
  6355 0000185D 80FC11                  	CMP	AH,MultNET
  6356 00001860 750A                    	JNZ	short INT2FSHR
  6357                                  TestInstall:
  6358 00001862 08C0                    	OR	AL,AL
  6359 00001864 7403                    	JZ	short Leave2F
  6360                                  BadFunc:
  6361 00001866 E8E2FF                  	CALL	SetBad
  6362                                  
  6363                                  	;entry	Leave2F
  6364                                  Leave2F:
  6365 00001869 CA0200                  	RETF	2			; long return + clear flags off stack
  6366                                  
  6367                                  INT2FSHR:
  6368                                  	;cmp	ah,10h
  6369 0000186C 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  6370 0000186F 74F1                    	JZ	short TestInstall	; yes, check for installation
  6371                                  INT2FNLS:
  6372                                  	;cmp	ah,14h
  6373 00001871 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  6374 00001874 74EC                    	JZ	short TestInstall	; yes check for installation
  6375                                  INT2FDOS:
  6376                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  6377                                  
  6378                                  	; 18/07/2018
  6379                                  	; MSDOS 6.0
  6380                                  	;CMP	AH,MultDOS
  6381                                  	;JNZ	check_win		;check if win386 broadcast
  6382                                  	;jmp	DispatchDOS
  6383                                  
  6384                                  	; .... win386 .... 
  6385                                  	
  6386                                  	; 18/07/2018
  6387                                  	; MSDOS 3.3
  6388                                  	;cmp	ah,12h	
  6389 00001876 80FC12                  	CMP	AH,MultDOS
  6390 00001879 7401                    	jz	short DispatchDOS
  6391 0000187B CF                      	iret
  6392                                  
  6393                                  ;INT2F	ENDP
  6394                                  	
  6395                                  DispatchDOS:
  6396 0000187C 2EFF36[080F]            	PUSH	word [CS:FOO]		; push return address
  6397 00001881 2EFF36[0A0F]            	PUSH	word [CS:DTab]		; push table address
  6398 00001886 50                      	PUSH	AX			; push index
  6399 00001887 55                      	PUSH	BP
  6400 00001888 89E5                    	MOV	BP,SP
  6401                                  		; stack looks like:
  6402                                  		;   0	BP
  6403                                  		;   2	DISPATCH
  6404                                  		;   4	TABLE
  6405                                  		;   6	RETURN
  6406                                  		;   8	LONG-RETURN
  6407                                  		;   c	FLAGS
  6408                                  		;   e	AX
  6409                                  	
  6410 0000188A 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6411 0000188D 5D                      	POP	BP
  6412 0000188E E8B507                  	call	TableDispatch
  6413 00001891 EBD3                    	JMP	short BadFunc 		; return indicates invalid function
  6414                                  
  6415                                  INT2F_etcetera:
  6416                                  	;entry	DosGetGroup
  6417                                  DosGetGroup:
  6418                                  	; MSDOS 6.0
  6419                                  ;SR; Cannot use CS now
  6420                                  ;
  6421                                  ;	PUSH	CS
  6422                                  ;	POP	DS
  6423                                  
  6424                                  	;getdseg <ds>
  6425                                  	;retn
  6426                                  
  6427                                  	; MSDOS 3.3
  6428 00001893 0E                      	push	cs
  6429 00001894 1F                      	pop	ds
  6430 00001895 C3                      	retn
  6431                                  
  6432                                  	;entry	DOSInstall
  6433                                  DOSInstall:
  6434 00001896 B0FF                    	MOV	AL,0FFh
  6435 00001898 C3                      	retn
  6436                                  
  6437                                  ;ENDIF
  6438                                  
  6439                                  ;============================================================================
  6440                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  6441                                  ;============================================================================
  6442                                  ; 18/07/2018 - Retro DOS 3.0
  6443                                  
  6444                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
  6445                                  ;     ENTRY: AL = Character to map
  6446                                  ;     EXIT:  AL = The converted character
  6447                                  ; Alters no registers except AL and flags.
  6448                                  ; The routine should do nothing to chars below 80H.
  6449                                  ;
  6450                                  ; Example:
  6451                                  
  6452                                  ;Procedure   MAP_CASE,FAR
  6453                                  
  6454                                  MAP_CASE:
  6455                                  	; Offset 176Ch in IBMDOS.COM (MSDOS 3.3), 1987
  6456                                  	
  6457 00001899 3C80                    	CMP	AL,80H
  6458 0000189B 7301                    	JAE	short Map1	;Map no chars below 80H ever
  6459 0000189D CB                      	RETF
  6460                                  Map1:
  6461 0000189E 2C80                    	SUB	AL,80H		;Turn into index value
  6462 000018A0 1E                      	PUSH	DS
  6463 000018A1 53                      	PUSH	BX
  6464 000018A2 BB[C610]                	MOV	BX,UCASE_TAB+2
  6465                                  FINISH:
  6466 000018A5 0E                      	PUSH	CS		;Move to DS
  6467 000018A6 1F                      	POP	DS
  6468 000018A7 D7                      	XLAT			; Get upper case character
  6469 000018A8 5B                      	POP	BX
  6470 000018A9 1F                      	POP	DS
  6471                                  L_RET:	
  6472 000018AA CB                      	RETF
  6473                                  
  6474                                  ;EndProc MAP_CASE
  6475                                  
  6476                                  ;============================================================================
  6477                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6478                                  ;============================================================================
  6479                                  ; 18/07/2018 - Retro DOS v3.0
  6480                                  
  6481                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6482                                  
  6483                                  ; OEMFunction key is expected to process a single function
  6484                                  ;   key input from a device and dispatch to the proper
  6485                                  ;   routines leaving all registers UNTOUCHED.
  6486                                  ;
  6487                                  ; Inputs:   CS, SS are DOSGROUP
  6488                                  ; Outputs:  None. This function is expected to JMP to onw of
  6489                                  ;           the following labels:
  6490                                  ;
  6491                                  ;           GetCh       - ignore the sequence
  6492                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6493                                  ;           ExitIns     - toggle insert mode
  6494                                  ;           EnterIns    - toggle insert mode
  6495                                  ;           BackSp      - move backwards one space
  6496                                  ;           ReEdit      - reedit the line with a new template
  6497                                  ;           KilNew      - discard the current line and start from scratch
  6498                                  ;           CopyLin     - copy the rest of the template into the line
  6499                                  ;           SkipStr     - read the next character and skip to it in the template
  6500                                  ;           CopyStr     - read next char and copy from template to line until char
  6501                                  ;           SkipOne     - advance position in template one character
  6502                                  ;           CopyOne     - copy next character in template into line
  6503                                  ;           CtrlZ       - place a ^Z into the template
  6504                                  ; Registers that are allowed to be modified by this function are:
  6505                                  ;           AX, CX, BP
  6506                                  
  6507                                  OEMFunctionKey:
  6508 000018AB E88108                  	CALL	_$STD_CON_INPUT_NO_ECHO  ; Get the second byte of the sequence
  6509 000018AE B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6510 000018B0 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6511 000018B1 BF[1113]                	MOV     DI,ESCTAB		; offset of second byte table
  6512 000018B4 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6513 000018B6 5F                      	POP     DI                      ; restore DI
  6514 000018B7 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6515 000018B9 89CD                    	MOV     BP,CX                   ; move to indexable register
  6516                                  	;JMP	word [SS:BP+ESCFUNC]	; Go to the right routine
  6517 000018BB FFA6[1F13]              	JMP	word [BP+ESCFUNC]
  6518                                  	
  6519                                  ;============================================================================
  6520                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6521                                  ;============================================================================
  6522                                  ; Retro DOS v3.0 - 18/07/2018
  6523                                  
  6524                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6525                                  ;----------------------------------------------------------------------------
  6526                                  ; Retro DOS v2.0 - 13/03/2018
  6527                                  
  6528                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6529                                  
  6530                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6531                                  
  6532                                  ;**	$GET_DATE - Get Current Date
  6533                                  ;
  6534                                  ;	ENTRY	none
  6535                                  ;	EXIT	(cx:dx) = current date
  6536                                  ;	USES	all
  6537                                  
  6538                                  _$GET_DATE:	;System call 42
  6539                                  
  6540 000018BF 16                              PUSH    SS
  6541 000018C0 1F                              POP     DS
  6542 000018C1 E8B700                          CALL	READTIME        ;Check for rollover to next day
  6543 000018C4 A1[1C03]                        MOV     AX,[YEAR]
  6544                                  
  6545                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6546                                  
  6547 000018C7 8B1E[1A03]                      MOV     BX,[DAY]	; fetch both day and month
  6548 000018CB E87BFD                  	CALL	Get_User_Stack	;Get pointer to user registers
  6549                                          ;MOV    [SI+6],BX  	;DH=month, DL=day
  6550 000018CE 895C06                  	MOV	[SI+user_env.user_DX],BX
  6551 000018D1 05BC07                          ADD     AX,1980         ;Put bias back
  6552                                          ;MOV    [SI+4],AX  	;CX=year
  6553 000018D4 894404                  	MOV	[SI+user_env.user_CX],AX
  6554                                          ;MOV	AL,[WEEKDAY]
  6555 000018D7 36A0[2003]                      MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6556 000018DB C3                      	RETN
  6557                                  
  6558                                  ;**	$SET_DATE - Set Current Date
  6559                                  ;
  6560                                  ;	ENTRY	(cx:dx) = current date
  6561                                  ;	EXIT	(al) = -1 iff bad date
  6562                                  ;		(al) = 0 if ok
  6563                                  ;	USES	all
  6564                                  
  6565                                  _$SET_DATE:			;System call 43
  6566                                  
  6567 000018DC B0FF                            MOV     AL,-1           ;Be ready to flag error
  6568 000018DE 81E9BC07                        SUB     CX,1980         ;Fix bias in year
  6569 000018E2 7217                            JC      SHORT RET24	;Error if not big enough
  6570 000018E4 83F977                          CMP     CX,119          ;Year must be less than 2100
  6571 000018E7 7712                            JA      SHORT RET24
  6572 000018E9 08F6                            OR      DH,DH
  6573 000018EB 740E                            JZ      SHORT RET24
  6574 000018ED 08D2                            OR      DL,DL
  6575 000018EF 740A                            JZ      SHORT RET24	;Error if either month or day is 0
  6576 000018F1 80FE0C                          CMP     DH,12           ;Check against max. month
  6577 000018F4 7705                            JA      SHORT RET24
  6578 000018F6 16                              PUSH    SS
  6579 000018F7 1F                              POP     DS
  6580 000018F8 E81301                  	CALL	DODATE
  6581                                  RET24:  
  6582 000018FB C3                      	RETN
  6583                                  
  6584                                  
  6585                                  ;**	$GET_TIME - Get Current Time
  6586                                  ;
  6587                                  ;	ENTRY	none
  6588                                  ;	EXIT	(cx:dx) = current time
  6589                                  ;	USES	all
  6590                                  
  6591                                  _$GET_TIME:			;System call 44
  6592                                  
  6593 000018FC 16                              PUSH    SS
  6594 000018FD 1F                              POP     DS
  6595 000018FE E87A00                  	CALL	READTIME
  6596 00001901 E845FD                  	CALL	Get_User_Stack           ;Get pointer to user registers
  6597                                         ;MOV     [SI+6],DX
  6598 00001904 895406                  	MOV	[SI+user_env.user_DX],DX
  6599                                         ;MOV     [SI+4],CX
  6600 00001907 894C04                  	MOV	[SI+user_env.user_CX],CX
  6601 0000190A 30C0                            XOR     AL,AL
  6602                                  RET26:  
  6603 0000190C C3                      	RETN
  6604                                  
  6605                                  ;**	$SET_TIME - Set Current Time
  6606                                  ;
  6607                                  ;	ENTRY	(cx:dx) = time
  6608                                  ;	EXIT	(al) = 0 if 0k
  6609                                  ;		(al) = -1 if invalid
  6610                                  ;	USES	ALL
  6611                                  
  6612                                  _$SET_TIME:			;System call 45
  6613                                  
  6614 0000190D B0FF                            MOV     AL,-1           ;Flag in case of error
  6615 0000190F 80FD18                          CMP     CH,24           ;Check hours
  6616 00001912 73F8                            JAE     SHORT RET26
  6617 00001914 80F93C                          CMP     CL,60           ;Check minutes
  6618 00001917 73F3                            JAE     SHORT RET26
  6619 00001919 80FE3C                          CMP     DH,60           ;Check seconds
  6620 0000191C 73EE                            JAE     SHORT RET26
  6621 0000191E 80FA64                          CMP     DL,100          ;Check 1/100's
  6622 00001921 73E9                            JAE     SHORT RET26
  6623 00001923 51                              PUSH    CX
  6624 00001924 52                              PUSH    DX
  6625 00001925 16                              PUSH    SS
  6626 00001926 1F                              POP     DS
  6627 00001927 BB[7A03]                        MOV     BX,TIMEBUF
  6628 0000192A B90600                          MOV     CX,6
  6629 0000192D 31D2                            XOR     DX,DX
  6630 0000192F 89D0                            MOV     AX,DX
  6631 00001931 53                              PUSH    BX
  6632 00001932 E86D38                  	CALL	SETREAD
  6633 00001935 1E                              PUSH    DS
  6634 00001936 C536[2E00]                      LDS     SI,[BCLOCK]
  6635 0000193A E8F337                  	CALL	DEVIOCALL2      ;Get correct day count
  6636 0000193D 1F                              POP     DS
  6637 0000193E 5B                              POP     BX
  6638 0000193F E89338                  	CALL	SETWRITE
  6639 00001942 8F06[7E03]                      POP     WORD [TIMEBUF+4]
  6640 00001946 8F06[7C03]                      POP     WORD [TIMEBUF+2]
  6641 0000194A C536[2E00]                      LDS     SI,[BCLOCK]
  6642 0000194E E8DF37                  	CALL	DEVIOCALL2      ;Set the time
  6643 00001951 30C0                            XOR     AL,AL
  6644 00001953 C3                              RETN
  6645                                  
  6646                                  ; 11/07/2018 - Retro DOS v3.0
  6647                                  ; Retro DOS v2.0 - 14/03/2018
  6648                                  
  6649                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6650                                  
  6651                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6652                                  
  6653                                  ;
  6654                                  ; Date16 returns the current date in AX, current time in DX
  6655                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6656                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6657                                  ;
  6658                                  
  6659                                  DATE16:
  6660                                  	
  6661                                  ;M048	Context DS
  6662                                  ;
  6663                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6664                                  ; is DOSDATA
  6665                                  
  6666                                  	;getdseg	<ds>			; M048
  6667                                  
  6668                                  	;PUSH	SS
  6669 00001954 0E                      	PUSH	CS
  6670 00001955 1F                      	POP	DS
  6671                                  
  6672 00001956 51                              PUSH    CX
  6673 00001957 06                              PUSH    ES
  6674 00001958 E82000                          CALL    READTIME
  6675 0000195B 07                              POP     ES
  6676 0000195C D0E1                            SHL     CL,1            ;Minutes to left part of byte
  6677 0000195E D0E1                            SHL     CL,1
  6678 00001960 D1E1                            SHL     CX,1            ;Push hours and minutes to left end
  6679 00001962 D1E1                            SHL     CX,1
  6680 00001964 D1E1                            SHL     CX,1
  6681 00001966 D0EE                            SHR     DH,1            ;Count every two seconds
  6682 00001968 08F1                            OR      CL,DH           ;Combine seconds with hours and minutes
  6683 0000196A 89CA                            MOV     DX,CX
  6684                                  
  6685                                  ;	WARNING!  MONTH and YEAR must be adjacently allocated
  6686                                  
  6687 0000196C A1[1B03]                        MOV     AX,[MONTH]	;Fetch month and year
  6688 0000196F B104                            MOV     CL,4
  6689 00001971 D2E0                            SHL     AL,CL		;Push month to left to make room for day
  6690 00001973 D1E0                            SHL     AX,1
  6691 00001975 59                              POP     CX
  6692 00001976 0A06[1A03]                      OR      AL,[DAY]
  6693                                  RET21:
  6694 0000197A C3                              RETN
  6695                                  
  6696                                  READTIME:
  6697                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6698                                  ;Uses AX, CX, DX.
  6699                                  
  6700 0000197B C706[C30F]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6701 00001981 56                              PUSH    SI
  6702 00001982 53                              PUSH    BX
  6703                                  
  6704 00001983 BB[7A03]                        MOV     BX,TIMEBUF
  6705                                  
  6706 00001986 B90600                          MOV     CX,6
  6707 00001989 31D2                            XOR     DX,DX
  6708 0000198B 89D0                            MOV     AX,DX
  6709 0000198D E81238                  	CALL	SETREAD
  6710 00001990 1E                              PUSH    DS
  6711 00001991 C536[2E00]                      LDS     SI,[BCLOCK]
  6712 00001995 E89837                  	CALL	DEVIOCALL2      ;Get correct date and time
  6713 00001998 1F                              POP     DS
  6714 00001999 5B                              POP     BX
  6715 0000199A 5E                              POP     SI
  6716 0000199B A1[7A03]                        MOV     AX,[TIMEBUF]
  6717 0000199E 8B0E[7C03]                      MOV     CX,[TIMEBUF+2]
  6718 000019A2 8B16[7E03]                      MOV     DX,[TIMEBUF+4]
  6719 000019A6 3B06[1E03]                      CMP     AX,[DAYCNT]     ;See if day count is the same
  6720                                          ;JZ	SHORT RET22
  6721 000019AA 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6722                                  	;cmp	ax,43830
  6723 000019AC 3D36AB                          CMP     AX,FOURYEARS*30 ;Number of days in 120 years
  6724 000019AF 733D                            JAE     SHORT RET22	;Ignore if too large
  6725 000019B1 A3[1E03]                        MOV     [DAYCNT],AX
  6726 000019B4 56                              PUSH    SI
  6727 000019B5 51                              PUSH    CX
  6728 000019B6 52                              PUSH    DX              ;Save time
  6729 000019B7 31D2                            XOR     DX,DX
  6730                                  	;mov	cx,1461
  6731 000019B9 B9B505                          MOV     CX,FOURYEARS    ;Number of days in 4 years
  6732 000019BC F7F1                            DIV     CX              ;Compute number of 4-year units
  6733 000019BE D1E0                            SHL     AX,1
  6734 000019C0 D1E0                            SHL     AX,1
  6735 000019C2 D1E0                            SHL     AX,1            ;Multiply by 8 (no. of half-years)
  6736 000019C4 89C1                            MOV     CX,AX           ;<240 implies AH=0
  6737                                  
  6738 000019C6 BE[AF0C]                        MOV     SI,YRTAB        ;Table of days in each year
  6739                                  
  6740 000019C9 E82300                          CALL    DSLIDE          ;Find out which of four years we're in
  6741 000019CC D1E9                            SHR     CX,1            ;Convert half-years to whole years
  6742 000019CE 7304                            JNC     SHORT SK	;Extra half-year?
  6743 000019D0 81C2C800                        ADD     DX,200
  6744                                  SK:
  6745 000019D4 E82400                          CALL    SETYEAR
  6746 000019D7 B101                            MOV     CL,1            ;At least at first month in year
  6747                                  
  6748 000019D9 BE[B70C]                        MOV     SI,MONTAB       ;Table of days in each month
  6749                                          
  6750 000019DC E81000                  	CALL    DSLIDE          ;Find out which month we're in
  6751 000019DF 880E[1B03]                      MOV     [MONTH],CL
  6752 000019E3 42                              INC     DX              ;Remainder is day of month (start with one)
  6753 000019E4 8816[1A03]                      MOV     [DAY],DL
  6754 000019E8 E89400                          CALL    WKDAY           ;Set day of week
  6755 000019EB 5A                              POP     DX
  6756 000019EC 59                              POP     CX
  6757 000019ED 5E                              POP     SI
  6758                                  RET22:  
  6759 000019EE C3                      	RETN
  6760                                  
  6761                                  DSLIDE:
  6762 000019EF B400                            MOV     AH,0
  6763                                  DSLIDE1:
  6764 000019F1 AC                              LODSB			;Get count of days
  6765 000019F2 39C2                            CMP     DX,AX           ;See if it will fit
  6766 000019F4 7217                            JB      SHORT RET23	;If not, done
  6767 000019F6 29C2                            SUB     DX,AX
  6768 000019F8 41                              INC     CX              ;Count one more month/year
  6769 000019F9 EBF6                            JMP     SHORT DSLIDE1
  6770                                  
  6771                                  SETYEAR:
  6772                                  ;Set year with value in CX. Adjust length of February for this year.
  6773                                  
  6774                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6775                                  ;       set DS to DOSDATA. Since the only guy calling this should be the DOS
  6776                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6777                                  ;	preserve DS as CHKYR is also called as a routine.
  6778                                  
  6779                                  
  6780                                  	; MSDOS 6.0 (18/07/2018) ; *
  6781                                  
  6782                                  	;GETDSEG DS
  6783                                  
  6784 000019FB 0E                      	PUSH	CS  ; *
  6785 000019FC 1F                      	POP	DS  ; *
  6786                                  
  6787                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987 
  6788                                  
  6789 000019FD 880E[1C03]                      MOV     [YEAR],CL
  6790                                  CHKYR:
  6791 00001A01 F6C103                          TEST    CL,3            ;Check for leap year
  6792 00001A04 B01C                            MOV     AL,28
  6793 00001A06 7502                            JNZ     SHORT SAVFEB	;28 days if no leap year
  6794 00001A08 FEC0                            INC     AL              ;Add leap day
  6795                                  SAVFEB:
  6796                                  	;mov	[february],al
  6797 00001A0A A2[B80C]                        MOV     [MONTAB+1],AL   ;Store for February
  6798                                  RET23:  
  6799 00001A0D C3                      	RETN
  6800                                  
  6801                                  DODATE:
  6802 00001A0E E8F0FF                          CALL    CHKYR           ;Set Feb. up for new year
  6803 00001A11 88F0                            MOV     AL,DH
  6804                                  
  6805 00001A13 BB[B60C]                        MOV     BX,MONTAB-1
  6806                                  
  6807 00001A16 D7                              XLAT                    ;Look up days in month
  6808 00001A17 38D0                            CMP     AL,DL
  6809 00001A19 B0FF                            MOV     AL,-1           ;Restore error flag, just in case
  6810                                          ;JB	SHORT RET25	;Error if too many days
  6811 00001A1B 72F0                            jb	short RET23 ; 18/07/2018
  6812 00001A1D E8DBFF                  	CALL    SETYEAR
  6813                                  ;
  6814                                  ; WARNING!  DAY and MONTH must be adjacently allocated
  6815                                  ;
  6816 00001A20 8916[1A03]                      MOV     [DAY],DX	;Set both day and month
  6817 00001A24 D1E9                            SHR     CX,1
  6818 00001A26 D1E9                            SHR     CX,1
  6819                                  	;mov	ax,1461
  6820 00001A28 B8B505                          MOV     AX,FOURYEARS
  6821 00001A2B 89D3                            MOV     BX,DX
  6822 00001A2D F7E1                            MUL     CX
  6823 00001A2F 8A0E[1C03]                      MOV     CL,[YEAR]
  6824 00001A33 80E103                          AND     CL,3
  6825                                  
  6826 00001A36 BE[AF0C]                        MOV     SI,YRTAB
  6827                                  
  6828 00001A39 89C2                            MOV     DX,AX
  6829 00001A3B D1E1                            SHL     CX,1            ;Two entries per year, so double count
  6830 00001A3D E85200                          CALL    DSUM            ;Add up the days in each year
  6831 00001A40 88F9                            MOV     CL,BH           ;Month of year
  6832                                  
  6833 00001A42 BE[B70C]                        MOV     SI,MONTAB
  6834                                  
  6835 00001A45 49                              DEC     CX              ;Account for months starting with one
  6836 00001A46 E84900                          CALL    DSUM            ;Add up days in each month
  6837 00001A49 88D9                            MOV     CL,BL           ;Day of month
  6838 00001A4B 49                              DEC     CX              ;Account for days starting with one
  6839 00001A4C 01CA                            ADD     DX,CX           ;Add in to day total
  6840 00001A4E 92                              XCHG    AX,DX           ;Get day count in AX
  6841 00001A4F A3[1E03]                        MOV     [DAYCNT],AX
  6842 00001A52 56                              PUSH    SI
  6843 00001A53 53                              PUSH    BX
  6844 00001A54 50                              PUSH    AX
  6845                                  
  6846 00001A55 BB[7A03]                        MOV     BX,TIMEBUF
  6847                                  
  6848 00001A58 B90600                          MOV     CX,6
  6849 00001A5B 31D2                            XOR     DX,DX
  6850 00001A5D 89D0                            MOV     AX,DX
  6851 00001A5F 53                              PUSH    BX
  6852 00001A60 E83F37                  	CALL	SETREAD
  6853                                  
  6854 00001A63 1E                              PUSH    DS
  6855 00001A64 C536[2E00]                      LDS     SI,[BCLOCK]
  6856 00001A68 E8C536                  	CALL	DEVIOCALL2	;Get correct date and time
  6857 00001A6B 1F                              POP     DS
  6858 00001A6C 5B                              POP     BX
  6859 00001A6D E86537                  	CALL	SETWRITE
  6860 00001A70 8F06[7A03]                      POP     WORD [TIMEBUF]
  6861 00001A74 1E                              PUSH    DS
  6862 00001A75 C536[2E00]                      LDS     SI,[BCLOCK]
  6863 00001A79 E8B436                  	CALL	DEVIOCALL2      ;Set the date
  6864 00001A7C 1F                              POP     DS
  6865 00001A7D 5B                              POP     BX
  6866 00001A7E 5E                              POP     SI
  6867                                  WKDAY:
  6868 00001A7F A1[1E03]                        MOV     AX,[DAYCNT]
  6869 00001A82 31D2                            XOR     DX,DX
  6870 00001A84 B90700                          MOV     CX,7
  6871 00001A87 40                              INC     AX
  6872 00001A88 40                              INC     AX              ;First day was Tuesday
  6873 00001A89 F7F1                            DIV     CX              ;Compute day of week
  6874 00001A8B 8816[2003]                      MOV     [WEEKDAY],DL
  6875 00001A8F 30C0                            XOR     AL,AL           ;Flag OK
  6876                                  RET25:
  6877 00001A91 C3                      	RETN
  6878                                  
  6879                                  ;**	DSUM - Compute the sum of a string of bytes
  6880                                  ;
  6881                                  ;	ENTRY	(cx) = byte count
  6882                                  ;		(ds:si) = byte address
  6883                                  ;		(dx) = sum register, initialized by caller
  6884                                  ;	EXIT	(dx) updated
  6885                                  ;	USES	ax, cx, dx, si, flags
  6886                                  
  6887                                  DSUM:
  6888 00001A92 B400                            MOV     AH,0
  6889                                  	;JCXZ	DSUM9
  6890 00001A94 E3FB                            JCXZ	RET25 ; 18/07/2018
  6891                                  DSUM1:
  6892 00001A96 AC                              LODSB
  6893 00001A97 01C2                            ADD     DX,AX
  6894 00001A99 E2FB                            LOOP    DSUM1
  6895                                  DSUM9:
  6896 00001A9B C3                              RETN
  6897                                  
  6898                                  ;============================================================================
  6899                                  ; GETSET.ASM
  6900                                  ;============================================================================
  6901                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6902                                  ; Retro DOS v2.0 - 12/03/2018
  6903                                  
  6904                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6905                                  ;NAME	GETSET
  6906                                  
  6907                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6908                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6909                                  
  6910                                  ;USERNUM:
  6911                                  ;	DW	0			; 24 bit user number
  6912                                  ;       DB      0
  6913                                  ;;	IF      IBM
  6914                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6915                                  ;;	ELSE
  6916                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6917                                  ;;	ENDIF
  6918                                  
  6919                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6920                                  ;; 08/07/2018 - Retro DOS v3.0
  6921                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6922                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6923                                  
  6924                                  
  6925                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6926                                  
  6927                                  _$GET_VERSION:
  6928                                  
  6929                                  ; Inputs:
  6930                                  ;       None
  6931                                  ; Function:
  6932                                  ;       Return MS-DOS version number
  6933                                  ; Outputs:
  6934                                  ;       OEM number in BH
  6935                                  ;       User number in BL:CX (24 bits)
  6936                                  ;       Version number as AL.AH in binary
  6937                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6938                                  
  6939                                  ; MSDOS 6.0
  6940                                  ;		if input al = 00
  6941                                  ;		  (bh) = OEM number			
  6942                                  ;		else if input al = 01
  6943                                  ;		  (bh) = version flags
  6944                                  ;		 
  6945                                  ;		       	 bits 0-2 = DOS internal revision
  6946                                  ;		       	 bits 3-7 = DOS type flags
  6947                                  ;		              bit 3    = DOS is in ROM
  6948                                  ;		              bit 4    = DOS in in HMA
  6949                                  ;		              bits 5-7 = reserved
  6950                                  ;               M007 change - only bit 3 is now valid. Other bits
  6951                                  ;               are 0 when AL = 1
  6952                                  
  6953                                  	
  6954                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6955                                  
  6956 00001A9C 16                              PUSH    SS
  6957 00001A9D 1F                              POP     DS
  6958 00001A9E 8B1E[7603]                      MOV     BX,[USERNUM+2]
  6959 00001AA2 8B0E[7403]                      MOV     CX,[USERNUM]
  6960 00001AA6 A1[AD0C]                        MOV     AX,[MSVERS]
  6961 00001AA9 E89DFB                          call	Get_User_Stack
  6962                                          ;MOV	[SI+2],BX
  6963 00001AAC 895C02                  	mov	[SI+user_env.user_BX],BX
  6964                                          ;MOV	[SI+4],CX
  6965 00001AAF 894C04                  	mov	[SI+user_env.user_CX],CX
  6966                                          ;MOV	[SI+user_env.user_AX],AX  ; Really only sets AH
  6967 00001AB2 8904                            MOV	[SI],AX ; 31/03/2018
  6968 00001AB4 C3                      	RETN
  6969                                  
  6970                                  ; 18/07/2018 - Retro DOS v3.0
  6971                                  
  6972                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6973                                  
  6974                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6975                                  ;
  6976                                  ;	ENTRY	none
  6977                                  ;	EXIT	(al) = value of VERIFY flag
  6978                                  ;	USES	all
  6979                                  
  6980                                  
  6981                                  _$GET_VERIFY_ON_WRITE:
  6982                                  
  6983                                  ;hkn; SS override
  6984 00001AB5 36A0[CB02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6985 00001AB9 C3                      	retn
  6986                                  
  6987                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6988                                  ;
  6989                                  ;	ENTRY	(al) = value of VERIFY flag
  6990                                  ;	EXIT	none
  6991                                  ;	USES	all
  6992                                  
  6993                                  _$SET_VERIFY_ON_WRITE:
  6994                                  
  6995 00001ABA 2401                    	AND	AL,1
  6996                                  ;hkn; SS override
  6997 00001ABC 36A2[CB02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6998                                  RET27:	; 18/07/2018
  6999 00001AC0 C3                      	retn
  7000                                  
  7001                                  ; 19/07/2018 - Retro DOS v3.0
  7002                                  
  7003                                  ;BREAK <$International - return country-dependent information>
  7004                                  
  7005                                  ;----------------------------------------------------------------------------
  7006                                  ;
  7007                                  ; Procedure Name : $INTERNATIONAL
  7008                                  ;
  7009                                  ; Inputs:
  7010                                  ;	MOV	AH,International
  7011                                  ;	MOV	AL,country	(al = 0 => current country)
  7012                                  ;      [MOV	BX,country]
  7013                                  ;	LDS	DX,block
  7014                                  ;	INT	21
  7015                                  ; Function:
  7016                                  ;	give users an idea of what country the application is running
  7017                                  ; Outputs:
  7018                                  ;	IF DX != -1 on input (get country)
  7019                                  ;	  AL = 0 means return current country table.
  7020                                  ;	  0<AL<0FFH means return country table for country AL
  7021                                  ;	  AL = 0FF means return country table for country BX
  7022                                  ;	  No Carry:
  7023                                  ;	     Register BX will contain the 16-bit country code.
  7024                                  ;	     Register AL will contain the low 8 bits of the country code.
  7025                                  ;	     The block pointed to by DS:DX is filled in with the information
  7026                                  ;	     for the particular country.
  7027                                  ;		BYTE  Size of this table excluding this byte and the next
  7028                                  ;		BYTE  Country code represented by this table
  7029                                  ;			A sequence of n bytes, where n is the number specified
  7030                                  ;			by the first byte above and is not > internat_block_max,
  7031                                  ;			in the correct order for being returned by the
  7032                                  ;			INTERNATIONAL call as follows:
  7033                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  7034                                  ;		5 BYTE	Currency symbol null terminated
  7035                                  ;		2 BYTE	thousands separator null terminated
  7036                                  ;		2 BYTE	Decimal point null terminated
  7037                                  ;		2 BYTE	Date separator null terminated
  7038                                  ;		2 BYTE	Time separator null terminated
  7039                                  ;		1 BYTE	Bit field.  Currency format.
  7040                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  7041                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  7042                                  ;		1 BYTE	No. of significant decimal digits in currency
  7043                                  ;		1 BYTE	Bit field.  Time format.
  7044                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  7045                                  ;		DWORD	Call address of case conversion routine
  7046                                  ;		2 BYTE	Data list separator null terminated.
  7047                                  ;	  Carry:
  7048                                  ;	     Register AX has the error code.
  7049                                  ;	IF DX = -1 on input (set current country)
  7050                                  ;	  AL = 0 is an error
  7051                                  ;	  0<AL<0FFH means set current country to country AL
  7052                                  ;	  AL = 0FF means set current country to country BX
  7053                                  ;	  No Carry:
  7054                                  ;	    Current country SET
  7055                                  ;	    Register AL will contain the low 8 bits of the country code.
  7056                                  ;	  Carry:
  7057                                  ;	     Register AX has the error code.
  7058                                  ;-----------------------------------------------------------------------------
  7059                                  
  7060                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  7061                                  
  7062                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  7063                                  	 
  7064 00001AC1 3CFF                    	CMP	AL,0FFH
  7065 00001AC3 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  7066 00001AC5 88C3                    	MOV	BL,AL			; Put AL country code in BX
  7067 00001AC7 30FF                    	XOR	BH,BH
  7068                                  BX_HAS_CODE:
  7069 00001AC9 1E                      	PUSH	DS
  7070 00001ACA 07                      	POP	ES
  7071 00001ACB 52                      	PUSH	DX
  7072 00001ACC 5F                      	POP	DI			; User buffer to ES:DI
  7073                                  
  7074                                  ;hkn; SS is DOSDATA
  7075                                  ;	context DS
  7076                                  
  7077 00001ACD 16                      	push	ss
  7078 00001ACE 1F                      	pop	ds
  7079                                  
  7080 00001ACF 83FFFF                  	CMP	DI,-1
  7081 00001AD2 745F                    	JZ	short international_set
  7082 00001AD4 09DB                    	OR	BX,BX
  7083 00001AD6 7505                    	JNZ	short international_find
  7084                                  
  7085                                  ;hkn; country_cdpg is in DOSDATA segment.
  7086 00001AD8 BE[3B10]                	MOV	SI,COUNTRY_CDPG
  7087                                  
  7088 00001ADB EB40                    	JMP	SHORT international_copy
  7089                                  
  7090                                  international_find:
  7091 00001ADD BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  7092 00001AE0 E80B00                  	CALL	international_get
  7093 00001AE3 7256                    	JC	short errtn
  7094 00001AE5 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  7095 00001AE8 7533                    	JNZ	SHORT international_copy ; no, copy by myself
  7096 00001AEA 89D3                    	MOV	BX,DX			 ; put country back
  7097 00001AEC EB3A                    	JMP	SHORT international_ok3
  7098                                  
  7099                                  international_get:
  7100                                  
  7101                                  ;hkn; country_cdpg is in DOSDATA segment.
  7102                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7103 00001AEE BE[3B10]                	MOV	SI,COUNTRY_CDPG
  7104                                  
  7105                                  	; MSDOS 6.0
  7106                                  	;CMP	BX,ss:[SI.ccDosCountry]	 ; = current country id;smr;SS Override
  7107                                  	;retz				 ; return if equal
  7108                                  
  7109                                  	; MSDOS 3.3
  7110                                  	;cmp	bx,[SI+63h]
  7111 00001AF1 3B5C63                  	CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7112 00001AF4 74CA                    	jz	short RET27
  7113                                  
  7114 00001AF6 89DA                    	MOV	DX,BX
  7115 00001AF8 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7116                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7117                                  
  7118 00001AFA B80014                  	mov	ax,1400h
  7119 00001AFD CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7120                                  			; Return: AL = 00h not installed, OK to install
  7121                                  			; 01h not installed, not OK
  7122                                  			; FFh installed
  7123                                  	
  7124 00001AFF 3CFF                    	CMP	AL,0FFH
  7125 00001B01 7516                    	JNZ	short interr		; not in memory
  7126                                  	;cmp	bp,0
  7127 00001B03 09ED                    	or	bp,bp			; GetCntry ?
  7128 00001B05 7507                    	JNZ	short stcdpg
  7129                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7130                                  
  7131 00001B07 B80414                  	mov     ax,1404h
  7132 00001B0A CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7133                                  			; BX = code page, DX = country code,
  7134                                  			; DS:SI -> internal code page structure
  7135                                  			; ES:DI -> user buffer
  7136                                  			; Return: AL = status
  7137                                  
  7138 00001B0C EB05                    	JMP	short chkok
  7139                                  	
  7140                                  	;nop
  7141                                  
  7142                                  stcdpg:
  7143                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7144                                  
  7145 00001B0E B80314                  	mov     ax,1403h
  7146 00001B11 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7147                                  			; DS:SI -> internal code page structure
  7148                                  			; BX = code page, DX = country code
  7149                                  			; Return: AL = status
  7150                                  chkok:
  7151 00001B13 08C0                    	or	al,al			; success ?
  7152                                  	;retz				; yes
  7153 00001B15 74A9                    	jz	short RET27
  7154                                  
  7155                                  setcarry:
  7156 00001B17 F9                      	STC				; set carry
  7157 00001B18 C3                      	retn
  7158                                  interr:
  7159 00001B19 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7160 00001B1B EBFA                    	JMP	short setcarry
  7161                                  
  7162                                  international_copy:
  7163                                  
  7164                                  ;hkn; country_cdpg is in DOSDATA segment.
  7165                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7166                                  	; MSDOS 6.0
  7167                                  	;MOV	BX,ss:[SI.ccDosCountry]	 ; = current country id;smr;SS Override
  7168                                  	;MOV	SI,OFFSET DOSDATA:COUNTRY_CDPG.ccDFormat
  7169                                  
  7170                                  	; MSDOS 3.3
  7171                                  	;mov	bx,[SI+63h]
  7172 00001B1D 8B5C63                  	mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7173 00001B20 BE[A210]                	mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7174                                  
  7175                                  	;mov	cx,24
  7176 00001B23 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7177                                  
  7178                                  	; MSDOS 6.0
  7179                                  ;hkn;	must set up DS to SS so that international info can be copied
  7180                                  	;push	ds
  7181                                  	;push	ss					; cs -> ss
  7182                                  	;pop	ds
  7183                                  
  7184 00001B26 F3A4                    	REP	MOVSB			;copy country info
  7185                                  
  7186                                  	; MSDOS 6.0
  7187                                  ;hkn;	restore ds
  7188                                  	;pop	ds
  7189                                  
  7190                                  international_ok3:
  7191 00001B28 E81EFB                  	call	Get_User_Stack
  7192                                  ;ASSUME	DS:NOTHING
  7193                                  	;MOV	[SI+2],BX
  7194 00001B2B 895C02                  	MOV	[SI+user_env.user_BX],BX
  7195                                  international_ok:
  7196 00001B2E 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7197 00001B30 E968FC                  	jmp	SYS_RET_OK
  7198                                  
  7199                                  international_set:
  7200                                  
  7201                                  ;hkn; ASSUME	DS:DOSGROUP
  7202                                  ;ASSUME	DS:DOSDATA
  7203                                  
  7204 00001B33 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7205 00001B36 E8B5FF                  	CALL	international_get
  7206 00001B39 73F3                    	JNC	short international_ok
  7207                                  errtn:
  7208 00001B3B 3CFF                    	CMP	AL,0FFH
  7209 00001B3D 7403                    	JZ	short errtn2
  7210                                  errtn1:
  7211 00001B3F E962FC                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7212                                  errtn2:
  7213                                  	;error	error_invalid_function	; NLSFUNC not existent
  7214                                  
  7215                                  	;mov	al,1
  7216 00001B42 B001                    	mov	al,error_invalid_function 
  7217                                  	;jmp	short errtn1
  7218                                  errtn3:
  7219 00001B44 E95DFC                  	jmp	SYS_RET_ERR
  7220                                  
  7221                                  ;EndProc $INTERNATIONAL
  7222                                  
  7223                                  ; 19/07/2018
  7224                                  
  7225                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7226                                  
  7227                                  ;---------------------------------------------------------------------------
  7228                                  ;
  7229                                  ; Procedure Name : $GetExtCntry
  7230                                  ;
  7231                                  ; Inputs:
  7232                                  ;	if AL >= 20H
  7233                                  ;	  AL= 20H    capitalize single char, DL= char
  7234                                  ;	      21H    capitalize string, CX= string length
  7235                                  ;	      22H    capitalize ASCIIZ string
  7236                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7237                                  ;	      80H bit 0 = use normal upper case table
  7238                                  ;		      1 = use file upper case table
  7239                                  ;	   DS:DX points to string
  7240                                  ;
  7241                                  ;	else
  7242                                  ;
  7243                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7244                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7245                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7246                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7247                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7248                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7249                                  ;	INT	21
  7250                                  ; Function:
  7251                                  ;	give users extended country dependent information
  7252                                  ;	or capitalize chars
  7253                                  ; Outputs:
  7254                                  ;	  No Carry:
  7255                                  ;	     extended country info is succesfully returned
  7256                                  ;	  Carry:
  7257                                  ;	     Register AX has the error code.
  7258                                  ;	     AX=0, NO	 for YES/NO CHECK
  7259                                  ;		1, YES
  7260                                  ;-------------------------------------------------------------------------------
  7261                                  
  7262                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7263                                  
  7264                                  	; MSDOS 6.0
  7265                                  _$GetExtCntry:
  7266 00001B47 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7267 00001B49 7264                    	JB	short notcap
  7268                                  capcap: 				;
  7269 00001B4B A880                    	TEST	AL,UPPER_TABLE  ; 80h	; which upper case table
  7270 00001B4D 7505                    	JNZ	short fileupper		; file upper case
  7271                                  
  7272                                  ;hkn; UCASE_TAB in DOSDATA
  7273 00001B4F BB[C610]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7274 00001B52 EB05                    	JMP	SHORT capit
  7275                                  
  7276                                  fileupper:
  7277                                  	; 16/01/2024 (MSDOS 3.3-6.22 MSDOS.SYS has a bug here)
  7278                                  	; (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7279                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7280                                  	; AL >= 80h
  7281 00001B54 247F                    	and	al,7Fh
  7282                                  
  7283                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7284 00001B56 BB[4811]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7285                                  capit:					;
  7286 00001B59 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7287 00001B5B 750D                    	JNZ	short chkyes		; no
  7288 00001B5D 88D0                    	MOV	AL,DL			; set up AL
  7289 00001B5F E8AC3D                  	call	GETLET3 		; upper case it
  7290 00001B62 E8E4FA                  	call	Get_User_Stack		; get user stack
  7291 00001B65 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7292 00001B68 EB1C                    	JMP	SHORT nono		; done
  7293                                  chkyes: 				;
  7294 00001B6A 3C23                    	CMP	AL,CHECK_YES_NO		; check YES or NO ?
  7295 00001B6C 751B                    	JNZ	short capstring		; no
  7296 00001B6E 31C0                    	XOR	AX,AX			; presume NO
  7297                                  		      
  7298                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7299                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7300                                  
  7301                                  	; 06/08/2018 - Retro DOS v3.0
  7302                                  	;CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7303 00001B70 80FA59                  	cmp	DL,'Y'
  7304 00001B73 7410                    	JZ	short yesyes		; yes
  7305                                  	;CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7306 00001B75 80FA79                  	cmp	dl,'y'
  7307 00001B78 740B                    	JZ	short yesyes		; yes
  7308 00001B7A 80FA4E                  	cmp	dl,'N'
  7309                                  	;CMP	DL,[cs:NLS_NO]		; is  'N'?
  7310 00001B7D 7407                    	JZ	short nono		; no
  7311 00001B7F 80FA6E                  	CMP	DL,'n'
  7312                                  	;CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7313 00001B82 7402                    	JZ	short nono		; no
  7314                                  ;dbcs_char:				;
  7315 00001B84 40                      	INC	AX			; not YES or NO
  7316                                  yesyes: 				;
  7317 00001B85 40                      	INC	AX			; return 1
  7318                                  nono:					;
  7319 00001B86 E912FC                  	jmp	SYS_RET_OK		; done
  7320                                  capstring:				;
  7321 00001B89 89D6                    	MOV	SI,DX			; si=dx
  7322 00001B8B 3C21                    	CMP	AL,CAP_STRING		; cap string ?
  7323 00001B8D 750F                    	JNZ	short capascii		; no
  7324 00001B8F 09C9                    	OR	CX,CX			; check count 0
  7325 00001B91 74F3                    	JZ	short nono		; yes finished
  7326                                  concap: 				;
  7327 00001B93 AC                      	LODSB				; get char
  7328 00001B94 E8773D                  	call	GETLET3 		; upper case it
  7329 00001B97 8844FF                  	MOV	byte [SI-1],AL		; store back
  7330                                  next99: 				;
  7331 00001B9A E2F7                    	LOOP	concap			; continue
  7332 00001B9C EBE8                    	JMP	short nono		; done
  7333                                  capascii:				;
  7334 00001B9E 3C22                    	CMP	AL,CAP_ASCIIZ		; cap ASCIIZ string ?
  7335 00001BA0 7545                    	JNZ	short capinval		; no
  7336                                  concap2:				;
  7337 00001BA2 AC                      	LODSB				; get char
  7338 00001BA3 08C0                    	or	al,al			; end of string ?
  7339 00001BA5 74DF                    	JZ	short nono		; yes
  7340 00001BA7 E8643D                  	call	GETLET3 		; upper case it
  7341 00001BAA 8844FF                  	MOV	[SI-1],AL		; store back
  7342 00001BAD EBF3                    	JMP	short concap2 		; continue
  7343                                  
  7344                                  	; MSDOS 3.3 ($ MSDOS 6.0)
  7345                                  
  7346                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7347                                  ; _$GetExtCntry:
  7348                                  
  7349                                  notcap:
  7350 00001BAF 83F905                  	CMP	CX,5			; minimum size is 5
  7351 00001BB2 7279                    	jb	short sizeerror
  7352                                  
  7353                                  GEC_CONT:
  7354                                  ;hkn; SS is DOSDATA
  7355                                  	;context DS
  7356                                  
  7357 00001BB4 16                      	push	ss
  7358                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7359 00001BB5 1F                      	pop	ds  ; 17/05/2019 - BugFix
  7360                                  	
  7361                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7362 00001BB6 BE[3B10]                	MOV	SI,COUNTRY_CDPG
  7363                                  
  7364 00001BB9 83FAFF                  	CMP	DX,-1			; active country ?
  7365 00001BBC 7503                    	JNZ	short GETCDPG 		; no
  7366                                  
  7367                                  ;hkn; use DS override to accesss country_cdpg fields
  7368                                  	;mov	dx,[si+63h]
  7369 00001BBE 8B5463                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7370                                  					; get active country id;smr;use DS
  7371                                  GETCDPG:
  7372 00001BC1 83FBFF                  	CMP	BX,-1			; active code page?
  7373 00001BC4 7503                    	JNZ	short CHKAGAIN		; no, check again
  7374                                  
  7375                                  ;hkn; use DS override to accesss country_cdpg fields
  7376                                  	;mov	bx,[si+65h]
  7377 00001BC6 8B5C65                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7378                                  					; get active code page id;smr;Use DS
  7379                                  CHKAGAIN:
  7380                                  	;cmp	dx,[si+63h]
  7381 00001BC9 3B5463                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7382                                  					; same as active country id?;smr;use DS
  7383 00001BCC 7552                    	JNZ	short CHKNLS		; no
  7384                                  	;cmp	bx,[si+65h]
  7385 00001BCE 3B5C65                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7386                                  					; same as active code pg id?;smr;use DS
  7387 00001BD1 754D                    	JNZ	short CHKNLS		; no
  7388                                  CHKTYPE:
  7389                                  	;mov	bx,[si+48h]
  7390 00001BD3 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7391                                  					; bx = sys code page id;smr;use DS
  7392                                  ;	CMP	AL,SetALL		; select all?
  7393                                  ;	JNZ	short SELONE
  7394                                  ;	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccNumber_of_entries
  7395                                  ;SELONE:
  7396 00001BD6 51                      	PUSH	CX			; save cx
  7397                                  	;mov	cx,[si+4Ah]
  7398 00001BD7 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]	;smr;use DS
  7399 00001BDA BE[8710]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7400                                  NXTENTRY:
  7401 00001BDD 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7402 00001BDF 740B                    	JZ	short FOUNDIT
  7403 00001BE1 83C605                  	ADD	SI,5			; next entry
  7404 00001BE4 E2F7                    	LOOP	NXTENTRY
  7405 00001BE6 59                      	POP	CX
  7406                                  capinval:
  7407                                  	;error	error_invalid_function	; info type not found
  7408                                  	;mov	al,1
  7409 00001BE7 B001                    	mov	al,error_invalid_function
  7410 00001BE9 E9B8FB                  	jmp	SYS_RET_ERR
  7411                                  
  7412                                  FOUNDIT:
  7413 00001BEC A4                      	MOVSB				; move info id byte
  7414 00001BED 59                      	POP	CX			; retsore char count
  7415                                  	;cmp	al,1
  7416 00001BEE 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7417 00001BF0 7415                    	JZ	short setsize
  7418 00001BF2 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7419 00001BF5 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7420                                  OK_RETN:
  7421 00001BF8 F3A4                    	REP	MOVSB			; copy info
  7422 00001BFA 89C1                    	MOV	CX,AX			; CX = actual length returned
  7423 00001BFC 89D8                    	MOV	AX,BX			; return sys code page in ax
  7424                                  GETDONE:
  7425 00001BFE E848FA                  	call	Get_User_Stack		; return actual length to user's CX
  7426                                  	;mov	[si+4],cx 
  7427 00001C01 894C04                  	MOV	[SI+user_env.user_CX],CX
  7428                                  	; 26/07/2019
  7429                                  	;jmp	SYS_RET_OK
  7430 00001C04 E997FB                  	jmp	SYS_RET_OK_clc
  7431                                  setsize:
  7432 00001C07 83E903                  	SUB	CX,3			; size after length field
  7433 00001C0A 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7434 00001C0C 7302                    	JAE	short setsize2		; no
  7435 00001C0E 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7436                                  setsize2:
  7437 00001C10 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7438 00001C13 83C702                  	ADD	DI,2			; update index
  7439 00001C16 83C602                  	ADD	SI,2
  7440 00001C19 89C8                    	MOV	AX,CX
  7441 00001C1B 83C003                  	ADD	AX,3			; AX has the actual length
  7442 00001C1E EBD8                    	JMP	short OK_RETN 		; go move it
  7443                                  CHKNLS:
  7444 00001C20 30E4                    	XOR	AH,AH
  7445 00001C22 50                      	PUSH	AX			; save info type
  7446 00001C23 5D                      	POP	BP			; bp = info type
  7447                                  	
  7448                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7449                                  
  7450 00001C24 B80014                  	mov     ax, 1400h
  7451 00001C27 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7452                                  			; Return: AL = 00h not installed, OK to install
  7453                                  			; 01h not installed, not OK
  7454                                  			; FFh installed
  7455                                  	
  7456 00001C29 3CFF                    	CMP	AL,0FFH
  7457 00001C2B 7405                    	JZ	short NLSNXT		; in memory
  7458                                  
  7459                                  sizeerror:
  7460                                  	;error	error_invalid_function
  7461                                  	;mov	al,1
  7462 00001C2D B001                    	mov	al,error_invalid_function
  7463 00001C2F E972FB                  	jmp	SYS_RET_ERR
  7464                                  
  7465                                  NLSNXT: 
  7466                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7467                                  
  7468 00001C32 B80214                  	mov     ax, 1402h
  7469 00001C35 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7470                                  			; BP = subfunction, BX = code page
  7471                                  			; DX = country code, DS:SI -> internal code page structure
  7472                                  			; ES:DI -> user buffer, CX = size of user buffer
  7473                                  			; Return: AL = status
  7474                                  			; 00h successful
  7475                                  			; else DOS error code
  7476                                  
  7477 00001C37 3C00                    	CMP	AL,0			; success ?
  7478 00001C39 7508                    	JNZ	short NLSERROR
  7479 00001C3B 8B4448                  	mov     ax,[si+48h]
  7480 00001C3E 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7481                                  			; ax = sys code page id;smr;use ds;
  7482                                  			;BUGBUG;check whether DS is OK after the above calls
  7483 00001C41 EBBB                    	JMP	short GETDONE
  7484                                  NLSERROR:
  7485 00001C43 E95EFB                  	jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7486                                  
  7487                                  ;EndProc $GetExtCntry
  7488                                  
  7489                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7490                                  
  7491                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7492                                  ;
  7493                                  ;   System call format:
  7494                                  ;
  7495                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7496                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7497                                  ;	MOV	BX,CODE_PAGE	( set code page only)
  7498                                  ;	INT	21
  7499                                  ;
  7500                                  ;	ENTRY	(al) = n
  7501                                  ;		(bx) = code page
  7502                                  ;	EXIT	'C' clear
  7503                                  ;		  global code page is set	(set global code page)
  7504                                  ;		  (BX) = active code page id	(get global code page)
  7505                                  ;		  (DX) = system code page id	(get global code page)
  7506                                  ;		'C' set
  7507                                  ;		  (AX) = error code
  7508                                  
  7509                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7510                                  
  7511                                  _$GetSetCdPg:
  7512                                  
  7513                                  ;hkn; SS is DOSDATA
  7514                                  	;context DS
  7515                                  
  7516 00001C46 16                      	push	ss
  7517 00001C47 1F                      	pop	ds
  7518                                  
  7519                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7520 00001C48 BE[3B10]                	MOV	SI,COUNTRY_CDPG
  7521                                  
  7522 00001C4B 3C01                    	CMP	AL,1		       ; get global code page
  7523 00001C4D 7512                    	JNZ	short setglpg 	       ; set global cod epage
  7524                                  	;mov	bx,[si+65h]
  7525 00001C4F 8B5C65                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7526                                  					; get active code page id;smr;use ds
  7527                                  	;mov	dx,[si+48h]
  7528 00001C52 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7529                                  				  	; get sys code page id;smr;use ds
  7530 00001C55 E8F1F9                  	call	Get_User_Stack
  7531                                  ;ASSUME DS:NOTHING
  7532                                  	;mov	[si+2],bx
  7533 00001C58 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7534                                  	;mov	[si+6],dx
  7535 00001C5B 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7536                                  OK_RETURN:
  7537                                  	;transfer SYS_RET_OK
  7538 00001C5E E93AFB                  	jmp	SYS_RET_OK
  7539                                  
  7540                                  ;hkn; ASSUME DS:DOSGROUP
  7541                                  ;ASSUME	DS:DOSDATA
  7542                                  
  7543                                  setglpg:
  7544 00001C61 3C02                    	CMP	AL,2
  7545 00001C63 7534                    	JNZ	short nomem
  7546                                  ;;;;;;; CMP	BX,[SI+DOS_CCDPG.ccDosCodePage] ; same as active code page
  7547                                  ;;;;;;; JZ	short OK_RETURN		; yes
  7548                                  	;mov	dx,[si+63h]
  7549 00001C65 8B5463                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7550                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7551 00001C68 B80014                  	mov     ax, 1400h
  7552 00001C6B CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7553                                  			; Return: AL = 00h not installed, OK to install
  7554                                  			; 01h not installed, not OK
  7555                                  			; FFh installed
  7556 00001C6D 3CFF                    	CMP	AL,0FFH
  7557 00001C6F 7528                    	JNZ	short nomem		; not in memory
  7558                                  	;CallInstall SetCodePage,NLSFUNC,1  ;set the code page
  7559 00001C71 B80114                  	mov     ax, 1401h
  7560 00001C74 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7561                                  			; DS:SI -> internal code page structure
  7562                                  			; BX = new code page, DX = country code???
  7563                                  			; Return: AL = status
  7564                                  			; 00h successful
  7565                                  			; else DOS error code
  7566                                  	;cmp	al,0
  7567 00001C76 08C0                    	or	al,al			   ; success ?
  7568 00001C78 74E4                    	JZ	short OK_RETURN		   ; yes
  7569 00001C7A 3C41                    	CMP	AL,65			   ; set device code page failed
  7570 00001C7C 7518                    	JNZ	short seterr
  7571 00001C7E B84100                  	MOV	AX,65
  7572 00001C81 A3[F002]                	MOV	[EXTERR],AX
  7573                                  	;mov	byte [EXTERR_ACTION],6
  7574                                  	;mov	byte [EXTERR_CLASS],5
  7575                                  	;mov	byte [EXTERR_LOCUS],4
  7576 00001C84 C606[F202]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7577 00001C89 C606[F302]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7578 00001C8E C606[EF02]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7579                                  	;transfer From_GetSet
  7580 00001C93 E916FB                  	jmp	From_GetSet
  7581                                  
  7582                                  seterr:
  7583                                  	;transfer SYS_RET_ERR
  7584 00001C96 E90BFB                  	jmp	SYS_RET_ERR
  7585                                  
  7586                                  nomem:
  7587                                  	;error	error_invalid_function ; function not defined
  7588                                  	;mov	al,1
  7589 00001C99 B001                    	mov	al,error_invalid_function
  7590 00001C9B EBF9                    	jmp	short seterr
  7591                                  
  7592                                  ;EndProc $GetSetCdPg
  7593                                  
  7594                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7595                                  
  7596                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7597                                  ;
  7598                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7599                                  ;		drive.
  7600                                  ;
  7601                                  ;	This call returns the same info in the same registers (except for the
  7602                                  ;	FAT pointer) as the old FAT pointer calls
  7603                                  ;
  7604                                  ;	ENTRY	DL = Drive number
  7605                                  ;	EXIT	AX = Sectors per allocation unit
  7606                                  ;		   = -1 if bad drive specified
  7607                                  ;		On User Stack
  7608                                  ;		    BX = Number of free allocation units
  7609                                  ;		    DX = Total Number of allocation units on disk
  7610                                  ;		    CX = Sector size
  7611                                  
  7612                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7613                                  
  7614                                  _$GET_DRIVE_FREESPACE:
  7615                                  
  7616                                  ;hkn; SS is DOSDATA
  7617                                  	;context DS
  7618 00001C9D 16                      	push	ss
  7619 00001C9E 1F                      	pop	ds
  7620                                  
  7621 00001C9F 88D0                    	MOV	AL,DL
  7622                                  	;invoke	GetThisDrv		; Get drive
  7623 00001CA1 E81150                  	call	GETTHISDRV
  7624                                  SET_AX_RET:
  7625 00001CA4 7218                    	JC	short BADFDRV
  7626                                  	;invoke	DISK_INFO
  7627 00001CA6 E87B1C                  	call	DISK_INFO
  7628 00001CA9 87D3                    	XCHG	DX,BX
  7629 00001CAB 72F7                    	JC	short SET_AX_RET	; User FAILed to I 24
  7630 00001CAD 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7631                                  DoSt:
  7632 00001CAF E897F9                  	call	Get_User_Stack
  7633                                  ;ASSUME	DS:NOTHING
  7634                                  	;mov	[si+6],dx
  7635                                  	;mov	[si+4],cx
  7636                                  	;mov	[si+2],bx
  7637 00001CB2 895406                  	MOV	[SI+user_env.user_DX],DX
  7638 00001CB5 894C04                  	MOV	[SI+user_env.user_CX],CX
  7639 00001CB8 895C02                  	MOV	[SI+user_env.user_BX],BX
  7640                                  	;MOV	[SI+user_env.user_AX],AX
  7641 00001CBB 8904                    	mov     [si],ax
  7642                                  	;return
  7643 00001CBD C3                      	retn
  7644                                  
  7645                                  BADFDRV:
  7646                                  	; MSDOS 3.3
  7647                                  	;mov	al,0Fh
  7648 00001CBE B00F                    	mov	al,error_invalid_drive	; Assume error
  7649                                  
  7650                                  	;invoke	FCB_RET_ERR
  7651 00001CC0 E8F7FA                  	call	FCB_RET_ERR
  7652 00001CC3 B8FFFF                  	MOV	AX,-1
  7653 00001CC6 EBE7                    	JMP	short DoSt
  7654                                  
  7655                                  ;EndProc $GET_DRIVE_FREESPACE
  7656                                  
  7657                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7658                                  
  7659                                  ;**	$Get_DMA - Get Disk Transfer Address
  7660                                  ;
  7661                                  ;	ENTRY	none
  7662                                  ;	EXIT	ES:BX is current transfer address
  7663                                  ;	USES	all
  7664                                  
  7665                                  _$GET_DMA:
  7666 00001CC8 368B1E[F802]            	MOV	BX,[SS:DMAADD]
  7667 00001CCD 368B0E[FA02]            	MOV	CX,[SS:DMAADD+2]
  7668 00001CD2 E874F9                  	call	Get_User_Stack
  7669                                  	;mov	[si+2],bx
  7670                                  	;mov	[si+10h],cx
  7671 00001CD5 895C02                  	MOV	[SI+user_env.user_BX],BX
  7672 00001CD8 894C10                  	MOV	[SI+user_env.user_ES],CX
  7673 00001CDB C3                      	retn
  7674                                  
  7675                                  ;**	$Set_DMA - Set Disk Transfer Address
  7676                                  ;
  7677                                  ;	ENTRY	DS:DX is current transfer address
  7678                                  ;	EXIT	none
  7679                                  ;	USES	all
  7680                                  
  7681                                  _$SET_DMA:
  7682 00001CDC 368916[F802]            	MOV	[SS:DMAADD],DX
  7683 00001CE1 368C1E[FA02]            	MOV	[SS:DMAADD+2],DS
  7684 00001CE6 C3                      	retn
  7685                                  
  7686                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7687                                  
  7688                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7689                                  ;
  7690                                  ;	ENTRY	none
  7691                                  ;	EXIT	(AL) = drive number
  7692                                  ;	USES	all
  7693                                  
  7694                                  _$GET_DEFAULT_DRIVE:
  7695 00001CE7 36A0[0203]              	MOV	AL,[SS:CURDRV]
  7696 00001CEB C3                      	retn
  7697                                  
  7698                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7699                                  ;
  7700                                  ;	ENTRY	(DL) = Drive number for new default drive
  7701                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7702                                  
  7703                                  _$SET_DEFAULT_DRIVE:
  7704 00001CEC 88D0                    	MOV	AL,DL
  7705 00001CEE FEC0                    	INC	AL			; A=1, B=2...
  7706 00001CF0 E8AB4F                  	call	GetVisDrv		; see if visible drive
  7707 00001CF3 7204                    	JC	short SETRET		; errors do not set
  7708 00001CF5 36A2[0203]              	MOV	[SS:CURDRV],AL		; no, set
  7709                                  
  7710                                  SETRET:
  7711 00001CF9 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7712 00001CFD C3                      	retn
  7713                                  
  7714                                  
  7715                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7716                                  
  7717                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7718                                  ;
  7719                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7720                                  ;	contents of an interrupt vector.
  7721                                  ;
  7722                                  ;	ENTRY	(AL) = interrupt number
  7723                                  ;	EXIT	(ES:BX) = current interrupt vector
  7724                                  
  7725                                  _$GET_INTERRUPT_VECTOR:
  7726 00001CFE E81A00                  	CALL	RECSET
  7727 00001D01 26C41F                  	LES	BX,[ES:BX]
  7728 00001D04 E842F9                  	call	Get_User_Stack
  7729                                  	;mov	[si+2],bx
  7730                                  	;mov	[si+10h],es
  7731 00001D07 895C02                  	MOV	[SI+user_env.user_BX],BX
  7732 00001D0A 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7733 00001D0D C3                      	retn
  7734                                  
  7735                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7736                                  ;
  7737                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7738                                  ;	contents of an interrupt vector.
  7739                                  ;
  7740                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7741                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7742                                  ;	for explanation.
  7743                                  ;
  7744                                  ;	ENTRY	(AL) = interrupt number
  7745                                  ;		(ds:dx) = desired new vector value
  7746                                  ;	EXIT	none
  7747                                  ;	USES	all
  7748                                  
  7749                                  _$SET_INTERRUPT_VECTOR:
  7750 00001D0E E80A00                  	CALL	RECSET
  7751 00001D11 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7752 00001D12 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7753 00001D15 268C5F02                	MOV	[ES:BX+2],DS
  7754 00001D19 FB                      	STI
  7755                                  					; M004, M068 - Start
  7756                                  	; MSDOS 6.0
  7757                                  	;test	byte [DOS_FLAG],EXECA20OFF
  7758                                  					; Q: was the previous call an int 21
  7759                                  					;    exec call
  7760                                  	;jnz	short siv_1		; Y: go set count
  7761 00001D1A C3                      	retn				; N: return
  7762                                  
  7763                                  ;siv_1:	
  7764                                  	;cmp	byte [A20OFF_COUNT],0	; Q: is count 0
  7765                                  	;jne	short siv_2		; N: done 
  7766                                  	;mov	byte [A20OFF_COUNT],1	; Y: set it to 1 to indicate to dos 
  7767                                  					; dispatcher to turn A20 Off before 
  7768                                  					; returning to user.
  7769                                  ;siv_2:
  7770                                  	;retn				; M004, M068 - End
  7771                                  	
  7772                                  RECSET:
  7773 00001D1B 31DB                    	XOR	BX,BX
  7774 00001D1D 8EC3                    	MOV	ES,BX
  7775 00001D1F 88C3                    	MOV	BL,AL
  7776 00001D21 D1E3                    	SHL	BX,1
  7777 00001D23 D1E3                    	SHL	BX,1
  7778 00001D25 C3                      	retn
  7779                                  
  7780                                  
  7781                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7782                                  
  7783                                  ;**	$Char_Oper - Manipulate Switch Character
  7784                                  ;
  7785                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7786                                  ;
  7787                                  ;	ENTRY	AL = function:
  7788                                  ;		    0 - read switch char
  7789                                  ;		    1 - set switch char (char in DL)
  7790                                  ;		    2 - read device availability
  7791                                  ;			Always returns available
  7792                                  ;		    3 - set device availability
  7793                                  ;			No longer supported (NOP)
  7794                                  ;	EXIT	(al) = 0xff iff error
  7795                                  ;		(al) != 0xff if ok
  7796                                  ;		  (dl) = character/flag, iff "read switch char" subfunction
  7797                                  ;	USES	AL, DL
  7798                                  ;
  7799                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7800                                  ;		The character / is always returned for subfunction 0,
  7801                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7802                                  
  7803                                  _$CHAR_OPER:
  7804                                  	; MSDOS 6.0
  7805                                  	;or	al,al				; get switch?
  7806                                  	;mov	dl,'/'				; assume yes
  7807                                  	;jz	short chop_1			; jump if yes
  7808                                  	;cmp	al,2				; check device availability?
  7809                                  	;mov	dl,-1				; assume yes
  7810                                  	;jz	short chop_1				; jump if yes
  7811                                  	;retn					; otherwise just quit
  7812                                  
  7813                                  ; subfunctions requiring return of value to user come here. DL holds
  7814                                  ; value to return
  7815                                  
  7816                                  ;chop_1:
  7817                                  	;call	Get_User_Stack
  7818                                  	;mov	[SI+user_env.user_DX],dx	; store value for user
  7819                                  	;retn
  7820                                  
  7821                                  	; MSDOS 3.3
  7822                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7823 00001D26 16                      	push    ss
  7824 00001D27 1F                      	pop     ds
  7825 00001D28 3C01                    	cmp     al, 1
  7826 00001D2A 720B                    	jb      short chop_1
  7827 00001D2C 740F                    	jz      short chop_2
  7828 00001D2E 3C03                    	cmp     al, 3
  7829 00001D30 7210                    	jb      short chop_3
  7830 00001D32 7416                    	jz      short chop_5
  7831 00001D34 B0FF                    	mov     al, 0FFh
  7832 00001D36 C3                      	retn
  7833                                  chop_1:
  7834 00001D37 8A16[CD02]              	mov     dl,[chSwitch]
  7835 00001D3B EB07                    	jmp     short chop_4
  7836                                  chop_2:
  7837 00001D3D 8816[CD02]              	mov     [chSwitch], dl
  7838 00001D41 C3                      	retn
  7839                                  chop_3:
  7840 00001D42 B2FF                    	mov     dl, 0FFh
  7841                                  chop_4:
  7842 00001D44 E802F9                  	call    Get_User_Stack
  7843 00001D47 895406                  	mov     [si+6],dx
  7844                                  chop_5:
  7845 00001D4A C3                      	retn
  7846                                  
  7847                                  ;**	$GetExtendedError - Return Extended error code
  7848                                  ;
  7849                                  ;	This function reads up the extended error info from the static
  7850                                  ;	variables where it was stored.
  7851                                  ;
  7852                                  ;	ENTRY	none
  7853                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7854                                  ;		BL = recommended action
  7855                                  ;		BH = class of error
  7856                                  ;		CH = locus of error
  7857                                  ;		ES:DI = may be pointer
  7858                                  ;	USES	ALL
  7859                                  
  7860                                  _$GetExtendedError:
  7861 00001D4B 16                      	push	ss
  7862 00001D4C 1F                      	pop	ds
  7863 00001D4D A1[F002]                	MOV	AX,[EXTERR]
  7864 00001D50 C43E[F402]              	LES	DI,[EXTERRPT]
  7865 00001D54 8B1E[F202]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7866 00001D58 8A2E[EF02]              	MOV	CH,[EXTERR_LOCUS]
  7867 00001D5C E8EAF8                  	call	Get_User_Stack
  7868                                  	;mov	[si+0Ah],di
  7869 00001D5F 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7870                                  	;mov	[si+10h],es
  7871 00001D62 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7872                                  	;mov	[si+2],bx
  7873 00001D65 895C02                  	MOV	[SI+user_env.user_BX],BX
  7874                                  	;mov	[si+4],cx
  7875 00001D68 894C04                  	MOV	[SI+user_env.user_CX],CX
  7876                                  	;jmp	SYS_RET_OK
  7877                                  	; 26/07/2019
  7878 00001D6B E930FA                  	jmp	SYS_RET_OK_clc
  7879                                  
  7880                                  ;============================================================================
  7881                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7882                                  ;============================================================================
  7883                                  ; 19/07/2018 - Retro DOS v3.0
  7884                                  
  7885                                  ; System calls for parsing command lines
  7886                                  ;
  7887                                  ;   $PARSE_FILE_DESCRIPTOR
  7888                                  ;
  7889                                  ;   Modification history:
  7890                                  ;
  7891                                  ;       Created: ARR 30 March 1983
  7892                                  ;               EE PathParse 10 Sept 1983
  7893                                  ;
  7894                                  
  7895                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7896                                  ;---------------------------------------------------------------------------
  7897                                  ; Inputs:
  7898                                  ;       DS:SI Points to a command line
  7899                                  ;       ES:DI Points to an empty FCB
  7900                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7901                                  ;                   = 0 Parse stops if separator encountered
  7902                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7903                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7904                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7905                                  ;                   = 0  "       "      "       - put blanks in FCB
  7906                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7907                                  ;                   = 0  "       "      "        - put blanks in FCB
  7908                                  ; Function:
  7909                                  ;       Parse command line into FCB
  7910                                  ; Returns:
  7911                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7912                                  ;       DS:SI points to first character after filename
  7913                                  ;---------------------------------------------------------------------------
  7914                                  
  7915                                  _$PARSE_FILE_DESCRIPTOR:
  7916 00001D6E E8973A                  	call	MAKEFCB
  7917 00001D71 56                      	PUSH    SI
  7918 00001D72 E8D4F8                  	call	Get_User_Stack
  7919                                  	;pop	word [si+8]
  7920 00001D75 8F4408                  	POP     word [SI+user_env.user_SI]
  7921 00001D78 C3                      	retn
  7922                                  
  7923                                  ;============================================================================
  7924                                  ; MISC.ASM, MSDOS 6.0, 1991
  7925                                  ;============================================================================
  7926                                  ; 19/07/2018 - Retro DOS v3.0
  7927                                  
  7928                                  ;ENTRYPOINTSEG	EQU	0CH
  7929                                  ;MAXDIF		EQU	0FFFH
  7930                                  ;SAVEXIT 	EQU	10
  7931                                  ;WRAPOFFSET	EQU	0FEF0h
  7932                                  
  7933                                  ;
  7934                                  ;----------------------------------------------------------------------------
  7935                                  ;
  7936                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7937                                  ;
  7938                                  ;	Return Stuff sort of like old get fat call
  7939                                  ;
  7940                                  ;	ENTRY	none
  7941                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7942                                  ;			GOD help anyone who tries to do ANYTHING except
  7943                                  ;			READ this ONE byte.
  7944                                  ;		DX = Total Number of allocation units on disk
  7945                                  ;		CX = Sector size
  7946                                  ;		AL = Sectors per allocation unit
  7947                                  ;		   = -1 if bad drive specified
  7948                                  ;	USES	all
  7949                                  ;
  7950                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7951                                  ;
  7952                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7953                                  ;
  7954                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7955                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7956                                  ;			GOD help anyone who tries to do ANYTHING except
  7957                                  ;			READ this ONE byte.
  7958                                  ;		DX = Total Number of allocation units on disk
  7959                                  ;		CX = Sector size
  7960                                  ;		AL = Sectors per allocation unit
  7961                                  ;		   = -1 if bad drive specified
  7962                                  ;	USES	all
  7963                                  ;
  7964                                  ;----------------------------------------------------------------------------
  7965                                  ;
  7966                                  
  7967                                  _$SLEAZEFUNC:
  7968 00001D79 B200                    	MOV	DL,0
  7969                                  
  7970                                  _$SLEAZEFUNCDL:
  7971 00001D7B 16                      	push	ss
  7972 00001D7C 1F                      	pop	ds
  7973                                  	
  7974 00001D7D 88D0                    	MOV	AL,DL
  7975 00001D7F E8334F                  	call	GETTHISDRV		; Get CDS structure
  7976                                  SET_AL_RET:
  7977                                  	; MSDOS 3.3
  7978                                  	;mov	al,0Fh
  7979 00001D82 B00F                    	MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7980                                  
  7981 00001D84 721E                    	JC	short BADSLDRIVE
  7982                                  
  7983 00001D86 E89B1B                  	call	DISK_INFO
  7984 00001D89 72F7                    	JC	short SET_AL_RET	; User FAILed to I 24
  7985 00001D8B 8826[5405]              	MOV	[FATBYTE],AH
  7986                                  
  7987                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7988                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7989                                  ; CALL AGAIN
  7990                                  
  7991 00001D8F BF[5405]                	MOV	DI,FATBYTE
  7992 00001D92 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7993 00001D94 E8B2F8                  	call	Get_User_Stack
  7994                                  	;mov	[si+4],cx
  7995                                  	;mov	[si+6],bx
  7996                                  	;mov	[si+2],di
  7997 00001D97 894C04                  	MOV	[SI+user_env.user_CX],CX
  7998 00001D9A 895C06                  	MOV	[SI+user_env.user_DX],BX
  7999 00001D9D 897C02                  	MOV	[SI+user_env.user_BX],DI
  8000                                  	
  8001                                  	;mov	[si+0Eh],cs
  8002                                  	;mov	[SI+user_env.user_DS],SS
  8003 00001DA0 8C4C0E                  	MOV     [SI+user_env.user_DS],CS ; stash correct pointer
  8004                                  
  8005 00001DA3 C3                      	retn
  8006                                  
  8007                                  BADSLDRIVE:
  8008 00001DA4 E913FA                  	jmp	FCB_RET_ERR
  8009                                  
  8010                                  ;
  8011                                  ;----------------------------------------------------------------------------
  8012                                  ;
  8013                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8014                                  ;
  8015                                  ;	Returns location of DOS status for interrupt routines
  8016                                  ;									   ;
  8017                                  ;	ENTRY	none
  8018                                  ;	EXIT	(es:bx) = flag location
  8019                                  ;	USES	all
  8020                                  ;
  8021                                  ;----------------------------------------------------------------------------
  8022                                  ;
  8023                                  
  8024                                  _$GET_INDOS_FLAG:
  8025 00001DA7 E89FF8                          CALL	Get_User_Stack
  8026                                          ;MOV	WORD [SI+2],INDOS
  8027 00001DAA C74402[ED02]            	MOV     word [SI+user_env.user_BX],INDOS
  8028                                          ;MOV	[SI+10H],SS
  8029 00001DAF 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8030 00001DB2 C3                      	RETN 
  8031                                  
  8032                                  ;
  8033                                  ;----------------------------------------------------------------------------
  8034                                  ;
  8035                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8036                                  ;
  8037                                  ;	Return a pointer to interesting DOS variables This call is version
  8038                                  ;	dependent and is subject to change without notice in future versions.
  8039                                  ;	Use at risk.
  8040                                  ;
  8041                                  ;	ENTRY	none
  8042                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8043                                  ;	uses	ALL
  8044                                  ;
  8045                                  ;----------------------------------------------------------------------------
  8046                                  ;
  8047                                  
  8048                                  _$GET_IN_VARS:
  8049 00001DB3 E893F8                          CALL	Get_User_Stack
  8050                                          ;MOV	WORD [SI+2],SYSINITVAR
  8051                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8052 00001DB6 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8053                                          ;MOV	[SI+10H],SS
  8054 00001DBB 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8055 00001DBE C3                      	RETN
  8056                                  
  8057                                  ;
  8058                                  ;----------------------------------------------------------------------------
  8059                                  ;
  8060                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8061                                  ;
  8062                                  ;	Return pointer to drive parameter table for default drive
  8063                                  ;
  8064                                  ;	ENTRY	none
  8065                                  ;	EXIT	(ds:bx) = DPB address
  8066                                  ;	USES	all
  8067                                  ;
  8068                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8069                                  ;
  8070                                  ;	Return pointer to a specified drive parameter table
  8071                                  ;
  8072                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8073                                  ;	EXIT	(al) = 0 iff ok
  8074                                  ;		  (ds:bx) = DPB address
  8075                                  ;		(al) = -1 if bad drive
  8076                                  ;	USES	all
  8077                                  ;
  8078                                  ;----------------------------------------------------------------------------
  8079                                  ;
  8080                                  
  8081                                  _$GET_DEFAULT_DPB:
  8082 00001DBF B200                    	MOV	DL,0
  8083                                  _$GET_DPB:
  8084 00001DC1 16                      	push	ss
  8085 00001DC2 1F                      	pop	ds
  8086                                  
  8087 00001DC3 88D0                    	MOV	AL,DL
  8088 00001DC5 E8ED4E                  	call	GETTHISDRV		; Get CDS structure
  8089 00001DC8 7223                    	JC	short ISNODRV 		; no valid drive
  8090 00001DCA C43E[5E05]              	LES	DI,[THISCDS]		; check for net CDS
  8091                                  	;test	word [es:di+43h],8000h
  8092 00001DCE 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
  8093 00001DD4 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8094 00001DD6 E83603                  	call	EcritDisk
  8095 00001DD9 E8F340                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8096 00001DDC E83803                  	call	LcritDisk
  8097 00001DDF 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8098                                  					;   have.
  8099 00001DE1 E865F8                  	call	Get_User_Stack
  8100                                  	;mov	[si+2],bp
  8101                                  	;mov	[si+0Eh],es
  8102 00001DE4 896C02                  	MOV	[SI+user_env.user_BX],BP
  8103 00001DE7 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8104 00001DEA 30C0                    	XOR	AL,AL
  8105 00001DEC C3                      	retn
  8106                                  ISNODRV:
  8107 00001DED B0FF                    	MOV	AL,-1
  8108 00001DEF C3                      	retn
  8109                                  
  8110                                  ;
  8111                                  ;----------------------------------------------------------------------------
  8112                                  ;
  8113                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8114                                  ;
  8115                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8116                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8117                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8118                                  ;
  8119                                  ;	ENTRY	none
  8120                                  ;	EXIT	none
  8121                                  ;	USES	all
  8122                                  ;
  8123                                  ;----------------------------------------------------------------------------
  8124                                  ;
  8125                                  
  8126                                  _$DISK_RESET:
  8127 00001DF0 16                      	push	ss
  8128 00001DF1 1F                      	pop	ds
  8129 00001DF2 B0FF                    	MOV	AL,-1
  8130 00001DF4 E81803                  	call	EcritDisk
  8131                                  	; MSDOS 6.0
  8132                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8133 00001DF7 E87244                  	call	FLUSHBUF
  8134                                  	; MSDOS 6.0
  8135                                  	;AND	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8136                                  	;mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8137                                  ;
  8138                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8139                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8140                                  ; let's do it.
  8141                                  ;
  8142                                  ; Invalidate 'last-buffer' used
  8143                                  ;
  8144 00001DFA BBFFFF                  	MOV	BX,-1
  8145 00001DFD 891E[2000]              	MOV	[LastBuffer+2],BX
  8146 00001E01 891E[1E00]              	MOV	[LastBuffer],BX
  8147                                  
  8148                                  	; MSDOS 3.3 
  8149                                  	; IBMDOS.COM, Offset 1C66h
  8150                                  	;;;;
  8151 00001E05 C536[3800]              	lds     si,[BUFFHEAD]
  8152 00001E09 B8FF20                  	mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8153                                  				; .buf_flags, AH = 0, reset/clear
  8154                                  DRST_1:
  8155                                  	; 25/07/2019 - Retro DOS v3.2
  8156                                  	;;mov	[si+4],ax
  8157                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8158                                  	;lds	si,[SI]
  8159                                  	;cmp	si,bx ; -1
  8160                                  	;je	short DRST_2
  8161                                  
  8162                                  	;mov	[si+4],ax
  8163 00001E0C 894404                  	mov	[si+BUFFINFO.buf_ID],ax
  8164 00001E0F C534                    	lds	si,[SI]
  8165 00001E11 39DE                    	cmp	si,bx
  8166 00001E13 75F7                    	jne	short DRST_1
  8167                                  	;;;;
  8168                                  DRST_2:
  8169 00001E15 E8FF02                  	call	LcritDisk
  8170                                  
  8171                                  	; 20/05/2019
  8172                                  	;MOV	AX,-1
  8173                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8174                                  	;mov	ax,0FFFFh
  8175                                  
  8176 00001E18 B82011                  	mov     ax,1120h
  8177 00001E1B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8178                                  			; DS = DOS CS
  8179                                  			; Return: CF clear (successful)
  8180 00001E1D C3                      	retn
  8181                                  
  8182                                  	; 19/07/2018 - Retro DOS v3.0
  8183                                  
  8184                                  ;
  8185                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8186                                  ;
  8187                                  ;----------------------------------------------------------------------------
  8188                                  ;
  8189                                  ;**	$SetDPB - Create a DPB
  8190                                  ;
  8191                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8192                                  ;
  8193                                  ;	ENTRY	ES:BP Points to DPB
  8194                                  ;		DS:SI Points to BPB
  8195                                  ;	EXIT	DPB setup
  8196                                  ;	USES	ALL but BP, DS, ES
  8197                                  ;
  8198                                  ;----------------------------------------------------------------------------
  8199                                  ;
  8200                                  
  8201                                  ; 10/05/2019 - Retro DOS v4.0
  8202                                  
  8203                                  ; MSDOS 6.0
  8204 00001E1E 0300                    word3:	dw	3			; M008 -- word value for divides
  8205                                  
  8206                                  ;procedure   $SETDPB,NEAR
  8207                                  
  8208                                  _$SETDPB:
  8209                                  	; 25/07/2019 - Retro DOS v3.2
  8210 00001E20 89EF                    	MOV	DI,BP
  8211 00001E22 83C702                  	ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8212 00001E25 AD                      	LODSW
  8213 00001E26 AB                      	STOSW				; dpb_sector_size
  8214                                  	; MSDOS 6.0
  8215 00001E27 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8216 00001E2B 7507                    	JNZ	short yesfat			     ; yes		;AN000;
  8217 00001E2D 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8218 00001E32 EB76                    	JMP	short setend			     ; NO		;AN000;
  8219                                  yesfat: ; 10/08/2018
  8220 00001E34 89C2                    	MOV	DX,AX
  8221 00001E36 AC                      	LODSB
  8222 00001E37 FEC8                    	DEC	AL
  8223 00001E39 AA                      	STOSB				; dpb_cluster_mask
  8224 00001E3A FEC0                    	INC	AL
  8225 00001E3C 30E4                    	XOR	AH,AH
  8226                                  LOG2LOOP:
  8227 00001E3E A801                    	test	AL,1
  8228 00001E40 7506                    	JNZ	short SAVLOG
  8229 00001E42 FEC4                    	INC	AH
  8230 00001E44 D0E8                    	SHR	AL,1
  8231 00001E46 EBF6                    	JMP	SHORT LOG2LOOP
  8232                                  SAVLOG:
  8233 00001E48 88E0                    	MOV	AL,AH
  8234 00001E4A AA                      	STOSB				; dpb_cluster_shift
  8235 00001E4B 88C3                    	MOV	BL,AL
  8236 00001E4D A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8237 00001E4E AC                      	LODSB
  8238 00001E4F AA                      	STOSB				; dpb_FAT_count Number of FATs
  8239                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8240                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8241 00001E50 88C7                    	MOV	BH,AL
  8242 00001E52 AD                      	LODSW
  8243 00001E53 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8244 00001E54 B105                    	MOV	CL,5
  8245 00001E56 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8246 00001E58 48                      	DEC	AX
  8247 00001E59 01D0                    	ADD	AX,DX			; Cause Round Up
  8248 00001E5B 89D1                    	MOV	CX,DX
  8249 00001E5D 31D2                    	XOR	DX,DX
  8250 00001E5F F7F1                    	DIV	CX
  8251 00001E61 89C1                    	MOV	CX,AX			; Number of directory sectors
  8252 00001E63 47                      	INC	DI
  8253 00001E64 47                      	INC	DI			; Skip dpb_first_sector
  8254 00001E65 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8255 00001E66 AC                      	LODSB
  8256                                  	;mov	[es:bp+16h],al
  8257                                  	;mov	[es:bp+17h],al ; MSDOS 6.0
  8258 00001E67 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8259 00001E6B AD                      	LODSW				; Number of sectors in a FAT
  8260                                  
  8261                                  	; 25/07/2019
  8262                                  	;;;
  8263                                  	; MSDOS 3.3
  8264                                  	;STOSB		; DPB.FAT_SIZE
  8265                                  	;MUL	BH
  8266                                  	; MSDOS 6.0
  8267 00001E6C AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8268 00001E6D 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8269 00001E6F 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8270 00001E71 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8271                                  	;;;
  8272                                  	;add	ax,[es:bp+6]
  8273 00001E73 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8274 00001E77 AB                      	STOSW				; dpb_dir_sector
  8275 00001E78 01C8                    	ADD	AX,CX			; Add number of directory sectors
  8276                                  	;mov	[es:bp+0Bh],ax
  8277 00001E7A 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8278                                  	
  8279                                  	; MSDOS 6.0
  8280 00001E7E 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8281                                  	;cmp	word [es:bp+0Dh],0
  8282                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8283                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8284                                  	; 28/07/2019
  8285 00001E80 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8286 00001E84 09DB                    	or	bx,bx
  8287 00001E86 751C                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8288                                  	
  8289 00001E88 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8290                                  	;mov	bx,[si+8]
  8291 00001E8A 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8292                                  	;mov	dx,[si+10]
  8293 00001E8D 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8294 00001E90 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8295 00001E92 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8296 00001E95 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8297 00001E97 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8298                                  rott:					;AN000;;F.C. >32mb
  8299 00001E99 F8                      	CLC				;AN000;;F.C. >32mb
  8300 00001E9A D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8301 00001E9C D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8302 00001E9E E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8303                                  norot:					;AN000;
  8304 00001EA0 89D8                    	MOV	AX,BX			;AN000;;F.C. >32mb
  8305 00001EA2 EB06                    	JMP	short setend		;AN000;;F.C. >32mb
  8306                                  normal_dpb:
  8307                                  	;sub	ax,[es:bp+0Dh]
  8308                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8309 00001EA4 29D8                    	sub	ax,bx ; 28/07/2019
  8310 00001EA6 F7D8                    	NEG	AX			; Sectors in data area
  8311                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8312 00001EA8 D3E8                    	SHR	AX,CL			; Div by sectors/cluster
  8313                                  setend:
  8314                                  
  8315                                  ;	M008 - CAS
  8316                                  ;
  8317 00001EAA 40                      	INC	AX			; +2 (reserved), -1 (count -> max)
  8318                                  ;
  8319                                  ;	There has been a bug in our fatsize calculation for so long
  8320                                  ;	  that we can't correct it now without causing some user to
  8321                                  ;	  experience data loss. There are even cases where allowing
  8322                                  ;	  the number of clusters to exceed the fats is the optimal
  8323                                  ;	  case -- where adding 2 more fat sectors would make the
  8324                                  ;	  data field smaller so that there's nothing to use the extra
  8325                                  ;	  fat sectors for.
  8326                                  ;
  8327                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8328                                  ;	  still report that there was a cluster left when the disk was
  8329                                  ;	  actually full. Very graceful failure for a corrupt system
  8330                                  ;	  configuration. There may be worse cases that were never
  8331                                  ;	  properly traced back to this bug. The problem cases only
  8332                                  ;	  occurred when partition sizes were very near FAT sector
  8333                                  ;	  rounding boundaries, which were rare cases.
  8334                                  ;
  8335                                  ;	Also, it's possible that some third-party partition program might
  8336                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8337                                  ;	  scheme. In this hypothetical case, the number of allocation
  8338                                  ;	  clusters which don't actually have FAT entries to represent
  8339                                  ;	  them might be larger and might create a more catastrophic
  8340                                  ;	  failure. So we'll provide the safeguard of limiting the
  8341                                  ;	  max_cluster to the amount that will fit in the FATs.
  8342                                  ;
  8343                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8344                                  
  8345                                  ;	make sure the number of fat sectors is actually enough to
  8346                                  ;	  hold that many clusters. otherwise, back the number of
  8347                                  ;	  clusters down
  8348                                  
  8349                                  	; 19/07/2018 - Retro DOS v3.0
  8350                                  	; 25/07/2019 - Retro DOS v3.2
  8351                                  	; MSDOS 6.0
  8352 00001EAB 89C3                    	mov	bx,ax			; remember calculated # clusters
  8353                                  
  8354                                  	; 01/08/2018 (MSDOS 3.3)
  8355                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8356                                  	;xor	ah,ah 
  8357                                  
  8358                                  	; 10/05/2019 - Retro DOS v4.0
  8359                                  	;mov	ax,[ES:BP+0Fh]
  8360 00001EAD 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8361                                  
  8362                                  	;mul	word [es:bp+2]	
  8363 00001EB1 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8364 00001EB5 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8365 00001EB9 720D                    	jb	short setend_fat12
  8366 00001EBB D1EA                    	shr	dx,1
  8367                                  ;cs3 7/2/92
  8368 00001EBD 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8369                                  ;					; than enough for the maximum FAT,
  8370                                  ;					; so go ahead and use the calculated
  8371                                  ;					; number of clusters.
  8372                                  ;cs3 7/2/92
  8373                                  
  8374 00001EBF D1D8                    	rcr	ax,1			; find number of entries
  8375 00001EC1 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8376                                  ;					;  into 12-bit fatland?
  8377 00001EC4 7215                    	jb	short setend_faterr	; then go ahead and let the
  8378                                  ;					;  inconsistency pass through
  8379                                  ;					;  rather than lose data by
  8380                                  ;					;  correcting the fat type
  8381 00001EC6 EB0E                    	jmp	short setend_fat16
  8382                                  
  8383                                  setend_fat12:
  8384 00001EC8 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8385 00001ECA 11D2                    	adc	dx,dx
  8386                                  ;cs3 7/2/92
  8387 00001ECC 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8388 00001ECF 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8389                                  ;					; here. Check for it and use
  8390                                  ;					; the calculated size in this case.
  8391                                  ;cs3 7/2/92
  8392 00001ED1 2EF736[1E1E]            	div	word [cs:word3]
  8393                                  
  8394                                  setend_fat16:
  8395 00001ED6 48                      	dec	ax			; limit at 1
  8396 00001ED7 39D8                    	cmp	ax,bx			; is fat big enough?
  8397 00001ED9 7602                    	jbe	short setend_fat	; use max value that'll fit
  8398                                  
  8399                                  setend_faterr:
  8400 00001EDB 89D8                    	mov	ax,bx			; use calculated value
  8401                                  
  8402                                  setend_fat:
  8403                                  
  8404                                  ;	now ax = maximum legal cluster
  8405                                  
  8406                                  ;	end M008
  8407                                  
  8408                                  	;mov	[es:bp+0Dh], ax
  8409 00001EDD 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8410                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8411                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8412 00001EE1 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8413                                  					; Init so first ALLOC starts at
  8414                                  					; begining of FAT
  8415                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8416                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8417 00001EE7 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8418                                  
  8419 00001EED C3                      	retn
  8420                                  
  8421                                  ;EndProc $SETDPB
  8422                                  
  8423                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8424                                  
  8425                                  ;
  8426                                  ;----------------------------------------------------------------------------
  8427                                  ;
  8428                                  ;**	$Dup_PDB
  8429                                  ;
  8430                                  ; Inputs:   DX is new segment address of process
  8431                                  ;	    SI is end of new allocation block
  8432                                  ;
  8433                                  ;----------------------------------------------------------------------------
  8434                                  ;
  8435                                  
  8436                                  _$DUP_PDB:
  8437                                  
  8438                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8439                                  ;hkn;	Must set up ds in order to access CreatePDB. Also SS is 
  8440                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8441                                  
  8442 00001EEE 2EC606[7203]FF          	MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8443 00001EF4 2E8E1E[FC02]            	MOV	DS,[CS:CurrentPDB]
  8444 00001EF9 56                      	PUSH	SI
  8445 00001EFA EB0A                    	JMP	SHORT CreateCopy
  8446                                  
  8447                                  ;
  8448                                  ;----------------------------------------------------------------------------
  8449                                  ;
  8450                                  ; Inputs:
  8451                                  ;	DX = Segment number of new base
  8452                                  ; Function:
  8453                                  ;	Set up program base and copy term and ^C from int area
  8454                                  ; Returns:
  8455                                  ;	None
  8456                                  ; Called at DOS init
  8457                                  ;
  8458                                  ;----------------------------------------------------------------------------
  8459                                  ;
  8460                                  
  8461                                  _$CREATE_PROCESS_DATA_BLOCK:
  8462                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8463 00001EFC E84AF7                  	CALL	Get_User_Stack
  8464                                  	;mov	ds,[si+14h]
  8465 00001EFF 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8466                                  	;push	word [2]
  8467 00001F02 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8468                                  CreateCopy:
  8469 00001F06 8EC2                    	MOV	ES,DX
  8470                                  
  8471 00001F08 31F6                    	XOR	SI,SI			; copy entire PDB
  8472 00001F0A 89F7                    	MOV	DI,SI
  8473 00001F0C B98000                  	MOV	CX,128
  8474 00001F0F F3A5                    	REP	MOVSW
  8475                                  
  8476                                  ; DOS 3.3 7/9/86
  8477                                  
  8478                                  	;mov	cx,20
  8479                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8480 00001F11 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8481                                  	;mov	di,18h
  8482 00001F13 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8483                                  
  8484                                  	; 28/07/2019
  8485                                  	;PUSH	DS
  8486                                  	;lds	si,[34h]
  8487 00001F16 C5363400                	LDS	SI,[PDB.JFN_Pointer]
  8488 00001F1A F3A4                    	REP	MOVSB
  8489                                  	;POP	DS
  8490                                  
  8491 00001F1C 0E                      	push	cs
  8492 00001F1D 1F                      	pop	ds
  8493                                  
  8494                                  ; DOS 3.3 7/9/86
  8495                                  
  8496                                  	;test	byte [cs:CreatePDB],0FFh
  8497                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8498 00001F1E 803E[7203]00            	cmp	byte [CreatePDB],0
  8499 00001F23 7446                    	JZ	short Create_PDB_cont 	; nope, old style call
  8500                                  ;
  8501                                  ; Here we set up for a new process...
  8502                                  ;
  8503                                  	;PUSH    CS			; Called at DOSINIT time, NO SS
  8504                                  	;POP     DS
  8505                                  
  8506 00001F25 31DB                    	XOR	BX,BX			; dup all jfns
  8507                                  	;mov	cx,20
  8508                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8509 00001F27 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8510                                  
  8511                                  Create_dup_jfn:
  8512 00001F29 06                      	PUSH	ES ;**			; save new PDB
  8513 00001F2A E8144C                  	call	SFFromHandle		; get sf pointer
  8514 00001F2D B0FF                    	MOV	AL,-1			; unassigned JFN
  8515 00001F2F 7225                    	JC	short CreateStash	; file was not really open
  8516                                  	;test	word [es:di+5],1000h
  8517 00001F31 26F745050010            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8518 00001F37 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8519                                  ;
  8520                                  ; We do not inherit network file handles.
  8521                                  ;
  8522                                  	;mov	ah,[es:di+2]
  8523 00001F39 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8524                                  	;and	ah,0F0h
  8525 00001F3D 80E4F0                  	AND	AH,SHARING_MASK
  8526                                  	;cmp	ah,70h
  8527 00001F40 80FC70                  	CMP	AH,SHARING_NET_FCB
  8528 00001F43 7411                    	jz	short CreateStash
  8529                                  ;
  8530                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8531                                  ; duplication operation.
  8532                                  ;
  8533 00001F45 893E[5A05]              	MOV	[THISSFT],DI
  8534 00001F49 8C06[5C05]              	MOV	[THISSFT+2],ES
  8535 00001F4D E8F817                  	call	DOS_DUP 		; signal duplication
  8536                                  ;
  8537                                  ; get the old sfn for copy
  8538                                  ;
  8539 00001F50 E8D64B                  	call	pJFNFromHandle		; ES:DI is jfn
  8540 00001F53 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8541                                  ;
  8542                                  ; Take AL (old sfn or -1) and stash it into the new position
  8543                                  ;
  8544                                  CreateStash:
  8545 00001F56 07                      	POP	ES ;**
  8546                                  	;mov	[es:bx+18h],al
  8547 00001F57 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8548 00001F5B 43                      	INC	BX			; next jfn...
  8549 00001F5C E2CB                    	LOOP	Create_dup_jfn
  8550                                  
  8551 00001F5E 8B1E[FC02]              	MOV	BX,[CurrentPDB]		; get current process
  8552                                  	;mov	[es:bx+16h]
  8553 00001F62 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8554 00001F67 8C06[FC02]              	MOV	[CurrentPDB],ES
  8555                                  	;MOV	DS,BX ; 28/07/2019
  8556                                  ;
  8557                                  ; end of new process create
  8558                                  ;
  8559                                  Create_PDB_cont:
  8560                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8561                                  	; 28/07/2019
  8562 00001F6B C606[7203]00            	MOV	byte [CreatePDB],0	; reset flag
  8563 00001F70 58                      	POP	AX  ;*
  8564                                  
  8565                                  	;entry	SETMEM
  8566                                  
  8567                                  ;---------------------------------------------------------------------------
  8568                                  ; Inputs:
  8569                                  ;	AX = Size of memory in paragraphs
  8570                                  ;	DX = Segment
  8571                                  ; Function:
  8572                                  ;	Completely prepares a program base at the
  8573                                  ;	specified segment.
  8574                                  ; Called at DOS init
  8575                                  ; Outputs:
  8576                                  ;	DS = DX
  8577                                  ;	ES = DX
  8578                                  ;	[0] has INT int_abort
  8579                                  ;	[2] = First unavailable segment
  8580                                  ;	[5] to [9] form a long call to the entry point
  8581                                  ;	[10] to [13] have exit address (from int_terminate)
  8582                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8583                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8584                                  ; DX,BP unchanged. All other registers destroyed.
  8585                                  ;---------------------------------------------------------------------------
  8586                                  
  8587                                  SETMEM:
  8588 00001F71 31C9                    	XOR	CX,CX
  8589 00001F73 8ED9                    	MOV	DS,CX
  8590 00001F75 8EC2                    	MOV	ES,DX
  8591                                  	;mov	si,88h
  8592 00001F77 BE8800                  	MOV	SI,addr_int_terminate
  8593                                  	;mov	di,10
  8594 00001F7A BF0A00                  	MOV	DI,SAVEXIT
  8595                                  	;MOV	CX,6
  8596 00001F7D B106                    	mov	cl,6 ; 06/07/2019
  8597 00001F7F F3A5                    	REP	MOVSW
  8598 00001F81 26A30200                	MOV	[ES:2],AX
  8599 00001F85 29D0                    	SUB	AX,DX
  8600 00001F87 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8601 00001F8A 7603                    	JBE	short HAVDIF
  8602 00001F8C B8FF0F                  	MOV	AX,MAXDIF
  8603                                  HAVDIF:
  8604 00001F8F 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8605 00001F92 BB0C00                  	MOV	BX,ENTRYPOINTSEG	;	in .COM files
  8606 00001F95 29C3                    	SUB	BX,AX
  8607 00001F97 B104                    	MOV	CL,4
  8608 00001F99 D3E0                    	SHL	AX,CL
  8609 00001F9B 8EDA                    	MOV	DS,DX
  8610                                  
  8611                                  	; (MSDOS 6.0 note)
  8612                                  	;
  8613                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8614                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8615                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8616                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8617                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8618                                  	; making this equvalence valid for this particular case. If however
  8619                                  	; there is less than 64K remaining the address in BX:AX will not 
  8620                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8621                                  	; into the PSP.
  8622                                  	;
  8623                                  	; Therefore for the case where there is less than 64K remaining in 
  8624                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8625                                  	; requirements will not work. Call 5, however will continue to work
  8626                                  	; for all cases.
  8627                                  	;
  8628                                  
  8629                                  	;mov	[6],ax
  8630                                  	;mov	[8],bx
  8631                                  
  8632 00001F9D A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8633 00001FA0 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8634                                  
  8635                                  	;cmp	ax,WRAPOFFSET		; Q: does the system have >= 64k of
  8636                                  	;				;    memory left
  8637                                  	;je	short addr_ok		; Y: the above calculated address is
  8638                                  	;				;    OK
  8639                                  	;				; N: 
  8640                                  
  8641                                  	;MOV	WORD [PDB.CPM_CALL+1],0C0h
  8642                                  	;MOV	WORD [PDB.CPM_CALL+3],0
  8643                                  
  8644                                  ;addr_ok:
  8645                                  	;mov	word [0],20CDh
  8646 00001FA4 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8647                                  	;mov	byte [5],9Ah
  8648 00001FAA C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8649                                  	;mov	word [50h],21CDh
  8650 00001FAF C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8651                                  	;mov	byte [52h],0CBh
  8652 00001FB5 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8653                                  	;mov	word [34h],18h
  8654 00001FBA C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8655                                  	;mov	word [36h],ds
  8656 00001FC0 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8657                                  	;mov	word [32h],20
  8658 00001FC4 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8659                                  ;
  8660                                  ; The server runs several PDB's without creating them VIA EXEC. We need to
  8661                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8662                                  ; particular SFT. We perform this by requiring that the server link together
  8663                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8664                                  ; initialize this pointer.
  8665                                  ;
  8666                                   	;mov	word [38h],-1
  8667 00001FCA C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8668                                  	;mov	word [3Ah],-1
  8669 00001FD0 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8670                                  			; Set the real version number in the PSP - 5.00
  8671                                  	;mov	[ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8672                                  
  8673 00001FD6 C3                      	retn
  8674                                  
  8675                                  ; 23/07/2019 - Retro DOS v3.2
  8676                                  
  8677                                  ;============================================================================
  8678                                  ; IBMDOS.COM (MSDOS 3.3 KERNEL), 1987 - Offset 1DE6h
  8679                                  ;============================================================================
  8680                                  ; 19/07/2018 - Retro DOS v3.0
  8681                                  
  8682                                  ;FETCHI_CHECK:
  8683                                  ;	pushf
  8684                                  ;	cmp	word [cs:FETCHI_TAG],5872h
  8685                                  ;	jz      short FETCHI_CHK_RETN
  8686                                  ;	call    DOSINIT
  8687                                  ;FETCHI_CHK_RETN:
  8688                                  ;	popf
  8689                                  ;	retn
  8690                                  
  8691                                  ;============================================================================
  8692                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8693                                  ;============================================================================
  8694                                  ; 20/07/2018 - Retro DOS v3.0
  8695                                  
  8696                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8697                                  ;----------------------------------------------------------------------------
  8698                                  ;
  8699                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8700                                  ;		Strings of different lengths don't match.
  8701                                  ;   Inputs:	DS:SI - pointer to source string  ES:DI - pointer to dest string
  8702                                  ;   Outputs:	Z if strings same, NZ if different
  8703                                  ;   Registers modified: NONE
  8704                                  ;----------------------------------------------------------------------------
  8705                                  
  8706                                  StrCmp:
  8707 00001FD7 56                      	push	si
  8708 00001FD8 57                      	push	di
  8709 00001FD9 50                      	push	ax
  8710                                  
  8711                                  Cmplp:
  8712 00001FDA AC                      	LODSB
  8713 00001FDB E80F39                  	call	UCase			; convert to upper case
  8714 00001FDE E84839                  	call	PATHCHRCMP		; convert / to 	MOV	AH,AL
  8716 00001FE1 268A05                  	MOV	AL,[ES:DI]
  8717 00001FE4 47                      	INC	DI
  8718 00001FE5 E80539                  	call	UCase			; convert to upper case
  8719 00001FE8 E83E39                  	call	PATHCHRCMP		; convert / to 	CMP	AH,AL
  8721 00001FEB 7504                    	JNZ	short PopRet		; Strings dif
  8722                                  Tend:
  8723 00001FED 08C0                    	OR	AL,AL
  8724 00001FEF 75E9                    	JNZ	short Cmplp		; More string
  8725                                  PopRet:
  8726 00001FF1 58                      	pop	ax
  8727 00001FF2 5F                      	pop	di
  8728 00001FF3 5E                      	pop	si
  8729 00001FF4 C3                      	retn
  8730                                  
  8731                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8732                                  ;----------------------------------------------------------------------------
  8733                                  ;
  8734                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8735                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI.  no modification of
  8736                                  ;	characters.
  8737                                  ;
  8738                                  ;   Inputs:	DS:SI - pointer to source string
  8739                                  ;		ES:DI - pointer to destination string
  8740                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8741                                  ;		DS:SI point byte after nul byte at end of source string
  8742                                  ;   Registers modified: SI,DI
  8743                                  ;----------------------------------------------------------------------------
  8744                                  
  8745                                  StrCpy:
  8746 00001FF5 50                      	push	ax
  8747                                  CPYLoop:
  8748 00001FF6 AC                      	LODSB
  8749 00001FF7 E8F338                  	call	UCase			; convert to upper case
  8750 00001FFA E82C39                  	call	PATHCHRCMP		; convert / to \ ;
  8751 00001FFD AA                      	STOSB
  8752                                  Tend2:
  8753 00001FFE 08C0                    	OR	AL,AL
  8754 00002000 75F4                    	JNZ	short CPYLoop
  8755 00002002 58                      	pop	ax
  8756 00002003 C3                      	retn
  8757                                  
  8758                                  ;----------------------------------------------------------------------------
  8759                                  ; Procedure Name : FStrCpy
  8760                                  ;----------------------------------------------------------------------------
  8761                                  
  8762                                  FStrCpy:
  8763 00002004 50                      	push	ax
  8764                                  FCPYLoop:
  8765 00002005 AC                      	LODSB
  8766 00002006 AA                      	STOSB
  8767 00002007 08C0                    	OR	AL,AL
  8768 00002009 75FA                    	JNZ	short FCPYLoop
  8769 0000200B 58                      	pop	ax
  8770 0000200C C3                      	retn
  8771                                  
  8772                                  ; 20/07/2018 - Retro DOS v3.0
  8773                                  ;----------------------------------------------------------------------------
  8774                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8775                                  ;----------------------------------------------------------------------------
  8776                                  ;
  8777                                  ;UCase:	
  8778                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8779                                  ;	retn
  8780                                  
  8781                                  ;Break <StrLen - compute length of string ES:DI>
  8782                                  ;----------------------------------------------------------------------------
  8783                                  ;**	StrLen - Compute Length of String
  8784                                  ;
  8785                                  ;	StrLen computes the length of a string, including the trailing 00
  8786                                  ;
  8787                                  ;	ENTRY	(es:di) = address of string
  8788                                  ;	EXIT	(cx) = size of string
  8789                                  ;	USES	cx, flags
  8790                                  ;----------------------------------------------------------------------------
  8791                                  
  8792                                  StrLen:
  8793 0000200D 57                      	push	di
  8794 0000200E 50                      	push	ax
  8795                                  	;MOV	CX,-1
  8796 0000200F B9FFFF                  	mov	cx,65535
  8797 00002012 30C0                    	XOR	AL,AL
  8798 00002014 F2AE                    	REPNE	SCASB
  8799 00002016 F7D1                    	NOT	CX
  8800 00002018 58                      	pop	ax
  8801 00002019 5F                      	pop	di
  8802 0000201A C3                      	retn
  8803                                  
  8804                                  ;----------------------------------------------------------------------------
  8805                                  ;**	DStrLen - Compute Length of String
  8806                                  ;
  8807                                  ;	ENTRY	(ds:si) = address of string
  8808                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8809                                  ;	USES	cx, flags
  8810                                  ;----------------------------------------------------------------------------
  8811                                  
  8812                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8813 0000201B E80700                  	CALL	XCHGP
  8814 0000201E E8ECFF                  	CALL	StrLen
  8815 00002021 E80100                  	CALL	XCHGP
  8816 00002024 C3                      	retn
  8817                                  
  8818                                  ;----------------------------------------------------------------------------
  8819                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8820                                  ;
  8821                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8822                                  ;
  8823                                  ;	ENTRY	none
  8824                                  ;	EXIT	pairs exchanged
  8825                                  ;	USES	SI, DI, DS, ES
  8826                                  ;----------------------------------------------------------------------------
  8827                                  
  8828                                  XCHGP:
  8829 00002025 1E                      	push	ds
  8830 00002026 06                      	push	es
  8831 00002027 1F                      	pop	ds
  8832 00002028 07                      	pop	es
  8833 00002029 87F7                    	XCHG	SI,DI
  8834                                  xchgp_retn:
  8835 0000202B C3                      	retn
  8836                                  
  8837                                  ;Break	<Idle - wait for a specified amount of time>
  8838                                  ;----------------------------------------------------------------------------
  8839                                  ;
  8840                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  8841                                  ;   	   we spin until RetryLoop is exhausted.
  8842                                  ;
  8843                                  ;   Inputs:	RetryLoop is the number of times we spin
  8844                                  ;   Outputs:	Wait
  8845                                  ;   Registers modified: none
  8846                                  ;----------------------------------------------------------------------------
  8847                                  
  8848                                  Idle:
  8849                                  	;test	byte [SS:FSHARING],0FFh
  8850 0000202C 36803E[2F05]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  8851                                  	;retnz
  8852 00002032 75F7                    	jnz	short xchgp_retn
  8853                                  	;SAVE	<CX>
  8854 00002034 51                      	push	cx
  8855 00002035 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  8856 0000203A E308                    	JCXZ	Idle3
  8857                                  Idle1:	
  8858 0000203C 51                      	PUSH	CX
  8859 0000203D 31C9                    	XOR	CX,CX
  8860                                  Idle2:	
  8861 0000203F E2FE                    	LOOP	Idle2
  8862 00002041 59                      	POP	CX
  8863 00002042 E2F8                    	LOOP	Idle1
  8864                                  Idle3:	
  8865                                  	;RESTORE <CX>
  8866 00002044 59                      	pop	cx
  8867 00002045 C3                      	retn
  8868                                  
  8869                                  ;Break	<TableDispatch - dispatch to a table>
  8870                                  ;----------------------------------------------------------------------------
  8871                                  ;
  8872                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  8873                                  ;   routine.  Preserve all input registers to the routine.
  8874                                  ;
  8875                                  ;   Inputs:	Push	return address
  8876                                  ;		Push	Table address
  8877                                  ;		Push	index (byte)
  8878                                  ;   Outputs:	appropriate routine gets jumped to.
  8879                                  ;		return indicates invalid index
  8880                                  ;   Registers modified: none.
  8881                                  ;----------------------------------------------------------------------------
  8882                                  
  8883                                  struc TFrame	 ; TableFrame
  8884 00000000 ????                    .OldBP:	 resw 1  ; 0
  8885 00000002 ????                    .OldRet: resw 1  ; 2
  8886 00000004 ??                      .Index:	 resb 1  ; 4
  8887 00000005 ??                      .Pad:	 resb 1  ; 5  
  8888 00000006 ????                    .Tab:	 resw 1  ; 6
  8889 00000008 ????                    .NewRet: resw 1  ; 8
  8890                                  endstruc
  8891                                  
  8892                                  TableDispatch:
  8893 00002046 55                      	PUSH	BP
  8894 00002047 89E5                    	MOV	BP,SP
  8895 00002049 53                      	PUSH	BX			; save BX
  8896                                  	;mov	bx,[bp+6]
  8897 0000204A 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  8898 0000204D 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  8899                                  	;cmp	[bp+4],bl
  8900 00002050 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  8901 00002053 7317                    	JAE	short TableError	; yes
  8902                                  	;mov	bl,[bp+4]
  8903 00002055 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  8904 00002058 30FF                    	XOR	BH,BH			; convert to word
  8905 0000205A D1E3                    	SHL	BX,1			; convert to word pointer
  8906 0000205C 43                      	INC	BX			; point past first length byte
  8907                                  	; 17/08/2018
  8908                                  	;add	bx,[bp+6]
  8909 0000205D 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  8910 00002060 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  8911                                  	;mov	[bp+6],bx
  8912 00002063 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  8913 00002066 5B                      	POP	BX			; restore BX
  8914 00002067 5D                      	POP	BP			; restore BP
  8915 00002068 83C404                  	ADD	SP,4			; clean off Index and our return addr
  8916 0000206B C3                      	retn				; do operation
  8917                                  TableError:
  8918 0000206C 5B                      	POP	BX			; restore BX
  8919 0000206D 5D                      	POP	BP			; restore BP
  8920 0000206E C20600                  	RETN	6			; clean off Index, Table and RetAddr
  8921                                  
  8922                                  
  8923                                  ;Break	<TestNet - determine if a CDS is for the network>
  8924                                  ;----------------------------------------------------------------------------
  8925                                  ;
  8926                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  8927                                  ;	network CDS.  This will handle NULL cds also.
  8928                                  ;
  8929                                  ;   Inputs:	ThisCDS points to CDS or NULL
  8930                                  ;   Outputs:	ES:DI = ThisCDS
  8931                                  ;		carry Set => network
  8932                                  ;		carry Clear => local
  8933                                  ;   Registers modified: none.
  8934                                  ;----------------------------------------------------------------------------
  8935                                  
  8936                                  TestNet:
  8937 00002071 2EC43E[5E05]            	LES	DI,[CS:THISCDS]
  8938 00002076 83FFFF                  	CMP	DI,-1
  8939 00002079 7409                    	JZ	short CMCRet		; UNC? carry is clear
  8940                                  	;test	word [es:di+43h],8000h
  8941 0000207B 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
  8942 00002081 7501                    	JNZ	short CMCRet		; jump has carry clear
  8943 00002083 C3                      	retn				; carry is clear
  8944                                  CMCRet: 
  8945 00002084 F5                      	CMC
  8946 00002085 C3                      	retn
  8947                                  
  8948                                  ;Break	<IsSFTNet - see if an sft is for the network>
  8949                                  ;----------------------------------------------------------------------------
  8950                                  ;
  8951                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  8952                                  ;	network file.
  8953                                  ;
  8954                                  ;   Inputs:	ES:DI point to SFT
  8955                                  ;   Outputs:	Zero set if not network sft
  8956                                  ;		zero reset otherwise
  8957                                  ;		Carry CLEAR!!!
  8958                                  ;   Registers modified: none.
  8959                                  ;----------------------------------------------------------------------------
  8960                                  
  8961                                  IsSFTNet:
  8962                                  	;test	word [es:di+5],8000h
  8963 00002086 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  8964 0000208C C3                      	retn
  8965                                  
  8966                                  ;Break	<FastInit - Initialize FastTable entries >
  8967                                  ;----------------------------------------------------------------------------
  8968                                  ;   DOS 4.00   2/9/87
  8969                                  ;   FastInit  - initialize the FASTXXX routine entry
  8970                                  ;		  in the FastTable
  8971                                  ;
  8972                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  8973                                  ;		DS:SI = address of FASTXXX routine entry
  8974                                  ;		   SI = -1 for query only
  8975                                  ;   Outputs:	Carry flag clear, if success
  8976                                  ;		Carry flag set,   if failure
  8977                                  ;
  8978                                  ;
  8979                                  ;----------------------------------------------------------------------------
  8980                                  
  8981                                  ;Procedure FastInit,NEAR
  8982                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  8983                                  ;FastInit:
  8984                                  	; MSDOS 6.0
  8985                                  	;hkn; set up es to dosdataseg.
  8986                                  	;push	es
  8987                                  	;getdseg <es>			; es -> dosdata
  8988                                  
  8989                                  	;hkn; FastTable is in DOSDATA
  8990                                  	;MOV	DI,OFFSET DOSDATA:FastTable + 2 ;AN000;FO. points to fastxxx entry
  8991                                  	;DEC	BX				;AN000;FO.;; decrement index
  8992                                  	;MOV	DX,BX				;AN000;FO.;; save bx
  8993                                  	;SHL	BX,1				;AN000;FO.;; times 4 , each entry is DWORD
  8994                                  	;SHL	BX,1				;AN000;FO.
  8995                                  	;ADD	DI,BX				;AN000;FO. index to the entry
  8996                                  	;MOV	AX,WORD PTR ES:[DI+2]		;AN000;FO. get entry segment
  8997                                  ;fcheck: 					;AN000;
  8998                                  	;MOV	CX,CS				;AN000;FO.;; get DOS segment
  8999                                  	;CMP	AX,CX				;AN000;FO.;; first time installed ?
  9000                                  	;JZ	short ok_install			;AN000;FO.;; yes
  9001                                  	;OR	AX,AX				;AN000;FO.;
  9002                                  	;JZ	short ok_install		;AN000;FO.;
  9003                                  	;STC					;AN000;FO.;; already installed !
  9004                                  	;JMP	SHORT FSret			;AN000;FO. set carry
  9005                                  ;ok_install:					;AN000;
  9006                                  	;CMP	SI,-1				;AN000;FO.; Query only ?
  9007                                  	;JZ	short FSret			;AN000;FO.; yes
  9008                                  	;MOV	CX,DS				;AN000;FO.; get FASTXXX entry segment
  9009                                  	;MOV	WORD PTR ES:[DI+2],CX		;AN000;FO.; initialize routine entry
  9010                                  	;MOV	WORD PTR ES:[DI],SI		;AN000;FO.; initialize routine offset
  9011                                  
  9012                                  ;hkn; FastFlg moved to DOSDATA
  9013                                  	;MOV	DI,OFFSET DOSDATA:FastFlg	;AN000;FO.; get addr of FASTXXX flags
  9014                                  	;ADD	DI,DX				;AN000;FO.; index to a FASTXXX flag
  9015                                  	;OR	byte ptr ES:[DI],Fast_yes	;AN000;FO.; indicate installed
  9016                                  FSret:						;AN000;
  9017                                  	;pop	es
  9018                                  	;return					;AN000;FO.
  9019                                  ;EndProc FastInit				;AN000;FO.
  9020                                  
  9021                                  	; MSDOS 3.3
  9022                                  	; IBMDOS.COM (1987) - Offset 1EB3h
  9023                                  FastInit:
  9024 0000208D BF[730F]                	mov	di,FastTable ; FastOpenTable
  9025 00002090 2E8B4504                	mov	ax,[cs:di+4]		; Entry segment
  9026 00002094 8CCB                    	mov	bx,cs			; get DOS segment
  9027 00002096 39D8                    	cmp	ax,bx			; first time installed ?	
  9028 00002098 7402                    	je	short ok_install	; yes
  9029 0000209A F9                      	stc				; set carry
  9030 0000209B C3                      	retn				; (cf=1 means) already installed !
  9031                                  
  9032                                  ok_install:
  9033 0000209C BB[730F]                	mov	bx,FastTable ; FastOpenTable
  9034 0000209F 8CD9                    	mov	cx,ds
  9035                                  	; set address of FASTXXX (FASTOPEN) routine entry
  9036 000020A1 2E894F04                	mov	[cs:bx+4],cx
  9037 000020A5 2E897702                	mov	[cs:bx+2],si
  9038 000020A9 C3                      	retn
  9039                                  
  9040                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9041                                  ;----------------------------------------------------------------------------
  9042                                  ;   DOS 3.3   6/10/86
  9043                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9044                                  ;
  9045                                  ;   Inputs:	None
  9046                                  ;   Outputs:	AX = -1 and carry flag set
  9047                                  ;
  9048                                  ;   Registers modified: none.
  9049                                  ;----------------------------------------------------------------------------
  9050                                  
  9051                                  FastRet:
  9052                                  	;mov	ax,-1
  9053                                  	;stc
  9054                                  	;retf
  9055 000020AA F9                      	STC
  9056 000020AB 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9057 000020AD CB                      	RETF
  9058                                  
  9059                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9060                                  ;----------------------------------------------------------------------------
  9061                                  ;   DOS 3.3   6/10/86
  9062                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9063                                  ;
  9064                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9065                                  ;   Outputs:	same output as $OPEN
  9066                                  ;
  9067                                  ;----------------------------------------------------------------------------
  9068                                  
  9069                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9070                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9071                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9072                                  
  9073                                  NLS_OPEN:
  9074                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9075                                  ;	MOV	BYTE [CPSWFLAG],0
  9076                                  ;	PUSH	BX		 ; save current state
  9077                                  
  9078 000020AE 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9079 000020B0 E8C752                  	call	_$OPEN
  9080                                  
  9081                                   ;	POP	BX		 ; restore current state
  9082                                   ;	MOV	[CPSWFLAG],BL
  9083 000020B3 C3                      	RETN
  9084                                  
  9085                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9086                                  ;----------------------------------------------------------------------------
  9087                                  ;   DOS 3.3   6/10/86
  9088                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9089                                  ;
  9090                                  ;   Inputs:	BP = open mode
  9091                                  ;   Outputs:	same output as $LSEEK
  9092                                  ;
  9093                                  ;----------------------------------------------------------------------------
  9094                                  
  9095                                  NLS_LSEEK:
  9096                                  	;PUSH	word [SS:USER_SP] ; save user stack
  9097                                  	;PUSH	word [SS:USER_SS]
  9098 000020B4 2EFF36[4005]            	PUSH	word [CS:USER_SP] ; save user stack
  9099 000020B9 2EFF36[4205]            	PUSH	word [CS:USER_SS]
  9100 000020BE E81000                  	CALL	Fake_User_Stack
  9101 000020C1 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9102 000020C3 E8B351                  	call	_$LSEEK
  9103                                  	;POP	word [SS:USER_SS] ; restore user stack
  9104                                  	;POP	word [SS:USER_SP]
  9105 000020C6 2E8F06[4205]            	POP	word [cs:USER_SS] ; restore user stack
  9106 000020CB 2E8F06[4005]            	POP	word [cs:USER_SP]
  9107 000020D0 C3                      	RETN
  9108                                  
  9109                                  ;Break	<Fake_User_Stack - save user stack>
  9110                                  ;----------------------------------------------------------------------------
  9111                                  ;   DOS 3.3   6/10/86
  9112                                  ;   Fake_User_Stack - save user stack pointer
  9113                                  ;
  9114                                  ;----------------------------------------------------------------------------
  9115                                  
  9116                                  Fake_User_Stack:
  9117                                  	;MOV	AX,[ss:USER_SP_2F] ; replace with INT 2F stack
  9118 000020D1 2EA1[A70F]              	MOV	AX,[cs:USER_SP_2F]
  9119                                  	;MOV	[SS:USER_SP],AX
  9120 000020D5 2EA3[4005]              	MOV	[CS:USER_SP],AX
  9121 000020D9 8CC8                    	MOV	AX,CS
  9122                                  	;mov	ax,ss
  9123                                  	;MOV	[SS:USER_SS],AX
  9124 000020DB 2EA3[4205]              	MOV	[CS:USER_SS],AX
  9125 000020DF C3                      	RETN
  9126                                  
  9127                                  ;Break	<GetDevList - get device header list pointer>
  9128                                  ;----------------------------------------------------------------------------
  9129                                  ;   DOS 3.3   7/25/86
  9130                                  ;   GetDevList - get device header list pointer
  9131                                  ;
  9132                                  ;   Output: AX:BX points to the device header list
  9133                                  ;----------------------------------------------------------------------------
  9134                                  
  9135                                  GetDevList:
  9136 000020E0 BE[6B0F]                	MOV	SI,SysInitTable
  9137                                  	;LDS	SI,[CS:SI+SYSINITVARS]
  9138 000020E3 2EC534                  	LDS	SI,[CS:SI]
  9139                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9140                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9141 000020E6 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9142 000020E9 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9143 000020EC C3                      	RETN
  9144                                  
  9145                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC   >
  9146                                  ;----------------------------------------------------------------------------
  9147                                  ;   DOS 3.3   7/25/86
  9148                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9149                                  ;
  9150                                  ;   Inputs:	BP = function code 0CH
  9151                                  ;   Outputs:	same output as generic $IOCTL
  9152                                  ;
  9153                                  ;----------------------------------------------------------------------------
  9154                                  
  9155                                  NLS_IOCTL:
  9156                                  	;PUSH	word [SS:USER_SP] ; save user stack
  9157                                  	;PUSH	word [SS:USER_SS]
  9158 000020ED 2EFF36[4005]            	PUSH	word [CS:USER_SP] ; save user stack
  9159 000020F2 2EFF36[4205]            	PUSH	word [CS:USER_SS]
  9160 000020F7 E8D7FF                  	CALL	Fake_User_Stack
  9161 000020FA 89E8                    	MOV	AX,BP	     ; set up correct interface for $LSEEK
  9162 000020FC E82E0F                  	call	_$IOCTL
  9163                                  	;POP	word [SS:USER_SS] ; restore user stack
  9164                                  	;POP	word [SS:USER_SP]
  9165 000020FF 2E8F06[4205]            	POP	word [CS:USER_SS] ; restore user stack
  9166 00002104 2E8F06[4005]            	POP	word [CS:USER_SP]
  9167 00002109 C3                      	RETN
  9168                                  
  9169                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9170                                  ;----------------------------------------------------------------------------
  9171                                  ;   DOS 3.3   7/25/86
  9172                                  ;   NLS_GETEXT	-
  9173                                  ;
  9174                                  ;   Inputs:	none
  9175                                  ;   Outputs:	AX = extended error
  9176                                  ;
  9177                                  ;----------------------------------------------------------------------------
  9178                                  
  9179                                  NLS_GETEXT:
  9180                                  	;MOV	AX,[SS:EXTERR]	 ; return extended error
  9181 0000210A 2EA1[F002]              	mov	AX,[CS:EXTERR]
  9182 0000210E C3                      	RETN
  9183                                  
  9184                                  ;============================================================================
  9185                                  ; EcritDisk, LcritDisk, EcritDevice, LCritDevice
  9186                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9187                                  ;============================================================================
  9188                                  ; 20/07/2018 - Retro DOS v3.0
  9189                                  
  9190                                  	; MSDOS 3.3
  9191                                  	; 08/08/2018 - Retro DSOS v3.0
  9192                                  EcritMem:
  9193                                  EcritSFT:
  9194                                  	;
  9195                                  EcritDisk:
  9196                                  	;push	ax
  9197 0000210F C3                      	retn
  9198                                  	
  9199 00002110 B80180                  	mov	ax,8001h
  9200 00002113 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9201                                  			; AL = critical section number (00h-0Fh)
  9202 00002115 58                      	pop	ax
  9203 00002116 C3                      	retn
  9204                                  
  9205                                  	; MSDOS 3.3
  9206                                  	; 08/08/2018 - Retro DSOS v3.0
  9207                                  LcritMem:
  9208                                  LcritSFT:
  9209                                  	;
  9210                                  LcritDisk:
  9211                                  	;push	ax
  9212 00002117 C3                      	retn
  9213                                  	
  9214 00002118 B80181                  	mov	ax,8101h
  9215 0000211B CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9216                                  			; AL = critical section number (00h-0Fh)
  9217 0000211D 58                      	pop	ax
  9218 0000211E C3                      	retn
  9219                                  
  9220                                  EcritDevice:
  9221                                  	;push	ax
  9222 0000211F C3                      	retn
  9223                                  	
  9224 00002120 B80280                  	mov	ax,8002h
  9225 00002123 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9226                                  			; AL = critical section number (00h-0Fh)
  9227 00002125 58                      	pop	ax
  9228 00002126 C3                      	retn
  9229                                  
  9230                                  LcritDevice:
  9231                                  	;push	ax
  9232 00002127 C3                      	retn
  9233                                  	
  9234 00002128 B80281                  	mov	ax,8102h
  9235 0000212B CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9236                                  			; AL = critical section number (00h-0Fh)
  9237 0000212D 58                      	pop	ax
  9238 0000212E C3                      	retn
  9239                                  
  9240                                  ;============================================================================
  9241                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9242                                  ;============================================================================
  9243                                  ; 20/07/2018 - Retro DOS v3.0
  9244                                  
  9245                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9246                                  
  9247                                  ; Some old versions of the 80286 have a bug in the chip.  The popf
  9248                                  ; instruction will enable interrupts.  Therefore in a section of code with
  9249                                  ; interrupts disabled and you need a popf instruction use the 'popff'
  9250                                  ; macro instead.
  9251                                  ;
  9252                                  
  9253                                  ;%macro POPFF 0
  9254                                  ;	jmp	$+3
  9255                                  ;	iret
  9256                                  ;	push	cs
  9257                                  ;	call	$-2
  9258                                  ;%endmacro
  9259                                  
  9260                                  ;**	CRIT.ASM - Critical Section Routines
  9261                                  ;
  9262                                  ;	Critical section handlers
  9263                                  ;
  9264                                  ;	Modification history:
  9265                                  ;
  9266                                  ;	    Created: ARR 30 March 1983
  9267                                  
  9268                                  ;
  9269                                  ;SR; This variable is set when the redir installs itself
  9270                                  ;
  9271                                  	;I_need redir_patch,BYTE
  9272                                  
  9273                                  ; Break	<Critical section handlers>
  9274                                  
  9275                                  ;   Each handler must leave everything untouched; including flags!
  9276                                  ;
  9277                                  ;   Sleaze for time savings:  first instruction is a return.  This is patched
  9278                                  ;   by the sharer to be a PUSH AX to complete the correct routines.
  9279                                  
  9280                                  ;Procedure  EcritDisk,NEAR
  9281                                  	;public  EcritMem
  9282                                  	;public  EcritSFT
  9283                                  ;ECritMEM    LABEL   NEAR
  9284                                  ;ECritSFT    LABEL   NEAR
  9285                                  
  9286                                  ;
  9287                                  ;SR; Check if critical section is to be entered
  9288                                  ;
  9289                                  
  9290                                  ;	pushf
  9291                                  ;	cmp	ss:[redir_patch],0
  9292                                  ;	jz	@f
  9293                                  ;	popff
  9294                                  ;
  9295                                  ;       PUSH    AX
  9296                                  ;	MOV     AX,8000h+critDisk
  9297                                  ;	INT     int_ibm
  9298                                  ;	POP     AX
  9299                                  ;	return
  9300                                  ;@@:
  9301                                  ;	popff
  9302                                  ;	ret
  9303                                  ;EndProc EcritDisk
  9304                                  
  9305                                  ;Procedure   LcritDisk,NEAR
  9306                                  ;	public  LcritMem
  9307                                  ;	public  LcritSFT
  9308                                  ;LCritMEM    LABEL   NEAR
  9309                                  ;LCritSFT    LABEL   NEAR
  9310                                  
  9311                                  ;
  9312                                  ;SR; Check if critical section is to be entered
  9313                                  ;
  9314                                  
  9315                                  ;	pushf
  9316                                  ;	cmp	ss:[redir_patch],0
  9317                                  ;	jz	@f
  9318                                  ;	popff
  9319                                  
  9320                                  ;       PUSH    AX
  9321                                  ;	MOV     AX,8100h+critDisk
  9322                                  ;	INT     int_ibm
  9323                                  ;	POP     AX
  9324                                  ;	return
  9325                                  ;@@:
  9326                                  ;	popff
  9327                                  ;	ret
  9328                                  
  9329                                  ;EndProc LcritDisk
  9330                                  
  9331                                  ;Procedure   EcritDevice,NEAR
  9332                                  ;
  9333                                  ;SR; Check if critical section is to be entered
  9334                                  ;
  9335                                  
  9336                                  ;	pushf
  9337                                  ;	cmp	ss:[redir_patch],0
  9338                                  ;	jz	@f
  9339                                  ;	popff
  9340                                  
  9341                                  ;       PUSH    AX
  9342                                  ;	MOV     AX,8000h+critDevice
  9343                                  ;	INT     int_ibm
  9344                                  ;	POP     AX
  9345                                  ;	return
  9346                                  ;@@:
  9347                                  ;	popff
  9348                                  ;	ret
  9349                                  
  9350                                  ;EndProc EcritDevice
  9351                                  
  9352                                  ;Procedure   LcritDevice,NEAR
  9353                                  ;
  9354                                  ;SR; Check if critical section is to be entered
  9355                                  ;
  9356                                  
  9357                                  ;	pushf
  9358                                  ;	cmp	ss:[redir_patch],0
  9359                                  ;	jz	@f
  9360                                  ;	popff
  9361                                  
  9362                                  ;       PUSH    AX
  9363                                  ;	MOV     AX,8100h+critDevice
  9364                                  ;	INT     int_ibm
  9365                                  ;	POP     AX
  9366                                  ;	return
  9367                                  ;@@:
  9368                                  ;	popff
  9369                                  ;	ret
  9370                                  
  9371                                  ;EndProc LcritDevice
  9372                                  
  9373                                  
  9374                                  ;============================================================================
  9375                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9376                                  ;============================================================================
  9377                                  ; 20/07/2018 - Retro DOS v3.0
  9378                                  
  9379                                  ;============================================================================
  9380                                  ; STDIO.ASM - (MSDOS 2.0)
  9381                                  ;============================================================================
  9382                                  
  9383                                  ;
  9384                                  ; Standard device IO for MSDOS (first 12 function calls)
  9385                                  ;
  9386                                  
  9387                                  ;.xlist
  9388                                  ;.xcref
  9389                                  ;INCLUDE STDSW.ASM
  9390                                  ;INCLUDE DOSSEG.ASM
  9391                                  ;.cref
  9392                                  ;.list
  9393                                  
  9394                                  ;TITLE   STDIO - device IO for MSDOS
  9395                                  ;NAME    STDIO
  9396                                  
  9397                                  ;INCLUDE IO.ASM
  9398                                  
  9399                                  ; ---------------------------------------------------------------------------
  9400                                  ;
  9401                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9402                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9403                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9404                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9405                                  ;			    to restore MSDOS 2.0 device IO source code 
  9406                                  ;
  9407                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9408                                  	
  9409                                  ;============================================================================
  9410                                  ; STDIO.ASM - (MSDOS 2.0)
  9411                                  ;============================================================================
  9412                                  
  9413                                  ;
  9414                                  ; Standard device IO for MSDOS (first 12 function calls)
  9415                                  ;
  9416                                  
  9417                                  ;.xlist
  9418                                  ;.xcref
  9419                                  ;INCLUDE STDSW.ASM
  9420                                  ;INCLUDE DOSSEG.ASM
  9421                                  ;.cref
  9422                                  ;.list
  9423                                  
  9424                                  ;TITLE   STDIO - device IO for MSDOS
  9425                                  ;NAME    STDIO
  9426                                  
  9427                                  ;INCLUDE IO.ASM
  9428                                  
  9429                                  ; ---------------------------------------------------------------------------
  9430                                  ;
  9431                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9432                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9433                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9434                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9435                                  ;			    to restore MSDOS 2.0 device IO source code 
  9436                                  ;
  9437                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9438                                  ;
  9439                                  ;============================================================================
  9440                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9441                                  ;============================================================================
  9442                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9443                                  
  9444                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9445                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9446                                  
  9447                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9448                                  ;
  9449                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9450                                  ;	NAME	IBMCPMIO
  9451                                  
  9452                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9453                                  ;
  9454                                  ;	$Std_Con_Input_No_Echo
  9455                                  ;	$Std_Con_String_Output
  9456                                  ;	$Std_Con_String_Input
  9457                                  ;	$RawConIO
  9458                                  ;	$RawConInput
  9459                                  ;	RAWOUT
  9460                                  ;	RAWOUT2
  9461                                  ;
  9462                                  
  9463                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9464                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9465                                  ; references to be SS or CS relative which is desired.
  9466                                  
  9467                                  ; ---------------------------------------------------------------------------
  9468                                  
  9469                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9470                                  ;	NAME	CPMIO2
  9471                                  
  9472                                  ;
  9473                                  ;	Microsoft Confidential
  9474                                  ;	Copyright (C) Microsoft Corporation 1991
  9475                                  ;	All Rights Reserved.
  9476                                  ;
  9477                                  
  9478                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9479                                  ;
  9480                                  ;	$Std_Con_Input
  9481                                  ;	$Std_Con_Output
  9482                                  ;	OUTT
  9483                                  ;	TAB
  9484                                  ;	BUFOUT
  9485                                  ;	$Std_Aux_Input
  9486                                  ;	$Std_Aux_Output
  9487                                  ;	$Std_Printer_Output
  9488                                  ;	$Std_Con_Input_Status
  9489                                  ;	$Std_Con_Input_Flush
  9490                                  ;
  9491                                  ;	Revision History:
  9492                                  ;
  9493                                  ;	  AN000	 version 4.00 - Jan. 1988
  9494                                  
  9495                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9496                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9497                                  ; references to be SS or CS relative which is desired.
  9498                                  
  9499                                  ;DOSCODE SEGMENT
  9500                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9501                                  
  9502                                  
  9503                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9504                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9505                                  ;hkn;	not valid. 
  9506                                  
  9507                                  ;
  9508                                  ;----------------------------------------------------------------------------
  9509                                  ;
  9510                                  ; Procedure : $Std_Con_Input_No_Echo
  9511                                  ;
  9512                                  ;----------------------------------------------------------------------------
  9513                                  ;
  9514                                  
  9515                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9516                                  
  9517                                  ; Inputs:
  9518                                  ;	None
  9519                                  ; Function:
  9520                                  ;	Input character from console, no echo
  9521                                  ; Returns:
  9522                                  ;	AL = character
  9523                                  
  9524 0000212F 1E                      	push	ds
  9525 00002130 56                      	push	si
  9526                                  INTEST:
  9527 00002131 E89C38                  	call	STATCHK
  9528 00002134 753B                    	jnz	short GET ; 08/09/2018
  9529                                  ;*************************************************************************
  9530                                  ;hkn; SS override
  9531 00002136 36803E[360A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9532 0000213C 7505                    	jnz	short no_sys_wait
  9533 0000213E B405                    	mov	ah,5			; get input status with system wait
  9534 00002140 E8402E                  	call	IOFUNC
  9535                                  no_sys_wait:
  9536                                  ;**************************************************************************
  9537 00002143 B484                    	MOV	AH,84h
  9538 00002145 CD2A                    	INT	int_IBM	 ; int 2Ah
  9539                                  
  9540                                  ;;; 7/15/86  update the date in the idle loop
  9541                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9542                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9543                                  
  9544                                  ;hkn; SS override
  9545 00002147 36803E[C30F]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9546 0000214D 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9547 0000214F 50                      	PUSH	AX
  9548 00002150 53                      	PUSH	BX			; following is tricky,
  9549 00002151 51                      	PUSH	CX			; it may be called by critical handler
  9550 00002152 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9551                                  					; other's READ or WRITE
  9552 00002153 1E                      	PUSH	DS			; save DS = SFT's sgement
  9553                                  
  9554                                  ;hkn; READTIME must use ds = DOSDATA
  9555                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9556                                  
  9557                                  	;push	ss
  9558 00002154 0E                      	PUSH	CS
  9559 00002155 1F                      	POP	DS
  9560                                  
  9561 00002156 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9562 00002159 E88D02                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9563                                  	;invoke	READTIME		; readtime
  9564 0000215C E81CF8                  	call	READTIME
  9565 0000215F B80100                  	MOV	AX,1
  9566 00002162 E88402                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9567                                  	
  9568                                  	; 24/07/2019 - Retro DOS v3.2
  9569                                  
  9570                                  	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9571                                  	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9572                                  	;push	bx
  9573                                  	;mov	bx,DATE_FLAG
  9574                                  	;add	bx,2  ; mov bx,FETCHI_FLAG
  9575                                  	;cmp	word [cs:bx],5872h
  9576                                  	;jz	short FETCHI_TAG_chk_ok
  9577                                  	;call	DOSINIT
  9578                                  ;FETCHI_TAG_chk_ok:
  9579                                  	;pop	bx
  9580                                  	
  9581 00002165 1F                      	POP	DS			; restore DS
  9582 00002166 5A                      	POP	DX
  9583 00002167 59                      	POP	CX
  9584 00002168 5B                      	POP	BX
  9585 00002169 58                      	POP	AX
  9586                                  NoUpdate:
  9587                                  
  9588                                  ;hkn; SS override
  9589 0000216A 36FF06[C30F]            	INC	word [SS:DATE_FLAG]
  9590                                  
  9591                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  9592 0000216F EBC0                    	JMP	short INTEST
  9593                                  GET:
  9594 00002171 30E4                    	XOR	AH,AH
  9595 00002173 E80D2E                  	call	IOFUNC
  9596 00002176 5E                      	POP	SI
  9597 00002177 1F                      	POP	DS
  9598                                  ;;; 7/15/86
  9599                                  
  9600                                  ;hkn; SS override
  9601                                  	; MSDOS 6.0
  9602 00002178 36C606[C10F]00          	MOV	BYTE [SS:SCAN_FLAG],0
  9603                                  	;
  9604 0000217E 3C00                    	CMP	AL,0	    ; extended code ( AL )
  9605 00002180 7506                    	JNZ	short noscan
  9606                                  
  9607                                  ;hkn; SS override
  9608 00002182 36C606[C10F]01          	MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
  9609                                  
  9610                                  noscan:
  9611 00002188 C3                      	retn
  9612                                  ;
  9613                                  ;----------------------------------------------------------------------------
  9614                                  ;
  9615                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
  9616                                  ;
  9617                                  ;
  9618                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
  9619                                  ;	EXIT	none
  9620                                  ;	USES	ALL
  9621                                  ;
  9622                                  ;----------------------------------------------------------------------------
  9623                                  ;
  9624                                  
  9625                                  _$STD_CON_STRING_OUTPUT:	;System call 9
  9626                                  
  9627 00002189 89D6                    	mov	si,dx
  9628                                  STRING_OUT1:	
  9629 0000218B AC                      	lodsb
  9630 0000218C 3C24                    	cmp	al,'$'
  9631 0000218E 74F8                    	jz	short noscan
  9632                                  NEXT_STR1:
  9633 00002190 E88202                  	call	OUTT
  9634 00002193 EBF6                    	jmp	short STRING_OUT1
  9635                                  
  9636                                  ;----------------------------------------------------------------------------
  9637                                  ;
  9638                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
  9639                                  ;
  9640                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
  9641                                  ;
  9642                                  ;	ENTRY	(ds:dx) = input buffer
  9643                                  ;	EXIT	none
  9644                                  ;	USES	ALL
  9645                                  ;
  9646                                  ;----------------------------------------------------------------------------
  9647                                  
  9648                                  _$STD_CON_STRING_INPUT:		;System call 10
  9649                                  
  9650 00002195 8CD0                    	mov	ax,ss
  9651 00002197 8EC0                    	mov	es,ax
  9652 00002199 89D6                    	mov	si,dx
  9653 0000219B 30ED                    	xor	ch,ch
  9654 0000219D AD                      	lodsw
  9655                                  
  9656                                  ;	(AL) = the buffer length
  9657                                  ;	(AH) = the template length
  9658                                  
  9659 0000219E 08C0                            or	al,al
  9660 000021A0 74E6                            jz	short noscan	;Buffer is 0 length!!?
  9661 000021A2 88E3                    	mov	bl,ah		;Init template counter
  9662 000021A4 88EF                            mov	bh,ch		;Init template counter
  9663                                  
  9664                                  ;	(BL) = the number of bytes in the template
  9665                                  
  9666 000021A6 38D8                            cmp	al,bl
  9667 000021A8 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
  9668 000021AA 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
  9669 000021AD 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
  9670                                  
  9671                                  ; The number of chars in the template is >= the number of chars in buffer or
  9672                                  ; there is no CR at the end of the template.  This is an inconsistant state
  9673                                  ; of affairs.  Pretend that the template was empty:
  9674                                  ;
  9675                                  
  9676                                  NOEDIT:	
  9677 000021AF 88EB                    	mov	bl,ch		;Reset buffer
  9678                                  EDITON: 
  9679 000021B1 88C2                    	mov	dl,al
  9680 000021B3 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
  9681                                  
  9682                                  ;	Top level.  We begin to read a line in.
  9683                                  
  9684                                  NEWLIN: 
  9685 000021B4 36A0[C501]              	mov	al,[SS:CARPOS]
  9686 000021B8 36A2[C601]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
  9687                                  
  9688 000021BC 56                      	push	si
  9689 000021BD BF[C701]                	mov	di,INBUF ;Build the new line here
  9690 000021C0 36882E[3605]            	mov	byte [SS:INSMODE],ch ;Insert mode off
  9691 000021C5 88EF                    	mov	bh,ch		;No chars from template yet
  9692 000021C7 88EE                    	mov	dh,ch		;No chars to new line yet
  9693 000021C9 E863FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
  9694 000021CC 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
  9695 000021CE 7503                    	jnz	short GOTCH
  9696                                  
  9697                                  ;	This is the main loop of reading in a character and processing it.
  9698                                  ;
  9699                                  ;	(BH) = the index of the next byte in the template
  9700                                  ;	(BL) = the length of the template
  9701                                  ;	(DH) = the number of bytes in the buffer
  9702                                  ;	(DL) = the length of the buffer
  9703                                  
  9704                                  GETCH:
  9705 000021D0 E85CFF                  	call	_$STD_CON_INPUT_NO_ECHO
  9706                                  GOTCH:
  9707                                  ;
  9708                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
  9709                                  ; input queue.
  9710                                  ;
  9711 000021D3 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
  9712 000021D5 74F9                    	jz	short GETCH
  9713                                  
  9714                                  ;	If the leading char is the function-key lead byte
  9715                                  
  9716 000021D7 363A06[1013]                    cmp	al,[SS:ESCCHAR]
  9717 000021DC 7438                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
  9718                                  
  9719                                  ;	Rubout and ^H are both destructive backspaces.
  9720                                  
  9721 000021DE 3C7F                            cmp	al,c_DEL ; 7FH
  9722 000021E0 742B                            jz	short BACKSPJ
  9723 000021E2 3C08                            cmp	al,c_BS  ; 8
  9724 000021E4 7427                            jz	short BACKSPJ
  9725                                  
  9726                                  	; MSDOS 6.0
  9727                                  ;;	^W deletes backward once and then backs up until a letter is before the
  9728                                  ;;	cursor
  9729                                  ;
  9730                                  ;	CMP     AL,"W"-"@" ; 17h
  9731                                  ;
  9732                                  ;;	The removal of the comment characters before the jump statement will
  9733                                  ;;	cause ^W to backup a word.
  9734                                  ;
  9735                                  ;;***	JZ	short WordDel
  9736                                  ;	NOP
  9737                                  ;	NOP
  9738                                  ;	CMP     AL,"U"-"@" ; 15h
  9739                                  ;
  9740                                  ;;	The removal of the comment characters before the jump statement will
  9741                                  ;;	cause ^U to clear a line.
  9742                                  ;
  9743                                  ;;***	JZ	short LineDel
  9744                                  ;	NOP
  9745                                  ;	NOP
  9746                                  
  9747                                  ;	CR terminates the line.
  9748                                  
  9749 000021E6 3C0D                            cmp	al,c_CR ; 0Dh
  9750 000021E8 742F                            jz	short ENDLIN
  9751                                  
  9752                                  ;	LF goes to a new line and keeps on reading.
  9753                                  
  9754 000021EA 3C0A                            cmp	al,c_LF ; 0Ah
  9755 000021EC 7441                    	jz	short PHYCRLF
  9756                                  
  9757                                  ;	^X (or ESC) deletes the line and starts over
  9758                                  
  9759                                  	; MSDOS 3.3
  9760                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
  9761                                  	;jz	short KILNEW
  9762                                  	; MSDOS 6.0
  9763 000021EE 3C1B                    	cmp	al,CANCEL ; 1Bh
  9764 000021F0 7442                    	jz	short KILNEW
  9765                                  
  9766                                  ; Otherwise, we save the input character.
  9767                                  
  9768                                  SAVCH:	
  9769 000021F2 38D6                    	cmp	dh,dl
  9770 000021F4 7319                    	jnb	short BUFFUL		; buffer is full.
  9771 000021F6 AA                              stosb
  9772 000021F7 FEC6                    	inc	dh                      ; increment count in buffer.
  9773 000021F9 E8B302                  	call	BUFOUT			;Print control chars nicely
  9774                                  
  9775 000021FC 36803E[3605]00                  cmp	byte [SS:INSMODE], 0
  9776 00002202 75CC                    	jnz	short GETCH		; insertmode => don't advance template
  9777 00002204 38DF                            cmp	bh,bl
  9778 00002206 73C8                            jnb	short GETCH		; no more characters in template
  9779 00002208 46                              inc	si                      ; Skip to next char in template
  9780 00002209 FEC7                            inc	bh                      ; remember position in template
  9781 0000220B EBC3                            jmp	short GETCH
  9782                                  
  9783                                  BACKSPJ: 
  9784 0000220D EB38                    	jmp	short BACKSP
  9785                                  
  9786                                  BUFFUL: 
  9787 0000220F B007                    	mov	al, 7			; Bell to signal full buffer
  9788 00002211 E80102                  	call	OUTT
  9789 00002214 EBBA                    	jmp	short GETCH
  9790                                  
  9791                                  ESCAPE: 
  9792                                  	;transfer OEMFunctionKey
  9793 00002216 E992F6                  	JMP	OEMFunctionKey
  9794                                  
  9795                                  ENDLIN:
  9796 00002219 AA                              stosb				; Put the CR in the buffer
  9797 0000221A E8F801                  	call	OUTT                    ; Echo it
  9798 0000221D 5F                              pop	di                      ; Get start of user buffer
  9799 0000221E 8875FF                          mov	[di-1], dh		; Tell user how many bytes
  9800 00002221 FEC6                            inc	dh			; DH is length including CR
  9801                                  
  9802                                  COPYNEW:
  9803                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
  9804                                  	;mov	bp, es
  9805                                  	;mov	bx, ds
  9806                                  	;mov	es, bx
  9807                                  	;mov	ds, bp
  9808                                  	;mov	si, INBUF
  9809                                  	;mov	cl, dh
  9810                                  	;rep	movsb
  9811                                  	;retn
  9812                                  
  9813                                  	; CPMIO.ASM (MSDOS 6.0)
  9814                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
  9815                                  	;SAVE	<DS,ES>
  9816 00002223 1E                      	PUSH	DS
  9817 00002224 06                      	PUSH	ES
  9818                                  	;RESTORE <DS,ES>		; XCHG ES,DS
  9819 00002225 1F                      	POP	DS
  9820 00002226 07                      	POP	ES
  9821                                  
  9822                                  ;;hkn; INBUF is in DOSDATA
  9823 00002227 BE[C701]                        MOV     SI,INBUF
  9824 0000222A 88F1                            MOV     CL,DH                   ; set up count
  9825 0000222C F3A4                            REP     MOVSB                   ; Copy final line to user buffer
  9826                                  OLDBAK_RETN:
  9827 0000222E C3                              RETN
  9828                                  
  9829                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
  9830                                  
  9831                                  PHYCRLF:
  9832 0000222F E82001                  	CALL	CRLF
  9833 00002232 EB9C                            JMP	short GETCH
  9834                                  
  9835                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
  9836                                  
  9837                                  	; Note: Following routines were not used in IBMDOS.COM
  9838                                  	;	-CRTL+W, CRTL+U is not activated-
  9839                                  	;	but they were in the kernel code!?)
  9840                                  ;
  9841                                  ; Delete the previous line
  9842                                  ;
  9843                                  ;LineDel:
  9844                                  ;	OR      DH,DH
  9845                                  ;	JZ	short GetCh
  9846                                  ;	Call    BackSpace
  9847                                  ;	JMP	short LineDel
  9848                                  
  9849                                  ;
  9850                                  ; delete the previous word.
  9851                                  ;
  9852                                  ;WordDel:
  9853                                  ;WordLoop:
  9854                                  ;	Call    BackSpace               ; backspace the one spot
  9855                                  ;	OR      DH,DH
  9856                                  ;	JZ	short GetChJ
  9857                                  ;	MOV     AL,[ES:DI-1]
  9858                                  ;	cmp     al,'0'
  9859                                  ;	jb	short GetChj
  9860                                  ;	cmp     al,'9'
  9861                                  ;	jbe	short WordLoop
  9862                                  ;	OR      AL,20h
  9863                                  ;	CMP     AL,'a'
  9864                                  ;	JB	short GetChJ
  9865                                  ;	CMP     AL,'z'
  9866                                  ;	JBE	short WordLoop
  9867                                  ;getchj: 
  9868                                  ;	JMP	GetCh
  9869                                  
  9870                                  ; The user wants to throw away what he's typed in and wants to start over.
  9871                                  ; We print the backslash and then go to the next line and tab to the correct
  9872                                  ; spot to begin the buffered input.
  9873                                  
  9874                                  KILNEW:
  9875 00002234 B05C                            mov	al,'\'
  9876 00002236 E8DC01                          call	OUTT            ;Print the CANCEL indicator
  9877 00002239 5E                              pop	si		;Remember start of edit buffer
  9878                                  PUTNEW:
  9879 0000223A E81501                  	call	CRLF            ;Go to next line on screen
  9880 0000223D 36A0[C601]              	mov	al,[SS:STARTPOS]
  9881 00002241 E84702                  	call	TAB             ;Tab over
  9882 00002244 E96DFF                          JMP     NEWLIN		;Start over again
  9883                                  
  9884                                  ;	Destructively back up one character position
  9885                                  
  9886                                  BACKSP:
  9887                                  	; 09/09/2018
  9888 00002247 E80200                  	Call    BackSpace
  9889 0000224A EB84                    	JMP     GETCH
  9890                                  
  9891                                  BackSpace:
  9892 0000224C 08F6                    	or	dh,dh
  9893 0000224E 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
  9894 00002250 E85800                  	call	BACKUP          ;Do the backup
  9895 00002253 268A05                  	mov	al,[es:di]	;Get the deleted char
  9896 00002256 3C20                            cmp	al,20h	; ' '
  9897 00002258 730F                    	jnb	short OLDBAK	;Was a normal char
  9898 0000225A 3C09                            cmp	al,c_HT ; 9
  9899 0000225C 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
  9900                                  ;; 9/27/86 fix for ctrl-U backspace
  9901 0000225E 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
  9902 00002260 7407                    	JZ	short OLDBAK
  9903 00002262 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
  9904 00002264 7403                    	JZ	short OLDBAK
  9905                                  ;; 9/27/86 fix for ctrl-U backspace
  9906 00002266 E84500                          call	BACKMES         ;Was a control char, zap the '^'
  9907                                  OLDBAK:
  9908 00002269 36803E[3605]00                  cmp	byte [SS:INSMODE], 0
  9909 0000226F 75BD                    	jnz	short OLDBAK_RETN ;In insert mode, done
  9910 00002271 08FF                    	or	bh,bh
  9911 00002273 74B9                            jz	short OLDBAK_RETN 
  9912                                  				;Not advanced in template, stay where we are
  9913 00002275 FECF                    	dec	bh		;Go back in template
  9914 00002277 4E                              dec	si
  9915 00002278 C3                      	retn
  9916                                  
  9917                                  BAKTAB:
  9918 00002279 57                              push	di
  9919 0000227A 4F                              dec	di		;Back up one char
  9920 0000227B FD                              std			;Go backward
  9921 0000227C 88F1                            mov	cl,dh		;Number of chars currently in line
  9922 0000227E B020                            mov	al,20h	; ' '
  9923 00002280 53                              push	bx
  9924 00002281 B307                            mov	bl,7		;Max
  9925 00002283 E30E                            jcxz	FIGTAB		;At start, do nothing
  9926                                  FNDPOS:
  9927 00002285 AE                              scasb			;Look back
  9928 00002286 7609                    	jbe	short CHKCNT
  9929 00002288 26807D0109              	cmp	byte [es:di+1],9
  9930 0000228D 7409                    	jz	short HAVTAB	;Found a tab
  9931 0000228F FECB                    	dec	bl		;Back one char if non tab control char
  9932                                  CHKCNT:
  9933 00002291 E2F2                            loop	FNDPOS
  9934                                  FIGTAB:		
  9935 00002293 362A1E[C601]            	sub	bl,[SS:STARTPOS]
  9936                                  HAVTAB:
  9937 00002298 28F3                    	sub	bl,dh
  9938 0000229A 00D9                    	add	cl,bl
  9939 0000229C 80E107                  	and	cl,7		;CX has correct number to erase
  9940 0000229F FC                      	cld			;Back to normal
  9941 000022A0 5B                      	pop	bx
  9942 000022A1 5F                      	pop	di
  9943 000022A2 74C5                    	jz	short OLDBAK	;Nothing to erase
  9944                                  TABBAK:
  9945 000022A4 E80700                  	call	BACKMES
  9946 000022A7 E2FB                    	loop	TABBAK		;Erase correct number of chars
  9947 000022A9 EBBE                    	jmp	short OLDBAK
  9948                                  
  9949                                  BACKUP:
  9950 000022AB FECE                            dec	dh             ;Back up in line
  9951 000022AD 4F                              dec	di
  9952                                  BACKMES:
  9953 000022AE B008                            mov	al,c_BS ; 8	;Backspace
  9954 000022B0 E86201                          call	OUTT
  9955 000022B3 B020                            mov	al,20h ; ' '	;Erase
  9956 000022B5 E85D01                          call	OUTT
  9957 000022B8 B008                            mov	al,c_BS ; 8	;Backspace
  9958 000022BA E95801                  	jmp	OUTT		;Done
  9959                                  
  9960                                  ;User really wants an ESC character in his line
  9961                                  TWOESC:	
  9962 000022BD 36A0[1013]              	mov	al,[SS:ESCCHAR]
  9963 000022C1 E92EFF                  	jmp	SAVCH
  9964                                  
  9965                                  ;Copy the rest of the template
  9966                                  COPYLIN:
  9967 000022C4 88D9                            mov	cl,bl		;Total size of template
  9968 000022C6 28F9                    	sub	cl,bh		;Minus position in template, is number to move
  9969 000022C8 EB07                            jmp	short COPYEACH
  9970                                  
  9971                                  COPYSTR:
  9972 000022CA E83400                  	call	FINDOLD         ;Find the char
  9973 000022CD EB02                    	jmp	short COPYEACH  ;Copy up to it
  9974                                  
  9975                                  ;Copy one char from template to line
  9976                                  COPYONE:
  9977 000022CF B101                            mov	cl,1
  9978                                  ;Copy CX chars from template to line
  9979                                  COPYEACH:
  9980 000022D1 36C606[3605]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
  9981 000022D7 38D6                    	cmp	dh,dl
  9982 000022D9 740F                            jz	short GETCH2		;At end of line, can't do anything
  9983 000022DB 38DF                            cmp	bh,bl
  9984 000022DD 740B                            jz	short GETCH2		;At end of template, can't do anything
  9985 000022DF AC                              lodsb
  9986 000022E0 AA                              stosb
  9987 000022E1 E8CB01                  	call	BUFOUT
  9988 000022E4 FEC7                            inc	bh			;Ahead in template
  9989 000022E6 FEC6                            inc	dh			;Ahead in line
  9990 000022E8 E2E7                            loop	COPYEACH
  9991                                  GETCH2:
  9992 000022EA E9E3FE                          jmp	GETCH
  9993                                  
  9994                                  ;Skip one char in template
  9995                                  SKIPONE:
  9996 000022ED 38DF                    	cmp	bh,bl
  9997 000022EF 74F9                    	jz	short GETCH2		;At end of template
  9998 000022F1 FEC7                    	inc	bh			;Ahead in templat
  9999 000022F3 46                      	inc	si
 10000 000022F4 E9D9FE                  	jmp	GETCH
 10001                                  
 10002                                  SKIPSTR:
 10003 000022F7 E80700                  	call	FINDOLD                 ;Find out how far to go
 10004 000022FA 01CE                            add	si,cx			;Go there
 10005 000022FC 00CF                            add	bh,cl
 10006 000022FE E9CFFE                          jmp	GETCH
 10007                                  
 10008                                  ;Get the next user char, and look ahead in template for a match
 10009                                  ;CX indicates how many chars to skip to get there on output
 10010                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10011                                  ;       address is popped off and a jump to GETCH is taken.
 10012                                  ;       Make sure nothing extra on stack when this routine
 10013                                  ;       is called!!! (no PUSHes before calling it).
 10014                                  FINDOLD:
 10015 00002301 E82BFE                          call	_$STD_CON_INPUT_NO_ECHO
 10016                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10017 00002304 363A06[1013]            	CMP     AL,[SS:ESCCHAR]	; did he type a function key?
 10018                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10019                                  	;CMP	AL,[CS:ESCCHAR]
 10020 00002309 7505                    	JNZ     SHORT FINDSETUP		; no, set up for scan
 10021 0000230B E821FE                          CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10022 0000230E EB1D                            JMP     SHORT NOTFND		; go try again
 10023                                  FINDSETUP:
 10024 00002310 88D9                    	mov	cl,bl
 10025 00002312 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10026 00002314 7417                    	jz	short NOTFND	;At end of template
 10027 00002316 49                              dec	cx		;Cannot point past end, limit search
 10028 00002317 7414                            jz	short NOTFND	 ;If only one char in template, forget it
 10029 00002319 06                      	push	es
 10030 0000231A 1E                      	push	ds
 10031 0000231B 07                      	pop	es
 10032 0000231C 57                      	push	di
 10033 0000231D 89F7                    	mov	di,si		;Template to ES:DI
 10034 0000231F 47                      	inc	di
 10035 00002320 F2AE                    	repne	scasb		;Look
 10036 00002322 5F                      	pop	di
 10037 00002323 07                      	pop	es
 10038 00002324 7507                    	jnz	short NOTFND	;Didn't find the char
 10039 00002326 F6D1                            not	cl		;Turn how far to go into how far we went
 10040 00002328 00D9                            add	cl,bl		;Add size of template
 10041 0000232A 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10042                                  FINDOLD_RETN:
 10043 0000232C C3                      	retn
 10044                                  
 10045                                  NOTFND:
 10046 0000232D 5D                              pop	bp              ;Chuck return address
 10047 0000232E E99FFE                          jmp	GETCH
 10048                                  
 10049                                  REEDIT:
 10050 00002331 B040                    	mov	al,'@'		;Output re-edit character
 10051 00002333 E8DF00                  	call	OUTT
 10052 00002336 5F                      	pop	di
 10053 00002337 57                      	push	di
 10054 00002338 06                      	push	es
 10055 00002339 1E                      	push	ds
 10056 0000233A E8E6FE                  	call	COPYNEW		;Copy current line into template
 10057 0000233D 1F                      	pop	ds
 10058 0000233E 07                      	pop	es
 10059 0000233F 5E                      	pop	si
 10060 00002340 88F3                    	mov	bl,dh		;Size of line is new size template
 10061 00002342 E9F5FE                  	jmp	PUTNEW		;Start over again
 10062                                  
 10063                                  EXITINS:
 10064                                  ENTERINS:
 10065 00002345 36F616[3605]            	not	byte [SS:INSMODE]
 10066 0000234A E983FE                  	jmp	GETCH
 10067                                  
 10068                                  ;Put a real live ^Z in the buffer (embedded)
 10069                                  CTRLZ:
 10070 0000234D B01A                    	mov	al,"Z"-"@" ; 1Ah
 10071 0000234F E9A0FE                          jmp	SAVCH
 10072                                  
 10073                                  ;Output a CRLF
 10074                                  CRLF:
 10075 00002352 B00D                    	mov	al,c_CR ; 0Dh 
 10076 00002354 E8BE00                  	call	OUTT
 10077 00002357 B00A                    	mov	al,c_LF ; 0Ah
 10078 00002359 E9B900                  	jmp	OUTT
 10079                                  
 10080                                  ;
 10081                                  ;----------------------------------------------------------------------------
 10082                                  ;
 10083                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10084                                  ;
 10085                                  ;	Input or output raw character from console, no echo
 10086                                  ;
 10087                                  ;	ENTRY	DL = -1 if input
 10088                                  ;		   =  output character if output
 10089                                  ;	EXIT	(AL) = input character if input
 10090                                  ;	USES	all
 10091                                  ;
 10092                                  ;----------------------------------------------------------------------------
 10093                                  ; 20/07/2018 - Retro DOS v3.0
 10094                                  
 10095                                  _$RAW_CON_IO:			; System call 6
 10096                                  
 10097 0000235C 88D0                            MOV     AL,DL
 10098 0000235E 3CFF                            CMP     AL,-1
 10099 00002360 7542                            JNZ     SHORT RAWOUT
 10100                                          ;LES 	DI,[USER_SP]	; Get pointer to register save area
 10101 00002362 36C43E[4005]                    LES     DI,[SS:USER_SP] ; 12/03/2018
 10102 00002367 31DB                    	XOR     BX,BX
 10103                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10104 00002369 E8281E                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10105                                          ;JC	SHORT RET17
 10106 0000236C 72BE                            jc	short FINDOLD_RETN
 10107 0000236E B401                    	MOV     AH,1
 10108 00002370 E8102C                          CALL	IOFUNC
 10109 00002373 750B                            JNZ     SHORT RESFLG
 10110 00002375 E83936                          CALL	SPOOLINT
 10111                                          ;OR	BYTE [ES:DI+16H],40H
 10112 00002378 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10113 0000237D 30C0                            XOR     AL,AL
 10114                                  RET17:
 10115 0000237F C3                              RETN
 10116                                  
 10117                                  RESFLG:
 10118                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10119 00002380 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10120                                  				; Reset user's zero flag
 10121                                  ;RILP:
 10122                                  rci0:
 10123 00002385 E82936                       	CALL	SPOOLINT
 10124                                  
 10125                                  ;
 10126                                  ;----------------------------------------------------------------------------
 10127                                  ;
 10128                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10129                                  ;
 10130                                  ;	Input raw character from console, no echo
 10131                                  ;
 10132                                  ;	ENTRY	none
 10133                                  ;	EXIT	(al) = character
 10134                                  ;	USES	all
 10135                                  ;
 10136                                  ;----------------------------------------------------------------------------
 10137                                  ;
 10138                                  
 10139                                  ;rci0:	invoke	SPOOLINT
 10140                                  
 10141                                  	;entry	$RAW_CON_INPUT
 10142                                  
 10143                                  _$RAW_CON_INPUT:		; System call 7
 10144 00002388 53                      	push	bx
 10145 00002389 31DB                            XOR     BX,BX
 10146                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10147 0000238B E8061E                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10148 0000238E 5B                              pop	bx
 10149 0000238F 72EE                    	JC	SHORT RET17
 10150 00002391 B401                            MOV     AH,1
 10151 00002393 E8ED2B                          CALL	IOFUNC
 10152                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10153                                  	;XOR     AH,AH
 10154                                          ;CALL	IOFUNC
 10155                                          ;RETN
 10156 00002396 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10157 00002398 B484                    	MOV	AH,84h
 10158 0000239A CD2A                    	INT	int_IBM  ; int 2Ah
 10159 0000239C EBE7                    	JMP	short rci0
 10160                                  rci5:	
 10161 0000239E 30E4                            XOR     AH,AH
 10162 000023A0 E8E02B                          CALL	IOFUNC
 10163 000023A3 C3                              RETN
 10164                                  
 10165                                  ;
 10166                                  ;       Output the character in AL to stdout
 10167                                  ;
 10168                                  	;entry   RAWOUT
 10169                                  
 10170                                  RAWOUT:
 10171 000023A4 53                              PUSH    BX
 10172 000023A5 BB0100                          MOV     BX,1
 10173                                  
 10174                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10175 000023A8 E8E91D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10176 000023AB 721B                            JC      SHORT RAWRET1
 10177                                  	;
 10178                                  	; MSDOS 2.11
 10179                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10180                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10181                                          ;PUSH	DS
 10182                                          ;PUSH	SI
 10183                                          ;LDS	SI,[SI+19H]		; output to special?
 10184                                  	;TEST	BYTE [SI+4],ISSPEC
 10185                                  	;POP	SI
 10186                                  	;
 10187                                          
 10188                                  	; MSDOS 3.3 & MSDOS 6.0
 10189                                  	;mov	bx,[si+5]
 10190 000023AD 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10191                                   ;
 10192                                   ; If we are a network handle OR if we are not a local device then go do the
 10193                                   ; output the hard way.
 10194                                   ;	
 10195                                  	;and	bx,8080h
 10196 000023B0 81E38080                	AND	BX,sf_isnet+devid_device
 10197                                  	;cmp	bx,80h
 10198 000023B4 81FB8000                	CMP	BX,devid_device
 10199 000023B8 7510                    	jnz     short RAWNORM
 10200 000023BA 1E                      	push    ds
 10201                                  	;lds	bx,[si+7]
 10202 000023BB C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10203                                  	;test	byte [bx+4],10h
 10204 000023BE F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10205                                  	;
 10206                                  
 10207 000023C2 1F                              POP     DS
 10208 000023C3 7405                            JZ      SHORT RAWNORM		; if not, do normally
 10209 000023C5 CD29                            INT     int_fastcon   ; int 29h	; quickly output the char
 10210                                  
 10211                                          ;JMP     SHORT RAWRET
 10212                                  ;RAWNORM:
 10213                                  ;	CALL    RAWOUT3
 10214                                  
 10215                                  RAWRET: 
 10216 000023C7 F8                      	CLC
 10217                                  RAWRET1:
 10218 000023C8 5B                              POP     BX
 10219                                  RAWRET2:
 10220 000023C9 C3                      	RETN
 10221                                  
 10222                                  RAWNORM:
 10223 000023CA E80700                  	CALL    RAWOUT3
 10224 000023CD EBF8                    	jmp	short RAWRET
 10225                                  
 10226                                  ;
 10227                                  ;       Output the character in AL to handle in BX
 10228                                  ;
 10229                                  ;	entry   RAWOUT2
 10230                                  
 10231                                  RAWOUT2:
 10232                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10233                                  	;JC	SHORT RET18
 10234 000023CF E8C21D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10235 000023D2 72F5                    	JC	SHORT RAWRET2
 10236                                  RAWOUT3:
 10237 000023D4 50                              PUSH    AX
 10238 000023D5 EB03                            JMP     SHORT RAWOSTRT
 10239                                  ROLP:
 10240 000023D7 E8D735                          CALL	SPOOLINT
 10241                                  
 10242                                  	; MSDOS 6.0
 10243                                  	;OR	word [DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10244                                  				;AN002; set control break
 10245                                  	;;invoke DSKSTATCHK
 10246                                  	;call	DSKSTATCHK	;AN002; check control break
 10247                                  
 10248                                  RAWOSTRT:
 10249 000023DA B403                            MOV     AH,3
 10250 000023DC E8A42B                          CALL    IOFUNC
 10251 000023DF 74F6                            JZ      SHORT ROLP
 10252                                  
 10253                                  	; MSDOS 6.0
 10254                                  ;SR;
 10255                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10256                                  ;the user failed. We do not send a char if this happens. We however return 
 10257                                  ;to the caller with carry clear because this DOS call does not return any
 10258                                  ;status. 
 10259                                  ;
 10260                                  	;inc	ax		;fail on I24 if ax = -1
 10261                                  	;POP	AX
 10262                                  	;jz	short nosend	;yes, do not send char
 10263                                  	;MOV	AH,2
 10264                                  	;call	IOFUNC
 10265                                  ;nosend:
 10266                                  	;CLC			; Clear carry indicating successful
 10267                                  	;retn
 10268                                  
 10269                                  	; MSDOS 3.3 & MSDOS 2.11
 10270 000023E1 58                              POP     AX
 10271 000023E2 B402                            MOV     AH,2
 10272 000023E4 E89C2B                          CALL    IOFUNC
 10273 000023E7 F8                              CLC                     ; Clear carry indicating successful
 10274                                  RET18:    
 10275 000023E8 C3                      	RETN
 10276                                  
 10277                                  ;;10/08/2018
 10278                                  ; 20/07/2018 - Retro DOS v3.0
 10279                                  ; ---------------------------------------------------------------------------
 10280                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10281                                  ; ---------------------------------------------------------------------------
 10282                                  
 10283                                  ; This routine is called at DOS init
 10284                                  
 10285                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10286                                  ;;OUTMES:
 10287                                  ;;	;LODS	CS:BYTE PTR [SI]
 10288                                  ;;	CS	LODSB
 10289                                  ;;	CMP     AL,"$" ; 24h
 10290                                  ;;	JZ	SHORT RET18
 10291                                  ;;	CALL	OUTT
 10292                                  ;;	JMP     SHORT OUTMES
 10293                                  
 10294                                  ; ---------------------------------------------------------------------------
 10295                                  
 10296                                  ; 20/07/2018 - Retro DOS v3.0
 10297                                  
 10298                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10299                                  
 10300                                  ;
 10301                                  ;----------------------------------------------------------------------------
 10302                                  ;
 10303                                  ; Inputs:
 10304                                  ;	AX=0 save the DEVCALL request packet
 10305                                  ;	  =1 restore the DEVCALL request packet
 10306                                  ; Function:
 10307                                  ;	save or restore the DEVCALL packet
 10308                                  ; Returns:
 10309                                  ;	none
 10310                                  ;
 10311                                  ;----------------------------------------------------------------------------
 10312                                  ;
 10313                                  
 10314                                  Save_Restore_Packet:
 10315 000023E9 1E                      	PUSH	DS
 10316 000023EA 06                      	PUSH	ES
 10317 000023EB 56                      	PUSH	SI
 10318 000023EC 57                      	PUSH	DI
 10319                                  
 10320                                  	; 09/09/2018
 10321 000023ED BF[A90F]                	mov	di,FAKE_STACK_2F 
 10322 000023F0 BE[2403]                	mov	si,DEVCALL
 10323                                  	;
 10324 000023F3 83F800                  	CMP	AX,0		; save packet
 10325                                  	;JZ	short save_packet
 10326 000023F6 7402                    	je	short set_seg 
 10327                                  
 10328                                  	; MSDOS 6.0
 10329                                  restore_packet:
 10330                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	 ;sourec
 10331                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	 ;destination
 10332                                  	; MSDOS 3.3
 10333                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10334                                  	;mov	di,DEVCALL  ; 09/09/2018
 10335                                  	;
 10336                                  	;JMP	short set_seg
 10337                                  	
 10338                                  	; 09/09/2018
 10339 000023F8 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10340                                  
 10341                                  	; MSDOS 6.0
 10342                                  save_packet:
 10343                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	 ;destination
 10344                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	 ;source
 10345                                  	; 09/09/2018
 10346                                  	; MSDOS 3.3
 10347                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10348                                  	;mov	si,DEVCALL ; 09/09/2018
 10349                                  
 10350                                  set_seg:
 10351                                  	; MSDOS 6.0
 10352                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 10353                                  	; MSDOS 3.3
 10354 000023FA 8CC8                    	mov	ax,cs
 10355                                  	;
 10356 000023FC 8ED8                    	MOV	DS,AX
 10357 000023FE 8EC0                    	MOV	ES,AX
 10358 00002400 B90B00                  	MOV	CX,11		; 11 words to move
 10359 00002403 F3A5                    	REP	MOVSW
 10360                                  
 10361 00002405 5F                      	POP	DI
 10362 00002406 5E                      	POP	SI
 10363 00002407 07                      	POP	ES
 10364 00002408 1F                      	POP	DS
 10365 00002409 C3                      	retn
 10366                                  
 10367                                  ;============================================================================
 10368                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10369                                  ;============================================================================
 10370                                  ; 20/07/2018 - Retro DOS v3.0
 10371                                  
 10372                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10373                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10374                                  ;hkn;	not valid. 
 10375                                  
 10376                                  ;
 10377                                  ;----------------------------------------------------------------------------
 10378                                  ;
 10379                                  ;**	$STD_CON_INPUT - System Call 1
 10380                                  ;
 10381                                  ;	Input character from console, echo
 10382                                  ;
 10383                                  ;	ENTRY	none
 10384                                  ;	EXIT	(al) = character
 10385                                  ;	USES	ALL
 10386                                  ;
 10387                                  ;----------------------------------------------------------------------------
 10388                                  ;
 10389                                  
 10390                                  _$STD_CON_INPUT:	;System call 1
 10391                                  	
 10392 0000240A E822FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10393 0000240D 50                      	PUSH	AX
 10394 0000240E E80400                  	CALL	OUTT
 10395 00002411 58                      	POP	AX
 10396                                  CON_INPUT_RETN:	
 10397 00002412 C3                      	RETN
 10398                                  
 10399                                  ;
 10400                                  ;----------------------------------------------------------------------------
 10401                                  ;
 10402                                  ;**	$STD_CON_OUTPUT - System Call 2
 10403                                  ;
 10404                                  ;	Output character to console
 10405                                  ;
 10406                                  ;	ENTRY	(dl) = character
 10407                                  ;	EXIT	none
 10408                                  ;	USES	all
 10409                                  ;
 10410                                  ;----------------------------------------------------------------------------
 10411                                  ;
 10412                                  
 10413                                  _$STD_CON_OUTPUT:	;System call 2
 10414                                  
 10415 00002413 88D0                    	MOV	AL,DL
 10416                                  
 10417                                  OUTT:
 10418 00002415 3C20                    	CMP	AL,20H ; " "
 10419 00002417 725E                    	JB	SHORT CTRLOUT
 10420 00002419 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10421 0000241B 7405                    	JZ	SHORT OUTCH
 10422                                  OUTCHA:	
 10423                                  	;INC	BYTE PTR [CARPOS]
 10424 0000241D 36FE06[C501]            	INC	BYTE [SS:CARPOS]
 10425                                  OUTCH:
 10426 00002422 1E                      	PUSH	DS
 10427 00002423 56                      	PUSH	SI
 10428                                  	;INC	BYTE PTR [CHARCO]		;invoke  statchk...
 10429                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 10430 00002424 36FE06[CC02]            	INC	BYTE [SS:CHARCO]	
 10431                                  	;AND	BYTE [SS:CHARCO],00111111B
 10432                                  	; 14/03/2018
 10433 00002429 368026[CC02]03          	and	byte [SS:CHARCO],3  ; IBMDOS.COM, MSDOS 3.3, MSDOS 2.11
 10434 0000242F 7505                    	JNZ	SHORT OUTSKIP
 10435 00002431 50                      	PUSH	AX
 10436 00002432 E89B35                  	CALL	STATCHK
 10437 00002435 58                      	POP	AX
 10438                                  OUTSKIP:
 10439 00002436 E86BFF                  	CALL	RAWOUT				;output the character
 10440 00002439 5E                      	POP	SI
 10441 0000243A 1F                      	POP	DS
 10442                                  
 10443                                  	;TEST	BYTE PTR [PFLAG],-1
 10444                                  	;retz
 10445 0000243B 36F606[CA02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 10446 00002441 74CF                    	JZ	SHORT CON_INPUT_RETN
 10447                                  
 10448 00002443 53                      	PUSH	BX
 10449 00002444 1E                      	PUSH	DS
 10450 00002445 56                      	PUSH	SI
 10451 00002446 BB0100                  	MOV	BX,1
 10452                                  	; 20/07/2018 - Retro DOS v3.0
 10453                                  	; MSDOS 3.3
 10454                                  	; MSDOS 6.0 (CPMIO2.ASM)
 10455 00002449 E8481D                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI 
 10456                                  					;hkn; to sft entry
 10457 0000244C 7226                    	JC	SHORT TRIPOPJ
 10458                                  	;mov	bx,[si+5]
 10459 0000244E 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 10460                                  	;test	bx,8000h
 10461 00002451 F7C30080                	TEST	BX,sf_isnet	; 8000H		; output to NET?
 10462 00002455 751D                    	JNZ	short TRIPOPJ 			; if so, no echo
 10463                                  	;test	bx,80h
 10464 00002457 F7C38000                	TEST	BX,devid_device ; 80H		; output to file?
 10465 0000245B 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 10466                                  	; 14/03/2018
 10467                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 10468                                  	;jc	short TRIPOPJ
 10469                                  	; MSDOS 2.11
 10470                                  	;test	byte [SI+18H], 80h
 10471                                  	;jz	short TRIPOPJ
 10472 0000245D BB0400                  	MOV	BX,4
 10473 00002460 E8311D                  	CALL	GET_IO_SFT
 10474 00002463 720F                    	JC	SHORT TRIPOPJ
 10475                                  	;test	word [si+5], 800h
 10476 00002465 F744050008              	TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H 
 10477                                  						; StdPrn redirected?
 10478                                  	;JZ	SHORT LISSTRT2J			; No, OK to echo
 10479 0000246A 0F848E00                	jz	LISSTRT2 ; 10/08/2018 
 10480                                  	;MOV	BYTE [PFLAG],0			
 10481 0000246E 36C606[CA02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 10482                                  	; MSDOS 2.11
 10483                                  	;mov	bx,4
 10484                                  	;jmp	short LISSTRT2
 10485                                  	
 10486                                  TRIPOPJ:
 10487                                  	; 20/07/2018
 10488 00002474 E98800                  	JMP	TRIPOP
 10489                                  
 10490                                  ;LISSTRT2J:
 10491                                  ;	JMP	LISSTRT2
 10492                                  
 10493                                  CTRLOUT:
 10494 00002477 3C0D                    	CMP	AL,c_CR ; 0Dh
 10495 00002479 7420                    	JZ	SHORT ZERPOS
 10496 0000247B 3C08                    	CMP	AL,c_BS ; 8
 10497 0000247D 7428                    	JZ	SHORT BACKPOS
 10498 0000247F 3C09                    	CMP	AL,c_HT ; 9
 10499 00002481 759F                    	JNZ	SHORT OUTCH
 10500                                  	;MOV	AL,[CARPOS]
 10501 00002483 36A0[C501]              	MOV	AL,[SS:CARPOS]
 10502 00002487 0CF8                    	OR	AL,0F8H
 10503 00002489 F6D8                    	NEG	AL
 10504                                  
 10505                                  TAB:
 10506 0000248B 51                      	PUSH	CX
 10507 0000248C 88C1                    	MOV	CL,AL
 10508 0000248E B500                    	MOV	CH,0
 10509 00002490 E307                    	JCXZ	POPTAB
 10510                                  TABLP:
 10511 00002492 B020                    	MOV	AL," "
 10512 00002494 E87EFF                  	CALL	OUTT
 10513 00002497 E2F9                    	LOOP	TABLP
 10514                                  POPTAB:
 10515 00002499 59                      	POP	CX
 10516 0000249A C3                      	RETN
 10517                                  
 10518                                  ZERPOS:
 10519                                  	;MOV	BYTE PTR [CARPOS],0
 10520 0000249B 36C606[C501]00          	MOV	BYTE [SS:CARPOS],0
 10521                                  	; 10/08/2018
 10522 000024A1 E97EFF                  	JMP	OUTCH
 10523                                  OUTJ:	
 10524 000024A4 E96EFF                  	JMP	OUTT
 10525                                  
 10526                                  BACKPOS:
 10527                                  	;DEC	BYTE PTR [CARPOS]
 10528 000024A7 36FE0E[C501]            	DEC	BYTE [SS:CARPOS]
 10529 000024AC E973FF                  	JMP	OUTCH
 10530                                  
 10531                                  BUFOUT:
 10532 000024AF 3C20                    	CMP	AL," "
 10533 000024B1 73F1                    	JAE	SHORT OUTJ		;Normal char
 10534 000024B3 3C09                    	CMP	AL,9
 10535 000024B5 74ED                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 10536                                  	;DOS 3.3  7/14/86
 10537 000024B7 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 10538 000024B9 740D                    	JZ	short CTRLU
 10539 000024BB 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 10540 000024BD 7409                    	JZ	short CTRLU
 10541                                  NOT_CTRLU:
 10542                                  	;DOS 3.3  7/14/86
 10543 000024BF 50                      	PUSH	AX
 10544 000024C0 B05E                    	MOV	AL,"^"
 10545 000024C2 E850FF                  	CALL	OUTT		;Print '^' before control chars
 10546 000024C5 58                      	POP	AX
 10547 000024C6 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 10548                                  CTRLU:
 10549 000024C8 E84AFF                  	CALL	OUTT
 10550                                  BUFOUT_RETN:
 10551 000024CB C3                      	RETN
 10552                                  
 10553                                  ;
 10554                                  ;----------------------------------------------------------------------------
 10555                                  ;
 10556                                  ;**	$STD_AUX_INPUT - System Call 3
 10557                                  ;
 10558                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 10559                                  ;
 10560                                  ;	ENTRY	none
 10561                                  ;	EXIT	(al) = character
 10562                                  ;	USES	all
 10563                                  ;
 10564                                  ;----------------------------------------------------------------------------
 10565                                  ;
 10566                                  
 10567                                  _$STD_AUX_INPUT:	;System call 3
 10568                                  
 10569 000024CC E80135                  	CALL	STATCHK
 10570 000024CF BB0300                  	MOV	BX,3
 10571 000024D2 E8BF1C                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 10572                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 10573                                  	;retc
 10574 000024D5 72F4                    	JC	SHORT BUFOUT_RETN
 10575 000024D7 EB03                    	JMP	SHORT TAISTRT
 10576                                  AUXILP:
 10577 000024D9 E8D534                  	CALL	SPOOLINT
 10578                                  TAISTRT:
 10579 000024DC B401                    	MOV	AH,1
 10580 000024DE E8A22A                  	CALL	IOFUNC
 10581 000024E1 74F6                    	JZ	SHORT AUXILP
 10582 000024E3 30E4                    	XOR	AH,AH
 10583 000024E5 E89B2A                  	CALL	IOFUNC
 10584 000024E8 C3                      	RETN
 10585                                  
 10586                                  ;
 10587                                  ;----------------------------------------------------------------------------
 10588                                  ;
 10589                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 10590                                  ;
 10591                                  ;	ENTRY	(dl) = character
 10592                                  ;	EXIT	none
 10593                                  ;	USES	all
 10594                                  ;
 10595                                  ;----------------------------------------------------------------------------
 10596                                  ;
 10597                                  
 10598                                  _$STD_AUX_OUTPUT:	;System call 4
 10599                                  
 10600 000024E9 53                      	PUSH	BX
 10601 000024EA BB0300                  	MOV	BX,3
 10602 000024ED EB04                    	JMP	SHORT SENDOUT
 10603                                  
 10604                                  ;
 10605                                  ;----------------------------------------------------------------------------
 10606                                  ;
 10607                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 10608                                  ;
 10609                                  ;	ENTRY	(dl) = character
 10610                                  ;	EXIT	none
 10611                                  ;	USES	all
 10612                                  ;
 10613                                  ;----------------------------------------------------------------------------
 10614                                  ;
 10615                                  
 10616                                  _$STD_PRINTER_OUTPUT:	;System call 5
 10617                                  
 10618 000024EF 53                      	PUSH	BX
 10619 000024F0 BB0400                  	MOV	BX,4
 10620                                  
 10621                                  SENDOUT:
 10622 000024F3 88D0                    	MOV	AL,DL
 10623 000024F5 50                      	PUSH	AX
 10624 000024F6 E8D734                  	CALL	STATCHK
 10625 000024F9 58                      	POP	AX
 10626 000024FA 1E                      	PUSH	DS
 10627 000024FB 56                      	PUSH	SI
 10628                                  LISSTRT2:
 10629 000024FC E8D0FE                  	CALL	RAWOUT2
 10630                                  TRIPOP:
 10631 000024FF 5E                      	POP	SI
 10632 00002500 1F                      	POP	DS
 10633 00002501 5B                      	POP	BX
 10634                                  SCIS_RETN:	; 20/07/2018
 10635 00002502 C3                      	RETN
 10636                                  ;
 10637                                  ;----------------------------------------------------------------------------
 10638                                  ;
 10639                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 10640                                  ;
 10641                                  ;	Check console input status
 10642                                  ;
 10643                                  ;	ENTRY	none
 10644                                  ;	EXIT	AL = -1 character available, = 0 no character
 10645                                  ;	USES	all
 10646                                  ;
 10647                                  ;----------------------------------------------------------------------------
 10648                                  ;
 10649                                  
 10650                                  _$STD_CON_INPUT_STATUS:		 ;System call 11
 10651                                  
 10652 00002503 E8CA34                  	CALL	STATCHK
 10653 00002506 B000                    	MOV	AL,0			; no xor!!
 10654                                  	;retz
 10655 00002508 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 10656 0000250A 0CFF                    	OR	AL,-1
 10657                                  ;SCIS_RETN:
 10658 0000250C C3                      	RETN
 10659                                  
 10660                                  ;
 10661                                  ;----------------------------------------------------------------------------
 10662                                  ;
 10663                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 10664                                  ;
 10665                                  ;	Flush console input buffer and perform call in AL
 10666                                  ;
 10667                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 10668                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 10669                                  ;		return arguments for the fcn supplied in (AL)
 10670                                  ;	USES	all
 10671                                  ;
 10672                                  ;----------------------------------------------------------------------------
 10673                                  ;
 10674                                  
 10675                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 10676                                  
 10677 0000250D 50                      	PUSH	AX
 10678 0000250E 52                      	PUSH	DX
 10679 0000250F 31DB                    	XOR	BX,BX
 10680 00002511 E8801C                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 10681                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 10682 00002514 7205                    	JC	SHORT BADJFNCON
 10683 00002516 B404                    	MOV	AH,4
 10684 00002518 E8682A                  	CALL	IOFUNC
 10685                                  
 10686                                  BADJFNCON:
 10687 0000251B 5A                      	POP	DX
 10688 0000251C 58                      	POP	AX
 10689 0000251D 88C4                    	MOV	AH,AL
 10690 0000251F 3C01                    	CMP	AL,1
 10691 00002521 7413                    	JZ	SHORT REDISPJ
 10692 00002523 3C06                    	CMP	AL,6
 10693 00002525 740F                    	JZ	SHORT REDISPJ
 10694 00002527 3C07                    	CMP	AL,7
 10695 00002529 740B                    	JZ	SHORT REDISPJ
 10696 0000252B 3C08                    	CMP	AL,8
 10697 0000252D 7407                    	JZ	SHORT REDISPJ
 10698 0000252F 3C0A                    	CMP	AL,10
 10699 00002531 7403                    	JZ	SHORT REDISPJ
 10700 00002533 B000                    	MOV	AL,0
 10701 00002535 C3                      	RETN
 10702                                  
 10703                                  REDISPJ:
 10704 00002536 FA                      	CLI
 10705                                  	;transfer REDISP
 10706 00002537 E949F0                  	JMP	REDISP
 10707                                  
 10708                                  ;============================================================================
 10709                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 10710                                  ;============================================================================
 10711                                  ; 20/07/2018 - Retro DOS v3.0
 10712                                  ; 17/05/2019 - Retro DOS v4.0
 10713                                  ; 24/07/2019 - Retro DOS v3.2
 10714                                  
 10715                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 10716                                  ;
 10717                                  ;	$GET_FCB_POSITION
 10718                                  ;	$FCB_DELETE
 10719                                  ;	$GET_FCB_FILE_LENGTH
 10720                                  ;	$FCB_CLOSE
 10721                                  ;	$FCB_RENAME
 10722                                  ;	SaveFCBInfo
 10723                                  ;	ResetLRU
 10724                                  ;	SetOpenAge
 10725                                  ;	LRUFCB
 10726                                  ;	FCBRegen
 10727                                  ;	BlastSFT
 10728                                  ;	CheckFCB
 10729                                  ;	SFTFromFCB
 10730                                  ;	FCBHardErr
 10731                                  ;
 10732                                  ;	Revision history:
 10733                                  ;
 10734                                  ;		Created: ARR 4 April 1983"
 10735                                  ;			 MZ  6 June  1983 completion of functions
 10736                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 10737                                  ;					  times.  Change so successive closes work by
 10738                                  ;					  always returning OK.	Also, detect I/O to
 10739                                  ;					  already closed FCB and return EOF.
 10740                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 10741                                  ;					  out of sft into FCB for reconnection
 10742                                  ;
 10743                                  ;		A000	 version 4.00  Jan. 1988
 10744                                  
 10745                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 10746                                  ;----------------------------------------------------------------------------
 10747                                  ;
 10748                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 10749                                  ;	extent and next record field and set the random record field to point
 10750                                  ;	to that record
 10751                                  ;
 10752                                  ;   Inputs:	DS:DX point to a possible extended FCB
 10753                                  ;   Outputs:	The random record field of the FCB is set to the current record
 10754                                  ;   Registers modified: all
 10755                                  ;
 10756                                  ;----------------------------------------------------------------------------
 10757                                  ;
 10758                                  
 10759                                  _$GET_FCB_POSITION:
 10760 0000253A E8F104                  	call	GetExtended		; point to FCB
 10761 0000253D E8C104                  	call	GetExtent		; DX:AX is current record
 10762                                  	;mov	[si+21h],ax
 10763 00002540 894421                  	MOV	[SI+SYS_FCB.RR],AX ; drop in low order piece
 10764                                  	;mov	[si+23h],dl
 10765 00002543 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 10766                                  	;cmp	word [si+0Eh],64
 10767 00002546 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 10768 0000254A 7303                    	JAE	short GetFCBBye
 10769                                  	;mov	[si+24h],dh
 10770 0000254C 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 10771                                  GetFCBBye:
 10772 0000254F E965F2                  	jmp	FCB_RET_OK
 10773                                  
 10774                                  
 10775                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 10776                                  ;----------------------------------------------------------------------------
 10777                                  ;
 10778                                  ;**	$FCB_Delete - Delete from FCB Template
 10779                                  ;
 10780                                  ;	given an FCB, remove all directory entries in the current
 10781                                  ;	directory that have names that match the FCB's ?  marks.
 10782                                  ;
 10783                                  ;	ENTRY	(DS:DX) = address of FCB
 10784                                  ;	EXIT	entries matching the FCB are deleted
 10785                                  ;		(al) = ff iff no entries were deleted
 10786                                  ;	USES	all
 10787                                  ;
 10788                                  ;----------------------------------------------------------------------------
 10789                                  ;
 10790                                  
 10791                                  _$FCB_DELETE:		; System call 19
 10792                                  					; OpenBuf is in DOSDATA
 10793 00002552 BF[8203]                	MOV	DI,OPENBUF 		; appropriate place 
 10794                                  
 10795 00002555 E8D447                  	call	TransFCB		; convert FCB to path
 10796 00002558 720A                    	JC	short BadPath 		; signal no deletions
 10797                                  
 10798 0000255A 16                      	push	SS
 10799 0000255B 1F                      	pop	DS			; SS is DOSDATA
 10800                                  
 10801 0000255C E87E0D                  	call	DOS_DELETE		; wham
 10802 0000255F 7203                    	JC	short BadPath
 10803                                  GoodPath:
 10804 00002561 E953F2                  	jmp	FCB_RET_OK		; do a good return
 10805                                  BadPath:
 10806                                  	; Error code is in AX
 10807                                  
 10808 00002564 E953F2                  	jmp	FCB_RET_ERR		; let someone else signal the error
 10809                                  
 10810                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 10811                                  ;----------------------------------------------------------------------------
 10812                                  ;
 10813                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 10814                                  ;	file in records (rounded up if partial).
 10815                                  ;
 10816                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 10817                                  ;   Outputs:	Random record field updated to reflect the number of records
 10818                                  ;   Registers modified: all
 10819                                  ;
 10820                                  ;----------------------------------------------------------------------------
 10821                                  ;
 10822                                  
 10823                                  _$GET_FCB_FILE_LENGTH:
 10824 00002567 E8C404                  	call	GetExtended		; get real FCB pointer
 10825                                  					; DX points to Input FCB
 10826                                  
 10827                                  					; OpenBuf is in DOSDATA
 10828 0000256A BF[8203]                	MOV	DI,OPENBUF		; appropriate buffer
 10829                                  
 10830 0000256D 1E                      	push	ds			; save pointer to true FCB
 10831 0000256E 56                      	push	si
 10832 0000256F E8BA47                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 10833 00002572 5E                      	pop	si
 10834 00002573 1F                      	pop	ds
 10835 00002574 72EE                    	JC	short BadPath
 10836 00002576 1E                      	push	ds			; save pointer
 10837 00002577 56                      	push	si
 10838 00002578 16                      	push	ss		
 10839 00002579 1F                      	pop	ds
 10840 0000257A E8E310                  	call	GET_FILE_INFO		; grab the info
 10841 0000257D 5E                      	pop	si			; get pointer back
 10842 0000257E 1F                      	pop	ds
 10843 0000257F 72E3                    	JC	short BadPath 		; invalid something
 10844 00002581 89DA                    	MOV	DX,BX			; get high order size
 10845 00002583 89F8                    	MOV	AX,DI			; get low order size
 10846                                  	;mov	bx,[si+0Eh]
 10847 00002585 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 10848 00002588 09DB                    	OR	BX,BX			; empty record => 0 size for file
 10849 0000258A 7503                    	JNZ	short GetSize 		; not empty
 10850 0000258C BB8000                  	MOV	BX,128
 10851                                  GetSize:
 10852 0000258F 89C7                    	MOV	DI,AX			; save low order word
 10853 00002591 89D0                    	MOV	AX,DX			; move high order for divide
 10854 00002593 31D2                    	XOR	DX,DX			; clear out high
 10855 00002595 F7F3                    	DIV	BX			; wham
 10856 00002597 50                      	PUSH	AX			; save dividend
 10857 00002598 89F8                    	MOV	AX,DI			; get low order piece
 10858 0000259A F7F3                    	DIV	BX			; wham
 10859 0000259C 89D1                    	MOV	CX,DX			; save remainder
 10860 0000259E 5A                      	POP	DX			; get high order dividend
 10861 0000259F E306                    	JCXZ	LengthStore		; no roundup
 10862 000025A1 83C001                  	ADD	AX,1
 10863 000025A4 83D200                  	ADC	DX,0			; 32-bit increment
 10864                                  LengthStore:
 10865                                  	;mov	[si+21h],ax
 10866 000025A7 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 10867                                  	;mov	[si+23h],dl
 10868 000025AA 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 10869 000025AD 08F6                    	OR	DH,DH
 10870 000025AF 74B0                    	JZ	short GoodPath		; not storing insignificant zero
 10871                                  	;mov	[si+24h],dh
 10872 000025B1 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 10873                                  GoodRet:
 10874                                  	;jmp	FCB_RET_OK
 10875 000025B4 EBAB                    	jmp	short GoodPath
 10876                                  
 10877                                  ;Break <$FCB_Close - close a file>
 10878                                  ;----------------------------------------------------------------------------
 10879                                  ;
 10880                                  ;   $FCB_Close - given an FCB, look up the SFN and close it.  Do not free it
 10881                                  ;	as the FCB may be used for further I/O
 10882                                  ;
 10883                                  ;   Inputs:	DS:DX point to FCB
 10884                                  ;   Outputs:	AL = FF if file was not found on disk
 10885                                  ;   Registers modified: all
 10886                                  ;
 10887                                  ;----------------------------------------------------------------------------
 10888                                  ;
 10889                                  
 10890                                  _$FCB_CLOSE:		; System call 16
 10891                                  
 10892 000025B6 30C0                    	XOR	AL,AL			; default search attributes
 10893 000025B8 E87304                  	call	GetExtended		; DS:SI point to real FCB
 10894 000025BB 7403                    	JZ	short NoAttr		; not extended
 10895 000025BD 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 10896                                  NoAttr:
 10897                                  					; SS override
 10898 000025C0 36A2[2805]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 10899 000025C4 E8DC03                  	call	SFTFromFCB
 10900 000025C7 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 10901                                  
 10902                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 10903                                  	; there is no need to set the SFT's attribute.
 10904                                  
 10905                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 10906                                  	;;; done
 10907                                  
 10908                                  	;mov	al,[es:di+4]
 10909 000025C9 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 10910 000025CD 30E4                    	XOR	AH,AH
 10911 000025CF 50                      	PUSH	AX
 10912                                  
 10913                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 10914                                  	;;; done
 10915                                  
 10916 000025D0 E89150                  	call	CheckShare
 10917 000025D3 7508                    	JNZ	short NoStash
 10918 000025D5 36A0[2805]              	MOV	AL,[SS:ATTRIB]
 10919                                  	;mov	[es:di+4],al
 10920 000025D9 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 10921                                  NoStash:
 10922                                  	;mov	ax,[si+14h]
 10923 000025DD 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 10924                                  	;mov	[es:di+0Fh],ax
 10925 000025E0 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 10926                                  	;mov	ax,[si+16h]
 10927 000025E4 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 10928                                  	;mov	[es:di+0Dh],ax
 10929 000025E7 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 10930                                  	;mov	ax,[si+10h]
 10931 000025EB 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 10932                                  	;mov	[es:di+11h],ax
 10933 000025EE 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 10934                                  	;mov	ax,[si+12h]
 10935 000025F2 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 10936                                  	;mov	[es:di+13h],ax
 10937 000025F5 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 10938                                  	;or	word [es:di+5],4000h
 10939 000025F9 26814D050040            	OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 10940 000025FF 16                      	push	ss
 10941 00002600 1F                      	pop	ds
 10942 00002601 E82B15                  	call	DOS_CLOSE	; wham
 10943 00002604 C43E[5A05]              	LES	DI,[THISSFT]
 10944                                  
 10945                                  	;;; 9/8/86 F.C. restore SFT attribute
 10946 00002608 59                      	POP	CX
 10947                                  	;mov	[es:di+4],cl
 10948 00002609 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 10949                                  	;;; 9/8/86 F.C. restore SFT attribute
 10950                                  
 10951 0000260D 9C                      	PUSHF
 10952                                  	;test	word [es:di],0FFFFh
 10953                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 10954                                  				; zero ref count gets blasted
 10955 0000260E 26833D00                	cmp	word [ES:DI],0
 10956 00002612 7507                    	jnz     short CloseOK
 10957 00002614 50                      	PUSH	AX
 10958 00002615 B04D                    	MOV	AL,'M'
 10959 00002617 E8F602                  	call	BlastSFT
 10960 0000261A 58                      	POP	AX
 10961                                  CloseOK:
 10962 0000261B 9D                      	POPF
 10963 0000261C 7396                    	JNC	short GoodRet
 10964                                  	;cmp	al,6
 10965 0000261E 3C06                    	CMP	AL,error_invalid_handle
 10966 00002620 7492                    	JZ	short GoodRet
 10967                                  	;mov	al,2
 10968 00002622 B002                    	MOV	AL,error_file_not_found
 10969                                  fcb_close_err:
 10970 00002624 E993F1                  	jmp	FCB_RET_ERR
 10971                                  
 10972                                  ;
 10973                                  ;----------------------------------------------------------------------------
 10974                                  ;
 10975                                  ;**	$FCB_Rename - Rename a File
 10976                                  ;
 10977                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 10978                                  ;	multiple files copying from the meta characters.
 10979                                  ;
 10980                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 10981                                  ;		    name of the files to be renamed. Starting at offset 11h
 10982                                  ;		    in the FCB is the destination name.
 10983                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 10984                                  ;		AL = FF -> some files may have been renamed but:
 10985                                  ;			rename to existing file or source file not found
 10986                                  ;	USES	ALL
 10987                                  ;
 10988                                  ;----------------------------------------------------------------------------
 10989                                  ;
 10990                                  
 10991                                  _$FCB_RENAME:		; System call 23
 10992                                  
 10993 00002627 E80404                  	call	GetExtended		; get pointer to real FCB
 10994 0000262A 52                      	push	dx
 10995 0000262B 8A04                    	MOV	AL,[SI] 		; get drive byte
 10996 0000262D 83C610                  	ADD	SI,10h			; point to destination
 10997                                  
 10998                                  					; RenBuf is in DOSDATA
 10999 00002630 BF[0204]                	MOV	DI,RENBUF		; point to destination buffer
 11000 00002633 FF34                    	push	word [SI]
 11001 00002635 1E                      	push	ds
 11002                                  	;push	di			; save source pointer for TransFCB
 11003                                  	; 16/01/2024 - BugFix !
 11004 00002636 56                      	push	si
 11005 00002637 8804                    	MOV	[SI],AL			; drop in real drive
 11006 00002639 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11007 0000263B E8EE46                  	call	TransFCB		; munch this pathname
 11008 0000263E 5E                      	pop	si
 11009 0000263F 1F                      	pop	ds	
 11010 00002640 8F04                    	pop	WORD [SI]		; get path back
 11011 00002642 5A                      	pop	dx			; Original FCB pointer
 11012 00002643 721A                    	JC	short fren90		; bad path -> error
 11013                                  
 11014                                  					; SS override for WFP_Start & Ren_WFP
 11015 00002645 368B36[6E05]            	MOV	SI,[ss:WFP_START]	; get pointer
 11016 0000264A 368936[7005]            	MOV	[ss:REN_WFP],SI		; stash it
 11017                                  
 11018                                  					; OpenBuf is in DOSDATA
 11019 0000264F BF[8203]                	MOV	DI,OPENBUF		; appropriate spot
 11020 00002652 E8D746                  	call	TransFCB		; wham
 11021                                  					; NOTE that this call is pointing
 11022                                  					;  back to the ORIGINAL FCB so
 11023                                  					;  SATTRIB gets set correctly
 11024 00002655 7208                    	JC	short fren90		; error
 11025 00002657 E82E0E                  	call	DOS_RENAME
 11026 0000265A 7203                    	JC	short fren90
 11027 0000265C E958F1                  	jmp	FCB_RET_OK
 11028                                  
 11029                                  ;	Error -
 11030                                  ;
 11031                                  ;	(al) = error code
 11032                                  
 11033                                  fren90:	
 11034 0000265F E958F1                  	jmp	FCB_RET_ERR
 11035                                  
 11036                                  ;Break <Misbehavior fixers>
 11037                                  ;
 11038                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11039                                  ;   user's space so he may move them at will. Second, they have a small
 11040                                  ;   reserved area that may be used for system information. Third, there was
 11041                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11042                                  ;   usage.
 11043                                  ;
 11044                                  ;   This results in the following misbehavior:
 11045                                  ;
 11046                                  ;	infinite opens of the same file:
 11047                                  ;
 11048                                  ;	While (TRUE) {			While (TRUE) {
 11049                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11050                                  ;	    Read (FCB); 		    Write (FCB);
 11051                                  ;	    }				    }
 11052                                  ;
 11053                                  ;	infinite opens of different files:
 11054                                  ;
 11055                                  ;	While (TRUE) {			While (TRUE) {
 11056                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11057                                  ;	    Read (FCB); 		    Write (FCB);
 11058                                  ;	    }				    }
 11059                                  ;
 11060                                  ;	multiple closes of the same file:
 11061                                  ;
 11062                                  ;	FCBOpen (FCB);
 11063                                  ;	while (TRUE)
 11064                                  ;	    FCBClose (FCB);
 11065                                  ;
 11066                                  ;	I/O after closing file:
 11067                                  ;
 11068                                  ;	FCBOpen (FCB);
 11069                                  ;	while (TRUE) {
 11070                                  ;	    FCBWrite (FCB);
 11071                                  ;	    FCBClose (FCB);
 11072                                  ;	    }
 11073                                  ;
 11074                                  ;   The following is am implementation of a methodology for emulating the
 11075                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11076                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11077                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11078                                  ;   the local machine.
 11079                                  ;
 11080                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11081                                  ;   structures depending on the file itself and the state of operations of the
 11082                                  ;   OS. The information contained in this reserved field is enough to
 11083                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11084                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11085                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11086                                  ;
 11087                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11088                                  ;
 11089                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11090                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11091                                  ;   regenerated.
 11092                                  ;
 11093                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11094                                  ;   longer available. We can make up for this by using the following
 11095                                  ;   information:
 11096                                  ;
 11097                                  ;	The Drive number (from the DPB).
 11098                                  ;	The physical sector of the directory that contains the entry.
 11099                                  ;	The relative position of the entry in the sector.
 11100                                  ;	The first cluster field.
 11101                                  ;	The last used SFT.
 11102                                  ;      OR In the case of a device FCB
 11103                                  ;	The low 6 bits of sf_flags (indicating device type)
 11104                                  ;	The pointer to the device header
 11105                                  ;
 11106                                  ;   We read in the particular directory sector and examine the indicated
 11107                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11108                                  ;
 11109                                  ;   Some key items need to be remembered:
 11110                                  ;
 11111                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11112                                  ;	information. We enforce good behavior on the FCBs.
 11113                                  ;
 11114                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11115                                  ;	open VCs. The VCs may be closed only at process termination.
 11116                                  ;
 11117                                  ;	If this is not an installed version of the DOS, file sharing will
 11118                                  ;	always be present.
 11119                                  ;
 11120                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11121                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11122                                  ;
 11123                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11124                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11125                                  ;	proper OI record.
 11126                                  ;
 11127                                  ;   The test bits are:
 11128                                  ;
 11129                                  ;	00 -> local file
 11130                                  ;	40 -> sharing local
 11131                                  ;	80 -> network
 11132                                  ;	C0 -> local device
 11133                                  
 11134                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11135                                  ;----------------------------------------------------------------------------
 11136                                  ;
 11137                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11138                                  ;	pieces of information into the FCB to allow for subsequent
 11139                                  ;	regeneration. Poke LRU also.
 11140                                  ;
 11141                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11142                                  ;		DS:SI point to the FCB (not an extended one)
 11143                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11144                                  ;		DS:SI preserved
 11145                                  ;		ES:DI point to sft
 11146                                  ;   Registers modified: All
 11147                                  ;
 11148                                  ;
 11149                                  ;----------------------------------------------------------------------------
 11150                                  ;
 11151                                  
 11152                                  SaveFCBInfo:
 11153                                  
 11154 00002662 36C43E[5A05]            	LES	DI,[SS:THISSFT]		; SS override
 11155 00002667 E81CFA                  	call	IsSFTNet
 11156 0000266A 740B                    	JZ	short SaveLocal		; if not network then save local info
 11157                                  ;
 11158                                  ;----- In net support -----
 11159                                  ;
 11160                                  	; 17/05/2019 - Retro DOS v4.0
 11161                                  	; 24/07/2019 - Retro DOS v3.2
 11162                                  
 11163                                  	; MSDOS 3.3
 11164                                  	;;mov	ax,[es:di+1Dh]
 11165                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 11166                                  	;;mov	[si+1Ah],ax
 11167                                  	;mov	[si+fcb_net_handle],ax
 11168                                  	;push	es
 11169                                  	;push	di
 11170                                  	;;les	di,[es:di+19h]
 11171                                  	;LES	DI,[ES:DI+sf_netid]
 11172                                  	;;mov	[si+1Ch],di
 11173                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 11174                                  	;;mov 	[si+1Eh],es
 11175                                  	;MOV	[SI+fcb_netID+2],ES
 11176                                  	;pop	di
 11177                                  	;pop	es
 11178                                  
 11179                                  	; MSDOS 6.0
 11180                                  	;mov	ax,[es:di+0Bh]
 11181 0000266C 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 11182                                  	;mov	[si+1Ch],ax
 11183 00002670 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 11184                                  	
 11185                                  	;mov	bl,80h
 11186 00002673 B380                    	MOV	BL,FCBNETWORK
 11187                                  ;
 11188                                  ;----- END In net support -----
 11189                                  ;
 11190 00002675 EB65                    	jmp	SHORT SaveSFN
 11191                                  
 11192                                  SaveLocal:
 11193                                  	;IF	Installed
 11194 00002677 E8EA4F                  	call	CheckShare
 11195                                  	;JZ	short SaveNoShare	; no sharer
 11196                                  	;JMP	short SaveShare		; sharer present
 11197                                  	; 28/07/2019
 11198 0000267A 755B                    	jnz	short SaveShare
 11199                                  
 11200                                  SaveNoShare:
 11201                                  	;;test 	word [es:di+5],80h
 11202                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 11203 0000267C 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 11204 00002681 7542                    	JNZ	short SaveNoShareDev	; Device
 11205                                  
 11206                                  	; Save no sharing local file information
 11207                                  
 11208                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 11209                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 11210 00002683 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11211                                  	;mov	[si+1Dh],ax
 11212 00002687 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11213                                  
 11214                                  	; MSDOS 6.0
 11215                                  
 11216                                  	;SR; Store high byte of directory sector
 11217                                  	;mov	ax,[es:di+1Dh]
 11218 0000268A 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11219                                  	
 11220                                  	; SR;
 11221                                  	; We have to store the read-only and archive attributes of the file.
 11222                                  	; We extract it from the SFT and store it in the top two bits of the 
 11223                                  	; sector number ( sector number == 22 bits only )
 11224                                  
 11225                                  	;mov	bl,[es:di+4]
 11226 0000268E 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 11227 00002692 88DF                    	mov	bh,bl
 11228 00002694 D0CB                    	ror	bl,1
 11229 00002696 D0E7                    	shl	bh,1
 11230 00002698 08FB                    	or	bl,bh
 11231 0000269A 80E3C0                  	and	bl,0C0h
 11232 0000269D 08D8                    	or	al,bl
 11233 0000269F 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 11234                                  
 11235                                  	; MSDOS 6.0 (& MSDOS 3.3)
 11236                                  	;mov	al,[es:di+1Fh]
 11237 000026A2 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11238                                  	;mov	[si+1Fh],al
 11239 000026A6 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11240                                  	;mov	ax,[es:di+0Bh]
 11241 000026A9 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11242                                  	;mov	[si+1Bh],ax
 11243 000026AD 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11244 000026B0 B300                    	MOV	BL,0
 11245                                  
 11246                                  	; Create the bits field from the dirty/device bits of the flags word 
 11247                                  	; and the mode byte
 11248                                  
 11249                                  SetFCBBits:
 11250                                  	;mov	ax,[es:di+5]
 11251 000026B2 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11252 000026B6 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11253                                  	;or	al,[es:di+2]
 11254 000026B8 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11255                                  	;mov	[si+1Ah], al
 11256 000026BC 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11257                                  
 11258                                  	; MSDOS 6.0
 11259                                  	
 11260                                  	; SR;
 11261                                  	; Check if we came here for local file or device. If for local file, 
 11262                                  	; skip setting of SFT index
 11263                                  	
 11264 000026BF 08DB                    	or	bl,bl
 11265 000026C1 742A                    	jz	short SaveNoSFN		; do not save SFN if local file
 11266                                  
 11267 000026C3 EB17                    	JMP	short SaveSFN 		; go and save SFN
 11268                                  
 11269                                  	; Save no sharing local device information
 11270                                  
 11271                                  SaveNoShareDev:
 11272                                  	;mov	ax,[es:di+7]
 11273 000026C5 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11274                                  	;mov	[si+1Ah],ax
 11275 000026C9 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11276                                  	;mov	ax,[es:di+9]
 11277 000026CC 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11278 000026D0 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11279                                  	;mov	bl,40h
 11280 000026D3 B340                    	MOV	BL,FCBDEVICE
 11281 000026D5 EBDB                    	JMP	SetFCBBits		; go and save SFN
 11282                                  
 11283                                  SaveShare:
 11284                                  	;ENDIF
 11285                                  ;
 11286                                  ;----- In share support -----
 11287                                  ;
 11288                                  	;call	far [ss:ShSave]
 11289 000026D7 36FF1E[8400]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11290                                  ;
 11291                                  ;----- end in share support -----
 11292                                  ;
 11293                                  	; 17/05/2019 - Retro DOS v4.0
 11294                                  SaveSFN:
 11295                                  	; 24/07/2019 - Retro DOS v3.2
 11296                                  	;lea	ax,[di-6]
 11297 000026DC 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11298                                  	
 11299                                  	; Adjust for offset to table.
 11300                                  	
 11301 000026DF 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11302                                  
 11303 000026E4 53                      	push	bx			;bx = FCB type (net/Share or local)
 11304                                  	;;mov	bl,53 ; MSDOS 3.3
 11305                                  	;mov	bl,59 ; MSDOS 6.0
 11306 000026E5 B33B                    	MOV	BL,SF_ENTRY.size
 11307 000026E7 F6F3                    	DIV	BL
 11308                                  	;mov	[si+18h],al
 11309 000026E9 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11310 000026EC 5B                      	pop	bx			;restore bx
 11311                                  
 11312                                  SaveNoSFN:
 11313                                  	;mov	ax,[es:di+5]
 11314 000026ED 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11315 000026F1 243F                    	AND	AL,3Fh			; get real drive
 11316 000026F3 08D8                    	OR	AL,BL
 11317                                  	;mov	[si+19h],al
 11318 000026F5 884419                  	MOV	[SI+fcb_l_drive],AL
 11319                                  
 11320 000026F8 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11321 000026FC 40                      	INC	AX
 11322                                  	;mov	[es:di+15h],ax
 11323 000026FD 26894515                	MOV	[ES:DI+sf_LRU],AX
 11324 00002701 7506                    	JNZ	short SimpleStuff
 11325                                  	
 11326                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 11327                                  	; LRU < 8000H get set to 0. Others -= 8000h.  This LRU = 8000h
 11328                                  	
 11329                                  	;mov	bx,15h
 11330 00002703 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11331 00002706 E80500                  	call	ResetLRU
 11332                                  
 11333                                  	; Set new LRU to AX
 11334                                  SimpleStuff:
 11335 00002709 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11336 0000270D C3                      	retn
 11337                                  
 11338                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11339                                  ;----------------------------------------------------------------------------
 11340                                  ;
 11341                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 11342                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11343                                  ;   at 0.
 11344                                  ;
 11345                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11346                                  ;		ES:DI point to SFT currently being updated
 11347                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11348                                  ;		AX has 8000h
 11349                                  ;   Registers modified: none
 11350                                  ;
 11351                                  ;----------------------------------------------------------------------------
 11352                                  ;
 11353                                  	; 24/07/2019 - Retro DOS v3.2
 11354                                  ResetLRU:
 11355                                  
 11356                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11357                                  	; DOSDATA
 11358                                  
 11359 0000270E B80080                  	MOV	AX,8000h
 11360 00002711 06                      	push	es
 11361 00002712 57                      	push	di
 11362 00002713 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		; get pointer to head
 11363                                  	;LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 11364                                  	;mov	cx,[es:di+4]
 11365 00002718 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11366                                  	;lea	di,[di+6]
 11367 0000271C 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 11368                                  ovScan:
 11369 0000271F 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 11370 00002722 7703                    	JA	short ovLoop
 11371 00002724 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 11372                                  ovLoop:
 11373                                  	;;add	di,53	; MSDOS 3.3
 11374                                  	;add	di,59	; MSDOS 6.0
 11375 00002727 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 11376 0000272A E2F3                    	LOOP	ovScan
 11377 0000272C 5F                      	pop	di
 11378 0000272D 07                      	pop	es
 11379 0000272E 268901                  	MOV	[ES:DI+BX],AX
 11380 00002731 C3                      	retn
 11381                                  
 11382                                  ; 24/07/2019 - Retro DOS v3.2
 11383                                  
 11384                                  ;IF  0  ; We dont need this routine any more.
 11385                                  ;
 11386                                  ;Break	<SetOpenAge - update the open age of a SFT>
 11387                                  ;----------------------------------------------------------------------------
 11388                                  ;
 11389                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 11390                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 11391                                  ;   count here and fill in the appropriate field.
 11392                                  ;
 11393                                  ;   Inputs:	ES:DI point to SFT
 11394                                  ;   Outputs:	ES:DI has the open age field filled in.
 11395                                  ;		If open age has wraparound, we will have subtracted 8000h
 11396                                  ;		    from all open ages.
 11397                                  ;   Registers modified: AX
 11398                                  ;
 11399                                  ;----------------------------------------------------------------------------
 11400                                  ;
 11401                                  ;SetOpenAge:
 11402                                  ;	; 20/07/2018 - Retro DOS v3.0
 11403                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 11404                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 11405                                  ;
 11406                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 11407                                  ;
 11408                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 11409                                  ;	INC	AX
 11410                                  ;	;mov	[es:di+17h],ax
 11411                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 11412                                  ;	JNZ	short SetDone
 11413                                  ;	;mov	bx,17h
 11414                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 11415                                  ;	call	ResetLRU
 11416                                  ;SetDone:
 11417                                  ;	MOV	[CS:OpenLRU],AX
 11418                                  ;	retn
 11419                                  ;
 11420                                  ;ENDIF	; SetOpenAge no longer needed
 11421                                  
 11422                                  ; 24/07/2019 - Retro DOS v3.2
 11423                                  
 11424                                  ; LRUFCB for MSDOS 6.0 !
 11425                                  
 11426                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 11427                                  ;----------------------------------------------------------------------------
 11428                                  ;
 11429                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 11430                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 11431                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 11432                                  ;
 11433                                  ;   Inputs:	none
 11434                                  ;   Outputs:	ES:DI point to SFT
 11435                                  ;		ThisSFT points to SFT
 11436                                  ;		SFT is zeroed
 11437                                  ;		Carry set of closes failed
 11438                                  ;   Registers modified: none
 11439                                  ;
 11440                                  ;----------------------------------------------------------------------------
 11441                                  ;
 11442                                  ; MSDOS 6.0
 11443                                  ;IF 0	; rewritten this routine
 11444                                  ;
 11445                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 11446                                  ;	call	save_world
 11447                                  ;	
 11448                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 11449                                  ; to find the lease recently used one that is younger than the open age.  We
 11450                                  ; operate be scanning the list n times finding the least age that is greater
 11451                                  ; or equal to the previous minimum age.
 11452                                  ;
 11453                                  ;   BP is the count of times we need to go through this loop.
 11454                                  ;   AX is the current acceptable minimum age to consider
 11455                                  ;
 11456                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 11457                                  ;	XOR	AX,AX			; low = 0;
 11458                                  ;
 11459                                  ; If we've scanned the table n times, then we are done.
 11460                                  ;
 11461                                  ;lru1:
 11462                                  ;	CMP	bp,0			; while (k--) {
 11463                                  ;	JZ	short lru75
 11464                                  ;	DEC	bp
 11465                                  ;
 11466                                  ; Set up for scan.
 11467                                  ;
 11468                                  ;   AX is the minimum age for consideration
 11469                                  ;   BX is the minimum age found during the scan
 11470                                  ;   SI is the position of the entry that corresponds to BX
 11471                                  ;
 11472                                  ;	MOV	BX,-1			;     min = 0xffff;
 11473                                  ;	MOV	si,BX			;     pos = 0xffff;
 11474                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 11475                                  ;	;mov	cx,[es:di+4]
 11476                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 11477                                  ;	;lea	di,[di+6]
 11478                                  ;	LEA	DI,[DI+SFT.SFTable]
 11479                                  ;
 11480                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 11481                                  ; current entry is busy (indicating a previous aborted allocation), then we
 11482                                  ; are done.  In both cases, we use the found entry.
 11483                                  ;
 11484                                  ;lru2:
 11485                                  ;	cmp	word [es:di],0
 11486                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 11487                                  ;	jz	short lru25
 11488                                  ;	;cmp	word [es:di],-1
 11489                                  ;	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 11490                                  ;	cmp	word [es:di],sf_busy
 11491                                  ;	jnz	short lru3
 11492                                  ;
 11493                                  ; The entry is usable without further scan.  Go and use it.
 11494                                  ;
 11495                                  ;lru25:
 11496                                  ;	MOV	si,DI			;	      pos = i;
 11497                                  ;	JMP	short lru11		;	      goto got;
 11498                                  ;
 11499                                  ; See if the entry is for the network or for the sharer.
 11500                                  ;
 11501                                  ;  If for the sharer or network then
 11502                                  ;	if the age < current minimum AND >= allowed minimum then
 11503                                  ;	    this entry becomes current minimum
 11504                                  ;
 11505                                  ;lru3:
 11506                                  ;	;test	word [es:di+5],8000h
 11507                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 11508                                  ;					;	  if (!net[i]
 11509                                  ;	JNZ	short lru35
 11510                                  ;if installed
 11511                                  ;	call	CheckShare		;		&& !sharing)
 11512                                  ;	JZ	short lru5		;	  else
 11513                                  ;ENDIF
 11514                                  ;
 11515                                  ; This SFT is for the net or is for the sharer. See if it less than the
 11516                                  ; current minimum.
 11517                                  ;
 11518                                  ;lru35:
 11519                                  ;	;mov	dx,[es:di+17h]
 11520                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 11521                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 11522                                  ;	JB	short lru5
 11523                                  ;	CMP	DX,BX
 11524                                  ;	JAE	short lru5		;	      age[i] < min) {
 11525                                  ;
 11526                                  ; entry is new minimum.  Remember his age.
 11527                                  ;
 11528                                  ;	mov	bx,DX			;	      min = age[i];
 11529                                  ;	mov	si,di			;	      pos = i;
 11530                                  ;
 11531                                  ; End of loop.	gp back for more
 11532                                  ;
 11533                                  ;lru5:
 11534                                  ;	;add	di,53
 11535                                  ;	add	di,SF_ENTRY.size
 11536                                  ;	loop	lru2			;	      }
 11537                                  ;
 11538                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 11539                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 11540                                  ; complete.  Go find LRU.
 11541                                  ;
 11542                                  ;lru6:	
 11543                                  ;	cmp	si,-1			; position not -1?
 11544                                  ;	jz	short lru75		; no, done with everything
 11545                                  ;	lea	ax,[bx+1]		; set new threshold age
 11546                                  ;	jmp	short lru1		; go and loop for more
 11547                                  ;lru65:	
 11548                                  ;	stc
 11549                                  ;	jmp	short LRUDead		;	  return -1;
 11550                                  ;
 11551                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 11552                                  ; network entry. We now make a second pass through to find the LRU entry
 11553                                  ; that is local-no-share or has age >= AX
 11554                                  ;
 11555                                  ;lru75:
 11556                                  ;	mov	bx,-1			; min = 0xffff;
 11557                                  ;	mov	si,bx			; pos = 0xffff;
 11558                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 11559                                  ;	;mov	cx,[es:di+4]
 11560                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 11561                                  ;	;lea	di,[di+6]
 11562                                  ;	LEA	DI,[DI+SFT.SFTable]
 11563                                  ;
 11564                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 11565                                  ; then check for lru.
 11566                                  ;
 11567                                  ;lru8:
 11568                                  ;	;test	word [es:di+5],8000h
 11569                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 11570                                  ;	jnz	short lru85		; is for network, go check age
 11571                                  ;	call	CheckShare		; sharer here?
 11572                                  ;	jz	short lru86		; no, go check lru
 11573                                  ;
 11574                                  ; Network or sharer.  Check age
 11575                                  ;
 11576                                  ;lru85:
 11577                                  ;	;cmp	[es:di+17h],ax
 11578                                  ;	cmp	[es:di+sf_OpenAge],ax
 11579                                  ;	jb	short lru9		; age is before threshold, skip it
 11580                                  ;
 11581                                  ; Check LRU
 11582                                  ;
 11583                                  ;lru86:
 11584                                  ;	;cmp	[es:di+15h],bx
 11585                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 11586                                  ;	jae	short lru9		; no, skip this
 11587                                  ;	mov	si,di			; remember position
 11588                                  ;	;mov	bx,[es:di+15h]
 11589                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 11590                                  ;
 11591                                  ; Done with this entry, go back for more.
 11592                                  ;
 11593                                  ;lru9:
 11594                                  ;	;add	di, 53
 11595                                  ;	add	di,SF_ENTRY.size
 11596                                  ;	loop	lru8
 11597                                  ;
 11598                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 11599                                  ; out. The conditions here are:
 11600                                  ;
 11601                                  ;  No local-no-shares AND all net/share entries are older than threshold
 11602                                  ;
 11603                                  ;lru10:
 11604                                  ;	cmp	si,-1			; if no one f
 11605                                  ;	jz	short lru65		;     return -1;
 11606                                  ;lru11:
 11607                                  ;	mov	di,si
 11608                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 11609                                  ;	MOV	[CS:THISSFT+2],ES
 11610                                  ;
 11611                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 11612                                  ; is 0.
 11613                                  ;
 11614                                  ;	;test	word [es:di+5],8000h
 11615                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 11616                                  ;	JNZ	short LRUClose
 11617                                  ;IF INSTALLED
 11618                                  ;	call	CheckShare
 11619                                  ;	JZ	short LRUDone
 11620                                  ;ENDIF
 11621                                  ;
 11622                                  ; Repeat close until ref count is 0
 11623                                  ;
 11624                                  ;LRUClose:
 11625                                  ;	push	ss
 11626                                  ;	pop	ds
 11627                                  ;	LES	DI,[THISSFT]
 11628                                  ;	cmp     word [es:di],0
 11629                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 11630                                  ;	JZ	short LRUDone 		; nope, all done
 11631                                  ;	call	DOS_CLOSE
 11632                                  ;	jnc	short LRUClose		; no error => clean up
 11633                                  ;	;cmp	al,6
 11634                                  ;	cmp	al,error_invalid_handle
 11635                                  ;	jz	short LRUClose
 11636                                  ;	stc
 11637                                  ;	JMP	short LRUDead
 11638                                  ;LRUDone:
 11639                                  ;	XOR	AL,AL
 11640                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 11641                                  ;
 11642                                  ;LRUDead:
 11643                                  ;	call	restore_world
 11644                                  ;	LES     DI,[CS:THISSFT]
 11645                                  ;	jnc	short LRUFCB_retn
 11646                                  ;LRUFCB_err:
 11647                                  ;	; mov	al, 23h	
 11648                                  ;	MOV	AL,error_FCB_unavailable
 11649                                  ;LRUFCB_retn:	
 11650                                  ;	retn:
 11651                                  ;
 11652                                  ;ENDIF	; LRUFCB has been rewritten below.
 11653                                  
 11654                                  ; 24/07/2019 - Retro DOS v3.2
 11655                                  
 11656                                  ; 17/05/2019 - Retro DOS v4.0
 11657                                  ; LRUFCB for MSDOS 6.0 !
 11658                                  ;----------------------------------------------------------------------------
 11659                                  ;
 11660                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 11661                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 11662                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 11663                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 11664                                  ; optimize regeneration operations by keeping track of the current local
 11665                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 11666                                  ; local SFT in the SFT Block.
 11667                                  ;
 11668                                  ; Inputs: al = 0 => Regenerate SFT operation
 11669                                  ;	    = 1 => Allocate new SFT for Open/Create
 11670                                  ;
 11671                                  ; Outputs: Carry clear
 11672                                  ;	 	es:di = Address of allocated SFT
 11673                                  ;	  	ThisSFT = Address of allocated SFT
 11674                                  ;
 11675                                  ;	  carry set if closes of net/Share files failed 
 11676                                  ;		al = error_FCB_unavailable
 11677                                  ;
 11678                                  ; Registers affected: None
 11679                                  ;
 11680                                  ;----------------------------------------------------------------------------
 11681                                  
 11682                                  ;LruFCB	PROC	NEAR
 11683                                  LRUFCB:
 11684                                  	; 17/05/2019 - Retro DOS v4.0
 11685                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 11686                                  
 11687                                  	;push	es	; * (MSDOS 6.21)
 11688                                  	
 11689 00002732 E801EF                  	call	save_world
 11690                                  	
 11691                                  	; MSDOS 6.0
 11692                                  	;;getdseg <ds>		;ds = DOSDATA
 11693                                  	;mov	ds,[cs:DosDSeg]
 11694                                  
 11695                                  	; 24/07/2019 - Retro DOS v3.2
 11696 00002735 0E                      	push	cs
 11697 00002736 1F                      	pop	ds
 11698                                  
 11699 00002737 08C0                    	or	al,al		;Check if regenerate allocation
 11700 00002739 751A                    	jnz	short lru1	;Try to find SFT to use
 11701                                  
 11702                                  	; This is a regen call. If LocalSFT contains the address of a valid 
 11703                                  	; local SFT, just return that SFT to reuse
 11704                                  
 11705 0000273B 8B3E[C50F]              	mov	di,[LocalSFT]
 11706 0000273F 0B3E[C70F]              	or	di,[LocalSFT+2]	;is address == 0?
 11707 00002743 7410                    	jz	short lru1	;invalid local SFT, find one
 11708                                  
 11709                                  	; We have found a valid local SFT. Recycle this SFT
 11710                                  
 11711 00002745 C43E[C50F]              	les	di,[LocalSFT]
 11712                                  
 11713                                  gotlocalSFT:
 11714 00002749 893E[5A05]              	mov	[THISSFT],di
 11715 0000274D 8C06[5C05]              	mov	[THISSFT+2],es
 11716 00002751 F8                      	clc
 11717 00002752 E9AE00                  	jmp	LRUDone		;clear up SFT and return
 11718                                  
 11719                                  lru1:
 11720 00002755 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 11721                                  	;mov	cx,[es:di+4]
 11722 00002759 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 11723                                  	;lea	di,[di+6]
 11724 0000275D 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 11725                                  
 11726                                  	; We scan through all the SFTs scanning for a free one. It also 
 11727                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately. 
 11728                                  	; bx = min. LRU for local SFTs
 11729                                  	; si = pos. of local SFT with min. LRU
 11730                                  	; dx = min. LRU for net/Share SFTs
 11731                                  	; bp = pos. of net/Share SFT with min. LRU
 11732                                  
 11733 00002760 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 11734 00002763 89DE                    	mov	si,bx
 11735 00002765 89DA                    	mov	dx,bx
 11736 00002767 89DD                    	mov	bp,bx
 11737                                  
 11738                                  findSFT:
 11739                                  	;See if this SFT is a free one. If so, return it
 11740 00002769 26830D00                	or	word [es:di],0
 11741                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 11742 0000276D 744E                    	jz	short gotSFT	;yes, SFT is free
 11743                                  	;;cmp	word [es:di],-1
 11744                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 11745 0000276F 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 11746 00002773 7448                    	jz	short gotSFT	;no, can use it
 11747                                  
 11748                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 11749                                  	; used for a later regen.
 11750                                  
 11751                                  	;test	word [es:di+5],8000h
 11752 00002775 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 11753 0000277B 7532                    	jnz	short lru5	;yes, get net/Share LRU
 11754                                  
 11755                                  ;IF installed
 11756 0000277D E8E44E                  	call	CheckShare	;Share present?
 11757                                  ;ENDIF
 11758 00002780 752D                    	jnz	short lru5	;yes, get net/Share LRU
 11759                                  
 11760                                  	;Local SFT, register its address
 11761                                  
 11762                                  	; !!HACK!!!
 11763                                  	; There is a slightly dirty hack out here in a desperate bid to save  
 11764                                  	; code space. There is similar code duplicated at label 'gotSFT'. We 
 11765                                  	; enter from there if al = 0, update the LocalSFT variable, and since 
 11766                                  	; al = 0, we jump out of the loop to the exit point. I have commented 
 11767                                  	; out the code that previously existed at label 'gotSFT'
 11768                                  
 11769                                  hackpoint:
 11770 00002782 893E[C50F]              	mov	[LocalSFT],di
 11771 00002786 8C06[C70F]              	mov	[LocalSFT+2],es	;store local SFT address
 11772                                  
 11773 0000278A 08C0                    	or	al,al		;Is operation = REGEN?
 11774 0000278C 74BB                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 11775                                  
 11776                                  	;Get LRU for local files
 11777                                  	
 11778                                  	;cmp	[es:di+15h],bx
 11779 0000278E 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 11780 00002792 7306                    	jae	short lru4	;no, skip 
 11781                                  
 11782                                  	;mov	bx,[es:di+15h]
 11783 00002794 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 11784 00002798 89FE                    	mov	si,di		;store SFT position
 11785                                  
 11786                                  lru4:
 11787                                  	;add	di,59
 11788 0000279A 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 11789 0000279D E2CA                    	loop	findSFT
 11790                                  
 11791                                  	; Check whether we got a net/Share or local SFT. If local SFT 
 11792                                  	; available, we will reuse it instead of net/Share LRU
 11793                                  
 11794 0000279F 89F7                    	mov	di,si
 11795 000027A1 83FEFF                  	cmp	si,-1		;local SFT available?
 11796 000027A4 7517                    	jnz	short gotSFT	;yes, return it
 11797                                  
 11798                                  	;No local SFT, see if we got a net/Share SFT
 11799                                  
 11800 000027A6 89EF                    	mov	di,bp
 11801 000027A8 83FDFF                  	cmp	bp,-1		;net/Share SFT available?
 11802 000027AB 7530                    	jnz	short gotnetSFT	;yes, return it
 11803                                  noSFT:
 11804                                  	; NB: This error should never occur. We always must have an LRU SFT. 
 11805                                  	; This error can occur only if the SFT has been corrupted or the LRU 
 11806                                  	; count is not maintained properly.
 11807                                  
 11808 000027AD EB51                    	jmp	short errorbadSFT ;error, no FCB available.
 11809                                  
 11810                                  	; Handle the LRU for net/Share SFTs
 11811                                  lru5:
 11812                                  	;cmp	[es:di+15h],dx
 11813 000027AF 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 11814 000027B3 73E5                    	jae	short lru4	;no, skip 
 11815                                  
 11816                                  	;mov	dx,[es:di+15h]
 11817 000027B5 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 11818                                  
 11819 000027B9 89FD                    	mov	bp,di		;store SFT position
 11820 000027BB EBDD                    	jmp	short lru4	;continue with next SFT
 11821                                  
 11822                                  gotSFT:
 11823 000027BD 08C0                    	or	al,al
 11824 000027BF 74C1                    	jz	short hackpoint	;save es:di in LocalSFT
 11825                                  
 11826                                  	; HACK!!!
 11827                                  	; The code here differs from the code at 'hackpoint' only in the 
 11828                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint' 
 11829                                  	; and then from there jump out to 'gotlocalSFT'. The original code 
 11830                                  	; has been commented out below and replaced by the code just above.
 11831                                  
 11832                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 11833                                  ;
 11834                                  ;	or	al,al		  ;Regen?
 11835                                  ;	jnz	short notlocaluse ;yes, register it and return
 11836                                  ;
 11837                                  ;Register this SFT as a local one
 11838                                  ;
 11839                                  ;	mov	[LocalSFT],di
 11840                                  ;	mov	[LocalSFT+2],es
 11841                                  ;	jmp	gotlocalSFT	;return to caller
 11842                                  ;
 11843                                  ;notlocaluse:
 11844                                  
 11845                                  	; The caller is probably going to use this SFT for a net/Share file. 
 11846                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN) 
 11847                                  	; does not really know whether it is a local file or not. We 
 11848                                  	; invalidate LocalSFT if the SFT we are going to use was previously 
 11849                                  	; registered as a local SFT that can be recycled.
 11850                                  
 11851 000027C1 8CC0                    	mov	ax,es
 11852 000027C3 393E[C50F]              	cmp	[LocalSFT],di		;Offset same?
 11853 000027C7 7506                    	jne	short notinvalid
 11854 000027C9 3906[C70F]              	cmp	[LocalSFT+2],ax		;Segments same?
 11855 000027CD 7403                    	je	short zerolocalSFT	;no, no need to invalidate
 11856                                  notinvalid:
 11857 000027CF E977FF                  	jmp	gotlocalSFT
 11858                                  
 11859                                  	; The SFT we are going to use was registered in the LocalSFT variable. 
 11860                                  	; Invalidate this variable i.e LocalSFT = NULL
 11861                                  
 11862                                  zerolocalSFT:
 11863 000027D2 31C0                    	xor	ax,ax ; 0
 11864 000027D4 A3[C50F]                	mov	[LocalSFT],ax
 11865 000027D7 A3[C70F]                	mov	[LocalSFT+2],ax
 11866                                  
 11867 000027DA E96CFF                  	jmp	gotlocalSFT
 11868                                  
 11869                                  gotnetSFT:
 11870                                  	; We have an SFT that is currently net/Share. If it is going to be 
 11871                                  	; used for a regen, we know it has to be a local SFT. Update the 
 11872                                  	; LocalSFT variable
 11873                                  
 11874 000027DD 08C0                    	or	al,al
 11875 000027DF 7508                    	jnz	short closenet
 11876                                  
 11877 000027E1 893E[C50F]              	mov	[LocalSFT],di
 11878 000027E5 8C06[C70F]              	mov	[LocalSFT+2],es	;store local SFT address
 11879                                  closenet:
 11880 000027E9 893E[5A05]              	mov	[THISSFT],di	; set thissft
 11881 000027ED 8C06[5C05]              	mov	[THISSFT+2],es	
 11882                                  
 11883                                  	; If we have sharing or thisSFT is a net sft, then close it until ref 
 11884                                  	; count is 0.
 11885                                  	; NB: We come here only if it is a net/Share SFT that is going to be 
 11886                                  	; recycled -- no need to check for this.
 11887                                  
 11888                                  LRUClose:
 11889 000027F1 26833D00                	cmp	word [es:di],0
 11890                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 11891 000027F5 740C                    	jz	short LRUDone	; nope, all done
 11892                                  
 11893 000027F7 E83513                  	call	DOS_CLOSE
 11894 000027FA 73F5                    	jnc	short LRUClose	; no error => clean up
 11895                                  
 11896                                  	; Bugbug: I dont know why we are trying to close after we get an 
 11897                                  	; error closing. Seems like we could have a potential infinite loop  
 11898                                  	; here. This has to be verified.
 11899                                  
 11900 000027FC 3C06                    	cmp	al,error_invalid_handle ; 6
 11901 000027FE 74F1                    	je	short LRUClose
 11902                                  errorbadSFT:
 11903 00002800 F9                      	stc
 11904 00002801 EB05                    	JMP	short LRUDead
 11905                                  LRUDone:
 11906 00002803 30C0                    	XOR	AL,AL
 11907 00002805 E80801                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 11908                                  
 11909                                  LRUDead:
 11910 00002808 E818EE                  	call	restore_world		; use macro
 11911                                  	
 11912                                  	;pop	es ; * (MSDOS 6.21)
 11913                                  
 11914                                  	; MSDOS 6.0
 11915                                  	;getdseg <es>
 11916                                  	;mov	es,[cs:DosDSeg]
 11917                                  
 11918                                  	;les	di,[es:THISSFT]		;es:di points at allocated SFT
 11919                                  
 11920                                  	; 24/07/2019 - Retro DOS v3.2
 11921 0000280B 2EC43E[5A05]            	les	di,[cs:THISSFT]		;es:di points at allocated SFT
 11922                                  
 11923                                  	;;retnc
 11924                                  	;jc	short LruFCB_err
 11925                                  	;retn
 11926                                  
 11927 00002810 7302                    	jnc	short LruFCB_retn
 11928                                  		
 11929                                  LruFCB_err:
 11930 00002812 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 11931                                  LruFCB_retn:
 11932 00002814 C3                      	retn
 11933                                  	
 11934                                  ;LruFCB	ENDP
 11935                                  
 11936                                  ;ENDIF
 11937                                  
 11938                                  ; 24/07/2019 - Retro DOS v3.2
 11939                                  
 11940                                  ; 17/05/2019 - Retro DOS v4.0
 11941                                  
 11942                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 11943                                  
 11944                                  ; --------------------------------------------------------------------------
 11945                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 11946                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 11947                                  ; to copy the name to different destinations
 11948                                  ;
 11949                                  ; Inputs: ds:si = source string
 11950                                  ;	 es:di = destination string
 11951                                  ;	 cx = length of string
 11952                                  ;
 11953                                  ; Outputs: String copied to destination
 11954                                  ;
 11955                                  ; Registers affected: cx,di,si
 11956                                  ; --------------------------------------------------------------------------
 11957                                  
 11958                                  RegenCopyName:
 11959                                  CopyName:
 11960 00002815 AC                      	lodsb			;load character
 11961 00002816 E8D430                  	call	UCase		; convert char to upper case
 11962                                  StuffChar2:
 11963 00002819 AA                      	STOSB			;store converted character
 11964 0000281A E2F9                    	LOOP	CopyName	;
 11965                                  DoneName:
 11966 0000281C C3                      	retn
 11967                                  
 11968                                  ; --------------------------------------------------------------------------
 11969                                  
 11970                                  FCBRegen:
 11971                                  	; called from SFTFromFCB. SS already DOSDATA
 11972                                  
 11973                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 11974                                  	; we do not fill, size we do no fill, position we do not fill,
 11975                                  	; bit 14 of flags = TRUE, other bits = FALSE
 11976                                  
 11977                                  	;mov	al,[si+19h]
 11978 0000281D 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 11979                                  
 11980                                  	; We discriminate based on the first two bits in the reserved field.
 11981                                  	
 11982                                  	;test	al,80h
 11983 00002820 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 11984 00002822 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 11985                                  
 11986                                  	; The FCB is for a network or a sharing based system. At this point 
 11987                                  	; we have already closed the SFT for this guy and reconnection is 
 11988                                  	; impossible.
 11989                                  	;
 11990                                  	; Remember that he may have given us a FCB with bogus information in
 11991                                  	; it. Check to see if sharing is present or if the redir is present.
 11992                                  	; If either is around, presume that we have cycled out the FCB and 
 11993                                  	; give the hard error. Otherwise, just return with carry set.
 11994                                  
 11995 00002824 E83D4E                  	call	CheckShare		; test for sharer
 11996 00002827 7509                    	JNZ	short RegenFail		; yep, fail this.
 11997                                  	
 11998                                  	;mov	ax,1100h
 11999 00002829 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12000 0000282C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12001                                  			; Return: AL = 00h  not installed, OK to install
 12002                                  			; 01h  not installed, not OK to install
 12003                                  			; FFh  installed
 12004 0000282E 08C0                    	OR	AL,AL			; is it there?
 12005 00002830 740C                    	JZ	short RegenDead		; no, just fail the operation
 12006                                  RegenFail:
 12007                                  	; 17/05/2019 - Retro DOS v4.0
 12008                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12009 00002832 36A1[0403]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12010                                  
 12011                                  	;cmp	ah,10h
 12012 00002836 80FC10                  	cmp	AH,FCB_CLOSE
 12013 00002839 7403                    	jz	short RegenDead
 12014 0000283B E89901                  	call	FCBHardErr		; massive hard error.
 12015                                  RegenDead:
 12016 0000283E F9                      	STC				; carry set
 12017                                  FCBRegen_retn:
 12018 0000283F C3                      	retn
 12019                                  
 12020                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12021                                  	; so fail the operation.
 12022                                  
 12023                                  RegenNoSharing:
 12024 00002840 E8214E                  	call	CheckShare		; Sharing around?
 12025 00002843 75ED                    	JNZ	short RegenFail
 12026                                  	
 12027                                  	; Find an SFT for this guy.
 12028                                  	
 12029                                  	; 17/05/2019 - Retro DOS v4.0
 12030                                  
 12031                                  	; MSDOS 3.3
 12032                                  	;call	LRUFCB
 12033                                  	;jc	short FCBRegen_retn
 12034                                  	
 12035                                  	; MSDOS 6.0
 12036 00002845 50                      	push	ax
 12037 00002846 B000                    	mov	al,0			;indicate it is a regen operation
 12038 00002848 E8E7FE                  	call	LRUFCB
 12039 0000284B 58                      	pop	ax
 12040 0000284C 72F1                    	jc	short FCBRegen_retn
 12041                                  
 12042                                  	;mov	word [es:di+2],8002h
 12043 0000284E 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12044 00002854 243F                    	AND	AL,3Fh			; get drive number for flags
 12045 00002856 98                      	CBW
 12046                                  	;or	ax,4000h
 12047 00002857 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12048                                  
 12049                                  	; The bits field consists of the upper two bits (dirty and device) 
 12050                                  	; from the SFT and the low 4 bits from the open mode.
 12051                                  
 12052                                  	;mov	cl,[si+1Ah]
 12053 0000285A 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12054 0000285D 88CD                    	MOV	CH,CL
 12055 0000285F 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12056 00002862 08E8                    	OR	AL,CH
 12057                                  	;and	cl,0Fh
 12058 00002864 80E10F                  	AND	CL,access_mask		; get the mode bits
 12059                                  	;mov	[es:di+2],cl
 12060 00002867 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12061                                  	;mov	[es:di+5],ax
 12062 0000286B 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12063                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12064 0000286F 36A1[0603]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12065                                  	;mov	[es:di+31h],ax
 12066 00002873 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12067 00002877 1E                      	push	ds
 12068 00002878 56                      	push	si
 12069 00002879 06                      	push	es
 12070 0000287A 57                      	push	di
 12071 0000287B 16                      	push	ss
 12072 0000287C 07                      	pop	es
 12073 0000287D BF[0805]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12074                                  
 12075 00002880 B90800                  	MOV	CX,8
 12076 00002883 46                      	INC	SI			; Skip past drive byte to name in FCB
 12077                                  
 12078                                  	; MSDOS 3.3
 12079                                  ;RegenCopyName:
 12080                                  	;lodsb
 12081                                  	;call	UCase
 12082                                  	;stosb
 12083                                  	;loop	RegenCopyName
 12084                                  
 12085                                  	; MSDOS 6.0
 12086 00002884 E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12087                                  
 12088 00002887 16                      	push	ss	; SS is DOSDATA
 12089 00002888 1F                      	pop	ds
 12090                                  
 12091                                  	;mov	byte [ATTRIB],16h
 12092 00002889 C606[2805]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12093                                  					; Must set this to something interesting
 12094                                  					; to call DEVNAME.
 12095 0000288E E84424                  	call	DEVNAME 		; check for device
 12096 00002891 5E                      	pop	si
 12097 00002892 07                      	pop	es
 12098 00002893 5E                      	pop	si
 12099 00002894 1F                      	pop	ds
 12100 00002895 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12101                                  
 12102                                  	; Device found. We can ignore disk-specific info
 12103                                  
 12104                                  	;mov	[es:di+5],bh
 12105 00002897 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12106                                  	;mov	byte [es:di+4],0
 12107 0000289B 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12108                                  					; SS override
 12109                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12110 000028A0 36C536[5605]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12111                                  	;mov	[es:di+7],si
 12112 000028A5 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12113                                  	;mov	[es:di+9],ds
 12114 000028A9 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12115 000028AD C3                      	retn				; carry is clear
 12116                                  
 12117                                  RegenDeadJ:
 12118 000028AE EB8E                    	JMP	short RegenDead
 12119                                  
 12120                                  	; File found. Just copy in the remaining pieces.
 12121                                  
 12122                                  RegenFileNoSharing:
 12123                                  	;mov	ax,[es:di+5]
 12124 000028B0 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12125 000028B4 83E03F                  	AND	AX,03Fh
 12126 000028B7 1E                      	push	ds
 12127 000028B8 56                      	push	si
 12128 000028B9 E82A43                  	call	FIND_DPB
 12129                                  	;mov	[es:di+7],si
 12130 000028BC 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12131                                  	;mov	[es:di+9],ds
 12132 000028C0 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12133 000028C4 5E                      	pop	si
 12134 000028C5 1F                      	pop	ds
 12135 000028C6 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 12136                                  					; indicator was bogus
 12137                                  	;mov	ax,[si+1Dh]
 12138 000028C8 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 12139                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 12140                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 12141 000028CB 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 12142                                  
 12143                                  	; MSDOS 6.0
 12144                                  
 12145                                  	; SR;
 12146                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 12147                                  	; number
 12148                                  
 12149                                  	;mov	al,[si+18h]
 12150 000028CF 8A4418                  	mov	al,[si+fcb_sfn]
 12151 000028D2 24C0                    	and	al,0C0h		;get the 2 attribute bits
 12152 000028D4 88C4                    	mov	ah,al
 12153 000028D6 D0C4                    	rol	ah,1
 12154 000028D8 D0E8                    	shr	al,1
 12155 000028DA 08E0                    	or	al,ah
 12156 000028DC 243F                    	and	al,03Fh		;mask off unused bits
 12157                                  	;mov	[es:di+4],al
 12158 000028DE 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 12159                                  
 12160                                  	; SR;
 12161                                  	; Update the higher word of the directory sector from the FCB
 12162                                  
 12163                                  	;;mov	al,[si+18h]
 12164 000028E2 8A4418                  	mov	al,[si+fcb_sfn]
 12165 000028E5 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 12166 000028E7 28E4                    	sub	ah,ah
 12167                                  	;mov	[es:di+1Dh],ax
 12168 000028E9 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 12169                                  
 12170                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12171                                  	;mov	ax,[si+1Bh]
 12172 000028ED 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 12173                                  	;mov	[es:di+0Bh],ax
 12174 000028F0 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 12175                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 12176                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 12177 000028F4 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 12178                                  	;mov	al,[si+1Fh]
 12179 000028F8 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 12180                                  	;mov  	[es:di+1Fh],al
 12181 000028FB 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 12182                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12183 000028FF 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 12184                                  					; Existing FCB entries would be
 12185                                  					; flushed unnecessarily because of
 12186                                  					; check in CheckFCB of the ref_count.
 12187                                  					; July 22/85 - BAS
 12188                                  	;lea	si,[si+1]
 12189 00002902 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 12190                                  	;lea	di,[di+20h]
 12191 00002905 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 12192                                  	;mov	cx,11
 12193 00002908 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 12194                                  	
 12195                                  	; MSDOS 6.0
 12196 0000290B E807FF                  	call	RegenCopyName	;copy name to SFT 
 12197                                  	
 12198                                  	; MSDOS 3.3
 12199                                  ;RegenCopyName2:
 12200                                  	;lodsb
 12201                                  	;call    UCase
 12202                                  	;stosb
 12203                                  	;loop    RegenCopyName2
 12204                                  
 12205 0000290E F8                      	clc
 12206 0000290F C3                      	retn
 12207                                  
 12208                                  ; 24/07/2019 - Retro DOS v3.2
 12209                                  
 12210                                  ;**	BlastSFT - FIll SFT with Garbage
 12211                                  ; --------------------------------------------------------------------------
 12212                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 12213                                  ;	various garbage values to put into the SFT.  I don't know why,
 12214                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 12215                                  ;	necessary to show that the SFT is free after filling it.
 12216                                  ;
 12217                                  ;	ENTRY	(es:di) = address of SFT
 12218                                  ;		(al) = fill character
 12219                                  ;	EXIT	(ax) = -1
 12220                                  ;		'C' clear
 12221                                  ;	USES	AX, CX, Flags
 12222                                  
 12223                                  BlastSFT:
 12224 00002910 57                      	push	di
 12225                                  	;mov	cx,53 ; MSDOS 3.3
 12226                                  	;mov	cx,59 ; MSDOS 6.0
 12227 00002911 B93B00                  	mov	cx,SF_ENTRY.size
 12228 00002914 F3AA                    	rep	stosb
 12229 00002916 5F                      	pop	di
 12230 00002917 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 12231 00002919 268905                  	mov	[es:di],ax
 12232                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 12233                                  	;mov	[es:di+15h],ax
 12234 0000291C 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 12235 00002920 48                      	dec	ax	; -1					    ;
 12236                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 12237 00002921 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 12238                                  BlastSFT_retn:
 12239 00002925 C3                      	retn				; return with 'C' clear     ;
 12240                                  
 12241                                  
 12242                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 12243                                  ; --------------------------------------------------------------------------
 12244                                  ;
 12245                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 12246                                  ;   regenerated.
 12247                                  ;
 12248                                  ;   Inputs:	DS:SI point to FCB (not extended)
 12249                                  ;		AL is SFT index
 12250                                  ;   Outputs:	Carry Set - FCB needs to be regened
 12251                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 12252                                  ;   Registers modified: AX and BX
 12253                                  ;
 12254                                  ; --------------------------------------------------------------------------
 12255                                  
 12256                                  CheckFCB:
 12257                                  		
 12258                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 12259                                  
 12260                                  	; MSDOS 3.3
 12261                                  
 12262                                  	; LES	DI,[CS:SFTFCB]
 12263                                  
 12264                                  	; MSDOS 6.0
 12265                                  	
 12266                                  	; SR;
 12267                                  	; We check if the given FCB is for a local file. If so, we return a 
 12268                                  	; bad SFT status forcing the caller to regenerate the SFT.
 12269                                  
 12270                                  	;test	byte [si+19h],0C0h
 12271 00002926 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 12272 0000292A 7453                    	jz	short BadSFT		;Local file, return bad SFT
 12273 0000292C 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 12274                                  
 12275                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12276                                  	;cmp	[es:di+4],al
 12277 00002931 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 12278 00002935 7248                    	JC	short BadSFT
 12279                                  	;;mov	bl,53 ; MSDOS 3.3
 12280                                  	;mov	bl,59 ; MSDOS 6.0
 12281 00002937 B33B                    	MOV	BL,SF_ENTRY.size
 12282 00002939 F6E3                    	MUL	BL
 12283                                  	;lea	di,[di+6]
 12284 0000293B 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 12285 0000293E 01C7                    	ADD	DI,AX
 12286                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 12287 00002940 36A1[0603]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 12288                                  	;cmp	[es:di+31h],ax
 12289 00002944 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 12290 00002948 7535                    	JNZ	short BadSFT		; must match process
 12291 0000294A 26833D00                	cmp	word [es:di],0
 12292                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 12293 0000294E 742F                    	JZ	short BadSFT		; must also be in use
 12294                                  	;mov	al,[si+19h]
 12295 00002950 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12296                                  	;test	al,80h
 12297 00002953 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 12298 00002955 7434                    	JZ	short CheckNoShare	; No. try local or device
 12299                                  
 12300                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 12301                                  	; FCBSHARE is a superset of FCBNETWORK.
 12302                                  
 12303 00002957 50                      	PUSH	AX
 12304                                  	;and	al,0C0h
 12305 00002958 24C0                    	AND	AL,FCBMASK
 12306                                  	;cmp	al,0C0h
 12307 0000295A 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 12308 0000295C 58                      	POP	AX
 12309 0000295D 7522                    	JNZ	short CheckNet		; yes
 12310                                  ;
 12311                                  ;----- In share support -----
 12312                                  ;
 12313                                  	; 26/07/2019
 12314 0000295F 2EFF1E[8800]            	call	far [cs:JShare+(11*4)]  ; 11 = ShChk
 12315                                  	;Call	far [ss:JShare+(11*4)]	; SS Override
 12316 00002964 7219                    	JC	short BadSFT
 12317 00002966 EB0A                    	JMP	SHORT CheckD
 12318                                  ;
 12319                                  ;----- End in share support -----
 12320                                  ;
 12321                                  CheckFirClus:
 12322 00002968 263B5D0B                	cmp     bx,[es:di+0Bh]
 12323 0000296C 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 12324 00002970 750D                    	JNZ	short BadSFT
 12325                                  CheckD: 
 12326 00002972 243F                    	AND	AL,3Fh
 12327                                  	;mov	ah,[es:di+5]
 12328 00002974 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 12329 00002978 80E43F                  	AND	AH,3Fh
 12330 0000297B 38C4                    	CMP	AH,AL
 12331 0000297D 74A6                    	jz	short BlastSFT_retn	; carry is clear
 12332                                  BadSFT: 
 12333 0000297F F9                      	STC
 12334 00002980 C3                      	retn				; carry is clear
 12335                                  CheckNet:
 12336                                  	; 17/05/2019 - Retro DOS v4.0
 12337                                  	
 12338                                  ;----- In net support -----
 12339                                  
 12340                                  	; MSDOS 3.3
 12341                                  	;;mov	ax,[si+1Ah]
 12342                                  	;mov	ax,[si+fcb_net_handle]
 12343                                  	;;cmp	ax,[es:di+1Dh]
 12344                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 12345                                  	;jnz	short BadSFT
 12346                                  	;;cmp	ax,[es:di+19h]
 12347                                  	;cmp	ax,[ES:DI+sf_netid]
 12348                                  	;jnz     short BadSFT
 12349                                  	;;mov	ax,[si+1Eh]
 12350                                  	;mov	ax,[si+fcb_l_attr]
 12351                                  	;;cmp	ax,[es:di+1Bh]
 12352                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 12353                                  	;jnz     short BadSFT
 12354                                  
 12355                                  	; MSDOS 6.0
 12356                                  	;mov	ax,[si+1Ch]
 12357 00002981 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 12358                                  	;cmp	ax,[es:di+7]
 12359 00002984 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 12360 00002988 75F5                    	JNZ	short BadSFT
 12361                                  
 12362                                  ;----- END In net support -----
 12363                                  
 12364                                  CheckNet_retn:
 12365 0000298A C3                      	retn
 12366                                  
 12367                                  CheckNoShare:
 12368                                  	;test	al,40h
 12369 0000298B A840                    	test	AL,FCBDEVICE		; Device?
 12370 0000298D 7500                    	JNZ	short CheckNoShareDev 	; Yes
 12371                                  
 12372                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 12373                                  	;;mov	bx,[si+1Dh]
 12374                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 12375                                  	;;cmp	bx,[es:di+1Dh]
 12376                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 12377                                  	;jnz	short BadSFT
 12378                                  	;;mov	bl,[si+1Fh]
 12379                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 12380                                  	;;cmp	bl,[es:di+1Fh]
 12381                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 12382                                  	;jnz	short BadSFT
 12383                                  	;;mov	bl,[si+1Ah]
 12384                                  	;MOV	bl,[SI+fcb_nsl_bits]
 12385                                  	;;mov	bh,[es:di+5]
 12386                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 12387                                  	;xor	bh,bl
 12388                                  	;and	bh,0C0h
 12389                                  	;jnz	short BadSFT
 12390                                  	;;xor	bl,[es:di+2]
 12391                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 12392                                  	;and	bl,0Fh
 12393                                  	;jnz	short BadSFT
 12394                                  	;push	di
 12395                                  	;push	si
 12396                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 12397                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 12398                                  	;;lea	si,[si+1]
 12399                                  	;LEA	SI,[SI+SYS_FCB.name]
 12400                                  	;;mov	cx,11
 12401                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 12402                                  	;repe	cmpsb
 12403                                  	;pop	si
 12404                                  	;pop	di
 12405                                  	;jnz	short BadSFT
 12406                                  	;;mov	bx,[si+1Bh]
 12407                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 12408                                  	;jmp	short CheckFirClus
 12409                                  
 12410                                  	; MSDOS 6.0
 12411                                  
 12412                                  	; SR;
 12413                                  	; The code below to match a local FCB with its SFT can no longer be
 12414                                  	; used. We just return a no-match status. This check is done right
 12415                                  	; at the top.
 12416                                  
 12417                                  CheckNoShareDev:
 12418                                  	;mov	bx,[si+1Ah]
 12419 0000298F 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 12420                                  	;cmp	bx,[es:di+7]
 12421 00002992 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 12422 00002996 75E7                    	JNZ	short BadSFT
 12423                                  	;mov	bx,[si+1Ch]
 12424 00002998 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 12425                                  	;cmp	bx,[es:di+9]
 12426 0000299B 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12427 0000299F 75DE                    	JNZ	short BadSFT
 12428 000029A1 EBCF                    	JMP	short CheckD
 12429                                  
 12430                                  ; 24/07/2019 - Retro DOS v3.2
 12431                                  
 12432                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 12433                                  ;----------------------------------------------------------------------------
 12434                                  ;
 12435                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 12436                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 12437                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 12438                                  ;	with PID
 12439                                  ;
 12440                                  ;   Inputs:	DS:SI point to FCB
 12441                                  ;   Outputs:	ThisSFT point to appropriate SFT
 12442                                  ;		Carry clear -> OK ES:DI -> SFT
 12443                                  ;		Carry set -> error in ax
 12444                                  ;   Registers modified: ES,DI, AX
 12445                                  ;
 12446                                  ;----------------------------------------------------------------------------
 12447                                  
 12448                                  SFTFromFCB:
 12449                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 12450                                  
 12451                                  	; 17/05/2019 - Retro DOS v4.0
 12452                                  
 12453 000029A3 50                      	push	ax
 12454 000029A4 53                      	push	bx
 12455                                  	;mov	al,[si+18h]
 12456 000029A5 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 12457 000029A8 E87BFF                  	call	CheckFCB
 12458 000029AB 5B                      	pop	bx
 12459 000029AC 58                      	pop	ax
 12460                                  	;MOV	[CS:THISSFT],DI		; SS override
 12461                                  	;MOV	[CS:THISSFT+2],ES
 12462 000029AD 36893E[5A05]            	MOV	[SS:THISSFT],DI		; SS override
 12463 000029B2 368C06[5C05]            	MOV	[SS:THISSFT+2],ES
 12464 000029B7 730F                    	JNC	short Set_SFT		; no problems, just set thissft
 12465                                  	
 12466                                  	; 24/07/2019 - Retro DOS v3.2
 12467                                  	; 31/05/2019
 12468                                  	;push	es ; * (MSDOS 6.21)
 12469 000029B9 E87AEC                  	call	save_world
 12470 000029BC E85EFE                  	call	FCBRegen
 12471 000029BF E861EC                  	call	restore_world		; use macro restore world
 12472                                  	;pop	es ; * (MSDOS 6.21) ; 31/05/2019	
 12473                                  
 12474                                  	;MOV	AX,[CS:EXTERR]		; SS override
 12475 000029C2 36A1[F002]              	MOV	AX,[SS:EXTERR]		; SS override
 12476 000029C6 72C2                    	jc	short CheckNet_retn
 12477                                  
 12478                                  Set_SFT: 
 12479                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 12480 000029C8 36C43E[5A05]            	les	di,[ss:THISSFT]
 12481                                  	;PUSH	word [CS:PROC_ID]	; set process id
 12482 000029CD 36FF36[0603]            	push	word [ss:PROC_ID]
 12483                                  	;pop	word [es:di+31h]
 12484 000029D2 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 12485 000029D6 C3                      	retn				; carry is clear
 12486                                  
 12487                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 12488                                  ;----------------------------------------------------------------------------
 12489                                  ;
 12490                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 12491                                  ;	unavailable FCB.
 12492                                  ;
 12493                                  ;   Inputs:	none.
 12494                                  ;   Outputs:	none.
 12495                                  ;   Registers modified: all
 12496                                  ;
 12497                                  ;----------------------------------------------------------------------------
 12498                                  
 12499                                  FCBHardErr:
 12500                                  	; 24/07/2019 - Retro DOS v3.2
 12501                                  	; 17/05/2019 - Retro DOS v4.0
 12502                                  	;mov	es,[cs:DosDSeg]
 12503                                  	;
 12504                                  	;mov	ax,23h
 12505 000029D7 B82300                  	MOV	AX,error_FCB_unavailable
 12506                                  	;;mov	byte [cs:ALLOWED],8
 12507 000029DA 2EC606[1503]08          	MOV	byte [CS:ALLOWED],Allowed_FAIL
 12508                                  	;mov	byte [es:ALLOWED],Allowed_FAIL	
 12509                                  	
 12510 000029E0 2EC42E[4605]            	LES	BP,[CS:THISDPB]
 12511                                  	;les	bp,[es:THISDPB]
 12512                                  	
 12513 000029E5 BF0100                  	MOV	DI,1			; Fake some registers
 12514 000029E8 89F9                    	MOV	CX,DI
 12515                                  	;mov	dx,[es:bp+0Bh]
 12516 000029EA 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 12517 000029EE E83731                  	call	HARDERR
 12518 000029F1 F9                      	STC
 12519 000029F2 C3                      	retn
 12520                                  
 12521                                  ;============================================================================
 12522                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 12523                                  ;============================================================================
 12524                                  ; 21/07/2018 - Retro DOS v3.0
 12525                                  
 12526                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 12527                                  ;
 12528                                  ;	GetRR
 12529                                  ;	GetExtent
 12530                                  ;	SetExtent
 12531                                  ;	GetExtended
 12532                                  ;	GetRecSize
 12533                                  ;	FCBIO
 12534                                  ;	$FCB_OPEN
 12535                                  ;	$FCB_CREATE
 12536                                  ;	$FCB_RANDOM_WRITE_BLOCK
 12537                                  ;	$FCB_RANDOM_READ_BLOCK
 12538                                  ;	$FCB_SEQ_READ
 12539                                  ;	$FCB_SEQ_WRITE
 12540                                  ;	$FCB_RANDOM_READ
 12541                                  ;	$FCB_RANDOM_WRITE
 12542                                  ;
 12543                                  ;	Revision history:
 12544                                  ;
 12545                                  ;		Created: ARR 4 April 1983
 12546                                  ;			 MZ  6 June  1983 completion of functions
 12547                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 12548                                  ;				  times.  Change so successive closes work by
 12549                                  ;				  always returning OK.	Also, detect I/O to
 12550                                  ;				  already closed FCB and return EOF.
 12551                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 12552                                  ;				  out of sft into FCB for reconnection
 12553                                  ;
 12554                                  ;	    A000   version 4.00	Jan. 1988
 12555                                  
 12556                                  ; Defintions for FCBOp flags
 12557                                  
 12558                                  RANDOM	equ 2				; random operation
 12559                                  FCBREAD equ 4				; doing a read
 12560                                  BLOCK	equ 8				; doing a block I/O
 12561                                  
 12562                                  ;Break <GetRR - return the random record field in DX:AX>
 12563                                  ;---------------------------------------------------------------------------
 12564                                  ;
 12565                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 12566                                  ;	from the FCB pointed to by DS:SI
 12567                                  ;
 12568                                  ;   Inputs:	DS:SI point to an FCB
 12569                                  ;		BX has record size
 12570                                  ;   Outputs:	DX:AX contain the contents of the random record field
 12571                                  ;   Registers modified: none
 12572                                  ;---------------------------------------------------------------------------
 12573                                  
 12574                                  GetRR:
 12575                                  	;mov	ax,[si+21h]
 12576 000029F3 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 12577                                  	;mov	dx,[si+23h]
 12578 000029F6 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 12579 000029F9 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 12580 000029FC 7202                    	JB	short GetRRBye
 12581 000029FE 30F6                    	XOR	DH,DH
 12582                                  GetRRBye:
 12583 00002A00 C3                      	retn
 12584                                  
 12585                                  ;Break <GetExtent - retrieve next location for sequential IO>
 12586                                  ;---------------------------------------------------------------------------
 12587                                  ;
 12588                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 12589                                  ;	NR fields in the FCB.
 12590                                  ;
 12591                                  ;   Inputs:	DS:SI - point to FCB
 12592                                  ;   Outputs:	DX:AX contain the contents of the random record field
 12593                                  ;   Registers modified: none
 12594                                  ;---------------------------------------------------------------------------
 12595                                  
 12596                                  GetExtent:
 12597                                  	;mov	al,[si+20h]
 12598 00002A01 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 12599                                  	;mov	dx,[si+0Ch]
 12600 00002A04 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 12601 00002A07 D0E0                    	SHL	AL,1
 12602 00002A09 D1EA                    	SHR	DX,1
 12603 00002A0B D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 12604 00002A0D 88D4                    	MOV	AH,DL
 12605 00002A0F 88F2                    	MOV	DL,DH
 12606 00002A11 30F6                    	XOR	DH,DH
 12607 00002A13 C3                      	retn
 12608                                  
 12609                                  ;Break <SetExtent - update the extent/NR field>
 12610                                  ;---------------------------------------------------------------------------
 12611                                  ;
 12612                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 12613                                  ;	fields
 12614                                  ;
 12615                                  ;   Inputs:	DS:SI point to FCB
 12616                                  ;		DX:AX is a record location in file
 12617                                  ;   Outputs:	Extent/NR fields are filled in
 12618                                  ;   Registers modified: CX
 12619                                  ;---------------------------------------------------------------------------
 12620                                  
 12621                                  SetExtent:
 12622 00002A14 50                      	push	ax
 12623 00002A15 52                      	push	dx
 12624 00002A16 89C1                    	MOV	CX,AX
 12625 00002A18 247F                    	AND	AL,7FH			; next rec field
 12626                                  	;mov	[si+20h],al
 12627 00002A1A 884420                  	MOV	[SI+SYS_FCB.NR],AL
 12628 00002A1D 80E180                  	AND	CL,80H			; save upper bit
 12629 00002A20 D1E1                    	SHL	CX,1
 12630 00002A22 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 12631 00002A24 88E8                    	MOV	AL,CH
 12632 00002A26 88D4                    	MOV	AH,DL
 12633                                  	;mov	[si+0Ch], ax
 12634 00002A28 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 12635 00002A2B 5A                      	pop	dx
 12636 00002A2C 58                      	pop	ax
 12637 00002A2D C3                      	retn
 12638                                  
 12639                                  ;Break <GetExtended - find FCB in potential extended fcb>
 12640                                  ;---------------------------------------------------------------------------
 12641                                  ;
 12642                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 12643                                  ;
 12644                                  ;   Inputs:	DS:DX point to a possible extended FCB
 12645                                  ;   Outputs:	DS:SI point to the FCB part
 12646                                  ;		zeroflag set if not extended fcb
 12647                                  ;   Registers modified: SI
 12648                                  ;---------------------------------------------------------------------------
 12649                                  
 12650                                  GetExtended:
 12651 00002A2E 89D6                    	MOV	SI,DX			; point to Something
 12652 00002A30 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 12653 00002A33 7503                    	JNZ	short GetBye		; not there
 12654 00002A35 83C607                  	ADD	SI,7			; point to FCB
 12655                                  GetBye:
 12656 00002A38 39D6                    	CMP	SI,DX			; set condition codes
 12657                                  getextd_retn:
 12658 00002A3A C3                      	retn
 12659                                  
 12660                                  ;Break <GetRecSize - return in BX the FCB record size>
 12661                                  ;---------------------------------------------------------------------------
 12662                                  ;
 12663                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 12664                                  ;
 12665                                  ;   Inputs:	DS:SI point to a non-extended FCB
 12666                                  ;   Outputs:	BX contains the record size
 12667                                  ;   Registers modified: None
 12668                                  ;---------------------------------------------------------------------------
 12669                                  
 12670                                  	; 22/01/2024
 12671                                  GetRecSize:
 12672                                  	;mov	bx,[si+0Eh]
 12673 00002A3B 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 12674 00002A3E 09DB                    	OR	BX,BX			; is it nul?
 12675                                  	;jz	short getextd_retn
 12676                                  	; 22/01/2024 (BugFix)
 12677 00002A40 75F8                    	jnz	short getextd_retn
 12678                                  	;MOV	BX,128			; use default size
 12679 00002A42 B380                    	mov	bl,128
 12680                                  	;mov	[si+0Eh],bx
 12681 00002A44 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 12682 00002A47 C3                      	retn
 12683                                  
 12684                                  ; 24/07/2019 - Retro DOS v3.2
 12685                                  
 12686                                  ;BREAK <FCBIO - do internal FCB I/O>
 12687                                  ;---------------------------------------------------------------------------
 12688                                  ;
 12689                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 12690                                  ;
 12691                                  ;   Inputs:	FCBOP flags which operations need to be performed
 12692                                  ;		DS:DX point to FCB
 12693                                  ;		CX may have count of number of records to xfer
 12694                                  ;   Outputs:	AL has error code
 12695                                  ;   Registers modified: all
 12696                                  ;---------------------------------------------------------------------------
 12697                                  
 12698                                  FCBIO:
 12699                                  
 12700                                  FEOF	EQU	1
 12701                                  FTRIM	EQU	2
 12702                                  
 12703                                  %define	FCBErr	byte [bp-1]  ; byte	
 12704                                  %define	cRec	word [bp-3]  ; word	
 12705                                  ;%define RecPos	word [bp-7]  ; dword
 12706                                  %define RecPosL	word [bp-7]  ; word
 12707                                  %define RecPosH	word [bp-5]  ; word
 12708                                  %define	RecSize	word [bp-9]  ; word
 12709                                  ;%define bPos	word [bp-13] ; dword
 12710                                  %define bPosL	word [bp-13] ; word
 12711                                  %define bPosH	word [bp-11] ; word
 12712                                  %define cByte	word [bp-15] ; word	
 12713                                  %define cResult word [bp-17] ; word	
 12714                                  %define	cRecRes	word [bp-19] ; word
 12715                                  %define	FCBOp	byte [bp-20] ; byte
 12716                                  
 12717                                  	;Enter
 12718                                  
 12719 00002A48 55                      	push	bp
 12720 00002A49 89E5                    	mov	bp,sp
 12721 00002A4B 83EC14                  	sub	sp,20
 12722                                  	;mov	[bp-20],al
 12723 00002A4E 8846EC                  	MOV	FCBOp,AL
 12724                                  	;mov	byte [bp-1],0
 12725 00002A51 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 12726 00002A55 E8D6FF                  	call	GetExtended		;   FCB = GetExtended ();
 12727                                  	;test	byte [bp-20],8
 12728 00002A58 F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 12729 00002A5C 7503                    	JNZ	short GetPos
 12730 00002A5E B90100                  	MOV	CX,1			;	cRec = 1;
 12731                                  GetPos:
 12732                                  	;mov	[bp-3],cx
 12733 00002A61 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 12734 00002A64 E89AFF                  	call	GetExtent		;   RecPos = GetExtent ();
 12735 00002A67 E8D1FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 12736                                  	;mov	[bp-9],bx
 12737 00002A6A 895EF7                  	MOV	RecSize,BX
 12738                                  	;test	byte [bp-20],2
 12739 00002A6D F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 12740 00002A71 7403                    	JZ	short GetRec
 12741 00002A73 E87DFF                  	call	GetRR			;	RecPos = GetRR ();
 12742                                  GetRec:
 12743                                  	;mov	[bp-7],ax
 12744 00002A76 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 12745                                  	;mov	[bp-5],dx
 12746 00002A79 8956FB                  	MOV	RecPosH,DX
 12747 00002A7C E895FF                  	call	SetExtent		;   SetExtent (RecPos);
 12748                                  	;mov	ax,[bp-5]
 12749 00002A7F 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 12750 00002A82 F7E3                    	MUL	BX
 12751 00002A84 89C7                    	MOV	DI,AX
 12752                                  	;mov	ax,[bp-7]
 12753 00002A86 8B46F9                  	MOV	AX,RecPosL
 12754 00002A89 F7E3                    	MUL	BX
 12755 00002A8B 01FA                    	ADD	DX,DI
 12756                                  	;mov	[bp-13],ax
 12757 00002A8D 8946F3                  	MOV	bPosL,AX
 12758                                  	;mov	[bp-11],dx
 12759 00002A90 8956F5                  	MOV	bPosH,DX
 12760                                  	;mov	ax,[bp-3]
 12761 00002A93 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 12762 00002A96 F7E3                    	MUL	BX
 12763                                  	;mov	[bp-15],ax
 12764 00002A98 8946F1                  	MOV	cByte,AX
 12765                                  
 12766                                  ;hkn; 	SS override
 12767 00002A9B 360306[F802]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 12768 00002AA0 83D200                  	ADC	DX,0
 12769 00002AA3 7419                    	JZ	short DoOper
 12770                                  	;mov	byte [bp-1],2
 12771 00002AA5 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 12772                                  
 12773                                  ;hkn; 	SS override
 12774 00002AA9 36A1[F802]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 12775 00002AAD F7D8                    	NEG	AX
 12776 00002AAF 7501                    	JNZ	short DoDiv
 12777 00002AB1 48                      	DEC	AX
 12778                                  DoDiv:
 12779 00002AB2 31D2                    	XOR	DX,DX
 12780 00002AB4 F7F3                    	DIV	BX
 12781                                  	;mov	[bp-3],ax
 12782 00002AB6 8946FD                  	MOV	cRec,AX
 12783 00002AB9 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 12784                                  	;mov	[bp-15],ax
 12785 00002ABB 8946F1                  	MOV	cByte,AX		;	}
 12786                                  DoOper:
 12787 00002ABE 31DB                    	XOR	BX,BX
 12788                                  	;mov	[bp-17],bx
 12789 00002AC0 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 12790                                  	;cmp	[bp-15],bx
 12791 00002AC3 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 12792 00002AC6 7506                    	JNZ	short DoGetExt
 12793                                  	;test	byte [bp-1],2
 12794 00002AC8 F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 12795                                  	;JZ	short DoGetExt
 12796                                  	;JMP	short SkipOp
 12797 00002ACC 7576                    	jnz	short SkipOp
 12798                                  DoGetExt:
 12799 00002ACE E8D2FE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 12800 00002AD1 730F                    	JNC	short ContinueOp
 12801                                  FCBDeath:
 12802 00002AD3 E8E4EC                  	call	FCB_RET_ERR		; signal error, map for extended
 12803                                  	;mov	word [bp-19],0
 12804 00002AD6 C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 12805                                  	;mov	byte [bp-1],1
 12806 00002ADB C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 12807 00002ADF E9F000                  	JMP	FCBSave 		; bam!
 12808                                  ContinueOp:
 12809                                  	;mov	ax,[si+10h]
 12810 00002AE2 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 12811                                  	;mov	[es:di+11h],ax
 12812 00002AE5 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 12813                                  	;mov	ax,[si+12h]
 12814 00002AE9 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 12815                                  	;mov	[es:di+13h],ax
 12816 00002AEC 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 12817                                  	;mov	ax,[bp-13]
 12818 00002AF0 8B46F3                  	MOV	AX,bPosL
 12819                                  	;mov	dx,[bp-11]
 12820 00002AF3 8B56F5                  	MOV	DX,bPosH
 12821                                  	;mov	[es:di+15h],ax
 12822 00002AF6 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 12823                                  	;xchg	dx,[es:di+17h]
 12824 00002AFA 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 12825 00002AFE 52                      	PUSH	DX			; save away Open age.
 12826                                  	;mov	cx,[bp-15]
 12827 00002AFF 8B4EF1                  	MOV	CX,cByte		;	cResult =
 12828                                  
 12829                                  ;hkn; DOS_Read is in DOSCODE
 12830 00002B02 BF[C73E]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 12831                                  	;test	byte [bp-20],4
 12832 00002B05 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 12833 00002B09 7503                    	JNZ	short DoContext
 12834                                  
 12835                                  ;hkn; DOS_Write is in DOSCODE
 12836 00002B0B BF[5240]                	MOV	DI,DOS_WRITE
 12837                                  DoContext:
 12838 00002B0E 55                      	push	bp
 12839 00002B0F 1E                      	push	ds
 12840 00002B10 56                      	push	si
 12841                                  
 12842                                  ;hkn; SS is DOSDATA
 12843 00002B11 16                      	push	ss
 12844 00002B12 1F                      	pop	ds
 12845                                  
 12846                                  ;; Fix for disk full
 12847 00002B13 FFD7                    	CALL	DI
 12848                                  	
 12849 00002B15 5E                      	pop	si
 12850 00002B16 1F                      	pop	ds
 12851 00002B17 5D                      	pop	bp
 12852 00002B18 72B9                    	JC	short FCBDeath
 12853                                  	
 12854 00002B1A 36803E[C20F]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 12855 00002B20 740A                    	JZ	short NODSKFULL
 12856 00002B22 36C606[C20F]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 12857                                  	;mov	byte [bp-1],1 
 12858 00002B28 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 12859                                  NODSKFULL:
 12860                                  ;; Fix for disk full
 12861                                  	;mov	[bp-17],cx
 12862 00002B2C 894EEF                  	MOV	cResult,CX
 12863 00002B2F E830FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 12864                                  	;pop	word [es:di+17h]	
 12865 00002B32 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 12866                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 12867                                  	;mov	ax,[es:di+11h]
 12868 00002B36 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 12869                                  	;mov	[si+10h],ax
 12870 00002B3A 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 12871                                  	;mov	ax,[es:di+13h]
 12872 00002B3D 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 12873                                  	;mov	[si+12h],ax
 12874 00002B41 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 12875                                  					;	}
 12876                                  SkipOp:
 12877                                  	;mov	ax,[bp-17]
 12878 00002B44 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 12879 00002B47 31D2                    	XOR	DX,DX
 12880                                  	;div	word [bp-9]
 12881 00002B49 F776F7                  	DIV	RecSize
 12882                                  	;mov	[bp-19],ax
 12883 00002B4C 8946ED                  	MOV	cRecRes,AX
 12884                                  	;add	[bp-7],ax
 12885 00002B4F 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 12886                                  	;adc	word [bp-5],0
 12887 00002B52 8356FB00                	ADC	RecPosH,0
 12888                                  ;
 12889                                  ; If we have not gotten the expected number of records, we signal an EOF
 12890                                  ; condition. On input, this is EOF.  On output this is usually disk full.
 12891                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 12892                                  ; do we.
 12893                                  ;
 12894                                  	;cmp	ax,[bp-3]
 12895 00002B56 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 12896 00002B59 7412                    	JZ	short TryBlank
 12897                                  	;test	byte [bp-20],4
 12898 00002B5B F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 12899 00002B5F 7508                    	JNZ	short SetEOF
 12900                                  	;test	word [es:di+5],80h
 12901 00002B61 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12902 00002B67 7504                    	JNZ	short TryBlank
 12903                                  SetEOF:
 12904                                  	;mov	byte [bp-1],1
 12905 00002B69 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 12906                                  TryBlank:				;
 12907 00002B6D 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 12908 00002B6F 7426                    	JZ	short SetExt
 12909                                  	;add	word [bp-7],1
 12910 00002B71 8346F901                	ADD	RecPosL,1		;	RecPos++;
 12911                                  	;adc	word [bp-5],0
 12912 00002B75 8356FB00                	ADC	RecPosH,0
 12913                                  	;test	byte [bp-20],4
 12914 00002B79 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 12915 00002B7D 7418                    	JZ	short SetExt
 12916                                  	;inc	word [bp-19]
 12917 00002B7F FF46ED                  	INC	cRecRes 		;	cRecRes++;
 12918                                  	;mov	byte [bp-1],3
 12919 00002B82 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 12920                                  	;mov	cx,[bp-9]
 12921 00002B86 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 12922 00002B89 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 12923 00002B8B 30C0                    	XOR	AL,AL
 12924                                  ;hkn; 	SS override
 12925 00002B8D 36C43E[F802]            	les     di,[ss:DMAADD]
 12926                                  	;add	di,[bp-17]
 12927 00002B92 037EEF                  	ADD	DI,cResult
 12928 00002B95 F3AA                    	REP	STOSB			;   }	}
 12929                                  SetExt:
 12930                                  	;mov	dx,[bp-5]
 12931 00002B97 8B56FB                  	MOV	DX,RecPosH
 12932                                  	;mov	ax,[bp-7]
 12933 00002B9A 8B46F9                  	MOV	AX,RecPosL
 12934                                  	;test	byte [bp-20],2
 12935 00002B9D F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 12936 00002BA1 7406                    	JZ	short DoSetExt
 12937                                  	;test	byte [bp-20],8
 12938 00002BA3 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 12939 00002BA7 7403                    	JZ	short TrySetRR
 12940                                  DoSetExt:
 12941 00002BA9 E868FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 12942                                  TrySetRR:
 12943                                  	;test	byte [bp-20],8
 12944 00002BAC F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 12945 00002BB0 740F                    	JZ	short TryReturn
 12946                                  	;mov	[si+21h],ax
 12947 00002BB2 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 12948                                  	;mov	[si+23h],dl
 12949 00002BB5 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 12950                                  	;cmp	word [si+0Eh],64
 12951 00002BB8 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 12952 00002BBC 7303                    	JAE	short TryReturn
 12953                                  	;mov	[si+24h],dh
 12954 00002BBE 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 12955                                  TryReturn: 
 12956                                  	;test	byte [bp-20],4
 12957 00002BC1 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 12958 00002BC5 750B                    	JNZ	short FCBSave
 12959 00002BC7 1E                      	push	ds			;	FCB->FDate = date;
 12960 00002BC8 E889ED                  	call	DATE16			;	FCB->FTime = time;
 12961 00002BCB 1F                      	pop	ds
 12962                                  	;mov	[si+14h],ax
 12963 00002BCC 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 12964                                  	;mov	[si+16h],dx
 12965 00002BCF 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 12966                                  FCBSave: 
 12967                                  	;test	byte [bp-20],8
 12968 00002BD2 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 12969 00002BD6 7409                    	jz	short DoReturn
 12970                                  	;mov	cx,[bp-19]
 12971 00002BD8 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 12972 00002BDB E86BEA                  	call    Get_User_Stack
 12973                                  	;mov	[si+4],cx
 12974 00002BDE 894C04                  	MOV	[SI+user_env.user_CX],CX
 12975                                  DoReturn:
 12976                                  	;mov	al,[bp-1]
 12977 00002BE1 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 12978                                  	;Leave	
 12979 00002BE4 89EC                    	mov     sp,bp
 12980 00002BE6 5D                      	pop     bp
 12981 00002BE7 C3                      	retn
 12982                                  
 12983                                  ; 24/07/2018 - Retro DOS v3.2
 12984                                  ; 22/07/2018 - Retro DOS v3.0
 12985                                  
 12986                                  ;Break <$FCB_Open - open an old-style FCB>
 12987                                  ;---------------------------------------------------------------------------
 12988                                  ;
 12989                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 12990                                  ;	for us and asked to have the rest filled in.
 12991                                  ;
 12992                                  ;   Inputs:	DS:DX point to an unopenned FCB
 12993                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 12994                                  ;		FCB has the following fields filled in:
 12995                                  ;		    Time/Date Extent/NR Size
 12996                                  ;---------------------------------------------------------------------------
 12997                                  
 12998                                  _$FCB_OPEN:			; System call 15
 12999                                  
 13000 00002BE8 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 13001                                  
 13002                                  ;hkn; DOS_Open is in DOSCODE
 13003 00002BEB B9[EF37]                	MOV	CX,DOS_OPEN
 13004                                  
 13005                                  ; The following is common code for Creation and openning of FCBs. AX is
 13006                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 13007                                  ; the FCB
 13008                                  
 13009                                  DoAccess:
 13010 00002BEE 1E                      	push	ds
 13011 00002BEF 52                      	push	dx
 13012 00002BF0 51                      	push	cx
 13013 00002BF1 50                      	push	ax			; save FCB pointer away
 13014                                  
 13015                                  ;hkn; 	OpenBuf is in DOSDATA
 13016 00002BF2 BF[8203]                	MOV	DI,OPENBUF
 13017 00002BF5 E83441                  	call	TransFCB		; crunch the fcb
 13018 00002BF8 58                      	pop	ax
 13019 00002BF9 59                      	pop	cx
 13020 00002BFA 5A                      	pop	dx
 13021 00002BFB 1F                      	pop	ds			; get fcb
 13022 00002BFC 7303                    	JNC	short FindFCB		; everything seems ok
 13023                                  FCBOpenErr:
 13024                                  	; AL has error code
 13025 00002BFE E9B9EB                  	jmp	FCB_RET_ERR
 13026                                  FindFCB:
 13027 00002C01 E82AFE                  	call	GetExtended		; DS:SI will point to FCB
 13028                                  
 13029                                  	; 17/05/2019 - Retro DOS v4.0
 13030                                  
 13031                                  	; MSDOS 3.3
 13032                                  	;call	LRUFCB
 13033                                  	;jc	short HardMessage
 13034                                  
 13035                                  	; MSDOS 6.0
 13036 00002C04 50                      	push	ax
 13037 00002C05 B001                    	mov	al,1			;indicate Open/Create operation
 13038 00002C07 E828FB                  	call	LRUFCB			; get a sft entry (no error)
 13039 00002C0A 58                      	pop	ax
 13040 00002C0B 722A                    	jc	short HardMessage
 13041                                  	
 13042                                  	;mov	word [es:di+2],8000h
 13043 00002C0D 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 13044 00002C13 1E                      	push	ds
 13045 00002C14 56                      	push	si
 13046 00002C15 53                      	push	bx			; save fcb pointer
 13047 00002C16 89CE                    	MOV	SI,CX
 13048                                  
 13049                                  ;hkn; SS is DOSDATA
 13050 00002C18 16                      	push	ss
 13051 00002C19 1F                      	pop	ds			; let DOS_Open see variables
 13052 00002C1A FFD6                    	CALL	SI			; go open the file
 13053 00002C1C 5B                      	pop	bx
 13054 00002C1D 5E                      	pop	si
 13055 00002C1E 1F                      	pop	ds			; get fcb
 13056                                  
 13057                                  ;hkn; SS override
 13058 00002C1F 36C43E[5A05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 13059 00002C24 7319                    	JNC	short FCBOK		; operation succeeded
 13060                                  failopen:
 13061 00002C26 50                      	PUSH	AX
 13062 00002C27 B052                    	MOV	AL,"R"                  ; clear out field (free sft)
 13063 00002C29 E8E4FC                  	call	BlastSFT
 13064 00002C2C 58                      	POP	AX
 13065                                  	;cmp	ax,4
 13066 00002C2D 83F804                  	CMP	AX,error_too_many_open_files
 13067 00002C30 7405                    	JZ	short HardMessage
 13068                                  	;cmp	ax,24h
 13069 00002C32 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 13070 00002C35 7505                    	jnz	short DeadFCB
 13071                                  HardMessage:
 13072 00002C37 50                      	PUSH	AX
 13073 00002C38 E89CFD                  	call	FCBHardErr
 13074 00002C3B 58                      	POP	AX
 13075                                  DeadFCB:
 13076 00002C3C E97BEB                  	jmp	FCB_RET_ERR
 13077                                  FCBOK:
 13078                                  	; MSDOS 6.0
 13079 00002C3F E844F4                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 13080 00002C42 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 13081 00002C44 E81D4A                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 13082 00002C47 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 13083                                  ;SR;
 13084                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 13085                                  ; LocalSFT variable to reflect this.
 13086                                  
 13087 00002C49 36893E[C50F]            	mov	[ss:LocalSFT],di
 13088 00002C4E 368C06[C70F]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 13089                                  ;;SR;
 13090                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 13091                                  ;;
 13092                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 13093                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 13094                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 13095                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 13096                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 13097                                  
 13098                                  FCBOK2:
 13099                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13100 00002C53 26FF05                  	inc	word [es:di]
 13101                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 13102 00002C56 E809FA                  	call	SaveFCBInfo
 13103                                  	; MSDOS 3.3
 13104                                  	;call	SetOpenAge
 13105                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13106                                  	;test	word [es:di+5],80h
 13107                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13108 00002C59 26F6450580              	test	byte  [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 13109 00002C5E 7509                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 13110 00002C60 8A04                    	MOV	AL,[SI]			; get drive byte
 13111 00002C62 E85040                  	call	GETTHISDRV		; convert
 13112 00002C65 FEC0                    	INC	AL
 13113 00002C67 8804                    	MOV	[SI],AL			; stash in good drive letter
 13114                                  FCBNoDrive:
 13115                                  	;mov	word [si+0Eh],128
 13116 00002C69 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 13117                                  
 13118                                  	;mov	ax,[es:di+0Dh]
 13119 00002C6E 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 13120                                  	;mov	[si+16h],ax
 13121 00002C72 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 13122                                  	;mov	ax,[es:di+0Fh]
 13123 00002C75 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 13124                                  	;mov	[si+14h],ax
 13125 00002C79 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13126                                  	;mov	ax,[es:di+11h]
 13127 00002C7C 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 13128                                  	;mov	[si+10h],ax
 13129 00002C80 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13130                                  	;mov	ax,[es:di+13h]
 13131 00002C83 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13132                                  	;mov	[si+12h],ax
 13133 00002C87 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13134 00002C8A 31C0                    	XOR	AX,AX			; convenient zero
 13135                                  	;mov	[si+0Ch],ax
 13136 00002C8C 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 13137                                  
 13138                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 13139                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 13140                                  
 13141                                  ;hkn; 	SS override
 13142 00002C8F 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 13143                                  	;mov	ah,[es:di+4]
 13144 00002C94 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 13145                                  OpenScan:
 13146                                  	;cmp	al,[si+18h]
 13147 00002C98 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 13148 00002C9B 7407                    	JZ	short SkipCheck
 13149 00002C9D 50                      	push	ax			; preserve count
 13150 00002C9E E885FC                  	call	CheckFCB		; do they match
 13151 00002CA1 58                      	pop	ax			; get count back
 13152 00002CA2 7309                    	JNC	short OpenFound		; found a match!
 13153                                  SkipCheck:
 13154 00002CA4 FEC0                    	INC	AL			; advance to next FCB
 13155 00002CA6 38E0                    	CMP	AL,AH			; table full?
 13156 00002CA8 75EE                    	JNZ	short OpenScan		; no, go for more
 13157                                  OpenDone:
 13158 00002CAA 30C0                    	xor	al,al			; return success
 13159 00002CAC C3                      	retn
 13160                                  
 13161                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 13162                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 13163                                  ; Consider:
 13164                                  ;
 13165                                  ;   open (foo)	delete (foo) open (bar)
 13166                                  ;
 13167                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 13168                                  ; foo even though foo is no longer needed; this is due to the server closing
 13169                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 13170                                  ; If we were to CLOSE bar, the server would then close the only reference to
 13171                                  ; bar and subsequent I/O would be lost to the redirector.
 13172                                  ;
 13173                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 13174                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 13175                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 13176                                  ; around. This will allow us to access the same file through multiple network
 13177                                  ; connections and NOT prematurely terminate when the ref count on one
 13178                                  ; connection goes to zero.
 13179                                  
 13180                                  OpenFound:
 13181                                  	;mov	[si+18h],al
 13182 00002CAD 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 13183 00002CB0 26FF05                  	inc	word [es:di]
 13184                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] 
 13185                                  					; remember this new invocation
 13186 00002CB3 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 13187                                  	;mov	[es:di+15h],ax
 13188 00002CB7 26894515                	MOV	[ES:DI+sf_LRU],AX
 13189                                  ;
 13190                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 13191                                  ; blast it to prevent other reuse.
 13192                                  ;
 13193 00002CBB 16                      	push	ss
 13194 00002CBC 1F                      	pop	ds
 13195 00002CBD C43E[5A05]              	LES	DI,[THISSFT]
 13196 00002CC1 26FF0D                  	dec	word [es:di]
 13197                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13198                                  					; free the newly allocated SFT
 13199 00002CC4 E8CF49                  	call	ShareEnd
 13200 00002CC7 B043                    	MOV	AL,'C'
 13201 00002CC9 E844FC                  	call	BlastSFT
 13202 00002CCC EBDC                    	JMP	short OpenDone
 13203                                  
 13204                                  ;BREAK	<$FCB_Create - create a new directory entry>
 13205                                  ;----------------------------------------------------------------------------
 13206                                  ;
 13207                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 13208                                  ;	FCB for us and asked to have the rest filled in.
 13209                                  ;
 13210                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13211                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13212                                  ;		FCB has the following fields filled in:
 13213                                  ;		    Time/Date Extent/NR Size
 13214                                  ;----------------------------------------------------------------------------
 13215                                  
 13216                                  _$FCB_CREATE:		; System call 22
 13217                                  
 13218                                  ;hkn; DOS_Create is in DOSCODE
 13219 00002CCE B9[5937]                	MOV	CX,DOS_CREATE		; routine to call
 13220 00002CD1 31C0                    	XOR	AX,AX			; attributes to create
 13221 00002CD3 E858FD                  	call	GetExtended		; get extended FCB
 13222 00002CD6 7403                    	JZ	short DoAccessJ		; not an extended FCB
 13223 00002CD8 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 13224                                  DoAccessJ:
 13225 00002CDB E910FF                  	JMP	DoAccess		; do dirty work
 13226                                  
 13227                                  ; 22/07/2018 - Retro DOS v3.0
 13228                                  
 13229                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13230                                  ;----------------------------------------------------------------------------
 13231                                  ;
 13232                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13233                                  ;	and write a number of blocks from it.
 13234                                  ;
 13235                                  ;   Inputs:	DS:DX point to an FCB
 13236                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13237                                  ;		AL <> 0 Not enough room on disk for the output
 13238                                  ;
 13239                                  ;----------------------------------------------------------------------------
 13240                                  
 13241                                  _$FCB_RANDOM_WRITE_BLOCK:
 13242                                  	;mov	AL,0Ah	
 13243 00002CDE B00A                    	MOV	AL,RANDOM+BLOCK
 13244 00002CE0 E965FD                  	JMP	FCBIO
 13245                                  
 13246                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13247                                  ;----------------------------------------------------------------------------
 13248                                  ;
 13249                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13250                                  ;	and read a number of blocks from it.
 13251                                  ;
 13252                                  ;   Inputs:	DS:DX point to an FCB
 13253                                  ;   Outputs:	AL = error codes defined above
 13254                                  ;
 13255                                  ;----------------------------------------------------------------------------
 13256                                  
 13257                                  _$FCB_RANDOM_READ_BLOCK:
 13258                                  	;mov	AL,0Eh	
 13259 00002CE3 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13260 00002CE5 E960FD                  	JMP	FCBIO
 13261                                  
 13262                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13263                                  ;----------------------------------------------------------------------------
 13264                                  ;
 13265                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13266                                  ;	memory
 13267                                  ;
 13268                                  ;   Inputs:	DS:DX point to an FCB
 13269                                  ;   Outputs:	AL = error codes defined above
 13270                                  ;
 13271                                  ;----------------------------------------------------------------------------
 13272                                  
 13273                                  _$FCB_SEQ_READ:
 13274                                  	;mov	AL,4	
 13275 00002CE8 B004                    	MOV	AL,FCBREAD
 13276 00002CEA E95BFD                  	JMP	FCBIO
 13277                                  
 13278                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13279                                  ;----------------------------------------------------------------------------
 13280                                  ;
 13281                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13282                                  ;	file
 13283                                  ;
 13284                                  ;   Inputs:	DS:DX point to an FCB
 13285                                  ;   Outputs:	AL = error codes defined above
 13286                                  ;
 13287                                  ;----------------------------------------------------------------------------
 13288                                  
 13289                                  _$FCB_SEQ_WRITE:
 13290 00002CED B000                    	MOV	AL,0
 13291 00002CEF E956FD                  	jmp	FCBIO
 13292                                  
 13293                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13294                                  ;----------------------------------------------------------------------------
 13295                                  ;
 13296                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13297                                  ;	record from it.
 13298                                  ;
 13299                                  ;   Inputs:	DS:DX point to an FCB
 13300                                  ;   Outputs:	AL = error codes defined above
 13301                                  ;
 13302                                  ;----------------------------------------------------------------------------
 13303                                  
 13304                                  _$FCB_RANDOM_READ:
 13305                                  	;mov	AL,6	
 13306 00002CF2 B006                    	MOV	AL,RANDOM+FCBREAD
 13307 00002CF4 E951FD                  	jmp	FCBIO			; single block
 13308                                  
 13309                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13310                                  ;----------------------------------------------------------------------------
 13311                                  ;
 13312                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13313                                  ;	a record to it.
 13314                                  ;
 13315                                  ;   Inputs:	DS:DX point to an FCB
 13316                                  ;   Outputs:	AL = error codes defined above
 13317                                  ;
 13318                                  ;----------------------------------------------------------------------------
 13319                                  
 13320                                  _$FCB_RANDOM_WRITE:
 13321                                  	;mov	AL,2	
 13322 00002CF7 B002                    	MOV	AL,RANDOM
 13323 00002CF9 E94CFD                  	jmp	FCBIO
 13324                                  
 13325                                  ;============================================================================
 13326                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 13327                                  ;============================================================================
 13328                                  ; 22/07/2018 - Retro DOS v3.0
 13329                                  
 13330                                  ;**	Search.asm
 13331                                  ;
 13332                                  ;	Directory search system calls.
 13333                                  ;	These will be passed direct text of the pathname from the user. 
 13334                                  ;	They will need to be passed through the macro expander prior to
 13335                                  ;	being sent through the low-level stuff. 
 13336                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 13337                                  ;
 13338                                  ;	$Dir_Search_First	  written
 13339                                  ;	$Dir_Search_Next	  written
 13340                                  ;	$Find_First	  written
 13341                                  ;	$Find_Next		  written
 13342                                  ;	PackName		  written
 13343                                  ;
 13344                                  ;	Modification history:
 13345                                  ;
 13346                                  ;	  Created: ARR 4 April 1983
 13347                                  
 13348                                  ;----------------------------------------------------------------------------
 13349                                  ; Procedure Name : $DIR_SEARCH_FIRST
 13350                                  ;
 13351                                  ; Inputs:
 13352                                  ;	DS:DX Points to unopenned FCB
 13353                                  ; Function:
 13354                                  ;	Directory is searched for first matching entry and the directory
 13355                                  ;	entry is loaded at the disk transfer address
 13356                                  ; Returns:
 13357                                  ;	AL = -1 if no entries matched, otherwise 0
 13358                                  ;----------------------------------------------------------------------------
 13359                                  
 13360                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 13361                                  
 13362                                  _$DIR_SEARCH_FIRST:
 13363 00002CFC 368916[6205]            	MOV	[SS:THISFCB],DX
 13364 00002D01 368C1E[6405]            	MOV	[SS:THISFCB+2],DS
 13365 00002D06 89D6                    	MOV	SI,DX
 13366 00002D08 803CFF                  	CMP	BYTE [SI],0FFH
 13367 00002D0B 7503                    	JNZ	short NORMFCB4
 13368 00002D0D 83C607                  	ADD	SI,7			; Point to drive select byte
 13369                                  NORMFCB4:
 13370 00002D10 FF34                    	push	word [SI]		; Save original drive byte for later
 13371                                  
 13372 00002D12 16                      	push	ss
 13373 00002D13 07                      	pop	es			; get es to address DOSGroup
 13374                                  
 13375 00002D14 BF[8203]                	MOV	DI,OPENBUF		; appropriate buffer
 13376 00002D17 E81240                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 13377 00002D1A 7304                    	JNC	short SearchIt		; no error, go and look
 13378 00002D1C 5B                      	pop	bx			; Clean stack
 13379                                  ;
 13380                                  ; Error code is in AX
 13381                                  ;
 13382 00002D1D E99AEA                  	jmp	FCB_RET_ERR		; error
 13383                                  
 13384                                  SearchIt:
 13385 00002D20 16                      	push	ss
 13386 00002D21 1F                      	pop	ds			; get ready for search
 13387 00002D22 FF36[F802]              	push	word [DMAADD]
 13388 00002D26 FF36[FA02]              	push	word [DMAADD+2]
 13389 00002D2A C706[F802][8204]        	MOV	WORD [DMAADD],SEARCHBUF
 13390 00002D30 8C1E[FA02]              	MOV	WORD [DMAADD+2],DS
 13391                                  	; MSDOS 6.0
 13392                                  	;call	GET_FAST_SEARCH 	; search
 13393                                  	; MSDOS 3.3
 13394 00002D34 E84E0C                  	call	DOS_SEARCH_FIRST
 13395 00002D37 8F06[FA02]              	pop	word [DMAADD+2]
 13396 00002D3B 8F06[F802]              	pop	word [DMAADD]
 13397 00002D3F 7304                    	JNC	short SearchSet		; no error, transfer info
 13398 00002D41 5B                      	pop	bx			; Clean stack
 13399                                  ;
 13400                                  ; Error code is in AX
 13401                                  ;
 13402 00002D42 E975EA                  	jmp	FCB_RET_ERR
 13403                                  
 13404                                  ;
 13405                                  ; The search was successful (or the search-next). We store the information
 13406                                  ; into the user's FCB for continuation.
 13407                                  ;
 13408                                  SearchSet:
 13409 00002D45 BE[8204]                	MOV	SI,SEARCHBUF
 13410 00002D48 C43E[6205]              	LES	DI,[THISFCB]		; point to the FCB
 13411 00002D4C F606[2905]FF            	TEST	byte [EXTFCB],0FFh		;
 13412 00002D51 7403                    	JZ	short NORMFCB1
 13413 00002D53 83C707                  	ADD	DI,7			; Point past the extension
 13414                                  NORMFCB1:
 13415 00002D56 5B                      	pop	bx			; Get original drive byte
 13416 00002D57 08DB                    	OR	BL,BL
 13417 00002D59 7506                    	JNZ	short SearchDrv
 13418 00002D5B 8A1E[0203]              	MOV	BL,[CURDRV]
 13419 00002D5F FEC3                    	INC	BL
 13420                                  SearchDrv:
 13421 00002D61 AC                      	LODSB				; Get correct search contin drive byte
 13422 00002D62 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 13423 00002D64 47                      	INC	DI
 13424                                  	;STOSB				; Store the correct "user" drive byte
 13425                                  					;  at the start of the search info
 13426 00002D65 B90A00                  	MOV	CX,20/2
 13427 00002D68 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 13428 00002D6A 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 13429                                  					;   byte to AL
 13430 00002D6C AA                      	STOSB				; Search contin drive byte at end of
 13431                                  					;   contin info
 13432 00002D6D C43E[F802]              	LES	DI,[DMAADD]
 13433 00002D71 F606[2905]FF            	TEST	byte [EXTFCB],0FFh
 13434 00002D76 740E                    	JZ	short NORMFCB2
 13435 00002D78 B0FF                    	MOV	AL,0FFh
 13436 00002D7A AA                      	STOSB
 13437 00002D7B FEC0                    	INC	AL
 13438 00002D7D B90500                  	MOV	CX,5
 13439 00002D80 F3AA                    	REP	STOSB
 13440 00002D82 A0[2A05]                	MOV	AL,[SATTRIB]
 13441 00002D85 AA                      	STOSB
 13442                                  NORMFCB2:
 13443 00002D86 88D8                    	MOV	AL,BL			; User Drive byte
 13444 00002D88 AA                      	STOSB
 13445 00002D89 B91000                  	MOV	CX,16			; 32 / 2 words of dir entry
 13446 00002D8C F3A5                    	REP	MOVSW
 13447 00002D8E E926EA                  	jmp	FCB_RET_OK
 13448                                  
 13449                                  ;----------------------------------------------------------------------------
 13450                                  ;
 13451                                  ; Procedure Name : $DIR_SEARCH_NEXT
 13452                                  ;
 13453                                  ; Inputs:
 13454                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 13455                                  ; Function:
 13456                                  ;	Directory is searched for the next matching entry and the directory
 13457                                  ;	entry is loaded at the disk transfer address
 13458                                  ; Returns:
 13459                                  ;	AL = -1 if no entries matched, otherwise 0
 13460                                  ;----------------------------------------------------------------------------
 13461                                  
 13462                                  _$DIR_SEARCH_NEXT:
 13463 00002D91 368916[6205]            	MOV	[SS:THISFCB],DX
 13464 00002D96 368C1E[6405]            	MOV	[SS:THISFCB+2],DS
 13465 00002D9B 36C606[2A05]00          	MOV	byte [SS:SATTRIB],0
 13466 00002DA1 36C606[2905]00          	MOV	byte [SS:EXTFCB],0
 13467                                  
 13468 00002DA7 16                      	push	ss
 13469 00002DA8 07                      	pop	es
 13470                                  
 13471 00002DA9 BF[8204]                	MOV	DI,SEARCHBUF
 13472                                  
 13473 00002DAC 89D6                    	MOV	SI,DX
 13474 00002DAE 803CFF                  	CMP	BYTE [SI],0FFh
 13475 00002DB1 750D                    	JNZ	short NORMFCB6
 13476 00002DB3 83C606                  	ADD	SI,6
 13477 00002DB6 AC                      	LODSB
 13478                                  
 13479 00002DB7 36A2[2A05]              	MOV	[SS:SATTRIB],AL
 13480 00002DBB 36FE0E[2905]            	DEC	byte [SS:EXTFCB]
 13481                                  NORMFCB6:
 13482 00002DC0 AC                      	LODSB				; Get original user drive byte
 13483 00002DC1 50                      	push	ax			; Put it on stack
 13484 00002DC2 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 13485 00002DC5 AA                      	STOSB				; Put in correct place
 13486 00002DC6 B90A00                  	MOV	CX,20/2
 13487 00002DC9 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 13488                                  
 13489 00002DCB 16                      	push	ss
 13490 00002DCC 1F                      	pop	ds
 13491                                  
 13492 00002DCD FF36[F802]              	push	word [DMAADD]
 13493 00002DD1 FF36[FA02]              	push	word [DMAADD+2]
 13494 00002DD5 C706[F802][8204]        	MOV	WORD [DMAADD],SEARCHBUF
 13495 00002DDB 8C1E[FA02]              	MOV	WORD [DMAADD+2],DS
 13496 00002DDF E8580C                  	call	DOS_SEARCH_NEXT 	; Find it
 13497 00002DE2 8F06[FA02]              	pop	word [DMAADD+2]
 13498 00002DE6 8F06[F802]              	pop	word [DMAADD]
 13499 00002DEA 7203                    	JC	short SearchNoMore
 13500 00002DEC E956FF                  	JMP	SearchSet		; Ok set return
 13501                                  
 13502                                  SearchNoMore:
 13503 00002DEF C43E[6205]              	LES	DI,[THISFCB]
 13504 00002DF3 F606[2905]FF            	TEST	byte [EXTFCB],0FFh
 13505 00002DF8 7403                    	JZ	short NORMFCB8
 13506 00002DFA 83C707                  	ADD	DI,7			; Point past the extension
 13507                                  NORMFCB8:
 13508 00002DFD 5B                      	pop	bx			; Get original drive byte
 13509 00002DFE 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 13510                                  					;  at the right spot
 13511                                  ;
 13512                                  ; error code is in AX
 13513                                  ;
 13514 00002E01 E9B6E9                  	jmp	FCB_RET_ERR
 13515                                  
 13516                                  ;---------------------------------------------------------------------------
 13517                                  ;
 13518                                  ;   Procedure Name : $FIND_FIRST
 13519                                  ; 
 13520                                  ;   Assembler usage:
 13521                                  ;	    MOV AH, FindFirst
 13522                                  ;	    LDS DX, name
 13523                                  ;	    MOV CX, attr
 13524                                  ;	    INT 21h
 13525                                  ;	; DMA address has datablock
 13526                                  ;
 13527                                  ;   Error Returns:
 13528                                  ;	    AX = error_path_not_found
 13529                                  ;	       = error_no_more_files
 13530                                  ;---------------------------------------------------------------------------
 13531                                  
 13532                                  _$FIND_FIRST:
 13533 00002E04 89D6                    	MOV	SI,DX			; get name in appropriate place
 13534 00002E06 36880E[2A05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 13535                                  
 13536 00002E0B BF[8203]                	MOV	DI,OPENBUF		; appropriate buffer
 13537                                  
 13538 00002E0E E8833F                  	call	TransPathSet		; convert the path
 13539 00002E11 7305                    	JNC	short Find_it 		; no error, go and look
 13540                                  FindError:
 13541                                  	;mov	al,3
 13542 00002E13 B003                    	mov	al, error_path_not_found ; error and map into one.
 13543 00002E15 E98CE9                  	jmp	SYS_RET_ERR
 13544                                  Find_it:
 13545 00002E18 16                      	push	ss
 13546 00002E19 1F                      	pop	ds
 13547                                  
 13548 00002E1A FF36[F802]              	push	word [DMAADD]
 13549 00002E1E FF36[FA02]              	push	word [DMAADD+2]
 13550 00002E22 C706[F802][8204]        	MOV	WORD [DMAADD],SEARCHBUF
 13551 00002E28 8C1E[FA02]              	MOV	WORD [DMAADD+2],DS
 13552                                  	; MSDOS 6.0
 13553                                  	;call	GET_FAST_SEARCH 	; search
 13554                                  	; MSDOS 3.3
 13555 00002E2C E8560B                  	call	DOS_SEARCH_FIRST
 13556 00002E2F 8F06[FA02]              	pop	word [DMAADD+2]
 13557 00002E33 8F06[F802]              	pop	word [DMAADD]
 13558 00002E37 7303                    	JNC	short FindSet 		; no error, transfer info
 13559 00002E39 E968E9                  	jmp	SYS_RET_ERR
 13560                                  
 13561                                  FindSet:
 13562 00002E3C BE[8204]                	MOV	SI,SEARCHBUF
 13563 00002E3F C43E[F802]              	LES	DI,[DMAADD]
 13564 00002E43 B91500                  	MOV	CX,21
 13565 00002E46 F3A4                    	REP	MOVSB
 13566 00002E48 56                      	PUSH	SI			; Save pointer to start of entry
 13567                                  	;mov	al,[si+0Bh]
 13568 00002E49 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 13569 00002E4C AA                      	STOSB
 13570                                  	;add	si,16h
 13571 00002E4D 83C616                  	ADD	SI,dir_entry.dir_time
 13572 00002E50 A5                      	MOVSW				; dir_time
 13573 00002E51 A5                      	MOVSW				; dir_date
 13574 00002E52 46                      	INC	SI
 13575 00002E53 46                      	INC	SI			; Skip dir_first
 13576 00002E54 A5                      	MOVSW				; dir_size (2 words)
 13577 00002E55 A5                      	MOVSW
 13578 00002E56 5E                      	POP	SI			; Point back to dir_name
 13579 00002E57 E83600                   	CALL	PackName
 13580 00002E5A E93EE9                  	jmp	SYS_RET_OK		; bye with no errors
 13581                                  
 13582                                  ;---------------------------------------------------------------------------
 13583                                  ;
 13584                                  ;   Procedure Name : $FIND_NEXT
 13585                                  ;
 13586                                  ;   Assembler usage:
 13587                                  ;	; dma points at area returned by find_first
 13588                                  ;	    MOV AH, findnext
 13589                                  ;	    INT 21h
 13590                                  ;	; next entry is at dma
 13591                                  ;
 13592                                  ;   Error Returns:
 13593                                  ;	    AX = error_no_more_files
 13594                                  ;---------------------------------------------------------------------------
 13595                                  
 13596                                  _$FIND_NEXT:
 13597 00002E5D 16                      	push	ss
 13598 00002E5E 07                      	pop	es
 13599                                  
 13600 00002E5F BF[8204]                	MOV	DI,SEARCHBUF
 13601                                  
 13602 00002E62 36C536[F802]            	LDS	SI,[SS:DMAADD]
 13603                                  
 13604 00002E67 B91500                  	MOV	CX,21
 13605 00002E6A F3A4                    	REP	MOVSB			; Put the search continuation info
 13606                                  					;  in the right place
 13607 00002E6C 16                      	push	ss
 13608 00002E6D 1F                      	pop	ds			; get ready for search
 13609                                  	
 13610 00002E6E FF36[F802]              	push	word [DMAADD]
 13611 00002E72 FF36[FA02]              	push	word [DMAADD+2]
 13612 00002E76 C706[F802][8204]        	MOV	WORD [DMAADD],SEARCHBUF
 13613 00002E7C 8C1E[FA02]              	MOV	WORD [DMAADD+2],DS
 13614 00002E80 E8B70B                  	call	DOS_SEARCH_NEXT 	; Find it
 13615 00002E83 8F06[FA02]              	pop	word [DMAADD+2]
 13616 00002E87 8F06[F802]              	pop	word [DMAADD]
 13617 00002E8B 73AF                    	JNC	short FindSet 		; No error, set info
 13618 00002E8D E914E9                  	jmp	SYS_RET_ERR
 13619                                  
 13620                                  ;---------------------------------------------------------------------------
 13621                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 13622                                  ;
 13623                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 13624                                  ;	the ASCIZ format.
 13625                                  ;
 13626                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 13627                                  ;		(ES:DI) = destination area (13 bytes)
 13628                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 13629                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 13630                                  ;---------------------------------------------------------------------------
 13631                                  
 13632                                  PackName:
 13633                                  ;	Move over 8 characters to cover the name component, then trim it's
 13634                                  ;	trailing blanks.
 13635                                  
 13636 00002E90 B90800                  	MOV	CX,8			; Pack the name
 13637 00002E93 F3A4                    	REP	MOVSB			; Move all of it
 13638                                  main_kill_tail:
 13639 00002E95 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 13640 00002E9A 7507                    	JNZ	short find_check_dot
 13641 00002E9C 4F                      	DEC	DI			; Back up over trailing space
 13642 00002E9D 41                      	INC	CX
 13643 00002E9E 83F908                  	CMP	CX,8
 13644 00002EA1 72F2                    	JB	short main_kill_tail
 13645                                  find_check_dot:
 13646                                  	;CMP	WORD [SI],(" " << 8) | " "
 13647 00002EA3 813C2020                	cmp     word [si],2020h 
 13648 00002EA7 7506                    	JNZ	short got_ext 		; Some chars in extension
 13649 00002EA9 807C0220                	CMP	BYTE [SI+2]," "
 13650 00002EAD 7412                    	JZ	short find_done		; No extension
 13651                                  got_ext:
 13652 00002EAF B02E                    	MOV	AL,"."
 13653 00002EB1 AA                      	STOSB
 13654 00002EB2 B90300                  	MOV	CX,3
 13655 00002EB5 F3A4                    	REP	MOVSB
 13656                                  ext_kill_tail:
 13657 00002EB7 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 13658 00002EBC 7503                    	JNZ	short find_done
 13659 00002EBE 4F                      	DEC	DI			; Back up over trailing space
 13660 00002EBF EBF6                    	JMP	short ext_kill_tail
 13661                                  find_done:
 13662 00002EC1 31C0                    	XOR	AX,AX
 13663 00002EC3 AA                      	STOSB				; NUL terminate
 13664 00002EC4 C3                      	retn
 13665                                  
 13666                                  ;GET_FAST_SEARCH:
 13667                                  ;	; 22/07/2018
 13668                                  ;	; MSDOS 6.0
 13669                                  ;	OR	word [DOS34_FLAG],SEARCH_FASTOPEN 
 13670                                  ;					;FO.trigger fastopen ;AN000;
 13671                                  ;	call	DOS_SEARCH_FIRST
 13672                                  ;	retn
 13673                                  
 13674                                  
 13675                                  ;============================================================================
 13676                                  ; PATH.ASM, MSDOS 6.0, 1991
 13677                                  ;============================================================================
 13678                                  ; 06/08/2018 - Retro DOS v3.0
 13679                                  
 13680                                  ;**	Directory related system calls. These will be passed direct text of the
 13681                                  ;	pathname from the user. They will need to be passed through the macro
 13682                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 13683                                  ;	defined in DISPATCH. The system calls are:
 13684                                  ;
 13685                                  ;	$CURRENT_DIR  Written
 13686                                  ;	$RMDIR	  Written
 13687                                  ;	$CHDIR	  Written
 13688                                  ;	$MKDIR	  Written
 13689                                  ;
 13690                                  ;
 13691                                  ;	Modification history:
 13692                                  ;
 13693                                  ;	    Created: ARR 4 April 1983
 13694                                  ;		 MZ 10 May 1983     CurrentDir implemented
 13695                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 13696                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 13697                                  ;				    current directory.
 13698                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 13699                                  
 13700                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 13701                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 13702                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 13703                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 13704                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 13705                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 13706                                  ;	I_Need	cMeta,BYTE
 13707                                  ;	I_Need	DrvErr,BYTE					;AN000;
 13708                                  
 13709                                  
 13710                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 13711                                  ;---------------------------------------------------------------------------
 13712                                  ;
 13713                                  ;   Procedure Name : $CURRENT_DIR
 13714                                  ;
 13715                                  ;   Assembler usage:
 13716                                  ;		LDS	SI,area
 13717                                  ;		MOV	DL,drive
 13718                                  ;		INT	21h
 13719                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 13720                                  ;	    ; current directory.
 13721                                  ;   Error returns:
 13722                                  ;	    AX = error_invalid_drive
 13723                                  ;
 13724                                  ;---------------------------------------------------------------------------
 13725                                  
 13726                                  _$CURRENT_DIR:
 13727                                  	;06/08/2018 - Retro DOS v3.0
 13728                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 13729 00002EC5 E847F2                  	call	EcritDisk
 13730 00002EC8 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 13731 00002ECA E8D13D                  	call	GetVisDrv		; grab it
 13732 00002ECD 7308                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 13733                                  CurdirErr:
 13734 00002ECF E845F2                  	call	LcritDisk
 13735                                  	
 13736                                  	; MSDOS 6.0
 13737                                  	;MOV	AL,[CS:DrvErr]		;IFS.			;AN000;
 13738                                  
 13739                                  	; MSDOS 3.3
 13740 00002ED2 B00F                    	mov	al,0Fh
 13741                                  
 13742                                  curdir_errj:
 13743 00002ED4 E9CDE8                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 13744                                  
 13745                                  CurrentValidate:
 13746 00002ED7 1E                      	push	ds		; save destination
 13747 00002ED8 56                      	push	si
 13748 00002ED9 2EC536[5E05]            	LDS	SI,[CS:THISCDS]
 13749                                  	;TEST	word [SI+curdir.flags],curdir_isnet
 13750                                  	;JNZ	short DoCheck
 13751                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 13752                                  ; media check.
 13753                                  ;	CMP	word [SI+curdir.ID],0
 13754                                  ;	JZ	short GetDst
 13755                                  DoCheck:
 13756 00002EDE 2EC606[1603]00          	MOV	byte [cs:NoSetDir],0	; interested only in contents
 13757                                  
 13758 00002EE4 BF[8203]                	MOV	DI,OPENBUF
 13759                                  
 13760 00002EE7 E8791E                  	call	ValidateCDS		; output is ES:DI -> CDS
 13761 00002EEA 06                      	push	es	 		; swap source and destination
 13762 00002EEB 57                      	push	di
 13763 00002EEC 5E                      	pop	si
 13764 00002EED 1F                      	pop	ds
 13765                                  GetDst:
 13766 00002EEE 5F                      	pop	di
 13767 00002EEF 07                      	pop	es			; get real destination
 13768 00002EF0 72DD                    	JC	short CurdirErr
 13769                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 13770 00002EF2 03744F                  	ADD	SI,[SI+curdir.end]
 13771 00002EF5 803C5C                  	CMP	BYTE [SI],'\'		; root or subdirs present?
 13772 00002EF8 7501                    	JNZ	short CurrentCopy
 13773 00002EFA 46                      	INC	SI
 13774                                  CurrentCopy:
 13775                                  ;	call	FStrCpy
 13776                                  ;; 10/29/86 E5 char
 13777 00002EFB 50                      	PUSH	AX
 13778 00002EFC AC                      	LODSB				; get char
 13779 00002EFD 08C0                    	OR	AL,AL
 13780 00002EFF 7413                    	JZ	short FOK
 13781 00002F01 3C05                    	CMP	AL,05
 13782 00002F03 740D                    	JZ	short FCHANGE
 13783 00002F05 EB01                    	JMP	short FFF
 13784                                  FCPYNEXT:
 13785 00002F07 AC                      	LODSB				; get char
 13786                                  FFF:
 13787 00002F08 3C5C                    	CMP	AL,'\'			; beginning of directory
 13788 00002F0A 7508                    	JNZ	short FOK		; no
 13789 00002F0C AA                      	STOSB				; put into user's buffer
 13790 00002F0D AC                      	LODSB				; 1st char of dir is 05?
 13791 00002F0E 3C05                    	CMP	AL,05H
 13792 00002F10 7502                    	JNZ	short FOK		; no
 13793                                  FCHANGE:
 13794 00002F12 B0E5                    	MOV	AL,0E5H			; make it E5
 13795                                  FOK:
 13796 00002F14 AA                      	STOSB				; put into user's buffer
 13797 00002F15 08C0                    	OR	AL,AL			; final char
 13798 00002F17 75EE                    	JNZ	short FCPYNEXT		; no
 13799 00002F19 58                      	POP	AX
 13800                                  
 13801                                  ;; 10/29/86 E5 char
 13802 00002F1A 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 13803 00002F1C E8F8F1                  	call	LcritDisk
 13804 00002F1F E979E8                  	jmp	SYS_RET_OK		; no more, bye!
 13805                                  
 13806                                  
 13807                                  ;BREAK <$RmDir -- Remove a directory>
 13808                                  ;---------------------------------------------------------------------------
 13809                                  ;
 13810                                  ; Procedure Name : $RmDir
 13811                                  ;
 13812                                  ; Inputs:
 13813                                  ;	DS:DX Points to asciz name
 13814                                  ; Function:
 13815                                  ;	Delete directory if empty
 13816                                  ; Returns:
 13817                                  ;	STD XENIX Return
 13818                                  ;	AX = error_path_not_found If path bad
 13819                                  ;	AX = error_access_denied If
 13820                                  ;		Directory not empty
 13821                                  ;		Path not directory
 13822                                  ;		Root directory specified
 13823                                  ;		Directory malformed (. and .. not first two entries)
 13824                                  ;		User tries to delete a current directory
 13825                                  ;	AX = error_current_directory
 13826                                  ;
 13827                                  ;----------------------------------------------------------------------------
 13828                                  
 13829                                  _$RMDIR:
 13830 00002F22 52                      	push	dx			; Save ptr to name
 13831 00002F23 1E                      	push	ds
 13832 00002F24 89D6                    	mov	si,dx			; Load ptr into si
 13833 00002F26 BF[8203]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 13834 00002F29 57                      	push	di
 13835 00002F2A E86F3E                  	call	TransPathNoSet		; Translate the name
 13836 00002F2D 5F                      	pop	di			; di = ptr to buf for trans name
 13837 00002F2E 7307                    	jnc	short rmlset		; If transpath succeeded, continue
 13838 00002F30 1F                      	pop	ds
 13839 00002F31 5A                      	pop	dx			; Restore the	 name
 13840 00002F32 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 13841                                  	;jmp	short curdir_errj
 13842                                  rmdir_errj: ; 10/08/2018
 13843 00002F34 E96DE8                  	jmp	SYS_RET_ERR
 13844                                  rmlset:
 13845 00002F37 36803E[3705]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 13846 00002F3D 7512                    	Jnz	short rmerr		;	return (-1);
 13847 00002F3F 16                      	push	ss
 13848 00002F40 07                      	pop	es
 13849 00002F41 30C0                    	xor	al,al			; al = 0 , ie drive a:
 13850                                  rmloop: 
 13851 00002F43 E8C23D                  	call	GetCDSFromDrv		; Get curdir for drive in al
 13852 00002F46 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 13853 00002F48 E88CF0                  	call	StrCmp			; Are the 2 paths the same?
 13854 00002F4B 7404                    	jz	short rmerr		; Yes, report error.
 13855 00002F4D FEC0                    	inc	al			; No, inc al to next drive number
 13856 00002F4F EBF2                    	jmp	short rmloop		; Go check next drive.
 13857                                  rmerr:
 13858 00002F51 1F                      	pop	ds
 13859 00002F52 5A                      	pop	dx			; Restore the name
 13860 00002F53 B010                    	mov	al,error_current_directory ;  error
 13861                                  	;jmp	short curdir_errj
 13862 00002F55 EBDD                    	jmp	short rmdir_errj
 13863                                  rmcont:
 13864 00002F57 1F                      	pop	ds
 13865 00002F58 5A                      	pop	dx			; Restore the name
 13866 00002F59 BE[E93D]                	MOV	SI,DOS_RMDIR
 13867 00002F5C EB75                    	JMP	short DoDirCall ; 07/09/2018
 13868                                  
 13869                                  ;BREAK <$ChDir -- Change current directory on a drive>
 13870                                  ;----------------------------------------------------------------------------
 13871                                  ;
 13872                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 13873                                  ; for setting up the CDS for the specified drive appropriately.  There are
 13874                                  ; several cases to consider:
 13875                                  ;
 13876                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 13877                                  ;	it into a WFP.	We verify the existance of this directory and then
 13878                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 13879                                  ;	directory cluster.
 13880                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 13881                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 13882                                  ;	WFP back into the CDS.
 13883                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 13884                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 13885                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 13886                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 13887                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 13888                                  ;	to process the path but to return the logical CDS and the logical
 13889                                  ;	path.  We then copy the logical path into the logical CDS.
 13890                                  ;
 13891                                  ; Inputs:
 13892                                  ;	DS:DX Points to asciz name
 13893                                  ; Returns:
 13894                                  ;	STD XENIX Return
 13895                                  ;	AX = chdir_path_not_found if error
 13896                                  ;
 13897                                  ;----------------------------------------------------------------------------
 13898                                  
 13899                                  _$CHDIR:
 13900 00002F5E BF[8203]                	MOV	DI,OPENBUF		; spot for translated name
 13901 00002F61 89D6                    	MOV	SI,DX			; get source
 13902 00002F63 E82A3E                  	call	TransPath		; go munge the path and get real CDS
 13903 00002F66 7305                    	JNC	short ChDirCrack	; no errors, try path
 13904                                  ChDirErrP:
 13905 00002F68 B003                    	MOV	AL,error_path_not_found
 13906                                  ChDirErr:
 13907 00002F6A E937E8                  	jmp	SYS_RET_ERR 	; oops!
 13908                                  
 13909                                  ChDirCrack:
 13910 00002F6D 803E[3705]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 13911 00002F72 75F4                    	JNZ	short ChDirErrP
 13912                                  ;
 13913                                  ; We cannot do a ChDir (yet) on a raw CDS.  This is treated as a path not
 13914                                  ; found.
 13915                                  ;
 13916 00002F74 C43E[5E05]              	LES	DI,[THISCDS]
 13917 00002F78 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 13918 00002F7B 74EB                    	JZ	short ChDirErrP		;	error ();
 13919                                   ;
 13920                                   ; Find out if the directory exists.
 13921                                   ;
 13922 00002F7D E8340E                  	call	DOS_CHDIR
 13923 00002F80 72E8                    	Jc	short ChDirErr
 13924                                  ;
 13925                                  ; Get back CDS to see if a join as seen.  Set the currency pointer (only if
 13926                                  ; not network).  If one was seen, all we need to do is copy in the text
 13927                                  ;
 13928 00002F82 C43E[5E05]              	LES	DI,[THISCDS]
 13929 00002F86 26F745430020            	TEST	word [ES:DI+curdir.flags],curdir_splice
 13930 00002F8C 7425                    	JZ	short GotCDS
 13931                                  ;
 13932                                  ; The CDS was joined.  Let's go back and grab the logical CDS.
 13933                                  ;
 13934 00002F8E 06                      	push	es	
 13935 00002F8F 57                      	push	di
 13936 00002F90 51                      	push	cx			; save CDS and cluster...
 13937 00002F91 E8B5E6                  	call	Get_User_Stack		; get original text
 13938 00002F94 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 13939 00002F97 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 13940 00002F9A BE[8203]                	MOV	SI,OPENBUF		; spot for translated name
 13941 00002F9D 87F7                    	XCHG	SI,DI
 13942 00002F9F 30C0                    	XOR	AL,AL			; do no splicing
 13943 00002FA1 57                      	push	di
 13944 00002FA2 E8F73D                  	call	TransPathNoSet		; Munge path
 13945 00002FA5 5E                      	pop	si
 13946                                  ;
 13947                                  ; There should NEVER be an error here.
 13948                                  ;
 13949                                  
 13950                                  ;IF FALSE
 13951                                  ;	JNC SKipErr
 13952                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 13953                                  ;SkipErr:
 13954                                  ;ENDIF
 13955 00002FA6 C43E[5E05]              	LES	DI,[THISCDS]		; get new CDS
 13956 00002FAA 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 13957                                  					; no valid cluster here...
 13958 00002FB0 59                      	pop	cx
 13959 00002FB1 5F                      	pop	di
 13960 00002FB2 07                      	pop	es
 13961                                  ;
 13962                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 13963                                  ;
 13964                                  GotCDS:
 13965                                  ;
 13966                                  ; wfp_start points to the text. See if it is long enough
 13967                                  ;
 13968                                  	; MSDOS 3.3
 13969                                  	;push	ss
 13970                                  	;pop	ds
 13971                                  	;mov	si,[WFP_START]
 13972                                  	;push	cx
 13973                                  	;call	DStrLen
 13974                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 13975                                  	;pop	cx
 13976                                  	;ja	short ChDirErrP
 13977                                  
 13978                                  	; MSDOS 6.0
 13979 00002FB3 E84800                  	CALL	Check_PathLen		;PTM.		;AN000;
 13980 00002FB6 77B0                    	JA	short ChDirErrP
 13981                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13982 00002FB8 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 13983 00002FBE 7508                    	JNZ	short SkipRecency
 13984                                  	; MSDOS 6.0
 13985                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 13986                                  	;				;PTM. for Join and Subst ;AN000;
 13987                                  	;JZ	short setdirclus	;PTM.		;AN000;
 13988                                  	;MOV	CX,-1			;PTM.		;AN000;
 13989                                  ;setdirclus:
 13990 00002FC0 26894D49                	MOV	[ES:DI+curdir.ID],CX
 13991 00002FC4 C43E[5E05]              	LES	DI,[THISCDS]		; get logical CDS
 13992                                  SkipRecency:
 13993 00002FC8 E839F0                  	call	FStrCpy
 13994 00002FCB 30C0                    	XOR	AL,AL
 13995                                  mkdir_ok:
 13996 00002FCD E9CBE7                  	jmp	SYS_RET_OK
 13997                                  
 13998                                  
 13999                                  ;BREAK <$MkDir - Make a directory entry>
 14000                                  ;---------------------------------------------------------------------------
 14001                                  ;
 14002                                  ; Procedure Name : $MkDir
 14003                                  ; Inputs:
 14004                                  ;	DS:DX Points to asciz name
 14005                                  ; Function:
 14006                                  ;	Make a new directory
 14007                                  ; Returns:
 14008                                  ;	STD XENIX Return
 14009                                  ;	AX = mkdir_path_not_found if path bad
 14010                                  ;	AX = mkdir_access_denied  If
 14011                                  ;		Directory cannot be created
 14012                                  ;		Node already exists
 14013                                  ;		Device name given
 14014                                  ;		Disk or directory(root) full
 14015                                  ;---------------------------------------------------------------------------
 14016                                  
 14017                                  _$MKDIR:
 14018 00002FD0 BE[C73C]                	MOV	SI,DOS_MKDIR
 14019                                  DoDirCall:
 14020 00002FD3 BF[8203]                	MOV	DI,OPENBUF		; spot for translated name
 14021                                  
 14022 00002FD6 56                      	push	si
 14023 00002FD7 89D6                    	MOV	SI,DX			; get source
 14024 00002FD9 E8B43D                  	call	TransPath		; go munge the path
 14025 00002FDC 5E                      	pop	si
 14026 00002FDD 7305                    	JNC	short MkDirCrack	; no errors, try path
 14027                                  MkErrP:
 14028 00002FDF B003                    	MOV	AL,error_path_not_found	; oops!
 14029                                  MkErr:
 14030 00002FE1 E9C0E7                  	jmp	SYS_RET_ERR
 14031                                  MkDirCrack:
 14032 00002FE4 36803E[3705]FF          	CMP	byte [SS:CMETA],-1
 14033 00002FEA 75F3                    	JNZ	short MkErrP
 14034                                  
 14035                                  	; MSDOS 3.3
 14036                                  	;push	ss
 14037                                  	;pop	ds
 14038                                  	;call	si
 14039                                  	;jb	short MkErr
 14040                                  	;;jmp	short mkdir_ok
 14041                                  	;jmp	SYS_RET_OK
 14042                                  
 14043                                  	; MSDOS 6.0
 14044 00002FEC 56                      	PUSH	SI			;PTM.			;AN000;
 14045 00002FED E80E00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 14046 00002FF0 5E                      	POP	SI			;PTM.			;AN000;
 14047 00002FF1 7604                    	JBE	short pathok		;PTM.			;AN000;
 14048 00002FF3 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 14049                                  	;jmp	SYS_RET_ERR		;PTM.
 14050 00002FF5 EBEA                    	jmp	short MkErr
 14051                                  pathok:
 14052 00002FF7 FFD6                    	CALL	SI			; go get file
 14053 00002FF9 72E6                    	JC	short MkErr		; no errors
 14054                                  	;jmp	short mkdir_ok
 14055 00002FFB E99DE7                  	jmp	SYS_RET_OK
 14056                                  
 14057                                  ;----------------------------------------------------------------------------
 14058                                  ;
 14059                                  ; Procedure Name : Check_PathLen
 14060                                  ;
 14061                                  ; Inputs:
 14062                                  ;	nothing
 14063                                  ; Function:
 14064                                  ;	check if final path length greater than 67
 14065                                  ; Returns:
 14066                                  ;	Above flag set if > 67
 14067                                  ;
 14068                                  ;---------------------------------------------------------------------------
 14069                                  
 14070                                  Check_PathLen:
 14071                                  	; 09/09/2018
 14072                                  	;;MOV	SI,[WFP_START]
 14073                                  	;MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 14074                                  ;check_PathLen2:
 14075 00002FFE 16                      	push	ss
 14076 00002FFF 1F                      	pop	ds
 14077 00003000 8B36[6E05]              	mov	SI,[WFP_START] ; MSDOS 3.3
 14078 00003004 51                      	push	CX	
 14079 00003005 E813F0                  	CALL	DStrLen
 14080 00003008 83F943                  	CMP	CX,DIRSTRLEN
 14081 0000300B 59                      	POP	CX
 14082 0000300C C3                      	retn
 14083                                  
 14084                                  ;============================================================================
 14085                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 14086                                  ;============================================================================
 14087                                  ; 07/08/2018 - Retro DOS v3.0
 14088                                  
 14089                                  ;**	IOCTL system call.
 14090                                  ;
 14091                                  ;	$IOCTL
 14092                                  ;
 14093                                  ;	  Revision history:
 14094                                  ;
 14095                                  ;		Created: ARR 4 April 1983
 14096                                  ;
 14097                                  ;		GenericIOCTL added:		KGS	22 April 1985
 14098                                  ;
 14099                                  ;		A000	version 4.00	Jan. 1988
 14100                                  ;
 14101                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 14102                                  ;
 14103                                  
 14104                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 14105                                  ;---------------------------------------------------------------------------
 14106                                  ;
 14107                                  ;   Assembler usage:
 14108                                  ;	    MOV     BX, Handle
 14109                                  ;	    MOV     DX, Data
 14110                                  ;
 14111                                  ;	(or LDS     DX,BUF
 14112                                  ;	    MOV     CX,COUNT)
 14113                                  ;
 14114                                  ;	    MOV     AH, Ioctl
 14115                                  ;	    MOV     AL, Request
 14116                                  ;	    INT     21h
 14117                                  ;
 14118                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 14119                                  ;	    attribute word in DX, handle in BX:
 14120                                  ;	    DH = high word of device driver attributes
 14121                                  ;	    DL = low byte of sf_flags
 14122                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 14123                                  ;	    in BX.
 14124                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 14125                                  ;	    into DS:DX.  Return number read in AX.
 14126                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 14127                                  ;	    DS:DX.  Return bytes written in AX.
 14128                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 14129                                  ;	    into DS:DX.  Return number read in AX.
 14130                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 14131                                  ;	    DS:DX.  Return bytes written in AX.
 14132                                  ;	 6  Return input status of handle in BX. If a read will go to the
 14133                                  ;	    device, AL = 0FFh, otherwise 0.
 14134                                  ;	 7  Return output status of handle in BX. If a write will go to the
 14135                                  ;	    device, AL = 0FFh, otherwise 0.
 14136                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 14137                                  ;	    removable media, 0 otherwise.
 14138                                  ;	 9  Return the contents of the device attribute word in DX for the
 14139                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 14140                                  ;	    network. 8000h is the bit for local use.
 14141                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 14142                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 14143                                  ;	    the count and CX is the delay.
 14144                                  ;
 14145                                  ;   Error returns:
 14146                                  ;	    AX = error_invalid_handle
 14147                                  ;	       = error_invalid_function
 14148                                  ;	       = error_invalid_data
 14149                                  ;
 14150                                  ;-------------------------------------------------------------------------------
 14151                                  ;
 14152                                  ;   This is the documentation copied from DOS 4.0 it is much better
 14153                                  ;   than the above
 14154                                  ;
 14155                                  ;	There are several basic forms of IOCTL calls:
 14156                                  ;
 14157                                  ;
 14158                                  ;	** Get/Set device information:	**
 14159                                  ;
 14160                                  ;	ENTRY	(AL) = function code
 14161                                  ;		  0 - Get device information
 14162                                  ;		  1 - Set device information
 14163                                  ;		(BX) = file handle
 14164                                  ;		(DX) = info for "Set Device Information"
 14165                                  ;	EXIT	'C' set if error
 14166                                  ;		  (AX) = error code
 14167                                  ;		'C' clear if OK
 14168                                  ;		  (DX) = info for "Get Device Information"
 14169                                  ;	USES	ALL
 14170                                  ;
 14171                                  ;
 14172                                  ;	**  Read/Write Control Data From/To Handle  **
 14173                                  ;
 14174                                  ;	ENTRY	(AL) = function code
 14175                                  ;		  2 - Read device control info
 14176                                  ;		  3 - Write device control info
 14177                                  ;		(BX) = file handle
 14178                                  ;		(CX) = transfer count
 14179                                  ;		(DS:DX) = address for data
 14180                                  ;	EXIT	'C' set if error
 14181                                  ;		  (AX) = error code
 14182                                  ;		'C' clear if OK
 14183                                  ;		  (AX) = count of bytes transfered
 14184                                  ;	USES	ALL
 14185                                  ;
 14186                                  ;
 14187                                  ;	**  Read/Write Control Data From/To Block Device  **
 14188                                  ;
 14189                                  ;	ENTRY	(AL) = function code
 14190                                  ;		  4 - Read device control info
 14191                                  ;		  5 - Write device control info
 14192                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14193                                  ;		(CX) = transfer count
 14194                                  ;		(DS:DX) = address for data
 14195                                  ;	EXIT	'C' set if error
 14196                                  ;		  (AX) = error code
 14197                                  ;		'C' clear if OK
 14198                                  ;		  (AX) = count of bytes transfered
 14199                                  ;	USES	ALL
 14200                                  ;
 14201                                  ;
 14202                                  ;	**  Get Input/Output Status  **
 14203                                  ;
 14204                                  ;	ENTRY	(AL) = function code
 14205                                  ;		  6 - Get Input status
 14206                                  ;		  7 - Get Output Status
 14207                                  ;		(BX) = file handle
 14208                                  ;	EXIT	'C' set if error
 14209                                  ;		  (AX) = error code
 14210                                  ;		'C' clear if OK
 14211                                  ;		  (AL) = 00 if not ready
 14212                                  ;		  (AL) = FF if ready
 14213                                  ;	USES	ALL
 14214                                  ;
 14215                                  ;
 14216                                  ;	**  Get Drive Information  **
 14217                                  ;
 14218                                  ;	ENTRY	(AL) = function code
 14219                                  ;		  8 - Check for removable media
 14220                                  ;		  9 - Get device attributes
 14221                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14222                                  ;	EXIT	'C' set if error
 14223                                  ;		  (AX) = error code
 14224                                  ;		'C' clear if OK
 14225                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 14226                                  ;		  (DX) = device attribute word (func. 9)
 14227                                  ;	USES	ALL
 14228                                  ;
 14229                                  ;
 14230                                  ;	**  Get Redirected bit	**
 14231                                  ;
 14232                                  ;	ENTRY	(AL) = function code
 14233                                  ;		  0Ah - Network stuff
 14234                                  ;		(BX) = file handle
 14235                                  ;	EXIT	'C' set if error
 14236                                  ;		  (AX) = error code
 14237                                  ;		'C' clear if OK
 14238                                  ;		  (DX) = SFT flags word, 8000h set if network file
 14239                                  ;	USES	ALL
 14240                                  ;
 14241                                  ;
 14242                                  ;	**  Change sharer retry parameters  **
 14243                                  ;
 14244                                  ;	ENTRY	(AL) = function code
 14245                                  ;		  0Bh - Set retry parameters
 14246                                  ;		(CX) = retry loop count
 14247                                  ;		(DX) = number of retries
 14248                                  ;	EXIT	'C' set if error
 14249                                  ;		  (AX) = error code
 14250                                  ;		'C' clear if OK
 14251                                  ;	USES	ALL
 14252                                  ;
 14253                                  ;
 14254                                  ;   =================================================================
 14255                                  ;
 14256                                  ;	**  New Standard Control  **
 14257                                  ;
 14258                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 14259                                  ;	FORMS ARE OBSOLETE.
 14260                                  ;
 14261                                  ;   =================================================================
 14262                                  ;
 14263                                  ;	ENTRY	(AL) = function code
 14264                                  ;		  0Ch - Control Function subcode
 14265                                  ;		(BX) = File Handle
 14266                                  ;		(CH) = Category Indicator
 14267                                  ;		(CL) = Function within category
 14268                                  ;		(DS:DX) = address for data, if any
 14269                                  ;		(SI) = Passed to device as argument, use depends upon function
 14270                                  ;		(DI) = Passed to device as argument, use depends upon function
 14271                                  ;	EXIT	'C' set if error
 14272                                  ;		  (AX) = error code
 14273                                  ;		'C' clear if OK
 14274                                  ;		  (SI) = Return value, meaning is function dependent
 14275                                  ;		  (DI) = Return value, meaning is function dependent
 14276                                  ;		  (DS:DX) = Return address, use is function dependent
 14277                                  ;	USES	ALL
 14278                                  ;
 14279                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 14280                                  ;     (See inc\ioctl.inc for more info)
 14281                                  ;
 14282                                  ;	ENTRY	(AL) = function code
 14283                                  ;		  0Dh - Control Function subcode
 14284                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 14285                                  ;		(CH) = Category Indicator
 14286                                  ;		(CL) = Function within category
 14287                                  ;		(DS:DX) = address for data, if any
 14288                                  ;		(SI) = Passed to device as argument, use depends upon function
 14289                                  ;		(DI) = Passed to device as argument, use depends upon function
 14290                                  ;
 14291                                  ;	EXIT	'C' set if error
 14292                                  ;		  (AX) = error code
 14293                                  ;		'C' clear if OK
 14294                                  ;		  (DS:DX) = Return address, use is function dependent
 14295                                  ;	USES	ALL
 14296                                  ;
 14297                                  ;---------------------------------------------------------------------------
 14298                                  	
 14299                                  	; MSDOS 6.0
 14300                                  IOCTLJMPTABLE:	;label	word
 14301                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14302 0000300D [4530]                  	dw	ioctl_getset_data	; 0
 14303 0000300F [4530]                  	dw	ioctl_getset_data   	; 1
 14304 00003011 [9530]                  	dw	ioctl_control_string	; 2
 14305 00003013 [9530]                  	dw	ioctl_control_string	; 3
 14306 00003015 [E931]                  	dw	ioctl_get_dev		; 4
 14307 00003017 [E931]                  	dw	ioctl_get_dev		; 5
 14308 00003019 [B030]                  	dw	ioctl_status		; 6
 14309 0000301B [B030]                  	dw	ioctl_status		; 7
 14310 0000301D [4531]                  	dw	ioctl_rem_media		; 8
 14311 0000301F [8331]                  	dw	Ioctl_Drive_attr	; 9
 14312 00003021 [D831]                  	dw	IOCTL_Handle_Redir	; A
 14313 00003023 [CF30]                  	dw	Set_Retry_Parameters	; B
 14314 00003025 [DE30]                  	dw	GENERICIOCTLHANDLE	; C
 14315 00003027 [F530]                  	dw	GENERICIOCTL		; D
 14316                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14317 00003029 [9832]                  	dw	ioctl_drive_owner	; E
 14318 0000302B [9832]                  	dw	ioctl_drive_owner	; F
 14319                                  	; MSDOS 6.0
 14320                                  	;dw	query_handle_support	; 10h
 14321                                  	;dw	query_device_support	; 11h
 14322                                  
 14323                                  _$IOCTL:
 14324 0000302D 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 14325 0000302F 16                      	push	ss
 14326 00003030 1F                      	pop	ds			;hkn; SS is DOSDATA
 14327                                  
 14328                                  	; MSDOS 3.3
 14329 00003031 3C0F                    	cmp	al,0Fh 
 14330                                  	; MSDOS 6.0
 14331                                  	;cmp	al,11h			; al must be between 0 & 11h
 14332 00003033 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 14333                                  
 14334                                  	; 09/09/2018
 14335                                  	;push	AX			; Need to save AL for generic IOCTL
 14336 00003035 89C7                    	mov	di,ax			; di NOT a PARM
 14337 00003037 81E7FF00                	and	di,0FFh			; di = al
 14338 0000303B D1E7                    	shl	di,1			; di = index into jmp table
 14339                                  	;pop	AX			; Restore AL for generic IOCTL
 14340                                  
 14341 0000303D 2EFFA5[0D30]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 14342                                  
 14343                                  
 14344                                  ioctl_bad_funj2:
 14345 00003042 E9F800                  	JMP	ioctl_bad_fun  ; 10/08/2018
 14346                                  
 14347                                  ;--------------------------------------------------------------------------
 14348                                  ;
 14349                                  ; IOCTL: AL= 0,1
 14350                                  ;
 14351                                  ; ENTRY : DS = DOSDATA
 14352                                  ;
 14353                                  ;--------------------------------------------------------------------------
 14354                                  
 14355                                  ioctl_getset_data:
 14356                                  	; MSDOS 6.0
 14357 00003045 E8F93A                  	call	SFFromHandle		; ES:DI -> SFT
 14358 00003048 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 14359                                  ioctl_bad_handle:
 14360 0000304A B006                    	mov	al,error_invalid_handle
 14361                                  ioctl_error:
 14362 0000304C E955E7                  	jmp	SYS_RET_ERR
 14363                                  
 14364                                  ioctl_check_permissions:
 14365 0000304F 3C00                    	CMP	AL,0
 14366 00003051 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 14367 00003055 741B                    	JZ	short ioctl_read	; read the byte
 14368                                  
 14369 00003057 08F6                    	or	dh, dh
 14370 00003059 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 14371 0000305B B00D                    	mov	al,error_invalid_data	; no DH <> 0
 14372                                  	;jmp	SYS_RET_ERR
 14373 0000305D EBED                    	jmp	short ioctl_error
 14374                                  
 14375                                  ioctl_check_device:
 14376 0000305F A880                    	test	AL,devid_device 	; can I set this handle?
 14377 00003061 74DF                    	jz	short ioctl_bad_funj2
 14378 00003063 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 14379                                  					;   device bit!! He can muck with the
 14380                                  					;   others at will.
 14381 00003066 C606[EF02]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 14382 0000306B 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 14383                                  
 14384                                  ioctl_ok:
 14385 0000306F E929E7                  	jmp	SYS_RET_OK
 14386                                  
 14387                                  ioctl_read:
 14388 00003072 C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 14389 00003077 30E4                    	XOR	AH,AH
 14390 00003079 A880                    	test	AL,devid_device 	; Should I set high byte
 14391 0000307B 740D                    	JZ	short ioctl_no_high	; no
 14392 0000307D C606[EF02]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 14393 00003082 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 14394 00003086 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 14395                                  ioctl_no_high:
 14396 0000308A 89C2                    	MOV	DX,AX
 14397 0000308C E8BAE5                  	call	Get_User_Stack
 14398 0000308F 895406                  	MOV	[SI+user_env.user_DX],DX
 14399                                  	;;jmp	SYS_RET_OK
 14400                                  	;jmp	short ioctl_ok
 14401                                  	; 26/07/2019
 14402 00003092 E909E7                  	jmp	SYS_RET_OK_clc
 14403                                  
 14404                                  ;--------------------------------------------------------------------------
 14405                                  ;
 14406                                  ; IOCTL: 2,3
 14407                                  ;
 14408                                  ; ENTRY : DS = DOSDATA
 14409                                  ;	  SI = user's DS
 14410                                  ;
 14411                                  ;--------------------------------------------------------------------------
 14412                                  
 14413                                  ioctl_control_string:
 14414                                  
 14415 00003095 E8A93A                  	call	SFFromHandle		; ES:DI -> SFT
 14416 00003098 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 14417 0000309A 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 14418 000030A0 74A0                    	jz	short ioctl_bad_funj2			; No it is a file
 14419 000030A2 C606[EF02]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 14420 000030A7 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 14421 000030AB 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 14422 000030AD E93E01                  	JMP	ioctl_do_string
 14423                                  
 14424                                  ;--------------------------------------------------------------------------
 14425                                  ;
 14426                                  ; IOCTL: AL = 6,7
 14427                                  ;
 14428                                  ; ENTRY: DS = DOSDATA
 14429                                  ;
 14430                                  ;--------------------------------------------------------------------------
 14431                                  
 14432                                  ioctl_status:
 14433                                  
 14434 000030B0 B401                    	MOV	AH,1
 14435 000030B2 2C06                    	SUB	AL,6			; 6=0,7=1
 14436 000030B4 7402                    	JZ	short ioctl_get_status
 14437 000030B6 B403                    	MOV	AH,3
 14438                                  ioctl_get_status:
 14439 000030B8 50                      	PUSH	AX
 14440 000030B9 E8D810                  	call	GET_IO_SFT
 14441 000030BC 58                      	POP	AX
 14442 000030BD 7302                    	JNC	short DO_IOFUNC
 14443 000030BF EB89                    	JMP	short ioctl_bad_handle	; invalid SFT
 14444                                  
 14445                                  DO_IOFUNC:
 14446 000030C1 E8BF1E                  	call	IOFUNC
 14447 000030C4 88C4                    	MOV	AH,AL
 14448 000030C6 B0FF                    	MOV	AL,0FFH
 14449 000030C8 7502                    	JNZ	short ioctl_status_ret
 14450 000030CA FEC0                    	INC	AL
 14451                                  ioctl_status_ret:
 14452 000030CC E9CCE6                  	jmp	SYS_RET_OK
 14453                                  
 14454                                  ;--------------------------------------------------------------------------
 14455                                  ;
 14456                                  ; IOCTL: AL = B
 14457                                  ;
 14458                                  ; ENTRY: DS = DOSDATA
 14459                                  ;
 14460                                  ;--------------------------------------------------------------------------
 14461                                  
 14462                                  Set_Retry_Parameters:
 14463                                  	; 09/09/2018
 14464 000030CF 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 14465 000030D3 09D2                    	OR	DX,DX			; zero retries not allowed
 14466 000030D5 7466                    	JZ	short ioctl_bad_fun
 14467 000030D7 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 14468                                  doneok:
 14469 000030DB E9BDE6                  	jmp	SYS_RET_OK		; Done
 14470                                  
 14471                                  ;--------------------------------------------------------------------------
 14472                                  ;
 14473                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 14474                                  ;
 14475                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 14476                                  ;	SI:DX -> Users Device Parameter Table
 14477                                  ;	IOCALL -> IOCTL_Req structure
 14478                                  ;
 14479                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 14480                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 14481                                  ;	call.
 14482                                  ;
 14483                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 14484                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14485                                  ;         return address off the stack if the drive is invalid.
 14486                                  ;
 14487                                  ;--------------------------------------------------------------------------
 14488                                  
 14489                                  query_handle_support:	; Entry point for handles
 14490                                  GENERICIOCTLHANDLE:
 14491                                  
 14492 000030DE E8603A                  	call	SFFromHandle		; Get SFT for device.
 14493 000030E1 725F                    	jc	short ioctl_bad_handlej
 14494                                  
 14495                                  	; 31/07/2019 - Retro DOS v3.2
 14496                                  	;test	word [es:di+5],8000h
 14497                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 14498                                  	;test	byte [es:di+6],80h
 14499 000030E3 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 14500 000030E8 7553                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 14501                                  
 14502 000030EA C606[EF02]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev
 14503 000030EF 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 14504 000030F3 EB0F                    	jmp	short Do_GenIOCTL
 14505                                  
 14506                                  query_device_support:	; Entry point for devices:
 14507                                  GENERICIOCTL:
 14508                                  
 14509 000030F5 C606[EF02]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk
 14510 000030FA 80FD08                  	cmp	ch,IOC_DC		; Only disk devices are allowed to use
 14511 000030FD 753E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 14512                                  
 14513 000030FF E87A01                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 14514 00003102 7539                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 14515                                  
 14516                                  Do_GenIOCTL:
 14517                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 ; Can device handle Generic IOCTL funcs
 14518                                  	; 09/09/2018
 14519 00003104 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 14520 00003109 7432                    	jz	short ioctl_bad_fun
 14521                                  
 14522                                  	; MSDOS 6.0
 14523                                  	;;mov	byte [IOCALL_REQFUNC],19 ; 13h
 14524                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 14525                                  	;;cmp	al,10h
 14526                                  	;cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 14527                                  	;jl	short SetIOCtlBlock
 14528                                  	
 14529                                  	;;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 14530                                  	;;test	byte [es:di+4],80h 
 14531                                  	;TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 14532                                  	;jz	short ioctl_bad_fun	; No support for query 
 14533                                  	;
 14534                                  	;;mov	byte [IOCALL_REQFUNC],19h	
 14535                                  	;mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 14536                                  
 14537                                  ;SetIOCtlBlock:
 14538 0000310B 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 14539 0000310C 57                      	PUSH	DI			; in DS:SI
 14540                                  					; Setup Generic IOCTL Request Block
 14541 0000310D C606[4603]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size ; 23
 14542                                  	; 07/09/2018 (MSDOS 3.3)
 14543                                  	;mov	byte [IOCALL_REQFUNC],19
 14544 00003112 C606[4803]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 14545                                  	;
 14546 00003117 881E[4703]              	MOV	byte [IOCALL_REQUNIT],BL
 14547 0000311B 882E[5303]              	MOV	byte [IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 14548 0000311F 880E[5403]              	MOV	byte [IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 14549 00003123 8936[5503]              	MOV	word [IOCALL+IOCTL_REQ.REG_SI],SI
 14550 00003127 893E[5703]              	MOV	word [IOCALL+IOCTL_REQ.REG_DI],DI
 14551 0000312B 8916[5903]              	MOV	word [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 14552 0000312F 8936[5B03]              	MOV	word [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 14553                                  
 14554                                  ;hkn; IOCALL is in DOSDATA
 14555 00003133 BB[4603]                	MOV	BX,IOCALL
 14556                                  
 14557 00003136 16                      	PUSH	SS
 14558 00003137 07                      	POP	ES
 14559                                  					; DS:SI -> Device header.
 14560 00003138 5E                      	POP	SI
 14561 00003139 1F                      	POP	DS
 14562                                  	; 10/08/2018
 14563 0000313A E9EA00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 14564                                  
 14565                                  ioctl_bad_fun:
 14566 0000313D B001                    	mov	al, error_invalid_function  ; 1
 14567 0000313F E962E6                  	jmp	SYS_RET_ERR	
 14568                                  
 14569                                  ioctl_bad_handlej:
 14570 00003142 E905FF                  	jmp	ioctl_bad_handle
 14571                                  
 14572                                  ;---------------------------------------------------------------------------
 14573                                  ;
 14574                                  ; IOCTL AL = 8
 14575                                  ;
 14576                                  ; ENTRY:  DS = DOSDATA
 14577                                  ;
 14578                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 14579                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14580                                  ;         return address off the stack if the drive is invalid.
 14581                                  ;
 14582                                  ;-------------------------------------------------------------------------
 14583                                  
 14584                                  ioctl_rem_media:
 14585                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14586 00003145 E83401                  	CALL	Check_If_Net
 14587 00003148 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 14588                                  					;   certainly don't know how to do this
 14589                                  					;   call.
 14590                                  	; 31/07/2019 - Retro DOS v3.2
 14591                                  	;test	word [es:di+4],800h
 14592                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 14593                                  	;test	byte [es:di+5],8
 14594 0000314A 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 14595 0000314F 74EC                    	JZ	short ioctl_bad_fun		; NO
 14596                                  
 14597                                  ;hkn; SS override for IOCALL
 14598 00003151 36C606[4803]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD
 14599 00003157 B00D                    	MOV	AL,REMHL
 14600 00003159 88DC                    	MOV	AH,BL			; Unit number
 14601 0000315B 36A3[4603]              	MOV	[SS:IOCALL_REQLEN],AX
 14602 0000315F 31C0                    	XOR	AX,AX
 14603 00003161 36A3[4903]              	MOV	[SS:IOCALL_REQSTAT],AX
 14604 00003165 06                      	PUSH	ES
 14605 00003166 1F                      	POP	DS
 14606 00003167 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14607 00003169 16                      	PUSH	SS
 14608 0000316A 07                      	POP	ES
 14609                                  
 14610                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 14611 0000316B BB[4603]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14612 0000316E 1E                      	push	ds
 14613 0000316F 56                      	push	si
 14614 00003170 E8BD1F                  	call	DEVIOCALL2
 14615 00003173 5E                      	pop	si
 14616 00003174 1F                      	pop	ds
 14617                                  
 14618                                  ;hkn; SS override
 14619 00003175 36A1[4903]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 14620 00003179 250002                  	AND	AX,STBUI		; Mask to busy bit
 14621 0000317C B109                    	MOV	CL,9
 14622 0000317E D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 14623 00003180 E918E6                  	jmp	SYS_RET_OK
 14624                                  
 14625                                  ;-------------------------------------------------------------------------
 14626                                  ;
 14627                                  ; IOCTL: AL = 9
 14628                                  ;
 14629                                  ; ENTRY: DS = DOSDATA
 14630                                  ;
 14631                                  ;-------------------------------------------------------------------------
 14632                                  
 14633                                  Ioctl_Drive_attr:
 14634                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14635 00003183 88D8                    	mov	al,bl
 14636 00003185 E82D3B                  	call	GETTHISDRV
 14637 00003188 7249                    	jc	short ioctl_drv_err
 14638 0000318A E8C100                  	call	Get_Driver_BL
 14639                                  	; MSDOS 6.0
 14640 0000318D 7244                    	JC	short ioctl_drv_err	; drive not valid
 14641                                  
 14642                                  	;mov	dx,[es:di+4]
 14643 0000318F 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 14644                                  					; get device attribute word
 14645 00003193 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 14646                                  
 14647                                  ;hkn; SS override
 14648 00003195 36C43E[5E05]            	LES	DI,[SS:THISCDS]
 14649                                  	; 31/07/2019
 14650                                  	;test	word [es:di+43h],8000h
 14651                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 14652                                  	;test	byte [es:di+44h],80h
 14653 0000319A 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 14654 0000319F 7403                    	JZ	short IOCTLShare
 14655                                  
 14656                                  	;or	dx,1000h ; msdos 3.3
 14657                                  
 14658                                  ;	Net devices don't return a device attribute word.
 14659                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 14660                                  
 14661 000031A1 BA0010                  	MOV	DX,1000h ;  MSDOS 6.0
 14662                                  IOCTLShare:
 14663 000031A4 16                      	push	ss
 14664 000031A5 1F                      	pop	ds
 14665 000031A6 BE[8203]                	MOV	SI,OPENBUF
 14666 000031A9 80C341                  	ADD	BL,"A"
 14667 000031AC 881C                    	MOV	[SI],BL
 14668 000031AE C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 14669 000031B3 B80003                  	MOV	AX,0300h
 14670 000031B6 F8                      	CLC
 14671                                  	;INT	int_IBM
 14672 000031B7 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 14673                                  			; DS:SI -> ASCIZ disk device name (may be full path or only drive
 14674                                  			; specifier--must include the colon)
 14675                                  			; Return: CF clear if absolute disk access allowed
 14676 000031B9 7304                    	JNC	short IOCTLLocal	; Not shared
 14677 000031BB 81CA0002                	OR	DX,0200H		; Shared, bit 9
 14678                                  IOCTLLocal:
 14679                                  	; 31/07/2019
 14680                                  	;test	word [es:di+43h],1000h
 14681                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 14682                                  	;test	byte [es:di+44h],10h
 14683 000031BF 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 14684 000031C4 7404                    	JZ	short ioctl_set_DX
 14685 000031C6 81CA0080                	OR	DX,8000h
 14686                                  ioctl_set_DX:
 14687 000031CA E87CE4                  	call	Get_User_Stack
 14688 000031CD 895406                  	MOV	[SI+user_env.user_DX],DX
 14689                                  	;jmp	SYS_RET_OK
 14690                                  	; 26/07/2019
 14691 000031D0 E9CBE5                  	jmp	SYS_RET_OK_clc
 14692                                  
 14693                                  ioctl_drv_err:
 14694 000031D3 B00F                    	mov	al, error_invalid_drive ; 0Fh
 14695 000031D5 E9CCE5                  	jmp	SYS_RET_ERR
 14696                                  
 14697                                  ;--------------------------------------------------------------------------
 14698                                  ; IOCTL: AL = A
 14699                                  ;
 14700                                  ; ENTRY: DS = DOSDATA
 14701                                  ;
 14702                                  ;--------------------------------------------------------------------------
 14703                                  
 14704                                  IOCTL_Handle_Redir:
 14705 000031D8 E86639                  	call	SFFromHandle		; ES:DI -> SFT
 14706 000031DB 7303                    	JNC	short ioctl_got_sft	; have valid handle
 14707 000031DD E96AFE                  	jmp	ioctl_bad_handle ; 10/08/2018
 14708                                  
 14709                                  ioctl_got_sft:
 14710 000031E0 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 14711 000031E4 EBE4                    	JMP	short ioctl_set_DX	; pass dx to user and return
 14712                                  
 14713                                  ioctl_bad_funj:
 14714 000031E6 E954FF                  	JMP	ioctl_bad_fun
 14715                                  
 14716                                  ;--------------------------------------------------------------------------
 14717                                  ;
 14718                                  ; IOCTL: AL= 4,5
 14719                                  ;
 14720                                  ; ENTRY: DS = DOSDATA
 14721                                  ;	 SI = user's DS
 14722                                  ;
 14723                                  ;
 14724                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 14725                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14726                                  ;         return address off the stack if the drive is invalid.
 14727                                  ;
 14728                                  ;-------------------------------------------------------------------------
 14729                                  
 14730                                  ioctl_get_dev:
 14731 000031E9 E89000                  	CALL	Check_If_Net
 14732 000031EC 75F8                    	JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 14733                                  					;   certainly don't know how to do this
 14734                                  					;   call.
 14735                                  ioctl_do_string:
 14736                                  	; 31/07/2019
 14737                                  	;test	word [es:di+4],4000h
 14738                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 14739                                  	;test	byte [es:di+5],40h
 14740 000031EE 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 14741 000031F3 74F1                    	JZ	short ioctl_bad_funj		; NO
 14742                                  					; assume IOCTL read
 14743 000031F5 C606[4803]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL
 14744                                  
 14745 000031FA A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 14746 000031FC 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 14747                                  
 14748                                  					; it is an IOCTL write
 14749 000031FE C606[4803]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL
 14750                                  
 14751                                  ioctl_control_call:
 14752 00003203 B016                    	MOV	AL,DRDWRHL
 14753                                  ioctl_setup_pkt:
 14754 00003205 88DC                    	MOV	AH,BL			; Unit number
 14755 00003207 A3[4603]                	MOV	[IOCALL_REQLEN],AX
 14756 0000320A 31C0                    	XOR	AX,AX
 14757 0000320C A3[4903]                	MOV	[IOCALL_REQSTAT],AX
 14758 0000320F A2[5303]                	MOV	[IOMED],AL
 14759 00003212 890E[5803]              	MOV	[IOSCNT],CX
 14760 00003216 8916[5403]              	MOV	[IOXAD],DX
 14761 0000321A 8936[5603]              	MOV	[IOXAD+2],SI
 14762 0000321E 06                      	PUSH	ES
 14763 0000321F 1F                      	POP	DS
 14764 00003220 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14765 00003222 16                      	PUSH	SS
 14766 00003223 07                      	POP	ES
 14767                                  
 14768 00003224 BB[4603]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14769                                  ioctl_do_IO:
 14770 00003227 E8061F                  	call	DEVIOCALL2
 14771                                  
 14772                                  ;hkn; SS override for IOCALL
 14773                                  	; 31/07/2019
 14774                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 14775                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 14776                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 14777 0000322A 36F606[4A03]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 14778 00003230 7507                    	JNZ	short ioctl_string_err
 14779                                  
 14780                                  ;hkn; SS override
 14781 00003232 36A1[5803]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 14782 00003236 E962E5                  	jmp	SYS_RET_OK
 14783                                  
 14784                                  ioctl_string_err:
 14785 00003239 368B3E[4903]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 14786                                  device_err:
 14787 0000323E 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 14788 00003242 89F8                    	MOV	AX,DI
 14789 00003244 E8AD2A                  	call	SET_I24_EXTENDED_ERROR
 14790                                  
 14791                                  ;hkn; use SS override
 14792                                  ;hkn;	mov	ax,[CS:EXTERR]
 14793 00003247 36A1[F002]              	mov	ax,[SS:EXTERR]
 14794 0000324B E956E5                  	jmp	SYS_RET_ERR
 14795                                  
 14796                                  ;--------------------------------------------------------------------------
 14797                                  ; Proc name : Get_Driver_BL
 14798                                  ;
 14799                                  ;	DS is DOSDATA
 14800                                  ;	BL is drive number (0=default)
 14801                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 14802                                  ;	No regs modified
 14803                                  ;
 14804                                  ;---------------------------------------------------------------------------
 14805                                  
 14806                                  Get_Driver_BL:
 14807                                  	; 31/07/2019 - Retro DOS v3.2
 14808 0000324E 50                      	PUSH	AX
 14809 0000324F 88D8                    	MOV	AL,BL			; Drive
 14810 00003251 E8613A                  	call	GETTHISDRV
 14811 00003254 7224                    	jc	short ioctl_bad_drv
 14812 00003256 30DB                    	XOR	BL,BL			; Unit zero on Net device
 14813 00003258 C606[EF02]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 14814 0000325D C43E[5E05]              	LES	DI,[THISCDS]
 14815                                  	;test	word [es:di+43h],8000h
 14816                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 14817                                  	;test	byte [es:di+44h],80h
 14818 00003261 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 14819                                  	;les	di,[es:di+45h]
 14820 00003266 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 14821 0000326A 750D                    	JNZ	short got_dev_ptr	 ; Is net
 14822 0000326C C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 14823                                  	;mov	bl,[es:di+1]
 14824 00003271 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 14825                                  	;les	di,[es:di+13h]
 14826 00003275 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 14827                                  got_dev_ptr:
 14828 00003279 F8                      	CLC
 14829                                  ioctl_bad_drv:
 14830 0000327A 58                      	POP	AX
 14831 0000327B C3                      	retn
 14832                                  
 14833                                  ;-------------------------------------------------------------------------
 14834                                  ; Proc Name : Check_If_Net:
 14835                                  ;
 14836                                  ;
 14837                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 14838                                  ; If no device is found, the return address is popped off the stack, and a
 14839                                  ; jump is made to ioctl_drv_err.
 14840                                  ;
 14841                                  ; On Entry:
 14842                                  ; Registers same as those for Get_Driver_BL
 14843                                  ;
 14844                                  ; On Exit:
 14845                                  ; ZERO flag	- set if not a net device
 14846                                  ;		- reset if net device
 14847                                  ; ES:DI -> the device
 14848                                  ;
 14849                                  ;
 14850                                  ; BUGBUG: This function assumes the following stack setup on entry
 14851                                  ;
 14852                                  ;	  SP+2 -> Error return address
 14853                                  ;	  SP   -> Normal return address
 14854                                  ;
 14855                                  ;-------------------------------------------------------------------------
 14856                                  
 14857                                  Check_If_Net:
 14858                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14859 0000327C E8CFFF                  	CALL	Get_Driver_BL
 14860 0000327F 720E                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 14861 00003281 06                      	PUSH	ES
 14862 00003282 57                      	PUSH	DI
 14863 00003283 C43E[5E05]              	LES	DI,[THISCDS]
 14864                                  	; 31/07/2019
 14865                                  	;test	word [es:di+43h],8000h
 14866                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 14867                                  	;test	byte [es:di+44h],80h
 14868 00003287 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 14869 0000328C 5F                      	POP	DI
 14870 0000328D 07                      	POP	ES
 14871 0000328E C3                      	retn
 14872                                  
 14873                                  ioctl_drv_err_pop:
 14874 0000328F 58                      	pop	ax			; pop off return address
 14875 00003290 E940FF                  	jmp	ioctl_drv_err
 14876                                  
 14877                                  ioctl_bad_funj3:
 14878 00003293 E9A7FE                  	jmp	ioctl_bad_fun
 14879                                  
 14880                                  ioctl_string_errj:
 14881 00003296 EBA1                    	jmp	short ioctl_string_err ; 31/07/2019
 14882                                  
 14883                                  ;--------------------------------------------------------------------------
 14884                                  ;
 14885                                  ; IOCTL: AL = E, F
 14886                                  ;
 14887                                  ; ENTRY: DS = DOSDATA
 14888                                  ;
 14889                                  ;
 14890                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 14891                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14892                                  ;         return address off the stack if the drive is invalid.
 14893                                  ;
 14894                                  ;--------------------------------------------------------------------------
 14895                                  
 14896                                  ioctl_drive_owner:
 14897                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14898 00003298 E8E1FF                  	Call	Check_If_Net
 14899 0000329B 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 14900                                  					;   certainly don't know how to do this
 14901                                  					;   call.
 14902                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 14903                                  	; 09/09/2018
 14904 0000329D 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 14905 000032A2 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 14906 000032A4 C606[4803]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 14907 000032A9 3C0E                    	cmp	al,0Eh			; Get Owner ?
 14908 000032AB 7405                    	jz	short GetOwner
 14909                                  SetOwner:
 14910 000032AD C606[4803]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN
 14911                                  GetOwner:
 14912 000032B2 B00D                    	MOV	AL,OWNHL
 14913 000032B4 88DC                    	MOV	AH,BL			; Unit number
 14914 000032B6 A3[4603]                	MOV	[IOCALL_REQLEN],AX
 14915 000032B9 31C0                    	XOR	AX,AX
 14916 000032BB A3[4903]                	MOV	[IOCALL_REQSTAT],AX
 14917 000032BE 06                      	PUSH	ES
 14918 000032BF 1F                      	POP	DS
 14919 000032C0 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14920 000032C2 16                      	PUSH	SS
 14921 000032C3 07                      	POP	ES
 14922 000032C4 BB[4603]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14923 000032C7 1E                      	push	ds
 14924 000032C8 56                      	push	si
 14925 000032C9 E8641E                  	call	DEVIOCALL2
 14926 000032CC 5E                      	pop	si
 14927 000032CD 1F                      	pop	ds
 14928                                  	; 31/07/2019
 14929                                  ;hkn; SS override
 14930                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 14931                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 14932 000032CE 36F606[4A03]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 14933 000032D4 75C0                    	jnz	short ioctl_string_errj
 14934 000032D6 36A0[4703]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 14935                                  					; owner returned is 1-based.
 14936 000032DA E9BEE4                  	jmp	SYS_RET_OK
 14937                                  
 14938                                  ;============================================================================
 14939                                  ; DELETE.ASM, MSDOS 6.0, 1991
 14940                                  ;============================================================================
 14941                                  ; 07/08/2018 - Retro DOS v3.0
 14942                                  
 14943                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 14944                                  ;	NAME	DOS_DELETE
 14945                                  
 14946                                  ;
 14947                                  ;	Microsoft Confidential
 14948                                  ;	Copyright (C) Microsoft Corporation 1991
 14949                                  ;	All Rights Reserved.
 14950                                  ;
 14951                                  
 14952                                  ;**	DELETE.ASM - Low level routine for deleting files
 14953                                  ;
 14954                                  ;		DOS_DELETE
 14955                                  ;		REN_DEL_Check
 14956                                  ;		FastOpen_Delete	       ; DOS 3.3
 14957                                  ;		FastOpen_Update	       ; DOS 3.3
 14958                                  
 14959                                  
 14960                                  ;   Revision history:
 14961                                  ;
 14962                                  ;   A000  version 4.00	Jan. 1988
 14963                                  ;   A001  Fastopen Rename fix	April 1989
 14964                                  
 14965                                  
 14966                                  ;Installed = TRUE
 14967                                  
 14968                                  ;	i_need	NoSetDir,BYTE
 14969                                  ;	i_need	Creating,BYTE
 14970                                  ;	i_need	DELALL,BYTE
 14971                                  ;	i_need	THISDPB,DWORD
 14972                                  ;	i_need	THISSFT,DWORD
 14973                                  ;	i_need	THISCDS,DWORD
 14974                                  ;	i_need	CURBUF,DWORD
 14975                                  ;	i_need	ATTRIB,BYTE
 14976                                  ;	i_need	SATTRIB,BYTE
 14977                                  ;	i_need	WFP_START,WORD
 14978                                  ;	i_need	REN_WFP,WORD			 ;BN001
 14979                                  ;	i_need	NAME1,BYTE			 ;BN001
 14980                                  ;	i_need	FoundDel,BYTE
 14981                                  ;	i_need	AUXSTACK,BYTE
 14982                                  ;	i_need	VOLCHNG_FLAG,BYTE
 14983                                  ;	i_need	JShare,DWORD
 14984                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 14985                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 14986                                  ;
 14987                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 14988                                  ;
 14989                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 14990                                  ;	i_need	DMAADD,DWORD
 14991                                  ;	i_need	RENAMEDMA,BYTE
 14992                                  
 14993                                  ;---------------------------------------------------------------------------
 14994                                  ;
 14995                                  ; Procedure Name : DOS_DELETE
 14996                                  ;
 14997                                  ; Inputs:
 14998                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 14999                                  ;		terminated)
 15000                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15001                                  ;		( = -1 if current dir not involved, else
 15002                                  ;		 Points to first char after last "/" of current dir part)
 15003                                  ;	[THISCDS] Points to CDS being used
 15004                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15005                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15006                                  ; Function:
 15007                                  ;	Delete the specified file(s)
 15008                                  ; Outputs:
 15009                                  ;	CARRY CLEAR
 15010                                  ;		OK
 15011                                  ;	CARRY SET
 15012                                  ;	    AX is error code
 15013                                  ;		error_file_not_found
 15014                                  ;			Last element of path not found
 15015                                  ;		error_path_not_found
 15016                                  ;			Bad path (not in curr dir part if present)
 15017                                  ;		error_bad_curr_dir
 15018                                  ;			Bad path in current directory part of path
 15019                                  ;		error_access_denied
 15020                                  ;			Attempt to delete device or directory
 15021                                  ;		***error_sharing_violation***
 15022                                  ;			Deny both access required, generates an INT 24.
 15023                                  ;			This error is NOT returned. The INT 24H is generated,
 15024                                  ;			  and the file is ignored (not deleted). Delete will
 15025                                  ;			  simply continue on looking for more files.
 15026                                  ;			  Carry will NOT be set in this case.
 15027                                  ; DS preserved, others destroyed
 15028                                  ;
 15029                                  ;---------------------------------------------------------------------------
 15030                                  
 15031                                  FILEFOUND   equ 01h
 15032                                  FILEDELETED equ 10h
 15033                                  
 15034                                  DOS_DELETE:
 15035                                  
 15036                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 15037                                  ;hkn; appropriately at this point.
 15038                                  
 15039 000032DD E891ED                  	call	TestNet
 15040 000032E0 7306                    	JNC	short LOCAL_DELETE
 15041                                  
 15042                                  ;IF NOT Installed
 15043                                  ;	transfer NET_DELETE
 15044                                  ;ELSE
 15045                                  	;MOV	AX,(MultNET SHL 8) | 19
 15046                                  	;INT	2FH
 15047                                  	;return
 15048                                  
 15049 000032E2 B81311                  	mov	ax,1113h
 15050 000032E5 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 15051                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 15052                                  			;		fully-qualified filename in DOS CS
 15053                                  			; SDA CDS pointer -> current directory structure for drive with file
 15054                                  			; Return: CF set on error
 15055 000032E7 C3                      	retn
 15056                                  
 15057                                  ;ENDIF
 15058                                  
 15059                                  LOCAL_DELETE:
 15060 000032E8 C606[2C05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 15061 000032ED E81FEE                  	call	EcritDisk
 15062 000032F0 C706[3A05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 15063 000032F6 8B36[6E05]              	MOV	SI,[WFP_START]
 15064                                  SKPNUL:
 15065 000032FA AC                      	LODSB
 15066 000032FB 08C0                    	OR	AL,AL
 15067 000032FD 75FB                    	JNZ	short SKPNUL		; go to end
 15068 000032FF 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 15069 00003302 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 15070 00003306 7506                    	JNZ	short TEST_QUEST
 15071 00003308 807C022A                	CMP	BYTE [SI+2],"*"
 15072 0000330C 741F                    	JZ	short CHECK_ATTS
 15073                                  TEST_QUEST:
 15074 0000330E 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 15075 00003311 87FE                    	XCHG	DI,SI
 15076                                  
 15077 00003313 16                      	push	ss
 15078                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 15079 00003314 07                      	pop	es ; 17/05/2019 (BugFix)
 15080                                  
 15081 00003315 B83F3F                  	MOV	AX,"??"
 15082 00003318 B90400                  	MOV	CX,4		; four sets of "??"
 15083 0000331B F3AF                    	REPE	SCASW
 15084 0000331D 751C                    	JNZ	short NOT_ALL
 15085 0000331F 87FE                    	XCHG	DI,SI
 15086 00003321 AD                      	LODSW
 15087 00003322 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 15088 00003325 7514                    	JNZ	short NOT_ALL
 15089 00003327 AD                      	LODSW
 15090 00003328 3D3F3F                  	CMP	AX,"??"
 15091 0000332B 750E                    	JNZ	short NOT_ALL
 15092                                  CHECK_ATTS:
 15093 0000332D A0[2A05]                	MOV	AL,[SATTRIB]
 15094 00003330 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15095                                  					; Look only at hidden bits
 15096 00003332 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15097                                  					; All must be set
 15098 00003334 7505                    	JNZ	short NOT_ALL
 15099                                  
 15100                                  ; NOTE WARNING DANGER-----
 15101                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 15102                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 15103                                  
 15104 00003336 C606[3B05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 15105                                  NOT_ALL:
 15106 0000333B C606[1603]01            	MOV	byte [NoSetDir],1
 15107 00003340 E8E616                  	call	GetPathNoSet
 15108 00003343 7313                    	JNC	short Del_found
 15109 00003345 750C                    	JNZ	short _bad_path
 15110 00003347 08C9                    	OR	CL,CL
 15111 00003349 7408                    	JZ	short _bad_path
 15112                                  No_file:
 15113 0000334B B80200                  	MOV	AX,error_file_not_found
 15114                                  ErrorReturn:
 15115 0000334E F9                      	STC
 15116 0000334F E8C5ED                  	call	LcritDisk
 15117 00003352 C3                      	retn
 15118                                  
 15119                                  _bad_path:
 15120 00003353 B80300                  	MOV	AX,error_path_not_found
 15121 00003356 EBF6                    	JMP	short ErrorReturn
 15122                                  
 15123                                  Del_found:
 15124 00003358 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 15125 0000335A 803E[3B05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 15126 0000335F 7405                    	JZ	short NOT_DIR
 15127                                  Del_access_err:
 15128 00003361 B80500                  	MOV	AX,error_access_denied
 15129 00003364 EBE8                    	JMP	short ErrorReturn
 15130                                  
 15131                                  NOT_DIR:
 15132 00003366 08E4                    	OR	AH,AH			; Check if device name
 15133 00003368 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 15134                                  
 15135                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 15136                                  
 15137                                  DELFILE:
 15138 0000336A 800E[2C05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 15139                                  
 15140                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 15141                                  ; DOS issue a build BPB call the next time this drive is accessed.
 15142                                  
 15143 0000336F 1E                      	PUSH	DS
 15144 00003370 8A26[3B05]              	MOV	AH,[DELALL]
 15145 00003374 C53E[9E05]              	LDS	DI,[CURBUF]
 15146                                  	
 15147                                  ;hkn; SS override
 15148 00003378 36F606[2805]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 15149 0000337E 7509                    	JNZ	short DoDelete		; yes
 15150                                  
 15151 00003380 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 15152 00003384 7403                    	JZ	short DoDelete		; not read only
 15153                                  
 15154 00003386 1F                      	POP	DS
 15155 00003387 EB29                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 15156                                  
 15157                                  DoDelete:
 15158 00003389 E87700                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 15159 0000338C 7303                    	JNC	short DEL_SHARE_OK
 15160 0000338E 1F                      	POP	DS
 15161 0000338F EB21                    	JMP	SHORT DELNXT		; Skip it
 15162                                  
 15163                                  DEL_SHARE_OK:
 15164                                  	; MSDOS 6.0
 15165                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 15166                                  	;				;LB. if already dirty		  ;AN000;
 15167                                  	;JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 15168                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 15169 00003391 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 15170                                  ;yesdirty:
 15171                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 15172 00003395 8827                    	mov	[bx],ah ; 05/07/2019
 15173 00003397 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 15174 00003399 1F                      	POP	DS
 15175 0000339A 800E[2C05]10            	OR	byte [FOUNDDEL],FILEDELETED ; Deleted file
 15176                                  
 15177 0000339F 83FB02                  	CMP	BX,2
 15178 000033A2 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 15179                                  	;cmp	bx,[es:bp+0Dh] ; 25/07/2019
 15180 000033A4 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 15181 000033A8 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 15182                                  
 15183 000033AA E81D24                  	call	RELEASE 		; Free file data
 15184 000033AD 724E                    	JC	short No_fileJ
 15185                                  
 15186                                  ; DOS 3.3  FastOpen
 15187                                  
 15188 000033AF E8BA00                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 15189                                  
 15190                                  ; DOS 3.3  FastOpen
 15191                                  
 15192                                  DELNXT:
 15193 000033B2 C42E[4605]              	LES	BP,[THISDPB]		; Possible to get here without this set
 15194 000033B6 E8D815                  	call	GETENTRY		; Registers need to be reset
 15195 000033B9 7242                    	JC	short No_fileJ
 15196 000033BB E80C15                  	call	NEXTENT
 15197 000033BE 73AA                    	JNC	short DELFILE
 15198 000033C0 C42E[4605]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 15199                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 15200 000033C4 268A4600                	MOV	AL,[ES:BP]
 15201 000033C8 E8A12E                  	call	FLUSHBUF
 15202 000033CB 7230                    	JC	short No_fileJ
 15203                                  ;
 15204                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 15205                                  ;
 15206                                  ;   not found not deleted		file not found
 15207                                  ;   not found	  deleted		*** impossible ***
 15208                                  ;	found not deleted		access denied (read-only)
 15209                                  ;	found	  deleted		no error
 15210                                  ;
 15211 000033CD F606[2C05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 15212 000033D2 7422                    	JZ	short DelError		; no, figure out what's wrong.
 15213                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 15214                                  ; and to force the DOS to issue a media check.
 15215 000033D4 F606[2805]08            	TEST	byte [ATTRIB],attr_volume_id
 15216 000033D9 7417                    	jz	short No_Set_Flag
 15217 000033DB 50                      	PUSH	AX
 15218 000033DC 06                      	PUSH	ES
 15219 000033DD 57                      	PUSH	DI
 15220 000033DE C43E[5E05]              	LES	DI,[THISCDS]
 15221 000033E2 268A25                  	MOV	AH,[ES:DI]		; Get drive
 15222 000033E5 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 15223 000033E8 8826[370A]              	mov	[VOLCHNG_FLAG],AH
 15224                                  	
 15225                                  	; MSDOS 6.0
 15226                                  	;XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 15227                                  	;call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 15228                                  	 
 15229 000033EC E8E02A                  	call	FATREAD_CDS		; force media check
 15230 000033EF 5F                      	POP	DI
 15231 000033F0 07                      	POP	ES
 15232 000033F1 58                      	POP	AX
 15233                                  No_Set_Flag:
 15234 000033F2 E822ED                  	call	LcritDisk		; carry is clear
 15235 000033F5 C3                      	retn
 15236                                  DelError:
 15237 000033F6 F606[2C05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 15238 000033FB 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 15239                                  No_fileJ:
 15240 000033FD E94BFF                  	JMP	No_file ; 10/08/2018 		; Nope
 15241                                  Del_access_errJ:
 15242 00003400 E95EFF                  	JMP	Del_access_err ; 10/08/2018
 15243                                  
 15244                                  ; 08/08/2018 - Retro DOS v3.0
 15245                                  
 15246                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 15247                                  ;---------------------------------------------------------------------------
 15248                                  ; Procedure Name : REN_DEL_Check
 15249                                  ;
 15250                                  ; Inputs:
 15251                                  ;	[THISDPB] set
 15252                                  ;	[CURBUF+2]:BX points to entry
 15253                                  ;	[CURBUF+2]:SI points to firclus field of entry
 15254                                  ;	[WFP_Start] points to name
 15255                                  ; Function:
 15256                                  ;	Check for Exclusive access on given file.
 15257                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 15258                                  ; Outputs:
 15259                                  ;	ES:BP = [THISDPB]
 15260                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 15261                                  ;		last element will be loaded from the directory entry.  This is
 15262                                  ;		so the name given to the sharer doesn't have any meta chars in
 15263                                  ;		it.
 15264                                  ;	Carry set if sharing violation, INT 24H generated
 15265                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 15266                                  ;		This is because input AX is preserved.
 15267                                  ;		Caller must set the error if needed.
 15268                                  ;	Carry clear
 15269                                  ;		OK
 15270                                  ; AX,DS,BX,SI,DI preserved
 15271                                  ;---------------------------------------------------------------------------
 15272                                  
 15273                                  REN_DEL_Check:
 15274                                  
 15275 00003403 1E                      	PUSH	DS
 15276 00003404 57                      	PUSH	DI
 15277 00003405 50                      	PUSH	AX
 15278 00003406 53                      	PUSH	BX
 15279 00003407 56                      	PUSH	SI		; Save CURBUF pointers
 15280                                  	
 15281 00003408 16                      	push	ss
 15282 00003409 07                      	pop	es
 15283                                  
 15284                                  ;hkn; context ES will assume ES to DOSDATA
 15285                                  ;hkn; ASSUME	ES:DOSGROUP
 15286                                  
 15287                                  ;hkn; SS override
 15288 0000340A 368B3E[6E05]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 15289 0000340F 89DE                    	MOV	SI,BX
 15290                                  
 15291                                  ;hkn; SS override
 15292 00003411 368E1E[A005]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 15293 00003416 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 15294 00003418 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 15295 0000341B E8EFEB                  	call	StrLen		; CX is length of ES:DI including NUL
 15296 0000341E 49                      	DEC	CX		; Don't include nul in count
 15297 0000341F 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 15298 00003421 E8543B                  	call	SkipBack	; Back up one element
 15299 00003424 47                      	INC	DI		; Point to start of last element
 15300                                  
 15301                                  ;hkn; SS override
 15302                                  	; MSDOS 6.0
 15303                                  	;MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 15304                                  	;
 15305 00003425 E868FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 15306 00003428 5E                      	POP	SI		; Get back entry pointers
 15307 00003429 5B                      	POP	BX
 15308 0000342A 53                      	PUSH	BX
 15309 0000342B 56                      	PUSH	SI		; Back on stack
 15310                                  	
 15311 0000342C 16                      	push	ss
 15312 0000342D 1F                      	pop	ds
 15313                                  
 15314                                  ;hkn; context DS will assume ES to DOSDATA
 15315                                  ;hkn; ASSUME	DS:DOSGROUP
 15316                                  
 15317                                  ;
 15318                                  ; Close the file if possible by us.
 15319                                  ;
 15320                                  ;if installed
 15321 0000342E FF1E[9000]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 15322                                  ;else
 15323                                  ;	Call	ShCloseFile
 15324                                  ;endif
 15325 00003432 8C1E[5C05]              	MOV	[THISSFT+2],DS
 15326                                  
 15327                                  ;hkn; AUXSTACK is in DOSDATA
 15328 00003436 C706[5A05][FB06]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size
 15329                                  				; Scratch space
 15330 0000343C 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 15331 0000343E E80A20                  	call	DOOPEN		; Fill in SFT for share check
 15332 00003441 C43E[5A05]              	LES	DI,[THISSFT]
 15333 00003445 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH
 15334                                  				; requires exclusive access
 15335                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 15336 0000344B 26C7050100              	mov	word [ES:DI],1
 15337 00003450 E84842                  	call	ShareEnter
 15338 00003453 720D                    	jc	short CheckDone
 15339 00003455 C43E[5A05]              	LES	DI,[THISSFT]
 15340                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 15341 00003459 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 15342                                  	
 15343 0000345E E83542                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 15344 00003461 F8                      	CLC
 15345                                  CheckDone:
 15346 00003462 C42E[4605]              	LES	BP,[THISDPB]
 15347 00003466 5E                      	POP	SI
 15348 00003467 5B                      	POP	BX
 15349 00003468 58                      	POP	AX
 15350 00003469 5F                      	POP	DI
 15351 0000346A 1F                      	POP	DS
 15352 0000346B C3                      	retn
 15353                                  
 15354                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 15355                                  ;---------------------------------------------------------------------------
 15356                                  ; Procedure Name : FastOpen_Delete
 15357                                  ; Inputs:
 15358                                  ;	None
 15359                                  ; Function:
 15360                                  ;	Call FastOpen to delete the dir info.
 15361                                  ; Outputs:
 15362                                  ;	None
 15363                                  ;---------------------------------------------------------------------------
 15364                                  
 15365                                  FastOpen_Delete:
 15366 0000346C 9C                      	PUSHF			; save flag
 15367 0000346D 56                      	PUSH	SI		; save registers
 15368 0000346E 53                      	PUSH	BX
 15369 0000346F 50                      	PUSH	AX
 15370                                  ;hkn; SS override
 15371 00003470 8B36[6E05]              	MOV	SI,[WFP_START]	; ds:si points to path name
 15372 00003474 B003                    	MOV	AL,FONC_delete	; al = 3
 15373                                  fastinvoke:
 15374                                  ;hkn; FastTable is in DOSDATA
 15375 00003476 BB[750F]                	MOV	BX,FastTable+2
 15376 00003479 FF1F                    	CALL	far [BX]	; call fastopen
 15377 0000347B 58                      	POP	AX		; restore registers
 15378 0000347C 5B                      	POP	BX
 15379 0000347D 5E                      	POP	SI
 15380 0000347E 9D                      	POPF			; restore flag
 15381 0000347F C3                      	retn
 15382                                  
 15383                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 15384                                  ;---------------------------------------------------------------------------
 15385                                  ; Procedure Name : FastOpen_Update
 15386                                  ;
 15387                                  ; Inputs:
 15388                                  ;	DL     drive number (A=0,B=1,,,)
 15389                                  ;	CX     first cluster #
 15390                                  ;	AH     0 updates dir entry
 15391                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 15392                                  ;	ES:DI  directory entry
 15393                                  ; Function:
 15394                                  ;	Call FastOpen to update the dir info.
 15395                                  ; Outputs:
 15396                                  ;	None
 15397                                  ;---------------------------------------------------------------------------
 15398                                  
 15399                                  FastOpen_Update:
 15400 00003480 9C                      	PUSHF			; save flag
 15401 00003481 56                      	PUSH	SI
 15402 00003482 53                      	PUSH	BX		; save regs
 15403 00003483 50                      	PUSH	AX
 15404 00003484 B004                    	MOV	AL,FONC_update	; al = 4
 15405 00003486 EBEE                    	JMP	short fastinvoke
 15406                                  
 15407                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 15408                                  ;---------------------------------------------------------------------------
 15409                                  ; PROCEDURE Name : FastOpen_Rename
 15410                                  ;
 15411                                  ; Inputs:
 15412                                  ;	 REN_WFP   = Path Name
 15413                                  ;	 NAME1	   = New Name
 15414                                  ; Function:
 15415                                  ;	Call FastOpen to rename the dir entry in the cache
 15416                                  ; Outputs:
 15417                                  ;	None
 15418                                  ;---------------------------------------------------------------------------
 15419                                  
 15420                                  FastOpen_Rename:
 15421                                  	; 08/08/2018 - Retro DOS v3.0
 15422                                  	; MSDOS 6.0
 15423                                  	;PUSHF			;AN001 save flag
 15424                                  	;PUSH	SI		;AN001 save registers
 15425                                  	;PUSH	DI		;AN001
 15426                                  	;PUSH	BX		;AN001
 15427                                  	;PUSH	AX		;AN001
 15428                                  	;
 15429                                  ;hkn; SS override
 15430                                  	;;MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 15431                                  	;
 15432                                  	; ? - 08/08/2018 - Retro DOS v3.0
 15433                                  	;push	ss
 15434                                  	;pop	ds
 15435                                  	;mov	si,[REN_WFP]
 15436                                  	;
 15437                                  ;hkn; NAME1 is in DOSDATA
 15438                                  	;MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 15439                                  	;MOV	AL,FONC_Rename	;;AN001  al = 6
 15440                                  	;
 15441                                  ;hkn; FastTable is in DOSDATA
 15442                                  	;MOV	BX,FastTable+2
 15443                                  	;CALL	far [BX]	;;AN001  call fastopen
 15444                                  	;
 15445                                  	;POP	AX		; restore registers  ;AN001
 15446                                  	;POP	BX				     ;AN001
 15447                                  	;POP	DI				     ;AN001
 15448                                  	;POP	SI				     ;AN001
 15449                                  	;POPF			; restore flag	     ;AN001
 15450                                  	;retn					     ;AN001
 15451                                  
 15452                                  	; MSDOS 6.0
 15453                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 15454                                  Fast_Dispatch:
 15455                                  ;hkn; FastTable is in DOSDATA
 15456                                  	;MOV	SI,FastTable+2	; index to the	     ;AN000;
 15457                                  ;hkn; use SS override
 15458                                  	;CALL	far [SS:SI]	; RMFD call fastopen
 15459                                  	;retn
 15460                                  
 15461                                  ;============================================================================
 15462                                  ; RENAME.ASM, MSDOS 6.0, 1991
 15463                                  ;============================================================================
 15464                                  ; 08/08/2018 - Retro DOS v3.0
 15465                                  
 15466                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 15467                                  ;	NAME	DOS_RENAME
 15468                                  
 15469                                  ;**	Low level routine for renaming files
 15470                                  ;
 15471                                  ;	DOS_RENAME
 15472                                  ;
 15473                                  ;	Modification history:
 15474                                  ;
 15475                                  ;	    Created: ARR 30 March 1983
 15476                                  
 15477                                  ;----------------------------------------------------------------------------
 15478                                  ;
 15479                                  ; Procedure Name : DOS_RENAME
 15480                                  ;
 15481                                  ; Inputs:
 15482                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 15483                                  ;		chars, NUL terminated)
 15484                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 15485                                  ;		( = -1 if current dir not involved, else
 15486                                  ;		 Points to first char after last "/" of current dir part)
 15487                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 15488                                  ;		chars, NUL terminated)
 15489                                  ;	[THISCDS] Points to CDS being used
 15490                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15491                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15492                                  ; Function:
 15493                                  ;	Rename the specified file(s)
 15494                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 15495                                  ; Outputs:
 15496                                  ;	CARRY CLEAR
 15497                                  ;	    OK
 15498                                  ;	CARRY SET
 15499                                  ;	    AX is error code
 15500                                  ;		error_file_not_found
 15501                                  ;			No match for source, or dest path invalid
 15502                                  ;		error_not_same_device
 15503                                  ;			Source and dest are on different devices
 15504                                  ;		error_access_denied
 15505                                  ;			Directory specified (not simple rename),
 15506                                  ;			Device name given, Destination exists.
 15507                                  ;			NOTE: In third case some renames may have
 15508                                  ;			 been done if metas.
 15509                                  ;		error_path_not_found
 15510                                  ;			Bad path (not in curr dir part if present)
 15511                                  ;			SOURCE ONLY
 15512                                  ;		error_bad_curr_dir
 15513                                  ;			Bad path in current directory part of path
 15514                                  ;			SOURCE ONLY
 15515                                  ;		error_sharing_violation
 15516                                  ;			Deny both access required, generates an INT 24.
 15517                                  ; DS preserved, others destroyed
 15518                                  ;
 15519                                  ;----------------------------------------------------------------------------
 15520                                  
 15521                                  DOS_RENAME:
 15522                                  
 15523                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 15524                                  ;hkn; at this point to DOSDATA.
 15525                                  
 15526 00003488 E8E6EB                  	call	TestNet
 15527 0000348B 7306                    	JNC	short LOCAL_RENAME
 15528                                  
 15529                                  ;IF NOT Installed
 15530                                  ;	transfer NET_RENAME
 15531                                  ;ELSE
 15532                                  	;MOV	AX,(MultNET SHL 8) OR 17
 15533                                  	;INT	2FH
 15534                                  	;return
 15535                                  
 15536 0000348D B81111                  	mov     ax, 1111h
 15537 00003490 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 15538                                  			; SS = DS = DOS CS, 
 15539                                  			; SDA first filename pointer = offset of fully-qualified old name
 15540                                  			; SDA CDS pointer -> current directory
 15541                                  			; Return: CF set on error
 15542 00003492 C3                      	retn
 15543                                  ;ENDIF
 15544                                  
 15545                                  LOCAL_RENAME:
 15546 00003493 C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 15547 00003498 8B36[6E05]              	MOV	SI,[WFP_START]
 15548 0000349C 8B3E[7005]              	MOV	DI,[REN_WFP]
 15549 000034A0 8A04                    	MOV	AL,[SI]
 15550 000034A2 8A25                    	MOV	AH,[DI]
 15551 000034A4 0D2020                  	OR	AX,2020H		; Lower case
 15552 000034A7 38E0                    	CMP	AL,AH
 15553 000034A9 7405                    	JZ	short SAMEDRV
 15554 000034AB B81100                  	MOV	AX,error_not_same_device
 15555 000034AE F9                      	STC
 15556 000034AF C3                      	retn
 15557                                  
 15558                                  SAMEDRV:
 15559 000034B0 FF36[FA02]              	PUSH	WORD [DMAADD+2]
 15560 000034B4 FF36[F802]              	PUSH	WORD [DMAADD]
 15561 000034B8 8C1E[FA02]              	MOV	[DMAADD+2],DS
 15562                                  
 15563                                  ;hkn; RENAMEDMA is in DOSDATA
 15564 000034BC C706[F802][B605]        	MOV	WORD [DMAADD],RENAMEDMA
 15565 000034C2 C606[2D05]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 15566 000034C7 E845EC                  	call	EcritDisk
 15567 000034CA E8B804                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 15568                                  					;    points to entry
 15569 000034CD 7315                    	JNC	short Check_Dev
 15570 000034CF 83F812                  	CMP	AX,error_no_more_files
 15571 000034D2 7503                    	JNZ	short GOTERR
 15572 000034D4 B80200                  	MOV	AX,error_file_not_found
 15573                                  GOTERR:
 15574 000034D7 F9                      	STC
 15575                                  RENAME_POP:
 15576 000034D8 8F06[F802]              	POP	WORD [DMAADD]
 15577 000034DC 8F06[FA02]              	POP	WORD [DMAADD+2]
 15578 000034E0 E834EC                  	call	LcritDisk
 15579 000034E3 C3                      	retn
 15580                                  
 15581                                  Check_Dev:
 15582 000034E4 B80500                  	MOV	AX,error_access_denied	; Assume error
 15583                                  	;
 15584                                  	; MSDOS 6.0
 15585                                  	;PUSH	DS			      ;PTM.			    ;AN000;
 15586                                  	;LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 15587                                  	;;add	si,21
 15588                                  	;ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 15589                                  	;;test	byte [si+11],10h
 15590                                  	;TEST byte [SI+dir_entry.dir_attr],attr_directory  ;PTM.	    ;AN000;
 15591                                  	;JZ	short notdir		      ;PTM.			    ;AN000;
 15592                                  	;MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 15593                                  	;call	Check_Pathlen2		      ;PTM.   length < 67	    ;AN000;
 15594                                  ;notdir:
 15595                                  	;POP	DS			      ;PTM.			    ;AN000;
 15596                                  	;JA	short GOTERR		      ;PTM.			    ;AN000;
 15597                                  	;
 15598                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15599 000034E7 803E[2D05]00            	CMP	byte [FOUND_DEV],0
 15600 000034EC 75E9                    	JNZ	short GOTERR
 15601                                  ; At this point a source has been found. There is search continuation info (a
 15602                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 15603                                  ; directory entry found.
 15604                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 15605                                  ; throughout the RENAME since it is known at this point that the source and
 15606                                  ; destination are both on the same device.
 15607                                  ; [SATTRIB] is also set.
 15608 000034EE 89DE                    	MOV	SI,BX
 15609 000034F0 83C61A                  	ADD	SI,dir_entry.dir_first
 15610 000034F3 E80DFF                  	call	REN_DEL_Check
 15611 000034F6 7305                    	JNC	short REN_OK1
 15612 000034F8 B82000                  	MOV	AX,error_sharing_violation
 15613 000034FB EBDB                    	JMP	short RENAME_POP
 15614                                  
 15615                                  ;------------------------------------------------------------------------------
 15616                                  ; Check if the source is a file or directory. If file, delete the entry
 15617                                  ; from the Fastopen cache. If directory, rename it later
 15618                                  ;------------------------------------------------------------------------------
 15619                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 15620                                  	; MSDOS 6.0
 15621                                  	;PUSH	SI
 15622                                  	;LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 15623                                  	;ADD	SI,find_buf.attr	;;BN00XPTM.P5520		   ;AN000;
 15624                                  	;add	si,21
 15625                                  	;;test	byte [si+11],10h
 15626                                  	;TEST byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.   ;AN000;
 15627                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			   ;AN000;
 15628                                  	;POP	SI			;BN00X
 15629                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 15630                                  	;
 15631                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 15632                                  	;POP	SI
 15633                                  	;
 15634                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 15635 000034FD E86CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 15636                                  
 15637                                  ;SWAP_SOURCE:
 15638                                  	; MSDOS 3.3
 15639                                  	;MOV	SI,[REN_WFP]
 15640                                  	;MOV	[WFP_START],SI
 15641                                  	; MSDOS 6.0
 15642 00003500 A1[6E05]                	MOV	AX,[WFP_START]		; Swap source and destination
 15643 00003503 8B36[7005]              	MOV	SI,[REN_WFP]		; Swap source and destination
 15644 00003507 8936[6E05]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 15645 0000350B A3[7005]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 15646                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15647 0000350E C706[7205]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 15648 00003514 C706[3A05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 15649                                  					; A rename is like a CREATE_NEW as far
 15650                                  					; as the destination is concerned.
 15651 0000351A E80C15                  	call	GetPathNoSet
 15652                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 15653                                  ;   since no files match the destination name. If it fails for any other
 15654                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 15655                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 15656                                  ;   if the rename should fail because we haven't built an explicit name by
 15657                                  ;   substituting for the meta chars in it. In this case the destination file
 15658                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 15659                                  ;   in the directory entry part.
 15660 0000351D 7223                    	JC	short NODEST
 15661                                  	;; MSDOS 6.0
 15662                                  	;; JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 15663                                  	; !! MSDOS 3.3 !!
 15664 0000351F 7404                    	JZ	short BAD_ACC ; !!	; Dest string is a directory
 15665                                  	;
 15666 00003521 08E4                    	OR	AH,AH			; Device?
 15667 00003523 7930                    	JNS	short SAVEDEST		; No, continue
 15668                                  BAD_ACC:
 15669 00003525 B80500                  	MOV	AX,error_access_denied
 15670 00003528 F9                      	STC
 15671                                  RENAME_CLEAN:
 15672 00003529 9C                      	PUSHF				; Save carry state
 15673 0000352A 50                      	PUSH	AX			; and error code (if carry set)
 15674 0000352B A0[3305]                	MOV	AL,[THISDRV]
 15675 0000352E E83B2D                  	call	FLUSHBUF
 15676 00003531 58                      	POP	AX
 15677 00003532 803E[1403]00            	CMP	byte [FAILERR],0
 15678 00003537 7503                    	JNZ	short BAD_ERR		; User FAILed to I 24
 15679 00003539 9D                      	POPF
 15680 0000353A EB9C                    	JMP	short RENAME_POP
 15681                                  
 15682                                  BAD_ERR:
 15683 0000353C 58                      	POP	AX			; Saved flags
 15684 0000353D B80300                  	MOV	AX,error_path_not_found
 15685 00003540 EB95                    	JMP	short GOTERR
 15686                                  
 15687                                  NODEST:
 15688 00003542 750B                    	JNZ	short BAD_PATH
 15689 00003544 803E[1403]00            	CMP	byte [FAILERR],0
 15690 00003549 7504                    	JNZ	short BAD_PATH	; Search for dest failed because user FAILed on
 15691                                  				;	I 24
 15692 0000354B 08C9                    	OR	CL,CL
 15693 0000354D 7506                    	JNZ	short SAVEDEST
 15694                                  BAD_PATH:
 15695 0000354F B80300                  	MOV	AX,error_path_not_found
 15696 00003552 F9                      	STC
 15697 00003553 EB83                    	JMP	short RENAME_POP
 15698                                  
 15699                                  SAVEDEST:
 15700 00003555 16                      	push	ss
 15701 00003556 07                      	pop	es
 15702                                  
 15703                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 15704 00003557 BF[1405]                	MOV	DI,NAME2
 15705 0000355A BE[0805]                	MOV	SI,NAME1
 15706                                  
 15707 0000355D B90B00                  	MOV	CX,11
 15708 00003560 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 15709 00003562 A1[7E05]                	MOV	AX,[DIRSTART]
 15710 00003565 A3[2105]                	MOV	[DESTSTART],AX
 15711                                  BUILDDEST:
 15712 00003568 16                      	push	ss
 15713 00003569 07                      	pop	es			; needed due to JMP BUILDDEST below
 15714                                  
 15715                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 15716 0000356A BB[CB05]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 15717 0000356D BF[0805]                	MOV	DI,NAME1		; Real dest name goes here
 15718 00003570 BE[1405]                	MOV	SI,NAME2		; Raw dest
 15719                                  
 15720 00003573 B90B00                  	MOV	CX,11
 15721                                  	
 15722                                  	; MSDOS 6.0
 15723                                  	;CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 15724                                  
 15725                                  	; MSDOS 3.3
 15726                                  
 15727                                  ; 08/08/2018 - Retro DOS v3.0
 15728                                  ; MSDOS 6.0 
 15729                                  ;---------------------------------------------------------------------------
 15730                                  ;Procedure: NEW_RENAME
 15731                                  ;
 15732                                  ;Input: DS:SI -> raw string with ?
 15733                                  ;	ES:DI -> destination string
 15734                                  ;	DS:BX -> source string
 15735                                  ;Function: replace ? chars of raw string with chars in source string and
 15736                                  ;	   put in destination string
 15737                                  ;Output: ES:DI-> new string
 15738                                  ;---------------------------------------------------------------------------
 15739                                  
 15740                                  NEW_RENAME:
 15741                                  NEWNAM:
 15742                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 15743 00003576 AC                      	LODSB
 15744 00003577 3C3F                    	CMP	AL,"?"
 15745 00003579 7502                    	JNZ	short NOCHG
 15746 0000357B 8A07                    	MOV	AL,[BX] 		; Get replace char
 15747                                  NOCHG:
 15748 0000357D AA                      	STOSB
 15749 0000357E 43                      	INC	BX			; Next replace char
 15750 0000357F E2F5                    	LOOP	NEWNAM
 15751                                  	; MSSOS 6.0
 15752                                  	;retn
 15753                                  
 15754                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15755 00003581 C606[2805]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 15756 00003586 C606[3A05]FF            	MOV	byte [CREATING],0FFH
 15757 0000358B E84717                  	call	DEVNAME 		; Check if we built a device name
 15758 0000358E 7395                    	JNC	short BAD_ACC
 15759 00003590 8B1E[2105]              	MOV	BX,[DESTSTART]
 15760 00003594 C42E[4605]              	LES	BP,[THISDPB]
 15761 00003598 E82714                  	call	SETDIRSRCH		; Reset search to start of dir
 15762 0000359B 7288                    	JC	short BAD_ACC 		; Screw up
 15763 0000359D E8D912                  	call	FINDENTRY		; See if new name already exists
 15764 000035A0 7383                    	JNC	short BAD_ACC 		; Error if found
 15765 000035A2 803E[1403]00            	CMP	byte [FAILERR],0
 15766 000035A7 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 15767 000035A9 A1[2105]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 15768 000035AC 3B06[C505]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 15769 000035B0 7453                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 15770                                  
 15771 000035B2 A0[D605]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 15772 000035B5 A810                    	TEST	AL,attr_directory
 15773 000035B7 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 15774                                  					; otherwise the . and .. entries get
 15775                                  					; wiped.
 15776 000035B9 A2[2805]                	MOV	[ATTRIB],AL
 15777 000035BC 8C1E[5C05]              	MOV	[THISSFT+2],DS
 15778                                  
 15779                                  ;hkn; AUXSTACK is in DOSDATA
 15780 000035C0 BE[FB06]                	MOV	SI,AUXSTACK-SF_ENTRY.size
 15781 000035C3 8936[5A05]              	MOV	[THISSFT],SI
 15782 000035C7 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 15783 000035CC 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 15784 000035CE E80C1D                  	call	RENAME_MAKE		; This is in mknode
 15785 000035D1 7303                    	JNC	short GOT_DEST
 15786                                  BAD_ACCJ:
 15787 000035D3 E94FFF                  	JMP	BAD_ACC
 15788                                  
 15789                                  GOT_DEST:
 15790 000035D6 53                      	push	bx
 15791 000035D7 C43E[5A05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 15792 000035DB E8B840                  	call	ShareEnd		; we need to remove it.
 15793 000035DE 5B                      	pop	bx
 15794                                  ; A zero length entry with the correct new name has now been made at
 15795                                  ;   [CURBUF+2]:BX.
 15796 000035DF C43E[9E05]              	LES	DI,[CURBUF]
 15797                                  
 15798                                  	; MSDOS 6.0
 15799                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15800                                  	;				;LB. if already dirty		  ;AN000;
 15801                                  	;JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 15802                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15803                                  	
 15804 000035E3 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15805                                  ;yesdirty1:
 15806 000035E8 89DF                    	MOV	DI,BX
 15807 000035EA 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 15808                                  
 15809                                  ;hkn; RENAMEDMA is in DOSDATA
 15810 000035ED BE[D605]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 15811 000035F0 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr ; mov cx,21
 15812 000035F3 F3A4                    	REP	MOVSB
 15813 000035F5 E85100                  	CALL	GET_SOURCE
 15814 000035F8 724B                    	JC	short RENAME_OVER
 15815 000035FA 89DF                    	MOV	DI,BX
 15816 000035FC 8E06[A005]              	MOV	ES,[CURBUF+2]
 15817 00003600 B0E5                    	MOV	AL,DIRFREE
 15818 00003602 AA                      	STOSB				; "free" the source
 15819 00003603 EB13                    	JMP	SHORT DIRTY_IT
 15820                                  
 15821                                  SIMPLE_RENAME:
 15822 00003605 E84100                  	CALL	GET_SOURCE		; Get the source back
 15823 00003608 723B                    	JC	short RENAME_OVER
 15824 0000360A 89DF                    	MOV	DI,BX
 15825 0000360C 8E06[A005]              	MOV	ES,[CURBUF+2]
 15826                                  
 15827                                  ;hkn; NAME1 is in DOSDATA
 15828 00003610 BE[0805]                	MOV	SI,NAME1		; New Name
 15829 00003613 B90B00                  	MOV	CX,11
 15830 00003616 F3A4                    	REP	MOVSB
 15831                                  DIRTY_IT:
 15832 00003618 8B3E[9E05]              	MOV	DI,[CURBUF]
 15833                                  
 15834                                  	; MSDOS 6.0
 15835                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15836                                  	;				;LB. if already dirty		  ;AN000;
 15837                                  	;JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 15838                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15839                                  	
 15840 0000361C 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15841                                  ;------------------------------------------------------------------------------
 15842                                  ; Check if the source is a directory of file. If directory rename it to the
 15843                                  ; the new name in the Fastopen cache buffer.  If file name it has been
 15844                                  ; previously deleted.
 15845                                  ;------------------------------------------------------------------------------
 15846                                  ;yesdirty2:
 15847                                  	; MSDOS 6.0
 15848                                  	;PUSH	SI
 15849                                  	;LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 15850                                  	;ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 15851                                  	;TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 15852                                  	;JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 15853                                  	;call	FASTOPEN_RENAME		;;BN00X rename dir entry in fastopen
 15854                                  	;POP	SI
 15855                                  	;JMP	SHORT NOT_DIRTY1
 15856                                  ;NOT_DIR2:				;;BN00X it is a file, delete the entry
 15857                                  	;POP	SI
 15858                                  ;NOT_DIRTY1:				;;BN00X
 15859                                  NEXT_SOURCE:
 15860                                  ;hkn; RENAMEDMA is in DOSDATA
 15861 00003621 BE[B705]                	MOV	SI,RENAMEDMA+1		;Name
 15862                                  ;
 15863                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 15864                                  ; to enter it before going to RENAME_Next.
 15865                                  ;
 15866 00003624 E8E8EA                  	call	EcritDisk
 15867 00003627 C606[3A05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 15868                                  				  ;  to FF when we made the prev new file).
 15869 0000362C E85704                  	call	RENAME_NEXT
 15870                                  ;
 15871                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 15872                                  ; we were before.
 15873                                  ;
 15874 0000362F 7214                    	JC	short RENAME_OVER
 15875 00003631 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 15876 00003634 E8CCFD                  	call	REN_DEL_Check
 15877 00003637 7306                    	JNC	short REN_OK2
 15878 00003639 B82000                  	MOV	AX,error_sharing_violation
 15879 0000363C E9EAFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 15880                                  
 15881                                  ;------------------------------------------------------------------------------
 15882                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 15883                                  ; if directory, rename directory name in the Fastopen cache.
 15884                                  ;-----------------------------------------------------------------------------
 15885                                  REN_OK2:
 15886                                  	; MSDOS 6.0
 15887                                  	;MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 15888                                  	;TEST	AL,attr_directory	;;BN00X directory
 15889                                  	;JZ	short Ren_Directory	;;BN00X no - file, delete it
 15890                                  	
 15891                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15892 0000363F E82AFE                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 15893 00003642 E923FF                  	JMP	BUILDDEST		;;BN00X
 15894                                  
 15895                                  	; MSDOS 6.0
 15896                                  ;Ren_Directory:
 15897                                  	;call	FASTOPEN_RENAME 	;;BN00X delete dir info in fastopen DOS 3.3
 15898                                  	;JMP	BUILDDEST
 15899                                  
 15900                                  RENAME_OVER:
 15901 00003645 F8                      	CLC
 15902 00003646 E9E0FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 15903                                  
 15904                                  ;----------------------------------------------------------------------------
 15905                                  ; Procedure: GET_SOURCE
 15906                                  ;
 15907                                  ; Inputs:
 15908                                  ;	RENAMEDMA has source info
 15909                                  ; Function:
 15910                                  ;	Re-find the source
 15911                                  ; Output:
 15912                                  ;	[CURBUF] set
 15913                                  ;	[CURBUF+2]:BX points to entry
 15914                                  ;	Carry set if error (currently user FAILed to I 24)
 15915                                  ; DS preserved, others destroyed
 15916                                  ;----------------------------------------------------------------------------
 15917                                  
 15918                                  GET_SOURCE:
 15919 00003649 8B1E[C505]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 15920 0000364D C42E[4605]              	LES	BP,[THISDPB]
 15921 00003651 E86E13                  	call	SETDIRSRCH
 15922 00003654 7209                    	JC	short gs_ret_label	; retc
 15923 00003656 E85B16                  	call	STARTSRCH
 15924 00003659 A1[C305]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 15925 0000365C E83513                  	call	GETENT
 15926                                  
 15927                                  gs_ret_label:
 15928 0000365F C3                      	retn
 15929                                  
 15930                                  ;============================================================================
 15931                                  ; FINFO.ASM, MSDOS 6.0, 1991
 15932                                  ;============================================================================
 15933                                  ; 08/08/2018 - Retro DOS v3.0
 15934                                  
 15935                                  ;**	Low level routines for returning file information and setting file
 15936                                  ;	attributes
 15937                                  ;
 15938                                  ;	GET_FILE_INFO
 15939                                  ;	SET_FILE_ATTRIBUTE
 15940                                  ;
 15941                                  ;	Modification history:
 15942                                  ;
 15943                                  ;	    Created: ARR 30 March 1983
 15944                                  ;
 15945                                  ;	M025: Return access_denied if attempting to set
 15946                                  ;	      attribute of root directory.
 15947                                  ;
 15948                                  
 15949                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 15950                                  
 15951                                  ;---------------------------------------------------------------------------
 15952                                  ; Procedure Name : GET_FILE_INFO
 15953                                  ;
 15954                                  ; Inputs:
 15955                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15956                                  ;		terminated)
 15957                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15958                                  ;		( = -1 if current dir not involved, else
 15959                                  ;		 Points to first char after last "/" of current dir part)
 15960                                  ;	[THISCDS] Points to CDS being used
 15961                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15962                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15963                                  ; Function:
 15964                                  ;	Get Information about a file
 15965                                  ; Returns:
 15966                                  ;	CARRY CLEAR
 15967                                  ;	    AX = Attribute of file
 15968                                  ;	    CX = Time stamp of file
 15969                                  ;	    DX = Date stamp of file
 15970                                  ;	    BX:DI = Size of file (32 bit)
 15971                                  ;	CARRY SET
 15972                                  ;	    AX is error code
 15973                                  ;		error_file_not_found
 15974                                  ;			Last element of path not found
 15975                                  ;		error_path_not_found
 15976                                  ;			Bad path (not in curr dir part if present)
 15977                                  ;		error_bad_curr_dir
 15978                                  ;			Bad path in current directory part of path
 15979                                  ; DS preserved, others destroyed
 15980                                  ;---------------------------------------------------------------------------
 15981                                  
 15982                                  GET_FILE_INFO:
 15983                                  
 15984                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 15985                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 15986                                  
 15987 00003660 E80EEA                  	call	TestNet
 15988 00003663 7306                    	JNC	short LOCAL_INFO
 15989                                  
 15990                                  ;IF NOT Installed
 15991                                  ;	transfer NET_GET_FILE_INFO
 15992                                  ;ELSE
 15993                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 15994                                  ;	INT	2FH
 15995                                  ;	return
 15996                                  
 15997 00003665 B80F11                  	mov     ax, 110Fh
 15998 00003668 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 15999                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 16000                                  			; SDA CDS pointer -> current directory
 16001                                  			; Return: CF set on error, AX = file attributes
 16002 0000366A C3                      	retn
 16003                                  ;ENDIF
 16004                                  
 16005                                  LOCAL_INFO:
 16006 0000366B E8A1EA                  	call	EcritDisk
 16007 0000366E C606[1603]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16008                                  	; MSDOS 6.0
 16009                                  	;call	Get_FAST_PATH
 16010                                  	; MSDOS 3.3
 16011 00003673 E8AD13                  	call	GETPATH
 16012                                  info_check:
 16013 00003676 7313                    	JNC	short info_check_dev
 16014                                  NO_PATH:
 16015 00003678 750C                    	JNZ	short bad_path1
 16016 0000367A 08C9                    	OR	CL,CL
 16017 0000367C 7408                    	JZ	short bad_path1
 16018                                  info_no_file:
 16019 0000367E B80200                  	MOV	AX,error_file_not_found
 16020                                  BadRet:
 16021 00003681 F9                      	STC
 16022                                  JustRet:
 16023 00003682 E892EA                  	call	LcritDisk
 16024 00003685 C3                      	retn
 16025                                  
 16026                                  bad_path1:
 16027 00003686 B80300                  	MOV	AX,error_path_not_found
 16028 00003689 EBF6                    	jmp	short BadRet
 16029                                  
 16030                                  info_check_dev:
 16031 0000368B 08E4                    	OR	AH,AH
 16032 0000368D 78EF                    	JS	short info_no_file	; device
 16033                                  
 16034                                  	; MSDOS 6.0
 16035                                  ;SR;
 16036                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 16037                                  ;for a root dir
 16038                                  ;
 16039 0000368F 833E[9E05]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 16040 00003694 7507                    	jne	short not_root		;no, CurBuf ptr is valid
 16041                                  
 16042 00003696 30E4                    	xor	ah,ah
 16043 00003698 B010                    	mov	al,attr_directory
 16044 0000369A F8                      	clc
 16045 0000369B EBE5                    	jmp	short JustRet
 16046                                  
 16047                                  not_root:
 16048                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16049 0000369D 1E                      	PUSH	DS
 16050 0000369E 8E1E[A005]              	MOV	DS,[CURBUF+2]
 16051 000036A2 89DE                    	MOV	SI,BX
 16052 000036A4 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 16053 000036A6 89DF                    	MOV	DI,BX
 16054 000036A8 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 16055 000036AB 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 16056 000036AE 30E4                    	XOR	AH,AH
 16057 000036B0 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 16058 000036B3 A810                    	TEST	AL,attr_directory
 16059 000036B5 7506                    	JNZ	short NO_SIZE
 16060 000036B7 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 16061 000036BA 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 16062                                  NO_SIZE:
 16063 000036BD 1F                      	POP	DS
 16064 000036BE F8                      	CLC
 16065 000036BF EBC1                    	jmp	short JustRet
 16066                                  
 16067                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 16068                                  ;-------------------------------------------------------------------------------
 16069                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 16070                                  ; Inputs:
 16071                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16072                                  ;		terminated)
 16073                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16074                                  ;		( = -1 if current dir not involved, else
 16075                                  ;		 Points to first char after last "/" of current dir part)
 16076                                  ;	[THISCDS] Points to CDS being used
 16077                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16078                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 16079                                  ;	AX is new attributes to give to file
 16080                                  ; Function:
 16081                                  ;	Set File Attributes
 16082                                  ; Returns:
 16083                                  ;	CARRY CLEAR
 16084                                  ;	    No error
 16085                                  ;	CARRY SET
 16086                                  ;	    AX is error code
 16087                                  ;		error_file_not_found
 16088                                  ;			Last element of path not found
 16089                                  ;		error_path_not_found
 16090                                  ;			Bad path (not in curr dir part if present)
 16091                                  ;		error_bad_curr_dir
 16092                                  ;			Bad path in current directory part of path
 16093                                  ;		error_access_denied
 16094                                  ;			Attempt to set an attribute which cannot be set
 16095                                  ;			(attr_directory, attr_volume_ID)
 16096                                  ;		error_sharing_violation
 16097                                  ;			Sharing mode of file did not allow the change
 16098                                  ;			(this request requires exclusive write/read access)
 16099                                  ;			(INT 24H generated)
 16100                                  ; DS preserved, others destroyed
 16101                                  ;----------------------------------------------------------------------------
 16102                                  
 16103                                  SET_FILE_ATTRIBUTE:
 16104                                  
 16105                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 16106                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 16107                                  
 16108 000036C1 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 16109 000036C4 7414                    	JZ	short set_look
 16110                                  _BAD_ACC:
 16111 000036C6 C606[EF02]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk
 16112 000036CB C606[F302]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr
 16113 000036D0 C606[F202]04            	MOV	byte [EXTERR_ACTION],errACT_Abort
 16114 000036D5 B80500                  	MOV	AX,error_access_denied
 16115 000036D8 F9                      	STC
 16116 000036D9 C3                      	retn
 16117                                  
 16118                                  set_look:
 16119 000036DA E894E9                  	call	TestNet
 16120 000036DD 7308                    	JNC	short LOCAL_SET
 16121                                  
 16122                                  ;IF NOT Installed
 16123                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 16124                                  ;ELSE
 16125 000036DF 50                      	PUSH	AX
 16126                                  	
 16127                                  	;MOV	AX,(MultNET SHL 8) OR 14
 16128                                  	;INT	2FH
 16129                                  
 16130 000036E0 B80E11                  	mov     ax, 110Eh
 16131 000036E3 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 16132                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 16133                                  			; SDA CDS pointer -> current directory
 16134                                  			; STACK: WORD new file attributes
 16135                                  			; Return: CF set on error
 16136                                  
 16137 000036E5 5B                      	POP	BX			; clean stack
 16138 000036E6 C3                      	retn
 16139                                  ;ENDIF
 16140                                  
 16141                                  LOCAL_SET:
 16142 000036E7 E825EA                  	call	EcritDisk
 16143 000036EA 50                      	PUSH	AX			; Save new attributes
 16144 000036EB C606[1603]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16145 000036F0 E83013                  	call	GETPATH 		; get path through fastopen if there	 ;AC000;
 16146 000036F3 7303                    	JNC	short set_check_device
 16147 000036F5 5B                      	POP	BX			; Clean stack (don't zap AX)
 16148 000036F6 EB80                    	JMP	short NO_PATH
 16149                                  
 16150                                  set_check_device:
 16151 000036F8 08E4                    	OR	AH,AH
 16152 000036FA 7906                    	JNS	short set_check_share
 16153 000036FC 58                      	POP	AX
 16154 000036FD E817EA                  	call	LcritDisk
 16155 00003700 EBC4                    	JMP	short _BAD_ACC 		; device
 16156                                  
 16157                                  set_check_share:
 16158 00003702 58                      	POP	AX			; Get new attributes
 16159                                  
 16160                                  	; MSDOS 6.0
 16161 00003703 833E[9E05]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 16162 00003708 740A                    	je	short cannot_set_root	; M025: Y: return error
 16163                                  
 16164                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16165 0000370A E8F6FC                  	call	REN_DEL_Check
 16166 0000370D 730B                    	JNC	short set_do
 16167 0000370F B82000                  	MOV	AX,error_sharing_violation
 16168 00003712 EB30                    	jmp	short OK_BYE
 16169                                  
 16170                                  	; MSDOS 6.0
 16171                                  cannot_set_root:			; M025:
 16172 00003714 B80500                  	mov	ax, error_access_denied	; M025: return error is attempting
 16173 00003717 F9                      	stc				; M025: to set attr. of root
 16174 00003718 EB2A                    	jmp	short OK_BYE		; M025:
 16175                                  
 16176                                  set_do:
 16177                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16178 0000371A C43E[9E05]              	LES	DI,[CURBUF]
 16179 0000371E 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 16180 00003723 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 16181                                  
 16182                                  	; MSDOS 6.0
 16183                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16184                                  	;				;LB. if already dirty		  ;AN000;
 16185                                  	;JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 16186                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16187                                  	
 16188 00003727 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16189                                  ;yesdirty3:
 16190 0000372C A0[3305]                	MOV	AL,[THISDRV]
 16191                                  ;;;; 10/1/86 F.C update fastopen cache
 16192 0000372F 52                      	PUSH	DX
 16193 00003730 57                      	PUSH	DI
 16194 00003731 B400                    	MOV	AH,0		  ; dir entry update
 16195 00003733 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 16196 00003735 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 16197 00003737 E846FD                  	call	FastOpen_Update
 16198 0000373A 5F                      	POP	DI
 16199 0000373B 5A                      	POP	DX
 16200                                  ;;;; 9/11/86 F.C update fastopen cache
 16201 0000373C E82D2B                  	call	FLUSHBUF
 16202 0000373F 7303                    	JNC	short OK_BYE
 16203 00003741 B80200                  	MOV	AX,error_file_not_found
 16204                                  OK_BYE:
 16205 00003744 E8D0E9                  	call	LcritDisk
 16206 00003747 C3                      	retn
 16207                                  
 16208                                  	; MSDOS 6.0
 16209                                  ;GET_FAST_PATH:
 16210                                  ;hkn; use SS override for FastOpenFlg
 16211                                  	;OR	byte [FastOpenFlg],FastOpen_Set
 16212                                  	;				;FO. trigger fastopen	;AN000;
 16213                                  	;call	GETPATH
 16214                                  	;PUSHF			 	;FO.			;AN000;
 16215                                  	;AND	byte [FastOpenFlg],Fast_yes 
 16216                                  	;				;FO. clear all fastopen flags ;AN000;
 16217                                  	;POPF				;FO.			;AN000;
 16218                                  	;retn
 16219                                  
 16220                                  ;============================================================================
 16221                                  ; DUP.ASM, MSDOS 6.0, 1991
 16222                                  ;============================================================================
 16223                                  ; 08/08/2018 - Retro DOS v3.0
 16224                                  
 16225                                  ;**	Low level DUP routine for use by EXEC when creating a new process. Exports
 16226                                  ;	  the DUP to the server machine and increments the SFT ref count
 16227                                  ;
 16228                                  ;	DOS_DUP
 16229                                  ;
 16230                                  ;	Modification history:
 16231                                  ;
 16232                                  ;	  Created: ARR 30 March 1983
 16233                                  
 16234                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 16235                                  ;---------------------------------------------------------------------------
 16236                                  ; Procedure Name : DOS_DUP
 16237                                  ;
 16238                                  ; Inputs:
 16239                                  ;	[THISSFT] set to the SFT for the file being DUPed
 16240                                  ;		(a non net SFT is OK, in this case the ref
 16241                                  ;		 count is simply incremented)
 16242                                  ; Function:
 16243                                  ;	Signal to the devices that a logical open is occurring
 16244                                  ; Returns:
 16245                                  ;	ES:DI point to SFT
 16246                                  ;    Carry clear
 16247                                  ;	SFT ref_count is incremented
 16248                                  ; Registers modified: None.
 16249                                  ; NOTE:
 16250                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 16251                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 16252                                  ;	that time.
 16253                                  ;---------------------------------------------------------------------------
 16254                                  
 16255                                  DOS_DUP:
 16256 00003748 2EC43E[5A05]            	LES	DI,[CS:THISSFT]
 16257                                  
 16258                                  	;Entry	Dos_Dup_Direct
 16259                                  DOS_Dup_Direct:
 16260 0000374D E836E9                  	call	IsSFTNet
 16261 00003750 7503                    	JNZ	short DO_INC
 16262 00003752 E85619                  	call	DEV_OPEN_SFT
 16263                                  DO_INC:
 16264                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 16265 00003755 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 16266                                  					;   we're in big trouble anyway)
 16267 00003758 C3                      	retn
 16268                                  
 16269                                  ;============================================================================
 16270                                  ; CREATE.ASM, MSDOS 6.0, 1991
 16271                                  ;============================================================================
 16272                                  ; 08/08/2018 - Retro DOS v3.0
 16273                                  
 16274                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 16275                                  ;NAME	DOS_CREATE
 16276                                  
 16277                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 16278                                  ;
 16279                                  ;	DOS_CREATE
 16280                                  ;	DOS_CREATE_NEW
 16281                                  ;	SET_MKND_ERR
 16282                                  ;	SET_Media_ID
 16283                                  ;	SET_EXT_Mode
 16284                                  ;
 16285                                  ;	Revision history:
 16286                                  ;
 16287                                  ;	    A000 version 4.00	  Jan. 1988
 16288                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 16289                                  
 16290                                  ;Installed = TRUE
 16291                                  
 16292                                  ;	i_need	THISSFT,DWORD
 16293                                  ;	i_need	THISCDS,DWORD
 16294                                  ;	I_need	EXTERR,WORD
 16295                                  ;	I_Need	ExtErr_locus,BYTE
 16296                                  ;	I_need	JShare,DWORD
 16297                                  ;	I_need	VOLCHNG_FLAG,BYTE
 16298                                  ;	I_need	SATTRIB,BYTE
 16299                                  ;	I_need	CALLVIDM,DWORD
 16300                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 16301                                  ;	I_need	NAME1,BYTE			  ;AN000;
 16302                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 16303                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 16304                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 16305                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 16306                                  
 16307                                  ;***	DOS_CREATE - Create a File
 16308                                  ;----------------------------------------------------------------------------
 16309                                  ;	DOS_Create is called to create the specified file, truncating
 16310                                  ;	the old one if it exists.
 16311                                  ;
 16312                                  ;
 16313                                  ;	ENTRY	AX is Attribute to create
 16314                                  ;		(ds) = DOSDATA
 16315                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16316                                  ;			terminated)
 16317                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 16318                                  ;			( = -1 if current dir not involved, else
 16319                                  ;			 Points to first char after last "/" of current dir part)
 16320                                  ;		[THISCDS] Points to CDS being used
 16321                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 16322                                  ;		[THISSFT] Points to SFT to fill in if file created
 16323                                  ;			(sf_mode field set so that FCB may be detected)
 16324                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 16325                                  ;
 16326                                  ;	EXIT	sf_ref_count is NOT altered
 16327                                  ;		CARRY CLEAR
 16328                                  ;		    THISSFT filled in.
 16329                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 16330                                  ;		CARRY SET
 16331                                  ;		    AX is error code
 16332                                  ;			error_path_not_found
 16333                                  ;				Bad path (not in curr dir part if present)
 16334                                  ;			error_bad_curr_dir
 16335                                  ;				Bad path in current directory part of path
 16336                                  ;			error_access_denied
 16337                                  ;				Attempt to re-create read only file , or
 16338                                  ;				create a second volume id or create a dir
 16339                                  ;			error_sharing_violation
 16340                                  ;				The sharing mode was correct but not allowed
 16341                                  ;				generates an INT 24
 16342                                  ;	USES	all but DS
 16343                                  ;----------------------------------------------------------------------------
 16344                                  
 16345                                  DOS_CREATE:
 16346                                  
 16347                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 16348                                  ;hkn; this point.
 16349                                  
 16350 00003759 30E4                    	XOR	AH,AH		; Truncate is OK
 16351                                  
 16352                                  ;	Enter here from Dos_Create_New
 16353                                  ;
 16354                                  ;	(ah) = 0 iff truncate OK
 16355                                  
 16356                                  Create_inter:
 16357 0000375B A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 16358                                  				; Mask out any meaningless bits
 16359 0000375D 750C                    	JNZ	short AttErr
 16360 0000375F A808                    	TEST	AL,attr_volume_id
 16361 00003761 7402                    	JZ	short NoReset
 16362                                  	;
 16363                                  	; MSDOS 6.0
 16364                                  	;OR	[DOS34_FLAG],DBCS_VOLID      ;AN000;FOR dbcs volid
 16365                                  	;
 16366 00003763 B008                    	MOV	AL,attr_volume_id
 16367                                  NoReset:
 16368 00003765 0C20                    	OR	AL,attr_archive ; File changed
 16369 00003767 A850                    	TEST	AL,attr_directory+attr_device
 16370 00003769 740A                    	JZ	short ATT_OK
 16371                                  AttErr:
 16372 0000376B B80500                  	MOV	AX,5		; Attribute problem
 16373 0000376E C606[EF02]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk
 16374 00003773 EB3D                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 16375                                  				   ;	attr_device to be set.
 16376                                  ATT_OK:
 16377 00003775 C43E[5A05]              	LES	DI,[THISSFT]
 16378 00003779 06                      	PUSH	ES
 16379 0000377A C436[5E05]              	LES	SI,[THISCDS]
 16380 0000377E 83FEFF                  	CMP	SI,-1
 16381 00003781 7509                    	JNE	short TEST_RE_NET
 16382                                  
 16383                                  ;	No CDS, it must be redirected.
 16384                                  
 16385 00003783 07                      	POP	ES
 16386                                  
 16387                                  	; MSDOS 6.0
 16388                                  ;Extended open hooks
 16389                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;AN000;EO. from extended open
 16390                                  	;JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 16391                                  ;IFS_extopen:				    ;AN000;EO.
 16392                                  	;PUSH	AX			    ;AN000;EO. pass create attr
 16393                                  	;;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 16394                                  	;mov	ax,112Eh
 16395                                  	;INT	2FH			    ;AN000;EO.
 16396                                  	;POP	BX			    ;AN000;EO. trash bx
 16397                                  	;MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 16398                                  	;retn				    ;AN000;EO.
 16399                                  ;NOEXTOP:				    ;AN000;
 16400                                  ;Extended open hooks
 16401                                  
 16402                                  ;IF NOT Installed
 16403                                  ;	transfer NET_SEQ_CREATE
 16404                                  ;ELSE
 16405 00003784 50                      	PUSH	AX
 16406                                  
 16407                                  	;MOV	AX,(MultNET SHL 8) OR 24
 16408                                  	;INT	2FH
 16409                                  
 16410 00003785 B81811                  	mov     ax,1118h
 16411 00003788 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 16412                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 16413                                  			; SDA first filename pointer -> fully-qualified name of file
 16414                                  			; STACK: WORD file creation mode???
 16415                                  
 16416 0000378A 5B                      	POP	BX			; BX is trashed anyway
 16417 0000378B C3                      	retn
 16418                                  ;ENDIF
 16419                                  
 16420                                  ;	We have a CDS. See if it's network
 16421                                  
 16422                                  TEST_RE_NET:
 16423 0000378C 26F744430080            	TEST	word [ES:SI+curdir.flags],curdir_isnet
 16424 00003792 07                      	POP	ES
 16425 00003793 7408                    	JZ	short LOCAL_CREATE
 16426                                  
 16427                                  	; MSDOS 6.0
 16428                                  	;CALL	Set_EXT_mode		    ;AN000;EO.
 16429                                  	;JC	SHORT dochk		    ;AN000;EO.
 16430                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 16431                                  
 16432                                  ;Extended open hooks
 16433                                  ;dochk:
 16434                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;AN000;EO. from extended open
 16435                                  	;JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 16436                                  ;Extended open hooks
 16437                                  
 16438                                  ;IF NOT Installed
 16439                                  ;	transfer NET_CREATE
 16440                                  ;ELSE
 16441 00003795 50                      	PUSH	AX
 16442                                  	
 16443                                  	;MOV	AX,(MultNET SHL 8) OR 23
 16444                                  	;INT	2FH
 16445                                  	
 16446 00003796 B81711                  	mov     ax,1117h
 16447 00003799 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 16448                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 16449                                  			; SDA first filename pointer -> fully-qualified name of file to open
 16450                                  			; SDA CDS pointer -> current directory
 16451                                  			; Return: CF set on error
 16452                                  
 16453 0000379B 5B                      	POP	BX			; BX is trashed anyway
 16454                                  ;nomore:
 16455 0000379C C3                      	retn
 16456                                  ;ENDIF
 16457                                  
 16458                                  ;**	It's a local create. We have a local CDS for it.
 16459                                  
 16460                                  LOCAL_CREATE:
 16461                                  	; MSDOS 6.0
 16462                                  	;CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 16463                                  	;JC	short setdone	;AN000;EO.
 16464                                  	
 16465                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16466 0000379D 26834D0202              	OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 16467                                  ;setdone:
 16468 000037A2 E86AE9                  	call	EcritDisk
 16469 000037A5 E80F1B                  	call	MakeNode
 16470 000037A8 730E                    	JNC	short Create_ok
 16471 000037AA C606[370A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 16472 000037AF E865E9                  	call	LcritDisk
 16473                                  
 16474                                  	;entry	SET_MKND_ERR
 16475                                  SET_MKND_ERR:
 16476                                  
 16477                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 16478                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 16479                                  
 16480                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 16481 000037B2 BB[3B13]                	MOV     BX,CRTERRTAB
 16482 000037B5 D7                      	XLAT
 16483                                  	;XLAT	byte [CS:BX]
 16484                                  CreatBadRet:
 16485 000037B6 F9                      	STC
 16486 000037B7 C3                      	retn
 16487                                  
 16488                                  ; We have just created a new file. This results in the truncation of old
 16489                                  ; files. We must inform the sharer to slash all the open SFT's for this
 16490                                  ; file to the current size.
 16491                                  
 16492                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 16493                                  ; drive number to force a Build BPB after Media Check.
 16494                                  
 16495                                  ;;; FASTOPEN 8/29/86
 16496                                  Create_ok:
 16497 000037B8 E8B1FC                  	call	FastOpen_Delete
 16498                                  ;;; FASTOPEN 8/29/86
 16499 000037BB A0[2A05]                	mov	al,[SATTRIB]
 16500 000037BE A808                    	test	al,attr_volume_id
 16501 000037C0 7417                    	jz	short NoVolLabel
 16502 000037C2 C43E[5E05]              	LES	DI,[THISCDS]
 16503                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 16504 000037C6 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 16505 000037C9 80EC41                  	sub	ah,'A'                  ; convert to drive letter
 16506 000037CC 8826[370A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 16507                                  	
 16508                                  	; MSDOS 6.0
 16509                                  	;MOV	BH,1			;AN000;>32mb set volume id to boot record
 16510                                  	;CALL	Set_Media_ID		;AN000;>32mb
 16511                                  	
 16512 000037D0 E83CE9                  	call	EcritDisk
 16513 000037D3 E8F926                  	call	FATREAD_CDS		; force a media check
 16514 000037D6 E83EE9                  	call	LcritDisk
 16515                                  
 16516                                  NoVolLabel:
 16517 000037D9 B80200                  	MOV	ax,2
 16518 000037DC C43E[5A05]              	LES	DI,[THISSFT]
 16519                                  ;if installed
 16520                                  	;call	JShare + 14 * 4
 16521 000037E0 FF1E[9400]              	call	far [JShare+(14*4)] ; 14 = ShSU
 16522                                  ;else
 16523                                  ;	Call	ShSU
 16524                                  ;endif
 16525 000037E4 E830E9                  	call	LcritDisk
 16526 000037E7 E9D800                  	jmp	SET_SFT_MODE
 16527                                  
 16528                                  ;---------------------------------------------------------------------------
 16529                                  ; Procedure Name : Dos_Create_New
 16530                                  ;
 16531                                  ; Inputs:
 16532                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16533                                  ;		terminated)
 16534                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16535                                  ;		( = -1 if current dir not involved, else
 16536                                  ;		 Points to first char after last "/" of current dir part)
 16537                                  ;	[THISCDS] Points to CDS being used
 16538                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16539                                  ;	[THISSFT] Points to SFT to fill in if file created
 16540                                  ;		(sf_mode field set so that FCB may be detected)
 16541                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16542                                  ;	AX is Attribute to create
 16543                                  ; Function:
 16544                                  ;	Try to create the specified file truncating an old one that exists
 16545                                  ; Outputs:
 16546                                  ;	sf_ref_count is NOT altered
 16547                                  ;	CARRY CLEAR
 16548                                  ;	    THISSFT filled in.
 16549                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 16550                                  ;	CARRY SET
 16551                                  ;	    AX is error code
 16552                                  ;		error_path_not_found
 16553                                  ;			Bad path (not in curr dir part if present)
 16554                                  ;		error_bad_curr_dir
 16555                                  ;			Bad path in current directory part of path
 16556                                  ;		error_access_denied
 16557                                  ;			Create a second volume id or create a dir
 16558                                  ;		error_file_exists
 16559                                  ;			Already a file by this name
 16560                                  ; DS preserved, others destroyed
 16561                                  ;---------------------------------------------------------------------------
 16562                                  
 16563                                  DOS_Create_New:
 16564 000037EA B401                    	MOV	AH,1		; Truncate is NOT OK
 16565 000037EC E96CFF                  	JMP	Create_inter
 16566                                  
 16567                                  ; MSDOS 6.0
 16568                                  ;---------------------------------------------------------------------------
 16569                                  ; Procedure Name : Set_Media_ID
 16570                                  ;
 16571                                  ; Inputs:
 16572                                  ;	NAME1= Volume ID
 16573                                  ;	BH= 0, delete volume id
 16574                                  ;	    1, set new volume id
 16575                                  ;	DS= DOSGROUP
 16576                                  ; Function:
 16577                                  ;	Set Volume ID to DOS 4.00 Boot record.
 16578                                  ; Outputs:
 16579                                  ;	CARRY CLEAR
 16580                                  ;	    volume id set
 16581                                  ;	CARRY SET
 16582                                  ;	    AX is error code
 16583                                  ;---------------------------------------------------------------------------
 16584                                  ;
 16585                                  ;procedure   Set_Media_ID,NEAR
 16586                                  ;	DOSAssume   <DS>,"SetMedID"
 16587                                  ;
 16588                                  ;	PUSH	AX		;AN000;;>32mb
 16589                                  ;	PUSH	ES		;AN000;;>32mb
 16590                                  ;	PUSH	DI		;AN000;;>32mb
 16591                                  ;
 16592                                  ;	INC	AH		;AN000;;>32mb  bl=drive #
 16593                                  ;	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 16594                                  ;	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 16595                                  ;	MOV	CX,0866H	;AN001;;>32mb  get media id
 16596                                  ;
 16597                                  ;hkn; PACKET_TEMP is in DOSDATA
 16598                                  ;	MOV	DX,OFFSET DOSDATA:PACKET_TEMP	;AN000;>32mb
 16599                                  ;
 16600                                  ;	PUSH	BX		;AN000;;>32mb
 16601                                  ;	PUSH	DX		;AN000;;>32mb
 16602                                  ;	XOR	BH,BH		;AN000;;>32mb
 16603                                  ;
 16604                                  ;	invoke	$IOCTL		;AN000;;>32mb
 16605                                  ;	POP	DX		;AN000;;>32mb
 16606                                  ;	POP	BX		;AN000;;>32mb
 16607                                  ;	JC	geterr		;AN000;;>32mb
 16608                                  ;
 16609                                  ;	OR	BH,BH		;AN000;;>32mb delete volume id
 16610                                  ;	JZ	NoName		;AN000;>32mb yes
 16611                                  ;
 16612                                  ;hkn; NAME1 is in DOSDATA
 16613                                  ;	MOV	SI,OFFSET DOSDATA:NAME1   ;AN000;>32mb
 16614                                  ;
 16615                                  ;	JMP	SHORT doset	;AN000;>32mb yes
 16616                                  ;Noname: 			;AN000;
 16617                                  ;
 16618                                  ;hkn; NO_NAME_ID is in DOSDATA
 16619                                  ;	MOV	SI,OFFSET DOSDATA:NO_NAME_ID  ;AN000;>32mb
 16620                                  ;
 16621                                  ;doset:					       ;AN000;
 16622                                  ;	MOV	DI,DX		;AN000;;>32mb
 16623                                  ;	ADD	DI,MEDIA_LABEL	;AN000;;>32mb
 16624                                  ;
 16625                                  ;hkn; ES & DS must point to SS
 16626                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 16627                                  ;	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 16628                                  ;
 16629                                  ;	POP	DS		;AN000;;>32mb
 16630                                  ;
 16631                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 16632                                  ;	PUSH	SS		;AN000;;>32mb
 16633                                  ;
 16634                                  ;	POP	ES		;AN000;;>32mb
 16635                                  ;	MOV	CX,11		;AN000;;>32mb
 16636                                  ;	REP	MOVSB		;AN000;;>32mb
 16637                                  ;	MOV	CX,0846H	;AN001;;>32mb
 16638                                  ;	MOV	AL,0DH		;AN000;;>32mb
 16639                                  ;	XOR	BH,BH		;AN000;;>32mb
 16640                                  ;	invoke	$IOCTL		;AN000;;>32mb  set volume id
 16641                                  ;geterr: 			;AN000;
 16642                                  ;
 16643                                  ;hkn;	PUSH	CS		;AN000;>32mb
 16644                                  ;	PUSH	SS		;AN000;>32mb
 16645                                  ;
 16646                                  ;	POP	DS		;AN000;>32mb   ds= dosgroup
 16647                                  ;
 16648                                  ;	POP	DI		;AN000;;>32mb
 16649                                  ;	POP	ES		;AN000;;>32mb
 16650                                  ;	POP	AX		;AN000;;>32mb
 16651                                  ;	return			;AN000;>32mb
 16652                                  ;
 16653                                  ;EndProc Set_Media_ID		;AN000;
 16654                                  
 16655                                  ; MSDOS 6.0
 16656                                  ;---------------------------------------------------------------------------
 16657                                  ; Procedure Name : Set_EXT_mode
 16658                                  ;
 16659                                  ; Inputs:
 16660                                  ;	[EXTOPEN_ON]= flag for extended open
 16661                                  ;	SAVE_BX= mode specified in Extended Open
 16662                                  ; Function:
 16663                                  ;	Set mode in ThisSFT
 16664                                  ; Outputs:
 16665                                  ;	carry set,mode is set if from Extended Open
 16666                                  ;	carry clear, mode not set yet
 16667                                  ;---------------------------------------------------------------------------
 16668                                  ;
 16669                                  ;procedure   Set_EXT_mode,NEAR
 16670                                  ;
 16671                                  ;hkn; SS override
 16672                                  ;	TEST	[EXTOPEN_ON],ext_open_on    ;AN000;EO. from extended open
 16673                                  ;	JZ	NOTEX			    ;AN000;EO. no, do normal
 16674                                  ;	PUSH	AX			    ;AN000;EO.
 16675                                  ;
 16676                                  ;hkn; SS override
 16677                                  ;	MOV	AX,[SAVE_BX]		    ;AN000;EO.
 16678                                  ;	OR	ES:[DI.sf_mode],AX	    ;AN000;EO.
 16679                                  ;	POP	AX			    ;AN000;EO.
 16680                                  ;	STC				    ;AN000;EO.
 16681                                  ;NOTEX:					    ;AN000;
 16682                                  ;	return				    ;AN000;EO.
 16683                                  ;
 16684                                  ;EndProc Set_EXT_mode			    ;AN000;
 16685                                  
 16686                                  ;============================================================================
 16687                                  ; OPEN.ASM, MSDOS 6.0, 1991
 16688                                  ;============================================================================
 16689                                  ; 08/08/2018 - Retro DOS v3.0
 16690                                  
 16691                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 16692                                  ;	NAME	DOS_OPEN
 16693                                  
 16694                                  ;**	OPEN.ASM - File Open
 16695                                  ;----------------------------------------------------------------------------
 16696                                  ;	Low level routines for openning a file from a file spec.
 16697                                  ;	Also misc routines for sharing errors
 16698                                  ;
 16699                                  ;	DOS_Open
 16700                                  ;	Check_Access_AX
 16701                                  ;	SHARE_ERROR
 16702                                  ;	SET_SFT_MODE
 16703                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 16704                                  ;
 16705                                  ;	Revision history:
 16706                                  ;
 16707                                  ;	    Created: ARR 30 March 1983
 16708                                  ;	    A000	version 4.00   Jan. 1988
 16709                                  ;
 16710                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 16711                                  ; 	       remote extended opens and not save_cx.
 16712                                  ;
 16713                                  ;	M035 - if open made from exec then we must set the appropriate bits
 16714                                  ;	       on the stack before calling off to the redir.
 16715                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 16716                                  ;	       to handle open from exec. In this case set the appropriate bit
 16717                                  ;	       else do not.
 16718                                  ;----------------------------------------------------------------------------	
 16719                                  
 16720                                  ;Installed = TRUE
 16721                                  
 16722                                  ;	i_need	NoSetDir,BYTE
 16723                                  ;	i_need	THISSFT,DWORD
 16724                                  ;	i_need	THISCDS,DWORD
 16725                                  ;	i_need	CURBUF,DWORD
 16726                                  ;	i_need	CurrentPDB,WORD
 16727                                  ;	i_need	CURR_DIR_END,WORD
 16728                                  ;	I_need	RetryCount,WORD
 16729                                  ;	I_need	Open_Access,BYTE
 16730                                  ;	I_need	fSharing,BYTE
 16731                                  ;	i_need	JShare,DWORD
 16732                                  ;	I_need	FastOpenFlg,byte
 16733                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 16734                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 16735                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 16736                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 16737                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 16738                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 16739                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 16740                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 16741                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 16742                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 16743                                  ;	I_need	SAVE_BX,WORD			  ;M034
 16744                                  ;
 16745                                  ;	I_need	DOS_FLAG,BYTE
 16746                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 16747                                  
 16748                                  ;Break	<DOS_Open - internal file access>
 16749                                  ;---------------------------------------------------------------------------
 16750                                  ; Procedure Name : DOS_Open
 16751                                  ;
 16752                                  ; Inputs:
 16753                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16754                                  ;		terminated)
 16755                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16756                                  ;		( = -1 if current dir not involved, else
 16757                                  ;		 Points to first char after last "/" of current dir part)
 16758                                  ;	[THISCDS] Points to CDS being used
 16759                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16760                                  ;	[THISSFT] Points to SFT to fill in if file found
 16761                                  ;		(sf_mode field set so that FCB may be detected)
 16762                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16763                                  ;	AX is Access and Sharing mode
 16764                                  ;	  High NIBBLE of AL (Sharing Mode)
 16765                                  ;		sharing_compat	   file is opened in compatibility mode
 16766                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 16767                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 16768                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 16769                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 16770                                  ;	  Low NIBBLE of AL (Access Mode)
 16771                                  ;		open_for_read	file is opened for reading
 16772                                  ;		open_for_write	file is opened for writing
 16773                                  ;		open_for_both	file is opened for both reading and writing.
 16774                                  ;
 16775                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 16776                                  ;		(not checked)
 16777                                  ; Function:
 16778                                  ;	Try to open the specified file
 16779                                  ; Outputs:
 16780                                  ;	sf_ref_count is NOT altered
 16781                                  ;	CARRY CLEAR
 16782                                  ;	    THISSFT filled in.
 16783                                  ;	CARRY SET
 16784                                  ;	    AX is error code
 16785                                  ;		error_file_not_found
 16786                                  ;			Last element of path not found
 16787                                  ;		error_path_not_found
 16788                                  ;			Bad path (not in curr dir part if present)
 16789                                  ;		error_bad_curr_dir
 16790                                  ;			Bad path in current directory part of path
 16791                                  ;		error_invalid_access
 16792                                  ;			Bad sharing mode or bad access mode or bad combination
 16793                                  ;		error_access_denied
 16794                                  ;			Attempt to open read only file for writting, or
 16795                                  ;			open a directory
 16796                                  ;		error_sharing_violation
 16797                                  ;			The sharing mode was correct but not allowed
 16798                                  ;			generates an INT 24 on compatibility mode SFTs
 16799                                  ; DS preserved, others destroyed
 16800                                  ;----------------------------------------------------------------------------
 16801                                  
 16802                                  DOS_OPEN:
 16803                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 16804                                  
 16805 000037EF C606[1603]00            	MOV	byte [NoSetDir],0
 16806 000037F4 E80001                  	CALL	Check_Access_AX
 16807 000037F7 721C                    	JC	short do_ret_label		    ; retc
 16808                                  
 16809 000037F9 C43E[5A05]              	LES	DI,[THISSFT]
 16810 000037FD 30E4                    	XOR	AH,AH
 16811                                  
 16812                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 16813                                  
 16814 000037FF 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 16815 00003803 06                      	PUSH	ES
 16816 00003804 C436[5E05]              	LES	SI,[THISCDS]
 16817                                  	; 18/08/2018
 16818 00003808 83FEFF                  	CMP	SI,-1
 16819 0000380B 7509                    	JNZ	short TEST_RE_NET1
 16820 0000380D 07                      	POP	ES
 16821                                  
 16822                                  	; MSDOS 6.0
 16823                                  ;Extended open hooks
 16824                                  	;TEST	byte [EXTOPEN_ON],ext_open_on	;FT. from extnded open		;AN000;
 16825                                  	;JZ	short NOEXTOP 		    ;FT. no, do normal			;AN000;
 16826                                  IFS_extopen:									;AN000;
 16827                                  	;MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 16828                                  	;				    ; with which call was made. This
 16829                                  	;				    ; has the open access bits. 
 16830                                  	;;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 16831                                  	;
 16832                                  	;PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 16833                                  	;;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 16834                                  	;mov	ax,(MultNET*256)+46 
 16835                                  	;INT	2FH			    ;FT.				;AN000;
 16836                                  	;POP	BX			    ;FT. trash bx			;AN000;
 16837                                  	;MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 16838                                  
 16839                                  ;do_ret_label:
 16840                                  	;retn				    ;FT.				;AN000;
 16841                                  ;NOEXTOP:
 16842                                  ;Extended open hooks
 16843                                  	;
 16844                                  ;IF NOT Installed
 16845                                  	;transfer NET_SEQ_OPEN
 16846                                  ;ELSE
 16847                                  	;
 16848                                  do_net_int2f:
 16849                                  	;
 16850                                  	;test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 16851                                  	;jz	short not_exec_open	; N: just do net open
 16852                                  	;				; Y: check to see if redir is aware
 16853                                  	;				;    of this 
 16854                                  	;
 16855                                  	;				; M042 - start
 16856                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR
 16857                                  	;				; Q: does this redir know how to 
 16858                                  	;				;    this
 16859                                  	;jz	short not_exec_open	; N: just do net open
 16860                                  	;				; Y: set bit 3 of access byte and 
 16861                                  	;				;    set sharing mode to DENY_WRITE
 16862                                  	;				; M042 - end
 16863                                  	;
 16864                                  	; NOTE: This specific mode has not been set for the code assembled
 16865                                  	; under the "NOT Installed" conditional. Currently Installed is 
 16866                                  	; always one.
 16867                                  	;				; M035 - set the bits on the stack
 16868                                  	;mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 16869                                  	;
 16870                                  ;not_exec_open:
 16871                                  
 16872                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16873 0000380E 50                      	PUSH	AX
 16874                                  
 16875                                  	;MOV	AX,(MultNET SHL 8) OR 22
 16876                                  	;INT	2FH
 16877                                  
 16878 0000380F B81611                  	mov     ax,1116h
 16879 00003812 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 16880                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 16881                                  			; SDA first filename pointer -> fully-qualified name of file to open
 16882                                  			; STACK: WORD file open mode
 16883                                  			; Return: CF set on error
 16884                                  
 16885 00003814 5B                      	POP	BX			; clean stack
 16886                                  do_ret_label: ; 09/08/2018
 16887 00003815 C3                      	retn
 16888                                  ;ENDIF
 16889                                  
 16890                                  TEST_RE_NET1:
 16891 00003816 26F744430080            	TEST	word [ES:SI+curdir.flags],curdir_isnet
 16892                                  	; 18/08/2018
 16893 0000381C 07                      	POP	ES
 16894                                  	;JZ	short LOCAL_OPEN
 16895                                  
 16896 0000381D 75EF                    	jnz	short do_net_int2f ; (*)
 16897                                  
 16898                                  ;Extended open hooks
 16899                                  	; MSDOS 6.0
 16900                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;FT. from extended open	;AN000;
 16901                                  	;JNZ	short IFS_extopen	      ;FT. isuue extended open	;AN000;
 16902                                  ;Extended open hooks
 16903                                  
 16904                                  ;IF NOT Installed
 16905                                  ;	transfer NET_OPEN
 16906                                  ;ELSE
 16907                                  	;jmp	short do_net_int2f (*)
 16908                                  ;ENDIF
 16909                                  
 16910                                  LOCAL_OPEN:
 16911                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16912 0000381F E8EDE8                  	call	EcritDisk
 16913                                  
 16914                                  ; DOS 3.3 FastOPen 6/16/86
 16915                                  
 16916 00003822 800E[A40F]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 16917                                  
 16918 00003827 E8F911                  	call	GETPATH
 16919                                  
 16920                                  ; DOS 3.3 FastOPen 6/16/86
 16921                                  
 16922 0000382A 731E                    	JNC	short Open_found
 16923 0000382C 7512                    	JNZ	short bad_path2
 16924 0000382E 08C9                    	OR	CL,CL
 16925 00003830 740E                    	JZ	short bad_path2
 16926                                  
 16927                                  OpenFNF:
 16928 00003832 B80200                  	MOV	AX,error_file_not_found
 16929                                  
 16930                                  OpenBadRet:
 16931                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 16932                                  	; 12/08/2018
 16933                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 16934                                  	; MSDOS 6.0
 16935 00003835 368026[A40F]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 16936 0000383B F9                      	STC
 16937 0000383C E8D8E8                  	call	LcritDisk
 16938                                  	;JMP	Clear_FastOpen ; 10/08/2018
 16939 0000383F C3                      	retn 	; 08/09/2018
 16940                                  
 16941                                  bad_path2:
 16942 00003840 B80300                  	MOV	AX,error_path_not_found
 16943 00003843 EBF0                    	JMP	short OpenBadRet
 16944                                  
 16945                                  Open_Bad_Access:
 16946 00003845 B80500                  	MOV	AX,error_access_denied
 16947 00003848 EBEB                    	JMP	short OpenBadRet
 16948                                  
 16949                                  Open_found:
 16950 0000384A 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 16951 0000384C 08E4                    	OR	AH,AH
 16952 0000384E 783F                    	JS	short open_ok		; Devices don't have attributes
 16953 00003850 8E06[A005]              	MOV	ES,[CURBUF+2]		; get buffer location
 16954 00003854 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 16955 00003858 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 16956 0000385A 75E9                    	JNZ	short Open_Bad_Access
 16957 0000385C A801                    	TEST	AL,attr_read_only	; check write on read only
 16958 0000385E 742F                    	JZ	short open_ok
 16959                                  ;
 16960                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 16961                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 16962                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 16963                                  ; processing until the actual write operation:
 16964                                  ;
 16965                                  ; If FCB, then we change the mode to be read_only.
 16966                                  ; If net_FCB, then we change the mode to be read_only.
 16967                                  ; If not open for read then error.
 16968                                  ;
 16969 00003860 1E                      	push	ds
 16970 00003861 56                      	push	si
 16971 00003862 C536[5A05]              	LDS	SI,[THISSFT]
 16972 00003866 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 16973 00003869 F7C10080                	TEST	CX,sf_isFCB		; is it FCB?
 16974 0000386D 750A                    	JNZ	short ResetAccess	; yes, reset the access
 16975 0000386F 88CA                    	MOV	DL,CL
 16976 00003871 80E2F0                  	AND	DL,SHARING_MASK
 16977 00003874 80FA70                  	CMP	DL,SHARING_NET_FCB	; is it net FCB?
 16978 00003877 7508                    	JNZ	short NormalOpen	; no
 16979                                  ResetAccess:
 16980 00003879 83E1F0                  	AND	CX,~access_mask	;0FFF0h	; clear access
 16981                                  ;	OR	CX,open_for_read	; stick in open_for_read
 16982 0000387C 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 16983 0000387F EB0C                    	JMP	SHORT FillSFT
 16984                                  ;
 16985                                  ; The SFT is normal.  See if the requested access is open_for_read
 16986                                  ;
 16987                                  NormalOpen:
 16988 00003881 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 16989 00003884 80F900                  	CMP	CL,open_for_read	; is it open for read?
 16990 00003887 7404                    	JZ	short FillSFT
 16991 00003889 5E                      	pop	si
 16992 0000388A 1F                      	pop	ds
 16993 0000388B EBB8                    	JMP	short Open_Bad_Access
 16994                                  ;
 16995                                  ; All done, restore registers and fill the SFT.
 16996                                  ;
 16997                                  FillSFT:
 16998 0000388D 5E                      	pop	si
 16999 0000388E 1F                      	pop	ds
 17000                                  open_ok:
 17001 0000388F E8B91B                  	call	DOOPEN			; Fill in SFT
 17002                                  
 17003                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 17004                                  	;12/08/2018
 17005                                  	;AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 17006 00003892 8026[A40F]80            	and	byte [FastOpenFlg],Fast_yes	
 17007                                  
 17008                                  	; MSDOS 6.0
 17009                                  	;CALL	DO_SHARE_CHECK
 17010                                  	;JNC	short SHARE_OK
 17011                                  	;call	LcritDisk
 17012                                  	;JMP	short Clear_FastOpen	
 17013                                  
 17014                                  	; MSDOS 3.3
 17015                                  DO_SHARE_CHECK:
 17016 00003897 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 17017                                  OpenShareRetry:
 17018 0000389B 51                      	push	cx			; Save number left to do
 17019 0000389C E8CC3D                  	call	SHARE_CHECK		; Final Check
 17020 0000389F 59                      	pop	cx			; CX = # left
 17021 000038A0 7312                    	JNC	short SHARE_OK		; No problem with access
 17022 000038A2 E887E7                  	call	Idle
 17023 000038A5 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 17024                                  OpenShareFail:
 17025 000038A7 C43E[5A05]              	LES	DI,[THISSFT]
 17026 000038AB E82B00                  	call	SHARE_ERROR
 17027 000038AE 73E7                    	JNC	short DO_SHARE_CHECK	; User wants more retry
 17028                                  	
 17029                                  	;12/08/2018
 17030                                  	;mov	byte [ss:FastOpenFlg],0
 17031                                  	;08/09/2018
 17032                                  	;mov	byte [FastOpenFlg],0
 17033 000038B0 E864E8                  	call	LcritDisk
 17034                                  	;JMP	short Clear_FastOpen
 17035 000038B3 C3                      	retn
 17036                                  
 17037                                  SHARE_OK:
 17038                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17039 000038B4 B80300                  	MOV	AX,3
 17040 000038B7 C43E[5A05]              	LES	DI,[THISSFT]
 17041                                  ;if installed
 17042                                  	;call	JShare + 14 * 4
 17043 000038BB FF1E[9400]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 17044                                  ;else
 17045                                  ;	Call	ShSU
 17046                                  ;endif
 17047 000038BF E855E8                  	call	LcritDisk
 17048                                  	
 17049                                  	;FallThru Set_SFT_Mode
 17050                                  
 17051                                  ;----------------------------------------------------------------------------
 17052                                  ; Procedure Name : SET_SFT_MODE
 17053                                  ;
 17054                                  ; Finish SFT initialization for new reference. Set the correct mode.
 17055                                  ;
 17056                                  ;   Inputs:
 17057                                  ;	ThisSFT points to SFT
 17058                                  ;
 17059                                  ;   Outputs:
 17060                                  ;	Carry clear
 17061                                  ;   Registers modified: AX.
 17062                                  ;---------------------------------------------------------------------------
 17063                                  
 17064                                  ;hkn; called from create. DS already set up to DOSDATA.
 17065                                  
 17066                                  SET_SFT_MODE:
 17067 000038C2 C43E[5A05]              	LES	DI,[THISSFT]
 17068 000038C6 E8E217                  	call	DEV_OPEN_SFT
 17069 000038C9 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 17070 000038CF 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 17071 000038D1 A1[FC02]                	MOV	AX,[CurrentPDB]
 17072 000038D4 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 17073                                  
 17074                                  Clear_FastOpen:
 17075 000038D8 C3                      	retn			       ;;;;; DOS 3.3
 17076                                  
 17077                                  ;----------------------------------------------------------------------------
 17078                                  ; Procedure Name : SHARE_ERROR
 17079                                  ;
 17080                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 17081                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 17082                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 17083                                  ; really ignore).  Carry clear
 17084                                  ; if user wants a retry. ES, DI, DS preserved
 17085                                  ;---------------------------------------------------------------------------
 17086                                  
 17087                                  SHARE_ERROR:
 17088 000038D9 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 17089 000038DF 750C                    	JNZ	short _HARD_ERR
 17090 000038E1 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 17091 000038E5 80E1F0                  	AND	CL,SHARING_MASK
 17092 000038E8 80F900                  	CMP	CL,SHARING_COMPAT
 17093 000038EB 7505                    	JNE	short _NO_HARD_ERR
 17094                                  _HARD_ERR:
 17095 000038ED E8803D                  	call	SHARE_VIOLATION
 17096                                  	;retnc				; User wants retry
 17097 000038F0 73E6                    	jnc	short Clear_FastOpen
 17098                                  _NO_HARD_ERR:
 17099 000038F2 B82000                  	MOV	AX,error_sharing_violation
 17100 000038F5 F9                      	STC
 17101 000038F6 C3                      	retn
 17102                                  
 17103                                  ; MSDOS 6.0
 17104                                  ;----------------------------------------------------------------------------
 17105                                  ; Procedure Name : DO_SHARE_CHECK
 17106                                  ;
 17107                                  ; Input: THISDPB, WFP_Start, THISSFT set
 17108                                  ; Functions: check file sharing mode is valid
 17109                                  ; Output: carry set, error
 17110                                  ;	  carry clear, share ok
 17111                                  ;----------------------------------------------------------------------------
 17112                                  ;
 17113                                  ;DO_SHARE_CHECK:
 17114                                  ;	call	EcritDisk		; enter critical section
 17115                                  ;OPN_RETRY:
 17116                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 17117                                  ;OpenShareRetry:
 17118                                  ;	push	cx			; Save number left to do
 17119                                  ;	call	SHARE_CHECK		; Final Check
 17120                                  ;	pop	cx			; CX = # left
 17121                                  ;	JNC	short Share_Ok2		; No problem with access
 17122                                  ;	call	Idle
 17123                                  ;	LOOP	OpenShareRetry		; One more retry used up
 17124                                  ;OpenShareFail:
 17125                                  ;	LES	DI,[THISSFT]
 17126                                  ;	call	SHARE_ERROR
 17127                                  ;	JNC	short OPN_RETRY		; User wants more retry
 17128                                  ;Share_Ok2:
 17129                                  ;	call	LcritDisk		; leave critical section
 17130                                  ;	retn
 17131                                  
 17132                                  ;-----------------------------------------------------------------------------
 17133                                  ; Procedure Name : Check_Access
 17134                                  ;
 17135                                  ; Inputs:
 17136                                  ;	AX is mode
 17137                                  ;	  High NIBBLE of AL (Sharing Mode)
 17138                                  ;		sharing_compat	   file is opened in compatibility mode
 17139                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 17140                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 17141                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 17142                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 17143                                  ;	  Low NIBBLE of AL (Access Mode)
 17144                                  ;		open_for_read	file is opened for reading
 17145                                  ;		open_for_write	file is opened for writing
 17146                                  ;		open_for_both	file is opened for both reading and writing.
 17147                                  ; Function:
 17148                                  ;	Check this access mode for correctness
 17149                                  ; Outputs:
 17150                                  ;	[open_access] = AL input
 17151                                  ;	Carry Clear
 17152                                  ;		Mode is correct
 17153                                  ;		AX unchanged
 17154                                  ;	Carry Set
 17155                                  ;		Mode is bad
 17156                                  ;		AX = error_invalid_access
 17157                                  ; No other registers effected
 17158                                  ;----------------------------------------------------------------------------
 17159                                  
 17160                                  Check_Access_AX:
 17161                                  
 17162 000038F7 A2[2B05]                	MOV	[OPEN_ACCESS],AL
 17163 000038FA 53                      	PUSH	BX
 17164                                  
 17165                                  ;	If sharing, then test for special sharing mode for FCBs
 17166                                  
 17167 000038FB 88C3                    	MOV	BL,AL
 17168 000038FD 80E3F0                  	AND	BL,SHARING_MASK
 17169 00003900 803E[2F05]FF            	CMP	byte [FSHARING],-1
 17170 00003905 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 17171 00003907 80FB70                  	CMP	BL,SHARING_NET_FCB
 17172 0000390A 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 17173                                  CheckShareMode:
 17174 0000390C 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 17175 0000390F 770D                    	JA	short Make_Bad_Access
 17176                                  CheckAccessMode:
 17177 00003911 88C3                    	MOV	BL,AL
 17178 00003913 80E30F                  	AND	BL,access_mask
 17179 00003916 80FB02                  	CMP	BL,2
 17180 00003919 7703                    	JA	short Make_Bad_Access
 17181 0000391B 5B                      	POP	BX
 17182 0000391C F8                      	CLC
 17183 0000391D C3                      	retn
 17184                                  
 17185                                  Make_Bad_Access:
 17186 0000391E B80C00                  	MOV	AX,error_invalid_access
 17187 00003921 5B                      	POP	BX
 17188 00003922 F9                      	STC
 17189 00003923 C3                      	retn
 17190                                  
 17191                                  ;============================================================================
 17192                                  ; DINFO.ASM, MSDOS 6.0, 1991
 17193                                  ;============================================================================
 17194                                  ; 08/08/2018 - Retro DOS v3.0
 17195                                  
 17196                                  ;**	Low level routine for returning disk drive information from a local
 17197                                  ;	  or NET device
 17198                                  ;
 17199                                  ;	DISK_INFO
 17200                                  ;
 17201                                  ;	  Modification history:
 17202                                  ;
 17203                                  ;		Created: ARR 30 March 1983
 17204                                  
 17205                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 17206                                  ;---------------------------------------------------------------------------
 17207                                  ; Procedure Name : DISK_INFO
 17208                                  ;
 17209                                  ; Inputs:
 17210                                  ;	[THISCDS] Points to the Macro List Structure of interest
 17211                                  ;		(It MAY NOT be NUL, error not detected)
 17212                                  ; Function:
 17213                                  ;	Get Interesting Drive Information
 17214                                  ; Returns:
 17215                                  ;	DX = Number of free allocation units
 17216                                  ;	BX = Total Number of allocation units on disk
 17217                                  ;	CX = Sector size
 17218                                  ;	AL = Sectors per allocation unit
 17219                                  ;	AH = FAT ID BYTE
 17220                                  ;	Carry set if error (currently user FAILed to I 24)
 17221                                  ; Segs except ES preserved, others destroyed
 17222                                  ;----------------------------------------------------------------------------
 17223                                  
 17224                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 17225                                  ;hkn; DOSDATA. 
 17226                                  
 17227                                  DISK_INFO:
 17228                                  	; 08/08/2018 - Retro DOS v3.0
 17229                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 17230                                  
 17231 00003924 E84AE7                  	call	TestNet
 17232 00003927 7306                    	JNC	short LOCAL_DSK_INFO
 17233                                  
 17234                                  ;IF NOT Installed
 17235                                  ;	transfer NET_DISK_INFO
 17236                                  ;ELSE
 17237                                  	;MOV	AX,(MultNET SHL 8) OR 12
 17238                                  	;INT	2FH
 17239                                  	;return
 17240                                  
 17241 00003929 B80C11                  	mov     ax,110Ch
 17242 0000392C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 17243                                  			; ES:DI -> current directory
 17244                                  			; Return: AL = sectors per cluster, BX = total clusters
 17245                                  			; CX = bytes per sector, DX = number of available clusters
 17246 0000392E C3                      	retn
 17247                                  ;ENDIF
 17248                                  
 17249                                  LOCAL_DSK_INFO:
 17250 0000392F C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 17251 00003934 E8D8E7                  	call	EcritDisk
 17252 00003937 E89525                  	call	FATREAD_CDS		; perform media check.
 17253 0000393A 7241                    	JC	short CRIT_LEAVE
 17254 0000393C BB0200                  	MOV	BX,2
 17255 0000393F E8EB23                  	call	UNPACK			; Get first FAT sector into CURBUF
 17256 00003942 7239                    	JC	short CRIT_LEAVE
 17257 00003944 C536[9E05]              	LDS	SI,[CURBUF]
 17258 00003948 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 17259                                  
 17260                                  ;hkn; SS is DOSDATA
 17261 0000394B 16                      	push	ss
 17262 0000394C 1F                      	pop	ds
 17263 0000394D 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 17264                                  ;
 17265                                  ; Examine the current free count.  If it indicates that we have an invalid
 17266                                  ; count, do the expensive calculation.
 17267                                  ;
 17268 00003951 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 17269 00003955 83FAFF                  	CMP	DX,-1			; is it valid?
 17270 00003958 7404                    	JZ	short DoScan
 17271                                  ;
 17272                                  ; Check to see if it is in a reasonalbe range.	If so, trust it and return.
 17273                                  ; Otherwise, we need to blast out an internal error message and then recompute
 17274                                  ; the count.
 17275                                  ;
 17276 0000395A 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 17277 0000395C 7223                    	JB	short GotVal		; yes, trust it.
 17278                                  DoScan:
 17279 0000395E 31D2                    	XOR	DX,DX
 17280 00003960 49                      	DEC	CX
 17281                                  SCANFREE:
 17282 00003961 E8C923                  	call	UNPACK
 17283 00003964 7217                    	JC	short CRIT_LEAVE
 17284 00003966 7501                    	JNZ	short NOTFREECLUS
 17285 00003968 42                      	INC	DX			; A free one
 17286                                  NOTFREECLUS:
 17287 00003969 43                      	INC	BX			; Next cluster
 17288 0000396A E2F5                    	LOOP	SCANFREE
 17289 0000396C 4B                      	DEC	BX			; BX was next cluster.	Convert to
 17290                                  ReturnVals:
 17291 0000396D 4B                      	DEC	BX			; count
 17292 0000396E 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK] 
 17293 00003972 FEC0                    	INC	AL			; Sectors/cluster
 17294 00003974 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 17295 00003978 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 17296 0000397C F8                      	CLC
 17297                                  CRIT_LEAVE:
 17298 0000397D E897E7                  	call	LcritDisk
 17299 00003980 C3                      	retn
 17300                                  ;
 17301                                  ; We have correctly computed everything previously. Load up registers for
 17302                                  ; return.
 17303                                  ;
 17304                                  GotVal: 
 17305 00003981 89CB                    	MOV	BX,CX			; get cluster count
 17306 00003983 EBE8                    	JMP	short ReturnVals
 17307                                  
 17308                                  ;============================================================================
 17309                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 17310                                  ;============================================================================
 17311                                  ; 22/07/2018 - Retro DOS v3.0
 17312                                  
 17313                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 17314                                  ;	NAME	DOS_SEARCH
 17315                                  
 17316                                  ;**	Low level routines for doing local and NET directory searches
 17317                                  ;
 17318                                  ;	DOS_SEARCH_FIRST
 17319                                  ;	DOS_SEARCH_NEXT
 17320                                  ;	RENAME_NEXT
 17321                                  ;
 17322                                  ;	Revision history:
 17323                                  ;
 17324                                  ;	    Created: ARR 30 March 1983
 17325                                  ;	    A000	version 4.00  Jan. 1988
 17326                                  ;	    A001	PTM 3564 -- search for fastopen
 17327                                  
 17328                                  ;Installed = TRUE
 17329                                  
 17330                                  ;--------------------------------------------------------------------------
 17331                                  ;
 17332                                  ; Procedure Name : DOS_SEARCH_FIRST
 17333                                  ;
 17334                                  ; Inputs:
 17335                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17336                                  ;		terminated)
 17337                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17338                                  ;		( = -1 if current dir not involved, else
 17339                                  ;		 Points to first char after last "/" of current dir part)
 17340                                  ;	[THISCDS] Points to CDS being used
 17341                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17342                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17343                                  ;	[DMAADD] Points to 53 byte buffer
 17344                                  ; Function:
 17345                                  ;	Initiate a search for the given file spec
 17346                                  ; Outputs:
 17347                                  ;	CARRY CLEAR
 17348                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 17349                                  ;
 17350                                  ;	LOCAL
 17351                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 17352                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 17353                                  ;	    11 byte search name with Meta chars in it
 17354                                  ;	    Search Attribute Byte, attribute of search
 17355                                  ;	    WORD LastEnt value
 17356                                  ;	    WORD DirStart
 17357                                  ;	    4 byte pad
 17358                                  ;	    32 bytes of the directory entry found
 17359                                  ;	NET
 17360                                  ;	    21 bytes First byte has high bit set
 17361                                  ;	    32 bytes of the directory entry found
 17362                                  ;
 17363                                  ;	CARRY SET
 17364                                  ;	    AX = error code
 17365                                  ;		error_no_more_files
 17366                                  ;			No match for this file
 17367                                  ;		error_path_not_found
 17368                                  ;			Bad path (not in curr dir part if present)
 17369                                  ;		error_bad_curr_dir
 17370                                  ;			Bad path in current directory part of path
 17371                                  ; DS preserved, others destroyed
 17372                                  ;---------------------------------------------------------------------------
 17373                                  
 17374                                  DOS_SEARCH_FIRST:
 17375                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 17376                                  
 17377 00003985 C43E[5E05]              	LES	DI,[THISCDS]
 17378 00003989 83FFFF                  	CMP	DI,-1
 17379 0000398C 7506                    	JNZ	short TEST_RE_NET2
 17380                                  
 17381                                  ;IF NOT Installed
 17382                                  ;	transfer NET_SEQ_SEARCH_FIRST
 17383                                  ;ELSE
 17384                                  	;mov	ax,1119h
 17385 0000398E B81911                  	MOV	AX,(MultNET<<8)|25
 17386 00003991 CD2F                    	INT	2Fh
 17387 00003993 C3                      	retn
 17388                                  ;ENDIF
 17389                                  
 17390                                  TEST_RE_NET2:
 17391                                  	;test	word [es:di+43h],8000h
 17392 00003994 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 17393 0000399A 7406                    	JZ	short LOCAL_SEARCH_FIRST
 17394                                  
 17395                                  ;IF NOT Installed
 17396                                  ;	transfer NET_SEARCH_FIRST
 17397                                  ;ELSE
 17398                                  	;mov	ax,111Bh
 17399 0000399C B81B11                  	MOV	AX,(MultNET<<8)|27
 17400 0000399F CD2F                    	INT	2FH
 17401 000039A1 C3                      	retn
 17402                                  ;ENDIF
 17403                                  
 17404                                  LOCAL_SEARCH_FIRST:
 17405 000039A2 E86AE7                  	call	EcritDisk
 17406                                  	; MSDOS 6.0
 17407                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 17408                                  	;JZ	short NOFN			;AN000;
 17409                                  	;OR	byte [FastOpenflg],Fastopen_Set	;AN000;
 17410                                  ;NOFN:						;AN000;
 17411 000039A5 C606[1603]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17412                                  	; MSDOS 6.0
 17413                                  	;CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 17414                                  	;JNC	short norm_GETPATH	;AN000;;FO. no
 17415                                  	;AND	byte [FastOpenflg],Fast_yes ;AN000;;FO. reset fastopen
 17416                                  ;norm_GETPATH:
 17417 000039AA E87610                  	call	GETPATH
 17418                                  	; BX = offset NAME1
 17419                                  ;_getdone:
 17420 000039AD 7313                    	JNC	short find_check_dev
 17421 000039AF 750C                    	JNZ	short bad_path3
 17422 000039B1 08C9                    	OR	CL,CL
 17423 000039B3 7408                    	JZ	short bad_path3
 17424                                  find_no_more:
 17425                                  	;mov	ax,12h
 17426 000039B5 B81200                  	MOV	AX,error_no_more_files
 17427                                  BadBye:
 17428                                  	; MSDOS 6.0
 17429                                  	;AND	[SS:FastOpenflg],Fast_yes  ;AN000;;FO. reset fastopen
 17430                                  
 17431 000039B8 F9                      	STC
 17432 000039B9 E85BE7                  	call	LcritDisk
 17433 000039BC C3                      	retn
 17434                                  
 17435                                  bad_path3:
 17436                                  	;mov	ax,3
 17437 000039BD B80300                  	MOV	AX,error_path_not_found
 17438 000039C0 EBF6                    	JMP	short BadBye
 17439                                  
 17440                                  find_check_dev:
 17441 000039C2 08E4                    	OR	AH,AH
 17442 000039C4 790A                    	JNS	short found_entry
 17443 000039C6 C706[1203]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 17444 000039CC FE06[2D05]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 17445                                  found_entry:
 17446                                  ;
 17447                                  ; We set the physical drive byte here Instead of after found_it; Doing
 17448                                  ; a search-next may not have wfp_start set correctly
 17449                                  ;
 17450 000039D0 C43E[F802]              	LES	DI,[DMAADD]
 17451 000039D4 8B36[6E05]              	MOV	SI,[WFP_START]		; get pointer to beginning
 17452 000039D8 AC                      	LODSB
 17453 000039D9 2C40                    	SUB	AL,'A'-1                ; logical drive
 17454 000039DB AA                      	STOSB				; High bit not set (local)
 17455                                  found_it:
 17456 000039DC C43E[F802]              	LES	DI,[DMAADD]
 17457 000039E0 47                      	INC	DI
 17458                                  
 17459                                  	; MSDOS 6.0
 17460                                  	;PUSH	DS				  ;FO.;AN001; save ds
 17461                                  	;TEST	byte [Fastopenflg],Set_For_Search ;FO.;AN001; from fastopen
 17462                                  	;JZ	short notfast 			  ;FO.;AN001;
 17463                                  	;MOV	SI,BX				  ;FO.;AN001;
 17464                                  	;MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 17465                                  	;JMP	SHORT movmov			  ;FO.;AN001;
 17466                                  
 17467                                  notfast:
 17468 000039E1 BE[0805]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 17469                                  movmov:
 17470                                  ; Special E5 code
 17471 000039E4 A4                      	MOVSB
 17472 000039E5 26807DFF05              	CMP	BYTE [ES:DI-1],5
 17473 000039EA 7505                    	JNZ	short NOTKANJB
 17474 000039EC 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 17475                                  NOTKANJB:
 17476 000039F1 B90A00                  	MOV	CX,10
 17477 000039F4 F3A4                    	REP	MOVSB
 17478                                  
 17479                                  	; 08/09/2018
 17480                                  	;POP	DS			;FO.;AN001; restore ds
 17481                                  
 17482 000039F6 A0[2805]                	MOV	AL,[ATTRIB]
 17483 000039F9 AA                      	STOSB
 17484 000039FA 50                      	PUSH	AX			; Save AH device info
 17485 000039FB A1[1203]                	MOV	AX,[LASTENT]
 17486 000039FE AB                      	STOSW
 17487 000039FF A1[7E05]                	MOV	AX,[DIRSTART]
 17488 00003A02 AB                      	STOSW
 17489                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 17490 00003A03 83C704                  	ADD	DI,4
 17491 00003A06 58                      	POP	AX			; Recover AH device info
 17492 00003A07 08E4                    	OR	AH,AH
 17493 00003A09 7813                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 17494 00003A0B 833E[9E05]FF            	CMP	WORD [CURBUF],-1
 17495 00003A10 7508                    	JNZ	short OKSTORE
 17496                                  
 17497                                  	; MSDOS 6.0
 17498                                  	;TEST	byte [FastOPenFlg],Set_For_Search
 17499                                  					;AN000;;FO. from fastopen and is good
 17500                                  	;JNZ	short OKSTORE		;AN000;;FO.
 17501                                  
 17502                                  	; The user has specified the root directory itself, rather than some
 17503                                  	; contents of it. We can't "find" that.
 17504 00003A12 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 17505                                  					;   stuffing a -1 at Lastent
 17506 00003A18 EB9B                    	JMP	short find_no_more
 17507                                  
 17508                                  OKSTORE:
 17509 00003A1A 8E1E[A005]              	MOV	DS,[CURBUF+2]
 17510                                  DOSREL:
 17511                                  	; BX = offset NAME1 (from GETPATH)
 17512 00003A1E 89DE                    	MOV	SI,BX			; SI-> start of entry
 17513                                  
 17514                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 17515                                  
 17516                                  	;mov	cx,32
 17517 00003A20 B92000                  	MOV	CX,dir_entry.size
 17518                                  ;;;;; 7/29/86
 17519 00003A23 89F8                    	MOV	AX,DI			; save the 1st byte addr
 17520 00003A25 F3A4                    	REP	MOVSB
 17521 00003A27 89C7                    	MOV	DI,AX			; restore 1st byte addr
 17522 00003A29 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 17523 00003A2D 7504                    	JNZ	short NO05
 17524 00003A2F 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 17525                                  NO05:
 17526                                  
 17527                                  ;;;;; 7/29/86
 17528                                  
 17529                                  ;hkn; FastOpenflg is in DOSDATA use SS
 17530                                  	; MSDOS 6.0
 17531                                  	;AND	byte [SS:FastOpenflg],Fast_yes ;AN000;;FO. reset fastopen
 17532                                  	;push	ss
 17533                                  	;pop	ds
 17534                                  	;AND	byte [FastOpenflg],Fast_yes
 17535                                  
 17536                                  ;hkn; SS is DOSDATA
 17537 00003A33 16                      	push	ss
 17538 00003A34 1F                      	pop	ds
 17539 00003A35 F8                      	CLC
 17540 00003A36 E8DEE6                  	call	LcritDisk
 17541 00003A39 C3                      	retn
 17542                                  
 17543                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 17544                                  ;----------------------------------------------------------------------------
 17545                                  ;
 17546                                  ; Procedure Name : DOS_SEARCH_NEXT
 17547                                  ;
 17548                                  ; Inputs:
 17549                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 17550                                  ;	    (only first 21 bytes must have valid information)
 17551                                  ; Function:
 17552                                  ;	Look for subsequent matches
 17553                                  ; Outputs:
 17554                                  ;	CARRY CLEAR
 17555                                  ;	    The 53 bytes at DMAADD are updated for next call
 17556                                  ;		(see DOS_SEARCH_FIRST)
 17557                                  ;	CARRY SET
 17558                                  ;	    AX = error code
 17559                                  ;		error_no_more_files
 17560                                  ;			No more files to find
 17561                                  ; DS preserved, others destroyed
 17562                                  ;---------------------------------------------------------------------------
 17563                                  
 17564                                  ;hkn; called from search.asm. DS already set up at this point.
 17565                                  
 17566                                  DOS_SEARCH_NEXT:
 17567 00003A3A C43E[F802]              	LES	DI,[DMAADD]
 17568 00003A3E 268A05                  	MOV	AL,[ES:DI]
 17569 00003A41 A880                    	TEST	AL,80H			; Test for NET
 17570 00003A43 7406                    	JZ	short LOCAL_SEARCH_NEXT
 17571                                  ;IF NOT Installed
 17572                                  ;	transfer NET_SEARCH_NEXT
 17573                                  ;ELSE
 17574                                  	;mov	ax,111Ch
 17575 00003A45 B81C11                  	MOV	AX,(MultNET<<8)|28
 17576 00003A48 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 17577                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 17578                                  		     ; Return: CF set on error, AX = DOS error code
 17579                                  		     ; CF clear if successful
 17580 00003A4A C3                      	retn
 17581                                  ;ENDIF
 17582                                  
 17583                                  LOCAL_SEARCH_NEXT:
 17584                                  	;AL is drive A=1
 17585                                  	;mov	byte [EXTERR_LOCUS],2
 17586 00003A4B C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 17587 00003A50 E8BCE6                  	call	EcritDisk
 17588                                  
 17589                                  ;hkn; DummyCDS is in DOSDATA
 17590 00003A53 C706[5E05][B704]        	MOV     word [THISCDS],DUMMYCDS
 17591                                  ;hkn; Segment address is DOSDATA - use ds
 17592                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 17593 00003A59 8C1E[6005]              	mov	[THISCDS+2],DS
 17594                                  
 17595 00003A5D 0440                    	ADD	AL,'A'-1
 17596 00003A5F E89931                  	call	InitCDS
 17597                                  
 17598                                  ;	call	GETTHISDRV		; Set CDS pointer
 17599                                  
 17600 00003A62 7236                    	JC	short No_files		; Bogus drive letter
 17601 00003A64 C43E[5E05]              	LES	DI,[THISCDS]		; Get CDS pointer
 17602                                  	;les	bp,[es:di+45h]
 17603 00003A68 26C46D45                	LES	BP,[ES:DI+curdir.devptr]; Get DPB pointer
 17604 00003A6C E823DD                  	call	GOTDPB			; [THISDPB] = ES:BP
 17605                                  
 17606 00003A6F 268A4600                	mov	al,[ES:BP]
 17607                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 17608 00003A73 A2[3305]                	mov	[THISDRV],AL
 17609                                  	;mov	word [CREATING], 0E500h
 17610 00003A76 C706[3A05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 17611 00003A7C C606[1603]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17612 00003A81 C536[F802]              	LDS	SI,[DMAADD]
 17613 00003A85 AC                      	LODSB				; Drive Byte
 17614                                  
 17615                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 17616                                  RENAME_NEXT:
 17617                                  	;context ES
 17618 00003A86 16                      	push	ss
 17619 00003A87 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 17620                                  
 17621                                  ;hkn; NAME1 is in DOSDATA
 17622 00003A88 BF[0805]                	MOV	DI,NAME1
 17623                                  
 17624 00003A8B B90B00                  	MOV	CX,11
 17625 00003A8E F3A4                    	REP	MOVSB			; Search name
 17626 00003A90 AC                      	LODSB				; Attribute
 17627                                  
 17628                                  ;hkn; SS override
 17629 00003A91 36A2[2805]              	MOV	[SS:ATTRIB],AL
 17630 00003A95 AD                      	LODSW				; LastEnt
 17631 00003A96 09C0                    	OR	AX,AX
 17632 00003A98 7903                    	JNS	short cont_load
 17633                                  No_files:
 17634 00003A9A E918FF                  	JMP	find_no_more
 17635                                  
 17636                                  cont_load:
 17637 00003A9D 50                      	PUSH	AX			; Save LastEnt
 17638 00003A9E AD                      	LODSW				; DirStart
 17639 00003A9F 89C3                    	MOV	BX,AX
 17640                                  
 17641                                  ;hkn; SS is DOSDATA
 17642                                  	;context DS
 17643 00003AA1 16                      	push	ss
 17644 00003AA2 1F                      	pop	ds
 17645 00003AA3 C42E[4605]              	LES	BP,[THISDPB]		; Recover ES:BP
 17646                                  	;invoke	SetDirSrch
 17647 00003AA7 E8180F                  	call	SETDIRSRCH
 17648 00003AAA 7303                    	JNC	short SEARCH_GOON
 17649 00003AAC 58                      	POP	AX			; Clean stack
 17650 00003AAD EBEB                    	JMP	short No_files
 17651                                  
 17652                                  SEARCH_GOON:
 17653 00003AAF E80212                  	call	STARTSRCH
 17654 00003AB2 58                      	POP	AX
 17655 00003AB3 E8DE0E                  	call	GETENT
 17656 00003AB6 72E2                    	JC	short No_files
 17657 00003AB8 E80F0E                  	call	NEXTENT
 17658 00003ABB 72DD                    	JC	short No_files
 17659 00003ABD 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 17660 00003ABF E91AFF                  	JMP	found_it ; 10/08/2018
 17661                                  
 17662                                  ; MSDOS 6.0
 17663                                  ;---------------------------------------------------------------------------
 17664                                  ;
 17665                                  ; Procedure Name : CHECK_QUESTION
 17666                                  ;
 17667                                  ; Input: [WFP_START]= pointer to final path
 17668                                  ; Function: check '?' char
 17669                                  ; Output: carry clear, if no '?'
 17670                                  ;	 carry set, if '?' exists
 17671                                  ;---------------------------------------------------------------------------
 17672                                  
 17673                                  ;CHECK_QUESTION:
 17674                                  ;;hkn;	wfp_start is in DOSDATA;hkn;	MOV     WORD PTR ThisCDS+2,CS
 17675                                  ;;hkn;	PUSH	CS			;AN000;;FO.
 17676                                  ;	push	ss
 17677                                  ;
 17678                                  ;	POP	DS			;AN000;;FO. ds:si -> final path
 17679                                  ;	MOV	SI,[WFP_START]		;AN000;;FO.
 17680                                  ;getnext:				;AN000;
 17681                                  ;	LODSB				;AN000;;FO. get char
 17682                                  ;	OR	AL,AL			;AN000;;FO. is it null
 17683                                  ;	JZ	short NO_Question	;AN000;;FO. yes
 17684                                  ;	CMP	AL,'?'                  ;AN000;;FO. is '?'
 17685                                  ;	JNZ	short getnext 		;AN000;;FO. no
 17686                                  ;	STC				;AN000;;FO.
 17687                                  ;NO_Question:				;AN000;
 17688                                  ;	retn				;AN000;;FO.
 17689                                  
 17690                                  ;============================================================================
 17691                                  ; ABORT.ASM, MSDOS 6.0, 1991
 17692                                  ;============================================================================
 17693                                  ; 23/07/2018 - Retro DOS v3.0
 17694                                  
 17695                                  ;**
 17696                                  ;
 17697                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 17698                                  ;  If process has NET resources a close all is sent out over the net.
 17699                                  ;
 17700                                  ;   DOS_ABORT
 17701                                  ;
 17702                                  ;   Modification history:
 17703                                  ;
 17704                                  ;       Created: ARR 30 March 1983
 17705                                  ;
 17706                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 17707                                  ;				being terminated only if it is busy.
 17708                                  ;
 17709                                  
 17710                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 17711                                  ;--------------------------------------------------------------------------
 17712                                  ;
 17713                                  ; Procedure Name : DOS_ABORT
 17714                                  ;
 17715                                  ; Inputs:
 17716                                  ;       [CurrentPDB] set to PID of process aborting
 17717                                  ; Function:
 17718                                  ;       Close all files and free all SFTs for this PID
 17719                                  ; Returns:
 17720                                  ;       None
 17721                                  ; All destroyed except stack
 17722                                  ;---------------------------------------------------------------------------
 17723                                  
 17724                                  DOS_ABORT:
 17725 00003AC2 368E06[FC02]            	MOV     ES,[SS:CurrentPDB]	; SS override
 17726 00003AC7 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 17727                                  reset_free_jfn:
 17728 00003ACC 89CB                    	MOV     BX,CX
 17729 00003ACE 51                      	PUSH    CX
 17730 00003ACF 4B                      	DEC     BX                      ; get jfn (start with last one)
 17731                                  
 17732 00003AD0 E83436                  	CALL	_$CLOSE
 17733 00003AD3 59                      	POP     CX
 17734 00003AD4 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 17735                                  ;
 17736                                  ; Note:  We do need to explicitly close FCBs. Reasons are as follows: If we
 17737                                  ; are running in the no-sharing no-network environment, we are simulating the
 17738                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 17739                                  ; BUT...  the cache remains in a state with garbage that may be reused by the
 17740                                  ; next process.  We scan the set and blast the ref counts of the FCBs we own.
 17741                                  ;
 17742                                  ; If sharing is loaded, then the following call to close process will
 17743                                  ; correctly close all FCBs.  We will then need to walk the list AFTER here.
 17744                                  ;
 17745                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 17746                                  ; known network resources.  These resources are then responsible for cleaning
 17747                                  ; up after this process.
 17748                                  ;
 17749                                  ; Sleazy, eh?
 17750                                  ;
 17751                                  	;context DS			; SS is DOSDATA
 17752 00003AD6 16                      	push	ss
 17753 00003AD7 1F                      	pop	ds  ; 09/09/2018
 17754                                  
 17755                                  	;CallInstall Net_Abort, MultNET, 29
 17756 00003AD8 B81D11                  	mov	ax, 111Dh
 17757 00003ADB CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 17758                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 17759                                  			; DS???, SS = DOS CS
 17760                                  ;if installed
 17761 00003ADD FF1E[6C00]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 17762                                  ;else
 17763                                  ;	call 	mftCloseP
 17764                                  ;endif
 17765                                  
 17766                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 17767                                  ; counts.
 17768                                  					; SS override
 17769 00003AE1 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 17770                                  	;mov	cx,[es:di+4]
 17771 00003AE6 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 17772 00003AEA E317                    	jcxz    FCBScanDone
 17773                                  	;lea	di,[di+6]
 17774 00003AEC 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 17775 00003AEF 36A1[0603]              	mov     ax,[SS:PROC_ID]		; SS override
 17776                                  FCBTest:
 17777                                  	;cmp	[es:di+31h],ax
 17778 00003AF3 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 17779 00003AF7 7505                    	jnz	short FCBNext		; no, skip it
 17780 00003AF9 26C7050000              	mov	word [es:di],0
 17781                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 17782                                  FCBNext:
 17783 00003AFE 83C73B                  	add     di,SF_ENTRY.size
 17784 00003B01 E2F0                    	loop    FCBTest
 17785                                  FCBScanDone:
 17786                                  
 17787                                  ;
 17788                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 17789                                  ;
 17790 00003B03 31DB                    	XOR     BX,BX
 17791                                  Scan:
 17792 00003B05 53                      	push    bx
 17793 00003B06 E84E30                  	call	SFFromSFN
 17794 00003B09 5B                      	pop     bx
 17795 00003B0A 7301                    	jnc     short Scan1
 17796 00003B0C C3                      	retn
 17797                                  
 17798                                  ;M038
 17799                                  ; Do what the comment above says, check for busy state
 17800                                  ;
 17801                                  Scan1:
 17802                                  	;cmp	word [es:di],0
 17803                                  	;jz	short scan_next  ; MSDOS 3.3
 17804                                  	; MSDOS 6.0
 17805 00003B0D 26833DFF                	cmp	word [es:di],sf_busy ; -1
 17806                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 17807                                  				; Is Sft busy? ;M038
 17808 00003B11 7519                    	jnz	short scan_next
 17809                                  ;
 17810                                  ; we have a SFT that is busy. See if it is for the current process
 17811                                  ;
 17812 00003B13 36A1[0603]              	mov     ax,[SS:PROC_ID]		; SS override
 17813                                  	;cmp	[es:di+31h],ax
 17814 00003B17 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 17815 00003B1B 750F                    	jnz	short scan_next
 17816 00003B1D 36A1[0803]              	mov     ax,[SS:USER_ID]		; SS override
 17817                                  	;cmp	[es:di+2Fh],ax
 17818 00003B21 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 17819 00003B25 7505                    	jnz	short scan_next
 17820                                  ;
 17821                                  ; This SFT is labelled as ours.
 17822                                  ;
 17823 00003B27 26C7050000              	mov	word [es:di],0
 17824                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 17825                                  scan_next:
 17826 00003B2C 43                      	inc     bx
 17827 00003B2D EBD6                    	jmp     short Scan
 17828                                  
 17829                                  
 17830                                  ;============================================================================
 17831                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 17832                                  ;============================================================================
 17833                                  ; 23/07/2018 - Retro DOS v3.0
 17834                                  
 17835                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 17836                                  ;
 17837                                  ;	DOS_CLOSE
 17838                                  ;	DOS_COMMIT
 17839                                  ;	FREE_SFT
 17840                                  ;	SetSFTTimes
 17841                                  ;
 17842                                  ;	Revision history:
 17843                                  ;
 17844                                  ;	   AN000  version 4.00	Jan. 1988
 17845                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 17846                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 17847                                  
 17848                                  ;Installed = TRUE
 17849                                  
 17850                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 17851                                  ;---------------------------------------------------------------------------
 17852                                  ;
 17853                                  ; Procedure Name : DOS_CLOSE
 17854                                  ;
 17855                                  ; Inputs:
 17856                                  ;	[THISSFT] set to the SFT for the file being used
 17857                                  ; Function:
 17858                                  ;	Close the indicated file via the SFT
 17859                                  ; Returns:
 17860                                  ;	sf_ref_count decremented otherwise
 17861                                  ;	ES:DI point to SFT
 17862                                  ;	Carry set if error
 17863                                  ;	    AX has error code
 17864                                  ; DS preserved, others destroyed
 17865                                  ;---------------------------------------------------------------------------
 17866                                  
 17867                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 17868                                  
 17869                                  ; 24/07/2019 - Retro DOS v3.2
 17870                                  ; 18/05/2019 - Retro DOS v4.0
 17871                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 17872                                  
 17873                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 17874                                  
 17875                                  DOS_CLOSE:
 17876 00003B2F C43E[5A05]              	LES	DI,[THISSFT]
 17877                                  	;mov	bx,[ES:DI+5]
 17878 00003B33 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 17879                                  
 17880                                  ; Network closes are handled entirely by the net code.
 17881                                  
 17882                                  	;test	bx,8000h
 17883 00003B37 F7C30080                	TEST	BX,sf_isnet
 17884 00003B3B 7406                    	JZ	short LocalClose
 17885                                  
 17886                                  	;CallInstall Net_Close,MultNET,6
 17887 00003B3D B80611                  	mov     ax,1106h
 17888 00003B40 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 17889                                  			; ES:DI -> SFT
 17890                                  			; SFT DPB field -> DPB of drive containing file
 17891                                  			; Return: CF set on error, AX = DOS error code
 17892                                  			; CF clear if successful
 17893 00003B42 C3                      	retn
 17894                                  
 17895                                  ; All closes release the sharing information.
 17896                                  ; No commit releases sharing information
 17897                                  ;
 17898                                  ; All closes decrement the ref count.
 17899                                  ; No commit decrements the ref count.
 17900                                  
 17901                                  LocalClose:
 17902 00003B43 E8C9E5                  	call	EcritDisk
 17903 00003B46 E85C01                  	CALL	SetSFTTimes
 17904 00003B49 E8DB00                  	CALL	FREE_SFT		; dec ref count or mark as busy
 17905                                  
 17906                                  ;hkn; SS is DOSDATA
 17907                                  	;Context DS
 17908 00003B4C 16                      	push	ss
 17909 00003B4D 1F                      	pop	ds
 17910                                  
 17911 00003B4E 50                      	push	ax
 17912 00003B4F 53                      	push	bx
 17913 00003B50 E8433B                  	call	ShareEnd
 17914 00003B53 5B                      	pop	bx
 17915 00003B54 58                      	pop	ax
 17916                                  ;
 17917                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 17918                                  ;
 17919                                  CloseEntry:
 17920 00003B55 50                      	PUSH	AX
 17921                                  ;
 17922                                  ; File clean or device does not get stamped nor disk looked at.
 17923                                  ;
 17924                                  	;test	bx,0C0h
 17925 00003B56 F7C3C000                	TEST	BX,devid_file_clean+devid_device
 17926 00003B5A 7403                    	JZ	short rdir
 17927 00003B5C E9B500                  	JMP	FREE_SFT_OK		; either clean or device
 17928                                  ;
 17929                                  ; Retrieve the directory entry for the file
 17930                                  ;
 17931                                  rdir:
 17932 00003B5F E8D200                  	CALL	DirFromSFT
 17933                                  	;mov	al,5
 17934 00003B62 B005                    	MOV	AL,error_access_denied
 17935 00003B64 7303                    	JNC	short clook
 17936 00003B66 E9AC00                  	JMP	CloseFinish		; pretend the close worked.
 17937                                  clook:
 17938                                  ;
 17939                                  ; ES:DI points to entry
 17940                                  ; DS:SI points to SFT
 17941                                  ; ES:BX points to buffer header
 17942                                  ;
 17943 00003B69 57                      	push	di
 17944 00003B6A 56                      	push	si
 17945                                  	;lea	si,[si+20h]
 17946 00003B6B 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 17947                                  ;
 17948                                  ; ES:DI point to directory entry
 17949                                  ; DS:SI point to unpacked name
 17950                                  ;
 17951 00003B6E E8B4E4                  	call	XCHGP
 17952                                  ;
 17953                                  ; ES:DI point to unpacked name
 17954                                  ; DS:SI point to directory entry
 17955                                  ;
 17956 00003B71 E8B40D                  	call	MetaCompare
 17957 00003B74 E8AEE4                  	call	XCHGP
 17958 00003B77 5E                      	pop	si
 17959 00003B78 5F                      	pop	di
 17960 00003B79 740C                    	JZ	short CLOSE_GO		; Name OK
 17961                                  Bye:	
 17962 00003B7B 89F7                    	MOV	DI,SI
 17963 00003B7D 1E                      	PUSH	DS
 17964 00003B7E 07                      	POP	ES			; ES:DI points to SFT
 17965 00003B7F 16                      	PUSH	SS
 17966 00003B80 1F                      	POP	DS
 17967 00003B81 F9                      	STC
 17968                                  	;mov	al,2
 17969 00003B82 B002                    	MOV	AL,error_file_not_found
 17970 00003B84 E98E00                  	JMP	CloseFinish ; 24/07/2019
 17971                                  
 17972                                  	; 24/07/2019 - Retro DOS v4.0
 17973                                  	; 18/05/2019 - Retro DOS v4.0
 17974                                  CLOSE_GO:
 17975                                  	; MSDOS 6.0
 17976                                  	;test	word [si+2],8000h
 17977 00003B87 F744020080              	TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 17978 00003B8C 740D                    	JZ	short nofcb		; no, set dir attr, sf_attr
 17979                                  	; MSDOS 3.3 & MSDOS 6.0
 17980                                  	;mov	ch,[es:di+0Bh]
 17981 00003B8E 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 17982                                  	;mov	al,[si+4]
 17983 00003B92 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 17984                                  
 17985                                  ;hkn; SS override
 17986 00003B95 36A2[2805]              	MOV	[SS:ATTRIB],AL
 17987                                  	; MSDOS 3.3
 17988                                  	;;call	MatchAttributes
 17989                                  	;;JNZ	short Bye		; attributes do not match
 17990                                  	; 18/05/2019
 17991 00003B99 EB07                    	JMP	SHORT setattr		;FT.
 17992                                  nofcb:
 17993                                  	; MSDOS 6.0
 17994                                  	;mov	al,[si+4]
 17995 00003B9B 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 17996 00003B9E 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 17997                                  setattr:
 17998                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17999                                  	;or	byte [es:di+0Bh],20h
 18000 00003BA2 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 18001                                  	; MSDOS 6.0
 18002                                  	;mov	ax,[es:di+1Ah]
 18003 00003BA7 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 18004                                  					;F.O. save old first cluster
 18005                                  ;hkn; SS override
 18006 00003BAB 36A3[C90F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 18007                                  
 18008                                  	;mov	ax,[si+0Bh]
 18009 00003BAF 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 18010                                  	;mov	[es:di+1Ah],ax
 18011 00003BB2 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 18012                                  	;mov	ax,[si+11h]
 18013 00003BB6 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 18014                                  	;mov	[es:di+1Ch],ax
 18015 00003BB9 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 18016                                  	;mov	ax,[si+13h]
 18017 00003BBD 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 18018                                  	;mov	[es:di+1Eh],ax
 18019 00003BC0 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 18020                                  	;mov	ax,[si+0Fh]
 18021 00003BC4 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 18022                                  	;mov	[es:di+18h],ax
 18023 00003BC7 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 18024                                  	;mov	ax,[si+0Dh]
 18025 00003BCB 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 18026                                  	;mov	[es:di+16h],ax
 18027 00003BCE 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 18028                                  
 18029                                  	; MSDOS 6.0
 18030                                  ;; File Tagging
 18031                                  	;TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 18032                                  	;			  ;LB. if already dirty		    ;AN000;
 18033                                  	;JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 18034                                  	; 02/06/2019
 18035                                  	;call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 18036                                  	;
 18037                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18038                                  	;or	byte [es:bx+5],40h
 18039 00003BD2 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 18040                                  ;yesdirty4:
 18041 00003BD7 1E                      	push	ds
 18042 00003BD8 56                      	push	si
 18043                                  	; MSDOS 6.0
 18044                                  	;mov	cx,[si+0Bh]
 18045 00003BD9 8B0E0B00                	MOV	CX,[SF_ENTRY.sf_firclus] ; do this for Fastopen
 18046                                  ;hkn; SS override
 18047 00003BDD 36A0[3305]              	MOV	AL,[SS:THISDRV]
 18048                                  	; MSDOS 3.3 
 18049                                  	;push	ss
 18050                                  	;pop	ds
 18051                                  	;MOV	AL,[THISDRV]
 18052                                  ;;; 10/1/86  update fastopen cache
 18053                                  	; MSDOS 3.3 & MSDOS 6.0
 18054 00003BE1 52                      	PUSH	DX
 18055 00003BE2 B400                    	MOV	AH,0			; dir entry update
 18056 00003BE4 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 18057                                  	; MSDOS 6.0
 18058 00003BE6 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 18059 00003BE8 750D                    	JNZ	short do_update2	;AN005; no, do update
 18060 00003BEA B403                    	MOV	AH,3			;AN005; do a delete cache entry
 18061                                  	;mov	di,[si+1Bh]
 18062 00003BEC 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 18063                                  	;mov	cx,[si+1Dh]
 18064 00003BEF 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 18065                                  	;mov	dh,[si+1Fh]
 18066 00003BF2 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh= dir pos
 18067 00003BF5 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 18068                                  do_update2:
 18069                                  ;hkn; SS override fort OLD_FIRSTCLUS
 18070                                  	; 
 18071 00003BF7 363B0E[C90F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 18072 00003BFC 7407                    	JZ	short do_update		;AN011;F.O. yes
 18073 00003BFE B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 18074 00003C00 368B0E[C90F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 18075                                  do_update:				;AN005;
 18076                                  ;hkn; SS is DOSDATA
 18077                                  	;Context DS
 18078 00003C05 16                      	push	ss
 18079 00003C06 1F                      	pop	ds	
 18080                                  	; MSDOS 3.3 & MSDOS 6.0
 18081 00003C07 E876F8                  	call	FastOpen_Update 	; invoke fastopen
 18082 00003C0A 5A                      	POP	DX
 18083                                  
 18084                                  ;;; 10/1/86  update fastopen cache
 18085 00003C0B E85E26                  	call	FLUSHBUF		; flush all relevant buffers
 18086 00003C0E 5F                      	pop	di
 18087 00003C0F 07                      	pop	es
 18088                                  	;mov	al,5
 18089 00003C10 B005                    	MOV	AL,error_access_denied
 18090 00003C12 7201                    	JC	short CloseFinish
 18091                                  FREE_SFT_OK:
 18092 00003C14 F8                      	CLC				; signal no error.
 18093                                  CloseFinish:
 18094                                  
 18095                                  ; Indicate to the device that the SFT is being closed.
 18096                                  
 18097                                  ;;;; 7/21/86
 18098 00003C15 9C                      	PUSHF				; save flag from DirFromSFT
 18099 00003C16 E89914                  	call	DEV_CLOSE_SFT
 18100 00003C19 9D                      	POPF
 18101                                  ;;;; 7/21/86
 18102                                  ;
 18103                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 18104                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 18105                                  ; going to be moving from busy to free.
 18106                                  ;
 18107 00003C1A 59                      	POP	CX			; get old ref count
 18108 00003C1B 9C                      	PUSHF
 18109 00003C1C 49                      	DEC	CX			; if cx != 1
 18110 00003C1D 7503                    	JNZ	short NoFree		; then do NOT free SFT
 18111 00003C1F 26890D                  	mov	[es:di],cx
 18112                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 18113                                  NoFree:
 18114 00003C22 E8F2E4                  	call	LcritDisk
 18115 00003C25 9D                      	POPF
 18116 00003C26 C3                      	retn
 18117                                  
 18118                                  ;---------------------------------------------------------------------------
 18119                                  ;
 18120                                  ; Procedure Name : FREE_SFT
 18121                                  ;
 18122                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 18123                                  ; Flags preserved. Return old ref count in AX
 18124                                  ;
 18125                                  ; Note that busy is indicated by the SFT ref count being -1.
 18126                                  ;
 18127                                  ;---------------------------------------------------------------------------
 18128                                  
 18129                                  FREE_SFT:
 18130 00003C27 9C                      	PUSHF		; Save carry state
 18131 00003C28 268B05                  	mov	ax,[es:di]
 18132                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 18133 00003C2B 48                      	DEC	AX
 18134 00003C2C 7501                    	JNZ	short SetCount
 18135 00003C2E 48                      	DEC	AX
 18136                                  SetCount:
 18137 00003C2F 268705                  	xchg	ax,[es:di]
 18138                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 18139 00003C32 9D                      	POPF
 18140 00003C33 C3                      	retn
 18141                                  
 18142                                  ;----------------------------------------------------------------------------
 18143                                  ;
 18144                                  ; Procedure Name : DirFromSFT
 18145                                  ;
 18146                                  ;   DirFromSFT - locate a directory entry given an SFT.
 18147                                  ;
 18148                                  ;   Inputs:	ES:DI point to SFT
 18149                                  ;		DS = DOSDATA
 18150                                  ;   Outputs:
 18151                                  ;		EXTERR_LOCUS = errLOC_Disk
 18152                                  ;		CurBuf points to buffer
 18153                                  ;		Carry Clear -> operation OK
 18154                                  ;		    ES:DI point to entry
 18155                                  ;		    ES:BX point to buffer
 18156                                  ;		    DS:SI point to SFT
 18157                                  ;		Carry SET   -> operation failed
 18158                                  ;		    registers trashified
 18159                                  ;   Registers modified: ALL
 18160                                  ;----------------------------------------------------------------------------
 18161                                  
 18162                                  	; 23/07/2019 - Retro DOS v3.2
 18163                                  DirFromSFT:
 18164                                  	;mov	byte [EXTERR_LOCUS],2
 18165 00003C34 C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18166 00003C39 06                      	push	es
 18167 00003C3A 57                      	push	di
 18168                                  	; MSDOS 3.3
 18169                                  	;;mov	dx,[es:di+1Dh]
 18170                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 18171                                  	; MSDOS 6.0
 18172                                  	;mov	dx,[es:[di+1Dh]
 18173 00003C3B 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 18174 00003C3F 8916[B005]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 18175                                  	;mov	dx,[es:di+1Bh]
 18176 00003C43 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 18177                                  	; 19/05/2019
 18178 00003C47 FF36[B005]              	PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 18179                                  	; MSDOS 3.3 & MSDOS 6.0
 18180 00003C4B 52                      	PUSH	DX
 18181 00003C4C E86E22                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 18182                                  					; [THISDPB] set
 18183 00003C4F 5A                      	POP	DX
 18184 00003C50 8F06[B005]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 18185 00003C54 7225                    	JC	short PopDone
 18186 00003C56 30C0                    	XOR	AL,AL			; Pre read
 18187                                  	;mov	byte [ALLOWED],18h
 18188 00003C58 C606[1503]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 18189 00003C5D E83E25                  	call	GETBUFFR
 18190 00003C60 7219                    	JC	short PopDone
 18191 00003C62 5E                      	pop	si
 18192 00003C63 1F                      	pop	ds			; Get back SFT pointer
 18193                                  
 18194                                  ;hkn; SS override
 18195 00003C64 36C43E[9E05]            	LES	DI,[SS:CURBUF]
 18196                                  	;or	byte [es:di+5],4
 18197 00003C69 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 18198 00003C6E 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 18199                                  	;;lea	di,[di+16] ; MSDOS 3.3
 18200                                  	;lea	di,[di+20] ; MSDOS 6.0
 18201 00003C70 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 18202                                  	;mov	al,32
 18203 00003C73 B020                    	MOV	AL,dir_entry.size
 18204                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 18205 00003C75 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 18206 00003C78 01C7                    	ADD	DI,AX			; Point at the entry
 18207 00003C7A C3                      	retn				; carry is clear
 18208                                  PopDone:
 18209 00003C7B 5F                      	pop	di
 18210 00003C7C 07                      	pop	es
 18211                                  PopDone_retn:
 18212 00003C7D C3                      	retn
 18213                                  
 18214                                  ;----------------------------------------------------------------------------
 18215                                  ;
 18216                                  ;**	DOS_Commit - UPdate Directory Entries
 18217                                  ;
 18218                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 18219                                  ;		(DS) = DOSGROUP
 18220                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 18221                                  ;	USES	all but DS
 18222                                  ;
 18223                                  ;----------------------------------------------------------------------------
 18224                                  ;
 18225                                  
 18226                                  DOS_COMMIT:
 18227                                  	;hkn; called from srvcall. DS already set up.
 18228 00003C7E C43E[5A05]              	LES	DI,[THISSFT]
 18229                                  	;mov	bx,[es:di+5]
 18230 00003C82 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 18231                                  	;test	bx,0C0h
 18232 00003C86 F7C3C000                	TEST	BX,devid_file_clean+devid_device ;Clears carry
 18233 00003C8A 75F1                    	jnz	short PopDone_retn
 18234                                  	;test	bx,8000h
 18235 00003C8C F7C30080                	TEST	BX,sf_isnet
 18236 00003C90 7406                    	JZ	short LOCAL_COMMIT
 18237                                  
 18238                                  ;IF NOT Installed
 18239                                  ;	transfer NET_COMMIT
 18240                                  ;ELSE
 18241                                  	;mov	ax,1107h
 18242 00003C92 B80711                  	MOV	AX,(MultNET<<8)|7
 18243 00003C95 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 18244                                  			; ES:DI -> SFT
 18245                                  			; SFT DPB field -> DPB of drive containing file
 18246                                  			; Return: CF set on error, AX = DOS error code
 18247                                  			; CF clear if successful
 18248 00003C97 C3                      	retn
 18249                                  ;ENDIF
 18250                                  
 18251                                  ;
 18252                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 18253                                  ; There are three ways we can do this.	One is to enter a critical section to
 18254                                  ; protect a potential free. The second is to increment the ref count to mask
 18255                                  ; the close decrementing.
 18256                                  ;
 18257                                  ; The proper way is to let the caller's of close decide if a decrement should
 18258                                  ; be done.  We do this by providing another entry into close after the
 18259                                  ; decrement and after the share information release.
 18260                                  ;
 18261                                  LOCAL_COMMIT:
 18262 00003C98 E874E4                  	call	EcritDisk
 18263                                  	; MSDOS 6.0
 18264                                  	;call	EcritDisk	;PTM.
 18265 00003C9B E80700                  	call	SetSFTTimes
 18266 00003C9E B8FFFF                  	MOV	AX,-1
 18267 00003CA1 E8B1FE                  	call	CloseEntry
 18268                                  	; MSDOS 6.0
 18269                                  	;PUSHF			;PTM.				;AN000;
 18270                                  	;call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 18271                                  	;POPF			;PTM.				;AN000;
 18272                                  	;call	LcritDisk	;PTM.				;AN000;
 18273                                  localcommit_retn:
 18274 00003CA4 C3                      	retn
 18275                                  
 18276                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 18277                                  ;----------------------------------------------------------------------------
 18278                                  ;
 18279                                  ; Procedure Name : SetSFTTimes
 18280                                  ;
 18281                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 18282                                  ;   Reflect these times in other SFT's for the same file.
 18283                                  ;
 18284                                  ;   Inputs:	ES:DI point to SFT
 18285                                  ;		BX = sf_flags set apprpriately
 18286                                  ;   Outputs:	Set sft times to current time iff File & dirty & !nodate
 18287                                  ;   Registers modified: All except ES:DI, BX, AX
 18288                                  ;
 18289                                  ;----------------------------------------------------------------------------
 18290                                  
 18291                                  SetSFTTimes:
 18292                                  ;	File clean or device does not get stamped nor disk looked at.
 18293                                  	
 18294                                  	;test	bx,0C0h
 18295 00003CA5 F7C3C000                	TEST	BX,devid_file_clean+devid_device
 18296                                  	;retnz				; clean or device => no timestamp
 18297 00003CA9 75F9                    	jnz	short localcommit_retn
 18298                                  
 18299                                  ;	file and dirty. See if date is good
 18300                                  
 18301                                  	;test	bx,4000h
 18302 00003CAB F7C30040                	TEST	BX,sf_close_nodate
 18303                                  	;retnz				; nodate => no timestamp
 18304 00003CAF 75F3                    	jnz	short localcommit_retn
 18305                                  
 18306 00003CB1 50                      	push	ax
 18307 00003CB2 53                      	push	bx
 18308 00003CB3 E89EDC                  	call	DATE16			; Date/Time to AX/DX
 18309                                  	;mov	[es:di+0Fh],ax
 18310 00003CB6 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 18311                                  	;mov	[es:di+0Dh],dx
 18312 00003CBA 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 18313 00003CBE 31C0                    	XOR	AX,AX
 18314                                  ;if installed
 18315                                  	;call	JShare + 14 * 4
 18316 00003CC0 FF1E[9400]              	call	far [JShare+(14*4)]	; 14 = ShSU
 18317                                  ;else
 18318                                  ;	call	ShSU
 18319                                  ;endif
 18320 00003CC4 5B                      	pop	bx
 18321 00003CC5 58                      	pop	ax
 18322 00003CC6 C3                      	retn
 18323                                  
 18324                                  ;============================================================================
 18325                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 18326                                  ;============================================================================
 18327                                  ; 23/07/2018 - Retro DOS v3.0
 18328                                  
 18329                                  ;TITLE DIRCALL - Directory manipulation internal calls
 18330                                  ;NAME  DIRCALL
 18331                                  
 18332                                  ;**	Low level directory manipulation routines for making removing and
 18333                                  ;	  verifying local or NET directories
 18334                                  ;
 18335                                  ;	DOS_MKDIR
 18336                                  ;	DOS_CHDIR
 18337                                  ;	DOS_RMDIR
 18338                                  ;
 18339                                  ;	Modification history:
 18340                                  ;
 18341                                  ;		Created: ARR 30 March 1983
 18342                                  
 18343                                  ;BREAK <DOS_MkDir - Make a directory entry>
 18344                                  ;---------------------------------------------------------------------------
 18345                                  ;
 18346                                  ; Procedure Name : DOS_MkDir
 18347                                  ;
 18348                                  ; Inputs:
 18349                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18350                                  ;		terminated)
 18351                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18352                                  ;		( = -1 if current dir not involved, else
 18353                                  ;		 Points to first char after last "/" of current dir part)
 18354                                  ;	[THISCDS] Points to CDS being used
 18355                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18356                                  ; Function:
 18357                                  ;	Make a new directory
 18358                                  ; Returns:
 18359                                  ;	Carry Clear
 18360                                  ;		No error
 18361                                  ;	Carry Set
 18362                                  ;	    AX is error code
 18363                                  ;		error_path_not_found
 18364                                  ;			Bad path (not in curr dir part if present)
 18365                                  ;		error_bad_curr_dir
 18366                                  ;			Bad path in current directory part of path
 18367                                  ;		error_access_denied
 18368                                  ;			Already exists, device name
 18369                                  ; DS preserved, Others destroyed
 18370                                  ;---------------------------------------------------------------------------
 18371                                  
 18372                                  ;hkn; called from path.asm. DS already set up.
 18373                                  
 18374                                  DOS_MKDIR:
 18375 00003CC7 E8A7E3                  	call	TestNet
 18376 00003CCA 7314                    	JNC	short LOCAL_MKDIR
 18377                                  
 18378                                  ;IF NOT Installed
 18379                                  ;	transfer NET_MKDIR
 18380                                  ;ELSE
 18381                                  	;mov	ax,1103h
 18382 00003CCC B80311                  	MOV	AX,(MultNET<<8)|3
 18383 00003CCF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 18384                                  			; SS = DOS CS
 18385                                  			; SDA first filename pointer -> fully-qualified directory name
 18386                                  			; SDA CDS pointer -> current directory
 18387                                  			; Return: CF set on error, AX = DOS error code
 18388                                  			; CF clear if successful
 18389 00003CD1 C3                      	retn
 18390                                  ;ENDIF
 18391                                  
 18392                                  NODEACCERRJ:
 18393                                  	;mov	ax,5
 18394 00003CD2 B80500                  	MOV	AX,error_access_denied
 18395                                  _BadRet:
 18396 00003CD5 F9                      	STC
 18397 00003CD6 E83EE4                  	call	LcritDisk
 18398 00003CD9 C3                      	retn
 18399                                  
 18400                                  PATHNFJ:
 18401 00003CDA E83AE4                  	call	LcritDisk
 18402 00003CDD E9D2FA                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 18403                                  
 18404                                  LOCAL_MKDIR:
 18405 00003CE0 E82CE4                  	call	EcritDisk
 18406                                  ;
 18407                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 18408                                  ;
 18409 00003CE3 8C16[5C05]              	MOV	[THISSFT+2],SS
 18410                                  
 18411                                  ;hkn; DOSDATA
 18412 00003CE7 C706[5A05][0204]        	MOV	WORD [THISSFT],RENBUF
 18413                                  
 18414                                  ;  NOTE: Need WORD PTR because MASM takes type of
 18415                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 18416                                  
 18417                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 18418 00003CED C706[3504]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 18419                                  				; make sure SHARER won't complain.
 18420                                  	;mov	al,10h
 18421 00003CF3 B010                    	MOV	AL,attr_directory
 18422 00003CF5 E8BF15                  	call	MakeNode
 18423 00003CF8 72E0                    	JC	short PATHNFJ
 18424 00003CFA 83F803                  	CMP	AX,3
 18425 00003CFD 74D3                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 18426 00003CFF C42E[4605]              	LES	BP,[THISDPB]	; Makenode zaps this
 18427 00003D03 C53E[9E05]              	LDS	DI,[CURBUF]
 18428 00003D07 29FE                    	SUB	SI,DI
 18429 00003D09 56                      	PUSH	SI		; Pointer to dir_first
 18430                                  	; 22/07/2019 - Retro DOS v3.2
 18431                                  	; MSDOS 6.0
 18432                                  	;push	word [di+8]
 18433 00003D0A FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 18434                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18435                                  	;push	word [di+6]
 18436 00003D0D FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 18437 00003D10 16                      	push	ss
 18438 00003D11 1F                      	pop	ds
 18439 00003D12 FF36[7E05]              	PUSH	word [DIRSTART]	; Parent for .. entry
 18440 00003D16 31C0                    	XOR	AX,AX
 18441 00003D18 A3[7E05]                	MOV	[DIRSTART],AX	; Null directory
 18442 00003D1B E8D614                  	call	NEWDIR
 18443 00003D1E 7264                    	JC	short NODEEXISTSPOPDEL ; No room
 18444 00003D20 E8710C                  	call	GETENT		; First entry
 18445 00003D23 725F                    	JC	short NODEEXISTSPOPDEL ; Screw up
 18446 00003D25 C43E[9E05]              	LES	DI,[CURBUF]
 18447                                  
 18448                                  	; MSDOS 6.0
 18449                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 18450                                  	;			 ;LB. if already dirty		    ;AN000;
 18451                                  	;JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 18452                                  	;call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 18453                                  	
 18454                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18455                                  	;or	byte [es:di+5],40h
 18456 00003D29 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 18457                                  ;yesdirty5:
 18458                                  	;add	di,16
 18459 00003D2E 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 18460 00003D31 B82E20                  	MOV	AX,202EH	; ". "
 18461 00003D34 8B16[7E05]              	MOV	DX,[DIRSTART]	; Point at itself
 18462 00003D38 E85815                  	call	SETDOTENT
 18463 00003D3B B82E2E                  	MOV	AX,2E2EH	; ".."
 18464 00003D3E 5A                      	POP	DX		; Parent
 18465 00003D3F E85115                  	call	SETDOTENT
 18466 00003D42 C42E[4605]              	LES	BP,[THISDPB]
 18467                                  	;mov	byte [ALLOWED],18h
 18468 00003D46 C606[1503]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 18469 00003D4B 5A                      	POP	DX		; Entry sector
 18470                                  	; 23/07/2019
 18471                                  	; MSDOS 6.0
 18472 00003D4C 8F06[B005]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 18473                                  
 18474 00003D50 30C0                    	XOR	AL,AL		; Pre read
 18475 00003D52 E84924                  	call	GETBUFFR
 18476 00003D55 725A                    	JC	short NODEEXISTSP
 18477 00003D57 8B16[7E05]              	MOV	DX,[DIRSTART]
 18478 00003D5B C53E[9E05]              	LDS	DI,[CURBUF]
 18479                                  	;or	byte [di+5],4
 18480 00003D5F 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 18481 00003D63 5E                      	POP	SI		; dir_first pointer
 18482 00003D64 01FE                    	ADD	SI,DI
 18483 00003D66 8914                    	MOV	[SI],DX
 18484 00003D68 31D2                    	XOR	DX,DX
 18485 00003D6A 895402                  	MOV	[SI+2],DX	; Zero size
 18486 00003D6D 895404                  	MOV	[SI+4],DX
 18487                                  DIRUP:
 18488                                  	; MSDOS 6.0
 18489                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 18490                                  	;			 ;LB. if already dirty 		   ;AN000;
 18491                                  	;JNZ	short yesdirty2	 ;LB.  don't increment dirty count ;AN000;
 18492                                  	;call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 18493                                  	
 18494                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18495                                  	;or	byte [di+5],40h
 18496 00003D70 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 18497                                  ;yesdirty2:
 18498 00003D74 16                      	push	ss
 18499 00003D75 1F                      	pop	ds
 18500 00003D76 268A4600                	mov	al,[es:bp]
 18501                                  	; 18/05/2019
 18502                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 18503 00003D7A E8EF24                  	call	FLUSHBUF
 18504                                  	;mov	ax,5
 18505 00003D7D B80500                  	MOV	AX,error_access_denied
 18506 00003D80 E894E3                  	call	LcritDisk
 18507 00003D83 C3                      	retn
 18508                                  
 18509                                  NODEEXISTSPOPDEL:
 18510 00003D84 5A                      	POP	DX		; Parent
 18511 00003D85 5A                      	POP	DX		; Entry sector
 18512                                  	; 23/07/2019
 18513                                  	; MSDOS 6.0 
 18514 00003D86 8F06[B005]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 18515 00003D8A C42E[4605]              	LES	BP,[THISDPB]
 18516                                  	;mov	byte [ALLOWED],18h
 18517 00003D8E C606[1503]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 18518 00003D93 30C0                    	XOR	AL,AL		; Pre read
 18519 00003D95 E80624                  	call	GETBUFFR
 18520 00003D98 7217                    	JC	short NODEEXISTSP
 18521 00003D9A C53E[9E05]              	LDS	DI,[CURBUF]
 18522                                  	;or	byte [di+5],4
 18523 00003D9E 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 18524 00003DA2 5E                      	POP	SI		; dir_first pointer
 18525 00003DA3 01FE                    	ADD	SI,DI
 18526                                  	;sub	si,1Ah ; 26
 18527 00003DA5 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 18528 00003DA8 C604E5                  	MOV	BYTE [SI],0E5h	; Free the entry
 18529 00003DAB E8C2FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 18530                                  NODEEXISTS:
 18531 00003DAE E921FF                  	JMP	NODEACCERRJ ; 10/08/2018
 18532                                  
 18533                                  NODEEXISTSP:
 18534 00003DB1 5E                      	POP	SI		; Clean stack
 18535 00003DB2 EBFA                    	JMP	short NODEEXISTS
 18536                                  
 18537                                  ;BREAK <DOS_ChDir -- Verify a directory>
 18538                                  ;----------------------------------------------------------------------------
 18539                                  ;
 18540                                  ; Procedure Name : DOS_ChDir
 18541                                  ;
 18542                                  ; Inputs:
 18543                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18544                                  ;		terminated)
 18545                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18546                                  ;		( = -1 if current dir not involved, else
 18547                                  ;		 Points to first char after last "/" of current dir part)
 18548                                  ;	[THISCDS] Points to CDS being used May not be NUL
 18549                                  ; Function:
 18550                                  ;	Validate the path for potential new current directory
 18551                                  ; Returns:
 18552                                  ;	NOTE:
 18553                                  ;	    [SATTRIB] is modified by this call
 18554                                  ;	Carry Clear
 18555                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 18556                                  ;		Caller must NOT set ID fields on a NET CDS.
 18557                                  ;	Carry Set
 18558                                  ;	    AX is error code
 18559                                  ;		error_path_not_found
 18560                                  ;			Bad path
 18561                                  ;		error_access_denied
 18562                                  ;			device or file name
 18563                                  ; DS preserved, Others destroyed
 18564                                  ;----------------------------------------------------------------------------
 18565                                  
 18566                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 18567                                  
 18568                                  DOS_CHDIR:
 18569 00003DB4 E8BAE2                  	call	TestNet
 18570 00003DB7 7306                    	JNC	short LOCAL_CHDIR
 18571                                  
 18572                                  ;IF NOT Installed
 18573                                  ;	transfer NET_CHDIR
 18574                                  ;ELSE
 18575                                  	;mov	ax,1105h
 18576 00003DB9 B80511                  	MOV	AX,(MultNET<<8)|5
 18577 00003DBC CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 18578                                  			; SS = DOS CS
 18579                                  			; SDA first filename pointer -> fully-qualified directory name
 18580                                  			; SDA CDS pointer -> current directory
 18581                                  			; Return: CF set on error, AX = DOS error code
 18582                                  			; CF clear if successful
 18583 00003DBE C3                      	retn
 18584                                  ;ENDIF
 18585                                  
 18586                                  LOCAL_CHDIR:
 18587 00003DBF E84DE3                  	call	EcritDisk
 18588                                  	; MSDOS 6.0
 18589                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 18590                                  	;JZ	short nojoin			   ;PTM.
 18591                                  	;MOV	word [ES:DI+curdir.ID],0FFFFH	   ;PTM.
 18592                                  ;nojoin:
 18593                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18594 00003DC2 C606[1603]00            	MOV	byte [NoSetDir],0 ; FALSE
 18595                                  	;mov	byte [SATTRIB],16h
 18596 00003DC7 C606[2A05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 18597                                  				; Dir calls can find these
 18598                                  ; DOS 3.3  6/24/86 FastOpen
 18599 00003DCC 800E[A40F]01            	OR	byte [FastOpenFlg],FastOpen_Set	   ; set fastopen flag
 18600 00003DD1 E84F0C                  	call	GETPATH
 18601                                  	;PUSHF							;AN000;
 18602                                  	;AND	byte [FastOpenFlg],Fast_yes	   ; clear it all ;AC000;
 18603                                  	;POPF							;AN000;
 18604                                  ; DOS 3.3  6/24/86 FastOpen
 18605                                  
 18606                                  	; MSDOS 3.3
 18607 00003DD4 C606[A40F]00            	mov	byte [FastOpenFlg],0
 18608                                  	;mov	ax,3
 18609 00003DD9 B80300                  	MOV	AX,error_path_not_found
 18610 00003DDC 7207                    	JC	short ChDirDone
 18611 00003DDE 753B                    	JNZ	short NOTDIRPATH	; Path not a DIR
 18612 00003DE0 8B0E[7E05]              	MOV	CX,[DIRSTART]		; Get cluster number
 18613 00003DE4 F8                      	CLC
 18614                                  ChDirDone:
 18615 00003DE5 E82FE3                  	call	LcritDisk
 18616 00003DE8 C3                      	retn
 18617                                  
 18618                                  ;BREAK <DOS_RmDir -- Remove a directory>
 18619                                  ;----------------------------------------------------------------------------
 18620                                  ;
 18621                                  ; Procedure Name : DOS_RmDir
 18622                                  ;
 18623                                  ; Inputs:
 18624                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18625                                  ;		terminated)
 18626                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18627                                  ;		( = -1 if current dir not involved, else
 18628                                  ;		 Points to first char after last "/" of current dir part)
 18629                                  ;	[THISCDS] Points to CDS being used
 18630                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18631                                  ; Function:
 18632                                  ;	Remove a directory
 18633                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 18634                                  ; Returns:
 18635                                  ;	NOTE:
 18636                                  ;	    [SATTRIB] is modified by this call
 18637                                  ;	Carry Clear
 18638                                  ;		No error
 18639                                  ;	Carry Set
 18640                                  ;	    AX is error code
 18641                                  ;		error_path_not_found
 18642                                  ;			Bad path (not in curr dir part if present)
 18643                                  ;		error_bad_curr_dir
 18644                                  ;			Bad path in current directory part of path
 18645                                  ;		error_access_denied
 18646                                  ;			device or file name, root directory
 18647                                  ;			Bad directory ('.' '..' messed up)
 18648                                  ; DS preserved, Others destroyed
 18649                                  ;----------------------------------------------------------------------------
 18650                                  
 18651                                  ;hkn; called from path.asm. DS already set up.
 18652                                  
 18653                                  DOS_RMDIR:
 18654 00003DE9 E885E2                  	call	TestNet
 18655 00003DEC 7306                    	JNC	short LOCAL_RMDIR
 18656                                  
 18657                                  ;IF NOT Installed
 18658                                  ;	transfer NET_RMDIR
 18659                                  ;ELSE
 18660                                  	;mov	ax,1101h
 18661 00003DEE B80111                  	MOV	AX,(MultNET<<8)|1
 18662 00003DF1 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 18663                                  			; SS = DOS CS
 18664                                  			; SDA first filename pointer -> fully-qualified directory name
 18665                                  			; SDA CDS pointer -> current directory
 18666                                  			; Return: CF set on error, AX = DOS error code
 18667                                  			; CF clear if successful
 18668 00003DF3 C3                      	retn
 18669                                  ;ENDIF
 18670                                  
 18671                                  LOCAL_RMDIR:
 18672 00003DF4 E818E3                  	call	EcritDisk
 18673 00003DF7 C606[1603]00            	MOV	byte [NoSetDir],0
 18674                                  	;mov	byte [SATTRIB],16h
 18675 00003DFC C606[2A05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 18676                                  					; Dir calls can find these
 18677 00003E01 E81F0C                  	call	GETPATH
 18678 00003E04 720C                    	JC	short NOPATH		; Path not found
 18679 00003E06 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 18680 00003E08 8B3E[7E05]              	MOV	DI,[DIRSTART]
 18681 00003E0C 09FF                    	OR	DI,DI			; Root ?
 18682 00003E0E 750E                    	JNZ	short rmdir_get_buf	; No
 18683 00003E10 EB09                    	JMP	SHORT NOTDIRPATH
 18684                                  
 18685                                  NOPATH:
 18686                                  	;mov	ax,3
 18687 00003E12 B80300                  	MOV	AX,error_path_not_found
 18688 00003E15 E9BDFE                  	JMP	_BadRet
 18689                                  
 18690                                  NOTDIRPATHPOP:
 18691                                  	; 23/07/2019 - Retro DOS v3.2
 18692                                  	; MSDOS 6.0
 18693 00003E18 58                      	POP	AX			  ;F.C. >32mb
 18694 00003E19 58                      	POP	AX
 18695                                  NOTDIRPATHPOP2:
 18696 00003E1A 58                      	POP	AX
 18697                                  NOTDIRPATH:
 18698 00003E1B E9B4FE                  	JMP	NODEACCERRJ
 18699                                  
 18700                                  rmdir_get_buf:
 18701 00003E1E C53E[9E05]              	LDS	DI,[CURBUF]
 18702 00003E22 29FB                    	SUB	BX,DI		; Compute true offset
 18703 00003E24 53                      	PUSH	BX		; Save entry pointer
 18704                                  
 18705                                  	; 22/07/2019 - Retro DOS v3.2
 18706                                  	
 18707                                  	; MSDOS 6.0
 18708                                  	;push	word [di+8]
 18709 00003E25 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 18710                                  	
 18711                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18712                                  	;push	word [di+6]
 18713 00003E28 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 18714                                  
 18715                                  ;hkn; SS is DOSDATA
 18716                                  	;context DS
 18717 00003E2B 16                      	push	ss
 18718 00003E2C 1F                      	pop	ds
 18719                                  	;context ES
 18720 00003E2D 16                      	push	ss
 18721 00003E2E 07                      	pop	es
 18722                                  
 18723                                  ;hkn; NAME1 is in DOSDATA
 18724 00003E2F BF[0805]                	MOV	DI,NAME1
 18725 00003E32 B03F                    	MOV	AL,'?'
 18726 00003E34 B90B00                  	MOV	CX,11
 18727 00003E37 F3AA                    	REP	STOSB
 18728 00003E39 30C0                    	XOR	AL,AL
 18729 00003E3B AA                      	STOSB				; Nul terminate it
 18730 00003E3C E8750E                  	call	STARTSRCH		; Set search
 18731 00003E3F E84F0B                  	call	GETENTRY		; Get start of directory
 18732 00003E42 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 18733 00003E44 8E1E[A005]              	MOV	DS,[CURBUF+2]
 18734 00003E48 89DE                    	MOV	SI,BX
 18735 00003E4A AD                      	LODSW
 18736                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 18737 00003E4B 3D2E20                  	cmp	ax,202Eh ; ". "
 18738 00003E4E 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 18739                                  	;add     si,30
 18740 00003E50 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 18741 00003E53 AD                      	LODSW
 18742                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 18743                                  	;cmp	ax, '..'
 18744 00003E54 3D2E2E                  	cmp	ax,2E2Eh
 18745 00003E57 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 18746                                  
 18747                                  ;hkn; SS is DOSDATA
 18748                                  	;context DS
 18749 00003E59 16                      	push	ss
 18750 00003E5A 1F                      	pop	ds
 18751 00003E5B C706[1203]0200          	MOV	word [LASTENT],2	; Skip . and ..
 18752 00003E61 E82D0B                  	call	GETENTRY		; Get next entry
 18753 00003E64 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 18754                                  	;mov	byte [ATTRIB],16h
 18755 00003E66 C606[2805]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 18756 00003E6B E8220A                  	call	SRCH			; Do a search
 18757 00003E6E 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 18758 00003E70 803E[1403]00            	CMP	byte [FAILERR],0
 18759 00003E75 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 18760 00003E77 C42E[4605]              	LES	BP,[THISDPB]
 18761 00003E7B 8B1E[7E05]              	MOV	BX,[DIRSTART]
 18762 00003E7F E84819                  	call	RELEASE 		; Release data in sub dir
 18763 00003E82 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 18764 00003E84 5A                      	POP	DX			; Sector # of entry
 18765                                  	; 23/07/2019
 18766 00003E85 8F06[B005]              	POP	word [HIGH_SECTOR]	; F.C. >32mb
 18767                                  	;mov	byte [ALLOWED],18h
 18768 00003E89 C606[1503]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 18769 00003E8E 30C0                    	XOR	AL,AL			; Pre read
 18770 00003E90 E80B23                  	call	GETBUFFR		; Get sector back
 18771 00003E93 7285                    	JC	short NOTDIRPATHPOP2	; Screw up
 18772 00003E95 C53E[9E05]              	LDS	DI,[CURBUF]
 18773                                  	;or	byte [di+5],4
 18774 00003E99 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 18775 00003E9D 5B                      	POP	BX			; Pointer to start of entry
 18776 00003E9E 01FB                    	ADD	BX,DI			; Corrected
 18777 00003EA0 C607E5                  	MOV	BYTE [BX],0E5h		; Free the entry
 18778                                  
 18779                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 18780 00003EA3 1E                      	PUSH	DS
 18781                                  
 18782                                  ;hkn; SS is DOSDATA
 18783                                  	;context DS
 18784 00003EA4 16                      	push	ss
 18785 00003EA5 1F                      	pop	ds
 18786                                  
 18787                                  	; 23/07/2019 - Retro DOS v3.2
 18788                                  
 18789                                  	; MSDOS 6.0
 18790 00003EA6 E8C3F5                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 18791                                  
 18792                                  ;	; MSDOS 3.3
 18793                                  ;_FastOpen_Delete:
 18794                                  ;	push	ax
 18795                                  ;	mov	si,[WFP_START]
 18796                                  ;	mov	bx,FastTable
 18797                                  ;	;mov	al,3  ; FONC_delete
 18798                                  ;	mov	al,FONC_delete
 18799                                  ;	call	far [BX+2]  ; FastTable+2
 18800                                  ;	pop	ax
 18801                                  
 18802 00003EA9 1F                      	POP	DS
 18803                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 18804                                  
 18805 00003EAA E9C3FE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 18806                                  
 18807                                  ;============================================================================
 18808                                  ; DISK.ASM, MSDOS 6.0, 1991
 18809                                  ;============================================================================
 18810                                  ; 23/07/2018 - Retro DOS v3.0 
 18811                                  
 18812                                  ;	TITLE	DISK - Disk utility routines
 18813                                  ;	NAME	Disk
 18814                                  
 18815                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 18816                                  ;
 18817                                  ;	SWAPCON
 18818                                  ;	SWAPBACK
 18819                                  ;	DOS_READ
 18820                                  ;	DOS_WRITE
 18821                                  ;	get_io_sft
 18822                                  ;	DirRead
 18823                                  ;	FIRSTCLUSTER
 18824                                  ;	SET_BUF_AS_DIR
 18825                                  ;	FATSecRd
 18826                                  ;	DREAD
 18827                                  ;	CHECK_WRITE_LOCK
 18828                                  ;	CHECK_READ_LOCK
 18829                                  ;
 18830                                  ;	Revision history:
 18831                                  ;
 18832                                  ;		A000   version 4.00  Jan. 1988
 18833                                  ;
 18834                                  ;----------------------------------------------------------------------------
 18835                                  ;
 18836                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 18837                                  ;		error happens, DOS retries the entire block assuming that
 18838                                  ;		zero characters were transferred. Modified the code to take
 18839                                  ;		into account the number of characters transfered before
 18840                                  ;		retrying the operation.
 18841                                  ;
 18842                                  ;----------------------------------------------------------------------------
 18843                                  ;
 18844                                  
 18845                                  ;Installed = TRUE
 18846                                  
 18847                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 18848                                  
 18849                                  ; **** Drivers for file input from devices ****
 18850                                  ;----------------------------------------------------------------------------
 18851                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 18852                                  ;   of handles 0 and 1
 18853                                  ;
 18854                                  ;   Inputs:	DS is DOSDATA
 18855                                  ;   Outputs:	CONSWAP is set to false.
 18856                                  ;   Registers modified: none
 18857                                  ;----------------------------------------------------------------------------
 18858                                  
 18859                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 18860                                  
 18861                                  SWAPBACK:
 18862 00003EAD C606[2103]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 18863 00003EB2 C3                      	retn
 18864                                  
 18865                                  ;----------------------------------------------------------------------------
 18866                                  ;
 18867                                  ; Procedure Name : SWAPCON
 18868                                  ;
 18869                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 18870                                  ;
 18871                                  ;   Inputs:	ThisSFT as the sft of the desired file
 18872                                  ;		DS is DOSDATA
 18873                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 18874                                  ;   Registers modified: none
 18875                                  ;--------------------------------------------------------------------------
 18876                                  
 18877                                  SWAPCON:
 18878                                  	; MSDOS 3.3
 18879                                  	;push	es
 18880                                  	;push	di
 18881                                  	;mov	byte [CONSWAP],1
 18882                                  	;les	di,[THISSFT]
 18883                                  	;mov	word [CONSFT],di
 18884                                  	;mov	word [CONSFT+2],es
 18885                                  	;pop	di
 18886                                  	;pop	es
 18887                                  	;retn
 18888                                  
 18889                                  	; MSDOS 6.0
 18890 00003EB3 C606[2103]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 18891 00003EB8 50                      	push	ax
 18892 00003EB9 A1[5A05]                	mov	ax,[THISSFT]
 18893 00003EBC A3[A205]                	mov	[CONSFT],ax
 18894 00003EBF A1[5C05]                	mov	ax,[THISSFT+2]
 18895 00003EC2 A3[A405]                	mov	[CONSFT+2],ax
 18896 00003EC5 58                      	pop	ax
 18897 00003EC6 C3                      	retn
 18898                                  
 18899                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 18900                                  ;-----------------------------------------------------------------------------
 18901                                  ;
 18902                                  ; Inputs:
 18903                                  ;	ThisSFT set to the SFT for the file being used
 18904                                  ;	[DMAADD] contains transfer address
 18905                                  ;	CX = No. of bytes to read
 18906                                  ;	DS = DOSDATA
 18907                                  ; Function:
 18908                                  ;	Perform read operation
 18909                                  ; Outputs:
 18910                                  ;    Carry clear
 18911                                  ;	SFT Position and cluster pointers updated
 18912                                  ;	CX = No. of bytes read
 18913                                  ;	ES:DI point to SFT
 18914                                  ;    Carry set
 18915                                  ;	AX is error code
 18916                                  ;	CX = 0
 18917                                  ;	ES:DI point to SFT
 18918                                  ; DS preserved, all other registers destroyed
 18919                                  ;
 18920                                  ;-----------------------------------------------------------------------------
 18921                                  
 18922                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 18923                                  
 18924                                  DOS_READ:
 18925 00003EC7 C43E[5A05]              	LES	DI,[THISSFT]
 18926                                  
 18927                                  ; Verify that the sft has been opened in a mode that allows reading.
 18928                                  
 18929                                  	;mov	al,[es:di+2]
 18930 00003ECB 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 18931                                  	;and	al,0Fh
 18932 00003ECF 240F                    	AND	AL,access_mask
 18933                                  	;cmp	al,1
 18934 00003ED1 3C01                    	CMP	AL,open_for_write
 18935 00003ED3 7503                    	JNE	short READ_NO_MODE		;Is read or both
 18936 00003ED5 E96805                  	jmp	SET_ACC_ERR
 18937                                  
 18938                                  READ_NO_MODE:
 18939 00003ED8 E83F04                  	call	SETUP
 18940 00003EDB E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 18941 00003EDD E8A6E1                  	call	IsSFTNet
 18942 00003EE0 7408                    	JZ	short LOCAL_READ
 18943                                  
 18944                                  ;IF NOT Installed
 18945                                  ;	transfer NET_READ
 18946                                  ;ELSE
 18947                                  	;mov	ax,1108h
 18948 00003EE2 B80811                  	MOV	AX,(MultNET<<8)|8
 18949 00003EE5 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 18950                                  			; ES:DI -> SFT
 18951                                  			; SFT DPB field -> DPB of drive containing file
 18952                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 18953                                  			; Return: CF set on error, CX = bytes read
 18954 00003EE7 C3                      	retn
 18955                                  ;ENDIF
 18956                                  
 18957                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 18958                                  ; except return immediately.
 18959                                  
 18960                                  NoIORet:
 18961 00003EE8 F8                      	CLC
 18962 00003EE9 C3                      	retn
 18963                                  
 18964                                  LOCAL_READ:
 18965                                  	; 31/07/2019
 18966                                  	;test	word [es:di+5],80h
 18967                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 18968 00003EEA 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 18969 00003EEF 750F                    	JNZ	short READDEV
 18970                                  
 18971                                  	;mov	byte [EXTERR_LOCUS],2
 18972 00003EF1 C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18973 00003EF6 E816E2                  	call	EcritDisk
 18974 00003EF9 E80005                  	call	DISKREAD
 18975                                  
 18976                                  critexit:
 18977 00003EFC E818E2                  	call	LcritDisk
 18978 00003EFF C3                      	retn
 18979                                  
 18980                                  ; We are reading from a device. Examine the status of the device to see if we
 18981                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 18982                                  ; null device, we can safely indicate no transfer.
 18983                                  
 18984                                  READDEV:
 18985                                  	;mov	byte [EXTERR_LOCUS],4
 18986 00003F00 C606[EF02]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 18987                                  	;mov	bl,[es:di+5]
 18988 00003F05 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 18989 00003F09 C43E[F802]              	LES	DI,[DMAADD]
 18990                                  	;test	bl,40h
 18991 00003F0D F6C340                  	test	BL,devid_device_EOF	; End of file?
 18992 00003F10 7407                    	JZ	short ENDRDDEVJ3
 18993                                  	;test	bl,4
 18994 00003F12 F6C304                  	test	BL,devid_device_null	; NUL device?
 18995 00003F15 7405                    	JZ	short TESTRAW 		; NO
 18996 00003F17 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 18997                                  ENDRDDEVJ3:
 18998                                  	;JMP	ENDRDDEVJ2
 18999 00003F19 E9C800                  	jmp	ENDRDDEV ; 31/07/2019
 19000                                  
 19001                                  ;
 19002                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 19003                                  ; bizarre std_con_string_input.
 19004                                  ;
 19005                                  TESTRAW:
 19006                                  	;test	bl,20h
 19007 00003F1C F6C320                  	test	BL,devid_device_raw	; Raw mode?
 19008 00003F1F 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 19009                                  	;test	bl,1
 19010 00003F21 F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 19011 00003F24 7451                    	JZ	short NOTRDCON
 19012 00003F26 E9F000                  	JMP	READCON
 19013                                  
 19014                                  DVRDRAW:
 19015 00003F29 06                      	PUSH	ES
 19016 00003F2A 1F                      	POP	DS			; Xaddr to DS:DI
 19017                                  
 19018                                  	; MSDOS 6.0
 19019                                  ;SR;
 19020                                  ;Check for win386 presence -- if present, do polled read of characters
 19021                                  ;
 19022                                  	;test	byte [ss:IsWIN386],1
 19023                                  	;jz	short ReadRawRetry	;not present
 19024                                  	;test	bl,devid_device_con_in	;is it console device
 19025                                  	;jz	short ReadRawRetry	;no, do normal read
 19026                                  	;jmp	do_polling		;yes, do win386 polling loop
 19027                                  
 19028                                  ReadRawRetry:
 19029 00003F2B 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 19030 00003F2D 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 19031 00003F2F 89C2                    	MOV	DX,AX			; Start at 0
 19032 00003F31 E86E12                  	call	SETREAD
 19033 00003F34 1E                      	PUSH	DS			; Save Seg part of Xaddr
 19034                                  
 19035                                  ;hkn; SS override
 19036 00003F35 36C536[5A05]            	LDS	SI,[SS:THISSFT]
 19037 00003F3A E8F011                  	call	DEVIOCALL
 19038 00003F3D 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 19039 00003F3F B486                    	MOV	AH,86H			; Read error
 19040                                  
 19041                                  ;hkn; SS override
 19042 00003F41 368B3E[2703]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 19043                                  	; MSDOS 3.3
 19044                                  	;test	di,8000h
 19045                                  	;jz	short CRDROK
 19046                                  	; MSDOS 6.0
 19047 00003F46 09FF                    	or	di,di
 19048 00003F48 7923                    	jns	short CRDROK		; no errors
 19049                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19050 00003F4A E8BD1B                  	call	CHARHARD
 19051 00003F4D 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 19052                                  
 19053                                  	; 25/07/2019 - Retro DOS v3.2
 19054                                  	
 19055                                  	; MSDOS 6.0
 19056 00003F4F 36033E[3603]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 19057 00003F54 362B0E[3603]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 19058                                  
 19059                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19060 00003F59 08C0                    	OR	AL,AL
 19061 00003F5B 7410                    	JZ	short CRDROK		; Ignore
 19062 00003F5D 3C03                    	CMP	AL,3
 19063 00003F5F 7403                    	JZ	short CRDFERR 		; fail.
 19064 00003F61 1F                      	POP	DS			; Recover saved seg part of Xaddr
 19065                                  	; 19/05/2019
 19066 00003F62 EBC7                    	JMP	short ReadRawRetry	; Retry
 19067                                  ;
 19068                                  ; We have encountered a device-driver error. We have informed the user of it
 19069                                  ; and he has said for us to fail the system call.
 19070                                  ;
 19071                                  CRDFERR:
 19072 00003F64 5F                      	POP	DI			; Clean stack
 19073                                  DEVIOFERR:
 19074                                  
 19075                                  ;hkn; SS override
 19076 00003F65 36C43E[5A05]            	LES	DI,[SS:THISSFT]
 19077 00003F6A E9D104                  	jmp	SET_ACC_ERR_DS
 19078                                  CRDROK:
 19079 00003F6D 5F                      	POP	DI			; Chuck saved seg of Xaddr
 19080 00003F6E 89D7                    	MOV	DI,DX
 19081                                  
 19082                                  ;hkn; SS override
 19083 00003F70 36033E[3603]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 19084 00003F75 EBA2                    	JMP	SHORT ENDRDDEVJ3
 19085                                  
 19086                                  ; We are going to do a cooked read on some character device. There is a
 19087                                  ; problem here, what does the data look like? Is it a terminal device, line
 19088                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 19089                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 19090                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 19091                                  ; included in data). this "simulates" the way con works in cooked mode
 19092                                  ; reading one line at a time. With file data, however, the lines will look
 19093                                  ; like, LF line CR. This is a little weird.
 19094                                  
 19095                                  NOTRDCON:
 19096 00003F77 8CC0                    	MOV	AX,ES
 19097 00003F79 8ED8                    	MOV	DS,AX
 19098 00003F7B 89FB                    	MOV	BX,DI
 19099 00003F7D 31D2                    	XOR	DX,DX
 19100 00003F7F 89D0                    	MOV	AX,DX
 19101 00003F81 51                      	PUSH	CX
 19102 00003F82 B90100                  	MOV	CX,1
 19103 00003F85 E81A12                  	call	SETREAD
 19104 00003F88 59                      	POP	CX
 19105                                  
 19106                                  ;hkn; SS override
 19107 00003F89 36C536[5A05]            	LDS	SI,[SS:THISSFT]
 19108                                  	;lds	si,[si+7]
 19109 00003F8E C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 19110                                  DVRDLP:
 19111 00003F91 E8A219                  	call	DSKSTATCHK
 19112 00003F94 E89911                  	call	DEVIOCALL2
 19113 00003F97 57                      	PUSH	DI		; Save "count" done
 19114 00003F98 B486                    	MOV	AH,86H
 19115                                  
 19116                                  ;hkn; SS override
 19117 00003F9A 368B3E[2703]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 19118                                  	
 19119                                  	; MSDOS 3.3
 19120                                  	;test	di,8000h
 19121                                  	;jz	short CRDOK
 19122                                  	; MSDOS 6.0
 19123 00003F9F 09FF                    	or	di,di
 19124 00003FA1 7917                    	jns	short CRDOK
 19125                                  	
 19126 00003FA3 E8641B                  	call	CHARHARD
 19127 00003FA6 5F                      	POP	DI
 19128                                  
 19129                                  ;hkn; SS override
 19130 00003FA7 36C706[3603]0100        	MOV	word [SS:CALLSCNT],1
 19131 00003FAE 3C01                    	CMP	AL,1
 19132 00003FB0 74DF                    	JZ	short DVRDLP		;Retry
 19133 00003FB2 3C03                    	CMP	AL,3
 19134 00003FB4 74AF                    	JZ	short DEVIOFERR		; FAIL
 19135 00003FB6 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 19136 00003FB8 EB12                    	JMP	SHORT DVRDIGN
 19137                                  
 19138                                  CRDOK:
 19139 00003FBA 5F                      	POP	DI
 19140                                  
 19141                                  ;hkn; SS override
 19142 00003FBB 36833E[3603]01          	CMP	word [SS:CALLSCNT],1
 19143                                  	;JNZ	short ENDRDDEVJ2
 19144 00003FC1 7521                    	jnz	short ENDRDDEV ; 24/07/2019
 19145 00003FC3 1E                      	PUSH	DS
 19146                                  
 19147                                  ;hkn; SS override
 19148 00003FC4 368E1E[3403]            	MOV	DS,[SS:CALLXAD+2]
 19149 00003FC9 8A05                    	MOV	AL,[DI]			; Get the character we just read
 19150 00003FCB 1F                      	POP	DS
 19151                                  DVRDIGN:
 19152                                  
 19153                                  ;hkn; SS override
 19154 00003FCC 36FF06[3203]            	INC	WORD [SS:CALLXAD]	; Next character
 19155 00003FD1 36C706[2703]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 19156 00003FD8 47                      	INC	DI			; Next character
 19157 00003FD9 3C1A                    	CMP	AL,1AH			; ^Z?
 19158                                  	;JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 19159 00003FDB 7407                    	jz	short ENDRDDEV ; 31/07/2019	
 19160 00003FDD 3C0D                    	CMP	AL,c_CR 		; CR?
 19161 00003FDF E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 19162 00003FE1 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 19163                                  					;  AX=FFFF which is not likely
 19164                                  ENDRDDEVJ2:
 19165 00003FE2 EB00                    	JMP	short ENDRDDEV		;changed short to long for win386
 19166                                  
 19167                                  	;  MSDOS 6.0
 19168                                  ;;SR;
 19169                                  ;;Polling code for raw read on CON when WIN386 is present
 19170                                  ;;
 19171                                  ;;At this point -- ds:di is transfer address
 19172                                  ;;		  cx is count
 19173                                  ;;
 19174                                  ;
 19175                                  ;do_polling:
 19176                                  ;	mov	bx,di			;ds:bx is Xfer address
 19177                                  ;	xor	ax,ax
 19178                                  ;	mov	dx,ax
 19179                                  ;	call	setread			;prepare device packet
 19180                                  ;
 19181                                  ;do_io:
 19182                                  ;;
 19183                                  ;;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 19184                                  ;;
 19185                                  ;	mov	byte ptr es:[bx+2],DEVRDND	;Change command code
 19186                                  ;	push	ds
 19187                                  ;	lds	si,[THISSFT]		;get device header
 19188                                  ;	call	deviocall		;call device driver
 19189                                  ;	pop	ds
 19190                                  ;	
 19191                                  ;	test	es:[bx.REQSTAT],STERR	;check if error
 19192                                  ;	jz	check_busy		;no
 19193                                  ;
 19194                                  ;	push	ds
 19195                                  ;	mov	dx,di
 19196                                  ;	invoke 	charhard		;invoke int 24h handler
 19197                                  ;	mov	di,dx
 19198                                  ;	or	al,al
 19199                                  ;	jz	pop_done_read		;ignore by user, assume read done
 19200                                  ;	cmp	al,3
 19201                                  ;	jz	devrderr		;user asked to fail
 19202                                  ;	pop	ds
 19203                                  ;	jmp	do_io			;user asked to retry
 19204                                  ;
 19205                                  ;check_busy:
 19206                                  ;	test	es:[bx.REQSTAT],0200h	;see if busy bit set
 19207                                  ;	jnz	no_char			;yes, no character available
 19208                                  ;;
 19209                                  ;;Character is available. Read in 1 character at a time until all characters
 19210                                  ;;are read in or no character is available
 19211                                  ;;
 19212                                  ;	mov	byte ptr es:[bx+2],DEVRD	;command code is READ now
 19213                                  ;	mov	word ptr es:[bx+18],1		;change count to 1 character
 19214                                  ;	push	ds
 19215                                  ;	lds	si,[THISSFT]
 19216                                  ;	call	deviocall
 19217                                  ;
 19218                                  ;	mov	dx,di
 19219                                  ;	mov	ah,86h
 19220                                  ;	mov	di,es:[bx.REQSTAT]	;get returned status
 19221                                  ;	test	di,STERR		;was there an error during read?
 19222                                  ;	jz	next_char		;no,read next character
 19223                                  ;
 19224                                  ;	invoke	charhard		;invoke int 24h handler
 19225                                  ;	mov	di,dx			;restore di
 19226                                  ;	or	al,al			;
 19227                                  ;	jz	pop_done_read		;ignore by user,assume read is done
 19228                                  ;	cmp	al,3
 19229                                  ;	jz	devrderr		;user issued a 'fail',indicate error
 19230                                  ;	pop	ds
 19231                                  ;	jmp	do_io			;user issued a retry
 19232                                  ;
 19233                                  ;next_char:
 19234                                  ;	pop	ds
 19235                                  ;	mov	di,dx
 19236                                  ;	dec	cx			;decrement count
 19237                                  ;	jcxz	done_read		;all characters read in
 19238                                  ;	inc	word ptr es:[bx+14]	;update transfer address
 19239                                  ;	jmp	do_io			;read next character in
 19240                                  ;
 19241                                  ;devrderr:
 19242                                  ;	pop	di			;discard segment address
 19243                                  ;	les	di,[THISSFT]
 19244                                  ;	transfer SET_ACC_ERR_DS		;indicate error
 19245                                  ;
 19246                                  ;no_char:
 19247                                  ;;
 19248                                  ;;Since no character is available, we let win386 switch the VM out
 19249                                  ;;
 19250                                  ;	push	ax
 19251                                  ;	mov	ah,84h
 19252                                  ;	int	2ah			;indicate idle to WIN386
 19253                                  ;;
 19254                                  ;;When control returns from WIN386, we continue the raw read
 19255                                  ;;
 19256                                  ;	pop	ax
 19257                                  ;	jmp	do_io
 19258                                  ;
 19259                                  ;pop_done_read:
 19260                                  ;	pop	ds
 19261                                  ;done_read:
 19262                                  ;	add	di,[CALLSCNT]
 19263                                  ;	jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 19264                                  
 19265                                  	; 31/07/2019 - Retro DOS v3.2
 19266                                  	; 04/05/2019 - Retro DOS v4.0
 19267                                  ENDRDDEV:
 19268 00003FE4 16                      	push	ss
 19269 00003FE5 1F                      	pop	ds
 19270 00003FE6 EB1F                    	jmp	short endrddev1
 19271                                  
 19272                                  TRANBUF:
 19273 00003FE8 AC                      	LODSB
 19274 00003FE9 AA                      	STOSB
 19275 00003FEA 3C0D                    	CMP	AL,c_CR 	; Check for carriage return
 19276 00003FEC 7503                    	JNZ	short NORMCH
 19277 00003FEE C6040A                  	MOV	BYTE [SI],c_LF
 19278                                  NORMCH:
 19279 00003FF1 3C0A                    	CMP	AL,c_LF
 19280 00003FF3 E0F3                    	LOOPNZ	TRANBUF
 19281 00003FF5 7507                    	JNZ	short ENDRDCON
 19282 00003FF7 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 19283 00003FF9 E819E4                  	call	OUTT		; Transmit linefeed
 19284 00003FFC 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 19285                                  ENDRDCON:
 19286                                  
 19287                                  ;hkn; SS is DOSDATA
 19288 00003FFE 16                      	push	ss
 19289 00003FFF 1F                      	pop	ds
 19290 00004000 E8AAFE                  	CALL	SWAPBACK
 19291 00004003 8936[2200]              	MOV	[CONTPOS],SI
 19292                                  ;ENDRDDEV:
 19293                                  ;hkn; SS is DOSDATA
 19294                                  ;	push	ss
 19295                                  ;	pop	ds
 19296                                  endrddev1:	; 31/07/2019
 19297 00004007 893E[7405]              	MOV	[NEXTADD],DI
 19298 0000400B 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 19299 0000400D C43E[5A05]              	LES	DI,[THISSFT]
 19300                                  	;and	byte [es:di+5],0BFh
 19301 00004011 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 19302                                  					; Mark as no more data available
 19303                                  SETSFTC:
 19304                                  	; 31/07/2019
 19305                                  	;call	SETSFT
 19306                                  	;retn
 19307 00004016 E92305                  	jmp	SETSFT
 19308                                  
 19309                                  READCON:
 19310 00004019 E897FE                  	CALL	SWAPCON
 19311 0000401C 8B36[2200]              	MOV	SI,[CONTPOS]
 19312 00004020 09F6                    	OR	SI,SI
 19313 00004022 75C4                    	JNZ	short TRANBUF
 19314 00004024 803E[4702]80            	CMP	BYTE [CONBUF],128
 19315 00004029 7406                    	JZ	short GETBUF
 19316 0000402B C706[4702]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 19317                                  GETBUF:
 19318 00004031 51                      	PUSH	CX
 19319 00004032 06                      	PUSH	ES
 19320 00004033 57                      	PUSH	DI
 19321                                  
 19322                                  ;hkn; CONBUF is in DOSDATA
 19323 00004034 BA[4702]                	MOV	DX,CONBUF
 19324                                  
 19325 00004037 E85BE1                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 19326 0000403A 5F                      	POP	DI
 19327 0000403B 07                      	POP	ES
 19328 0000403C 59                      	POP	CX
 19329                                  
 19330                                  ;hkn; CONBUF is in DOSDATA
 19331 0000403D BE[4902]                	MOV	SI,CONBUF+2
 19332                                  
 19333 00004040 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 19334 00004043 75A3                    	JNZ	short TRANBUF
 19335 00004045 B01A                    	MOV	AL,1AH
 19336 00004047 AA                      	STOSB
 19337 00004048 4F                      	DEC	DI
 19338 00004049 B00A                    	MOV	AL,c_LF
 19339 0000404B E8C7E3                  	call	OUTT		; Send linefeed
 19340 0000404E 31F6                    	XOR	SI,SI
 19341 00004050 EBAC                    	JMP	short ENDRDCON
 19342                                  
 19343                                  ; 24/07/2018 - Retro DOS v3.0
 19344                                  
 19345                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 19346                                  ;---------------------------------------------------------------------------
 19347                                  ;
 19348                                  ; Procedure Name : DOS_WRITE
 19349                                  ;
 19350                                  ; Inputs:
 19351                                  ;	ThisSFT set to the SFT for the file being used
 19352                                  ;	[DMAADD] contains transfer address
 19353                                  ;	CX = No. of bytes to write
 19354                                  ; Function:
 19355                                  ;	Perform write operation
 19356                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 19357                                  ;		to current sf_position
 19358                                  ; Outputs:
 19359                                  ;    Carry clear
 19360                                  ;	SFT Position and cluster pointers updated
 19361                                  ;	CX = No. of bytes written
 19362                                  ;	ES:DI point to SFT
 19363                                  ;    Carry set
 19364                                  ;	AX is error code
 19365                                  ;	CX = 0
 19366                                  ;	ES:DI point to SFT
 19367                                  ; DS preserved, all other registers destroyed
 19368                                  ;---------------------------------------------------------------------------
 19369                                  
 19370                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 19371                                  ;hkn; point to DOSDATA.
 19372                                  
 19373                                  DOS_WRITE:
 19374 00004052 C43E[5A05]              	LES	DI,[THISSFT]
 19375                                  	;mov	al,[ES:DI+2]
 19376 00004056 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 19377                                  	;and	al,0Fh
 19378 0000405A 240F                    	AND	AL,access_mask
 19379                                  	;cmp	al,0
 19380 0000405C 3C00                    	CMP	AL,open_for_read
 19381 0000405E 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 19382                                  BadMode:
 19383 00004060 E9DD03                  	jmp	SET_ACC_ERR
 19384                                  
 19385                                  ;
 19386                                  ; NOTE: The following check for writting to a Read Only File is performed
 19387                                  ;	    ONLY on FCBs!!!!
 19388                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 19389                                  ;	    of a read only file which can then be written to.
 19390                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 19391                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 19392                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 19393                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 19394                                  ;	    to a read-only file.
 19395                                  ;
 19396                                  Check_FCB_RO:
 19397                                  	; 25/07/2019 - Retro DOS v3.2
 19398                                  	;;test	word [es:di+2],8000h
 19399                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 19400                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 19401                                  	
 19402                                  	;test	byte [es:di+3],80h
 19403 00004063 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 19404 00004068 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 19405                                  
 19406                                  	;test	byte [es:di+4],1
 19407 0000406A 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 19408 0000406F 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 19409                                  WRITE_NO_MODE:
 19410 00004071 E8A602                  	call	SETUP
 19411 00004074 E80FE0                  	call	IsSFTNet
 19412 00004077 7406                    	JZ	short LOCAL_WRITE
 19413                                  
 19414                                  ;IF NOT Installed
 19415                                  ;	transfer NET_WRITE
 19416                                  ;ELSE
 19417                                  	;mov	ax,1109h
 19418 00004079 B80911                  	MOV	AX,(MultNET<<8)|9
 19419 0000407C CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 19420                                  			; ES:DI -> SFT
 19421                                  			; SFT DPB field -> DPB of drive containing file
 19422                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 19423                                  			; Return: CF set on error, CX = bytes written
 19424 0000407E C3                      	retn
 19425                                  ;ENDIF
 19426                                  
 19427                                  LOCAL_WRITE:
 19428                                  	; 25/07/2019
 19429                                  	;;test	word [es:di+5],80h
 19430                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 19431                                  	;jnz	short WRTDEV
 19432                                  
 19433                                  	;test	byte [es:di+5],80h
 19434 0000407F 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 19435 00004084 755D                    	jnz	short WRTDEV
 19436                                  
 19437                                  	;mov	byte [EXTERR_LOCUS],2
 19438 00004086 C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19439 0000408B E881E0                  	call	EcritDisk
 19440                                  
 19441 0000408E E8D904                  	call	DISKWRITE
 19442                                  
 19443                                  	; MSDOS 6.0
 19444                                  ;; Extended Open
 19445                                  	;JC	short nocommit
 19446                                  	;LES	DI,[THISSFT]
 19447                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],auto_commit_write
 19448                                  	;JZ	short nocommit
 19449                                  	;PUSH	CX
 19450                                  	;call	DOS_COMMIT
 19451                                  	;POP	CX
 19452                                  ;nocommit:
 19453                                  ;; Extended Open
 19454 00004091 E883E0                  	call	LcritDisk
 19455 00004094 C3                      	retn
 19456                                  
 19457                                  DVWRTRAW:
 19458 00004095 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 19459 00004097 E83B11                  	call	SETWRITE
 19460 0000409A 1E                      	PUSH	DS			; Save seg of transfer
 19461                                  
 19462                                  ;hkn; SS override
 19463 0000409B 36C536[5A05]            	LDS	SI,[SS:THISSFT]
 19464 000040A0 E88A10                  	call	DEVIOCALL		; DS:SI -> DEVICE
 19465                                  
 19466 000040A3 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 19467 000040A5 B487                    	MOV	AH,87H
 19468                                  
 19469                                  ;hkn; SS override
 19470 000040A7 368B3E[2703]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 19471                                  
 19472                                  	; MSDOS 3.3
 19473                                  	;test	di,8000h
 19474                                  	;jz	short CWRTROK
 19475                                  
 19476                                  	; MSDOS 6.0
 19477 000040AC 09FF                    	or	di,di
 19478 000040AE 7920                    	jns	short CWRTROK
 19479                                  	
 19480                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19481 000040B0 E8571A                  	call	CHARHARD
 19482                                  
 19483                                  	; 25/07/2019 - Retro DOS v3.2
 19484                                  
 19485                                  	; MSDOS 6.0
 19486 000040B3 362B0E[3603]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 19487 000040B8 89D3                    	mov	bx,dx			; number of chars xferred	M065
 19488 000040BA 36031E[3603]            	add	bx,[ss:CALLSCNT]	;				M065
 19489 000040BF 89DF                    	mov	di,bx			;				M065
 19490                                  	
 19491                                  	; MSDOS 3.3
 19492                                  	;MOV	BX,DX			; Recall transfer addr		M065
 19493                                  
 19494                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19495 000040C1 08C0                    	OR	AL,AL
 19496 000040C3 740B                    	JZ	short CWRTROK 		; Ignore
 19497 000040C5 3C03                    	CMP	AL,3
 19498 000040C7 7403                    	JZ	short CWRFERR
 19499 000040C9 1F                      	POP	DS			; Recover saved seg of transfer
 19500 000040CA EBC9                    	JMP	short DVWRTRAW		; Try again
 19501                                  
 19502                                  CWRFERR:
 19503 000040CC 58                      	POP	AX			; Chuck saved seg of transfer
 19504 000040CD E994FE                  	JMP	CRDFERR 		; Will pop one more stack element
 19505                                  
 19506                                  CWRTROK:
 19507 000040D0 58                      	POP	AX			; Chuck saved seg of transfer
 19508 000040D1 1F                      	POP	DS
 19509 000040D2 A1[3603]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 19510                                  ENDWRDEV:
 19511 000040D5 C43E[5A05]              	LES	DI,[THISSFT]
 19512 000040D9 89C1                    	MOV	CX,AX
 19513                                  	;call	ADDREC
 19514                                  	;retn
 19515                                  	; 25/07/2019
 19516 000040DB E97F04                  	jmp	ADDREC
 19517                                  
 19518                                  WRTNUL:
 19519 000040DE 89CA                    	MOV	DX,CX			;Entire transfer done
 19520                                  WRTCOOKJ:
 19521 000040E0 E98D00                  	JMP	WRTCOOKDONE
 19522                                  
 19523                                  WRTDEV:
 19524                                  	;mov	byte [EXTERR_LOCUS],4
 19525 000040E3 C606[EF02]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 19526                                  	;or	byte [es:di+5],40h
 19527 000040E8 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 19528                                  					; Reset EOF for input
 19529                                  	;mov	bl,[es:di+5]
 19530 000040ED 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 19531 000040F1 31C0                    	XOR	AX,AX
 19532 000040F3 E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 19533 000040F5 1E                      	PUSH	DS
 19534 000040F6 88D8                    	MOV	AL,BL
 19535 000040F8 C51E[F802]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 19536 000040FC 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 19537 000040FE 31D2                    	XOR	DX,DX			; Set starting point
 19538                                  	;test	al,20h
 19539 00004100 A820                    	test	AL,devid_device_raw	; Raw?
 19540                                  	;JZ	short TEST_DEV_CON
 19541                                  	;JMP	DVWRTRAW
 19542 00004102 7591                    	jnz	short DVWRTRAW
 19543                                  
 19544                                  TEST_DEV_CON:
 19545                                  	;test	al,2
 19546 00004104 A802                    	test	AL,devid_device_con_out ; Console output device?
 19547 00004106 756E                    	jnz	short WRITECON
 19548                                  	;test	al,4
 19549 00004108 A804                    	test	AL,devid_device_null
 19550 0000410A 75D2                    	JNZ	short WRTNUL
 19551 0000410C 89D0                    	MOV	AX,DX
 19552 0000410E 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 19553 00004111 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 19554 00004113 51                      	PUSH	CX
 19555 00004114 B90100                  	MOV	CX,1
 19556 00004117 E8BB10                  	call	SETWRITE
 19557 0000411A 59                      	POP	CX
 19558                                  
 19559                                  ;hkn; SS override
 19560 0000411B 36C536[5A05]            	LDS	SI,[SS:THISSFT]
 19561                                  ;
 19562                                  ;SR; Removed X25 support from here
 19563                                  ;
 19564                                  	;lds	si,[si+7]
 19565 00004120 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 19566                                  DVWRTLP:
 19567 00004123 E81018                  	call	DSKSTATCHK
 19568 00004126 E80710                  	call	DEVIOCALL2
 19569 00004129 57                      	PUSH	DI
 19570 0000412A B487                    	MOV	AH,87H
 19571                                  
 19572                                  ;hkn; SS override
 19573 0000412C 368B3E[2703]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 19574                                  	
 19575                                  	; MSDOS 3.3
 19576                                  	;test	di,8000h
 19577                                  	;jz	short CWROK
 19578                                  
 19579                                  	; MSDOS 6.0
 19580 00004131 09FF                    	or	di,di
 19581 00004133 7916                    	jns	short CWROK
 19582                                  	
 19583                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19584 00004135 E8D219                  	call	CHARHARD
 19585 00004138 5F                      	POP	DI
 19586                                  
 19587                                  ;hkn; SS override
 19588 00004139 36C706[3603]0100        	MOV	word [SS:CALLSCNT],1
 19589 00004140 3C01                    	CMP	AL,1
 19590 00004142 74DF                    	JZ	short DVWRTLP 	; Retry
 19591 00004144 08C0                    	OR	AL,AL
 19592 00004146 740C                    	JZ	short DVWRTIGN	; Ignore
 19593                                  	; 10/08/2018
 19594 00004148 E919FE                  	JMP	CRDFERR 	; Fail, pops one stack element
 19595                                  
 19596                                  CWROK:
 19597 0000414B 5F                      	POP	DI
 19598                                  
 19599                                  ;hkn; SS override
 19600 0000414C 36833E[3603]00          	CMP	word [SS:CALLSCNT],0
 19601 00004152 741C                    	JZ	short WRTCOOKDONE
 19602                                  DVWRTIGN:
 19603 00004154 42                      	INC	DX
 19604                                  
 19605                                  ;hkn; SS override for CALLXAD
 19606 00004155 36FF06[3203]            	INC	WORD [SS:CALLXAD]
 19607 0000415A 47                      	INC	DI
 19608 0000415B 1E                      	PUSH	DS
 19609 0000415C 368E1E[3403]            	MOV	DS,[SS:CALLXAD+2]
 19610 00004161 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 19611 00004164 1F                      	POP	DS
 19612 00004165 7409                    	JZ	short WRTCOOKDONE
 19613                                  
 19614                                  ;hkn; SS override
 19615 00004167 36C706[2703]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 19616 0000416E E2B3                    	LOOP	DVWRTLP
 19617                                  WRTCOOKDONE:
 19618 00004170 89D0                    	MOV	AX,DX
 19619 00004172 1F                      	POP	DS
 19620 00004173 E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 19621                                  
 19622                                  WRITECON:
 19623 00004176 1E                      	PUSH	DS
 19624                                  
 19625                                  ;hkn; SS is DOSDATA
 19626 00004177 16                      	push	ss
 19627 00004178 1F                      	pop	ds
 19628 00004179 E837FD                  	CALL	SWAPCON
 19629 0000417C 1F                      	POP	DS
 19630 0000417D 89DE                    	MOV	SI,BX
 19631 0000417F 51                      	PUSH	CX
 19632                                  WRCONLP:
 19633 00004180 AC                      	LODSB
 19634 00004181 3C1A                    	CMP	AL,1Ah		; ^Z?
 19635 00004183 7405                    	JZ	short CONEOF
 19636 00004185 E88DE2                  	call	OUTT
 19637 00004188 E2F6                    	LOOP	WRCONLP
 19638                                  CONEOF:
 19639 0000418A 58                      	POP	AX			; Count
 19640 0000418B 29C8                    	SUB	AX,CX			; Amount actually written
 19641 0000418D 1F                      	POP	DS
 19642 0000418E E81CFD                  	CALL	SWAPBACK
 19643 00004191 E941FF                  	JMP	ENDWRDEV
 19644                                  
 19645                                  ;---------------------------------------------------------------------------
 19646                                  ;
 19647                                  ; Procedure Name : get_io_sft
 19648                                  ;
 19649                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 19650                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more.  Otherwise, we
 19651                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 19652                                  ;
 19653                                  ;---------------------------------------------------------------------------
 19654                                  
 19655                                  GET_IO_SFT:
 19656                                  	;test	byte [SS:CONSWAP],0FFh
 19657 00004194 36803E[2103]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 19658 0000419A 7512                    	JNZ	short GetRedir
 19659                                  GetNormal:
 19660 0000419C 16                      	push	ss
 19661 0000419D 1F                      	pop	ds
 19662 0000419E 06                      	PUSH	ES
 19663 0000419F 57                      	PUSH	DI
 19664 000041A0 E89E29                  	call	SFFromHandle
 19665 000041A3 7206                    	JC	short RET44P
 19666 000041A5 8CC6                    	MOV	SI,ES
 19667 000041A7 8EDE                    	MOV	DS,SI
 19668 000041A9 89FE                    	MOV	SI,DI
 19669                                  RET44P:
 19670 000041AB 5F                      	POP	DI
 19671 000041AC 07                      	POP	ES
 19672 000041AD C3                      	retn
 19673                                  GetRedir:
 19674 000041AE 83FB01                  	CMP	BX,1
 19675 000041B1 77E9                    	JA	short GetNormal
 19676 000041B3 36C536[A205]            	LDS	SI,[SS:CONSFT]
 19677 000041B8 F8                      	CLC
 19678                                  get_io_sft_retn:
 19679 000041B9 C3                      	retn
 19680                                  
 19681                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 19682                                  ;---------------------------------------------------------------------------
 19683                                  ;
 19684                                  ; Procedure Name : DIRREAD
 19685                                  ;
 19686                                  ; Inputs:
 19687                                  ;	AX = Directory block number (relative to first block of directory)
 19688                                  ;	ES:BP = Base of drive parameters
 19689                                  ;	[DIRSEC] = First sector of first cluster of directory
 19690                                  ;	[CLUSNUM] = Next cluster
 19691                                  ;	[CLUSFAC] = Sectors/Cluster
 19692                                  ; Function:
 19693                                  ;	Read the directory block into [CURBUF].
 19694                                  ; Outputs:
 19695                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 19696                                  ;	[SECCLUSPOS] Set
 19697                                  ;	ES:BP unchanged
 19698                                  ;	[CURBUF] Points to Buffer with dir sector
 19699                                  ;	Carry set if error (user said FAIL to I 24)
 19700                                  ; DS preserved, all other registers destroyed.
 19701                                  ;---------------------------------------------------------------------------
 19702                                  
 19703                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 19704                                  
 19705                                  DIRREAD:
 19706                                  
 19707                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 19708                                  ; the same as what is in the DPB! In the case of the root directory, we have
 19709                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 19710                                  ; by DIRStart = 0.
 19711                                  
 19712 000041BA 31D2                    	XOR	DX,DX
 19713 000041BC 833E[7E05]00            	CMP	word [DIRSTART],0
 19714 000041C1 7503                    	jnz	short SubDir
 19715 000041C3 92                      	XCHG	AX,DX
 19716 000041C4 EB0C                    	JMP	short DoRead
 19717                                  
 19718                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 19719                                  
 19720                                  SubDir:
 19721 000041C6 88C2                    	MOV	DL,AL
 19722                                  	;and	dl,[es:bp+4]
 19723 000041C8 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 19724                                  
 19725                                  ;	(DX) = sector-in-cluster
 19726                                  
 19727                                  	;mov	cl,[es:bp+5]
 19728 000041CC 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 19729 000041D0 D3E8                    	SHR	AX,CL
 19730                                  
 19731                                  ;	(DX) = position in cluster
 19732                                  ;	(AX) = number of clusters to skip
 19733                                  
 19734                                  DoRead:
 19735 000041D2 8816[3005]              	MOV	[SECCLUSPOS],DL
 19736 000041D6 89C1                    	MOV	CX,AX
 19737 000041D8 88D4                    	MOV	AH,DL
 19738                                  
 19739                                  ;	(CX) = number of clusters to skip.
 19740                                  ;	(AH) = remainder
 19741                                  
 19742                                  	; 04/05/2019 - Retro DOS v4.0
 19743                                  	; 23/07/2019 - Retro DOS v3.2
 19744                                  
 19745                                  	; MSDOS 6.0
 19746 000041DA 8B16[7C05]              	MOV	DX,[DIRSEC+2]	     	  ;>32mb
 19747 000041DE 8916[B005]              	MOV	[HIGH_SECTOR],DX	  ;>32mb
 19748 000041E2 8B16[7A05]              	MOV	DX,[DIRSEC]
 19749 000041E6 00E2                    	ADD	DL,AH
 19750 000041E8 80D600                  	ADC	DH,0
 19751 000041EB 8316[B005]00            	ADC	word [HIGH_SECTOR],0	  ;>32mb
 19752                                  
 19753 000041F0 8B1E[7805]              	MOV	BX,[CLUSNUM]
 19754 000041F4 891E[9805]              	MOV	[NXTCLUSNUM],BX
 19755 000041F8 E319                    	JCXZ	FIRSTCLUSTER
 19756                                  SKPCLLP:
 19757 000041FA E8301B                  	call	UNPACK
 19758 000041FD 72BA                    	jc	short get_io_sft_retn
 19759 000041FF 87DF                    	XCHG	BX,DI
 19760 00004201 E8121B                  	call	IsEOF			; test for eof based on fat size
 19761 00004204 7302                    	JAE	short HAVESKIPPED
 19762 00004206 E2F2                    	LOOP	SKPCLLP
 19763                                  HAVESKIPPED:
 19764 00004208 891E[9805]              	MOV	[NXTCLUSNUM],BX
 19765 0000420C 89FA                    	MOV	DX,DI
 19766 0000420E 88E3                    	MOV	BL,AH
 19767 00004210 E8DF14                  	call	FIGREC
 19768                                  
 19769                                  	;entry	FIRSTCLUSTER
 19770                                  
 19771                                  FIRSTCLUSTER:
 19772                                  	;mov	byte [ALLOWED],18h
 19773 00004213 C606[1503]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 19774 00004218 30C0                    	XOR	AL,AL		; Indicate pre-read
 19775 0000421A E8811F                  	call	GETBUFFR
 19776 0000421D 729A                    	jc	short get_io_sft_retn
 19777                                  
 19778                                  	;entry	SET_BUF_AS_DIR
 19779                                  
 19780                                  SET_BUF_AS_DIR:
 19781                                  
 19782                                  ;	Set the type of CURBUF to be a directory sector.
 19783                                  ;	Only flags are modified.
 19784                                  
 19785 0000421F 1E                      	PUSH	DS
 19786 00004220 56                      	PUSH	SI
 19787 00004221 C536[9E05]              	LDS	SI,[CURBUF]
 19788                                  	;or	byte [si+5],4
 19789 00004225 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 19790 00004229 5E                      	POP	SI
 19791 0000422A 1F                      	POP	DS
 19792                                  dirread_retn:
 19793 0000422B C3                      	retn
 19794                                  
 19795                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 19796                                  ;----------------------------------------------------------------------------
 19797                                  ;
 19798                                  ; Procedure Name : FATSECRD
 19799                                  ; Inputs:
 19800                                  ;	Same as DREAD
 19801                                  ;	DS:BX = Transfer address
 19802                                  ;	CX = Number of sectors
 19803                                  ;	DX = Absolute record number
 19804                                  ;	ES:BP = Base of drive parameters
 19805                                  ; Function:
 19806                                  ;	Calls BIOS to perform FAT read.
 19807                                  ; Outputs:
 19808                                  ;	Same as DREAD
 19809                                  ;---------------------------------------------------------------------------
 19810                                  
 19811                                  	; 04/05/2019 - Retro DOS v4.0
 19812                                  	; 23/07/2019 - REtro DOS v3.2
 19813                                  FATSECRD:
 19814                                  ;hkn; SS override
 19815                                  	;mov	byte [ss:ALLOWED],18h
 19816 0000422C 36C606[1503]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 19817 00004232 89CF                    	MOV	DI,CX
 19818                                  	;mov	cl,[es:bp+8]
 19819 00004234 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 19820                                  	; MSDOS 3.3
 19821                                  	;;mov	al,[es:bp+0Fh]
 19822                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 
 19823                                  	;XOR	AH,AH
 19824                                  	; MSDOS 6.0
 19825                                  	;mov	ax,[es:bp+0Fh]
 19826 00004238 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 19827 0000423C 30ED                    	XOR	CH,CH	
 19828 0000423E 52                      	PUSH	DX
 19829                                  NXTFAT:
 19830                                  	; MSDOS 6.0
 19831                                  ;hkn; SS override
 19832 0000423F 36C706[B005]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 19833 00004246 51                      	PUSH	CX			;32mb
 19834 00004247 50                      	PUSH	AX
 19835 00004248 89F9                    	MOV	CX,DI
 19836 0000424A E85B00                  	call	DSKREAD
 19837 0000424D 58                      	POP	AX
 19838 0000424E 59                      	POP	CX
 19839 0000424F 7420                    	JZ	short RET41P		; Carry clear
 19840 00004251 01C2                    	ADD	DX,AX
 19841 00004253 E2EA                    	LOOP	NXTFAT
 19842 00004255 5A                      	POP	DX
 19843 00004256 89F9                    	MOV	CX,DI
 19844                                  
 19845                                  ; NOTE FALL THROUGH
 19846                                  
 19847                                  ;Break	<DREAD -- DO A DISK READ>
 19848                                  ;---------------------------------------------------------------------------
 19849                                  ;
 19850                                  ; Procedure Name : DREAD
 19851                                  ;
 19852                                  ; Inputs:
 19853                                  ;	DS:BX = Transfer address
 19854                                  ;	CX = Number of sectors
 19855                                  ;	DX = Absolute record number	      (LOW)
 19856                                  ;	[HIGH_SECTOR]= Absolute record number (HIGH)
 19857                                  ;	ES:BP = Base of drive parameters
 19858                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 19859                                  ; Function:
 19860                                  ;	Calls BIOS to perform disk read. If BIOS reports
 19861                                  ;	errors, will call HARDERRRW for further action.
 19862                                  ; Outputs:
 19863                                  ;	Carry set if error (currently user FAILED to INT 24)
 19864                                  ; DS,ES:BP preserved. All other registers destroyed.
 19865                                  ;---------------------------------------------------------------------------
 19866                                  
 19867                                  	;entry	DREAD
 19868                                  DREAD:
 19869 00004258 E84D00                  	call	DSKREAD
 19870 0000425B 74CE                    	jz	short dirread_retn	; Carry clear
 19871                                  ;hkn; SS override
 19872 0000425D 36C606[3205]00          	MOV	BYTE [SS:READOP],0
 19873 00004263 E89A00                  	call	HARDERRRW
 19874 00004266 3C01                    	CMP	AL,1		; Check for retry
 19875 00004268 74EE                    	JZ	short DREAD
 19876 0000426A 3C03                    	CMP	AL,3		; Check for FAIL
 19877 0000426C F8                      	CLC
 19878 0000426D 7501                    	JNZ	short NO_CAR		; Ignore
 19879 0000426F F9                      	STC
 19880                                  NO_CAR:
 19881 00004270 C3                      	retn
 19882                                  RET41P: 
 19883 00004271 5A                      	POP	DX
 19884 00004272 C3                      	retn
 19885                                  
 19886                                  ; 24/07/2018 - Retro DOS v3.0
 19887                                  
 19888                                  ;Break	<CHECK_WRITE_LOCK>
 19889                                  ;---------------------------------------------------------------------------
 19890                                  ;
 19891                                  ; Procedure Name : CHECK_WRITE_LOCK
 19892                                  ;
 19893                                  ; Inputs:
 19894                                  ;	output of SETUP
 19895                                  ;	ES:DI -> SFT
 19896                                  ; Function:
 19897                                  ;	check write lock
 19898                                  ; Outputs:
 19899                                  ;	Carry set if error
 19900                                  ;	Carry clear if ok
 19901                                  ;
 19902                                  ;----------------------------------------------------------------------------
 19903                                  
 19904                                  CHECK_WRITE_LOCK:
 19905                                  	; MSDOS 6.0
 19906                                  	;test	byte [es:di+4],8
 19907 00004273 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 19908                                  	;JZ	short write_cont			     ;no
 19909                                  	;call	SET_ACC_ERR_DS		;
 19910                                  	;retn
 19911                                  	;jnz	SET_ACC_ERR_DS
 19912                                  	; 19/08/2018
 19913 00004278 7403                    	jz	short write_cont
 19914 0000427A E9C101                  	jmp	SET_ACC_ERR_DS
 19915                                  write_cont:				;
 19916 0000427D 51                      	PUSH	CX			;save reg
 19917 0000427E 09C9                    	OR	CX,CX			;
 19918 00004280 7501                    	JNZ	short Not_Truncate	;
 19919 00004282 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 19920                                  Not_Truncate:				;
 19921 00004283 B080                    	MOV	AL,80H			;check write access
 19922 00004285 E8A233                  	call	LOCK_CHECK		;check lock
 19923 00004288 59                      	POP	CX			;restore reg
 19924 00004289 7305                    	JNC	short WRITE_OK		;lock ok
 19925 0000428B E86701                  	call	WRITE_LOCK_VIOLATION	;issue I24
 19926 0000428E 73ED                    	JNC	short write_cont	;retry
 19927                                  WRITE_OK:				;
 19928 00004290 C3                      	retn				;
 19929                                  
 19930                                  ;Break	<CHECK_READ_LOCK>
 19931                                  ;---------------------------------------------------------------------------
 19932                                  ;
 19933                                  ; Procedure Name : CHECK_READ_LOC
 19934                                  ;
 19935                                  ; Inputs:
 19936                                  ;	ES:DI -> SFT
 19937                                  ;	output of SETUP
 19938                                  ; Function:
 19939                                  ;	check read lock
 19940                                  ; Outputs:
 19941                                  ;	Carry set if error
 19942                                  ;	Carry clear if ok
 19943                                  ;----------------------------------------------------------------------------
 19944                                  
 19945                                  CHECK_READ_LOCK:
 19946                                  	; MSDOS 6.0
 19947                                  	;test	byte [es:di+4],8
 19948 00004291 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 19949                                  	;JZ	short do_retry			   	     ; no
 19950                                  	;call	SET_ACC_ERR		;
 19951                                  	;retn
 19952                                  	;jnz	SET_ACC_ERR
 19953                                  	; 28/07/2019
 19954 00004296 7403                    	jz	short do_retry
 19955 00004298 E9A501                  	jmp	SET_ACC_ERR
 19956                                  do_retry:				;
 19957 0000429B 30C0                    	xor	al,al			;check read access
 19958 0000429D E88A33                  	call	LOCK_CHECK		;check lock
 19959 000042A0 7305                    	JNC	short READLOCK_OK 	;lock ok
 19960 000042A2 E82901                  	call	READ_LOCK_VIOLATION	;issue I24
 19961 000042A5 73F4                    	JNC	short do_retry		;retry
 19962                                  READLOCK_OK:				;
 19963 000042A7 C3                      	retn				;
 19964                                  
 19965                                  ;============================================================================
 19966                                  ; DISK2.ASM, MSDOS 6.0, 1991
 19967                                  ;============================================================================
 19968                                  ; 24/07/2018 - Retro DOS v3.0 
 19969                                  
 19970                                  ;	TITLE	DISK2 - Disk utility routines
 19971                                  ;	NAME	Disk2
 19972                                  
 19973                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 19974                                  ;
 19975                                  ;	DskRead
 19976                                  ;	DWRITE
 19977                                  ;	DSKWRITE
 19978                                  ;	HarderrRW
 19979                                  ;	SETUP
 19980                                  ;	BREAKDOWN
 19981                                  ;	READ_LOCK_VIOLATION
 19982                                  ;	WRITE_LOCK_VIOLATION
 19983                                  ;	DISKREAD
 19984                                  ;	SET_ACC_ERR_DS
 19985                                  ;	SET_ACC_ERR
 19986                                  ;	SETSFT
 19987                                  ;	SETCLUS
 19988                                  ;	AddRec
 19989                                  ;
 19990                                  ;	Revision history:
 19991                                  ;
 19992                                  ;		AN000 version 4.00 Jan. 1988
 19993                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 19994                                  
 19995                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 19996                                  ;---------------------------------------------------------------------------
 19997                                  ;
 19998                                  ; Procedure Name : DSKREAD
 19999                                  ;
 20000                                  ; Inputs:
 20001                                  ;	DS:BX = Transfer addr
 20002                                  ;	CX = Number of sectors
 20003                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 20004                                  ;	DX = Absolute record number	       (LOW)
 20005                                  ;	ES:BP = Base of drive parameters
 20006                                  ; Function:
 20007                                  ;	Call BIOS to perform disk read
 20008                                  ; Outputs:
 20009                                  ;	DI = CX on entry
 20010                                  ;	CX = Number of sectors unsuccessfully transfered
 20011                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 20012                                  ;	Zero set if OK (from BIOS) (carry clear)
 20013                                  ;	Zero clear if error (carry clear)
 20014                                  ; SI Destroyed, others preserved
 20015                                  ;---------------------------------------------------------------------------
 20016                                  
 20017                                  DSKREAD:
 20018 000042A8 51                      	PUSH	CX
 20019                                  	;mov	ah,[es:bp+16h]
 20020                                  	;mov	ah,[es:bp+17h] ; MSDOS 6.0 ; 26/07/2019
 20021 000042A9 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 20022                                  	;mov	al,[es:bp+1]
 20023 000042AD 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 20024 000042B1 53                      	PUSH	BX
 20025 000042B2 06                      	PUSH	ES
 20026 000042B3 E8EC0E                  	call	SETREAD
 20027 000042B6 EB27                    	JMP	short DODSKOP
 20028                                  
 20029                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 20030                                  ;--------------------------------------------------------------------------
 20031                                  ;
 20032                                  ; Procedure Name : DWRITE
 20033                                  ;
 20034                                  ; Inputs:
 20035                                  ;	DS:BX = Transfer address
 20036                                  ;	CX = Number of sectors
 20037                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 20038                                  ;	DX = Absolute record number	       (LOW)
 20039                                  ;	ES:BP = Base of drive parameters
 20040                                  ;	[ALLOWED] must be set in case HARDERR called
 20041                                  ; Function:
 20042                                  ;	Calls BIOS to perform disk write. If BIOS reports
 20043                                  ;	errors, will call HARDERRRW for further action.
 20044                                  ; Output:
 20045                                  ;	Carry set if error (currently, user FAILed to I 24)
 20046                                  ; BP preserved. All other registers destroyed.
 20047                                  ;----------------------------------------------------------------------------
 20048                                  
 20049                                  
 20050                                  	;entry	DWRITE
 20051                                  DWRITE:
 20052 000042B8 E81600                  	CALL	DSKWRITE
 20053 000042BB 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 20054                                  
 20055                                  ;hkn; SS override
 20056 000042BD 36C606[3205]01          	MOV	BYTE [SS:READOP],1
 20057 000042C3 E83A00                  	call	HARDERRRW
 20058 000042C6 3C01                    	CMP	AL,1		; Check for retry
 20059 000042C8 74EE                    	JZ	short DWRITE
 20060 000042CA 3C03                    	CMP	AL,3		; Check for FAIL
 20061 000042CC F8                      	CLC
 20062 000042CD 7501                    	JNZ	short NO_CAR2 	; Ignore
 20063 000042CF F9                      	STC
 20064                                  NO_CAR2:
 20065                                  dw_ret_label:
 20066 000042D0 C3                      	retn
 20067                                  
 20068                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 20069                                  ;---------------------------------------------------------------------------
 20070                                  ;
 20071                                  ; Procedure Name : DSKWRITE
 20072                                  ;
 20073                                  ; Inputs:
 20074                                  ;	DS:BX = Transfer addr
 20075                                  ;	CX = Number of sectors
 20076                                  ;	DX = Absolute record number	       (LOW)
 20077                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 20078                                  ;	ES:BP = Base of drive parameters
 20079                                  ; Function:
 20080                                  ;	Call BIOS to perform disk read
 20081                                  ; Outputs:
 20082                                  ;	DI = CX on entry
 20083                                  ;	CX = Number of sectors unsuccessfully transfered
 20084                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 20085                                  ;	Zero set if OK (from BIOS) (carry clear)
 20086                                  ;	Zero clear if error (carry clear)
 20087                                  ; SI Destroyed, others preserved
 20088                                  ;
 20089                                  ;----------------------------------------------------------------------------
 20090                                  
 20091                                  	;entry	DSKWRITE
 20092                                  DSKWRITE:
 20093 000042D1 51                      	PUSH	CX
 20094                                  	;mov	ah,[es:bp+16h]
 20095                                  	;mov	ah,[es:bp+17h] ; MSDOS 6.0
 20096 000042D2 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 20097                                  	;mov	al,[es:bp+1]
 20098 000042D6 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 20099 000042DA 53                      	PUSH	BX
 20100 000042DB 06                      	PUSH	ES
 20101 000042DC E8F60E                  	call	SETWRITE
 20102                                  DODSKOP:
 20103 000042DF 8CD9                    	MOV	CX,DS		; Save DS
 20104 000042E1 1F                      	POP	DS		; DS:BP points to DPB
 20105 000042E2 1E                      	PUSH	DS
 20106                                  	;lds	si,[ds:bp+12h]
 20107                                  	;lds	si,[ds:bp+13h] ; MSDOS 6.0 ; 26/07/2019
 20108 000042E3 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 20109 000042E7 E8460E                  	call	DEVIOCALL2
 20110 000042EA 8ED9                    	MOV	DS,CX		; Restore DS
 20111 000042EC 07                      	POP	ES		; Restore ES
 20112 000042ED 5B                      	POP	BX
 20113                                  
 20114                                  ;hkn; SS override
 20115 000042EE 368B0E[3603]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 20116 000042F3 5F                      	POP	DI
 20117 000042F4 29F9                    	SUB	CX,DI
 20118 000042F6 F7D9                    	NEG	CX		; Number of sectors not transferred
 20119                                  
 20120                                  ;hkn; SS override
 20121 000042F8 36A1[2703]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 20122                                  	;test	ax,8000h
 20123 000042FC A90080                  	test	AX,STERR
 20124 000042FF C3                      	retn
 20125                                  
 20126                                  ;Break	<HardErrRW - map extended errors and call harderr>
 20127                                  ;---------------------------------------------------------------------------
 20128                                  ;
 20129                                  ; Procedure Name : HardErrRW
 20130                                  ;
 20131                                  ; Inputs:
 20132                                  ;	AX is error code from read or write
 20133                                  ;	Other registers set as per HARDERR
 20134                                  ; Function:
 20135                                  ;	Checks the error code for special extended
 20136                                  ;	errors and maps them if needed. Then invokes
 20137                                  ;	Harderr
 20138                                  ; Outputs:
 20139                                  ;	Of HARDERR
 20140                                  ; AX may be modified prior to call to HARDERR.
 20141                                  ; No other registers altered.
 20142                                  ;
 20143                                  ;---------------------------------------------------------------------------
 20144                                  
 20145                                  HARDERRRW:
 20146                                  	;cmp	al,0Fh
 20147 00004300 3C0F                    	CMP	AL,error_I24_wrong_disk
 20148 00004302 7512                    	JNZ	short DO_ERR				; Nothing to do
 20149                                  
 20150                                  	; MSDOS 3.3
 20151                                  	;push	ds
 20152                                  	;push	si
 20153                                  	;lds	si,[ss:CALLVIDRW]
 20154                                  	;mov	[ss:EXTERRPT+2], ds
 20155                                  	;mov	[ss:EXTERRPT], si
 20156                                  	;pop	si
 20157                                  	;pop	ds
 20158                                  
 20159                                  	; MSDOS 6.0
 20160 00004304 50                      	push	ax
 20161 00004305 36A1[3A03]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 20162 00004309 36A3[F402]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 20163 0000430D 36A1[3C03]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 20164 00004311 36A3[F602]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 20165 00004315 58                      	pop	ax
 20166                                  DO_ERR:
 20167 00004316 E80F18                  	call	HARDERR
 20168 00004319 C3                      	retn
 20169                                  
 20170                                  ; 24/07/2018 - Retro DOS v3.0
 20171                                  
 20172                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 20173                                  ;----------------------------------------------------------------------------
 20174                                  ;
 20175                                  ; Procedure Name : SETUP
 20176                                  ;
 20177                                  ; Inputs:
 20178                                  ;	ES:DI point to SFT (value also in THISSFT)
 20179                                  ;	DMAAdd contains transfer address
 20180                                  ;	CX = Byte count
 20181                                  ;	DS = DOSDATA
 20182                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 20183                                  ;		2nd of caller of caller.
 20184                                  ; Outputs:
 20185                                  ;	    CX = byte count
 20186                                  ;	    [THISDPB] = Base of drive parameters if file
 20187                                  ;		      = Pointer to device header if device or NET
 20188                                  ;	    ES:DI Points to SFT
 20189                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 20190                                  ;	    [TRANS] = 0 (No transfers yet)
 20191                                  ;	    BytPos = Byte position in file
 20192                                  ;
 20193                                  ;	The following fields are relevant to local files (not devices) only:
 20194                                  ;
 20195                                  ;	    SecPos = Position of first sector (local files only)
 20196                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 20197                                  ;	    [CLUSNUM] = First cluster (local files only)
 20198                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 20199                                  ;	    [THISDRV] = Physical unit number (local files only)
 20200                                  ;
 20201                                  ;      RETURNS ONE LEVEL UP WITH:
 20202                                  ;	   CX = 0
 20203                                  ;	   CARRY = Clear
 20204                                  ;	IF AN ERROR IS DETECTED
 20205                                  ; All other registers destroyed
 20206                                  ;----------------------------------------------------------------------------
 20207                                  
 20208                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 20209                                  
 20210                                  SETUP:
 20211                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 20212                                  
 20213                                  	;lds 	si,[es:di+7]
 20214 0000431A 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 20215                                  
 20216                                  ;hkn; SS override
 20217 0000431E 368C1E[4805]            	MOV	[SS:THISDPB+2],DS
 20218                                  
 20219                                  ;hkn; SS is DOSDATA
 20220 00004323 16                      	push	ss
 20221 00004324 1F                      	pop	ds
 20222                                  
 20223 00004325 8936[4605]              	MOV	[THISDPB],SI
 20224                                  
 20225 00004329 8B1E[F802]              	MOV	BX,[DMAADD]
 20226 0000432D 891E[7405]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 20227 00004331 C606[3105]00            	MOV	BYTE [TRANS],0		;No transferes
 20228                                  	;mov	ax,[es:di+15h]
 20229 00004336 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 20230                                  	;mov	dx,[es:di+17h]
 20231 0000433A 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 20232 0000433E 8916[8C05]              	MOV	[BYTPOS+2],DX	;Set it
 20233 00004342 A3[8A05]                	MOV	[BYTPOS],AX
 20234                                  	;test	word [es:di+5],8080h
 20235 00004345 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 20236 0000434B 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 20237 0000434D 06                      	PUSH	ES
 20238 0000434E C42E[4605]              	LES	BP,[THISDPB]		;Point at the DPB
 20239                                  	;mov	bl,[es:bp+0]
 20240                                  	;MOV	BL,[ES:BP+DPB.drive]
 20241 00004352 268A5E00                	mov	bl,[es:bp]
 20242 00004356 881E[3305]              	MOV	[THISDRV],BL		;Set THISDRV
 20243                                  	;mov	bx,[es:bp+2]
 20244 0000435A 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 20245                                  
 20246                                  	; 24/07/2019 - Retro DOS v3.2
 20247                                  
 20248                                  	;; MSDOS 3.3
 20249                                  	;cmp	dx,bx
 20250                                  	;jnb	short EOFERR
 20251                                  	;div	bx
 20252                                  	;mov	[SECPOS],ax
 20253                                  	;mov	[BYTSECPOS],dx
 20254                                  	;mov	dx,ax
 20255                                  	;;and	al,[es:bp+4]
 20256                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 20257                                  	;mov	[SECCLUSPOS],al
 20258                                  	;mov	ax,cx
 20259                                  	;;mov	cl,[es:bp+5]
 20260                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 20261                                  	;shr	dx,cl
 20262                                  	;mov	[CLUSNUM],dx
 20263                                  	;pop	es
 20264                                  	;mov	cx,ax
 20265                                  
 20266                                  	; 04/05/2019 - Retro DOS v4.0
 20267                                  
 20268                                  	; MSDOS 6.0
 20269                                  ;M039: Optimized this section.
 20270 0000435E 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 20271 0000435F E8E104                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 20272 00004362 8916[8805]              	MOV	[BYTSECPOS],DX
 20273 00004366 A3[8005]                	MOV	[SECPOS],AX
 20274 00004369 890E[8205]              	MOV	[SECPOS+2],CX
 20275 0000436D 89CA                    	MOV	DX,CX
 20276                                  
 20277 0000436F 89C3                    	MOV	BX,AX
 20278                                  	;and	bl,[es:bp+4]
 20279 00004371 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 20280 00004375 881E[3005]              	MOV	[SECCLUSPOS],BL
 20281                                  
 20282 00004379 E8EE04                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 20283 0000437C 59                      	POP	CX			;CX = byte count.
 20284 0000437D 751F                    	JNZ	short EOFERR		;cluster number above 64k
 20285                                  	;cmp	ax,[es:bp+0Dh]
 20286 0000437F 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 20287 00004383 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 20288                                  
 20289 00004385 A3[7805]                	MOV	[CLUSNUM],AX
 20290 00004388 07                      	POP	ES			; ES:DI point to SFT
 20291                                  ;M039
 20292                                  
 20293                                  NOSETSTUFF:
 20294 00004389 89C8                    	MOV	AX,CX		; AX = Byte count.
 20295 0000438B 0306[F802]              	ADD	AX,[DMAADD]	 ; See if it will fit in one segment
 20296 0000438F 730C                    	JNC	short setup_OK		; Must be less than 64K
 20297 00004391 A1[F802]                	MOV	AX,[DMAADD]
 20298 00004394 F7D8                    	NEG	AX		; Amount of room left in segment (know
 20299                                  				;    less than 64K since max value of CX
 20300                                  				;    is FFFF).
 20301 00004396 7501                    	JNZ	short NoDec
 20302 00004398 48                      	DEC	AX
 20303                                  NoDec:
 20304 00004399 89C1                    	MOV	CX,AX		; Can do this much
 20305 0000439B E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 20306                                  setup_OK:
 20307 0000439D C3                      	retn
 20308                                  
 20309                                  EOFERR:
 20310 0000439E 07                      	POP	ES		; ES:DI point to SFT
 20311 0000439F 31C9                    	XOR	CX,CX		; No bytes read
 20312                                  ;;;;;;;;;;; 7/18/86
 20313                                  	; 24/07/2019 - Retro DOS v3.2
 20314                                  	; MSDOS 3.3
 20315                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 20316                                  ;;;;;;;;;;;
 20317                                  NOROOM:
 20318 000043A1 5B                      	POP	BX		; Kill return address
 20319 000043A2 F8                      	CLC
 20320 000043A3 C3                      	retn			; RETURN TO CALLER OF CALLER
 20321                                  
 20322                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 20323                                  ;---------------------------------------------------------------------------
 20324                                  ;
 20325                                  ; Procedure Name : BREAKDOWN
 20326                                  ;
 20327                                  ; Inputs:
 20328                                  ;	CX = Length of disk transfer in bytes
 20329                                  ;	ES:BP = Base of drive parameters
 20330                                  ;	[BYTSECPOS] = Byte position within first sector
 20331                                  ;	DS = DOSDATA
 20332                                  ; Outputs:
 20333                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 20334                                  ;	[SECCNT] = No. of whole sectors to transfer
 20335                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 20336                                  ; AX, BX, DX destroyed. No other registers affected.
 20337                                  ;---------------------------------------------------------------------------
 20338                                  
 20339                                  BREAKDOWN:
 20340 000043A4 A1[8805]                	MOV	AX,[BYTSECPOS]
 20341 000043A7 89CB                    	MOV	BX,CX
 20342 000043A9 09C0                    	OR	AX,AX
 20343 000043AB 740E                    	JZ	short SAVFIR	; Partial first sector?
 20344                                  	;sub	ax,[es:bp+2]
 20345 000043AD 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 20346 000043B1 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 20347 000043B3 29C3                    	SUB	BX,AX		; Subtract from total length
 20348 000043B5 7304                    	JAE	short SAVFIR
 20349 000043B7 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 20350 000043B9 31DB                    	XOR	BX,BX		; And no bytes are left
 20351                                  SAVFIR:
 20352 000043BB A3[8E05]                	MOV	[BYTCNT1],AX
 20353 000043BE 89D8                    	MOV	AX,BX
 20354 000043C0 31D2                    	XOR	DX,DX
 20355                                  	;div	word [ES:BP+2]
 20356 000043C2 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 20357 000043C6 A3[9205]                	MOV	[SECCNT],AX
 20358 000043C9 8916[9005]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 20359                                  	; MSDOS 3.3
 20360                                  ;	OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 20361                                  ;	retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 20362                                  ;	CMP	AX,1
 20363                                  ;	retnz
 20364                                  ;	MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 20365                                  ;	MOV	[BYTCNT2],AX
 20366                                  ;	MOV	[SECCNT],DX	; DX = 0
 20367                                  _RET45:
 20368 000043CD C3                      	retn
 20369                                  
 20370                                  ;----------------------------------------------------------------------------
 20371                                  ;
 20372                                  ; Procedure Name : READ_LOCK_VIOLATION
 20373                                  ;
 20374                                  ; ES:DI points to SFT. This entry used by NET_READ
 20375                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 20376                                  ; Else do retrys.
 20377                                  ; ES:DI,DS,CX preserved
 20378                                  ;
 20379                                  ;----------------------------------------------------------------------------
 20380                                  
 20381                                  READ_LOCK_VIOLATION:
 20382 000043CE C606[3205]00            	MOV	byte [READOP],0
 20383                                  ERR_ON_CHECK:
 20384                                  	;test	word [es:di+2],8000h
 20385 000043D3 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 20386 000043D9 750E                    	JNZ	short HARD_ERR
 20387 000043DB 51                      	PUSH	CX
 20388 000043DC 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 20389                                  	;and	cl,0F0h
 20390 000043E0 80E1F0                  	AND	CL,SHARING_MASK
 20391                                  	;cmp	cl,0
 20392 000043E3 80F900                  	CMP	CL,SHARING_COMPAT
 20393 000043E6 59                      	POP	CX
 20394 000043E7 7505                    	JNE	short NO_HARD_ERR
 20395                                  HARD_ERR:
 20396 000043E9 E85232                  	call	LOCK_VIOLATION
 20397 000043EC 73DF                    	jnc	short _RET45		; User wants Retrys
 20398                                  NO_HARD_ERR:
 20399 000043EE 31C9                    	XOR	CX,CX			;No bytes transferred
 20400                                  	;mov	ax,21h
 20401 000043F0 B82100                  	MOV	AX,error_lock_violation
 20402 000043F3 F9                      	STC
 20403 000043F4 C3                      	retn
 20404                                  
 20405                                  ;----------------------------------------------------------------------------
 20406                                  ;
 20407                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 20408                                  ;
 20409                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 20410                                  ; This entry used by NET_WRITE
 20411                                  ;
 20412                                  ;----------------------------------------------------------------------------
 20413                                  
 20414                                  WRITE_LOCK_VIOLATION:
 20415 000043F5 C606[3205]01            	MOV	byte [READOP],1
 20416 000043FA EBD7                    	JMP	short ERR_ON_CHECK
 20417                                  
 20418                                  ; 22/07/2019 - Retro DOS v3.2
 20419                                  
 20420                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 20421                                  ;----------------------------------------------------------------------------
 20422                                  ;
 20423                                  ; Procedure Name : DISKREAD
 20424                                  ;
 20425                                  ; Inputs:
 20426                                  ;	Outputs of SETUP
 20427                                  ; Function:
 20428                                  ;	Perform disk read
 20429                                  ; Outputs:
 20430                                  ;    Carry clear
 20431                                  ;	CX = No. of bytes read
 20432                                  ;	ES:DI point to SFT
 20433                                  ;	SFT offset and cluster pointers updated
 20434                                  ;    Carry set
 20435                                  ;	CX = 0
 20436                                  ;	ES:DI point to SFT
 20437                                  ;	AX has error code
 20438                                  ;----------------------------------------------------------------------------
 20439                                  
 20440                                  ;hkn; called from disk.asm. DS already set up.
 20441                                  
 20442                                  DISKREAD:
 20443                                  	;mov	ax,[es:di+11h]
 20444 000043FC 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 20445                                  	;mov	bx,[es:di+13h]
 20446 00004400 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 20447 00004404 2B06[8A05]              	SUB	AX,[BYTPOS]
 20448 00004408 1B1E[8C05]              	SBB	BX,[BYTPOS+2]
 20449 0000440C 7226                    	JB	short RDERR		;Read starts past EOF
 20450 0000440E 750A                    	JNZ	short ENUF		;More than 64k to EOF
 20451 00004410 09C0                    	OR	AX,AX
 20452 00004412 7420                    	JZ	short RDERR		;Read starts at EOF
 20453 00004414 39C8                    	CMP	AX,CX
 20454 00004416 7302                    	JAE	short ENUF		;I/O fits
 20455 00004418 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 20456                                  ENUF:
 20457                                  	; MSDOS 3.3
 20458                                  	;test	byte [es:di+4],8
 20459                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 20460                                  	;jnz	short SET_ACC_ERR
 20461                                  	;call	LOCK_CHECK
 20462                                  	;jnb	short _READ_OK
 20463                                  	;call	READ_LOCK_VIOLATION
 20464                                  	;jnb	short ENUF
 20465                                  	;retn
 20466                                  
 20467                                  	; MSDOS 6.0
 20468 0000441A E874FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 20469 0000441D 7301                    	JNC	short _READ_OK 		; There are no locks
 20470 0000441F C3                      	retn
 20471                                  
 20472                                  _READ_OK:
 20473 00004420 C42E[4605]              	LES	BP,[THISDPB]
 20474 00004424 E87DFF                  	CALL	BREAKDOWN
 20475 00004427 8B0E[7805]              	MOV	CX,[CLUSNUM]
 20476 0000442B E82A11                  	call	FNDCLUS
 20477                                       	; MSDOS 6.0			;M022 conditional removed here
 20478 0000442E 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 20479                                  					; migrated from 330a - HKN
 20480 00004430 09C9                    	OR	CX,CX
 20481 00004432 7413                    	JZ	short SKIPERR
 20482                                  RDERR:
 20483 00004434 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 20484 00004436 E90502                  	jmp	WRTERR22
 20485                                  
 20486                                  ;RDLASTJ: 
 20487                                  	;JMP	RDLAST                  ;M039
 20488                                  
 20489                                  SETSFTJ2: 
 20490 00004439 E90001                  	JMP	SETSFT
 20491                                  
 20492                                  CANOT_READ:
 20493                                  	; 22/07/2019 - Retro DOS v3.2
 20494                                  	; MSDOS 3.3
 20495                                  	;POP	CX		;M039.
 20496                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20497 0000443C 59                      	POP	CX              ;Clean stack.
 20498 0000443D 5B                      	POP	BX
 20499                                  
 20500                                  	;entry	SET_ACC_ERR_DS
 20501                                  SET_ACC_ERR_DS:
 20502                                  ;hkn; SS is DOSDATA
 20503                                  	;Context DS
 20504 0000443E 16                      	push	ss
 20505 0000443F 1F                      	pop	ds
 20506                                  
 20507                                  	;entry	SET_ACC_ERR
 20508                                  SET_ACC_ERR:
 20509 00004440 31C9                    	XOR	CX,CX
 20510                                  	;mov	ax,5
 20511 00004442 B80500                  	MOV	AX,error_access_denied
 20512 00004445 F9                      	STC
 20513 00004446 C3                      	retn
 20514                                  
 20515                                  SKIPERR:
 20516 00004447 8916[7605]              	MOV	[LASTPOS],DX
 20517 0000444B 891E[7805]              	MOV	[CLUSNUM],BX
 20518 0000444F 833E[8E05]00            	CMP	word [BYTCNT1],0
 20519 00004454 7405                    	JZ	short RDMID
 20520                                  
 20521 00004456 E87511                  	call	BUFRD
 20522 00004459 72E3                    	JC	short SET_ACC_ERR_DS
 20523                                  RDMID:
 20524 0000445B 833E[9205]00            	CMP	word [SECCNT],0
 20525 00004460 0F84BB00                	JZ	RDLAST ; 24/07/2019
 20526                                  
 20527 00004464 E8FA11                  	call	NEXTSEC
 20528 00004467 72D0                    	JC	short SETSFTJ2
 20529                                  
 20530 00004469 C606[3105]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 20531                                  ONSEC:
 20532 0000446E 8A16[3005]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 20533 00004472 8B0E[9205]              	MOV	CX,[SECCNT]
 20534 00004476 8B1E[7805]              	MOV	BX,[CLUSNUM]
 20535                                  RDLP:
 20536 0000447A E81512                  	call	OPTIMIZE
 20537 0000447D 72BF                    	JC	short SET_ACC_ERR_DS
 20538                                  
 20539 0000447F 57                      	PUSH	DI ; *****              ;DI = Next physical cluster.
 20540 00004480 50                      	PUSH	AX ; ****               ;AX = # of sectors remaining.
 20541 00004481 53                      	PUSH	BX ; ***		;[DMAADD+2]:BX = Transfer address.
 20542                                  	;mov	byte [ALLOWED],38h
 20543 00004482 C606[1503]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 20544 00004487 8E1E[FA02]              	MOV	DS,[DMAADD+2]
 20545                                  
 20546 0000448B 52                      	PUSH	DX ; **                 ;[HIGH_SECTOR]:DX = phys. sector #.
 20547 0000448C 51                      	PUSH	CX ; *                  ;CX = # of contiguous sectors to read.
 20548                                  
 20549                                  	; MSDOS 6.0
 20550                                  	;call	SET_RQ_SC_PARMS 	 ;LB. do this for SC ;AN000;
 20551                                  
 20552                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20553 0000448D E8C8FD                  	call	DREAD
 20554                                  
 20555                                  	; 22/07/2019 - Retro DOS v3.2
 20556                                  
 20557                                  	; MSDOS 6.0 
 20558 00004490 59                      	pop	cx ; *
 20559 00004491 5A                      	pop	dx ; **
 20560 00004492 2E8F06[B205]            	pop	WORD [cs:TEMP_VAR] ; *** ; pop word [ss:TEMP_VAR]
 20561 00004497 72A3                    	jc	short CANOT_READ
 20562                                  
 20563 00004499 2E8C1E[B405]            	mov	[cs:TEMP_VAR2],ds  ; mov [ss:TEMP_VAR2],ds
 20564                                  
 20565                                  	; MSDOS 3.3 
 20566                                  	;pop	bx ; *
 20567                                  	;pop	dx ; **
 20568                                  	;jc	short CANOT_READ
 20569                                  	;add	bx,dx	; (bx = Extent end)
 20570                                  	
 20571 0000449E 268A4600                	mov	al,[es:bp] ; mov al,[es:bp+0]
 20572                                  	;mov	al,[ES:BP+DPB.DRIVE] 
 20573 000044A2 E8191C                  	call	SETVISIT
 20574                                  		; DS:DI = [BUFFHEAD] ; 22/07/2019
 20575                                  	; ->***
 20576                                  ;M039
 20577                                  	; MSDOS 6.0 
 20578                                  	;pop	cx ; *
 20579                                  	;pop	dx ; **
 20580                                  	;pop	WORD [ss:TEMP_VAR] ; ***
 20581                                  	;jc	short CANOT_READ
 20582                                  
 20583                                  	;mov	[ss:TEMP_VAR2],ds
 20584                                  
 20585                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 20586                                  ;            sectors, also termed an "Extent".)
 20587                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20588                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 20589                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20590                                  ;
 20591                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 20592                                  ;	buffers must be "read" into the transfer memory block, so that the
 20593                                  ;       transfer memory reflects the most recent data.
 20594                                  
 20595                                  	;call    DskRdBufScan
 20596                                  
 20597                                  	;;Context DS
 20598                                  	;push	ss
 20599                                  	;pop	ds
 20600                                          
 20601                                  	;pop	cx ; ****
 20602                                          ;pop	bx ; *****
 20603                                  
 20604                                  ;       CX = # of sector remaining.
 20605                                  ;       BX = Next physical cluster.
 20606                                  ;M039
 20607                                  	; 25/07/2018 - Retro DOS v3.0
 20608                                  	; ***->
 20609                                  	; MSDOS 3.3
 20610                                  	; IBMDOS.COM (1987) - Offset 42BDh
 20611                                  bufq:
 20612                                  	; (MSDOS 3.3)
 20613                                  ;;	DX = Extent start.
 20614                                  ;;	BX = Extent end.
 20615                                  ;;      AL = Drive #.
 20616                                  ;;   DS:DI-> 1st buffer in queue.
 20617                                  	
 20618                                  	; 22/07/2019 - Retro DOS v3.2
 20619                                  	; (MSDOS 6.0, 'DskRdBufScan') 
 20620                                  
 20621 000044A5 2E8B1E[B005]            	mov     bx,[cs:HIGH_SECTOR]  ; mov bx,[ss:HIGH_SECTOR]
 20622 000044AA 89DE                    	mov     si,bx
 20623 000044AC 01D1                    	add     cx,dx
 20624 000044AE 83D600                  	adc     si,0
 20625                                  	
 20626                                  	; (MSDOS 6.0)
 20627                                  ;       BX:DX = Extent start.
 20628                                  ;       SI:CX = Extent end + 1.
 20629                                  ;          AL = Drive #.
 20630                                  ;       DS:DI-> 1st buffer in queue.
 20631                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 20632                                  
 20633                                  	;or	byte [di+5],20h
 20634 000044B1 804D0520                	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 20635                                  
 20636                                  	; 22/07/2019 - Retro DOS v3.2
 20637                                  
 20638                                  	;cmp	al,[di+4]	
 20639 000044B5 3A4504                  	cmp	al,[DI+BUFFINFO.buf_ID]	;Same drive?
 20640 000044B8 754C                    	jne	short bufq3		;  -no, jump.
 20641                                  				;Jump if Extent start > buffer sector.
 20642                                  	;cmp	bx,[di+8]
 20643 000044BA 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 20644 000044BD 7503                    	jne	short bufq01
 20645                                  	;cmp	dx,[di+6]
 20646 000044BF 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 20647                                  bufq01:
 20648 000044C2 7742                    	ja	short bufq3
 20649                                  				;Jump if Extent end <= buffer sector.
 20650                                  	;cmp	si,[di+8]
 20651 000044C4 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 20652 000044C7 7503                    	jne	short bufq02
 20653                                  	;cmp	cx,[di+6]
 20654 000044C9 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 20655                                  bufq02:
 20656 000044CC 7638                    	jna	short bufq3
 20657                                  
 20658                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 20659                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 20660                                  ;       as MRU (Most Recently Used).
 20661                                  
 20662                                  	;test	byte [di+5],40h
 20663 000044CE F6450540                	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 20664 000044D2 742F                    	jz	short bufq2	; clear buffer, check the next buff sec
 20665                                  
 20666                                  	; 27/07/2019
 20667                                  	; MSDOS 6.0
 20668 000044D4 50                      	push	ax ; (drive number) ; 22/07/2019
 20669                                  
 20670                                  	; 22/07/2019 - Retro DOS v3.2
 20671                                  
 20672                                  	; MSDOS 3.3
 20673                                  	;pop	ax ; transfer address
 20674                                  	;push	ax
 20675                                  	;push	di
 20676                                  	;push	dx
 20677                                  	;;sub	dx,[di+6]
 20678                                  	;sub	dx,[DI+BUFFINFO.buf_sector]
 20679                                  	;neg	dx
 20680                                  
 20681                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 20682                                  ;;           block.
 20683                                  
 20684                                  	; MSDOS 6.0
 20685 000044D5 51                      	push	cx
 20686 000044D6 52                      	push	dx
 20687 000044D7 56                      	push	si
 20688 000044D8 57                      	push	di
 20689 000044D9 06                      	push	es
 20690                                  
 20691 000044DA 89D0                    	mov     ax,dx
 20692                                  	;sub	ax,[di+6]
 20693 000044DC 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 20694 000044DF F7D8                    	neg	ax
 20695                                  
 20696                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 20697                                  ;            block. (Note: the upper word of the sector # may be ignored
 20698                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 20699                                  ;            is imposed by the input parameters of the disk read operation.)
 20700                                  
 20701                                  	; MSDOS 3.3
 20702                                  	;mov	si,di
 20703                                  	;mov	di,ax
 20704                                  	;mov	ax,dx
 20705                                  	;;mov	cx,[es:bp+6]	
 20706                                  	;mov	cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 20707                                  	;mul	cx
 20708                                  	;add	di,ax
 20709                                  
 20710                                  	; 22/07/2019 - Retro DOS v3.2
 20711                                  
 20712                                  	; MSDOS 3.3
 20713                                  	;lea	si,[si+16] ; MSDOS 3.3
 20714                                  	;lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 20715                                   	;shr	cx,1
 20716                                  	;push	es
 20717                                  	;mov	es,[SS:DMAADD+2]
 20718                                  
 20719                                  	; MSDOS 6.0
 20720                                  	;lea	si,[di+20]
 20721 000044E1 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 20722                                  	;mov	cx,[es:bp+2]
 20723 000044E4 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 20724 000044E8 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 20725                                  	;mov	di,[ss:TEMP_VAR]
 20726 000044EA 2E8B3E[B205]            	mov	di,[cs:TEMP_VAR] ; 22/07/2019
 20727 000044EF 01C7                    	add	di,ax
 20728                                  	;mov	es,[ss:TEMP_VAR2]
 20729 000044F1 2E8E06[B405]            	mov	es,[cs:TEMP_VAR2] ; 22/07/2019
 20730 000044F6 D1E9                    	shr	cx,1
 20731                                  
 20732                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 20733                                  ;       DS:SI-> Buffer sector data.
 20734                                  ;       ES:DI-> Destination within Transfer memory block.
 20735                                  
 20736 000044F8 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 20737                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 20738                                  	;rep	movsb                   ;Copy last byte.
 20739 000044FA 7301                    	jnc	short bufq1
 20740 000044FC A4                      	movsb
 20741                                  bufq1:
 20742                                  	; MSDOS 3.3
 20743                                  	;pop	es
 20744                                  	;pop	dx
 20745                                  	;pop	di
 20746                                  
 20747                                  	; 22/07/2019 - Retro DOS v3.2
 20748                                  
 20749                                  	; MSDOS 6.0
 20750 000044FD 07                      	pop	es
 20751 000044FE 5F                      	pop	di
 20752 000044FF 5E                      	pop	si
 20753 00004500 5A                      	pop	dx
 20754 00004501 59                      	pop	cx
 20755                                  
 20756                                  ;       DS:DI -> current buffer.
 20757                                  
 20758                                  	; MSDOS 3.3
 20759                                  	;mov	al,[es:bp]  ; mov al,[es:bp+0]
 20760                                  	;;mov	al,[ES:BP+DPB.DRIVE]
 20761                                  	
 20762                                  	; MSDOS 6.0
 20763 00004502 58                      	pop	ax ; (drive number) ; 22/07/2019
 20764                                  bufq2:
 20765                                  	; MSDOS 3.3
 20766 00004503 E8E51B                  	call	SCANPLACE
 20767                                  bufq3:
 20768                                  	; AL = drive number ; 27/07/2019
 20769                                  	; MSDOS 3.3
 20770 00004506 E8CE1B                  	call	SKIPVISIT
 20771 00004509 759A                    	jnz	short bufq
 20772                                  	
 20773                                  	; 22/07/2019
 20774                                  
 20775                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20776                                  	;push	ss
 20777 0000450B 0E                      	push	cs
 20778 0000450C 1F                      	pop	ds
 20779                                  	
 20780                                  	; MSDOS 3.3
 20781                                  	;pop	cx ; ***
 20782                                  	;pop	cx ; ****
 20783                                  	;pop	bx ; *****
 20784                                  
 20785                                  	; MSDOS 6.0
 20786 0000450D 59                      	pop	cx ; ****
 20787 0000450E 5B                              pop	bx ; *****
 20788                                  
 20789                                  ;       CX = # of sector remaining.
 20790                                  ;       BX = Next physical cluster.	
 20791                                  bufq4:
 20792 0000450F E30E                    	JCXZ	RDLAST
 20793 00004511 E80218                  	call	IsEOF			; test for eof on fat size
 20794 00004514 7326                    	JAE	short SETSFT
 20795 00004516 B200                    	MOV	DL,0
 20796 00004518 FF06[7605]              	INC	word [LASTPOS]		; We'll be using next cluster
 20797 0000451C E95BFF                  	JMP	RDLP
 20798                                  
 20799                                  RDLAST:
 20800 0000451F A1[9005]                	MOV	AX,[BYTCNT2]
 20801 00004522 09C0                    	OR	AX,AX
 20802 00004524 7416                    	JZ	short SETSFT
 20803 00004526 A3[8E05]                	MOV	[BYTCNT1],AX
 20804 00004529 E83511                  	call	NEXTSEC
 20805 0000452C 720E                    	JC	short SETSFT
 20806 0000452E C706[8805]0000          	MOV	word [BYTSECPOS],0
 20807 00004534 E89710                  	call	BUFRD
 20808                                  	; 10/08/2018
 20809 00004537 7303                    	JNC	short SETSFT
 20810 00004539 E902FF                  	JMP	SET_ACC_ERR_DS
 20811                                  
 20812                                  ;------------------------------------------------------------------------------
 20813                                  ;
 20814                                  ; Procedure Name : SETSFT
 20815                                  ; Inputs:
 20816                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 20817                                  ;		and set cluster fields
 20818                                  ; Function:
 20819                                  ;	Update [THISSFT] based on the transfer
 20820                                  ; Outputs:
 20821                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 20822                                  ;	ES:DI points to [THISSFT]
 20823                                  ;	CX No. of bytes transferred
 20824                                  ;	Carry clear
 20825                                  ;
 20826                                  ;----------------------------------------------------------------------------
 20827                                  
 20828                                  	;entry	SETSFT
 20829                                  
 20830                                  ; 26/07/2018 - Retro DOS v3.0
 20831                                  SETSFT:
 20832 0000453C C43E[5A05]              	LES	DI,[THISSFT]
 20833                                  
 20834                                  ; Same as SETSFT except ES:DI already points to SFT
 20835                                  	;entry	SETCLUS
 20836                                  SETCLUS:	
 20837 00004540 8B0E[7405]              	MOV	CX,[NEXTADD]
 20838 00004544 2B0E[F802]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 20839                                  	;test	word [es:di+5],80h
 20840                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20841                                  	; 27/07/2019 - Retro DOS v3.2
 20842 00004548 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 20843 0000454D 750E                    	JNZ	short ADDREC		; don't set clusters if device
 20844 0000454F A1[7805]                	MOV	AX,[CLUSNUM]
 20845                                  	;mov	[es:di+1Bh],ax
 20846                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 20847 00004552 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 20848 00004556 A1[7605]                	MOV	AX,[LASTPOS]
 20849                                  	;mov	[es:di+19h],ax
 20850 00004559 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 20851                                  
 20852                                  ;----------------------------------------------------------------------------
 20853                                  ;
 20854                                  ; Procedure : AddRec
 20855                                  ; Inputs:
 20856                                  ;	ES:DI points to SFT
 20857                                  ;	CX is No. Bytes transferred
 20858                                  ; Function:
 20859                                  ;	Update the SFT offset based on the transfer
 20860                                  ; Outputs:
 20861                                  ;	sf_position updated to point to first byte after transfer
 20862                                  ;	ES:DI points to SFT
 20863                                  ;	CX No. of bytes transferred
 20864                                  ;	Carry clear
 20865                                  ;----------------------------------------------------------------------------
 20866                                  
 20867                                  	;entry	AddRec
 20868                                  ADDREC:
 20869 0000455D E309                    	JCXZ	RET28		; If no records read,  don't change position
 20870                                  	;add	[es:di+15h],cx
 20871 0000455F 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 20872                                  	;adc	word [es:di+17h], 0
 20873 00004563 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 20874                                  RET28:	
 20875 00004568 F8                      	CLC
 20876 00004569 C3                      	retn
 20877                                  
 20878                                  ; 25/07/2018
 20879                                  ; MSDOS 6.0
 20880                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 20881                                  ;----------------------------------------------------------------------------
 20882                                  ;
 20883                                  ; Procedure Name : DskRdBufScan
 20884                                  ;
 20885                                  ; Inputs:
 20886                                  ;       CX = # of contiguous sectors read.  (These constitute a block of
 20887                                  ;            sectors, also termed an "Extent".)
 20888                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20889                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 20890                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20891                                  ;
 20892                                  ; Function:
 20893                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 20894                                  ;	"read" into the transfer memory block, so that the transfer memory
 20895                                  ;	reflects the most recent data.
 20896                                  ;
 20897                                  ; Outputs:
 20898                                  ;       Transfer memory updated as required.
 20899                                  ;
 20900                                  ; Uses:
 20901                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 20902                                  ;       SS override for all global variables.
 20903                                  ;
 20904                                  ; Notes:
 20905                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 20906                                  ;	than the FIRST.
 20907                                  ;----------------------------------------------------------------------------
 20908                                  ;M039: Created
 20909                                  
 20910                                  ;procedure   DskRdBufScan,NEAR
 20911                                  ;
 20912                                  ;ASSUME  DS:NOTHING
 20913                                  ;
 20914                                  ;	cmp	[DirtyBufferCount],0	;Any dirty buffers?
 20915                                  ;	je	bufx			; -no, skip all work.
 20916                                  ;
 20917                                  ;       mov     bx,[HIGH_SECTOR]
 20918                                  ;       mov     si,bx
 20919                                  ;       add     cx,dx
 20920                                  ;       adc     si,0
 20921                                  ;
 20922                                  ;	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 20923                                  ;       mov     ax,[di].buf_prev
 20924                                  ;       mov     [FIRST_BUFF_ADDR],ax
 20925                                  ;
 20926                                  ;       Assert  ISDPB,<ES,BP>,"DISKREAD/bufchk"
 20927                                  ;	mov	al,es:[bp].dpb_drive
 20928                                  ;
 20929                                  ;;            BX:DX = Extent start.
 20930                                  ;;            SI:CX = Extent end + 1.
 20931                                  ;;               AL = Drive #.
 20932                                  ;;            DS:DI-> 1st buffer in queue.
 20933                                  ;;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 20934                                  ;
 20935                                  ;bufq:	cmp     al,BYTE PTR [di.buf_ID] ;Same drive?
 20936                                  ;	jne     bufq1        		;  -no, jump.
 20937                                  ;
 20938                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20939                                  ;       ja	bufq1			;Jump if Extent start > buffer sector.
 20940                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20941                                  ;       ja	bufq2                   ;Jump if Extent end >= buffer sector.
 20942                                  ;
 20943                                  ;bufq1:	cmp     di,[FIRST_BUFF_ADDR]    ;Scanned entire buffer queue?
 20944                                  ;       mov     di,[di].buf_next        ; Set-up for next buffer.
 20945                                  ;       jne     bufq                    ; -no, do next buffer
 20946                                  ;
 20947                                  ;bufx:   return                          ;Exit.
 20948                                  ;
 20949                                  ;;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 20950                                  ;;	transfer memory; otherwise, just re-position it in the buffer queue
 20951                                  ;;       as MRU (Most Recently Used).
 20952                                  ;
 20953                                  ;bufq2:	SaveReg <ax>
 20954                                  ;	testb   [di.buf_flags],buf_dirty ;Buffer dirty?
 20955                                  ;	jz      bufq3                    ; -no, jump.
 20956                                  ;
 20957                                  ;        SaveReg <cx,dx,si,di,es>
 20958                                  ;
 20959                                  ;	mov     ax,dx
 20960                                  ;	sub	ax, word ptr [di].buf_sector
 20961                                  ;	neg	ax
 20962                                  ;
 20963                                  ;;       AX = offset (in sectors) of buffer sector within Transfer memory
 20964                                  ;;            block. (Note: the upper word of the sector # may be ignored
 20965                                  ;;	     since no more than 64k bytes will ever be read. This 64k limit
 20966                                  ;;            is imposed by the input parameters of the disk read operation.)
 20967                                  ;
 20968                                  ;	lea	si,[di].BUFINSIZ	;DS:SI -> buffer data.
 20969                                  ;	mov     cx,es:[bp].dpb_sector_size ;CX = sector size (in bytes).
 20970                                  ;	mul     cx			;AX = offset (in bytes) of buf. sector
 20971                                  ;	mov     di,WORD PTR [TEMP_VAR]
 20972                                  ;	add	di,ax
 20973                                  ;	mov	es,WORD PTR [TEMP_VAR2]
 20974                                  ;	shr	cx,1
 20975                                  ;
 20976                                  ;;	   CX = sector size (in WORDs); CF=1 if odd # of bytes.
 20977                                  ;;       DS:SI-> Buffer sector data.
 20978                                  ;;       ES:DI-> Destination within Transfer memory block.
 20979                                  ;
 20980                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 20981                                  ;	adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 20982                                  ;	rep	movsb                   ;Copy last byte.
 20983                                  ;	RestoreReg <es,di,si,dx,cx>
 20984                                  ;
 20985                                  ;       DS:DI -> current buffer.
 20986                                  ;
 20987                                  ;bufq3:	mov     ax,di			;DS:AX -> Current buffer.
 20988                                  ;       invoke  SCANPLACE
 20989                                  ;       cmp	ax,[FIRST_BUFF_ADDR]    ;Last buffer?
 20990                                  ;       RestoreReg <ax>
 20991                                  ;       jnz    	bufq                   	; -no, jump.
 20992                                  ;       jmp     short bufx              ; -yes, exit.
 20993                                  ;
 20994                                  ;EndProc DskRdBufScan
 20995                                  
 20996                                  ; 23/07/2019 - Retro DOS v3.2 
 20997                                  
 20998                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 20999                                  ;----------------------------------------------------------------------------
 21000                                  ;
 21001                                  ; Procedure Name : DISKWRITE
 21002                                  ;
 21003                                  ; Inputs:
 21004                                  ;       Outputs of SETUP
 21005                                  ; Function:
 21006                                  ;       Perform disk write
 21007                                  ; Outputs:
 21008                                  ;    Carry clear
 21009                                  ;       CX = No. of bytes written
 21010                                  ;       ES:DI point to SFT
 21011                                  ;       SFT offset and cluster pointers updated
 21012                                  ;    Carry set
 21013                                  ;       CX = 0
 21014                                  ;       ES:DI point to SFT
 21015                                  ;       AX has error code
 21016                                  ;----------------------------------------------------------------------------
 21017                                  
 21018                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 21019                                  
 21020                                  DISKWRITE:
 21021                                  	; MSDOS 3.3
 21022                                  	; IBMDOS.COM - Offset 436Dh
 21023                                  	;;test	byte [es:di+4],8
 21024                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 21025                                  	;jz	short write_cont
 21026                                  	;jmp	SET_ACC_ERR_DS
 21027                                  ;write_cont:
 21028                                  	;push	cx
 21029                                  	;or	cx, cx
 21030                                  	;jnz	short Not_Truncate
 21031                                  	;;mov	cx,-1
 21032                                  	;dec	cx
 21033                                  ;Not_Truncate:
 21034                                  	;call	LOCK_CHECK
 21035                                  	;pop	cx
 21036                                  	;jnb	short _WRITE_OK
 21037                                  	;call	WRITE_LOCK_VIOLATION
 21038                                  	;jnb	short DISKWRITE
 21039                                  	;retn
 21040                                  
 21041                                  	; MSDOS 6.0
 21042 0000456A E806FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 21043                                  	; 19/08/2018
 21044 0000456D 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 21045 0000456F C3                      	retn
 21046                                  
 21047                                  WRTEOFJ:
 21048 00004570 E92102                  	JMP     WRTEOF
 21049                                  
 21050                                  _WRITE_OK:
 21051                                   	; 27/07/2018
 21052                                  	; IBMDOS.COM - Offset 438Eh
 21053                                  	
 21054                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21055                                  	;and	word [es:di+5],0BFBFh
 21056 00004573 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 21057                                  				; Mark file as dirty, clear no date on close
 21058                                  	
 21059                                  	; 04/05/2019 - Retro DOS v4.0	
 21060                                  	; 23/07/2019 - Retro DOS v3.2
 21061                                  
 21062                                  	; MSDOS 6.0
 21063                                  	; mov 	ax,[es:di+11h]
 21064 00004579 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 21065 0000457D A3[B205]                        MOV	[TEMP_VAR],AX                           ;M039
 21066                                  	;mov	ax,[es:di+13h]
 21067 00004580 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 21068 00004584 A3[B405]                        MOV	[TEMP_VAR2],AX                          ;M039
 21069                                  
 21070                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 21071                                  
 21072                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21073 00004587 C42E[4605]              	LES     BP,[THISDPB]
 21074                                  
 21075 0000458B E816FE                  	call	BREAKDOWN
 21076                                  
 21077 0000458E A1[8A05]                	MOV     AX,[BYTPOS]
 21078 00004591 8B16[8C05]              	MOV     DX,[BYTPOS+2]
 21079 00004595 E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 21080 00004597 01C8                    	ADD     AX,CX
 21081 00004599 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 21082                                  
 21083                                  	;mov	bx,[es:bp+2]
 21084 0000459C 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 21085                                  
 21086                                  	; 23/07/2019 - Retro DOS v3.2
 21087                                  	; MSDOS 3.3
 21088                                  	;cmp	dx,bx
 21089                                  	;jnb	short WRTERR33
 21090                                  	;div	bx
 21091                                  	;mov	bx,ax
 21092                                  	;OR	DX,DX
 21093                                  	;JNZ	short CALCLUS
 21094                                  	;dec	ax
 21095                                  ;CALCLUS:
 21096                                  	; MSDOS 3.3
 21097                                  	;mov	cl,[es:bp+5]
 21098                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21099                                  	;shr	ax,cl
 21100                                  	;push	ax
 21101                                  	;push	dx
 21102                                  	;push	es
 21103                                  	;les	di,[THISSFT]
 21104                                  	;;mov	ax,[es:di+11h]
 21105                                  	;;mov	dx,[es:di+13h]
 21106                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 21107                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 21108                                  	;pop	es
 21109                                  	;;DX:AX = current file size (in bytes).
 21110                                  	;;div	word [es:bp+2]
 21111                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 21112                                  	;mov	cx,ax
 21113                                  	;or	dx,dx
 21114                                  	;jz	short NORND
 21115                                  	;inc	ax
 21116                                  ;NORND:
 21117                                  	; MSDOS 6.0
 21118 000045A0 E8A002                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 21119 000045A3 89C6                    	MOV	SI,AX
 21120 000045A5 890E[B005]                      MOV	[HIGH_SECTOR],CX
 21121                                  
 21122                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 21123                                  
 21124 000045A9 09D2                    	OR	DX,DX
 21125 000045AB 52                      	PUSH	DX ; *			;M039: Free DX for use by SHR32
 21126 000045AC 89CA                    	MOV	DX,CX			;M039
 21127 000045AE 7506                    	JNZ	short CALCLUS
 21128 000045B0 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 21129 000045B3 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 21130                                  CALCLUS:
 21131                                  	; MSDOS 6.0
 21132 000045B6 E8B102                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 21133 000045B9 5A                      	POP	DX ; *
 21134                                  
 21135                                  ;       AX = Last cluster to write.
 21136                                  ;       DX = # of bytes in last sector to write (the "tail").
 21137                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 21138                                  
 21139 000045BA 50                      	PUSH	AX ; *2
 21140 000045BB 52                      	PUSH	DX ; *1
 21141                                  ;M039
 21142 000045BC 8B16[B405]              	mov	dx,[TEMP_VAR2]
 21143 000045C0 A1[B205]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 21144 000045C3 E87D02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 21145 000045C6 890E[B405]              	mov	[TEMP_VAR2],cx
 21146 000045CA 890E[8605]              	mov	[VALSEC+2],cx
 21147 000045CE 89C1                    	mov	cx,ax
 21148 000045D0 89F3                    	mov	bx,si
 21149                                  
 21150                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 21151                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 21152                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 21153                                  ;                     DX = # of bytes in last sector of current file.
 21154                                  ;M039
 21155 000045D2 09D2                    	OR	DX,DX
 21156 000045D4 7408                    	JZ	short NORND
 21157 000045D6 83C001                  	ADD	AX,1            	;Round up if any remainder	;AC000;
 21158 000045D9 8316[8605]00            	ADC	word [VALSEC+2],0
 21159                                  NORND:	
 21160                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21161 000045DE A3[8405]                	MOV     [VALSEC],AX
 21162                                  
 21163                                  ;       [VALSEC] = Last sector of current file.
 21164                                  
 21165 000045E1 31C0                    	XOR     AX,AX
 21166 000045E3 A3[9A05]                	MOV     [GROWCNT],AX
 21167 000045E6 A3[9C05]                	MOV     [GROWCNT+2],AX
 21168 000045E9 58                      	POP     AX ; *1 ; # of bytes in last sector to write (the "tail")
 21169                                  	
 21170                                  	; 23/07/2019 - Retro DOS v3.2
 21171                                  	
 21172                                  	; MSDOS 6.0
 21173 000045EA 8B3E[B005]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 21174 000045EE 3B3E[B405]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 21175 000045F2 7264                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 21176 000045F4 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 21177 000045F6 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 21178 000045F8 1B3E[B405]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 21179 000045FC EB09                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 21180                                  lowsec:
 21181 000045FE BF0000                  	MOV	DI,0			;F.C. >32mb
 21182                                  	; MSDOS 3.3 & MSDOS 6.0
 21183 00004601 29CB                    	SUB	BX,CX			; Number of full sectors
 21184 00004603 7253                    	JB	short NOGROW
 21185 00004605 7444                    	JZ	short TESTTAIL
 21186                                  yesgrow:
 21187                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21188 00004607 89D1                    	MOV     CX,DX
 21189 00004609 93                      	XCHG    AX,BX
 21190                                  	;mul	word [es:bp+2]
 21191 0000460A 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 21192                                  	
 21193                                  	; MSDOS 6.0
 21194 0000460E 8916[B005]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 21195 00004612 A3[B405]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 21196 00004615 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 21197                                  	;mul	word [es:bp+2]
 21198 00004617 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 21199                                  	
 21200 0000461B 0306[B005]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 21201 0000461F 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 21202 00004621 A1[B405]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 21203                                  
 21204                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21205 00004624 29C8                    	SUB     AX,CX			; Take off current "tail"
 21206 00004626 83DA00                  	SBB     DX,0			; 32-bit extension
 21207 00004629 01D8                    	ADD     AX,BX			; Add on new "tail"
 21208 0000462B 83D200                  	ADC     DX,0			; ripple tim's head off
 21209 0000462E EB21                    	JMP     SHORT SETGRW
 21210                                  
 21211                                  HAVSTART:
 21212                                  	;int	3
 21213 00004630 89C1                    	MOV     CX,AX
 21214 00004632 E8430F                  	call	SKPCLP
 21215                                  	;JCXZ	DOWRTJ
 21216 00004635 E357                    	jcxz	DOWRT
 21217                                  
 21218 00004637 E8E410                  	call	ALLOCATE
 21219                                  	;JNC	short DOWRTJ
 21220 0000463A 7352                    	jnc	short DOWRT
 21221                                  
 21222                                  	;entry   WRTERR
 21223                                  WRTERR:
 21224 0000463C B40F                    	MOV     AH,0FH                          ;MS. write/data/fail/abort      ;AN000;
 21225                                  
 21226                                  	;entry WRTERR22
 21227                                  WRTERR22:
 21228 0000463E A0[3305]                	MOV     AL,[THISDRV]                    ;MS.                            ;AN000;
 21229                                  
 21230                                  	; 27/07/2018
 21231                                  WRTERR33:
 21232                                  	;MOV	CX,0                    	;No bytes transferred
 21233 00004641 31C9                    	XOR     CX,CX
 21234                                  					
 21235 00004643 C43E[5A05]              	LES     DI,[THISSFT]
 21236                                  	;CLC	; 19/05/2019
 21237 00004647 C3                      	retn
 21238                                  
 21239                                  ;DOWRTJ: 
 21240                                  ;	JMP     short DOWRT
 21241                                  
 21242                                  ACC_ERRWJ:
 21243                                  	; 10/08/2018
 21244                                  	;JMP	SET_ACC_ERRW
 21245 00004648 E9F3FD                  	jmp	SET_ACC_ERR_DS
 21246                                  
 21247                                  TESTTAIL:
 21248 0000464B 29D0                    	SUB     AX,DX
 21249 0000464D 7609                    	JBE	short NOGROW
 21250 0000464F 31D2                    	XOR     DX,DX
 21251                                  SETGRW:
 21252 00004651 A3[9A05]                	MOV	[GROWCNT],AX
 21253 00004654 8916[9C05]              	MOV	[GROWCNT+2],DX
 21254                                  NOGROW:
 21255 00004658 58                      	POP     AX	; *2 ; Last cluster to write
 21256 00004659 8B0E[7805]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 21257 0000465D E8F80E                  	call	FNDCLUS
 21258 00004660 72E6                    	JC	short ACC_ERRWJ
 21259 00004662 891E[7805]              	MOV     [CLUSNUM],BX
 21260 00004666 8916[7605]              	MOV     [LASTPOS],DX
 21261                                  
 21262 0000466A 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 21263 0000466C 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 21264 0000466E E3C0                    	JCXZ    HAVSTART        ; See if no more data
 21265 00004670 51                      	PUSH    CX              ; No. of clusters short of first
 21266 00004671 89C1                    	MOV     CX,AX
 21267 00004673 E8A810                  	call	ALLOCATE
 21268 00004676 59                      	POP     CX
 21269 00004677 72C3                    	JC	short WRTERR
 21270 00004679 8B16[7605]              	MOV     DX,[LASTPOS]
 21271 0000467D 42                      	INC     DX
 21272 0000467E 49                      	DEC     CX
 21273 0000467F 7405                    	JZ	short NOSKIP
 21274 00004681 E8F40E                  	call	SKPCLP
 21275 00004684 72C2                    	JC	short ACC_ERRWJ
 21276                                  NOSKIP:
 21277 00004686 891E[7805]              	MOV     [CLUSNUM],BX
 21278 0000468A 8916[7605]              	MOV     [LASTPOS],DX
 21279                                  DOWRT:
 21280 0000468E 833E[8E05]00            	CMP     word [BYTCNT1],0
 21281 00004693 7409                    	JZ	short WRTMID
 21282 00004695 8B1E[7805]              	MOV     BX,[CLUSNUM]
 21283 00004699 E8690F                  	call	BUFWRT
 21284 0000469C 72AA                    	JC	short ACC_ERRWJ
 21285                                  	;JC	short SET_ACC_ERRW
 21286                                  WRTMID:
 21287 0000469E A1[9205]                	MOV     AX,[SECCNT]
 21288 000046A1 09C0                    	OR      AX,AX
 21289 000046A3 0F84B000                	JZ	WRTLAST ; 24/07/2019	;M039
 21290 000046A7 0106[8005]              	ADD     [SECPOS],AX
 21291                                  	; 23/07/2019 - Retro DOS v3.2
 21292                                  	; MSDOS 6.0
 21293 000046AB 8316[8205]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 21294 000046B0 E8AE0F                  	call	NEXTSEC
 21295 000046B3 7293                    	JC	short ACC_ERRWJ
 21296                                  	;JC	short SET_ACC_ERRW	;M039
 21297 000046B5 C606[3105]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 21298 000046BA 8A16[3005]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 21299 000046BE 8B1E[7805]              	MOV     BX,[CLUSNUM]
 21300 000046C2 8B0E[9205]              	MOV     CX,[SECCNT]
 21301                                  WRTLP:
 21302 000046C6 E8C90F                  	call	OPTIMIZE
 21303 000046C9 727D                    	JC	short SET_ACC_ERRW ; 24/07/2019
 21304                                  
 21305                                  ;M039
 21306                                  ;       DI = Next physical cluster.
 21307                                  ;       AX = # sectors remaining.
 21308                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 21309                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 21310                                  ;	     sectors, also termed an "Extent".)
 21311                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 21312                                  ;       ES:BP -> Drive Parameter Block (DPB).
 21313                                  ;
 21314                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 21315                                  ;	are in Extent; they are being over-written.
 21316                                  
 21317 000046CB 57                      	push    di ; *5*
 21318 000046CC 50                      	push    ax ; *4*
 21319                                  
 21320                                          ; MSDOS 6.0
 21321                                  	;call	DskWrtBufPurge          ;DS trashed.
 21322                                  ;ASSUME DS:NOTHING
 21323                                  ;M039
 21324                                  	; MSDOS 3.3
 21325                                  	; IBMDOS.COM (1987) - Offset 4497h
 21326 000046CD 52                      	push	dx ; *3*
 21327 000046CE 53                      	push	bx ; *2*
 21328                                  
 21329                                  	;mov	al,[es:bp]
 21330                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 21331                                  	
 21332                                  	;mov	bx,cx
 21333                                  	;add	bx,dx	; (bx = Extent end)
 21334                                  
 21335                                  	; MSDOS 3.3	
 21336                                  ;;	DX = Extent start.
 21337                                  ;;	BX = Extent end.
 21338                                  ;;	AL = Drive #.
 21339                                  
 21340                                  	; 23/07/2019 - Retro DOS v3.2
 21341                                  	; (MSDOS 6.0, 'DskWrtBufPurge')
 21342                                  
 21343                                  	;push	bx
 21344 000046CF 51                      	push	cx ; *1*
 21345                                  
 21346 000046D0 368B1E[B005]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 21347 000046D5 89DE                    	mov	si,bx
 21348 000046D7 01D1                    	add	cx,dx
 21349 000046D9 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 21350                                  
 21351                                  	;;mov	al,[es:bp+0]
 21352                                  	;mov	al,[es:bp+DPB.DRIVE]
 21353 000046DC 268A4600                	mov	al,[es:bp]
 21354                                  
 21355                                  	; MSDOS 6.0
 21356                                  ;	BX:DX = Extent start.
 21357                                  ;	SI:CX = Extent end + 1.
 21358                                  ;	AL = Drive #
 21359                                  
 21360                                  	; MSDOS 3.3
 21361 000046E0 E8DB19                  	call	SETVISIT
 21362                                  		; DS:DI = [BUFFHEAD]
 21363                                  wbufq1:
 21364                                  	;or	byte [di+5],20h
 21365 000046E3 804D0520                	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 21366                                  
 21367                                  	; 23/07/2019 - Retro DOS v3.2
 21368                                  
 21369                                  	;cmp	al,[di+4]	
 21370 000046E7 3A4504                  	cmp	al,[DI+BUFFINFO.buf_ID]
 21371 000046EA 751C                    	jne	short wbufq2		;Same drive?
 21372                                  					;  -no, jump.
 21373                                  	; MSDOS 3.3
 21374                                  	;;cmp	[di+6],dx
 21375                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 21376                                  	;jb	short wbufq2	; Jump if Extent start > buffer sector.	
 21377                                  	;;cmp	[di+6],bx
 21378                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 21379                                  	;jnb	short wbufq2	; Jump if Extent end <= buffer sector.
 21380                                  
 21381                                  	; MSDOS 6.0 (code modified in Retro DOS v3.2) ; 23/07/2019
 21382                                   	;cmp	bx,[di+8]
 21383 000046EC 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 21384 000046EF 7503                    	jne	short bufq04
 21385                                  	;cmp	dx,[di+6]
 21386 000046F1 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 21387                                  bufq04:
 21388 000046F4 7712                    	ja	short wbufq2 	; Jump if Extent start > buffer sector.
 21389                                  
 21390                                  	;cmp	si,[di+8]
 21391 000046F6 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 21392 000046F9 7503                    	jne	short bufq05
 21393                                  	;cmp	cx,[di+6]
 21394 000046FB 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 21395                                  bufq05:
 21396 000046FE 7608                    	jna	short wbufq2	; Jump if Extent end <= buffer sector.
 21397                                  
 21398                                  	; 23/07/2019
 21399                                  
 21400                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21401                                  
 21402                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 21403                                  
 21404                                  	;mov	word [di+4],20FFh
 21405                                  	;mov	word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 21406 00004700 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],20FFh
 21407                                  					; .buf_ID,    AL = FFh (Free buffer)
 21408                                  					; .buf_flags, AH = 0, reset/clear
 21409 00004705 E8E319                  	call	SCANPLACE
 21410                                  wbufq2:
 21411                                  	; AL = Drive #
 21412                                  	; MSDOS 3.3
 21413 00004708 E8CC19                  	call	SKIPVISIT
 21414 0000470B 75D6                    	jnz	short wbufq1  ; AL = Drive # ; 23/07/2019
 21415                                  
 21416                                  	; 23/07/2019 - Retro DOS v3.2
 21417                                  
 21418                                  	; MSDOS 6.0
 21419 0000470D 59                      	pop	cx ; *1* ; # of contiguous sectors to write
 21420                                  	;pop	bx 
 21421                                  
 21422                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21423 0000470E 5B                      	pop	bx ; *2* ; [DMAADD+2]:BX = Transfer address (source data address)
 21424 0000470F 5A                      	pop	dx ; *3* ; [HIGH_SECTOR]:DX = Extent start		
 21425                                  	
 21426                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21427                                  ;hkn; SS override for DMAADD and ALLOWED
 21428 00004710 368E1E[FA02]            	MOV     DS,[SS:DMAADD+2]
 21429                                  	;mov	byte [ss:ALLOWED],38h
 21430 00004715 36C606[1503]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 21431                                  
 21432                                  ;	put logic from DWRITE in-line here so we can modify it
 21433                                  ;	for DISK FULL conditions.
 21434                                  
 21435                                  	; MSDOS 3.3
 21436                                  	;call	DWRITE
 21437                                  
 21438                                  ;DWRITE_OKAY:
 21439                                  
 21440                                  DWRITE_LUP:
 21441                                  	; 23/07/2019 - Retro DOS v3.2
 21442                                  
 21443                                  	; MSDOS 6.0
 21444 0000471B E8B3FB                  	call	DSKWRITE
 21445 0000471E 7417                    	jz	short DWRITE_OKAY
 21446                                  
 21447                                  ;;	int	3
 21448 00004720 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 21449 00004722 7427                    	jz	short DWRITE_DISK_FULL
 21450                                  
 21451                                  ;;hkn; SS override
 21452 00004724 36C606[3205]01          	MOV	BYTE [SS:READOP],1
 21453 0000472A E8D3FB                  	call	HARDERRRW
 21454 0000472D 3C01                    	CMP	AL,1		; Check for retry
 21455 0000472F 74EA                    	JZ	short DWRITE_LUP
 21456                                  
 21457                                  	; 29/07/2019 - Retro DOS v3.2
 21458                                  
 21459 00004731 3C03                    	CMP	AL,3		; Check for FAIL
 21460 00004733 F8                      	CLC
 21461 00004734 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 21462 00004736 F9                      	STC
 21463                                  DWRITE_OKAY:
 21464                                  	; 29/07/2019
 21465                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21466 00004737 59                      	POP     CX ; *4*
 21467 00004738 5B                      	POP	BX ; *5*
 21468                                  
 21469                                  ;       CX = # sectors remaining.
 21470                                  ;       BX = Next physical cluster.
 21471                                  
 21472                                  ;hkn; SS override
 21473                                          ;Context DS
 21474                                  	;push	ss
 21475                                  	;pop	ds
 21476 00004739 720D                    	JC	short SET_ACC_ERRW
 21477                                  	; 16/12/2022
 21478 0000473B 16                      	push	ss
 21479 0000473C 1F                      	pop	ds
 21480 0000473D E318                    	JCXZ    WRTLAST
 21481                                  	;MOV	DL,0
 21482 0000473F 30D2                    	xor	dl,dl ; 23/07/2019
 21483 00004741 FF06[7605]              	INC     word [LASTPOS]	; We'll be using next cluster
 21484 00004745 E97EFF                  	JMP	WRTLP
 21485                                  
 21486                                  	; 29/07/2019
 21487                                  SET_ACC_ERRW:
 21488 00004748 E9F3FC                  	jmp	SET_ACC_ERR_DS
 21489                                  
 21490                                  	; 23/07/2019 - Retro DOS v3.2
 21491                                  	; 09/08/2018
 21492                                  	; MSDOS 6.0
 21493                                  DWRITE_DISK_FULL:
 21494                                  	;;Context DS		;SQ 3-5-93 DS must be setup on return!
 21495                                  	; 16/12/2022 (BugFix)
 21496 0000474B 16                      	push	ss
 21497 0000474C 1F                      	pop	ds
 21498 0000474D 59                      	pop	cx		; unjunk stack
 21499 0000474E 5B                      	pop	bx
 21500 0000474F C606[C20F]01            	mov	byte [DISK_FULL],1
 21501                                  	;stc
 21502 00004754 E9E5FE                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 21503                                  
 21504                                  ;SET_ACC_ERRW:
 21505                                  ;	jmp	SET_ACC_ERR_DS
 21506                                  
 21507                                  WRTLAST:
 21508 00004757 A1[9005]                	MOV     AX,[BYTCNT2]
 21509 0000475A 09C0                    	OR      AX,AX
 21510 0000475C 7413                    	JZ	short FINWRT
 21511 0000475E A3[8E05]                	MOV     [BYTCNT1],AX
 21512 00004761 E8FD0E                  	call	NEXTSEC
 21513 00004764 72E2                    	JC	short SET_ACC_ERRW
 21514 00004766 C706[8805]0000          	MOV     word [BYTSECPOS],0
 21515 0000476C E8960E                  	call	BUFWRT
 21516 0000476F 72D7                    	JC	short SET_ACC_ERRW
 21517                                  FINWRT:
 21518 00004771 C43E[5A05]              	LES     DI,[THISSFT]
 21519 00004775 A1[9A05]                	MOV     AX,[GROWCNT]
 21520 00004778 8B0E[9C05]              	MOV     CX,[GROWCNT+2]
 21521 0000477C 09C0                    	OR      AX,AX
 21522 0000477E 7502                    	JNZ	short UPDATE_size
 21523 00004780 E30F                    	JCXZ    SAMSIZ
 21524                                  UPDATE_size:
 21525                                  	;add	[es:di+11h],ax
 21526 00004782 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 21527                                  	;adc	[es:di+13h],cx
 21528 00004786 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 21529                                  ;
 21530                                  ; Make sure that all other SFT's see this growth also.
 21531                                  ;
 21532 0000478A B80100                  	MOV     AX,1
 21533                                  ;if installed
 21534                                  	;Call	JShare + 14 * 4
 21535 0000478D FF1E[9400]              	call    far [JShare+(14*4)]	; 14 = ShSU
 21536                                  ;else
 21537                                  ;	Call    ShSU
 21538                                  ;endif
 21539                                  
 21540                                  SAMSIZ:
 21541 00004791 E9ACFD                  	jmp	SETCLUS	; ES:DI already points to SFT
 21542                                  
 21543                                  WRTEOF:
 21544 00004794 89C1                    	MOV     CX,AX
 21545 00004796 09D1                    	OR      CX,DX
 21546 00004798 746C                    	JZ	short KILLFIL
 21547 0000479A 83E801                  	SUB     AX,1
 21548 0000479D 83DA00                  	SBB     DX,0
 21549                                  
 21550                                  	; 23/07/2019 - Retro DOS v3.2
 21551                                  
 21552                                  	; MSDOS 3.3
 21553                                  	;;div	word [es:bp+2]
 21554                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 21555                                  	;;mov	cl,[es:bp+5]
 21556                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 21557                                  	;shr	ax,cl
 21558                                  
 21559                                  	; MSDOS 6.0
 21560 000047A0 53                      	PUSH	BX
 21561                                  	;mov	bx,[es:bp+2]
 21562 000047A1 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 21563 000047A5 E89B00                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 21564 000047A8 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 21565 000047A9 89CA                    	MOV	DX,CX			      ;M039
 21566 000047AB 890E[B005]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 21567 000047AF E8B800                  	CALL	SHR32                         ;F.C. >32mb   
 21568                                  
 21569 000047B2 89C1                    	MOV     CX,AX
 21570 000047B4 E8A10D                  	call	FNDCLUS
 21571                                  SET_ACC_ERRWJ2:
 21572 000047B7 728F                    	JC	short SET_ACC_ERRW
 21573                                  
 21574 000047B9 E326                    	JCXZ    RELFILE
 21575 000047BB E8600F                  	call	ALLOCATE
 21576 000047BE 721E                    	JC	short WRTERRJ              ;;;;;;;;; disk full
 21577                                  
 21578                                  UPDATE:
 21579 000047C0 C43E[5A05]              	LES	DI,[THISSFT]
 21580 000047C4 A1[8A05]                	MOV	AX,[BYTPOS]
 21581                                  	;mov	[es:di+11h],ax
 21582 000047C7 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 21583 000047CB A1[8C05]                	MOV	AX,[BYTPOS+2]
 21584                                  	;mov	[es:di+13h],ax
 21585 000047CE 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 21586                                  ;
 21587                                  ; Make sure that all other SFT's see this growth also.
 21588                                  ;
 21589 000047D2 B80200                  	MOV     AX,2
 21590                                  ;if installed
 21591                                  	;Call	JShare + 14 * 4
 21592 000047D5 FF1E[9400]              	call    far [JShare+(14*4)]	; 14 = ShSU
 21593                                  ;else
 21594                                  ;	Call    ShSU
 21595                                  ;endif
 21596 000047D9 31C9                    	XOR     CX,CX
 21597 000047DB E97FFD                  	jmp	ADDREC
 21598                                  
 21599                                  WRTERRJ: 
 21600 000047DE E95BFE                  	JMP     WRTERR
 21601                                  
 21602                                  ;;;;;;;;;;;;;;;; 7/18/86
 21603                                  ;;;;;;;;;;;;;;;;
 21604                                  
 21605                                  RELFILE:
 21606                                  	; MSDOS 6.0
 21607 000047E1 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 21608 000047E2 C43E[5A05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 21609 000047E6 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 21610 000047EA 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 21611 000047EC 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 21612 000047F2 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 21613 000047F6 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 21614                                  SKIPRESET:                            		;AN002; BL
 21615 000047FA 07                      	POP     ES                    		;AN002; BL
 21616                                  ;
 21617 000047FB BAFFFF                  	MOV     DX,0FFFFH
 21618 000047FE E8CB0F                  	call	RELBLKS
 21619 00004801 73BD                    	jnc	short UPDATE
 21620                                  SET_ACC_ERRWJJ:
 21621                                  	;JC	short SET_ACC_ERRWJ2
 21622                                  	;JMP	SHORT UPDATE
 21623 00004803 E938FC                  	jmp	SET_ACC_ERR_DS
 21624                                  
 21625                                  KILLFIL:
 21626 00004806 31DB                    	XOR     BX,BX
 21627 00004808 06                      	PUSH    ES
 21628 00004809 C43E[5A05]              	LES     DI,[THISSFT]
 21629 0000480D 26895D19                	mov	[es:di+19h],bx
 21630 00004811 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 21631                                  	;mov	[es:di+1Bh],bx
 21632                                  	;mov	[ers:di+35h],bx ; MSDOS 6.0
 21633 00004815 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 21634                                  	;xchg	bx,[es:di+0Bh]
 21635 00004819 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 21636 0000481D 07                      	POP	ES
 21637                                  
 21638 0000481E 09DB                    	OR	BX,BX
 21639                                  	;JZ	short UPDATEJ
 21640 00004820 749E                    	jz	short UPDATE
 21641                                  
 21642                                  ;; 10/23/86 FastOpen update
 21643 00004822 06                      	PUSH	ES              ; since first cluster # is 0
 21644 00004823 55                      	PUSH	BP              ; we must delete the old cache entry
 21645 00004824 50                      	PUSH	AX
 21646 00004825 51                      	PUSH	CX
 21647 00004826 52                      	PUSH	DX
 21648 00004827 C42E[4605]              	LES	BP,[THISDPB]             ; get current DPB
 21649 0000482B 268A5600                	mov	dl,[ES:BP] ; mov al,[es:bp+0]
 21650                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 21651 0000482F 89D9                    	MOV	CX,BX                    ; first cluster #
 21652 00004831 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 21653 00004833 E84AEC                  	call	FastOpen_Update          ; call fastopen
 21654 00004836 5A                      	POP	DX
 21655 00004837 59                      	POP	CX
 21656 00004838 58                      	POP	AX
 21657 00004839 5D                      	POP	BP
 21658 0000483A 07                      	POP	ES
 21659                                  ;; 10/23/86 FastOpen update
 21660                                  
 21661 0000483B E88C0F                  	call	RELEASE
 21662 0000483E 72C3                    	JC	short SET_ACC_ERRWJJ
 21663                                  UpDateJ:
 21664 00004840 E97DFF                  	JMP	UPDATE ; 10/08/2018
 21665                                  
 21666                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 21667                                  ;----------------------------------------------------------------------------
 21668                                  ;
 21669                                  ; Procedure Name : DskWrtBufPurge
 21670                                  ;
 21671                                  ; Inputs:
 21672                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 21673                                  ;	     sectors, also termed an "Extent".)
 21674                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 21675                                  ;       ES:BP -> Drive Parameter Block (DPB).
 21676                                  ;
 21677                                  ; Function:
 21678                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 21679                                  ;	are in Extent; they are being over-written.
 21680                                  ;
 21681                                  ; Outputs:
 21682                                  ;       (Same as Input.)
 21683                                  ; Uses:
 21684                                  ;       All registers except DS,AX,SI,DI preserved.
 21685                                  ;       SS override for all global variables.
 21686                                  ;----------------------------------------------------------------------------
 21687                                  ;M039: Created
 21688                                  
 21689                                  ;procedure   DskWrtBufPurge,NEAR
 21690                                  ;
 21691                                  ;ASSUME  DS:NOTHING
 21692                                  ;
 21693                                  ;       SaveReg <bx,cx>
 21694                                  ;       mov	bx,[HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 21695                                  ;       mov     si,bx
 21696                                  ;       add     cx,dx
 21697                                  ;       adc     si,0                    ;SI:CX = Extent end + 1.
 21698                                  ;
 21699                                  ;	Assert  ISDPB,<ES,BP>,"DskWrtBufPurge"
 21700                                  ;	mov     al,es:[bp.dpb_drive]
 21701                                  ;
 21702                                  ;;      BX:DX = Extent start.
 21703                                  ;;      SI:CX = Extent end + 1.
 21704                                  ;;      AL = Drive #
 21705                                  ;
 21706                                  ;	cmp     [SC_CACHE_COUNT],0      ;Secondary cache in-use?
 21707                                  ;	je      nosc                    ; -no, jump.
 21708                                  ;
 21709                                  ;;      If any of the sectors to be written are in the secondary cache (SC),
 21710                                  ;;      invalidate the entire SC. (This is an optimization; we really only
 21711                                  ;;	need to invalidate those sectors which intersect, but that's slower.)
 21712                                  ;
 21713                                  ;       cmp     al,[CURSC_DRIVE]        ;Same drive?
 21714                                  ;       jne     nosc                    ; -no, jump.
 21715                                  ;
 21716                                  ;       push    ax
 21717                                  ;       mov     ax,[CURSC_SECTOR]
 21718                                  ;       mov     di,[CURSC_SECTOR+2]     ;DI:AX = SC start.
 21719                                  ;       Cmp32   si,cx,di,ax             ;Extent end < SC start?
 21720                                  ;       jbe     sc5                     ; -yes, jump.
 21721                                  ;       add     ax,[SC_CACHE_COUNT]
 21722                                  ;       adc     di,0                    ;DI:AX = SC end + 1.
 21723                                  ;       Cmp32   bx,dx,di,ax             ;Extent start > SC end?
 21724                                  ;       jae     sc5                     ; -yes, jump.
 21725                                  ;       mov     [SC_STATUS],0           ;Extent intersects SC: invalidate SC.
 21726                                  ;sc5:	pop     ax
 21727                                  ;
 21728                                  ;;	Free any buffered sectors which are in Extent; they are being over-
 21729                                  ;;	written.
 21730                                  ;
 21731                                  ;nosc:	invoke  GETCURHEAD              ;DS:DI -> first buffer in queue.
 21732                                  ;
 21733                                  ;bufq:	cmp     al,BYTE PTR [di.buf_ID] ;Same drive?
 21734                                  ;	jne     bufq5                   ; -no, jump.
 21735                                  ;
 21736                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 21737                                  ;       ja	bufq5			;Jump if Extent start > buffer sector.
 21738                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 21739                                  ;       jbe	bufq5                   ;Jump if Extent end < buffer sector.
 21740                                  ;
 21741                                  ;;      Buffer's sector is in Extent, so free it; it is being over-written.
 21742                                  ;
 21743                                  ;       testb   [di.buf_flags],buf_dirty ;Buffer dirty?
 21744                                  ;       jz      bufq2                    ; -no, jump.
 21745                                  ;       invoke  DEC_DIRTY_COUNT          ; -yes, decrement dirty count.
 21746                                  ;bufq2: mov     WORD PTR [di.buf_ID],((buf_visit SHL 8) OR 0FFh)
 21747                                  ;
 21748                                  ;       invoke  SCANPLACE
 21749                                  ;       jmp     short bufq6
 21750                                  ;
 21751                                  ;bufq5: mov     di,[di.buf_next]
 21752                                  ;bufq6: cmp     di,[FIRST_BUFF_ADDR]    ;Scanned entire buffer queue?
 21753                                  ;       jne     bufq	                ; --no, go do next buffer.
 21754                                  ;
 21755                                  ;       RestoreReg <cx,bx>
 21756                                  ;       return
 21757                                  ;
 21758                                  ;EndProc DskWrtBufPurge
 21759                                  
 21760                                  ; 23/07/2019 - Retro DOS v3.2
 21761                                  
 21762                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 21763                                  ;----------------------------------------------------------------------------
 21764                                  ;
 21765                                  ; Procedure Name : DIV32
 21766                                  ;
 21767                                  ; Inputs:
 21768                                  ;       DX:AX = 32 bit dividend   BX= divisor
 21769                                  ; Function:
 21770                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 21771                                  ; Outputs:
 21772                                  ;       CX:AX = quotient , DX= remainder
 21773                                  ; Uses:
 21774                                  ;       All registers except AX,CX,DX preserved.
 21775                                  ;----------------------------------------------------------------------------
 21776                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 21777                                  
 21778                                  ; 04/05/2019 - Retro DOS v4.0
 21779                                  
 21780                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 21781                                  
 21782                                  DIV32:
 21783 00004843 81FB0002                	cmp	bx,512
 21784 00004847 7515                    	jne	short div5
 21785                                  
 21786 00004849 89D1                    	mov	cx,dx
 21787 0000484B 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 21788 0000484D 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 21789 00004851 88E0                    	mov	al,ah
 21790 00004853 88CC                    	mov	ah,cl
 21791 00004855 88E9                    	mov	cl,ch
 21792 00004857 30ED                    	xor	ch,ch
 21793 00004859 D1E9                    	shr	cx,1
 21794 0000485B D1D8                    	rcr	ax,1
 21795 0000485D C3                      	retn
 21796                                  div5:	
 21797 0000485E 89C1                    	mov	cx,ax
 21798 00004860 89D0                    	mov	ax,dx
 21799 00004862 31D2                    	xor	dx,dx
 21800 00004864 F7F3                    	div	bx              ; 0:AX/BX
 21801 00004866 91                      	xchg	cx,ax
 21802 00004867 F7F3                    	div	bx              ; DX:AX/BX
 21803 00004869 C3                      	retn
 21804                                  
 21805                                  ; 23/07/2019 - Retro DOS v3.2
 21806                                  
 21807                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 21808                                  ;----------------------------------------------------------------------------
 21809                                  ;
 21810                                  ; Procedure Name : SHR32
 21811                                  ;
 21812                                  ; Inputs:
 21813                                  ;	DX:AX = 32 bit sector number
 21814                                  ; Function:
 21815                                  ;       Perform 32 bit shift right
 21816                                  ; Outputs:
 21817                                  ;	AX = cluster number
 21818                                  ;	ZF = 1 if no error
 21819                                  ;	   = 0 if error (cluster number > 64k)
 21820                                  ; Uses:
 21821                                  ;       DX,CX
 21822                                  ;---------------------------------------------------------------------------
 21823                                  ; M017	- SHR32 rewritten for better performance
 21824                                  ; M039	- Additional optimization
 21825                                  
 21826                                  ; 04/05/2019 - Retro DOS v4.0
 21827                                  
 21828                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 21829                                  
 21830                                  SHR32:
 21831                                  	;mov	cl,[es:bp+5]
 21832 0000486A 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 21833 0000486E 30ED                    	xor	ch,ch	    ;ZF=1
 21834 00004870 E306                    	jcxz	norota
 21835                                  
 21836                                  rotashft2:
 21837 00004872 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 21838 00004874 D1D8                    	rcr	ax,1	    ;ZF not affected.
 21839 00004876 E2FA                    	loop	rotashft2
 21840                                  norota:
 21841 00004878 C3                      	retn
 21842                                  
 21843                                  ;============================================================================
 21844                                  ; DIR.ASM, MSDOS 6.0, 1991
 21845                                  ;============================================================================
 21846                                  ; 27/07/2018 - Retro DOS v3.0 
 21847                                  
 21848                                  ;	TITLE	DIR - Directory and path cracking
 21849                                  ;	NAME	Dir
 21850                                  
 21851                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 21852                                  ;---------------------------------------------------------------------------
 21853                                  ;
 21854                                  ; Procedure Name : FINDENTRY,SEARCH
 21855                                  ;
 21856                                  ; Inputs:
 21857                                  ;	[THISDPB] set
 21858                                  ;	[SECCLUSPOS] = 0
 21859                                  ;	[DIRSEC] = Starting directory sector number
 21860                                  ;	[CLUSNUM] = Next cluster of directory
 21861                                  ;	[CLUSFAC] = Sectors/Cluster
 21862                                  ;	[NAME1] = Name to look for
 21863                                  ; Function:
 21864                                  ;	Find file name in disk directory.
 21865                                  ;	"?" matches any character.
 21866                                  ; Outputs:
 21867                                  ;	Carry set if name not found
 21868                                  ;	ELSE
 21869                                  ;	Zero set if attributes match (always except when creating)
 21870                                  ;	AH = Device ID (bit 7 set if not disk)
 21871                                  ;	[THISDPB] = Base of drive parameters
 21872                                  ;	DS = DOSGROUP
 21873                                  ;	ES = DOSGROUP
 21874                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 21875                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 21876                                  ;	[CURBUF] has directory record with match
 21877                                  ;	[NAME1] has file name
 21878                                  ;	[LASTENT] is entry number of the entry
 21879                                  ; All other registers destroyed.
 21880                                  ;----------------------------------------------------------------------------
 21881                                  
 21882                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 21883                                  ;hkn; this point.
 21884                                  
 21885                                  SEARCH:
 21886                                  	; 27/07/2018 - Retro DOS v3.0
 21887                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 21888                                  	; 15/03/2018 - Retro DOS v2.0
 21889                                  
 21890                                  	;entry	FindEntry
 21891                                  FINDENTRY:
 21892 00004879 E83804                  	call	STARTSRCH
 21893 0000487C A0[2805]                	MOV	AL,[ATTRIB]
 21894                                  	;and	al,9Eh
 21895 0000487F 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 21896                                  	;cmp	al,8
 21897 00004881 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 21898 00004883 7503                    	JNZ	short NOTVOLSRCH	; No
 21899 00004885 E87601                  	CALL	SETROOTSRCH		; Yes force search of root
 21900                                  NOTVOLSRCH:
 21901 00004888 E80601                  	CALL	GETENTRY
 21902 0000488B 7303                    	JNC	short SRCH
 21903 0000488D E99500                  	JMP	SETESRET
 21904                                  
 21905                                  	;entry	Srch
 21906                                  SRCH:
 21907 00004890 1E                      	PUSH	DS
 21908 00004891 8E1E[A005]              	MOV	DS,[CURBUF+2]
 21909                                  
 21910                                  ;	(DS:BX) = directory entry address
 21911                                  
 21912 00004895 8A27                    	mov	ah,[BX]
 21913                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 21914 00004897 08E4                    	OR	AH,AH			; End of directory?
 21915 00004899 743A                    	JZ	short FREE
 21916                                  
 21917                                  ;hkn; SS override
 21918 0000489B 363A26[3B05]            	CMP	AH,[SS:DELALL]		; Free entry?
 21919 000048A0 7433                    	JZ	short FREE
 21920                                  	;test	byte [bx+0Bh],8
 21921 000048A2 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 21922                                  					; Volume ID file?
 21923 000048A6 7405                    	JZ	short CHKFNAM 		; NO
 21924                                  
 21925                                  ;hkn; SS override
 21926 000048A8 36FE06[3805]            	INC	BYTE [SS:VOLID]
 21927                                  CHKFNAM:
 21928                                  ;	Context ES
 21929 000048AD 8CD6                    	MOV	SI,SS
 21930 000048AF 8EC6                    	MOV	ES,SI
 21931 000048B1 89DE                    	MOV	SI,BX
 21932                                  
 21933                                  ;hkn; NAME1 is in DOSDATA
 21934 000048B3 BF[0805]                	MOV	DI,NAME1
 21935                                  ;;;;; 7/29/86
 21936                                  
 21937                                  ;hkn; SS override for NAME1
 21938 000048B6 36803E[0805]E5          	CMP	BYTE [SS:NAME1],0E5H	; special char check
 21939 000048BC 7506                    	JNZ	short NO_E5
 21940 000048BE 36C606[0805]05          	MOV	BYTE [SS:NAME1],05H
 21941                                  NO_E5:
 21942                                  ;;;;; 7/29/86
 21943 000048C4 E86100                  	CALL	MetaCompare
 21944 000048C7 7428                    	JZ	short FOUND
 21945 000048C9 1F                      	POP	DS
 21946                                  
 21947                                  	;entry	NEXTENT
 21948                                  NEXTENT:
 21949 000048CA C42E[4605]              	LES	BP,[THISDPB]
 21950 000048CE E86600                  	CALL	NEXTENTRY
 21951 000048D1 73BD                    	JNC	short SRCH
 21952 000048D3 EB50                    	JMP	SHORT SETESRET
 21953                                  
 21954                                  FREE:
 21955 000048D5 1F                      	POP	DS
 21956 000048D6 8B0E[1203]              	MOV	CX,[LASTENT]
 21957 000048DA 3B0E[9405]              	CMP	CX,[ENTFREE]
 21958 000048DE 7304                    	JAE	short TSTALL
 21959 000048E0 890E[9405]              	MOV	[ENTFREE],CX
 21960                                  TSTALL:
 21961 000048E4 3A26[3B05]              	CMP	AH,[DELALL]		; At end of directory?
 21962                                  NEXTENTJ:
 21963 000048E8 74E0                    	je	short NEXTENT 		; No - continue search
 21964 000048EA 890E[9605]              	MOV	[ENTLAST],CX
 21965 000048EE F9                      	STC
 21966 000048EF EB34                    	JMP	SHORT SETESRET
 21967                                  
 21968                                  FOUND:
 21969                                  ;
 21970                                  ; We have a file with a matching name. We must now consider the attributes:
 21971                                  ; ATTRIB	Action
 21972                                  ; ------	------
 21973                                  ; Volume_ID	Is Volume_ID in test?
 21974                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 21975                                  ;		If create then Is ATTRIB equal to test?
 21976                                  ;
 21977 000048F1 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 21978 000048F3 1F                      	POP	DS
 21979 000048F4 8A26[2805]              	MOV	AH,[ATTRIB]		; Attributes of search
 21980                                  	;and	ah,9Eh
 21981 000048F8 80E4DE                  	AND	AH,~attr_ignore
 21982                                  	;lea	si,[si+15]
 21983 000048FB 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 21984                                  					; point to first cluster field
 21985                                  	;test	ch,8
 21986 000048FE F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 21987 00004901 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 21988                                  	;test	ah,8
 21989 00004903 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 21990                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 21991 00004906 74C2                    	jz	short NEXTENT ; 19/05/2019
 21992 00004908 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 21993 0000490A EB11                    	JMP	SHORT RETFF		; Found Volume ID
 21994                                  check_one_volume_id:
 21995                                  	;CMP	ah,8
 21996 0000490C 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 21997                                  	;JZ	short NEXTENTJ		; Yes, continue search
 21998 0000490F 74B9                    	je	short NEXTENT ; 19/05/2019
 21999 00004911 E8B403                  	CALL	MatchAttributes
 22000 00004914 7407                    	JZ	SHORT RETFF
 22001 00004916 F606[3A05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 22002                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 22003 0000491B 74AD                    	jz	short NEXTENT ; 19/05/2019
 22004                                  RETFF:
 22005 0000491D C42E[4605]              	LES	BP,[THISDPB]
 22006 00004921 268A6600                	MOV	AH,[ES:BP]
 22007                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 22008                                  SETESRET:
 22009 00004925 16                      	PUSH	SS
 22010 00004926 07                      	POP	ES
 22011 00004927 C3                      	retn
 22012                                  
 22013                                  ;----------------------------------------------------------------------------
 22014                                  ;
 22015                                  ; Procedure Name : MetaCompare
 22016                                  ;
 22017                                  ; Inputs:
 22018                                  ;	DS:SI -> 11 character FCB style name NO '?'
 22019                                  ;	    Typically this is a directory entry.  It MUST be in upper case
 22020                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 22021                                  ;	    Typically this is a FCB or SFT.  It MUST be in upper case
 22022                                  ; Function:
 22023                                  ;	Compare FCB style names allowing for ? match to any char
 22024                                  ; Outputs:
 22025                                  ;	Zero if match else NZ
 22026                                  ; Destroys CX,SI,DI all others preserved
 22027                                  ;----------------------------------------------------------------------------
 22028                                  
 22029                                  MetaCompare:
 22030 00004928 B90B00                  	MOV	CX,11
 22031                                  WILDCRD:
 22032 0000492B F3A6                    	REPE	CMPSB
 22033 0000492D 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 22034                                  CHECK_META:
 22035 0000492F 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 22036 00004934 74F5                    	JZ	short WILDCRD
 22037                                  MetaRet:
 22038 00004936 C3                       	retn				; Zero set, Match
 22039                                  
 22040                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 22041                                  ;----------------------------------------------------------------------------
 22042                                  ;
 22043                                  ; Procedure Name : NEXTENTRY
 22044                                  ;
 22045                                  ; Inputs:
 22046                                  ;	Same as outputs of GETENTRY, above
 22047                                  ; Function:
 22048                                  ;	Update BX, and [LASTENT] for next directory entry.
 22049                                  ;	Carry set if no more.
 22050                                  ;----------------------------------------------------------------------------
 22051                                  
 22052                                  NEXTENTRY:
 22053                                  	; 23/07/2019 - Retro DOS v3.2
 22054                                  	; 19/05/2019 - Retro DOS v4.0
 22055                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 22056                                  	; 27/07/2018 - Retro DOS v3.0
 22057                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 22058                                  	; 15/03/2018 - Retro DOS v2.0
 22059                                  
 22060 00004937 A1[1203]                	MOV	AX,[LASTENT]
 22061 0000493A 3B06[9605]              	CMP	AX,[ENTLAST]
 22062 0000493E 7422                    	JZ	short NONE
 22063 00004940 40                      	INC	AX
 22064                                  	;ADD	BX,32
 22065 00004941 8D5F20                  	LEA	BX,[BX+32]
 22066 00004944 39D3                    	CMP	BX,DX
 22067 00004946 721C                    	JB	short HAVIT
 22068                                  	;jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 22069 00004948 8A1E[3005]              	MOV	BL,[SECCLUSPOS]
 22070 0000494C FEC3                    	INC	BL
 22071 0000494E 3A1E[3405]              	CMP	BL,[CLUSFAC]
 22072 00004952 7215                    	JB	short SAMECLUS
 22073 00004954 8B1E[9805]              	MOV	BX,[NXTCLUSNUM]
 22074 00004958 E8BB13                  	call	IsEOF
 22075 0000495B 7305                    	JAE	short NONE
 22076                                  	; 23/07/2019
 22077 0000495D 83FB02                  	CMP	BX,2
 22078                                  	;JB	short NONE
 22079                                  	;JMP	short GETENT
 22080 00004960 7332                    	jnb	short GETENT
 22081                                  NONE:
 22082 00004962 F9                      	STC
 22083 00004963 C3                      	retn
 22084                                  HAVIT:
 22085 00004964 A3[1203]                	MOV	[LASTENT],AX
 22086 00004967 F8                      	CLC
 22087                                  nextentry_retn:
 22088 00004968 C3                      	retn
 22089                                  SAMECLUS:
 22090 00004969 881E[3005]              	MOV	[SECCLUSPOS],BL
 22091 0000496D A3[1203]                	MOV	[LASTENT],AX
 22092 00004970 1E                      	PUSH	DS
 22093 00004971 C53E[9E05]              	LDS	DI,[CURBUF]
 22094                                  
 22095                                  	; 22/07/2019 - Retro DOS v3.2
 22096                                  	; MSDOS 6.0
 22097                                  	;mov	dx,[di+8]
 22098 00004975 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 22099                                  ;hkn; SS override
 22100                                  	;MOV	[ss:HIGH_SECTOR],DX		;AN000; >32mb
 22101 00004978 2E8916[B005]            	mov	[cs:HIGH_SECTOR],dx ; 23/07/2019
 22102                                  	;mov	dx,[di+6]
 22103 0000497D 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 22104                                  	;inc	dx  ; MSDOS 3.3
 22105 00004980 83C201                  	ADD	DX,1				;AN000; >32mb
 22106                                  	;ADC	word [ss:HIGH_SECTOR],0 		;AN000; >32mb
 22107 00004983 2E8316[B005]00          	adc	word [cs:HIGH_SECTOR],0 ; 23/07/2019
 22108 00004989 1F                      	POP	DS
 22109 0000498A E886F8                  	call	FIRSTCLUSTER
 22110 0000498D 31DB                    	XOR	BX,BX
 22111 0000498F EB23                    	JMP	short SETENTRY
 22112                                  
 22113                                  ;----------------------------------------------------------------------------
 22114                                  ;
 22115                                  ; Procedure Name : GETENTRY
 22116                                  ;
 22117                                  ; Inputs:
 22118                                  ;	[LASTENT] has directory entry
 22119                                  ;	ES:BP points to drive parameters
 22120                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 22121                                  ; Function:
 22122                                  ;	Locates directory entry in preparation for search
 22123                                  ;	GETENT provides entry for passing desired entry in AX
 22124                                  ; Outputs:
 22125                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 22126                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 22127                                  ;	[LASTENT] = New directory entry number
 22128                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 22129                                  ;	Carry set if error (currently user FAILed to I 24)
 22130                                  ;----------------------------------------------------------------------------
 22131                                  
 22132                                  GETENTRY:
 22133                                  	; 27/07/2018 - Retro DOS v3.0
 22134 00004991 A1[1203]                	MOV	AX,[LASTENT]
 22135                                  
 22136                                  	;entry	GETENT
 22137                                  GETENT:
 22138 00004994 A3[1203]                	MOV	[LASTENT],AX
 22139                                  ;
 22140                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 22141                                  ; directory.
 22142                                  ;
 22143 00004997 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 22144 00004999 D3C0                    	rol	ax,cl			; keep hight order bits
 22145 0000499B 89C2                    	mov	dx,ax
 22146                                  	;and	ax,0FFE0h
 22147                                  	;;and	ax,~(32-1)		; mask off high order bits
 22148 0000499D 24E0                    	and	al,0E0h ; ~31 ; 19/05/2019
 22149 0000499F 83E21F                  	and	dx,1Fh
 22150                                  	;and	dx,32-1			; mask off low order bits
 22151                                  ;
 22152                                  ; DX:AX contain the byte offset of the required directory entry from the
 22153                                  ; beginning of the directory. Convert this to a sector number. Round the
 22154                                  ; sector size down to a multiple of 32.
 22155                                  ;
 22156                                  	;mov	bx,[es:bp+2]
 22157 000049A2 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 22158 000049A6 80E3E0                  	and	bl,0E0h
 22159                                  	;AND	BL,255-31		; Must be multiple of 32
 22160 000049A9 F7F3                    	DIV	BX
 22161 000049AB 89D3                    	MOV	BX,DX			; Position within sector
 22162 000049AD 53                      	PUSH	BX
 22163 000049AE E809F8                  	call	DIRREAD
 22164 000049B1 5B                      	POP	BX
 22165                                  	;retc
 22166 000049B2 72B4                    	jc	short nextentry_retn	
 22167                                  SETENTRY:
 22168 000049B4 8B16[9E05]              	MOV	DX,[CURBUF]
 22169                                  	;add	dx,16 ; MSDOS 3.3
 22170                                  	;add	dx,20 ; MSDOS 6.0 
 22171 000049B8 83C214                  	ADD	DX,BUFINSIZ
 22172 000049BB 01D3                    	ADD	BX,DX
 22173                                  	;add	dx,[es:bp+2]
 22174 000049BD 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 22175 000049C1 C3                      	retn
 22176                                  
 22177                                  ; 23/07/2019 - Retro DOS v3.2
 22178                                  
 22179                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 22180                                  ;----------------------------------------------------------------------------
 22181                                  ;
 22182                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 22183                                  ;
 22184                                  ; Inputs:
 22185                                  ;	BX cluster number of start of directory
 22186                                  ;	ES:BP Points to DPB
 22187                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 22188                                  ; Function:
 22189                                  ;	Set up a directory search
 22190                                  ; Outputs:
 22191                                  ;	[DIRSTART] = BX
 22192                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 22193                                  ;	Carry set if error (currently user FAILed to I 24)
 22194                                  ; destroys AX,DX,BX
 22195                                  ;----------------------------------------------------------------------------
 22196                                  
 22197                                  SETDIRSRCH:
 22198 000049C2 09DB                    	OR	BX,BX
 22199 000049C4 7438                    	JZ	short SETROOTSRCH
 22200 000049C6 891E[7E05]              	MOV	[DIRSTART],BX
 22201                                  	;mov	al,[es:bp+4]
 22202 000049CA 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 22203 000049CE FEC0                    	INC	AL
 22204 000049D0 A2[3405]                	MOV	[CLUSFAC],AL
 22205                                  
 22206                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 22207                                  	;SAVE	<SI>
 22208 000049D3 56                      	push	si
 22209                                  	;test	byte [FastOpenFlg],2
 22210 000049D4 F606[A40F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 22211 000049D9 7507                    	JNZ	short UNP_OK
 22212                                  
 22213                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 22214                                  	;invoke	UNPACK
 22215 000049DB E84F13                  	call	UNPACK
 22216 000049DE 7302                    	JNC	short UNP_OK
 22217                                  	;RESTORE <SI>
 22218 000049E0 5E                      	pop	si
 22219                                  	;return
 22220 000049E1 C3                      	retn
 22221                                  
 22222                                  UNP_OK:
 22223 000049E2 893E[7805]              	MOV	[CLUSNUM],DI
 22224 000049E6 89DA                    	MOV	DX,BX
 22225 000049E8 30DB                    	XOR	BL,BL
 22226 000049EA 881E[3005]              	MOV	[SECCLUSPOS],BL
 22227                                  	;invoke	FIGREC
 22228 000049EE E8010D                  	call	FIGREC
 22229                                  	;RESTORE <SI>
 22230 000049F1 5E                      	pop	si
 22231                                  	
 22232                                  	; 19/05/2019 - Retro DOS v4.0
 22233                                  	; 23/07/2019 - Retro DOS v3.2
 22234                                  
 22235                                  	; MSDOS 6.0
 22236                                  	;PUSH	DX			   ;AN000; >32mb
 22237                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 22238                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 22239                                  	;POP	DX			   ;AN000; >32mb
 22240 000049F2 A1[B005]                	mov	ax,[HIGH_SECTOR]
 22241 000049F5 A3[7C05]                	mov	[DIRSEC+2],AX
 22242                                  	
 22243 000049F8 8916[7A05]              	MOV	[DIRSEC],DX
 22244 000049FC F8                      	CLC
 22245 000049FD C3                      	retn
 22246                                  
 22247                                  	;entry	SETROOTSRCH
 22248                                  SETROOTSRCH:
 22249 000049FE 31C0                    	XOR	AX,AX
 22250 00004A00 A3[7E05]                	MOV	[DIRSTART],AX
 22251 00004A03 A2[3005]                	MOV	[SECCLUSPOS],AL
 22252 00004A06 48                      	DEC	AX
 22253 00004A07 A3[7805]                	MOV	[CLUSNUM],AX
 22254                                  	;mov	ax,[es:bp+0Bh]
 22255 00004A0A 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 22256                                  	; 19/05/2019
 22257                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 22258                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 22259 00004A0E 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 22260 00004A12 29D0                    	SUB	AX,DX
 22261 00004A14 A2[3405]                	MOV	[CLUSFAC],AL
 22262 00004A17 8916[7A05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 22263                                  	; MSDOS 6.0
 22264 00004A1B C706[7C05]0000          	MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 22265 00004A21 F8                      	CLC
 22266 00004A22 C3                      	retn
 22267                                  
 22268                                  ;============================================================================
 22269                                  ; DIR2.ASM, MSDOS 6.0, 1991
 22270                                  ;============================================================================
 22271                                  ; 27/07/2018 - Retro DOS v3.0 
 22272                                  
 22273                                  ;	TITLE	DIR2 - Directory and path cracking
 22274                                  ;	NAME	Dir2
 22275                                  
 22276                                  ;Break	<GETPATH -- PARSE A WFP>
 22277                                  ;----------------------------------------------------------------------------
 22278                                  ;
 22279                                  ; Procedure Name : GETPATH
 22280                                  ;
 22281                                  ; Inputs:
 22282                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 22283                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 22284                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 22285                                  ;		( = -1 if current dir not involved, else
 22286                                  ;		 Points to first char after last "/" of current dir part)
 22287                                  ;	[THISCDS] Points to CDS being used
 22288                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 22289                                  ;	[NoSetDir] set
 22290                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 22291                                  ; Function:
 22292                                  ;	Crack the path
 22293                                  ; Outputs:
 22294                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 22295                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 22296                                  ;	ID1 field of [THISCDS] updated appropriately
 22297                                  ;	[ATTRIB] = [SATTRIB]
 22298                                  ;	ES:BP Points to DPB
 22299                                  ;	Carry set if bad path
 22300                                  ;	   SI Points to path element causing failure
 22301                                  ;	   Zero set
 22302                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 22303                                  ;	      start a search on the last directory
 22304                                  ;	      CL is zero if there is a bad name in the path
 22305                                  ;	      CL is non-zero if the name was simply not found
 22306                                  ;		 [ENTFREE] may have free spot in directory
 22307                                  ;		 [NAME1] is the name.
 22308                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 22309                                  ;	   Zero reset
 22310                                  ;	      File in middle of path or bad name in path or attribute mismatch
 22311                                  ;		or path too long or malformed path
 22312                                  ;	ELSE
 22313                                  ;	   [CurBuf] = -1 if root directory
 22314                                  ;	   [CURBUF] contains directory record with match
 22315                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 22316                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 22317                                  ;	   AH = device ID
 22318                                  ;	      bit 7 of AH set if device SI and BX
 22319                                  ;	      will point DOSGROUP relative The firclus
 22320                                  ;	      field of the device entry contains the device pointer
 22321                                  ;	   [NAME1] Has name looked for
 22322                                  ;	   If last element is a directory zero is set and:
 22323                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 22324                                  ;	      are set up to start a search on it.
 22325                                  ;	      unless [NoSetDir] is non zero in which case the return is
 22326                                  ;	      like that for a file (except for zero flag)
 22327                                  ;	   If last element is a file zero is reset
 22328                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 22329                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 22330                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 22331                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 22332                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 22333                                  ; DS preserved, Others destroyed
 22334                                  ;---------------------------------------------------------------------------
 22335                                  
 22336                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 22337                                  ;hkn; DS already set up at this point.
 22338                                  
 22339                                  GETPATH:
 22340                                  	;mov	word [CREATING],0E500h
 22341 00004A23 C706[3A05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 22342                                  
 22343                                  ; Same as GetPath only CREATING and DELALL already set
 22344                                  
 22345                                  	;entry	GetPathNoSet
 22346                                  GetPathNoSet:
 22347                                  	;mov	byte [EXTERR_LOCUS],2	
 22348 00004A29 C606[EF02]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 22349 00004A2E C706[9E05]FFFF          	MOV	word [CURBUF],-1	; initial setting
 22350                                  
 22351                                  ; See if the input indicates a device that has already been detected. If so,
 22352                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 22353                                  
 22354 00004A34 8B3E[6E05]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 22355                                  	;cmp	word [DI+1],5C3Ah
 22356                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 22357 00004A38 817D013A5C              	cmp	word [DI+1],':\'
 22358 00004A3D 7438                    	JZ	short CrackIt
 22359                                  
 22360                                  ; Let ChkDev find it in the device list
 22361                                  
 22362 00004A3F 83C703                  	ADD	DI,3
 22363                                  	; 18/08/2018
 22364                                  	;MOV	SI,DI			; let CHKDEV see the original name
 22365 00004A42 E8B000                  	CALL	CHKDEV
 22366 00004A45 722E                    	JC	short InternalError
 22367                                  Build_devJ:
 22368                                  
 22369 00004A47 A0[2A05]                	MOV	AL,[SATTRIB]
 22370 00004A4A A2[2805]                	MOV	[ATTRIB],AL
 22371                                  	;mov	byte [EXTERR_LOCUS],1
 22372 00004A4D C606[EF02]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 22373                                  					; "finding" a char device
 22374                                  					; set LOCUS to Unknown. This makes
 22375                                  					; certain idiotic problems reported
 22376                                  					; by a certain 3 letter OEM go away.
 22377                                  
 22378                                  ; Take name in name1 and pack it back into where wfp_start points. This
 22379                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 22380                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 22381                                  ; wfp into the share set.
 22382                                  ;
 22383                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 22384                                  ; non-space seen +1.  This position is kept in DX.
 22385                                  
 22386                                  ;hkn; SS is DOSDATA
 22387 00004A52 16                      	push	ss
 22388 00004A53 07                      	pop	es
 22389                                  
 22390                                  ;hkn; NAME1 is in DOSDATA
 22391 00004A54 BE[0805]                	mov	si,NAME1
 22392 00004A57 8B3E[6E05]              	mov	di,[WFP_START]
 22393 00004A5B 89FA                    	mov	dx,di
 22394 00004A5D B90800                  	mov	cx,8			; 8 chars in device name
 22395                                  MoveLoop:
 22396 00004A60 AC                      	lodsb
 22397 00004A61 AA                      	stosb
 22398 00004A62 3C20                    	cmp	al," "
 22399 00004A64 7402                    	jz	short NoSave
 22400                                  
 22401 00004A66 89FA                    	mov	dx,di
 22402                                  NoSave:
 22403 00004A68 E2F6                    	loop	MoveLoop
 22404                                  ;
 22405                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 22406                                  ; at this point.
 22407                                  ;
 22408 00004A6A 89D7                    	mov	di,dx
 22409 00004A6C C60500                  	mov	byte [di],0		; end of string
 22410 00004A6F E8C302                  	call	Build_device_ent	; Clears carry sets zero
 22411 00004A72 FEC0                    	INC	AL			; reset zero
 22412 00004A74 C3                      	retn
 22413                                  
 22414                                  InternalError:
 22415                                  InternalError_loop:
 22416 00004A75 EBFE                    	JMP	short InternalError_loop	; freeze
 22417                                  
 22418                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 22419                                  
 22420                                  CrackIt:
 22421 00004A77 8B36[7205]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 22422 00004A7B 83FEFF                  	CMP	SI,-1			; valid?
 22423 00004A7E 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 22424 00004A80 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 22425                                  LOOK_SING:
 22426                                  	;mov	byte [ATTRIB],16h
 22427 00004A83 C606[2805]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 22428                                  					; Attributes to search through Dirs
 22429 00004A88 C43E[5E05]              	LES	DI,[THISCDS]
 22430 00004A8C B8FFFF                  	MOV	AX,-1
 22431                                  	;mov	bx,[es:di+73]
 22432 00004A8F 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 22433 00004A93 8B36[7205]              	MOV	SI,[CURR_DIR_END]
 22434                                  
 22435                                  ; AX = -1
 22436                                  ; BX = cluster number of current directory.  THis number is -1 if the media
 22437                                  ;      has been uncertainly changed.
 22438                                  ; SI = offset in DOSGroup into path to end of current directory text.  This
 22439                                  ;      may be -1 if no current directory part has been used.
 22440                                  
 22441 00004A97 39C6                    	CMP	SI,AX			; if Current directory is not part
 22442 00004A99 7440                    	JZ	short NO_CURR_D		; then we must crack from root
 22443 00004A9B 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 22444                                  
 22445                                  ; DOS 3.3  6/25/86
 22446 00004A9D 743C                    	JZ	short NO_CURR_D		; no, crack form the root
 22447                                  	;test	byte [FastOpenFlg],1
 22448 00004A9F F606[A40F]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 22449 00004AA4 7442                    	JZ	short GOT_SEARCH_CLUSTER	; no
 22450 00004AA6 06                      	PUSH	ES			; save registers
 22451 00004AA7 57                      	PUSH	DI
 22452 00004AA8 51                      	PUSH	CX
 22453 00004AA9 FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 22454 00004AAC 56                      	PUSH	SI
 22455 00004AAD 53                      	PUSH	BX
 22456                                  
 22457 00004AAE C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 22458 00004AB2 8B36[6E05]              	MOV	SI,[WFP_START]
 22459                                  
 22460                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 22461 00004AB6 BB[730F]                	MOV	BX,FastOpenTable
 22462 00004AB9 BF[840F]                	MOV	DI,Dir_Info_Buff
 22463 00004ABC B9[790F]                	MOV	CX,FastOpen_Ext_Info
 22464                                  	;mov	al,1
 22465 00004ABF B001                    	MOV	AL,FONC_Look_up
 22466 00004AC1 1E                      	PUSH	DS
 22467 00004AC2 07                      	POP	ES
 22468                                  	;call	far [BX+2]
 22469 00004AC3 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 22470 00004AC6 7208                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 22471                                  					; Go to Got_Srch_cluster
 22472 00004AC8 803C00                  	CMP	BYTE [SI],0		;fastopen has current dir info?
 22473 00004ACB 7404                    	JE	short GO_Chk_end	;yes. Go to got_search_cluster
 22474 00004ACD F9                      	stc
 22475 00004ACE EB01                    	jmp	short GO_Chk_end	;Go to No_Curr_D
 22476                                  GO_Chk_end1:
 22477 00004AD0 F8                      	clc
 22478                                  GO_Chk_end:				; restore registers
 22479 00004AD1 5B                      	POP	BX
 22480 00004AD2 5E                      	POP	SI
 22481 00004AD3 8F44FF                  	POP	word [SI-1]
 22482 00004AD6 59                      	POP	CX
 22483 00004AD7 5F                      	POP	DI
 22484 00004AD8 07                      	POP	ES
 22485 00004AD9 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 22486                                  
 22487                                  ; DOS 3.3  6/25/86
 22488                                  ;
 22489                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 22490                                  ; of path and go crack from root.
 22491                                  
 22492                                  NO_CURR_D:
 22493 00004ADB 8B36[6E05]              	MOV	SI,[WFP_START]
 22494 00004ADF 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 22495 00004AE2 C42E[4605]              	LES	BP,[THISDPB]		; Get ES:BP
 22496 00004AE6 EB3D                    	JMP	short ROOTPATH
 22497                                  
 22498                                  ; We are able to crack from the current directory part. Go set up for search
 22499                                  ; of specified cluster.
 22500                                  
 22501                                  GOT_SEARCH_CLUSTER:
 22502 00004AE8 C42E[4605]              	LES	BP,[THISDPB]		; Get ES:BP
 22503 00004AEC E8D3FE                  	call	SETDIRSRCH
 22504                                  	;JC	short SETFERR
 22505                                  	;JMP	short FINDPATH
 22506 00004AEF 7345                    	jnc	short FINDPATH ; 17/08/2018
 22507                                  SETFERR:
 22508 00004AF1 30C9                    	XOR	CL,CL			; set zero
 22509 00004AF3 F9                      	STC
 22510 00004AF4 C3                      	retn
 22511                                  
 22512                                  ;---------------------------------------------------------------------------
 22513                                  ;
 22514                                  ; Procedure Name : ChkDev
 22515                                  ;
 22516                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 22517                                  ;   device.
 22518                                  ; Blasts CX,SI,DI,AX,BX
 22519                                  ;---------------------------------------------------------------------------
 22520                                  
 22521                                  CHKDEV:
 22522 00004AF5 89FE                    	MOV	SI,DI
 22523 00004AF7 8CD7                    	MOV	DI,SS
 22524 00004AF9 8EC7                    	MOV	ES,DI
 22525                                  
 22526 00004AFB BF[0805]                	MOV	DI,NAME1
 22527 00004AFE B90900                  	MOV	CX,9
 22528                                  TESTLOOP:
 22529 00004B01 E8E80D                  	call	GETLET
 22530                                  
 22531 00004B04 3C2E                    	CMP	AL,'.'
 22532 00004B06 740E                    	JZ	short TESTDEVICE
 22533 00004B08 E81E0E                  	call	PATHCHRCMP
 22534 00004B0B 7407                    	JZ	short NOTDEV
 22535 00004B0D 08C0                    	OR	AL,AL
 22536 00004B0F 7405                    	JZ	short TESTDEVICE
 22537                                  
 22538 00004B11 AA                      	STOSB
 22539 00004B12 E2ED                    	LOOP	TESTLOOP
 22540                                  NOTDEV:
 22541 00004B14 F9                      	STC
 22542 00004B15 C3                      	retn
 22543                                  
 22544                                  TESTDEVICE:
 22545 00004B16 83C102                  	ADD	CX,2
 22546 00004B19 B020                    	MOV	AL,' '
 22547 00004B1B F3AA                    	REP	STOSB
 22548 00004B1D 8CD0                    	MOV	AX,SS
 22549 00004B1F 8ED8                    	MOV	DS,AX
 22550 00004B21 E8B101                  	call	DEVNAME
 22551 00004B24 C3                      	retn
 22552                                  
 22553                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 22554                                  ;----------------------------------------------------------------------------
 22555                                  ;
 22556                                  ; Procedure Name : ROOTPATH,FINDPATH
 22557                                  ;
 22558                                  ; Inputs:
 22559                                  ;	Same as FINDPATH but,
 22560                                  ;	SI Points to asciz string of path which is assumed to start at
 22561                                  ;		the root (no leading '/').
 22562                                  ; Function:
 22563                                  ;	Search from root for path
 22564                                  ; Outputs:
 22565                                  ;	Same as FINDPATH but:
 22566                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 22567                                  ;	[NoSetDir] is ignored.
 22568                                  ;----------------------------------------------------------------------------
 22569                                  
 22570                                  ROOTPATH:
 22571 00004B25 E8D6FE                  	call	SETROOTSRCH
 22572 00004B28 803C00                  	CMP	BYTE [SI],0
 22573 00004B2B 7509                    	JNZ	short FINDPATH
 22574                                  
 22575                                  ; Root dir specified
 22576 00004B2D A0[2A05]                	MOV	AL,[SATTRIB]
 22577 00004B30 A2[2805]                	MOV	[ATTRIB],AL
 22578 00004B33 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 22579                                  					; (dir), clears carry.
 22580 00004B35 C3                      	retn
 22581                                  
 22582                                  ; Inputs:
 22583                                  ;	[ATTRIB] Set to get through directories
 22584                                  ;	[SATTRIB] Set to find last element
 22585                                  ;	ES:BP Points to DPB
 22586                                  ;	SI Points to asciz string of path (no leading '/').
 22587                                  ;	[SECCLUSPOS] = 0
 22588                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 22589                                  ;	[CLUSNUM] = Cluster # of next cluster
 22590                                  ;	[CLUSFAC] = Sectors per cluster
 22591                                  ;	[NoSetDir] set
 22592                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 22593                                  ;		( = -1 if current dir not involved, else
 22594                                  ;		 Points to first char after last "/" of current dir part)
 22595                                  ;	[THISCDS] Points to CDS being used
 22596                                  ;	[CREATING] and [DELALL] set
 22597                                  ; Function:
 22598                                  ;	Parse path name
 22599                                  ; Outputs:
 22600                                  ;	ID1 field of [THISCDS] updated appropriately
 22601                                  ;	[ATTRIB] = [SATTRIB]
 22602                                  ;	ES:BP Points to DPB
 22603                                  ;	[THISDPB] = ES:BP
 22604                                  ;	Carry set if bad path
 22605                                  ;	   SI Points to path element causing failure
 22606                                  ;	   Zero set
 22607                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 22608                                  ;	      start a search on the last directory
 22609                                  ;	      CL is zero if there is a bad name in the path
 22610                                  ;	      CL is non-zero if the name was simply not found
 22611                                  ;		 [ENTFREE] may have free spot in directory
 22612                                  ;		 [NAME1] is the name.
 22613                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 22614                                  ;	   Zero reset
 22615                                  ;	      File in middle of path or bad name in path
 22616                                  ;		or path too long or malformed path
 22617                                  ;	ELSE
 22618                                  ;	   [CURBUF] contains directory record with match
 22619                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 22620                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 22621                                  ;	   [NAME1] Has name looked for
 22622                                  ;	   AH = device ID
 22623                                  ;	      bit 7 of AH set if device SI and BX
 22624                                  ;	      will point DOSGROUP relative The firclus
 22625                                  ;	      field of the device entry contains the device pointer
 22626                                  ;	   If last element is a directory zero is set and:
 22627                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 22628                                  ;	      are set up to start a search on it,
 22629                                  ;	      unless [NoSetDir] is non zero in which case the return is
 22630                                  ;	      like that for a file (except for zero flag)
 22631                                  ;	   If last element is a file zero is reset
 22632                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 22633                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 22634                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 22635                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 22636                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 22637                                  ; Destroys all other registers
 22638                                  
 22639                                      	;entry	FINDPATH
 22640                                  FINDPATH:
 22641 00004B36 06                      	PUSH	ES			; Save ES:BP
 22642 00004B37 56                      	PUSH	SI
 22643 00004B38 89F7                    	MOV	DI,SI
 22644 00004B3A 8B0E[7E05]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 22645 00004B3E 833E[7205]FF            	CMP	word [CURR_DIR_END],-1
 22646 00004B43 740E                    	JZ	short NOIDS		; No current dir part
 22647 00004B45 3B3E[7205]              	CMP	DI,[CURR_DIR_END]
 22648 00004B49 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 22649 00004B4B C43E[5E05]              	LES	DI,[THISCDS]
 22650                                  	;mov	[es:di+73],cx
 22651 00004B4F 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 22652                                  NOIDS:
 22653                                  
 22654                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 22655                                  ; character in the string. CX,DI may be destroyed.
 22656                                  ;
 22657                                  ;	invoke	NAMETRANS
 22658                                  ;	MOV	CL,AL
 22659                                  ;
 22660                                  ; The above is the slow method. The name has *already* been munged by
 22661                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 22662                                  ; the name until ., \ or 0 is hit.
 22663                                  
 22664 00004B53 8CD0                    	MOV	AX,SS
 22665 00004B55 8EC0                    	MOV	ES,AX
 22666                                  
 22667                                  ;hkn; Name1 is in DOSDATA
 22668 00004B57 BF[0805]                	MOV	DI,NAME1
 22669 00004B5A B82020                  	MOV	AX,'  ' ; 2020h
 22670 00004B5D AA                      	STOSB
 22671 00004B5E AB                      	STOSW
 22672 00004B5F AB                      	STOSW
 22673 00004B60 AB                      	STOSW
 22674 00004B61 AB                      	STOSW
 22675 00004B62 AB                      	STOSW
 22676                                  
 22677                                  ;hkn; Name1 is in DOSDATA
 22678 00004B63 BF[0805]                	MOV	DI,NAME1
 22679 00004B66 30E4                    	XOR	AH,AH			; bits for CL
 22680                                  GetNam:
 22681                                  	;INC	CL			;AN000; KK incrment volid count
 22682 00004B68 AC                      	LODSB
 22683 00004B69 3C2E                    	CMP	AL,'.'
 22684 00004B6B 7412                    	JZ	short _SetExt
 22685 00004B6D 08C0                    	OR	AL,AL
 22686 00004B6F 7424                    	JZ	short _GetDone
 22687 00004B71 3C5C                    	CMP	AL,'\'
 22688 00004B73 7420                    	JZ	short _GetDone
 22689 00004B75 3C3F                    	CMP	AL,'?'
 22690 00004B77 7503                    	JNZ	short StoNam
 22691 00004B79 80CC01                  	OR	AH,1
 22692                                  StoNam: 
 22693 00004B7C AA                      	STOSB
 22694 00004B7D EBE9                    	JMP	short GetNam
 22695                                  _SetExt:
 22696 00004B7F BF[1005]                	MOV	DI,NAME1+8
 22697                                  GetExt:
 22698 00004B82 AC                      	LODSB
 22699 00004B83 08C0                    	OR	AL,AL
 22700 00004B85 740E                    	JZ	short _GetDone
 22701 00004B87 3C5C                    	CMP	AL,'\'
 22702 00004B89 740A                    	JZ	short _GetDone
 22703 00004B8B 3C3F                    	CMP	AL,'?'
 22704 00004B8D 7503                    	JNZ	short StoExt
 22705 00004B8F 80CC01                  	OR	AH,1
 22706                                  StoExt: 
 22707 00004B92 AA                      	STOSB
 22708 00004B93 EBED                    	JMP	short GetExt
 22709                                  _GetDone:
 22710 00004B95 4E                      	DEC	SI
 22711 00004B96 88E1                    	MOV	CL,AH
 22712 00004B98 80C980                  	OR	CL,80H
 22713 00004B9B 5F                      	POP	DI			; Start of this element
 22714 00004B9C 07                      	POP	ES			; Restore ES:BP
 22715 00004B9D 39FE                    	CMP	SI,DI
 22716 00004B9F 7503                    	JNZ	short check_device
 22717 00004BA1 E9D800                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 22718                                  check_device:
 22719 00004BA4 56                      	PUSH	SI			; Start of next element
 22720 00004BA5 8A04                    	MOV	AL,[SI]
 22721 00004BA7 08C0                    	OR	AL,AL
 22722 00004BA9 7508                    	JNZ	short NOT_LAST
 22723                                  
 22724                                  ; for last element of the path switch to the correct search attributes
 22725                                  
 22726 00004BAB 8A3E[2A05]              	MOV	BH,[SATTRIB]
 22727 00004BAF 883E[2805]              	MOV	[ATTRIB],BH
 22728                                  
 22729                                  NOT_LAST:
 22730                                  
 22731                                  ; check name1 to see if we have a device...
 22732                                  
 22733 00004BB3 06                      	PUSH	ES			; Save ES:BP
 22734                                  
 22735                                  ;hkn; SS is DOSDATA
 22736                                  	;context ES
 22737 00004BB4 16                      	push	ss
 22738 00004BB5 07                      	pop	es
 22739 00004BB6 E81C01                  	call	DEVNAME 		; blast BX
 22740 00004BB9 07                      	POP	ES			; Restore ES:BP
 22741 00004BBA 720B                    	JC	short FindFile		; Not a device
 22742 00004BBC 08C0                    	OR	AL,AL			; Test next char again
 22743 00004BBE 7403                    	JZ	short GO_BDEV
 22744 00004BC0 E9BD00                  	JMP	FILEINPATH		; Device name in middle of path
 22745                                  
 22746                                  GO_BDEV:
 22747 00004BC3 5E                      	POP	SI			; Points to NUL at end of path
 22748 00004BC4 E980FE                  	JMP	Build_devJ
 22749                                  
 22750                                  FindFile:
 22751                                  ;;;; 7/28/86
 22752 00004BC7 803E[0805]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 22753 00004BCC 7505                    	JNZ	short NOE5		; no
 22754 00004BCE C606[0805]05            	MOV	BYTE [NAME1],05H	; change it to 05
 22755                                  NOE5:
 22756                                  ;;;; 7/28/86
 22757 00004BD3 57                      	PUSH	DI			; Start of this element
 22758 00004BD4 06                      	PUSH	ES			; Save ES:BP
 22759 00004BD5 51                      	PUSH	CX			; CL return from NameTrans
 22760                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 22761                                  
 22762 00004BD6 E88302                  	CALL	LookupPath		; call fastopen to get dir entry
 22763 00004BD9 7303                    	JNC	short DIR_FOUND		; found dir entry
 22764                                  
 22765                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 22766 00004BDB E89BFC                  	call	FINDENTRY
 22767                                  DIR_FOUND:
 22768 00004BDE 59                      	POP	CX
 22769 00004BDF 07                      	POP	ES
 22770 00004BE0 5F                      	POP	DI
 22771 00004BE1 7303                    	JNC	short LOAD_BUF
 22772 00004BE3 E9BF00                  	JMP	BADPATHPOP
 22773                                  
 22774                                  LOAD_BUF:
 22775 00004BE6 C53E[9E05]              	LDS	DI,[CURBUF]
 22776                                  	;test	byte [bx+0Bh],10h
 22777 00004BEA F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 22778 00004BEE 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 22779 00004BF0 E98D00                  	JMP	FILEINPATH		; Error or end of path
 22780                                  
 22781                                  ; if we are not setting the directory, then check for end of string
 22782                                  
 22783                                  GO_NEXT:
 22784                                  ;hkn; SS override
 22785 00004BF3 36803E[1603]00          	CMP	BYTE [SS:NoSetDir],0
 22786 00004BF9 7412                    	JZ	short SetDir
 22787 00004BFB 89FA                    	MOV	DX,DI			; Save pointer to entry
 22788 00004BFD 8CD9                    	MOV	CX,DS
 22789                                  
 22790                                  ;hkn; SS is DOSDATA
 22791                                  	;context DS
 22792 00004BFF 16                      	push	ss
 22793 00004C00 1F                      	pop	ds
 22794 00004C01 5F                      	POP	DI			; Start of next element
 22795                                  	; MSDOS 6.0
 22796                                  	;TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 22797                                  	;JZ	short nofast			; the FastOpen
 22798                                  	;TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 22799                                  	;JZ	short nofast			; no
 22800                                  	;MOV	DI,[Next_Element_Start]	; no need to insert it again
 22801                                  ;nofast:
 22802 00004C02 803D00                  	CMP	BYTE [DI],0
 22803 00004C05 7501                    	JNZ	short NEXT_ONE		; DOS 3.3
 22804                                  	;JMP	_SETRET			; Got it
 22805 00004C07 C3                      	retn	; 05/09/2018
 22806                                  NEXT_ONE:
 22807 00004C08 57                      	PUSH	DI			; Put start of next element back on stack
 22808 00004C09 89D7                    	MOV	DI,DX
 22809 00004C0B 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 22810                                  SetDir:
 22811 00004C0D 8B14                    	MOV	DX,[SI] 		; Dir_first
 22812                                  
 22813                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 22814 00004C0F 1E                      	PUSH	DS		      ; save [curbuf+2]
 22815                                  ;hkn; SS is DOSDATA
 22816 00004C10 16                      	push	ss
 22817 00004C11 1F                      	pop	ds		      ; set DS Dosgroup
 22818                                  	;test	byte [FastOpenFlg],2
 22819 00004C12 F606[A40F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 22820 00004C17 7410                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 22821 00004C19 89D3                    	MOV	BX,DX		      ; not found
 22822 00004C1B 8B3E[7805]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 22823 00004C1F 50                      	PUSH	AX		      ; save device id (AH)
 22824 00004C20 E89FFD                  	call	SETDIRSRCH
 22825 00004C23 58                      	POP	AX		      ; restore device id (AH)
 22826 00004C24 83C402                  	ADD	SP,2		      ; pop ds in stack
 22827 00004C27 EB3D                    	JMP	short FAST_OPEN_SKIP
 22828                                  
 22829                                  DO_NORMAL:
 22830 00004C29 1F                      	POP	DS			; DS = [curbuf + 2]
 22831                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 22832                                  
 22833 00004C2A 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 22834 00004C2C 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 22835 00004C2E 53                      	PUSH	BX
 22836 00004C2F 50                      	PUSH	AX
 22837 00004C30 56                      	PUSH	SI
 22838 00004C31 51                      	PUSH	CX
 22839                                  	;push	word [di+6]
 22840 00004C32 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 22841                                  	; 22/07/2019 - Retro DOS v3.2
 22842                                  	; MSDOS 6.0
 22843                                  	;push	word [di+8]
 22844 00004C35 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 22845 00004C38 89D3                    	MOV	BX,DX
 22846                                  
 22847                                  ;hkn; SS is DOSDATA
 22848                                  	;context DS
 22849 00004C3A 16                      	push	ss
 22850 00004C3B 1F                      	pop	ds
 22851                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 22852 00004C3C E883FD                  	call	SETDIRSRCH		; the entry sector buffer
 22853                                  	; MSDOS 6.0
 22854 00004C3F 8F06[B005]              	POP	word [HIGH_SECTOR]
 22855 00004C43 5A                      	POP	DX
 22856 00004C44 720A                    	JC	short SKIP_GETB
 22857                                  	;mov	byte [ALLOWED],18h
 22858 00004C46 C606[1503]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 22859 00004C4B 30C0                    	XOR	AL,AL
 22860                                  	;invoke	GETBUFFR		; Get the entry buffer back
 22861 00004C4D E84E15                  	call	GETBUFFR
 22862                                  SKIP_GETB:
 22863 00004C50 59                      	POP	CX
 22864 00004C51 5E                      	POP	SI
 22865 00004C52 58                      	POP	AX
 22866 00004C53 5B                      	POP	BX
 22867 00004C54 7305                    	JNC	short SET_THE_BUF ; 19/05/2019
 22868 00004C56 5F                      	POP	DI			; Start of next element
 22869 00004C57 89FE                    	MOV	SI,DI			; Point with SI
 22870 00004C59 EB21                    	JMP	SHORT _BADPATH
 22871                                  
 22872                                  SET_THE_BUF:
 22873 00004C5B E8C1F5                  	call	SET_BUF_AS_DIR
 22874 00004C5E 8B3E[9E05]              	MOV	DI,[CURBUF]
 22875 00004C62 01FE                    	ADD	SI,DI			; Get the offsets back
 22876 00004C64 01FB                    	ADD	BX,DI
 22877                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 22878                                  FAST_OPEN_SKIP:
 22879 00004C66 5F                      	POP	DI			; Start of next element
 22880 00004C67 E89602                  	CALL	InsertPath		; insert dir entry info
 22881                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 22882 00004C6A 8A05                    	MOV	AL,[DI]
 22883 00004C6C 08C0                    	OR	AL,AL
 22884 00004C6E 7434                    	JZ	short _SETRET		; At end
 22885 00004C70 47                      	INC	DI			; Skip over "/"
 22886 00004C71 89FE                    	MOV	SI,DI			; Point with SI
 22887 00004C73 E8B30C                  	call	PATHCHRCMP
 22888 00004C76 7503                    	JNZ	short find_bad_name	; oops
 22889 00004C78 E9BBFE                  	JMP	FINDPATH		; Next element
 22890                                  
 22891                                  find_bad_name:
 22892 00004C7B 4E                      	DEC	SI			; Undo above INC to get failure point
 22893                                  _BADPATH:
 22894 00004C7C 30C9                    	XOR	CL,CL			; Set zero
 22895 00004C7E EB2C                    	JMP	SHORT BADPRET
 22896                                  
 22897                                  FILEINPATH:
 22898 00004C80 5F                      	POP	DI			; Start of next element
 22899                                  
 22900                                  ;hkn; SS is DOSDATA
 22901                                  	;context DS			; Got to from one place with DS gone
 22902 00004C81 16                      	push	ss
 22903 00004C82 1F                      	pop	ds
 22904                                  
 22905                                  ; DOS 3.3 FastOpen
 22906                                  	;test	byte [FastOpenFlg],1
 22907 00004C83 F606[A40F]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 22908 00004C88 740B                    	JZ	short NO_FAST		; device info to fastopen
 22909                                  	;test	byte [FastOpenFlg],2
 22910 00004C8A F606[A40F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 22911 00004C8F 7404                    	JZ	short NO_FAST
 22912 00004C91 8B3E[A50F]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 22913                                  					 ; success
 22914                                  NO_FAST:
 22915                                  ; DOS 3.3 FastOpen
 22916                                  
 22917 00004C95 8A05                    	MOV	AL,[DI]
 22918 00004C97 08C0                    	OR	AL,AL
 22919 00004C99 7404                    	JZ	short INCRET
 22920 00004C9B 89FE                    	MOV	SI,DI			; Path too long
 22921 00004C9D EB0D                    	JMP	SHORT BADPRET
 22922                                  
 22923                                  INCRET:
 22924                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 22925                                  
 22926 00004C9F E85E02                  	CALL   InsertPath		; insert dir entry info
 22927                                  
 22928                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 22929 00004CA2 FEC0                    	INC	AL			; Reset zero
 22930                                  _SETRET:
 22931 00004CA4 C3                      	retn
 22932                                  
 22933                                  BADPATHPOP:
 22934 00004CA5 5E                      	POP	SI			; Start of next element
 22935 00004CA6 8A04                    	MOV	AL,[SI]
 22936 00004CA8 89FE                    	MOV	SI,DI			; Start of bad element
 22937 00004CAA 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 22938                                  BADPRET:
 22939 00004CAC A0[2A05]                	MOV	AL,[SATTRIB]
 22940 00004CAF A2[2805]                	MOV	[ATTRIB],AL		; Make sure return correct
 22941 00004CB2 F9                      	STC
 22942 00004CB3 C3                      	retn
 22943                                  
 22944                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 22945                                  ;---------------------------------------------------------------------------
 22946                                  ;
 22947                                  ; Procedure Name : STARTSRCH
 22948                                  ;
 22949                                  ; Inputs:
 22950                                  ;	[THISDPB] Set
 22951                                  ; Function:
 22952                                  ;	Set up a search for GETENTRY and NEXTENTRY
 22953                                  ; Outputs:
 22954                                  ;	ES:BP = Drive parameters
 22955                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 22956                                  ; Destroys ES,BP,AX
 22957                                  ;--------------------------------------------------------------------------
 22958                                  
 22959                                  STARTSRCH:
 22960 00004CB4 C42E[4605]              	LES	BP,[THISDPB]
 22961 00004CB8 31C0                    	XOR	AX,AX
 22962 00004CBA A3[1203]                	MOV	[LASTENT],AX
 22963 00004CBD A2[3805]                	MOV	[VOLID],AL		; No volume ID found
 22964 00004CC0 48                      	DEC	AX
 22965 00004CC1 A3[9405]                	MOV	[ENTFREE],AX
 22966 00004CC4 A3[9605]                	MOV	[ENTLAST],AX
 22967 00004CC7 C3                      	retn
 22968                                  
 22969                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 22970                                  ;----------------------------------------------------------------------------
 22971                                  ; Procedure Name : MatchAttributes
 22972                                  ;
 22973                                  ; Input:    [Attrib] = attribute to search for
 22974                                  ;	    CH = found attribute
 22975                                  ; Output:   JZ <match>
 22976                                  ;	    JNZ <nomatch>
 22977                                  ; Registers modified: noneski
 22978                                  ;----------------------------------------------------------------------------
 22979                                  
 22980                                  MatchAttributes:
 22981 00004CC8 50                      	PUSH	AX
 22982                                  
 22983                                  ;hkn; SS override
 22984 00004CC9 36A0[2805]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 22985 00004CCD F6D0                    	NOT	AL			; AL <- SearchSet'
 22986 00004CCF 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 22987                                  	;and	al,16h
 22988 00004CD1 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 22989                                  ;
 22990                                  ; the result is non-zero if an attribute is not in the search set
 22991                                  ; and in the found set and in the important set. This means that we do not
 22992                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 22993                                  ;
 22994 00004CD3 58                      	POP	AX
 22995 00004CD4 C3                      	retn
 22996                                  
 22997                                  ;Break <DevName - Look for name of device>
 22998                                  ;---------------------------------------------------------------------------
 22999                                  ;
 23000                                  ; Procedure Name : DevName
 23001                                  ;
 23002                                  ; Inputs:
 23003                                  ;	DS,ES:DOSDATA
 23004                                  ;	Filename in NAME1
 23005                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 23006                                  ; Function:
 23007                                  ;	Determine if file is in list of I/O drivers
 23008                                  ; Outputs:
 23009                                  ;	Carry set if not a device
 23010                                  ;	ELSE
 23011                                  ;	Zero flag set
 23012                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 23013                                  ;	     bits 0-4 set from low byte of attribute word
 23014                                  ;	DEVPT = DWORD pointer to Device header of device
 23015                                  ; BX destroyed, others preserved
 23016                                  ;---------------------------------------------------------------------------
 23017                                  
 23018                                  DEVNAME:
 23019                                  	; 28/07/2018 - Retro DOS v3.0
 23020                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 23021                                  
 23022 00004CD5 56                      	PUSH	SI
 23023 00004CD6 57                      	PUSH	DI
 23024 00004CD7 51                      	PUSH	CX
 23025 00004CD8 50                      	PUSH	AX
 23026                                  
 23027                                  ; E5 special code
 23028 00004CD9 FF36[0805]              	PUSH	WORD [NAME1]
 23029 00004CDD 803E[0805]05            	CMP	byte [NAME1],5
 23030 00004CE2 7505                    	JNZ	short NOKTR
 23031 00004CE4 C606[0805]E5            	MOV	byte [NAME1],0E5h
 23032                                  NOKTR:
 23033                                  	;test	byte [ATTRIB],8
 23034 00004CE9 F606[2805]08            	TEST	byte [ATTRIB],attr_volume_id
 23035                                  					; If looking for VOL id don't find devs
 23036 00004CEE 7522                    	JNZ	short RET31
 23037                                  
 23038                                  ;hkn; NULDEV is in DOSDATA
 23039 00004CF0 BE[4800]                	MOV	SI,NULDEV
 23040                                  LOOKIO:
 23041                                  	;test	word [si+4],8000h
 23042 00004CF3 F744040080              	TEST	word [SI+SYSDEV.ATT],DEVTYP
 23043 00004CF8 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 23044 00004CFA 89F0                    	MOV	AX,SI
 23045                                  	;add	si,10
 23046 00004CFC 83C60A                  	ADD	SI,SYSDEV.NAME
 23047                                  
 23048                                  ;hkn; NAME1 is in DOSDATA
 23049 00004CFF BF[0805]                	MOV	DI,NAME1
 23050 00004D02 B90400                  	MOV	CX,4			; All devices are 8 letters
 23051 00004D05 F3A7                    	REPE	CMPSW			; Check for name in list
 23052 00004D07 89C6                    	MOV	SI,AX
 23053 00004D09 7415                    	JZ	short IOCHK		; Found it?
 23054                                  SKIPDEV:
 23055 00004D0B C534                    	LDS	SI,[SI]			; Get address of next device
 23056 00004D0D 83FEFF                  	CMP	SI,-1			; At end of list?
 23057 00004D10 75E1                    	JNZ	short LOOKIO
 23058                                  RET31:	
 23059 00004D12 F9                      	STC				; Not found
 23060                                  RETNV:	
 23061 00004D13 8CD1                    	MOV	CX,SS
 23062 00004D15 8ED9                    	MOV	DS,CX
 23063                                  
 23064 00004D17 8F06[0805]              	POP	WORD [NAME1]
 23065 00004D1B 58                      	POP	AX
 23066 00004D1C 59                      	POP	CX
 23067 00004D1D 5F                      	POP	DI
 23068 00004D1E 5E                      	POP	SI
 23069 00004D1F C3                      	RETN
 23070                                  
 23071                                  IOCHK:
 23072                                  ;hkn; SS override for DEVPT
 23073 00004D20 368C1E[5805]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 23074                                  	;mov	bh,[si+4]
 23075 00004D25 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 23076 00004D28 80CFC0                  	OR	BH,0C0h
 23077 00004D2B 80E7DF                  	and	bh,0DFh
 23078                                  	;AND	BH,~(020h)		; Clears Carry
 23079 00004D2E 368936[5605]            	MOV	[SS:DEVPT],SI
 23080 00004D33 EBDE                    	JMP	short RETNV
 23081                                  
 23082                                  ;BREAK <Build_device_ent - Make a Directory entry>
 23083                                  ;---------------------------------------------------------------------------
 23084                                  ; Procedure Name : Build_device_ent
 23085                                  ;
 23086                                  ; Inputs:
 23087                                  ;	[NAME1] has name
 23088                                  ;	BH is attribute field (supplied by DEVNAME)
 23089                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 23090                                  ; Function:
 23091                                  ;	Build a directory entry for a device at DEVFCB
 23092                                  ; Outputs:
 23093                                  ;	BX points to DEVFCB
 23094                                  ;	SI points to dir_first field
 23095                                  ;	AH = input BH
 23096                                  ;	AL = 0
 23097                                  ;	dir_first = DEVPT
 23098                                  ;	Zero Set, Carry Clear
 23099                                  ; DS,ES,BP preserved, others destroyed
 23100                                  ;--------------------------------------------------------------------------
 23101                                  
 23102                                  Build_device_ent:
 23103 00004D35 B82020                  	MOV	AX,"  " ; 2020h
 23104                                  
 23105                                  ;hkn; DEVFCB is in DOSDATA
 23106 00004D38 BF[1005]                	MOV	DI,DEVFCB+8		; Point to extent field
 23107                                  
 23108                                  ;	Fill dir_ext	BUGBUG - use ERRNZs for this stuff!
 23109                                  
 23110 00004D3B AB                      	STOSW
 23111 00004D3C AA                      	STOSB				; Blank out extent field
 23112                                  	;mov	al,40h
 23113 00004D3D B040                    	MOV	AL,attr_device
 23114                                  
 23115                                  ;	Fill Dir_attr
 23116                                  
 23117 00004D3F AA                      	STOSB				; Set attribute field
 23118 00004D40 31C0                    	XOR	AX,AX
 23119 00004D42 B90A00                  	MOV	CX,10
 23120                                  
 23121                                  ; Fill dir_pad
 23122                                  
 23123 00004D45 F3AB                    	REP	STOSW			; Fill rest with zeros
 23124 00004D47 E80ACC                  	call	DATE16
 23125                                  
 23126                                  ;hkn; DEVFCB is in DOSDATA
 23127 00004D4A BF[1E05]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 23128 00004D4D 92                      	XCHG	AX,DX
 23129                                  
 23130                                  ; Fill dir_time
 23131                                  
 23132 00004D4E AB                      	STOSW
 23133 00004D4F 92                      	XCHG	AX,DX
 23134                                  
 23135                                  ; Fill dir_date
 23136                                  
 23137 00004D50 AB                      	STOSW
 23138 00004D51 89FE                    	MOV	SI,DI			; SI points to dir_first field
 23139 00004D53 A1[5605]                	MOV	AX,[DEVPT]
 23140                                  
 23141                                  ; Fill dir_first
 23142                                  
 23143 00004D56 AB                      	STOSW				; Dir_first points to device
 23144 00004D57 A1[5805]                	MOV	AX,[DEVPT+2]
 23145                                  ;
 23146                                  ; Fill dir_size_l
 23147                                  ;
 23148 00004D5A AB                      	STOSW
 23149 00004D5B 88FC                    	MOV	AH,BH			; Put device atts in AH
 23150                                  
 23151                                  ;hkn; DEVFCB is in DOSDATA
 23152 00004D5D BB[0805]                	MOV	BX,DEVFCB
 23153 00004D60 30C0                    	XOR	AL,AL			; Set zero, clear carry
 23154 00004D62 C3                      	retn
 23155                                  
 23156                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 23157                                  ;----------------------------------------------------------------------------
 23158                                  ;
 23159                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 23160                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 23161                                  ;   If invalid, reset original CDS to root.
 23162                                  ;
 23163                                  ;   Inputs:	ThisCDS points to CDS of interest
 23164                                  ;		SS:DI points to temp buffer
 23165                                  ;   Outputs:	The current directory string is validated on the appropriate
 23166                                  ;		    drive
 23167                                  ;		ThisDPB changed
 23168                                  ;		ES:DI point to CDS
 23169                                  ;		Carry set if error (currently user FAILed to I 24)
 23170                                  ;   Registers modified: all
 23171                                  ;----------------------------------------------------------------------------
 23172                                  
 23173                                  ValidateCDS:
 23174                                  	; 28/07/2018 - Retro DOS v3.0
 23175                                  
 23176                                     %define  Temp	[bp-2]	; word
 23177                                     %define  SaveCDS	[bp-6]	; dword
 23178                                     %define  SaveCDSL	[bp-6]	; word
 23179                                     %define  SaveCDSH	[bp-4]	; word
 23180                                  
 23181                                  	;Enter
 23182 00004D63 55                      	push	bp
 23183 00004D64 89E5                    	mov	bp,sp
 23184 00004D66 83EC06                  	sub	sp,6
 23185                                  
 23186 00004D69 897EFE                  	MOV	Temp,DI
 23187                                  
 23188                                  ;hkn; SS override
 23189 00004D6C 36C536[5E05]            	LDS	SI,[SS:THISCDS]
 23190 00004D71 8976FA                  	MOV	SaveCDSL,SI
 23191 00004D74 8C5EFC                  	MOV	SaveCDSH,DS
 23192                                  	;EnterCrit critDisk
 23193 00004D77 E895D3                  	call	EcritDisk
 23194                                  	;test	word [si+67],8000h
 23195 00004D7A F744430080              	TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 23196 00004D7F 7403                    	JZ	short _DoSplice
 23197 00004D81 E98900                  	JMP	FatFail
 23198                                  _DoSplice:
 23199 00004D84 30D2                    	XOR	DL,DL
 23200 00004D86 368616[1603]            	XCHG	DL,[SS:NoSetDir]
 23201                                  
 23202                                  ;hkn; SS is DOSDATA
 23203                                  	;Context ES
 23204 00004D8B 16                      	push	ss
 23205 00004D8C 07                      	pop	es
 23206                                  	;Invoke	FStrcpy
 23207 00004D8D E874D2                  	call	FStrCpy
 23208 00004D90 8B76FE                  	MOV	SI,Temp
 23209                                  
 23210                                  ;hkn; SS is DOSDATA
 23211                                  	;Context DS
 23212 00004D93 16                      	push	ss
 23213 00004D94 1F                      	pop	ds	
 23214                                  	;Invoke	Splice
 23215 00004D95 E88122                  	call	Splice
 23216                                  
 23217                                   ;hkn; SS is DOSDATA
 23218                                  	;Context DS			;   FatReadCDS (ThisCDS);
 23219 00004D98 16                      	push	ss
 23220 00004D99 1F                      	pop	ds
 23221 00004D9A 8816[1603]              	MOV	[NoSetDir],DL
 23222 00004D9E C43E[5E05]              	LES	DI,[THISCDS]
 23223                                  	;SAVE	<BP>
 23224 00004DA2 55                      	push	bp
 23225                                  	;Invoke	FATREAD_CDS
 23226 00004DA3 E82911                  	call	FATREAD_CDS	
 23227                                  	;RESTORE <BP>
 23228 00004DA6 5D                      	pop	bp
 23229 00004DA7 7264                    	JC	short FatFail
 23230                                  
 23231 00004DA9 C536[5E05]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 23232                                  	;cmp	word [si+73], -1
 23233 00004DAD 837C49FF                	CMP	word [SI+curdir.ID],-1
 23234 00004DB1 754C                    	JNZ	short RestoreCDS
 23235                                  
 23236                                  ;hkn; SS is DOSDATA
 23237                                  	;Context ES
 23238 00004DB3 16                      	push	ss
 23239 00004DB4 07                      	pop	es
 23240                                  
 23241                                  ;hkn; SS override
 23242                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 23243 00004DB5 36FF36[6E05]            	push	word [SS:WFP_START]
 23244                                  	;cmp	si,[bp-6]
 23245 00004DBA 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 23246 00004DBD 750B                    	JNZ	short DoChdir
 23247                                  	;mov	di,[bp-2]
 23248 00004DBF 8B7EFE                  	MOV	DI,Temp
 23249                                  
 23250                                  ;hkn; SS override
 23251 00004DC2 36893E[6E05]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 23252                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 23253 00004DC7 E83AD2                  	call	FStrCpy
 23254                                  DoChdir:
 23255                                  ;hkn; SS is DOSDATA
 23256                                  	;Context DS
 23257 00004DCA 16                      	push	ss
 23258 00004DCB 1F                      	pop	ds
 23259                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 23260 00004DCC FF36[2A05]              	push	word [SATTRIB]
 23261 00004DD0 55                      	push	bp
 23262                                  	;Invoke	DOS_ChDir
 23263 00004DD1 E8E0EF                  	call	DOS_CHDIR
 23264                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 23265 00004DD4 5D                      	pop	bp
 23266 00004DD5 5B                      	pop	bx
 23267 00004DD6 8F06[6E05]              	pop	word [WFP_START]
 23268 00004DDA 881E[2A05]              	MOV	[SATTRIB],BL
 23269 00004DDE C576FA                  	LDS	SI,SaveCDS
 23270 00004DE1 730F                    	JNC	short SetCluster	;	if (c == -1) {
 23271                                  
 23272                                  ;hkn; SS override for THISCDS
 23273 00004DE3 368936[5E05]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 23274 00004DE8 368C1E[6005]            	MOV	[SS:THISCDS+2],DS
 23275 00004DED 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 23276 00004DEF 884C03                  	MOV	[SI+3],CL		;	    }
 23277                                  SetCluster:
 23278                                  	;mov	word [si+73],0FFFFh
 23279 00004DF2 C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 23280 00004DF7 36C536[5E05]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 23281                                  	; MSDOS 6.0
 23282                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 23283                                  	;JZ	short setdirclus		     ;AN000;;MS.
 23284                                  	;MOV	CX,-1				     ;AN000;;MS.
 23285                                  setdirclus:
 23286                                  	;mov	[si+73],cx
 23287 00004DFC 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 23288                                  RestoreCDS:
 23289 00004DFF C47EFA                  	LES	DI,SaveCDS
 23290 00004E02 36893E[5E05]            	MOV	[SS:THISCDS],DI
 23291 00004E07 368C06[6005]            	MOV	[SS:THISCDS+2],ES
 23292 00004E0C F8                      	CLC
 23293                                  FatFail:
 23294                                  	;LeaveCrit critDisk
 23295 00004E0D E807D3                  	call	LcritDisk
 23296                                  
 23297                                  	;les	di,[bp-6]
 23298 00004E10 C47EFA                  	LES	DI,SaveCDS
 23299                                  	;Leave
 23300 00004E13 89EC                    	mov	sp,bp
 23301 00004E15 5D                      	pop	bp
 23302 00004E16 C3                      	retn
 23303                                  
 23304                                  ; 28/07/2018 - Retro DOS v3.0
 23305                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 23306                                  
 23307                                  ;Break	<CheckThisDevice - Check for being a device>
 23308                                  ;---------------------------------------------------------------------------
 23309                                  ;
 23310                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 23311                                  ;   device specified. We will return carry if there is a device present. 
 23312                                  ;   The forms of devices we will recognize are:
 23313                                  ;
 23314                                  ;	[path]device
 23315                                  ;
 23316                                  ;   Note that the drive letter has *already* been removed. All other forms
 23317                                  ;   are not considered to be devices. If such a device is found we change
 23318                                  ;   the source pointer to point to the device component.
 23319                                  ;
 23320                                  ;   Inputs:	ES is DOSDATA
 23321                                  ;		DS:SI contains name
 23322                                  ;   Outputs:	ES is DOSDATA
 23323                                  ;		DS:SI point to name or device
 23324                                  ;		Carry flag set if device was found
 23325                                  ;		Carry flag reset otherwise
 23326                                  ;   Registers Modified: all except ES:DI, DS
 23327                                  ;----------------------------------------------------------------------------
 23328                                  
 23329                                  CheckThisDevice:
 23330 00004E17 57                      	push	di
 23331 00004E18 56                      	push	si
 23332 00004E19 89F7                    	MOV	DI,SI
 23333                                  ;
 23334                                  ; Check for presence of \dev\ (Dam multiplan!)
 23335                                  ;
 23336 00004E1B 8A04                    	MOV	AL,[SI]
 23337 00004E1D E8090B                  	call	PATHCHRCMP		; is it a path char?
 23338 00004E20 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 23339 00004E22 46                      	INC	SI			; simulate LODSB
 23340                                  ;
 23341                                  ; We have the leading path separator. Look for DEV part.
 23342                                  ;
 23343 00004E23 AD                      	LODSW
 23344 00004E24 0D2020                  	OR	AX,2020h
 23345 00004E27 3D6465                  	cmp	ax,"de"
 23346                                  	;CMP	AX,"e"<< 8 + "d"
 23347 00004E2A 752D                    	JNZ	short NotDevice		; not "de", assume not device
 23348 00004E2C AC                      	LODSB
 23349 00004E2D 0C20                    	OR	AL,20h
 23350 00004E2F 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 23351 00004E31 7526                    	JNZ	short NotDevice
 23352 00004E33 AC                      	LODSB
 23353 00004E34 E8F20A                  	call	PATHCHRCMP		; do we have the last path separator?
 23354 00004E37 7520                    	JNZ	short NotDevice		; no. go for it.
 23355                                  ;
 23356                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 23357                                  ; SI and DevName may destroy DS.
 23358                                  ;
 23359                                  ParseDev:
 23360 00004E39 1E                      	push	ds
 23361 00004E3A 56                      	push	si			; preserve the source pointer
 23362 00004E3B E8810A                  	call	NameTrans		; advance DS:SI
 23363 00004E3E 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 23364 00004E41 F9                      	STC				; simulate a Carry return from DevName
 23365 00004E42 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 23366                                  
 23367                                  ;hkn; SS is DOSDATA
 23368 00004E44 16                      	push	ss
 23369 00004E45 1F                      	pop	ds
 23370                                  
 23371                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 23372                                  ;
 23373                                  ; SR;
 23374                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 23375                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 23376                                  ; old call set the volume attribute bit.
 23377                                  ;
 23378 00004E46 A0[2A05]                	mov	al,[SATTRIB]
 23379 00004E49 A2[2805]                	mov	[ATTRIB],al		;set Attrib for DevName
 23380                                  
 23381                                  ; M026 - end
 23382                                  
 23383 00004E4C E886FE                  	call	DEVNAME
 23384                                  
 23385                                  SkipSearch:
 23386 00004E4F 5E                      	pop	si
 23387 00004E50 1F                      	pop	ds
 23388                                  ;
 23389                                  ; SI points to the beginning of the potential device. If we have a device
 23390                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 23391                                  ; original value. At this point Carry set indicates FILE.
 23392                                  ;
 23393                                  CheckReturn:
 23394 00004E51 5F                      	pop	di			; get original SI
 23395 00004E52 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 23396 00004E54 89FE                    	MOV	SI,DI
 23397                                  Check_Done:
 23398 00004E56 5F                      	pop	di
 23399 00004E57 F5                      	CMC				; invert carry. Carry => device
 23400 00004E58 C3                      	retn
 23401                                  NotDevice:
 23402 00004E59 F9                      	STC
 23403 00004E5A EBF5                    	JMP	short CheckReturn
 23404                                  
 23405                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 23406                                  ;-----------------------------------------------------------------------------
 23407                                  ;
 23408                                  ; Procedure Name : LookupPath
 23409                                  ;
 23410                                  ; Output  DS:SI -> path name,
 23411                                  ;	  ES:DI -> dir entry info buffer
 23412                                  ;	  ES:CX -> extended dir info buffer
 23413                                  ;
 23414                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 23415                                  ;			     FastOpen, DS:SI points to char just one after
 23416                                  ;			     the last char of path name which is fully or
 23417                                  ;			     partially found in FastOPen
 23418                                  ;	  carry flag set : FastOpen not in memory or path name not found
 23419                                  ;
 23420                                  ;----------------------------------------------------------------------------
 23421                                  
 23422                                  LookupPath:
 23423                                  ;	PUSH	AX
 23424                                  
 23425                                  ;hkn; SS override
 23426                                  	;test	byte [ss:FastOpenFlg],1
 23427 00004E5C 36F606[A40F]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 23428 00004E62 7503                    	JNZ	short FASTINST			    ; and this routine is
 23429                                  NOLOOK:
 23430 00004E64 E99700                  	JMP	NOLOOKUP			    ; executed once
 23431                                  
 23432                                  FASTINST:
 23433                                  ;hkn; SS override
 23434                                  	;test	byte [ss:FastOpenFlg],8
 23435 00004E67 36F606[A40F]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 23436 00004E6D 75F5                    	JNZ	short NOLOOK			    ; yes
 23437                                  
 23438 00004E6F BB[730F]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 23439                                  
 23440                                  ;hkn; SS override
 23441 00004E72 368B36[6E05]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 23442 00004E77 BF[840F]                	MOV	DI,Dir_Info_Buff
 23443 00004E7A B9[790F]                	MOV	CX,FastOpen_Ext_Info
 23444 00004E7D B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 23445 00004E7F 1E                      	PUSH	DS
 23446 00004E80 07                      	POP	ES
 23447                                  
 23448                                  ;hkn; SS override
 23449                                  	;call	far [bx+2]
 23450 00004E81 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 23451 00004E84 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 23452                                  
 23453 00004E86 8D5CFE                  	LEA	BX,[SI-2]
 23454                                  
 23455                                  ;hkn; SS override
 23456 00004E89 363B1E[6E05]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 23457 00004E8E 745D                    	JZ	short NOTFOUND			    ; no
 23458                                  
 23459                                  	; 29/07/2019 - Retro DOS v3.2
 23460                                  	; MSDOS 6.0				    ; fully or partially found
 23461 00004E90 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 23462 00004E93 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 23463 00004E95 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 23464                                  
 23465                                  ;hkn; SS override for attrib/sattrib
 23466 00004E96 368A0E[2805]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 23467 00004E9B 368A2E[2A05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 23468 00004EA0 36882E[2805]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 23469 00004EA5 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 23470 00004EA9 E81CFE                  	call	MatchAttributes			    ;AN000;FO.;
 23471                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 23472 00004EAC 59                      	POP	CX				    ;AN000;FO.;
 23473 00004EAD 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 23474                                  parfnd:
 23475                                  
 23476                                  ;hkn; SS override
 23477 00004EAF 368936[A50F]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 23478 00004EB4 89CB                    	MOV	BX,CX
 23479                                  	; MSDOS 6.0
 23480 00004EB6 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 23481                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 23482 00004EB9 36A3[1203]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 23483 00004EBD 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 23484 00004EC0 36A3[7E05]              	MOV	[SS:DIRSTART],AX			    ;AN001;;FO.
 23485                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23486                                  	;mov	ax,[bx+3] ; MSDOS 3.3
 23487 00004EC4 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 23488 00004EC7 36A3[7805]              	MOV	[SS:CLUSNUM],AX			    ;
 23489                                  
 23490 00004ECB 06                      	PUSH	ES				    ; save ES
 23491                                  ;hkn; SS override
 23492 00004ECC 36C41E[4605]            	LES	BX,[SS:THISDPB]			    ; put drive id
 23493 00004ED1 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 23494                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 23495 00004ED4 07                      	POP	ES				    ; pop ES
 23496                                  ;SR;
 23497                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 23498                                  ;indicate it is not a root dir
 23499                                  ;
 23500 00004ED5 36C706[9E05]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 23501                                  
 23502 00004EDC 368C06[A005]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 23503 00004EE1 89FB                    	MOV	BX,DI				    ; start of entry
 23504                                  	;lea	si,[di+1Ah]
 23505 00004EE3 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 23506                                  						    ; dir_first field in the
 23507                                  						    ; dir entry
 23508                                  ;hkn; SS override for FastOpenFlg
 23509                                  	;or	byte [ss:FastOpenFlg],2
 23510 00004EE6 36800E[A40F]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 23511                                  ;	POP	AX
 23512 00004EEC C3                      	RETN
 23513                                  NOTFOUND:
 23514 00004EED 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 23515 00004EF0 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 23516 00004EF2 36C606[A40F]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 23517                                  Partial_Success:
 23518                                  	;and	byte [SS:FastOpenFlg],0FBh
 23519 00004EF8 368026[A40F]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 23520                                  NOLOOKUP:
 23521                                  ;	POP	AX
 23522 00004EFE F9                      	STC
 23523 00004EFF C3                      	RETN
 23524                                  
 23525                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 23526                                  ;-----------------------------------------------------------------------------
 23527                                  ;
 23528                                  ; Procedure Name : InsertPath
 23529                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 23530                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 23531                                  ;	  DS = DOSDATA
 23532                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 23533                                  ;
 23534                                  ;-----------------------------------------------------------------------------
 23535                                  
 23536                                  InsertPath:
 23537 00004F00 9C                      	PUSHF
 23538                                  ;hkn; SS override for FastOpenFlag
 23539                                  	;test	byte [SS:FastOpenFlg], 1
 23540 00004F01 36F606[A40F]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 23541 00004F07 7478                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 23542                                  	;test	byte [ss:FastOpenFlg],2
 23543 00004F09 36F606[A40F]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 23544 00004F0F 740D                    	JZ	short INSERT_DIR_INFO		; no
 23545                                  	;and	byte [ss:FastOpenFlg],0FDh
 23546 00004F11 368026[A40F]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 23547 00004F17 368B3E[A50F]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 23548 00004F1C EB5D                    	JMP	short GET_NEXT2
 23549                                  INSERT_DIR_INFO:				; save registers
 23550 00004F1E 1E                      	PUSH	DS
 23551 00004F1F 06                      	PUSH	ES
 23552 00004F20 53                      	PUSH	BX
 23553 00004F21 56                      	PUSH	SI
 23554 00004F22 57                      	PUSH	DI
 23555 00004F23 51                      	PUSH	CX
 23556 00004F24 50                      	PUSH	AX
 23557                                  
 23558                                  ;hkn; SS override
 23559 00004F25 36C53E[9E05]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 23560 00004F2A BE[790F]                	MOV	SI,FastOpen_Ext_Info
 23561                                  	;mov	ax,[di+6]
 23562 00004F2D 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 23563                                  	; MSDOS 6.0
 23564                                  	;mov	[ss:si+1],ax
 23565 00004F30 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 23566                                  	; 22/07/2019 - Retro DOS v3.2
 23567 00004F34 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 23568                                  
 23569                                  ;hkn; SS is DOSDATA
 23570 00004F37 16                      	push	ss
 23571 00004F38 1F                      	pop	ds
 23572                                  	; MSDOS 3.3	
 23573                                  	;mov	[si+1],ax	
 23574                                  	;MOV	[SI+FEI.dirsec],AX
 23575                                  	; MSDOS 6.0
 23576                                  	;mov	[si+3],ax
 23577 00004F39 894403                  	MOV	[SI+FEI.dirsec+2],AX  ;AN000;>32mb save high dir sector
 23578                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23579 00004F3C A1[7805]                	MOV	AX,[CLUSNUM]		; save next cluster number
 23580                                  	;;mov	[si+5],ax ; MSDOS 6.0
 23581                                  	;mov	[si+3],ax ; MSDOS 3.3
 23582 00004F3F 894405                  	MOV	[SI+FEI.clusnum],AX
 23583                                  ; MSDOS 6.0
 23584 00004F42 A1[1203]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 23585                                  	;mov	[si+7],ax
 23586 00004F45 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 23587 00004F48 A1[7E05]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 23588                                  	;mov	[si+9],ax
 23589 00004F4B 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 23590                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23591 00004F4E 89D8                    	MOV	AX,BX
 23592                                  	;;add	di,16  ; MSDOS 3.3
 23593                                  	;add	di,20  ; MSDOS 6.0
 23594 00004F50 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 23595 00004F53 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 23596                                  	;mov	cl,32
 23597 00004F55 B120                    	MOV	CL,dir_entry.size
 23598 00004F57 F6F1                    	DIV	CL
 23599                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 23600 00004F59 8804                    	mov	[si],al
 23601                                  
 23602 00004F5B 1E                      	PUSH	DS
 23603 00004F5C 07                      	POP	ES
 23604                                  
 23605 00004F5D 8E1E[A005]              	MOV	DS,[CURBUF+2]
 23606 00004F61 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 23607                                  	;cmp	word [di+1Ah],0
 23608 00004F63 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 23609                                  					; never insert info when file is empty
 23610 00004F67 740B                    	JZ	short SKIP_INSERT	; e.g. newly created file
 23611                                  
 23612 00004F69 56                      	PUSH	SI			; ES:BX -> extended info
 23613 00004F6A 5B                      	POP	BX
 23614                                  
 23615                                  	;mov	al,2
 23616 00004F6B B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 23617 00004F6D BE[730F]                	MOV	SI,FastOpenTable
 23618                                  	;call	far [es:si+2]
 23619 00004F70 FF5C02                  	CALL	far [SI+fastopen_entry.name_caching]
 23620                                  
 23621 00004F73 F8                      	CLC
 23622                                  SKIP_INSERT:
 23623 00004F74 58                      	POP	AX
 23624 00004F75 59                      	POP	CX			; restore registers
 23625 00004F76 5F                      	POP	DI
 23626 00004F77 5E                      	POP	SI
 23627 00004F78 5B                      	POP	BX
 23628 00004F79 07                      	POP	ES
 23629 00004F7A 1F                      	POP	DS
 23630                                  GET_NEXT2:
 23631                                  	;or	[ss:FastOpenFlg],8
 23632 00004F7B 36800E[A40F]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 23633                                  					; we got dir info from fastopen so
 23634                                  GET_NEXT_ELEMENT:
 23635 00004F81 9D                      	POPF
 23636 00004F82 C3                      	RETN
 23637                                  
 23638                                  ;============================================================================
 23639                                  ; DEV.ASM, MSDOS 6.0, 1991
 23640                                  ;============================================================================
 23641                                  ; 28/07/2018 - Retro DOS v3.0
 23642                                  
 23643                                  ; DEV.ASM: Retro DOS v2.0 - 14/03/2018
 23644                                  
 23645                                  ;TITLE   DEV - Device call routines
 23646                                  ;NAME    Dev
 23647                                  
 23648                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 23649                                  ;----------------------------------------------------------------------------
 23650                                  ;
 23651                                  ; Procedure Name : IOFUNC
 23652                                  ;
 23653                                  ; Inputs:
 23654                                  ;	DS:SI Points to SFT
 23655                                  ;	AH is function code
 23656                                  ;		= 0 Input
 23657                                  ;		= 1 Input Status
 23658                                  ;		= 2 Output
 23659                                  ;		= 3 Output Status
 23660                                  ;		= 4 Flush
 23661                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 23662                                  ;				   present.
 23663                                  ;	AL = character if output
 23664                                  ; Function:
 23665                                  ;	Perform indicated I/O to device or file
 23666                                  ; Outputs:
 23667                                  ;	AL is character if input
 23668                                  ;	If a status call
 23669                                  ;		zero set if not ready
 23670                                  ;		zero reset if ready (character in AL for input status)
 23671                                  ; For regular files:
 23672                                  ;	Input Status
 23673                                  ;		Gets character but restores position
 23674                                  ;		Zero set on EOF
 23675                                  ;	Input
 23676                                  ;		Gets character advances position
 23677                                  ;		Returns ^Z on EOF
 23678                                  ;	Output Status
 23679                                  ;		Always ready
 23680                                  ; AX altered, all other registers preserved
 23681                                  ;----------------------------------------------------------------------------
 23682                                  
 23683                                  IOFUNC:
 23684 00004F83 368C16[5603]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 23685                                  					; DEVIOBUF
 23686 00004F88 36C706[5403][8003]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 23687 00004F8F 36C706[5803]0100        	MOV	WORD [SS:IOSCNT],1
 23688 00004F96 36A3[8003]              	MOV	WORD [SS:DEVIOBUF],AX
 23689                                  	;test	word [si+5],8000h
 23690 00004F9A F744050080              	TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet
 23691 00004F9F 7403                    	JZ	short IOTO22		;AN000;
 23692 00004FA1 E98500                  	JMP	IOTOFILE		;AN000;
 23693                                  IOTO22:
 23694                                  	;test	word [si+5],80h ; 17/05/2019
 23695 00004FA4 F744058000              	TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 23696 00004FA9 7502                    	JNZ	short IOTO33		;AN000;
 23697 00004FAB EB7C                    	JMP	IOTOFILE		;AN000;
 23698                                  IOTO33:
 23699 00004FAD E886C6                  	call	save_world
 23700 00004FB0 8CDA                    	MOV	DX,DS
 23701 00004FB2 8CD3                    	MOV	BX,SS
 23702 00004FB4 8EDB                    	MOV	DS,BX
 23703 00004FB6 8EC3                    	MOV	ES,BX
 23704 00004FB8 31DB                    	XOR	BX,BX
 23705 00004FBA 80FC05                  	cmp	ah,5		    ; system wait enabled?
 23706 00004FBD 7504                    	jnz	short _no_sys_wait
 23707 00004FBF 81CB0004                	or	bx,0400H	    ; Set bit 10 in status word for driver
 23708                                  				    ; It is up to device driver to carry out
 23709                                  				    ; appropriate action.
 23710                                  _no_sys_wait:
 23711 00004FC3 891E[4903]              	MOV	[IOCALL_REQSTAT],BX
 23712 00004FC7 31DB                    	XOR	BX,BX
 23713 00004FC9 881E[5303]              	MOV	[IOMED],BL
 23714                                  
 23715 00004FCD 88E3                    	MOV	BL,AH		 	; get function
 23716 00004FCF 8AA7[4213]              	MOV	AH,[BX+LenTab]
 23717 00004FD3 D1E3                    	SHL	BX,1
 23718 00004FD5 8B8F[4813]              	MOV	CX,[BX+CmdTab]
 23719 00004FD9 BB[4603]                	MOV	BX,IOCALL
 23720 00004FDC 8826[4603]              	MOV	[IOCALL_REQLEN],AH
 23721 00004FE0 882E[4803]              	MOV	[IOCALL_REQFUNC],CH
 23722                                  
 23723 00004FE4 8EDA                    	MOV	DS,DX
 23724 00004FE6 E84401                  	CALL	DEVIOCALL
 23725 00004FE9 368B3E[4903]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 23726                                  	;test	di,8000h
 23727                                  	;jnz	short DevErr
 23728 00004FEE 21FF                    	and	di,di
 23729 00004FF0 7820                    	js	short DevErr
 23730                                  
 23731                                  OKDevIO:
 23732 00004FF2 8CD0                    	MOV	AX,SS
 23733 00004FF4 8ED8                    	MOV	DS,AX
 23734                                  
 23735                                  	;cmp	ch, 5
 23736 00004FF6 80FD05                  	CMP	CH,DEVRDND
 23737 00004FF9 7506                    	JNZ	short DNODRD
 23738 00004FFB A0[5303]                	MOV	AL,[IORCHR]
 23739 00004FFE A2[8003]                	MOV	[DEVIOBUF],AL
 23740                                  
 23741                                  DNODRD: 
 23742 00005001 8A26[4A03]              	MOV	AH,[IOCALL_REQSTAT+1]
 23743 00005005 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 23744                                  	;and	ah,2
 23745 00005007 80E402                  	AND	AH,STBUI>>8
 23746                                  
 23747                                  QuickReturn:				;AN000; 2/13/KK
 23748 0000500A E816C6                  	call	restore_world
 23749                                  
 23750                                  	; SR;
 23751                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 23752                                  	; IoStatFail = -1 (set after return from the I24)
 23753                                  	;
 23754                                  
 23755                                  	; MSDOS 6.0
 23756                                  	;pushf
 23757                                  	;mov	al,[ss:IoStatFail]	;assume fail error
 23758                                  	;cbw				;sign extend to word
 23759                                  	;cmp	ax,-1
 23760                                  	;jne	short not_fail_ret
 23761                                  	;inc	byte [ss:IoStatFail]
 23762                                  	;popf
 23763                                  	;retn
 23764                                  
 23765                                  ;not_fail_ret:
 23766 0000500D 36A1[8003]              	MOV	AX,[SS:DEVIOBUF]	;ss override
 23767                                  	;popf
 23768 00005011 C3                      	retn
 23769                                  
 23770                                  ;IOTOFILEJ:
 23771                                  ;	JMP	SHORT IOTOFILE
 23772                                  
 23773                                  DevErr:
 23774 00005012 88CC                    	MOV	AH,CL
 23775 00005014 E8F30A                  	call	CHARHARD
 23776 00005017 3C01                    	CMP	AL,1
 23777 00005019 7506                    	JNZ	short NO_RETRY
 23778 0000501B E805C6                  	call	restore_world		
 23779 0000501E E962FF                  	JMP	IOFUNC	; 10/08/2018
 23780                                  
 23781                                  NO_RETRY:
 23782                                  
 23783                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 23784                                  	; ready so that DOS doesn't get caught in a status loop when user 
 23785                                  	; simply wants to ignore the error.
 23786                                  	;
 23787                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 23788                                  	; should be checked by the caller on return
 23789                                  	;
 23790                                  
 23791                                  					; SS override
 23792 00005021 368026[4A03]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 23793                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI >> 8)
 23794                                  
 23795                                  	; SR;
 23796                                  	; Check if user failed
 23797                                  	;
 23798                                  
 23799                                  	; MSDOS 6.0
 23800                                  	;cmp	al,3
 23801                                  	;jnz	short not_fail
 23802                                  	;dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 23803                                  ;not_fail:
 23804 00005027 EBC9                    	JMP	short OKDevIO
 23805                                  
 23806                                  IOTOFILE:
 23807 00005029 08E4                    	OR	AH,AH
 23808 0000502B 7423                    	JZ	short IOIN
 23809 0000502D FECC                    	DEC	AH
 23810 0000502F 7405                    	JZ	short IOIST
 23811 00005031 FECC                    	DEC	AH
 23812 00005033 7411                    	JZ	short IOUT
 23813 00005035 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 23814                                  
 23815                                  IOIST:
 23816                                  	;push	word [si+15h]
 23817 00005036 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 23818                                  	;push	word [si+17h]
 23819 00005039 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 23820 0000503C E81100                  	CALL	IOIN
 23821                                  	;pop	word [si+17h]
 23822 0000503F 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 23823                                  	;pop	word [si+15h]
 23824 00005042 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 23825 00005045 C3                      	retn
 23826                                  
 23827                                  IOUT:
 23828 00005046 E81B00                  	CALL	SETXADDR
 23829 00005049 E806F0                  	call	DOS_WRITE
 23830 0000504C E84800                  	CALL	RESTXADDR	; If you change this into a jmp don't
 23831                                  IOUT_retn:
 23832 0000504F C3                      	retn			; come crying to me when things don't
 23833                                  				; work ARR
 23834                                  IOIN:
 23835 00005050 E81100                  	CALL	SETXADDR
 23836                                  					; SS override for DOS34_FLAG
 23837                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 23838 00005053 E871EE                  	CALL	DOS_READ
 23839                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 23840 00005056 09C9                    	OR	CX,CX			; Check EOF
 23841 00005058 E83C00                  	CALL	RESTXADDR
 23842                                  					; SS override
 23843 0000505B 36A0[8003]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 23844 0000505F 75EE                    	jnz	short IOUT_retn	
 23845 00005061 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 23846 00005063 C3                      	retn
 23847                                  
 23848                                  SETXADDR:
 23849                                  					; SS override
 23850 00005064 368F06[3603]            	POP	WORD [SS:CALLSCNT]	; Return address
 23851                                  
 23852 00005069 E8CAC5                  	call	save_world
 23853                                  
 23854                                  					; SS override for DMAADD and THISSFT
 23855 0000506C 36FF36[F802]            	PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 23856 00005071 36FF36[FA02]            	PUSH	WORD [SS:DMAADD+2]
 23857 00005076 368C1E[5C05]            	MOV	[SS:THISSFT+2],DS
 23858                                  
 23859 0000507B 16                      	push	ss
 23860 0000507C 1F                      	pop	ds
 23861                                  
 23862 0000507D 8936[5A05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 23863 00005081 8B0E[5603]              	MOV	CX,[IOXAD+2]
 23864 00005085 890E[FA02]              	MOV	[DMAADD+2],CX
 23865 00005089 8B0E[5403]              	MOV	CX,[IOXAD]
 23866 0000508D 890E[F802]              	MOV	[DMAADD],CX		; Set byte trans addr
 23867 00005091 8B0E[5803]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 23868 00005095 EB0F                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 23869                                  
 23870                                  RESTXADDR:
 23871 00005097 8F06[3603]              	POP	WORD [CALLSCNT]		; Return address
 23872 0000509B 8F06[FA02]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 23873 0000509F 8F06[F802]              	POP	WORD [DMAADD]
 23874                                  
 23875 000050A3 E87DC5                  	call	restore_world
 23876                                  					; SS override
 23877                                  RESTRET:
 23878 000050A6 36FF26[3603]            	JMP	WORD [SS:CALLSCNT]	; Return address
 23879                                  
 23880                                  
 23881                                  ; 29/07/2018 - Retro DOS v3.0
 23882                                  ; IBMDOS.COM (1987) - Offset 4D82h
 23883                                  
 23884                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 23885                                  
 23886                                  ;----------------------------------------------------------------------------
 23887                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 23888                                  ;
 23889                                  ;	Dev_Open_SFT issues an open call to the device associated with
 23890                                  ;	the SFT.
 23891                                  ;
 23892                                  ;	ENTRY	(ES:DI) = SFT
 23893                                  ;	EXIT	none
 23894                                  ;	USES	all
 23895                                  ;----------------------------------------------------------------------------
 23896                                  
 23897                                  DEV_OPEN_SFT:
 23898 000050AB E888C5                  	call	save_world
 23899                                  	;mov	al,0Dh	
 23900 000050AE B00D                    	MOV	AL,DEVOPN
 23901 000050B0 EB05                    	JMP	SHORT DO_OPCLS
 23902                                  
 23903                                  ;----------------------------------------------------------------------------
 23904                                  ; Procedure Name : DEV_CLOSE_SFT
 23905                                  ;
 23906                                  ; Inputs:
 23907                                  ;	ES:DI Points to SFT
 23908                                  ; Function:
 23909                                  ;	Issue a CLOSE call to the correct device
 23910                                  ; Outputs:
 23911                                  ;	None
 23912                                  ; ALL preserved
 23913                                  ;----------------------------------------------------------------------------
 23914                                  
 23915                                  DEV_CLOSE_SFT:
 23916 000050B2 E881C5                  	call	save_world
 23917                                  	;mov	al,0Eh	
 23918 000050B5 B00E                    	MOV	AL,DEVCLS
 23919                                  
 23920                                  	; Main entry for device open and close. AL contains the function 
 23921                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 23922                                  	; open/close to block devices. This allows networks to function but 
 23923                                  	; does NOT hang up with bogus change-line code.
 23924                                  
 23925                                  	;entry	DO_OPCLS
 23926                                  DO_OPCLS:
 23927                                  	; Is the SFT for the net?  If so, no action necessary.
 23928                                  
 23929                                  	; MSDOS 3.3
 23930                                  	;call	IsSFTNet
 23931                                  	;jnz	short OPCLS_DONE
 23932                                  
 23933                                  	; MSDOS 6.0
 23934                                  	;test	word [es:di+5],8000h
 23935 000050B7 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 23936 000050BD 756A                    	JNZ	short OPCLS_DONE	; NOP on net SFTs
 23937 000050BF 30E4                    	XOR	AH,AH			; Unit
 23938                                  	;test	word [es:di+5],80h
 23939 000050C1 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 23940                                  	;les	di,[es:di+7]
 23941 000050C7 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 23942 000050CB 7513                    	JNZ	short GOT_DEV_ADDR
 23943                                  
 23944                                  	; We are about to call device open/close on a block driver. If no 
 23945                                  	; sharing then just short circuit to done.
 23946                                  	
 23947                                  ;;;;;	invoke	CheckShare
 23948                                  
 23949                                  	; MSDOS 3.3
 23950                                  	;call	CheckShare	; cmp byte [cs:fShare],0
 23951                                  	;jz	short OPCLS_DONE
 23952                                  
 23953                                  	; MSDOS 6.0
 23954                                  					; SS override
 23955 000050CD 36803E[CF02]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 23956 000050D3 7654                    	JBE	short OPCLS_DONE	;AN010; yes
 23957                                  
 23958                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23959                                  	;mov	ah,[es:di+1]
 23960 000050D5 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 23961 000050D9 268A0D                  	mov	cl,[es:di]
 23962                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 23963                                  	;les	di,[es:di+12h]
 23964 000050DC 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 23965                                  GOT_DEV_ADDR:				; ES:DI -> device
 23966                                  	;test	word [es:di+4],800h
 23967 000050E0 26F745040008            	TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 23968 000050E6 7441                    	JZ	short OPCLS_DONE	; Device can't
 23969 000050E8 06                      	PUSH	ES
 23970 000050E9 1F                      	POP	DS
 23971 000050EA 89FE                    	MOV	SI,DI			; DS:SI -> device
 23972                                  OPCLS_RETRY:
 23973                                  	;Context ES
 23974 000050EC 16                      	push	ss
 23975 000050ED 07                      	pop	es
 23976                                  					; DEVCALL is in DOSDATA
 23977 000050EE BF[2403]                	MOV	DI,DEVCALL
 23978                                  
 23979 000050F1 89FB                    	MOV	BX,DI
 23980 000050F3 50                      	PUSH	AX
 23981                                  	;mov	al,13
 23982 000050F4 B00D                    	MOV	AL,DOPCLHL
 23983 000050F6 AA                      	STOSB				; Length
 23984 000050F7 58                      	POP	AX
 23985 000050F8 86E0                    	XCHG	AH,AL
 23986 000050FA AA                      	STOSB				; Unit
 23987 000050FB 86E0                    	XCHG	AH,AL
 23988 000050FD AA                      	STOSB				; Command
 23989 000050FE 26C7050000              	MOV	WORD [ES:DI],0		; Status
 23990 00005103 50                      	PUSH	AX			; Save Unit,Command
 23991                                  	;invoke	DEVIOCALL2
 23992 00005104 E82900                  	call	DEVIOCALL2
 23993                                  
 23994                                  	;mov	di,[es:bx+3]
 23995 00005107 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 23996                                  	;test	di,8000h
 23997                                  	;jz	short OPCLS_DONEP	
 23998 0000510B 21FF                    	and	di,di
 23999 0000510D 7919                    	jns	short OPCLS_DONEP	; No error
 24000                                  	;test	word [si+4],8000h
 24001                                  	; 22/11/2022 (!BugFix!)
 24002                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVTYP
 24003 0000510F F744040080              	test	word [SI+SYSDEV.ATT],DEVTYP ; 22/11/2022
 24004 00005114 7404                    	JZ	short BLKDEV
 24005 00005116 B486                    	MOV	AH,86H			; Read error in data, Char dev
 24006 00005118 EB04                    	JMP	SHORT HRDERR
 24007                                  
 24008                                  BLKDEV:
 24009 0000511A 88C8                    	MOV	AL,CL			; Drive # in AL
 24010 0000511C B406                    	MOV	AH,6			; Read error in data, Blk dev
 24011                                  HRDERR:
 24012                                  	;invoke	CHARHARD
 24013 0000511E E8E909                  	call	CHARHARD
 24014 00005121 3C01                    	CMP	AL,1
 24015 00005123 7503                    	JNZ	short OPCLS_DONEP	; IGNORE or FAIL
 24016                                  					;  Note that FAIL is essentually IGNORED
 24017 00005125 58                      	POP	AX			; Get back Unit, Command
 24018 00005126 EBC4                    	JMP	short OPCLS_RETRY
 24019                                  
 24020                                  OPCLS_DONEP:
 24021 00005128 58                      	POP	AX			; Clean stack
 24022                                  OPCLS_DONE:
 24023 00005129 E8F7C4                  	call	restore_world
 24024 0000512C C3                      	retn
 24025                                  
 24026                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 24027                                  ;----------------------------------------------------------------------------
 24028                                  ;**	DevIoCall  - Call Device
 24029                                  ;
 24030                                  ;	ENTRY	DS:SI Points to device SFT
 24031                                  ;		ES:BX Points to request data
 24032                                  ;	EXIT	DS:SI -> Device driver
 24033                                  ;	USES	DS:SI,AX
 24034                                  ;----------------------------------------------------------------------------
 24035                                  ;**	DevIoCall2 - Call Device
 24036                                  ;
 24037                                  ;	ENTRY	DS:SI Points to DPB
 24038                                  ;		ES:BX Points to request data
 24039                                  ;	EXIT	DS:SI -> Device driver
 24040                                  ;	USES	DS:SI,AX
 24041                                  ;----------------------------------------------------------------------------
 24042                                  
 24043                                  DEVIOCALL:
 24044                                  					; SS override for CALLSSEC, 
 24045                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 24046 0000512D C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 24047                                  
 24048                                  	;entry	DEVIOCALL2
 24049                                  DEVIOCALL2:
 24050                                  	;EnterCrit critDevice
 24051 00005130 E8ECCF                  	call	EcritDevice
 24052                                  
 24053                                  	; 23/07/2019 - Retro DOS v3.2
 24054                                  
 24055                                  	; MSDOS 6.0
 24056                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 24057                                  	;test	byte [si+5],80h
 24058 00005133 F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 24059 00005137 7548                    	jnz	short chardev2		;AN000; >32mb no
 24060                                  	
 24061                                  	;cmp	byte [es:bx+2],4
 24062 00005139 26807F0204              	CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 24063 0000513E 740E                    	JZ	short chkext		;AN000; >32mb   yes
 24064                                  	;cmp	byte [es:bx+2],8
 24065 00005140 26807F0208              	CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 24066 00005145 7407                    	JZ	short chkext		;AN000; >32mb   yes
 24067                                  	;cmp	byte [es:bx+2],9
 24068 00005147 26807F0209              	CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 24069                                  					;AN000; >32mb write/verify ?
 24070 0000514C 7533                    	JNZ	short chardev2		;AN000; >32mb no
 24071                                  chkext:
 24072                                  	;CALL	RW_SC			;AN000;LB. use secondary cache if there
 24073                                  	;JC	short dev_exit		;AN000;LB. done
 24074                                  
 24075                                  	;test	byte [si+4],2
 24076 0000514E F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 24077 00005152 741D                    	JZ	short chksector		;AN000;>32mb   no
 24078 00005154 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 24079 00005158 36A1[3803]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 24080 0000515C 36C706[3803]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 24081 00005163 36A3[3E03]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 24082 00005167 36A1[B005]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 24083 0000516B 36A3[4003]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 24084 0000516F EB10                    	JMP	short chardev2		;AN000; >32mb
 24085                                  chksector:				;AN000; >32mb
 24086 00005171 36833E[B005]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 24087 00005177 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 24088                                  	;mov	word [es:bx+3],8107h
 24089 00005179 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 24090                                  					;AN000; >32mb
 24091 0000517F EB1D                    	JMP	SHORT dev_exit		;AN000; >32mb
 24092                                  
 24093                                  chardev2:				;AN000;
 24094                                  
 24095                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 24096                                  	; preserved
 24097                                  
 24098                                  	;mov	ax,[si+6]
 24099 00005181 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 24100 00005184 36A3[4203]              	MOV	[SS:CALLDEVAD],AX
 24101 00005188 368C1E[4403]            	MOV	[SS:CALLDEVAD+2],DS
 24102 0000518D 36FF1E[4203]            	CALL	far [SS:CALLDEVAD]
 24103                                  	;mov	ax,[si+8]
 24104 00005192 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 24105 00005195 36A3[4203]              	MOV	[SS:CALLDEVAD],AX
 24106 00005199 36FF1E[4203]            	CALL	far [SS:CALLDEVAD]
 24107                                  	; MSDOS 6.0
 24108                                  	;CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 24109                                  	;JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 24110                                  dev_exit:
 24111                                  	;LeaveCrit critDevice
 24112 0000519E E886CF                  	call	LcritDevice
 24113 000051A1 C3                      	retn
 24114                                  
 24115                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 24116                                  ;---------------------------------------------------------------------------
 24117                                  ;
 24118                                  ; Procedure Name : SETREAD, SETWRITE
 24119                                  ;
 24120                                  ; Inputs:
 24121                                  ;	DS:BX = Transfer Address
 24122                                  ;	CX = Record Count
 24123                                  ;	DX = Starting Record
 24124                                  ;	AH = Media Byte
 24125                                  ;	AL = Unit Code
 24126                                  ; Function:
 24127                                  ;	Set up the device call header at DEVCALL
 24128                                  ; Output:
 24129                                  ;	ES:BX Points to DEVCALL
 24130                                  ; No other registers effected
 24131                                  ;
 24132                                  ;---------------------------------------------------------------------------
 24133                                  
 24134                                  SETREAD:
 24135 000051A2 57                      	PUSH	DI
 24136 000051A3 51                      	PUSH	CX
 24137 000051A4 50                      	PUSH	AX
 24138 000051A5 B104                    	MOV	CL,DEVRD ; mov cl,4
 24139                                  SETCALLHEAD:
 24140 000051A7 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 24141 000051A9 16                      	PUSH	SS
 24142 000051AA 07                      	POP	ES
 24143                                  					; DEVCALL is in DOSDATA
 24144 000051AB BF[2403]                	MOV	DI,DEVCALL
 24145                                  
 24146 000051AE AA                      	STOSB				; length
 24147 000051AF 58                      	POP	AX
 24148 000051B0 AA                      	STOSB				; Unit
 24149 000051B1 50                      	PUSH	AX
 24150 000051B2 88C8                    	MOV	AL,CL
 24151 000051B4 AA                      	STOSB				; Command code
 24152 000051B5 31C0                    	XOR	AX,AX
 24153 000051B7 AB                      	STOSW				; Status
 24154 000051B8 83C708                  	ADD	DI,8			; Skip link fields
 24155 000051BB 58                      	POP	AX
 24156 000051BC 86E0                    	XCHG	AH,AL
 24157 000051BE AA                      	STOSB				; Media byte
 24158 000051BF 86C4                    	XCHG	AL,AH
 24159 000051C1 50                      	PUSH	AX
 24160 000051C2 89D8                    	MOV	AX,BX
 24161 000051C4 AB                      	STOSW
 24162 000051C5 8CD8                    	MOV	AX,DS
 24163 000051C7 AB                      	STOSW				; Transfer addr
 24164 000051C8 59                      	POP	CX			; Real AX
 24165 000051C9 58                      	POP	AX			; Real CX
 24166 000051CA AB                      	STOSW				; Count
 24167 000051CB 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 24168 000051CC AB                      	STOSW				; Start
 24169 000051CD 91                      	XCHG	AX,CX
 24170 000051CE 87D1                    	XCHG	DX,CX
 24171 000051D0 5F                      	POP	DI
 24172                                  					; DEVCALL is in DOSDATA
 24173 000051D1 BB[2403]                	MOV	BX,DEVCALL
 24174 000051D4 C3                      	retn
 24175                                  
 24176                                  	;entry	SETWRITE
 24177                                  SETWRITE:
 24178                                  
 24179                                  ; Inputs:
 24180                                  ;	DS:BX = Transfer Address
 24181                                  ;	CX = Record Count
 24182                                  ;	DX = Starting Record
 24183                                  ;	AH = Media Byte
 24184                                  ;	AL = Unit Code
 24185                                  ; Function:
 24186                                  ;	Set up the device call header at DEVCALL
 24187                                  ; Output:
 24188                                  ;	ES:BX Points to DEVCALL
 24189                                  ; No other registers effected
 24190                                  
 24191 000051D5 57                      	PUSH	DI
 24192 000051D6 51                      	PUSH	CX
 24193 000051D7 50                      	PUSH	AX
 24194 000051D8 B108                    	MOV	CL,DEVWRT ; mov cl,8
 24195 000051DA 36020E[CB02]            	ADD	CL,[SS:VERFLG]		; SS override
 24196 000051DF EBC6                    	JMP	SHORT SETCALLHEAD
 24197                                  
 24198                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 24199                                  ;---------------------------------------------------------------------------
 24200                                  ;
 24201                                  ; Procedure Name : RW_SC
 24202                                  ;
 24203                                  ; Inputs:
 24204                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 24205                                  ;	 [SC_STATUS]= SC validity status
 24206                                  ;	 [SEQ_SECTOR]= last sector read
 24207                                  ; Function:
 24208                                  ;	Read from or write through secondary cache
 24209                                  ; Output:
 24210                                  ;	ES:BX Points to DEVCALL
 24211                                  ;	carry clear, I/O is not done
 24212                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 24213                                  ;	carry set, I/O is done
 24214                                  ;
 24215                                  ;----------------------------------------------------------------------------
 24216                                  
 24217                                  ;procedure   RW_SC,NEAR		;AN000;
 24218                                  ;
 24219                                  ;	; SS override for all variables used.
 24220                                  ;
 24221                                  ;	CMP	[SC_CACHE_COUNT],0	;AN000;LB. secondary cache exists?
 24222                                  ;	JZ	scexit4 		;AN000;LB. no, do nothing
 24223                                  ;	CMP	[CALLSCNT],1		;AN000;LB. sector count = 1 (buffer I/O)
 24224                                  ;	JNZ	scexit4 		;AN000;LB. no, do nothing
 24225                                  ;	PUSH	CX			    ;AN000;;LB.
 24226                                  ;	PUSH	DX			    ;AN000;;LB. yes
 24227                                  ;	PUSH	DS			    ;AN000;;LB. save registers
 24228                                  ;	PUSH	SI			    ;AN000;;LB.
 24229                                  ;	PUSH	ES			    ;AN000;;LB.
 24230                                  ;	PUSH	DI			    ;AN000;;LB.
 24231                                  ;	MOV	DX,WORD PTR [CALLSSEC]	    ;AN000;;LB.  starting sector
 24232                                  ;	CMP	BYTE PTR [DEVCALL.REQFUNC],DEVRD ;AN000;LB. read ?
 24233                                  ;	JZ	doread			    ;AN000;LB. yes
 24234                                  ;	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 24235                                  ;	JMP	scexit2 		    ;AN000;LB. back to normal
 24236                                  ;scexit4:				    ;AN000;
 24237                                  ;	CLC				    ;AN000;LB. I/O not done yet
 24238                                  ;	return				    ;AN000;LB.
 24239                                  ;doread: 				    ;AN000;
 24240                                  ;	CALL	SC2BUF			    ;AN000;LB. check if in SC
 24241                                  ;	JC	readSC			    ;AN000;LB.
 24242                                  ;	MOV	[DEVCALL.REQSTAT],STDON     ;AN000;LB. fake done and ok
 24243                                  ;	STC				    ;AN000;LB. set carry
 24244                                  ;	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 24245                                  ;readSC: 				    ;AN000;
 24246                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB. subtract sector num from
 24247                                  ;	MOV	CX,WORD PTR [CALLSSEC]	    ;AN000;;LB. saved sequential sector
 24248                                  ;	SUB	CX,WORD PTR [SEQ_SECTOR]    ;AN000;;LB. number
 24249                                  ;	SBB	AX,WORD PTR [SEQ_SECTOR+2]  ;AN000;;LB.
 24250                                  ;	CMP	AX,0			    ;AN000;;LB. greater than 64K
 24251                                  ;	JNZ	saveseq2		    ;AN000;;LB. yes,save seq. sector #
 24252                                  ;chklow: 						
 24253                                  ;	CMP	CX,1			    ;AN000;;LB. <= 1
 24254                                  ;	JA	saveseq2		    ;AN000;;LB. no, not sequential
 24255                                  ;	MOV	[SC_STATUS],-1		    ;AN000;;LB. prsume all SC valid
 24256                                  ;	MOV	AX,[SC_CACHE_COUNT]	    ;AN000;;LB. yes, sequential
 24257                                  ;	MOV	[CALLSCNT],AX		    ;AN000;;LB. read continuous sectors
 24258                                  ;readsr:
 24259                                  ;	MOV	AX,WORD PTR [CALLXAD+2]     ;AN000;;LB. save buffer addr
 24260                                  ;	MOV	[TEMP_VAR2],AX		    ;AN000;;LB. in temp vars
 24261                                  ;	MOV	AX,WORD PTR [CALLXAD]	    ;AN000;;LB.
 24262                                  ;	MOV	[TEMP_VAR],AX		    ;AN000;;LB.
 24263                                  ;						
 24264                                  ;	MOV	AX,WORD PTR [SC_CACHE_PTR]  ;AN000;LB. use SC cache addr as
 24265                                  ;	MOV	WORD PTR [CALLXAD],AX	    ;AN000;LB. transfer addr
 24266                                  ;	MOV	AX,WORD PTR [SC_CACHE_PTR+2] ;AN000;LB.
 24267                                  ;	MOV	WORD PTR [CALLXAD+2],AX     ;AN000;LB.
 24268                                  ;	MOV	[SC_FLAG],1		    ;AN000;LB. flag it for later;
 24269                                  ;	MOV	AL,[SC_DRIVE]		    ;AN000;;LB. current drive
 24270                                  ;	MOV	[CURSC_DRIVE],AL	    ;AN000;;LB. set current drive
 24271                                  ;	MOV	AX,WORD PTR [CALLSSEC]	    ;AN000;;LB. current sector
 24272                                  ;	MOV	[CURSC_SECTOR],AX	    ;AN000;;LB. set current sector
 24273                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB.
 24274                                  ;	MOV	[CURSC_SECTOR+2],AX	    ;AN000;;LB.
 24275                                  ;saveseq2:				    ;AN000;
 24276                                  ;	CLC				    ;AN000;LB. clear carry
 24277                                  ;saveseq:				    ;AN000;	
 24278                                  ;	MOV	AX,[HIGH_SECTOR]	    ;AN000;LB. save current sector #
 24279                                  ;	MOV	WORD PTR [SEQ_SECTOR+2],AX  ;AN000;LB. for access mode ref.
 24280                                  ;	MOV	AX,[CALLSSEC]		    ;AN000;LB.	
 24281                                  ;	MOV	WORD PTR [SEQ_SECTOR],AX    ;AN000;LB.	
 24282                                  ;	JMP	short scexit 		    ;AN000;LB.	
 24283                                  ;						
 24284                                  ;scexit2:				    ;AN000;LB.
 24285                                  ;	CLC				    ;AN000;LB.	clear carry
 24286                                  ;scexit: 				    ;AN000;		
 24287                                  ;	POP	DI			    ;AN000;;LB.
 24288                                  ;	POP	ES			    ;AN000;;LB. restore registers
 24289                                  ;	POP	SI			    ;AN000;;LB.
 24290                                  ;	POP	DS			    ;AN000;;LB.
 24291                                  ;	POP	DX			    ;AN000;;LB.
 24292                                  ;	POP	CX			    ;AN000;;LB.
 24293                                  ;	return				    ;AN000;;LB.
 24294                                  ;							
 24295                                  ;EndProc RW_SC				    ;AN000;
 24296                                  
 24297                                  ;Break	<IN_SC -- check if in secondary cache>
 24298                                  ;--------------------------------------------------------------------------
 24299                                  ;
 24300                                  ; Procedure Name : IN_SC
 24301                                  ;
 24302                                  ; Inputs:  [SC_DRIVE]= requesting drive
 24303                                  ;	   [CURSC_DRIVE]= current SC drive
 24304                                  ;	   [CURSC_SECTOR] = starting scetor # of SC
 24305                                  ;	   [SC_CACHE_COUNT] = SC count
 24306                                  ;	   [HIGH_SECTOR]:DX= sector number
 24307                                  ; Function:
 24308                                  ;	Check if the sector is in secondary cache
 24309                                  ; Output:
 24310                                  ;	carry clear, in SC
 24311                                  ;	   CX= the index in the secondary cache
 24312                                  ;	carry set, not in SC
 24313                                  ;
 24314                                  ;---------------------------------------------------------------------------
 24315                                  
 24316                                  ;procedure   IN_SC,NEAR		    ;AN000;
 24317                                  ;
 24318                                  ;	; SS override for all variables used
 24319                                  ;
 24320                                  ;	MOV	AL,[SC_DRIVE]		    ;AN000;;LB. current drive
 24321                                  ;	CMP	AL,[CURSC_DRIVE]	    ;AN000;;LB. same as SC drive
 24322                                  ;	JNZ	outrange2		    ;AN000;;LB. no
 24323                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB. subtract sector num from
 24324                                  ;	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 24325                                  ;	SUB	CX,WORD PTR [CURSC_SECTOR]    ;AN000;;LB. number
 24326                                  ;	SBB	AX,WORD PTR [CURSC_SECTOR+2]  ;AN000;;LB.
 24327                                  ;	CMP	AX,0			    ;AN000;;LB. greater than 64K
 24328                                  ;	JNZ	outrange2		    ;AN000;;LB. yes
 24329                                  ;	CMP	CX,[SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 24330                                  ;	JAE	outrange2		    ;AN000;;LB. yes
 24331                                  ;	CLC				    ;AN000;;LB. clear carry
 24332                                  ;	JMP	short inexit		    ;AN000;;LB. in SC
 24333                                  ;outrange2:				    ;AN000;;LB. set carry
 24334                                  ;	STC				    ;AN000;;LB.
 24335                                  ;inexit: 				    ;AN000;;LB.
 24336                                  ;	return				    ;AN000;;LB.
 24337                                  ;
 24338                                  ;EndProc IN_SC				    ;AN000;
 24339                                  
 24340                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 24341                                  ;---------------------------------------------------------------------------
 24342                                  ;
 24343                                  ; Procedure Name : Invalidate_Sc
 24344                                  ;
 24345                                  ; Inputs:  [SC_DRIVE]= requesting drive
 24346                                  ;	   [CURSC_DRIVE]= current SC drive
 24347                                  ;	   [CURSC_SECTOR] = starting scetor # of SC
 24348                                  ;	   [SC_CACHE_COUNT] = SC count
 24349                                  ;	   [SC_STAUS] = SC status word
 24350                                  ;	   [HIGH_SECTOR]:DX= sector number
 24351                                  ;
 24352                                  ; Function:
 24353                                  ;	invalidate secondary cache if in there
 24354                                  ; Output:
 24355                                  ;	[SC_STATUS] is updated
 24356                                  ;---------------------------------------------------------------------------
 24357                                  
 24358                                  ;procedure   INVALIDATE_SC,NEAR	    ;AN000;
 24359                                  ;
 24360                                  ;	; SS override for all variables used
 24361                                  ;
 24362                                  ;	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 24363                                  ;	JC	outrange		    ;AN000;;LB. no
 24364                                  ;	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 24365                                  ;	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 24366                                  ;	NOT	AX			    ;AN000;;LB.
 24367                                  ;	AND	[SC_STATUS],AX		    ;AN000;;LB. save the status
 24368                                  ;outrange:				    ;AN000;;LB.
 24369                                  ;	return				    ;AN000;;LB.
 24370                                  ;
 24371                                  ;EndProc INVALIDATE_SC			    ;AN000;
 24372                                  
 24373                                  
 24374                                  ;Break	<VIRREAD- virtually read data into buffer>
 24375                                  ;--------------------------------------------------------------------------
 24376                                  ;
 24377                                  ; Procedure Name : SC_FLAG
 24378                                  ;
 24379                                  ; Inputs:  SC_FLAG = 0 , no sectors were read into SC
 24380                                  ;		     1, continous sectors were read into SC
 24381                                  ; Function:
 24382                                  ;	   Move data from SC to buffer
 24383                                  ; Output:
 24384                                  ;	 carry clear, data is moved to buffer
 24385                                  ;	 carry set, bad sector or exceeds maximum sector
 24386                                  ;	   SC_FLAG =0
 24387                                  ;	   CALLSCNT=1
 24388                                  ;	   SC_STATUS= -1 if succeeded
 24389                                  ;     
 24390                                  ;		       0 if failed
 24391                                  ;--------------------------------------------------------------------------
 24392                                  
 24393                                  ;procedure   VIRREAD,NEAR	    ;AN000;
 24394                                  ;
 24395                                  ;	; SS override for all variables used
 24396                                  ;
 24397                                  ;	CMP	[SC_FLAG],0		    ;AN000;;LB.  from SC fill
 24398                                  ;	JZ	sc2end			    ;AN000;;LB.  no
 24399                                  ;	MOV	AX,[TEMP_VAR2]		    ;AN000;;LB. restore buffer addr
 24400                                  ;	MOV	WORD PTR [CALLXAD+2],AX     ;AN000;;LB.
 24401                                  ;	MOV	AX,[TEMP_VAR]		    ;AN000;;LB.
 24402                                  ;	MOV	WORD PTR [CALLXAD],AX	    ;AN000;;LB.
 24403                                  ;	MOV	[SC_FLAG],0		    ;AN000;;LB.  reset sc_flag
 24404                                  ;	MOV	[CALLSCNT],1		    ;AN000;;LB.  one sector transferred
 24405                                  ;
 24406                                  ;	TESTB	[DEVCALL.REQSTAT],STERR     ;AN000;;LB.  error?
 24407                                  ;	JNZ	scerror 		    ;AN000;;LB. yes
 24408                                  ;	PUSH	DS			    ;AN000;;LB.
 24409                                  ;	PUSH	SI			    ;AN000;;LB.
 24410                                  ;	PUSH	ES			    ;AN000;;LB.
 24411                                  ;	PUSH	DI			    ;AN000;;LB.
 24412                                  ;	PUSH	DX			    ;AN000;;LB.
 24413                                  ;	PUSH	CX			    ;AN000;;LB.
 24414                                  ;	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 24415                                  ;	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buffer
 24416                                  ;	POP	CX			    ;AN000;;LB.
 24417                                  ;	POP	DX			    ;AN000;;LB.
 24418                                  ;	POP	DI			    ;AN000;;LB.
 24419                                  ;	POP	ES			    ;AN000;;LB.
 24420                                  ;	POP	SI			    ;AN000;;LB.
 24421                                  ;	POP	DS			    ;AN000;;LB.
 24422                                  ;	JMP	SHORT sc2end		    ;AN000;;LB. return
 24423                                  ;
 24424                                  ;scerror:				    ;AN000;
 24425                                  ;	MOV	[CALLSCNT],1		    ;AN000;;LB. reset sector count to 1
 24426                                  ;	MOV	[SC_STATUS],0		    ;AN000;;LB. invalidate all SC sectors
 24427                                  ;	MOV	[CURSC_DRIVE],-1	    ;AN000;;LB. invalidate drive
 24428                                  ;	STC				    ;AN000;;LB. carry set
 24429                                  ;	return				    ;AN000;;LB.
 24430                                  ;
 24431                                  ;sc2end: 				    ;AN000;
 24432                                  ;	CLC				    ;AN000;;LB. carry clear
 24433                                  ;	return				    ;AN000;;LB.
 24434                                  ;
 24435                                  ;EndProc VIRREAD 			    ;AN000;
 24436                                  
 24437                                  ;Break	<SC2BUF- move data from SC to buffer>
 24438                                  ;----------------------------------------------------------------------------
 24439                                  ;
 24440                                  ; Procedure Name : SC2BUF
 24441                                  ;
 24442                                  ; Inputs:  [SC_STATUS] = SC validity status
 24443                                  ;	   [SC_SECTOR_SIZE] = request sector size
 24444                                  ;	   [SC_CACHE_PTR] = pointer to SC
 24445                                  ; Function:
 24446                                  ;	   Move data from SC to buffer
 24447                                  ; Output:
 24448                                  ;	   carry clear, in SC  and data is moved
 24449                                  ;	   carry set, not in SC and data is not moved
 24450                                  ;---------------------------------------------------------------------------
 24451                                  
 24452                                  ;procedure   SC2BUF,NEAR 	    ;AN000;
 24453                                  ;
 24454                                  ;	; SS override for all variables used
 24455                                  ;
 24456                                  ;	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 24457                                  ;	JC	noSC			    ;AN000;;LB. no
 24458                                  ;	MOV	AX,1			    ;AN000;;LB. check if valid sector
 24459                                  ;	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 24460                                  ;	TEST	[SC_STATUS],AX		    ;AN000;;LB.
 24461                                  ;	JZ	noSC			    ;AN000;;LB. invalid
 24462                                  ;entry SC2BUF2				    ;AN000;
 24463                                  ;	MOV	AX,CX			    ;AN000;;LB. times index with
 24464                                  ;	MUL	[SC_SECTOR_SIZE]	    ;AN000;;LB. sector size
 24465                                  ;	ADD	AX,WORD PTR [SC_CACHE_PTR]  ;AN000;;LB. add SC starting addr
 24466                                  ;	ADC	DX,WORD PTR [SC_CACHE_PTR+2];AN000;;LB.
 24467                                  ;	MOV	DS,DX			    ;AN000;    ;LB. DS:SI-> SC sector addr
 24468                                  ;	MOV	SI,AX			    ;AN000;    ;LB.
 24469                                  ;	MOV	ES,WORD PTR [CALLXAD+2]     ;AN000;    ;LB. ES:DI-> buffer addr
 24470                                  ;	MOV	DI,WORD PTR [CALLXAD]	    ;AN000;    ;LB.
 24471                                  ;	MOV	CX,[SC_SECTOR_SIZE]	    ;AN000;    ;LB. count= sector size
 24472                                  ;	SHR	CX,1			    ;AN000;    ;LB. may use DWORD move for 386
 24473                                  ;entry MOVWORDS				    ;AN000;
 24474                                  ;	CMP	[DDMOVE],0		    ;AN000;    ;LB. 386 ?
 24475                                  ;	JZ	nodd			    ;AN000;    ;LB. no
 24476                                  ;	SHR	CX,1			    ;AN000;    ;LB. words/2
 24477                                  ;	DB	66H			    ;AN000;    ;LB. use double word move
 24478                                  ;nodd:
 24479                                  ;	REP	MOVSW			    ;AN000;    ;LB. move to buffer
 24480                                  ;	CLC				    ;AN000;    ;LB. clear carry
 24481                                  ;	return				    ;AN000;    ;LB. exit
 24482                                  ;noSC:					    ;AN000;
 24483                                  ;	STC				    ;AN000;    ;LB. set carry
 24484                                  ;sexit:					    ;AN000;
 24485                                  ;	return				    ;AN000;    ;LB.
 24486                                  ;
 24487                                  ;EndProc SC2BUF
 24488                                  
 24489                                  
 24490                                  ;============================================================================
 24491                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 24492                                  ;============================================================================
 24493                                  ; 29/07/2018 - Retro DOS v3.0
 24494                                  
 24495                                  ;	TITLE	MKNODE - Node maker
 24496                                  ;	NAME	MKNODE
 24497                                  
 24498                                  ;**	MKNODE.ASM
 24499                                  ;
 24500                                  ;	Low level routines for making a new local file system node
 24501                                  ;	and filling in an SFT from a directory entry
 24502                                  ;
 24503                                  ;	BUILDDIR
 24504                                  ;	SETDOTENT
 24505                                  ;	MakeNode
 24506                                  ;	NEWENTRY
 24507                                  ;	FREEENT
 24508                                  ;	NEWDIR
 24509                                  ;	DOOPEN
 24510                                  ;	RENAME_MAKE
 24511                                  ;	CHECK_VIRT_OPEN
 24512                                  ;
 24513                                  ;	Revision history:
 24514                                  ;
 24515                                  ;	 AN000	version 4.0  Jan. 1988
 24516                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 24517                                  
 24518                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 24519                                  ;----------------------------------------------------------------------------
 24520                                  ;
 24521                                  ; Procedure Name : BUILDDIR,NEWDIR
 24522                                  ;
 24523                                  ; Inputs:
 24524                                  ;       ES:BP Points to DPB
 24525                                  ;       [THISSFT] Set if using NEWDIR entry point
 24526                                  ;               (used by ALLOCATE)
 24527                                  ;       [LASTENT] current last valid entry number in directory if no free
 24528                                  ;               entries
 24529                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 24530                                  ; Function:
 24531                                  ;       Grow directory if no free entries and not root
 24532                                  ; Outputs:
 24533                                  ;       CARRY SET IF FAILURE
 24534                                  ;       ELSE
 24535                                  ;          AX entry number of new entry
 24536                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 24537                                  ;               AX = first entry of new dir
 24538                                  ;       GETENT should be called to set [LASTENT]
 24539                                  ;
 24540                                  ;----------------------------------------------------------------------------
 24541                                  
 24542                                  BUILDDIR:
 24543                                  	; 23/07/2019 - Retro DOS v3.2
 24544                                  	; 29/07/2018 - Retro DOS v3.0
 24545                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 24546                                  
 24547 000051E1 A1[9405]                        MOV     AX,[ENTFREE]
 24548 000051E4 83F8FF                          CMP     AX,-1
 24549 000051E7 7402                            JZ	short CHECK_IF_ROOT
 24550 000051E9 F8                              CLC
 24551 000051EA C3                              retn
 24552                                  
 24553                                  CHECK_IF_ROOT:
 24554 000051EB 833E[7E05]00                    CMP     word [DIRSTART],0
 24555 000051F0 7502                            JNZ	short NEWDIR
 24556 000051F2 F9                              STC
 24557                                  builddir_retn:
 24558 000051F3 C3                              retn				; Can't grow root
 24559                                  
 24560                                  	;entry   NEWDIR
 24561                                  NEWDIR:        
 24562 000051F4 8B1E[7E05]              	MOV     BX,[DIRSTART]
 24563 000051F8 09DB                            OR      BX,BX
 24564 000051FA 7405                            JZ	short NULLDIR
 24565 000051FC E8F705                  	call	GETEOF
 24566 000051FF 72F2                            jc	short builddir_retn	; Screw up
 24567                                  NULLDIR:
 24568 00005201 B90100                          MOV     CX,1
 24569 00005204 E81705                  	call	ALLOCATE
 24570 00005207 72EA                            jc	short  builddir_retn
 24571 00005209 8B16[7E05]                      MOV     DX,[DIRSTART]
 24572 0000520D 09D2                            OR      DX,DX
 24573 0000520F 750D                            JNZ	short ADDINGDIR
 24574 00005211 E8AEF7                  	call	SETDIRSRCH
 24575 00005214 72DD                            jc	short  builddir_retn
 24576 00005216 C706[1203]FFFF                  MOV     word [LASTENT],-1
 24577 0000521C EB2B                            JMP     SHORT GOTDIRREC
 24578                                  ADDINGDIR:
 24579 0000521E 53                              PUSH    BX
 24580 0000521F 8B1E[7805]                      MOV     BX,[CLUSNUM]
 24581 00005223 E8F00A                          call	IsEOF
 24582 00005226 5B                              POP     BX
 24583 00005227 7219                            JB	short NOTFIRSTGROW
 24584                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 24585 00005229 891E[7805]                      MOV     [CLUSNUM],BX
 24586 0000522D 51                              PUSH    CX
 24587 0000522E 50                              PUSH    AX
 24588 0000522F 55                              PUSH    BP
 24589 00005230 B401                            MOV     AH,1			; CLUSNUM update
 24590                                  	;mov	dl,[es:bp+0]
 24591 00005232 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 24592                                          ;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 24593 00005236 8B0E[7E05]                      MOV     CX,[DIRSTART]		; first cluster #
 24594 0000523A 89DD                            MOV     BP,BX 			; CLUSNUM
 24595 0000523C E841E2                  	call	FastOpen_Update
 24596 0000523F 5D                              POP     BP
 24597 00005240 58                              POP     AX
 24598 00005241 59                              POP     CX
 24599                                  
 24600                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 24601                                  NOTFIRSTGROW:
 24602 00005242 89DA                            MOV     DX,BX
 24603 00005244 30DB                            XOR     BL,BL
 24604 00005246 E8A904                  	call	FIGREC
 24605                                  GOTDIRREC:
 24606                                  	;mov	cl,[es:bp+4]
 24607 00005249 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 24608 0000524D FEC1                            INC     CL
 24609 0000524F 30ED                            XOR     CH,CH
 24610                                  ZERODIR:
 24611 00005251 51                              PUSH    CX
 24612                                  	;mov	byte [ALLOWED],18h
 24613 00005252 C606[1503]18                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 24614 00005257 B0FF                            MOV     AL,0FFH
 24615 00005259 E8420F                          call	GETBUFFR
 24616 0000525C 7302                            JNC	short GET_SSIZE
 24617 0000525E 59                              POP     CX
 24618 0000525F C3                              retn
 24619                                  
 24620                                  GET_SSIZE:
 24621                                  	;mov	cx,[es:bp+2]
 24622 00005260 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 24623 00005264 06                              PUSH    ES
 24624 00005265 C43E[9E05]                      LES     DI,[CURBUF]
 24625                                  	;or	byte [es:di+5],4
 24626 00005269 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 24627 0000526E 57                              PUSH    DI
 24628                                  	;;add	di,16	; MSDOS 3.3
 24629                                  	;add	di,20	; MSDOS 6.0
 24630 0000526F 83C714                          ADD     DI,BUFINSIZ
 24631 00005272 31C0                            XOR     AX,AX
 24632 00005274 D1E9                            SHR     CX,1
 24633 00005276 F3AB                            REP     STOSW
 24634 00005278 7301                            JNC	short EVENZ
 24635 0000527A AA                              STOSB
 24636                                  EVENZ:
 24637 0000527B 5F                              POP     DI
 24638                                  
 24639                                  	; MSDOS 6.0
 24640                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 24641                                  	;				;LB. if already dirty		  ;AN000;
 24642                                          ;JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 24643                                          ;call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 24644                                          
 24645                                  	;or	byte [es:di+5],40h
 24646 0000527C 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 24647                                  ;yesdirty7:
 24648 00005281 07                              POP	ES
 24649 00005282 59                              POP	CX
 24650                                  
 24651                                  	; 19/05/2019 - Retro DOS v4.0
 24652                                  	; 23/07/2019 - Retro DOS v3.2
 24653                                  
 24654                                  	; MSDOS 3.3
 24655                                  	;INC	DX
 24656                                  
 24657                                  	; MSDOS 6.0
 24658 00005283 83C201                  	add	dx,1
 24659 00005286 8316[B005]00            	adc	word [HIGH_SECTOR],0
 24660                                  
 24661 0000528B E2C4                    	LOOP    ZERODIR
 24662                                  
 24663 0000528D A1[1203]                        MOV     AX,[LASTENT]
 24664 00005290 40                              INC     AX
 24665 00005291 F8                              CLC
 24666 00005292 C3                              retn
 24667                                  
 24668                                  ;--------------------------------------------------------------------------
 24669                                  ;
 24670                                  ; Procedure Name : SETDOTENT
 24671                                  ;
 24672                                  ; set up a . or .. directory entry for a directory.
 24673                                  ;
 24674                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 24675                                  ;               AX contains ". " or ".."
 24676                                  ;               DX contains first cluster of entry
 24677                                  ;
 24678                                  ;----------------------------------------------------------------------------
 24679                                  
 24680                                  SETDOTENT:
 24681                                  ;	Fill in name field
 24682 00005293 AB                              STOSW
 24683 00005294 B90400                          MOV     CX,4
 24684 00005297 B82020                          MOV     AX,"  " ; 2020h
 24685 0000529A F3AB                            REP     STOSW
 24686 0000529C AA                              STOSB
 24687                                  
 24688                                  ;	Set up attribute
 24689                                  	;mov	al, 10h
 24690 0000529D B010                            MOV     AL,attr_directory
 24691 0000529F AA                              STOSB
 24692                                  
 24693                                  ;	Initialize time and date of creation
 24694 000052A0 83C70A                          ADD     DI,10
 24695 000052A3 8B36[5A05]                      MOV     SI,[THISSFT]
 24696                                  	;mov	ax,[si+0Dh]
 24697 000052A7 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 24698 000052AA AB                              STOSW
 24699                                  	;mov	ax,[si+0Fh]
 24700 000052AB 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 24701 000052AE AB                      	STOSW
 24702                                  
 24703                                  ;	Set up first cluster field
 24704 000052AF 89D0                            MOV     AX,DX
 24705 000052B1 AB                              STOSW
 24706                                  
 24707                                  ;	0 file size
 24708 000052B2 31C0                            XOR     AX,AX
 24709 000052B4 AB                              STOSW
 24710 000052B5 AB                              STOSW
 24711 000052B6 C3                              retn
 24712                                  
 24713                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 24714                                  ;---------------------------------------------------------------------------
 24715                                  ;
 24716                                  ; Procedure Name : MakeNode
 24717                                  ;
 24718                                  ; Inputs:
 24719                                  ;       AL - attribute to create
 24720                                  ;       AH = 0 if it is ok to truncate a file already by this name
 24721                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 24722                                  ;               (AH ignored on dirs and devices)
 24723                                  ;
 24724                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 24725                                  ;               a name already existant is ALWAYS an error in these cases.
 24726                                  ;
 24727                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 24728                                  ;               terminated)
 24729                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 24730                                  ;               ( = -1 if current dir not involved, else
 24731                                  ;                Points to first char after last "/" of current dir part)
 24732                                  ;       [THISCDS] Points to CDS being used
 24733                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 24734                                  ; Function:
 24735                                  ;       Make a new node
 24736                                  ; Outputs:
 24737                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 24738                                  ;       CARRY SET IF ERROR
 24739                                  ;          AX = 1 A node by this name exists and is a directory
 24740                                  ;          AX = 2 A new node could not be created
 24741                                  ;          AX = 3 A node by this name exists and is a disk file
 24742                                  ;               (AH was NZ on input)
 24743                                  ;          AX = 4 Bad Path
 24744                                  ;               SI return from GetPath maintained
 24745                                  ;          AX = 5 Attribute mismatch
 24746                                  ;          AX = 6 Sharing Violation
 24747                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 24748                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 24749                                  ;       ELSE
 24750                                  ;          AX = 0       Disk Node
 24751                                  ;          AX = 3       Device Node (error in some cases)
 24752                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 24753                                  ;               containing new node.
 24754                                  ;          [CURBUF+2]:BX Points to entry
 24755                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 24756                                  ;          [THISSFT] is filled in
 24757                                  ;               sf_mode = unchanged.
 24758                                  ;          Attribute byte in entry is input AL
 24759                                  ; DS preserved, others destroyed
 24760                                  ;
 24761                                  ;-------------------------------------------------------------------------
 24762                                  
 24763                                  MakeNode:
 24764                                  	;mov	word [CREATING],0E5FFh
 24765 000052B7 C706[3A05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 24766 000052BD 50                              PUSH    AX              ; Save AH value
 24767 000052BE C606[1603]00            	MOV	byte [NoSetDir],0
 24768 000052C3 A2[2A05]                	MOV	[SATTRIB],AL
 24769 000052C6 E860F7                  	call	GetPathNoSet
 24770 000052C9 88CA                            MOV     DL,CL           ; Save CL info
 24771 000052CB 89C1                            MOV     CX,AX           ; Device ID to CH
 24772 000052CD 58                              POP     AX              ; Get back AH
 24773 000052CE 7316                            JNC	short make_exists ; File existed
 24774 000052D0 7505                            JNZ	short make_err_4 ; Path bad
 24775 000052D2 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 24776 000052D5 7406                            JZ	short make_type	; Name simply not found, and no metas
 24777                                  make_err_4:
 24778 000052D7 B004                            MOV     AL,4            ; case 1 bad path
 24779                                  make_err_ret:
 24780 000052D9 30E4                            XOR     AH,AH
 24781 000052DB F9                              STC
 24782                                  make_retn:
 24783 000052DC C3                              retn
 24784                                  
 24785                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 24786                                  RENAME_MAKE:
 24787                                  make_type:
 24788                                  ;Extended Open hooks
 24789                                  	; MSDOS 6.0
 24790                                  	;TESTB	EXTOPEN_ON,ext_open_on	;FT. from extended open		;AN000;
 24791                                  	;JZ	make_type2		;FT. no				;AN000;
 24792                                  	;OR	EXTOPEN_ON,ext_file_not_exists ;FT. set for extended open ;AN000;
 24793                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 24794                                  	;JNZ    make_type2		;FT. no				;AN000;
 24795                                  	;STC				;FT. set carry			;AN000;
 24796                                  	;MOV    AX,7			;FT. file not found		;AN000;
 24797                                  	;return				;FT.				;AN000;
 24798                                  ;	Extended Open hooks
 24799                                  
 24800                                  make_type2:
 24801 000052DD C43E[5A05]                      LES     DI,[THISSFT]
 24802 000052E1 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 24803 000052E3 F9                              STC                     ; Not found
 24804 000052E4 EB5A                            JMP     short make_new
 24805                                  
 24806                                  ; The node exists. It may be either a device, directory or file:
 24807                                  ;   Zero set => directory
 24808                                  ;   High bit of CH on => device
 24809                                  ;   else => file
 24810                                  
 24811                                  make_exists:
 24812 000052E6 7448                            JZ	short make_exists_dir
 24813 000052E8 B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 24814                                  	;test	byte [ATTRIB],18h
 24815 000052EA F606[2805]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 24816 000052EF 753B                            JNZ	short make_err_ret_5
 24817                                  				; Cannot already exist as Disk or Device Node
 24818                                                                  ;       if making DIR or Volume ID
 24819 000052F1 08ED                            OR      CH,CH
 24820 000052F3 781A                            JS	short make_share ; No further checks on attributes if device
 24821 000052F5 08E4                            OR      AH,AH
 24822 000052F7 75E0                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 24823 000052F9 51                              PUSH    CX              ; Save device ID
 24824 000052FA 8E06[A005]                      MOV     ES,[CURBUF+2]
 24825                                  	;mov	ch,[es:bx+0Bh]
 24826 000052FE 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 24827                                  	;test	ch,1
 24828 00005302 F6C501                  	test	CH,attr_read_only
 24829 00005305 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 24830 00005307 E8BEF9                  	call	MatchAttributes
 24831 0000530A 59                              POP     CX              ; Devid back in CH
 24832 0000530B 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 24833 0000530D 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 24834                                  make_share:
 24835 0000530F 30E4                            XOR     AH,AH
 24836 00005311 50                              PUSH    AX              ; Save Disk or Device node
 24837 00005312 51                              PUSH    CX              ; Save Device ID
 24838 00005313 88EC                            MOV     AH,CH           ; Device ID to AH
 24839 00005315 E83301                          CALL    DOOPEN          ; Fill in SFT for share check
 24840 00005318 C43E[5A05]                      LES     DI,[THISSFT]
 24841 0000531C 56                      	push	si
 24842 0000531D 53                      	push	bx		; Save CURBUF pointers
 24843 0000531E E87A23                  	call	ShareEnter
 24844 00005321 7350                            jnc	short MakeEndShare
 24845                                  
 24846                                  ; User failed request.
 24847 00005323 5B                      	pop	bx
 24848 00005324 5E                      	pop	si
 24849 00005325 59                      	pop	cx
 24850 00005326 58                      	pop	ax
 24851                                  
 24852                                  Make_Share_ret:
 24853 00005327 B006                            MOV     AL,6
 24854 00005329 EBAE                            JMP	short make_err_ret
 24855                                  
 24856                                  make_err_ret_5P:
 24857 0000532B 59                              POP     CX              ; Get back device ID
 24858                                  make_err_ret_5:
 24859 0000532C B005                            MOV     AL,5            ; Attribute mismatch
 24860 0000532E EBA9                            JMP     make_err_ret
 24861                                  
 24862                                  make_exists_dir:
 24863 00005330 B001                            MOV     AL,1            ; exists as directory, always an error
 24864 00005332 EBA5                            JMP     make_err_ret
 24865                                  
 24866                                  make_save:
 24867 00005334 50                              PUSH    AX              ; Save whether Disk or File
 24868 00005335 89C8                            MOV     AX,CX           ; Device ID to AH
 24869 00005337 E86A00                          CALL    NEWENTRY
 24870 0000533A 58                              POP     AX              ; 0 if Disk, 3 if File
 24871 0000533B 739F                            jnc	short make_retn
 24872 0000533D B002                            MOV     AL,2            ; create failed case 2
 24873                                  make_save_retn:
 24874 0000533F C3                              retn
 24875                                  
 24876                                  make_new:
 24877 00005340 E8F1FF                          call    make_save
 24878 00005343 72FA                            jc	short make_save_retn	; case 2 fail
 24879 00005345 F606[2805]10            	test	BYTE [ATTRIB],attr_directory
 24880 0000534A 75F3                            jnz	short make_save_retn	; Don't "open" directories, so don't
 24881                                                                  ;   tell the sharer about them
 24882 0000534C 50                      	push	ax
 24883 0000534D 53                      	push	bx
 24884 0000534E 56                      	push	si		
 24885 0000534F E84923                          call	ShareEnter
 24886 00005352 5E                      	pop	si
 24887 00005353 5B                      	pop	bx
 24888 00005354 58                      	pop	ax
 24889 00005355 73E8                    	jnc	short make_save_retn
 24890                                  ;
 24891                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 24892                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 24893                                  ; possible: delete the newly created directory entry and return share_error.
 24894                                  ;
 24895 00005357 50                              PUSH    AX
 24896 00005358 C43E[9E05]                      LES     DI,[CURBUF]
 24897                                  	;mov	byte [es:bx],0E5h
 24898 0000535C 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 24899                                  	
 24900                                  	; MSDOS 6.0
 24901                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 24902                                  	;				;LB. if already dirty		  ;AN000;
 24903                                          ;JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 24904                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 24905                                  	;or	byte [es:di+5],40h
 24906 00005360 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 24907                                  ;yesdirty3:
 24908 00005365 C42E[4605]                      LES     BP,[THISDPB]
 24909 00005369 268A4600                        mov	al,[ES:BP]
 24910                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 24911 0000536D E8FC0E                          call	FLUSHBUF		; write out buffer.
 24912 00005370 58                              POP     AX
 24913 00005371 EBB4                            jmp	short Make_Share_ret
 24914                                  ;
 24915                                  ; We have found an existing file. We have also entered it into the share set.
 24916                                  ; At this point we need to call newentry to correctly address the problem of
 24917                                  ; getting rid of old data (create an existing file) or creating a new
 24918                                  ; directory entry (create a new file). Unfortunately, this operation may
 24919                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 24920                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 24921                                  ; the share set now, do the operation and then reassert the share access.
 24922                                  ;
 24923                                  ; We are allowed to do this! There is no window! After all, we are in
 24924                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 24925                                  ;
 24926                                  MakeEndShare:
 24927 00005373 C43E[5A05]                      LES     DI,[THISSFT]		; grab SFT
 24928 00005377 31C0                            XOR     AX,AX
 24929 00005379 E893CD                  	call	EcritSFT
 24930 0000537C 268705                  	xchg	AX,[ES:DI]
 24931                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 24932 0000537F 50                      	push	ax
 24933 00005380 57                      	push	di
 24934 00005381 06                      	push	es
 24935 00005382 9C                              PUSHF
 24936 00005383 E81023                          call	ShareEnd                ; remove sharing
 24937 00005386 9D                              POPF
 24938 00005387 07                      	pop	es
 24939 00005388 5F                      	pop	di
 24940 00005389 268F05                          pop	word [ES:DI]	
 24941                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 24942 0000538C E888CD                  	call	LcritSFT
 24943 0000538F 5B                      	pop	bx
 24944 00005390 5E                      	pop	si
 24945 00005391 59                      	pop	cx
 24946 00005392 58                      	pop	ax
 24947 00005393 E89EFF                          CALL    make_save
 24948                                  
 24949                                  ; If the user failed, we do not reenter into the sharing set.
 24950                                  
 24951 00005396 72A7                            jc	short make_save_retn	; bye if error
 24952 00005398 50                      	push	ax
 24953 00005399 53                      	push	bx
 24954 0000539A 56                      	push	si
 24955 0000539B 9C                              PUSHF
 24956 0000539C E8FC22                          call	ShareEnter
 24957 0000539F 9D                              POPF
 24958 000053A0 5E                      	pop	si
 24959 000053A1 5B                      	pop	bx
 24960 000053A2 58                      	pop	ax
 24961                                  
 24962                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 24963                                  
 24964                                  makeendshare_retn:
 24965 000053A3 C3                              retn
 24966                                  
 24967                                  ;---------------------------------------------------------------------------
 24968                                  ;
 24969                                  ; Procedure Name : NEWENTRY
 24970                                  ;
 24971                                  ; Inputs:
 24972                                  ;       [THISSFT] set
 24973                                  ;       [THISDPB] set
 24974                                  ;       [LASTENT] current last valid entry number in directory if no free
 24975                                  ;               entries
 24976                                  ;       [VOLID] set if a volume ID was found during search
 24977                                  ;	Attrib Contains attributes for new file
 24978                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 24979                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 24980                                  ;               NC means file existed (device)
 24981                                  ;               C  means file did not exist
 24982                                  ;       AH = Device ID byte
 24983                                  ;       If FILE
 24984                                  ;           [CURBUF+2]:BX points to start of directory entry
 24985                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 24986                                  ;       If device
 24987                                  ;           DS:BX points to start of "fake" directory entry
 24988                                  ;           DS:SI points to dir_first of "fake" directory entry
 24989                                  ;               (has DWORD pointer to device header)
 24990                                  ; Function:
 24991                                  ;       Make a new directory entry
 24992                                  ;       If an old one existed it is truncated first
 24993                                  ; Outputs:
 24994                                  ;       Carry set if error
 24995                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 24996                                  ;               vol ID, user FAILed to I 24
 24997                                  ;       else
 24998                                  ;               outputs of DOOPEN
 24999                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 25000                                  ;
 25001                                  ;----------------------------------------------------------------------------
 25002                                  
 25003                                  NEWENTRY:
 25004 000053A4 C42E[4605]                      LES     BP,[THISDPB]
 25005 000053A8 7316                            JNC	short EXISTENT	
 25006 000053AA 803E[1403]00                    CMP     byte [FAILERR],0
 25007 000053AF F9                              STC
 25008 000053B0 75F1                            jnz	short makeendshare_retn	; User FAILed, node might exist
 25009 000053B2 E82CFE                          CALL    BUILDDIR        ; Try to build dir
 25010 000053B5 72EC                            jc	short makeendshare_retn	; Failed
 25011 000053B7 E8DAF5                          call	GETENT          ; Point at that free entry
 25012 000053BA 72E7                            jc	short makeendshare_retn	; Failed
 25013 000053BC EB0E                            JMP     SHORT FREESPOT
 25014                                  
 25015                                  ERRRET3:
 25016 000053BE F9                              STC
 25017                                  newentry_retn:
 25018 000053BF C3                              retn
 25019                                  
 25020                                  EXISTENT:
 25021 000053C0 08E4                            OR      AH,AH           ; Check if file is I/O device
 25022 000053C2 7903                            JNS	short NOT_DEV1
 25023 000053C4 E98400                          JMP     DOOPEN          ; If so, proceed with open
 25024                                  
 25025                                  NOT_DEV1:
 25026 000053C7 E82301                          call	FREEENT		; Free cluster chain
 25027 000053CA 72F3                            jc	short newentry_retn ; Failed
 25028                                  FREESPOT:
 25029                                  	;test	byte [ATTRIB],8
 25030 000053CC F606[2805]08            	test	BYTE [ATTRIB],attr_volume_id
 25031 000053D1 7407                            JZ	short NOTVOLID
 25032 000053D3 803E[3805]00                    CMP     BYTE [VOLID],0
 25033 000053D8 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 25034                                  NOTVOLID:
 25035 000053DA 8E06[A005]                      MOV     ES,[CURBUF+2]
 25036 000053DE 89DF                            MOV     DI,BX
 25037                                  
 25038 000053E0 BE[0805]                        MOV     SI,NAME1
 25039                                  
 25040 000053E3 B90500                          MOV     CX,5
 25041 000053E6 F3A5                            REP     MOVSW
 25042 000053E8 A4                              MOVSB                   ; Move name into dir entry
 25043 000053E9 A0[2805]                	MOV	AL,[ATTRIB]
 25044 000053EC AA                      	STOSB                   ; Attributes
 25045                                  
 25046                                  ;; File Tagging for Create DOS 4.00
 25047 000053ED B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 25048                                  ;; File Tagging for Create DOS 4.00
 25049                                  
 25050 000053EF 31C0                            XOR     AX,AX
 25051 000053F1 F3AB                            REP     STOSW           ; Zero pad
 25052 000053F3 E85EC5                          call	DATE16
 25053 000053F6 92                              XCHG    AX,DX
 25054 000053F7 AB                              STOSW                   ; dir_time
 25055 000053F8 92                              XCHG    AX,DX
 25056 000053F9 AB                              STOSW                   ; dir_date
 25057 000053FA 31C0                            XOR     AX,AX
 25058 000053FC 57                              PUSH    DI              ; Correct SI input value
 25059                                  				; 	(recomputed for new buffer)
 25060 000053FD AB                              STOSW                   ; Zero dir_first and size
 25061 000053FE AB                              STOSW
 25062 000053FF AB                              STOSW
 25063                                  updnxt:
 25064 00005400 8B36[9E05]              	MOV	SI,[CURBUF]
 25065                                  
 25066                                  	; MSDOS 6.0
 25067                                  	;TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 25068                                  	;			;LB. if already dirty		  ;AN000;
 25069                                          ;JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 25070                                          ;call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 25071                                          
 25072                                  	;or	byte [es:si+5],40h
 25073 00005404 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 25074                                  ;yesdirty9:
 25075 00005409 C42E[4605]                      LES     BP,[THISDPB]
 25076 0000540D 268A4600                	MOV	AL,[ES:BP]	; mov al,[es:bp+0] 
 25077                                          ;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 25078 00005411 50                              PUSH    AX
 25079 00005412 53                              PUSH    BX
 25080                                  
 25081                                  ; If we have a file, we need to increment the open ref. count so that
 25082                                  ; we have some protection against invalid media changes if an Int 24
 25083                                  ; error occurs.
 25084                                  ; Do nothing for a device.
 25085                                  
 25086 00005413 06                      	push	es
 25087 00005414 57                      	push	di
 25088 00005415 C43E[5A05]                      LES     DI,[THISSFT]
 25089                                  	;test	word [es:di+5],80h
 25090 00005419 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 25091 0000541F 751A                            jnz	short GotADevice
 25092 00005421 1E                      	push	ds
 25093 00005422 53                      	push	bx
 25094 00005423 C51E[4605]                      LDS     BX,[THISDPB]
 25095                                  	;mov	[es:di+7],bx
 25096 00005427 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 25097 0000542B 8CDB                            MOV     BX,DS
 25098                                  	;mov	[es:di+9],bx
 25099 0000542D 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 25100 00005431 5B                      	pop	bx
 25101 00005432 1F                      	pop	ds ; need to use DS for segment later on
 25102 00005433 E875FC                  	call	DEV_OPEN_SFT    ; increment ref. count
 25103 00005436 C606[380A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 25104                                  GotADevice:
 25105 0000543B 5F                      	pop	di
 25106 0000543C 07                      	pop	es
 25107                                  
 25108 0000543D E82C0E                          call	FLUSHBUF
 25109 00005440 E8F900                          Call    CHECK_VIRT_OPEN ; decrement ref. count                          ;AN000;
 25110 00005443 5B                              POP     BX
 25111 00005444 58                              POP     AX
 25112 00005445 5E                              POP     SI              ; Get SI input back
 25113 00005446 88C4                            MOV     AH,AL           ; Get I/O driver number back
 25114 00005448 7301                            jnc	short DOOPEN    ; Failed
 25115 0000544A C3                      	retn
 25116                                  
 25117                                  ;NOTE FALL THROUGH
 25118                                  
 25119                                  	; 24/07/2019 - Retro DOS v3.2
 25120                                  ; DOOPEN
 25121                                  ;----------------------------------------------------------------------------
 25122                                  ;
 25123                                  ; Inputs:
 25124                                  ;       [THISDPB] points to DPB if file
 25125                                  ;       [THISSFT] points to SFT being used
 25126                                  ;       AH = Device ID byte
 25127                                  ;       If FILE
 25128                                  ;           [CURBUF+2]:BX points to start of directory entry
 25129                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 25130                                  ;       If device
 25131                                  ;           DS:BX points to start of "fake" directory entry
 25132                                  ;           DS:SI points to dir_first of "fake" directory entry
 25133                                  ;               (has DWORD pointer to device header)
 25134                                  ; Function:
 25135                                  ;       Fill in SFT from dir entry
 25136                                  ; Outputs:
 25137                                  ;       CARRY CLEAR
 25138                                  ;       sf_ref_count and sf_mode fields not altered
 25139                                  ;       sf_flags high byte = 0
 25140                                  ;       sf_flags low byte = AH except
 25141                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 25142                                  ;       sf_attr sf_date sf_time sf_name set from entry
 25143                                  ;       sf_position = 0
 25144                                  ;       If device
 25145                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 25146                                  ;           sf_size = 0
 25147                                  ;       If file
 25148                                  ;           sf_firclus sf_size set from entry
 25149                                  ;           sf_devptr = [THISDPB]
 25150                                  ;           sf_cluspos = 0
 25151                                  ;           sf_lstclus = sf_firclus
 25152                                  ;           sf_dirsec sf_dirpos set
 25153                                  ; DS,SI,BX preserved, others destroyed
 25154                                  ;
 25155                                  ;----------------------------------------------------------------------------
 25156                                  
 25157                                  	;entry	DOOPEN
 25158                                  DOOPEN:
 25159                                  ;	Generate and store attribute
 25160                                  
 25161 0000544B 88E6                            MOV     DH,AH           ; AH to different place
 25162 0000544D C43E[5A05]                      LES     DI,[THISSFT]
 25163                                  	;add	di,4
 25164 00005451 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 25165 00005454 30C0                            XOR     AL,AL           ; Assume it's a device, devices have an
 25166                                                                  ;   attribute of 0 (for R/O testing etc).
 25167 00005456 08F6                            OR      DH,DH           ; See if our assumption good.
 25168 00005458 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 25169 0000545A 8E1E[A005]                      MOV     DS,[CURBUF+2]
 25170                                  	;mov	al,[BX+0Bh]
 25171 0000545E 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 25172                                  				; If file, get attrib from dir entry
 25173                                  DEV_SFT1:
 25174 00005461 AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 25175                                  
 25176                                  ;	Generate and store flags word
 25177                                  
 25178 00005462 31C0                            XOR     AX,AX
 25179 00005464 88F0                            MOV     AL,DH
 25180                                  	;or	al,40h
 25181 00005466 0C40                            OR      AL,devid_file_clean
 25182 00005468 AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 25183                                  
 25184                                  ;	Generate and store device pointer
 25185                                  
 25186 00005469 1E                              PUSH    DS
 25187                                  	;lds	ax,[bx+1Ah]
 25188 0000546A C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 25189 0000546D 08F6                            OR      DH,DH
 25190 0000546F 7805                            JS	short DEV_SFT2
 25191                                  
 25192                                  ;hkn; SS override
 25193 00005471 36C506[4605]                    LDS     AX,[SS:THISDPB]	; Was file
 25194                                  DEV_SFT2:
 25195 00005476 AB                              STOSW 			; store offset
 25196 00005477 8CD8                            MOV     AX,DS
 25197 00005479 1F                              POP     DS
 25198 0000547A AB                      	STOSW			; store segment
 25199                                  				; ES:DI -> sf_firclus
 25200                                  
 25201                                  ;	Generate pointer to, generate and store first cluster 
 25202                                  ;	(irrelevant for devices)
 25203                                  
 25204 0000547B 56                              PUSH    SI              ; Save pointer to dir_first
 25205                                  
 25206 0000547C A5                              MOVSW                   ; dir_first -> sf_firclus
 25207                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 25208                                  
 25209                                  ;	Copy time/date of last modification
 25210                                  
 25211                                  	;sub	si,6
 25212 0000547D 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 25213                                  				; DS:SI->dir_time
 25214 00005480 A5                              MOVSW                   ; dir_time -> sf_time
 25215                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 25216 00005481 A5                              MOVSW                   ; dir_date -> sf_date
 25217                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 25218                                  
 25219                                  ;	Generate and store file size (0 for devices)
 25220                                  
 25221 00005482 AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 25222 00005483 AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 25223 00005484 89C1                            MOV     CX,AX           ; dir_size_l in CX
 25224 00005486 AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 25225 00005487 08F6                            OR      DH,DH
 25226 00005489 7904                            JNS	short FILE_SFT1
 25227 0000548B 31C0                            XOR     AX,AX
 25228 0000548D 89C1                            MOV     CX,AX           ; Devices are open ended
 25229                                  FILE_SFT1:
 25230 0000548F 91                              XCHG    AX,CX
 25231 00005490 AB                              STOSW                   ; Low word of sf_size
 25232 00005491 91                              XCHG    AX,CX
 25233 00005492 AB                              STOSW                   ; High word of sf_size
 25234                                                                  ; ES:DI -> sf_position
 25235                                  ; Initialize position to 0
 25236                                  
 25237 00005493 31C0                            XOR     AX,AX
 25238 00005495 AB                              STOSW
 25239 00005496 AB                              STOSW                   ; sf_position
 25240                                                                  ; ES:DI -> sf_cluspos
 25241                                  
 25242                                  ; Generate cluster optimizations for files
 25243                                  
 25244 00005497 08F6                            OR      DH,DH
 25245 00005499 7843                            JS	short DEV_SFT3
 25246 0000549B AB                              STOSW                   ; sf_cluspos ; 1Ah
 25247                                  	;mov	ax,[bx+1Ah]
 25248 0000549C 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 25249                                  
 25250                                  	; 24/07/2019 - Retro DOS v3.2
 25251                                  
 25252                                  	; 19/05/2019
 25253                                  	; MSDOS 3.3
 25254                                  	;STOSW 			; sf_lstclus ; 1Bh
 25255                                  	; MSDOS 6.0
 25256 0000549F 57                              PUSH	DI              ;AN004; save dirsec offset
 25257                                  	;sub	di,1Bh
 25258 000054A0 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 25259                                  	;mov	[es:di+35h],ax
 25260 000054A3 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 25261 000054A7 5F                              POP	DI              ;AN004; restore dirsec offset
 25262                                  
 25263                                  ; DOS 3.3  FastOpen  6/13/86
 25264                                  
 25265 000054A8 1E                      	PUSH	DS
 25266                                  
 25267                                  ;hkn; SS is DOSDATA
 25268 000054A9 16                      	push	ss
 25269 000054AA 1F                      	pop	ds
 25270                                  	;test	byte [FastOpenFlg],4
 25271 000054AB F606[A40F]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 25272 000054B0 7411                    	JZ	short Not_FastOpen
 25273                                  
 25274                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 25275 000054B2 BE[790F]                        MOV     SI,FastOpen_Ext_Info
 25276                                  
 25277                                  	; 24/07/2019 - Retro DOS v3.2
 25278                                  
 25279                                  	;mov	ax,[si+1]
 25280 000054B5 8B4401                          MOV     AX,[SI+FEI.dirsec]
 25281 000054B8 AB                              STOSW                   ; sf_dirsec
 25282                                  	; MSDOS 6.0
 25283                                  	;mov	ax,[si+3]
 25284 000054B9 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 25285                                  				;;; changed for >32mb
 25286 000054BC AB                              STOSW                   ; sf_dirsec
 25287                                  	; 19/08//2018
 25288 000054BD 8A04                    	mov	al,[SI]
 25289                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 25290 000054BF AA                              STOSB                   ; sf_dirpos
 25291 000054C0 1F                              POP	DS
 25292 000054C1 EB19                            JMP     short Next_Name
 25293                                  
 25294                                  ; DOS 3.3  FastOpen  6/13/86
 25295                                  
 25296                                  Not_FastOpen:
 25297                                          ;POP     DS		; normal path
 25298                                  
 25299                                  ;hkn; SS override
 25300                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 25301                                  	; 28/07/2019
 25302 000054C3 8B36[9E05]              	mov	si,[CURBUF]
 25303 000054C7 1F                      	pop	ds
 25304                                  
 25305                                  	;mov	ax,[si+6]
 25306 000054C8 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 25307 000054CB AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 25308                                  	
 25309                                  	; 22/07/2019 - Retro DOS v3.2
 25310                                          ; MSDOS 6.0
 25311                                  	;mov	ax,[si+8]
 25312 000054CC 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 25313 000054CF AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 25314                                          
 25315 000054D0 89D8                    	MOV     AX,BX
 25316                                  	;;add	si,16	; MSDOS 3.3	
 25317                                  	;add	si,20	; MSDOS 6.0
 25318 000054D2 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 25319 000054D5 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 25320                                          ;mov	cl,32
 25321 000054D7 B120                    	MOV     CL,dir_entry.size
 25322 000054D9 F6F1                            DIV     CL
 25323 000054DB AA                              STOSB                   ; sf_dirpos
 25324                                  
 25325                                  Next_Name:
 25326 000054DC EB03                            JMP     SHORT FILE_SFT2
 25327                                  
 25328                                  DEV_SFT3:
 25329                                  	;add	di,7
 25330 000054DE 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 25331                                  FILE_SFT2:
 25332                                  ;
 25333                                  ; Copy in the object's name
 25334                                  ;
 25335 000054E1 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 25336 000054E3 B90B00                          MOV     CX,11
 25337 000054E6 F3A4                            REP     MOVSB           ; sf_name
 25338 000054E8 5E                              POP     SI              ; recover DS:SI -> dir_first
 25339                                  
 25340                                  ;hkn; SS is DOSDATA
 25341 000054E9 16                              push	ss
 25342 000054EA 1F                      	pop	ds
 25343 000054EB F8                              CLC
 25344 000054EC C3                              retn
 25345                                  
 25346                                  ;---------------------------------------------------------------------------
 25347                                  ;
 25348                                  ; Procedure Name : FREEENT
 25349                                  ;
 25350                                  ; Inputs:
 25351                                  ;       ES:BP -> DPB
 25352                                  ;       [CURBUF] Set
 25353                                  ;       [CURBUF+2]:BX points to directory entry
 25354                                  ;       [CURBUF+2]:SI points to above dir_first
 25355                                  ; Function:
 25356                                  ;       Free the cluster chain for the entry if present
 25357                                  ; Outputs:
 25358                                  ;       Carry set if error (currently user FAILed to I 24)
 25359                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 25360                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 25361                                  ;---------------------------------------------------------------------------
 25362                                  
 25363                                  FREEENT:
 25364 000054ED 1E                              PUSH    DS
 25365 000054EE C53E[9E05]                      LDS     DI,[CURBUF]
 25366 000054F2 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 25367                                  	; 22/07/2019 - Retro DOS v3.2
 25368                                  	; MSDOS 6.0
 25369 000054F4 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 25370                                  ;hkn; SS override
 25371 000054F7 368916[B005]            	MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 25372 000054FC 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 25373 000054FF 1F                              POP     DS
 25374 00005500 83F902                  	CMP	CX,2
 25375 00005503 7235                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 25376                                  	;cmp	cx,[es:bp+0Dh]
 25377 00005505 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 25378 00005509 772F                            JA	short RET1	; Treat like zero length file (firclus mucked)
 25379 0000550B 29FB                            SUB     BX,DI
 25380 0000550D 53                              PUSH    BX              ; Save offset
 25381 0000550E FF36[B005]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 25382 00005512 52                              PUSH    DX              ; Save sector number
 25383 00005513 89CB                            MOV     BX,CX
 25384 00005515 E8B202                          call	RELEASE         ; Free any data allocated
 25385 00005518 5A                              POP     DX
 25386 00005519 8F06[B005]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 25387 0000551D 7302                            JNC	short GET_BUF_BACK
 25388 0000551F 5B                              POP     BX
 25389                                  freeent_retn:
 25390 00005520 C3                              retn			; Screw up
 25391                                  
 25392                                  GET_BUF_BACK:
 25393                                  	;mov	byte [ALLOWED],18h
 25394 00005521 C606[1503]18                    MOV     byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 25395 00005526 30C0                            XOR     AL,AL
 25396 00005528 E8730C                  	call	GETBUFFR        ; Get sector back
 25397 0000552B 5B                              POP     BX              ; Get offset back
 25398 0000552C 72F2                            jc	short freeent_retn
 25399 0000552E E8EEEC                  	call	SET_BUF_AS_DIR
 25400 00005531 031E[9E05]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 25401 00005535 89DE                            MOV     SI,BX
 25402                                  	;add	si,1Ah
 25403 00005537 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 25404                                  RET1:
 25405 0000553A F8                              CLC
 25406 0000553B C3                              retn
 25407                                  
 25408                                  ;---------------------------------------------------------------------------
 25409                                  ;
 25410                                  ; Procedure Name : CHECK_VIRT_OPEN
 25411                                  ;
 25412                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 25413                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 25414                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 25415                                  ; flag [VIRTUAL_OPEN].
 25416                                  ; No registers affected (including flags).
 25417                                  ; On input, [THISSFT] points to current SFT.
 25418                                  ;
 25419                                  ;---------------------------------------------------------------------------
 25420                                  
 25421                                  CHECK_VIRT_OPEN:
 25422 0000553C 50                      	        PUSH    AX
 25423 0000553D 9F                              lahf                    ; preserve flags
 25424 0000553E 803E[380A]00                    CMP     byte [VIRTUAL_OPEN],0
 25425 00005543 7410                            JZ	short ALL_CLOSED
 25426 00005545 C606[380A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 25427 0000554A 06                      	push	es
 25428 0000554B 57                      	push	di
 25429 0000554C C43E[5A05]                      LES     DI,[THISSFT]
 25430 00005550 E85FFB                          call	DEV_CLOSE_SFT
 25431 00005553 5F                      	pop	di
 25432 00005554 07                      	pop	es
 25433                                  
 25434                                  ALL_CLOSED:
 25435 00005555 9E                              sahf                    ; restore flags
 25436 00005556 58                              POP     AX
 25437 00005557 C3                              retn
 25438                                  
 25439                                  ;============================================================================
 25440                                  ; ROM.ASM, MSDOS 6.0, 1991
 25441                                  ;============================================================================
 25442                                  ; 29/07/2018 - Retro DOS v3.0
 25443                                  
 25444                                  ;	TITLE	ROM - Miscellaneous routines
 25445                                  ;	NAME	ROM
 25446                                  
 25447                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 25448                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 25449                                  ;
 25450                                  ;	SKPCLP
 25451                                  ;	FNDCLUS
 25452                                  ;	BUFSEC
 25453                                  ;	BUFRD
 25454                                  ;	BUFWRT
 25455                                  ;	NEXTSEC
 25456                                  ;	OPTIMIZE
 25457                                  ;	FIGREC
 25458                                  ;	ALLOCATE
 25459                                  ;	RESTFATBYT
 25460                                  ;	RELEASE
 25461                                  ;	RELBLKS
 25462                                  ;	GETEOF
 25463                                  ;
 25464                                  ;	Modification history:
 25465                                  ;
 25466                                  ;		Created: ARR 30 March 1983
 25467                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 25468                                  
 25469                                  ;Break   <FNDCLUS -- Skip over allocation units>
 25470                                  ;--------------------------------------------------------------------------
 25471                                  ;
 25472                                  ; Procedure Name : FNDCLUS
 25473                                  ;
 25474                                  ; Inputs:
 25475                                  ;       CX = No. of clusters to skip
 25476                                  ;       ES:BP = Base of drive parameters
 25477                                  ;       [THISSFT] point to SFT
 25478                                  ; Outputs:
 25479                                  ;       BX = Last cluster skipped to
 25480                                  ;       CX = No. of clusters remaining (0 unless EOF)
 25481                                  ;       DX = Position of last cluster
 25482                                  ;       Carry set if error (currently user FAILed to I 24)
 25483                                  ; DI destroyed. No other registers affected.
 25484                                  ;--------------------------------------------------------------------------
 25485                                  
 25486                                  	; 26/07/2019 - Retro DOS v3.2
 25487                                  	; 20/05/2019 - Retro DOS v4.0
 25488                                  FNDCLUS:
 25489 00005558 06                      	PUSH	ES
 25490 00005559 C43E[5A05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 25491                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 25492                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 25493 0000555D 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 25494                                  	;mov	dx,[es:di+19h]
 25495 00005561 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 25496 00005565 09DB                    	OR	BX,BX
 25497 00005567 7424                    	JZ	short NOCLUS
 25498                                  
 25499 00005569 29D1                            SUB     CX,DX
 25500 0000556B 7308                            JNB	short FINDIT
 25501                                  
 25502 0000556D 01D1                            ADD     CX,DX
 25503 0000556F 31D2                            XOR     DX,DX
 25504                                  	;mov	bx,[es:di+0Bh]
 25505 00005571 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 25506                                  FINDIT:
 25507 00005575 07                              POP	ES
 25508 00005576 E313                    	JCXZ	RET9
 25509                                  
 25510                                  	;entry	SKPCLP
 25511                                  SKPCLP:
 25512 00005578 E8B207                  	call	UNPACK
 25513 0000557B 7214                            jc	short fndclus_retn	; retc
 25514                                  	
 25515                                  	; 09/09/2018
 25516                                  
 25517                                  	; MSDOS 3.3
 25518                                  	;push	bx
 25519                                  	;mov	bx,di
 25520                                  	;call	IsEOF
 25521                                  	;pop	bx	
 25522                                  	;jae	short RET9
 25523                                  
 25524                                  	; 20/05/2019 - Retro DOS v4.0
 25525                                  
 25526                                  	; MSDOS 6.0
 25527 0000557D 87DF                    	xchg	bx,di
 25528 0000557F E89407                  	call	IsEOF
 25529 00005582 87DF                    	xchg	bx,di
 25530 00005584 7305                    	jae	short RET9
 25531                                  
 25532 00005586 87DF                            XCHG    BX,DI
 25533 00005588 42                              INC     DX
 25534 00005589 E2ED                    	LOOP	SKPCLP			; RMFS
 25535                                  RET9:	
 25536 0000558B F8                      	CLC
 25537 0000558C C3                              retn
 25538                                  NOCLUS:
 25539 0000558D 07                              POP	ES
 25540 0000558E 41                              INC	CX
 25541 0000558F 4A                              DEC	DX
 25542 00005590 F8                              CLC
 25543                                  
 25544                                  fndclus_retn:
 25545 00005591 C3                              retn
 25546                                  
 25547                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 25548                                  ;--------------------------------------------------------------------------
 25549                                  ;
 25550                                  ; Procedure Name : BUFSEC
 25551                                  ;
 25552                                  ; Inputs:
 25553                                  ;       AH = priority of buffer
 25554                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 25555                                  ;       ES:BP = Base of drive parameters
 25556                                  ;       [CLUSNUM] = Physical cluster number
 25557                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 25558                                  ;       [BYTCNT1] = Size of transfer
 25559                                  ; Function:
 25560                                  ;       Insure specified sector is in buffer, flushing buffer before
 25561                                  ;       read if necessary.
 25562                                  ; Outputs:
 25563                                  ;       ES:DI = Pointer to buffer
 25564                                  ;       SI = Pointer to transfer address
 25565                                  ;       CX = Number of bytes
 25566                                  ;       [NEXTADD] updated
 25567                                  ;       [TRANS] set to indicate a transfer will occur
 25568                                  ;       Carry set if error (user FAILed to I 24)
 25569                                  ;--------------------------------------------------------------------------
 25570                                  
 25571                                  BUFSEC:
 25572 00005592 8B16[7805]                      MOV     DX,[CLUSNUM]
 25573 00005596 8A1E[3005]                      MOV     BL,[SECCLUSPOS]
 25574                                  	;mov	byte [ALLOWED],38h
 25575 0000559A C606[1503]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 25576 0000559F E85001                          CALL    FIGREC
 25577 000055A2 E8F90B                  	call	GETBUFFR
 25578 000055A5 72EA                            jc	short fndclus_retn
 25579                                  
 25580 000055A7 C606[3105]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 25581 000055AC 8B36[7405]                      MOV     SI,[NEXTADD]
 25582 000055B0 89F7                            MOV     DI,SI
 25583 000055B2 8B0E[8E05]                      MOV     CX,[BYTCNT1]
 25584 000055B6 01CF                            ADD     DI,CX
 25585 000055B8 893E[7405]                      MOV     [NEXTADD],DI
 25586 000055BC C43E[9E05]                      LES     DI,[CURBUF]
 25587                                  	;or	byte [es:di+5],8
 25588 000055C0 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 25589                                  	;lea	di,[di+16] ; MSDOS 3.3 
 25590                                  	;lea	di,[di+20] ; MSDOS 6.0 ; 26/07/2019
 25591 000055C5 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 25592 000055C8 033E[8805]                      ADD     DI,[BYTSECPOS]
 25593 000055CC F8                              CLC
 25594 000055CD C3                              retn
 25595                                  
 25596                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 25597                                  
 25598                                  ;---------------------------------------------------------------------------
 25599                                  ;
 25600                                  ; Procedure Name : BUFRD
 25601                                  ;
 25602                                  ; Do a partial sector read via one of the system buffers
 25603                                  ; ES:BP Points to DPB
 25604                                  ; Carry set if error (currently user FAILed to I 24)
 25605                                  ;
 25606                                  ; DS - set to DOSDATA
 25607                                  ;
 25608                                  ;----------------------------------------------------------------------------
 25609                                  
 25610                                  BUFRD:
 25611 000055CE 06                              PUSH	ES
 25612 000055CF 31C0                            xor	ax,ax			; pre-read sector
 25613 000055D1 E8BEFF                          CALL    BUFSEC
 25614 000055D4 7303                            JNC	short BUF_OK
 25615                                  
 25616                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 25617 000055D6 07                              POP	ES
 25618 000055D7 EB29                            JMP     SHORT RBUFPLACED
 25619                                  
 25620                                  BUF_OK:
 25621 000055D9 8CC3                            MOV     BX,ES
 25622 000055DB 8E06[FA02]                      MOV     ES,[DMAADD+2]
 25623 000055DF 8EDB                            MOV     DS,BX
 25624 000055E1 87FE                    	XCHG    DI,SI
 25625 000055E3 D1E9                            SHR     CX,1
 25626                                  ;M039
 25627                                  	; MSDOS 3.3
 25628 000055E5 7301                    	JNC	short EVENRD
 25629 000055E7 A4                      	MOVSB
 25630                                  EVENRD:
 25631 000055E8 F3A5                    	REP     MOVSW
 25632                                  
 25633                                  ;	   CX = # of whole WORDs; CF=1 if odd # of bytes.
 25634                                  ;       DS:SI-> Source within Buffer.
 25635                                  ;       ES:DI-> Destination within Transfer memory block.
 25636                                  
 25637                                  	; MSDOS 6.0
 25638                                  ;	rep	movsw			;Copy Buffer to Transfer memory.
 25639                                  ;	adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 25640                                  ;	rep	movsb                   ;Copy last byte.
 25641                                  ;M039
 25642                                  
 25643 000055EA 07                              POP	ES
 25644                                  ;hkn; SS override
 25645 000055EB 36C53E[9E05]                    LDS     DI,[SS:CURBUF]
 25646                                  	;lea	bx,[di+16]
 25647                                  	;lea	bx,[di+20] ; MSDOS 6.0
 25648 000055F0 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 25649 000055F3 29DE                            SUB     SI,BX                   ; Position in buffer
 25650 000055F5 E8FF0A                          call	PLACEBUF
 25651                                  	;cmp	si,[es:bp+2]
 25652 000055F8 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 25653 000055FC 7203                            JB	short RBUFPLACEDC	; No, leave buf where it is
 25654                                  
 25655                                  ;M039
 25656                                  	; MSDOS 3.3
 25657 000055FE E8540B                  	call	PLACEHEAD               ; Make it prime candidate for chucking
 25658                                                                          ;  even though it is MRU.
 25659                                          ; MSDOS 6.0
 25660                                  	;MOV	[BufferQueue],DI	; Make it prime candidate for
 25661                                  ;M039					; chucking even though it is MRU.
 25662                                  
 25663                                  RBUFPLACEDC:
 25664 00005601 F8                              CLC
 25665                                  RBUFPLACED:
 25666 00005602 16                      	push	ss
 25667 00005603 1F                      	pop	ds
 25668 00005604 C3                              retn
 25669                                  
 25670                                  ;----------------------------------------------------------------------------
 25671                                  ;
 25672                                  ; Procedure : BUFWRT
 25673                                  ;
 25674                                  ; Do a partial sector write via one of the system buffers
 25675                                  ; ES:BP Points to DPB
 25676                                  ; Carry set if error (currently user FAILed to I 24)
 25677                                  ;
 25678                                  ; DS - set to DOSDATA
 25679                                  ;
 25680                                  ;----------------------------------------------------------------------------
 25681                                  
 25682                                  	; 24/07/2019 - Retro DOS v3.2
 25683                                  	; 20/05/2019 - Retro DOS v4.0
 25684                                  BUFWRT:
 25685 00005605 A1[8005]                        MOV     AX,[SECPOS]
 25686                                          ; MSDOS 6.0
 25687 00005608 83C001                  	ADD	AX,1            	; Set for next sector
 25688 0000560B A3[8005]                        MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 25689 0000560E 8316[8205]00                    ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 25690 00005613 A1[8205]                        MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 25691 00005616 3B06[8605]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 25692 0000561A B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 25693 0000561C 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 25694 0000561E 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 25695 00005620 A1[8005]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 25696                                  
 25697                                  	; MSDOS 3.3
 25698                                  	;INC	AX
 25699                                  	;MOV	[SECPOS],AX ; 09/09/2018
 25700                                  
 25701                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25702 00005623 3B06[8405]                      CMP     AX,[VALSEC]		; Has sector been written before?
 25703 00005627 B001                            MOV     AL,1
 25704 00005629 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 25705                                  _doread:
 25706 0000562B 30C0                            XOR     AL,AL
 25707                                  NOREAD:
 25708 0000562D 06                              PUSH	ES
 25709 0000562E E861FF                          CALL    BUFSEC
 25710 00005631 72A3                    	JC	short BUF_IO_FAIL
 25711 00005633 8E1E[FA02]                      MOV     DS,[DMAADD+2]
 25712 00005637 D1E9                            SHR     CX,1
 25713                                  ;M039
 25714                                  	; MSDOS 3.3
 25715                                  	;JNC	short EVENWRT ; 09/09/2018
 25716                                  	;MOVSB
 25717                                  ;EVENWRT:
 25718                                  	;REP	MOVSW
 25719                                  
 25720                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 25721                                  ;       DS:SI-> Source within Transfer memory block.
 25722                                  ;       ES:DI-> Destination within Buffer.
 25723                                  
 25724                                  	; MSDOS 6.0
 25725 00005639 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 25726                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 25727                                  	;rep	movsb                   ;Copy last byte.
 25728 0000563B 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 25729 0000563D A4                      	movsb ; ****
 25730                                  ;M039
 25731                                  EVENWRT: ; ****
 25732 0000563E 07                              POP	ES
 25733                                  
 25734                                  ;hkn; SS override
 25735 0000563F 36C51E[9E05]                    LDS     BX,[SS:CURBUF]
 25736                                  
 25737                                  	; MSDOS 6.0
 25738                                          ;TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 25739                                  	;				;LB. if already dirty		  ;AN000;
 25740                                          ;JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 25741                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 25742                                  	
 25743                                  	;or	byte [bx+5],40h
 25744 00005644 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 25745                                  ;yesdirty10:
 25746                                  	;;lea	si,[bx+16]
 25747                                  	;lea	si,[bx+20] ; MSDOS 6.0
 25748 00005648 8D7714                          LEA     SI,[BX+BUFINSIZ]
 25749 0000564B 29F7                            SUB     DI,SI                   ; Position in buffer
 25750                                  ;M039
 25751                                  	; 24/07/2019 - Retro DOS v3.2
 25752                                  	; MSDOS 3.3
 25753 0000564D 89FE                    	MOV     SI,DI
 25754 0000564F 89DF                    	MOV     DI,BX
 25755 00005651 E8A30A                  	call	PLACEBUF
 25756                                  	;cmp	si,[es:bp+2]
 25757 00005654 263B7602                	CMP     SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 25758 00005658 7203                    	JB	short WBUFPLACED	; No, leave buf where it is
 25759 0000565A E8F80A                  	call	PLACEHEAD               ; Make it prime candidate for chucking
 25760                                                                          ;  even though it is MRU.
 25761                                  	; MSDOS 6.0
 25762                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 25763                                          ;JB	short WBUFPLACED	; No, leave buf where it is
 25764                                          ;MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 25765                                  					; chucking even though it is MRU.
 25766                                  ;M039
 25767                                  
 25768                                  WBUFPLACED:
 25769 0000565D F8                              CLC
 25770 0000565E 16                      	push	ss
 25771 0000565F 1F                      	pop	ds
 25772 00005660 C3                              retn
 25773                                  
 25774                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 25775                                  ;---------------------------------------------------------------------------
 25776                                  ;
 25777                                  ; Procedure Name : NEXTSEC
 25778                                  ;
 25779                                  ; Compute the next sector to read or write
 25780                                  ; ES:BP Points to DPB
 25781                                  ;
 25782                                  ;---------------------------------------------------------------------------
 25783                                  
 25784                                  NEXTSEC:
 25785 00005661 F606[3105]FF            	test	byte [TRANS],0FFh ; -1 
 25786 00005666 7426                            JZ	short CLRET
 25787                                  
 25788 00005668 A0[3005]                        MOV     AL,[SECCLUSPOS]
 25789 0000566B FEC0                            INC     AL
 25790                                  	;cmp	al,[es:bp+4]
 25791 0000566D 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 25792 00005671 7618                            JBE	short SAVPOS
 25793                                  
 25794 00005673 8B1E[7805]                      MOV     BX,[CLUSNUM]
 25795 00005677 E89C06                          call	IsEOF
 25796 0000567A 7314                            JAE	short NONEXT
 25797                                  
 25798 0000567C E8AE06                          call	UNPACK
 25799 0000567F 720F                            JC	short NONEXT
 25800                                  clusgot:
 25801 00005681 893E[7805]                      MOV     [CLUSNUM],DI
 25802 00005685 FF06[7605]                      INC     word [LASTPOS]
 25803 00005689 B000                            MOV     AL,0
 25804                                  SAVPOS:
 25805 0000568B A2[3005]                        MOV     [SECCLUSPOS],AL
 25806                                  CLRET:
 25807 0000568E F8                              CLC
 25808 0000568F C3                              retn
 25809                                  NONEXT:
 25810 00005690 F9                              STC
 25811 00005691 C3                              retn
 25812                                  
 25813                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 25814                                  ;----------------------------------------------------------------------------
 25815                                  ;
 25816                                  ; Procedure Name : OPTIMIZE
 25817                                  ;
 25818                                  ; Inputs:
 25819                                  ;       BX = Physical cluster
 25820                                  ;       CX = No. of records
 25821                                  ;       DL = sector within cluster
 25822                                  ;       ES:BP = Base of drives parameters
 25823                                  ;       [NEXTADD] = transfer address
 25824                                  ; Outputs:
 25825                                  ;       AX = No. of records remaining
 25826                                  ;       BX = Transfer address
 25827                                  ;       CX = No. or records to be transferred
 25828                                  ;       DX = Physical sector address            (LOW)
 25829                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 25830                                  ;       DI = Next cluster
 25831                                  ;       [CLUSNUM] = Last cluster accessed
 25832                                  ;       [NEXTADD] updated
 25833                                  ;       Carry set if error (currently user FAILed to I 24)
 25834                                  ; ES:BP unchanged. Note that segment of transfer not set.
 25835                                  ;
 25836                                  ;---------------------------------------------------------------------------
 25837                                  
 25838                                  OPTIMIZE:
 25839 00005692 52                      	PUSH    DX
 25840 00005693 53                              PUSH    BX
 25841                                  	;mov	al,[es:bp+4]
 25842 00005694 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 25843 00005698 FEC0                            INC     AL              ; Number of sectors per cluster
 25844 0000569A 88C4                            MOV     AH,AL
 25845 0000569C 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 25846 0000569E 89CA                            MOV     DX,CX
 25847 000056A0 B90000                          MOV     CX,0
 25848                                  OPTCLUS:
 25849                                  ; AL has number of sectors available in current cluster
 25850                                  ; AH has number of sectors available in next cluster
 25851                                  ; BX has current physical cluster
 25852                                  ; CX has number of sequential sectors found so far
 25853                                  ; DX has number of sectors left to transfer
 25854                                  ; ES:BP Points to DPB
 25855                                  ; ES:SI has FAT pointer
 25856                                  
 25857                                  do_norm3:
 25858 000056A3 E88706                          call	UNPACK
 25859 000056A6 7237                            JC	short OP_ERR
 25860                                  clusgot2:
 25861 000056A8 00C1                    	ADD	CL,AL
 25862 000056AA 80D500                          ADC     CH,0
 25863 000056AD 39D1                            CMP     CX,DX
 25864 000056AF 7333                            JAE	short BLKDON
 25865 000056B1 88E0                            MOV     AL,AH
 25866 000056B3 43                              INC     BX
 25867 000056B4 39DF                            CMP     DI,BX
 25868 000056B6 74EB                            JZ	short OPTCLUS
 25869 000056B8 4B                              DEC     BX
 25870                                  FINCLUS:
 25871 000056B9 891E[7805]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 25872 000056BD 29CA                            SUB     DX,CX           ; Number of sectors still needed
 25873 000056BF 52                              PUSH    DX
 25874 000056C0 89C8                            MOV     AX,CX
 25875                                  	;mul	word[ES:BP+2]
 25876 000056C2 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 25877                                  				; Number of sectors times sector size
 25878 000056C6 8B36[7405]                      MOV     SI,[NEXTADD]
 25879 000056CA 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 25880 000056CC A3[7405]                        MOV     [NEXTADD],AX
 25881 000056CF 58                              POP     AX              ; Number of sectors still needed
 25882 000056D0 5A                              POP     DX              ; Starting cluster
 25883 000056D1 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 25884 000056D3 011E[7605]                      ADD     [LASTPOS],BX
 25885 000056D7 5B                              POP     BX              ; BL = sector postion within cluster
 25886 000056D8 E81700                  	call	FIGREC
 25887 000056DB 89F3                            MOV     BX,SI
 25888 000056DD F8                      	CLC
 25889 000056DE C3                              retn
 25890                                  OP_ERR:
 25891 000056DF 83C404                          ADD     SP,4
 25892 000056E2 F9                      	STC
 25893 000056E3 C3                              retn
 25894                                  BLKDON:
 25895 000056E4 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 25896 000056E6 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 25897 000056E8 FECC                            DEC     AH              ; Adjust to mean position within cluster
 25898 000056EA 8826[3005]                      MOV     [SECCLUSPOS],AH
 25899 000056EE 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 25900 000056F0 EBC7                            JMP     SHORT FINCLUS
 25901                                  
 25902                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 25903                                  ;---------------------------------------------------------------------------
 25904                                  ;
 25905                                  ; Procedure Name : FIGREC
 25906                                  ;
 25907                                  ; Inputs:
 25908                                  ;       DX = Physical cluster number
 25909                                  ;       BL = Sector position within cluster
 25910                                  ;       ES:BP = Base of drive parameters
 25911                                  ; Outputs:
 25912                                  ;       DX = physical sector number           (LOW)
 25913                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 25914                                  ; No other registers affected.
 25915                                  ;
 25916                                  ;---------------------------------------------------------------------------
 25917                                  
 25918                                  FIGREC:
 25919                                  	; 24/07/2019 - Retro DOS v3.2
 25920                                  	; 20/05/2019 - Retro DOS v4.0
 25921 000056F2 51                              PUSH    CX
 25922                                  	;mov	cl,[es:bp+5]
 25923 000056F3 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 25924 000056F7 4A                              DEC     DX
 25925 000056F8 4A                              DEC     DX
 25926                                  
 25927                                  	; MSDOS 3.3
 25928                                  	;SHL	DX,CL
 25929                                  
 25930                                  ;hkn; SS override HIGH_SECTOR
 25931                                  	; MSDOS 6.0
 25932                                  	;MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 25933 000056F9 2EC706[B005]0000        	mov	word [cs:HIGH_SECTOR],0	
 25934 00005700 08C9                    	OR	CL,CL				;F.C. >32mb
 25935 00005702 740C                    	JZ	short noshift			;F.C. >32mb
 25936 00005704 30ED                    	XOR	CH,CH 				;F.C. >32mb
 25937                                  rotleft:					;F.C. >32mb
 25938 00005706 F8                      	CLC					;F.C. >32mb
 25939 00005707 D1D2                    	RCL	DX,1				;F.C. >32mb
 25940                                  	; 10/06/2019
 25941                                  	;RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 25942 00005709 2ED116[B005]            	rcl	word [cs:HIGH_SECTOR],1
 25943 0000570E E2F6                    	LOOP	rotleft				;F.C. >32mb
 25944                                  noshift:
 25945                                  	; MSDOS 3.3 & MSDOS 6.0
 25946 00005710 08DA                            OR      DL,BL
 25947                                  	;add	dx,[es:bp+0Bh]
 25948 00005712 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 25949                                  	; MSDOS 6.0
 25950                                  	; 10/06/2019
 25951                                          ;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 25952 00005716 2E8316[B005]00          	adc	word [cs:HIGH_SECTOR],0
 25953                                  	; MSDOS 3.3 & MSDOS 6.0        
 25954 0000571C 59                      	POP     CX
 25955                                  figrec_retn:
 25956 0000571D C3                              retn
 25957                                  
 25958                                  ; 30/07/2018 - Retro DOS v3.0
 25959                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 25960                                  
 25961                                  ;Break   <ALLOCATE -- Assign disk space>
 25962                                  ;---------------------------------------------------------------------------
 25963                                  ;
 25964                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 25965                                  ;
 25966                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 25967                                  ;   FAT-chained onto the end of the existing file.
 25968                                  ;
 25969                                  ;   The DPB contains the cluster # of the last free cluster allocated
 25970                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 25971                                  ;   numbered clusters, looking for the necessary free blocks.
 25972                                  ;
 25973                                  ;   Once again, fancy terminology gets in the way of corrct coding. When
 25974                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 25975                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 25976                                  ;
 25977                                  ;       If we get to the end of the disk without satisfaction:
 25978                                  ;
 25979                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 25980                                  ;               return (insufficient_disk_space)
 25981                                  ;           ELSE
 25982                                  ;               dpb_next_free = 2; start scan over from the beginning.
 25983                                  ;
 25984                                  ;   Note that there is no multitasking interlock. There is no race when
 25985                                  ;   examining the entrys in an in-core FAT block since there will be no
 25986                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 25987                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 25988                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 25989                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 25990                                  ;   satisfied. We can't allow another activation to think this cluster is
 25991                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 25992                                  ;   allocated.
 25993                                  ;
 25994                                  ;   Note that when we run out of space this algorithem will scan from
 25995                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 25996                                  ;   redundantly scanning the later part of the disk. This only happens when
 25997                                  ;   we run out of space, so sue me.
 25998                                  ;
 25999                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 26000                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 26001                                  ;                                                                          ;
 26002                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 26003                                  ;   explanation:
 26004                                  ;
 26005                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 26006                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 26007                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 26008                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 26009                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 26010                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 26011                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 26012                                  ;   the
 26013                                  ;           LOOP   findfre         ; alloc more if needed
 26014                                  ;   instruction when the first cluster is allocated to the nul file. The
 26015                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 26016                                  ;
 26017                                  ;   This method is obviously useless (because it is non-reentrant) for
 26018                                  ;   multitasking, and will have to be changed. Storing the required value on
 26019                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 26020                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 26021                                  ;   problems with INT 24 well.
 26022                                  ;
 26023                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 26024                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 26025                                  ;                                                                          ;
 26026                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 26027                                  ;               CX = No. of clusters to allocate
 26028                                  ;               ES:BP = Base of drive parameters
 26029                                  ;               [THISSFT] = Points to SFT
 26030                                  ;
 26031                                  ;       EXIT    'C' set if insufficient space
 26032                                  ;                 [FAILERR] can be tested to see the reason for failure
 26033                                  ;                 CX = max. no. of clusters that could be added to file
 26034                                  ;               'C' clear if space allocated
 26035                                  ;                 BX = First cluster allocated
 26036                                  ;                 FAT is fully updated
 26037                                  ;                 sf_FIRCLUS field of SFT set if file was null
 26038                                  ;
 26039                                  ;       USES    ALL but SI, BP
 26040                                  
 26041                                  ;callmagic  proc near
 26042                                  ;       push    ds                             ;push segment of routine 
 26043                                  ;       push    Offset MagicPatch              ;push offset for routine
 26044                                  ;       retf                                   ;simulate jmp far
 26045                                  ;                                              ;far return address is on
 26046                                  ;                                              ;stack, so far return from
 26047                                  ;                                              ;call will return this routine
 26048                                  ;callmagic  endp
 26049                                  
 26050                                  ALLOCATE:
 26051                                  	; 10/09/2018
 26052                                  ;BEGIN MAGICDRV MODIFICATIONS
 26053                                  ;
 26054                                  ;7/5/92 scottq
 26055                                  ;
 26056                                  ;This is the disk compression patch location which allows
 26057                                  ;the disk compression software to fail allocations if the
 26058                                  ;FAT would allows allocation, but the free space for compressed
 26059                                  ;data would not.
 26060                                  ;        
 26061                                  ;;;	call    far ptr MAGICPATCH
 26062                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 26063                                  ;;; but we do know the segment and offset of the routine
 26064                                  ;;; so simulate a far call to dosdata:magicpatch
 26065                                  ;;; note dosassume above, so DS -> dosdata
 26066                                  
 26067                                  	; MSDOS 6.0
 26068                                          ;clc				;clear carry so we fall through
 26069                                  	;				;if no patch is present
 26070                                  	;push	cs			;push segment for far return
 26071                                          ;call	callmagic		;this is a near call
 26072                                          ;jnc	short Regular_Allocate_Path
 26073                                  	;jmp	Disk_Full_Return ; 10/09/2018 !
 26074                                  
 26075                                  ;Regular_Allocate_Path:
 26076                                  ;END MAGICDRV MODIFICATIONS
 26077                                  
 26078 0000571E 53                              PUSH    BX                      ; save (bx)
 26079 0000571F 31DB                            XOR     BX,BX
 26080 00005721 E80906                  	call	UNPACK
 26081 00005724 893E[5205]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 26082 00005728 5B                              POP     BX
 26083 00005729 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 26084                                  
 26085 0000572B 51                              PUSH    CX
 26086 0000572C 53                              PUSH    BX
 26087                                  
 26088 0000572D 89DA                            MOV     DX,BX
 26089                                  	;mov	bx,[es:bp+1Ch]
 26090                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 26091 0000572F 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 26092 00005733 83FB02                          cmp     bx,2
 26093 00005736 7709                            ja	short FINDFRE
 26094                                  
 26095                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 26096                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 26097                                  
 26098                                  ads1:
 26099                                  	;mov	word [es:bp+1Ch],2
 26100                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 26101 00005738 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 26102 0000573E BB0100                          mov     bx,1                    ; Counter next instruction so first
 26103                                                                          ;       cluster examined is 2
 26104                                  
 26105                                  ;   Scanning both forwards and backwards for a free cluster
 26106                                  ;
 26107                                  ;       (BX) = forwards scan pointer
 26108                                  ;       (CX) = clusters remaining to be allocated
 26109                                  ;       (DX) = current last cluster in file
 26110                                  ;       (TOS) = last cluster of file
 26111                                  
 26112                                  FINDFRE:
 26113 00005741 43                              INC     BX
 26114                                  	;cmp	bx,[es:bp+0Dh]
 26115 00005742 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 26116 00005746 7757                    	ja	short ads7	; at end of disk
 26117 00005748 E8E205                          call	UNPACK          ; check out this cluster
 26118 0000574B 722F                            jc	short ads4	; FAT error             [INTERR?]
 26119 0000574D 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 26120                                  
 26121                                  ;   Have found a free cluster. Chain it to the file
 26122                                  ;
 26123                                  ;       (BX) = found free cluster #
 26124                                  ;       (DX) = current last cluster in file
 26125                                  
 26126                                  	;mov	[es:bp+1Ch],bx
 26127                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 26128 0000574F 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 26129 00005753 92                              xchg    ax,dx           ; save (dx) in ax
 26130 00005754 BA0100                          mov     dx,1            ; mark this free guy as "1"
 26131 00005757 E82706                  	call	PACK            ; set special "temporary" mark
 26132 0000575A 7220                            jc	short ads4	; FAT error             [INTERR?]
 26133                                  	;cmp	word [es:bp+1Eh],-1
 26134                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 26135 0000575C 26837E1FFF                      CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 26136 00005761 7404                            JZ	short NO_ALLOC	; No
 26137                                  	;dec	word [es:bp+1Eh]
 26138                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 26139 00005763 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 26140                                  NO_ALLOC:
 26141 00005767 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 26142 00005768 87DA                            XCHG    BX,DX
 26143 0000576A 89D0                            MOV     AX,DX
 26144 0000576C E81206                  	call	PACK            ; link free cluster onto file
 26145                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 26146                                                                  ;    cluster 0 with FIRCLUS value.
 26147 0000576F 720B                            jc	short ads4	; FAT error [INTERR?]
 26148 00005771 93                              xchg    BX,AX           ; (BX) = last one we looked at
 26149 00005772 89DA                            mov     dx,bx           ; (dx) = current end of file
 26150 00005774 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 26151                                  
 26152                                  ;   We've successfully extended the file. Clean up and exit
 26153                                  ;
 26154                                  ;       (BX) = last cluster in file
 26155                                  
 26156 00005776 BAFFFF                          MOV     DX,0FFFFH
 26157 00005779 E80506                  	call	PACK            ; mark last cluster EOF
 26158                                  
 26159                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 26160                                  ;   2 whole bytes.  Hope its worth it...
 26161                                  ;
 26162                                  ;       'C' set iff error
 26163                                  ;       calling (BX) and (CX) pushed on stack
 26164                                  
 26165                                  ads4:   
 26166 0000577C 5B                      	POP     BX
 26167 0000577D 59                              POP     CX              ; Don't need this stuff since we're successful
 26168 0000577E 729D                            jc	short figrec_retn
 26169 00005780 E8AA05                          call	UNPACK          ; Get first cluster allocated for return
 26170                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 26171 00005783 7298                            jc	short figrec_retn
 26172 00005785 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 26173 00005788 7293                            jc	short figrec_retn
 26174 0000578A 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 26175 0000578C 09FF                            OR      DI,DI           ; clear 'C'
 26176 0000578E 758D                    	jnz	short figrec_retn ; we were extending an existing file
 26177                                  
 26178                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 26179                                  ;   info
 26180                                  dofastk:
 26181 00005790 06                              PUSH	ES
 26182 00005791 C43E[5A05]                      LES     DI,[THISSFT]
 26183                                  	;mov	[es:di+0Bh],bx
 26184 00005795 26895D0B                        MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 26185                                  	;mov	[es:di+1Bh],bx
 26186                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 26187 00005799 26895D35                        MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 26188 0000579D 07                              POP	ES
 26189 0000579E C3                              retn
 26190                                  
 26191                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 26192                                  ;   of the disk...
 26193                                  
 26194                                  ads7:   
 26195 0000579F 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 26196 000057A4 7592                    	jnz	short ads1	; start scan from front of disk
 26197                                  
 26198                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 26199                                  ;   the space back to the free list and tell the caller how much he could have
 26200                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 26201                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 26202                                  ;
 26203                                  ;       (CX) = clusters remaining to be allocated
 26204                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 26205                                  ;       (TOS+1) = # of clusters wanted to allocate
 26206                                  
 26207 000057A6 5B                              POP     BX              ; (BX) = last cluster of file
 26208 000057A7 BAFFFF                          MOV     DX,0FFFFH
 26209 000057AA E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 26210 000057AD 58                              POP     AX              ; No. of clusters requested
 26211                                                                  ; Don't "retc". We are setting Carry anyway,
 26212                                                                  ;   Alloc failed, so proceed with return CX
 26213                                                                  ;   setup.
 26214 000057AE 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 26215 000057B0 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 26216                                                                  ;   Alloc failed.
 26217                                  ;Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 26218                                          ; MSDOS 6.0
 26219 000057B3 C606[C20F]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 26220 000057B8 F9                              STC
 26221 000057B9 C3                              retn
 26222                                  
 26223                                  ;-----------------------------------------------------------------------
 26224                                  ;
 26225                                  ; Procedure Name : RESTFATBYT
 26226                                  ;
 26227                                  ; SEE ALLOCATE CAVEAT
 26228                                  ;       Carry set if error (currently user FAILed to I 24)
 26229                                  ;-----------------------------------------------------------------------
 26230                                  
 26231                                  RESTFATBYT:
 26232 000057BA 53                              PUSH    BX
 26233 000057BB 52                              PUSH    DX
 26234 000057BC 57                              PUSH    DI
 26235 000057BD 31DB                            XOR     BX,BX
 26236 000057BF 8B16[5205]                      MOV     DX,[FATBYT]
 26237 000057C3 E8BB05                  	call	PACK
 26238 000057C6 5F                              POP     DI
 26239 000057C7 5A                              POP     DX
 26240 000057C8 5B                              POP     BX
 26241                                  RELEASE_flush:
 26242 000057C9 C3                      	retn
 26243                                  
 26244                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 26245                                  ;---------------------------------------------------------------------------
 26246                                  ;
 26247                                  ; Procedure Name : RELEASE
 26248                                  ;
 26249                                  ; Inputs:
 26250                                  ;       BX = Cluster in file
 26251                                  ;       ES:BP = Base of drive parameters
 26252                                  ; Function:
 26253                                  ;       Frees cluster chain starting with [BX]
 26254                                  ;       Carry set if error (currently user FAILed to I 24)
 26255                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 26256                                  ;
 26257                                  ;-----------------------------------------------------------------------------
 26258                                  
 26259                                  RELEASE:
 26260 000057CA 31D2                            XOR     DX,DX
 26261                                  
 26262                                  	;entry	RELBLKS
 26263                                  RELBLKS:
 26264                                  
 26265                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 26266                                  ;   and free the rest in the chain.
 26267                                  
 26268 000057CC E85E05                  	call	UNPACK
 26269 000057CF 72F8                    	jc	short RELEASE_flush
 26270 000057D1 74F6                    	jz	short RELEASE_flush
 26271 000057D3 89F8                            MOV     AX,DI
 26272 000057D5 52                              PUSH    DX
 26273 000057D6 E8A805                  	call	PACK
 26274 000057D9 5A                              POP     DX
 26275 000057DA 72ED                    	jc	short RELEASE_flush
 26276 000057DC 09D2                            OR      DX,DX
 26277 000057DE 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 26278                                  	;cmp	word [es:bp+1Eh],-1
 26279 000057E0 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 26280 000057E5 7404                            JZ	short NO_DEALLOC	; No
 26281 000057E7 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 26282                                  NO_DEALLOC:
 26283 000057EB 89C3                            MOV     BX,AX
 26284 000057ED 48                              dec     ax              ; check for "1"
 26285 000057EE 74D9                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 26286 000057F0 E82305                  	call	IsEOF
 26287 000057F3 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 26288                                  
 26289                                  ;RELEASE_flush:
 26290                                  	; MSDOS 6.0
 26291                                  	;mov	al,[es:bp]
 26292                                  	;;MOV	AL,[ES:BP+DPB.DRIVE]
 26293                                  	;push	si		; FLUSHBUF may trash these and we guarantee
 26294                                  	;push	cx		;  them to be preserved.
 26295                                  	;push	es
 26296                                  	;push	bp
 26297                                  	;call	FLUSHBUF	; commit buffers for this drive
 26298                                  	;pop	bp
 26299                                  	;pop	es
 26300                                  	;pop	cx
 26301                                  	;pop	si
 26302                                  RET12:
 26303 000057F5 C3                      	retn
 26304                                  
 26305                                  ;Break	<GETEOF -- Find the end of a file>
 26306                                  ;------------------------------------------------------------------------
 26307                                  ;
 26308                                  ; Procedure Name : GETEOF
 26309                                  ;
 26310                                  ; Inputs:
 26311                                  ;       ES:BP Points to DPB
 26312                                  ;       BX = Cluster in a file
 26313                                  ;       DS = CS
 26314                                  ; Outputs:
 26315                                  ;       BX = Last cluster in the file
 26316                                  ;       Carry set if error (currently user FAILed to I 24)
 26317                                  ; DI destroyed. No other registers affected.
 26318                                  ;
 26319                                  ;--------------------------------------------------------------------------
 26320                                  
 26321                                  GETEOF:
 26322 000057F6 E83405                  	call	UNPACK
 26323 000057F9 72FA                            jc	short RET12
 26324 000057FB 53                              PUSH    BX
 26325 000057FC 89FB                            MOV     BX,DI
 26326 000057FE E81505                  	call	IsEOF
 26327 00005801 5B                              POP     BX
 26328 00005802 73F1                            JAE     short RET12
 26329 00005804 89FB                            MOV     BX,DI
 26330 00005806 EBEE                            JMP     short GETEOF
 26331                                  
 26332                                  ;============================================================================
 26333                                  ; FCB.ASM, MSDOS 6.0, 1991
 26334                                  ;============================================================================
 26335                                  ; 30/07/2018 - Retro DOS v3.0
 26336                                  
 26337                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 26338                                  ;	NAME	FCB
 26339                                  
 26340                                  ;**	FCB.ASM -  Low level routines for parsing names into FCBs and analyzing
 26341                                  ;		   filename characters
 26342                                  ;
 26343                                  ;	MakeFcb
 26344                                  ;	NameTrans
 26345                                  ;	PATHCHRCMP
 26346                                  ;	GetLet
 26347                                  ;	UCase
 26348                                  ;	GetLet3
 26349                                  ;	GetCharType
 26350                                  ;	TESTKANJ
 26351                                  ;	NORMSCAN
 26352                                  ;	DELIM
 26353                                  ;
 26354                                  ;	Revision history:
 26355                                  ;
 26356                                  ;		A000  version 4.00  Jan. 1988
 26357                                  ;	
 26358                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 26359                                  
 26360                                  TableLook	EQU -1
 26361                                  
 26362                                  SCANSEPARATOR	EQU	1
 26363                                  DRVBIT		EQU	2
 26364                                  NAMBIT		EQU	4
 26365                                  EXTBIT		EQU	8
 26366                                  
 26367                                  ;
 26368                                  ;----------------------------------------------------------------------------
 26369                                  ;
 26370                                  ; Procedure : MakeFcb
 26371                                  ;
 26372                                  ;----------------------------------------------------------------------------
 26373                                  ;
 26374                                  
 26375                                  MAKEFCB:
 26376                                  ;hkn; SS override
 26377 00005808 36C606[1803]00          	MOV	BYTE [SS:SpaceFlag],0
 26378 0000580E 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 26379                                  	;test	al,2
 26380 00005810 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 26381 00005812 7504                    	JNZ	short DEFDRV
 26382 00005814 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 26383                                  DEFDRV:
 26384 00005818 47                      	INC	DI
 26385 00005819 B90800                  	MOV	CX,8
 26386                                  	;test	al,4
 26387 0000581C A804                    	test	AL,NAMBIT	; Use current name fields as default?
 26388 0000581E 93                      	XCHG	AX,BX		; Save bits in BX
 26389 0000581F B020                    	MOV	AL," "
 26390 00005821 7404                    	JZ	short FILLB	; If not, go fill with blanks
 26391 00005823 01CF                    	ADD	DI,CX
 26392 00005825 31C9                    	XOR	CX,CX		; Don't fill any
 26393                                  FILLB:
 26394 00005827 F3AA                    	REP	STOSB
 26395 00005829 B103                    	MOV	CL,3
 26396 0000582B F6C308                  	test	BL,EXTBIT	; Use current extension as default
 26397 0000582E 7404                    	JZ	short FILLB2
 26398 00005830 01CF                    	ADD	DI,CX
 26399 00005832 31C9                    	XOR	CX,CX
 26400                                  FILLB2:
 26401 00005834 F3AA                    	REP	STOSB
 26402 00005836 91                      	XCHG	AX,CX		; Put zero in AX
 26403 00005837 AB                      	STOSW
 26404 00005838 AB                      	STOSW			; Initialize two words after to zero
 26405 00005839 83EF10                  	SUB	DI,16		; Point back at start
 26406                                  	;test	bl,1
 26407 0000583C F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 26408 0000583F 7409                    	JZ	short SKPSPC
 26409 00005841 E87300                  	CALL	SCANB		; Peel off blanks and tabs
 26410 00005844 E8CA00                  	CALL	DELIM		; Is it a one-time-only delimiter?
 26411 00005847 7504                    	JNZ	short NOSCAN
 26412 00005849 46                      	INC	SI		; Skip over the delimiter
 26413                                  SKPSPC:
 26414 0000584A E86A00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 26415                                  NOSCAN:
 26416 0000584D E89C00                  	CALL	GETLET
 26417 00005850 7616                    	JBE	short NODRV	; Quit if termination character
 26418 00005852 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 26419 00005855 7511                    	JNZ	short NODRV
 26420 00005857 46                      	INC	SI		; Skip over colon
 26421 00005858 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 26422 0000585A 7607                    	JBE	short BADDRV	; Drive letter out of range
 26423                                  
 26424 0000585C 50                      	PUSH	AX
 26425 0000585D E83E14                  	call	GetVisDrv
 26426 00005860 58                      	POP	AX
 26427 00005861 7302                    	JNC	short HAVDRV
 26428                                  
 26429                                  	; MSDOS 6.0
 26430                                  ;hkn; SS override
 26431                                  	;CMP	byte [SS:DrvErr],error_not_DOS_disk
 26432                                  	;				; if not FAT drive ;AN000;
 26433                                  	;JZ	short HAVDRV		; assume ok	   ;AN000;
 26434                                  BADDRV:
 26435 00005863 B2FF                    	MOV	DL,-1
 26436                                  HAVDRV:
 26437 00005865 AA                      	STOSB			; Put drive specifier in first byte
 26438 00005866 46                      	INC	SI
 26439 00005867 4F                      	DEC	DI		; Counteract next two instructions
 26440                                  NODRV:
 26441 00005868 4E                      	DEC	SI		; Back up
 26442 00005869 47                      	INC	DI		; Skip drive byte
 26443                                  
 26444                                  	;entry	NORMSCAN
 26445                                  NORMSCAN:
 26446 0000586A B90800                  	MOV	CX,8
 26447 0000586D E81300                  	CALL	GETWORD 	; Get 8-letter file name
 26448 00005870 803C2E                  	CMP	BYTE [SI],"."
 26449 00005873 7507                    	JNZ	short NODOT
 26450 00005875 46                      	INC	SI		; Skip over dot if present
 26451                                  
 26452                                  	; MSDOS 6.0
 26453                                  ;hkn; SS override
 26454                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2	;AN000;
 26455                                  	;JZ	short VOLOK				;AN000;
 26456                                  	;MOVSB			; 2nd byte of DBCS	;AN000;
 26457                                  	;MOV	CX,2					;AN000;
 26458                                  	;JMP	SHORT contvol				;AN000;
 26459                                  ;VOLOK:
 26460 00005876 B90300                  	MOV	CX,3		; Get 3-letter extension
 26461                                  contvol:
 26462 00005879 E80D00                  	CALL	MUSTGETWORD
 26463                                  NODOT:
 26464 0000587C 88D0                    	MOV	AL,DL
 26465                                  
 26466                                  	; MSDOS 6.0
 26467                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 26468                                  
 26469 0000587E C3                      	retn
 26470                                  
 26471                                  NONAM:
 26472 0000587F 01CF                    	ADD	DI,CX
 26473 00005881 4E                      	DEC	SI
 26474 00005882 C3                      	retn
 26475                                  
 26476                                  GETWORD:
 26477 00005883 E86600                  	CALL	GETLET		
 26478 00005886 76F7                    	JBE	short NONAM	; Exit if invalid character
 26479 00005888 4E                      	DEC	SI
 26480                                  
 26481                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 26482                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 26483                                  
 26484                                  MUSTGETWORD:
 26485 00005889 E86000                  	CALL	GETLET
 26486                                  
 26487                                  ;	If spaceFlag is set then we allow spaces in a pathname
 26488                                  
 26489                                  ;IF NOT TABLELOOK
 26490 0000588C 7223                    	JB	short FILLNAM
 26491                                  ;ENDIF
 26492 0000588E 750C                    	JNZ	short MustCheckCX
 26493                                  
 26494                                  ;hkn; SS override
 26495 00005890 36F606[1803]FF          	test	BYTE [SS:SpaceFlag],0FFh
 26496 00005896 7419                    	JZ	short FILLNAM
 26497 00005898 3C20                    	CMP	AL," "
 26498 0000589A 7515                    	JNZ	short FILLNAM
 26499                                  
 26500                                  MustCheckCX:
 26501 0000589C E3EB                    	JCXZ	MUSTGETWORD
 26502 0000589E 49                      	DEC	CX
 26503 0000589F 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 26504 000058A1 7504                    	JNZ	short NOSTAR
 26505 000058A3 B03F                    	MOV	AL,"?"
 26506 000058A5 F3AA                    	REP	STOSB
 26507                                  NOSTAR:
 26508 000058A7 AA                      	STOSB
 26509 000058A8 3C3F                    	CMP	AL,"?"
 26510 000058AA 75DD                    	JNZ	short MUSTGETWORD
 26511 000058AC 80CA01                  	OR	DL,1		; Flag ambiguous file name
 26512 000058AF EBD8                    	JMP	short MUSTGETWORD
 26513                                  FILLNAM:
 26514 000058B1 B020                    	MOV	AL," "
 26515 000058B3 F3AA                    	REP	STOSB
 26516 000058B5 4E                      	DEC	SI
 26517 000058B6 C3                      	retn
 26518                                  
 26519                                  SCANB:
 26520 000058B7 AC                      	LODSB
 26521 000058B8 E86200                  	CALL	SPCHK
 26522 000058BB 74FA                    	JZ	short SCANB
 26523 000058BD 4E                      	DEC	SI
 26524                                  scanb_retn:
 26525 000058BE C3                      	retn
 26526                                  
 26527                                  ;----------------------------------------------------------------------------
 26528                                  ;
 26529                                  ; Procedure Name : NameTrans
 26530                                  ;
 26531                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 26532                                  ; allow spaces in pathnames
 26533                                  ;
 26534                                  ;   Inputs:	DS:SI points to start of path element
 26535                                  ;   Outputs:	Name1 has unpacked name, uppercased
 26536                                  ;		ES = DOSGroup
 26537                                  ;		DS:SI advanced after name
 26538                                  ;   Registers modified: DI,AX,DX,CX
 26539                                  ;
 26540                                  ;----------------------------------------------------------------------------
 26541                                  
 26542                                  NameTrans:
 26543                                  ;hkn; SS override
 26544 000058BF 36C606[1803]01          	MOV	BYTE [SS:SpaceFlag],1
 26545 000058C5 16                      	push	ss
 26546 000058C6 07                      	pop	es
 26547                                  
 26548                                  ;hkn; NAME1 is in DOSDATA
 26549 000058C7 BF[0805]                	MOV	DI,NAME1
 26550 000058CA 57                      	PUSH	DI
 26551 000058CB B82020                  	MOV	AX,'  '
 26552 000058CE B90500                  	MOV	CX,5
 26553 000058D1 AA                      	STOSB
 26554 000058D2 F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 26555 000058D4 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 26556 000058D6 88C2                    	MOV	DL,AL
 26557 000058D8 AA                      	STOSB
 26558 000058D9 5F                      	POP	DI
 26559                                  
 26560 000058DA E88DFF                  	CALL	NORMSCAN
 26561                                  
 26562                                  ;hkn; SS override for NAME1
 26563 000058DD 36803E[0805]E5          	CMP	byte [SS:NAME1],0E5H
 26564 000058E3 75D9                    	jnz	short scanb_retn
 26565 000058E5 36C606[0805]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 26566 000058EB C3                      	retn
 26567                                  
 26568                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 26569                                  
 26570                                  ;----------------------------------------------------------------------------
 26571                                  ;
 26572                                  ; Procedure Names : GetLet, UCase, GetLet3
 26573                                  ;
 26574                                  ; These routines take a character, convert it to upper case, and check
 26575                                  ; for delimiters.  Three different entry points:
 26576                                  ;	GetLet -  DS:[SI] = character to convert
 26577                                  ;	UCase  -  AL = character to convert
 26578                                  ;	GetLet3 - AL = character
 26579                                  ;		  [BX] = translation table to use
 26580                                  ;
 26581                                  ;	Exit (in all cases) : AL = upper case character
 26582                                  ;			      CY set if char is control char other than TAB
 26583                                  ;			      ZF set if char is a delimiter
 26584                                  ;	Uses : AX, flags
 26585                                  ;
 26586                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 26587                                  ; inline version.  Return with carry set is only possible in the inline
 26588                                  ; version.  The table lookup version is the one in use.
 26589                                  ;
 26590                                  ;----------------------------------------------------------------------------
 26591                                  
 26592                                  
 26593                                  ; This entry point has character at [SI]
 26594                                  
 26595                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 26596                                  GETLET:	
 26597 000058EC AC                      	LODSB
 26598                                  
 26599                                  ; This entry point has character in AL
 26600                                  
 26601                                  	;entry	UCase
 26602                                  UCase:	
 26603                                  	; 09/08/2018
 26604                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 26605                                  _UCase:
 26606 000058ED 53                      	PUSH	BX
 26607 000058EE BB[4811]                	MOV	BX,FILE_UCASE_TAB+2
 26608                                  
 26609                                  ; Convert the character in AL to upper case
 26610                                  
 26611                                  gl_0:
 26612 000058F1 3C61                    	CMP	AL,"a"
 26613 000058F3 720E                    	JB	short gl_2	; Already upper case, go check type
 26614 000058F5 3C7A                    	CMP	AL,"z"
 26615 000058F7 7702                    	JA	short gl_1
 26616 000058F9 2C20                    	SUB	AL,20H		; Convert to upper case
 26617                                  
 26618                                  ; Map European character to upper case
 26619                                  
 26620                                  gl_1:
 26621 000058FB 3C80                    	CMP	AL,80H
 26622 000058FD 7204                    	JB	short gl_2	; Not EuroChar, go check type
 26623 000058FF 2C80                    	SUB	AL,80H		; translate to upper case with this index
 26624                                  
 26625                                  	; M048 - Start 
 26626                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 26627                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 26628                                  	; preserve it.
 26629                                  	;
 26630                                  
 26631                                  	;push	ds
 26632                                  	;push	cs
 26633                                  	;pop	ds
 26634                                  
 26635                                  	; 09/08/2018
 26636                                  	;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 26637 00005901 2ED7                    	CS	XLAT
 26638                                  
 26639                                  	;pop	ds
 26640                                  
 26641                                  	; M048 - End
 26642                                  
 26643                                  ; Now check the type
 26644                                  
 26645                                  ;If TableLook
 26646                                  
 26647                                  gl_2:
 26648 00005903 50                      	PUSH	AX
 26649                                  	
 26650                                  	; MSDOS 6.0
 26651                                  	;CALL	GetCharType	; returns type flags in AL
 26652                                  	
 26653                                  	; MSDOS 3.3
 26654 00005904 BB[5413]                	mov	bx,CharType
 26655                                  	; 09/08/2018
 26656                                  	;xlat	byte [cs:bx]
 26657 00005907 2ED7                    	cs	xlat	
 26658                                  
 26659                                  	;test	al,1	
 26660 00005909 A801                    	TEST	AL,FCHK 	; test for normal character
 26661 0000590B 58                      	POP	AX
 26662 0000590C 5B                      	POP	BX
 26663 0000590D C3                      	RETN
 26664                                  
 26665                                  ; This entry has character in AL and lookup table in BX
 26666                                  
 26667                                  	; MSDOS 6.0
 26668                                  ;	;entry GetLet3
 26669                                  GETLET3: ; 10/08/2018
 26670 0000590E 53                      	PUSH	BX
 26671 0000590F EBE0                    	JMP	short gl_0
 26672                                  
 26673                                  ;ELSE
 26674                                  ;
 26675                                  ;gl_2:
 26676                                  ;	POP	BX
 26677                                  ;	CMP	AL,"."
 26678                                  ;	retz
 26679                                  ;	CMP	AL,'"'
 26680                                  ;	retz
 26681                                  ;	CALL	PATHCHRCMP
 26682                                  ;	retz
 26683                                  ;	CMP	AL,"["
 26684                                  ;	retz
 26685                                  ;	CMP	AL,"]"
 26686                                  ;	retz
 26687                                  ;ENDIF
 26688                                  
 26689                                  ;---------------------------------------------------------------------
 26690                                  ;
 26691                                  ; DELIM - check if character is a delimiter
 26692                                  ;	Entry : AX = character to check
 26693                                  ;	Exit  : ZF set if character is not a delimiter
 26694                                  ;	Uses  : Flags
 26695                                  ;
 26696                                  ;--------------------------------------------------------------------
 26697                                  
 26698                                  	;entry	DELIM
 26699                                  DELIM:
 26700                                  ;IF TableLook
 26701 00005911 50                      	PUSH	AX
 26702                                  
 26703                                  	; MSDOS 6.0
 26704                                  	;CALL	GetCharType
 26705                                  	
 26706                                  	; MSDOS 3.3
 26707 00005912 53                      	push	bx
 26708 00005913 BB[5413]                	mov	bx,CharType
 26709                                  	;09/08/2018
 26710                                  	;xlat	byte [cs:bx]
 26711 00005916 2ED7                    	cs	xlat
 26712 00005918 5B                      	pop	bx
 26713                                  
 26714                                  	;test	al,2
 26715 00005919 A802                    	TEST	AL,FDELIM
 26716 0000591B 58                      	POP	AX
 26717 0000591C C3                      	RETN
 26718                                  ;ELSE
 26719                                  ;	CMP	AL,":"
 26720                                  ;	retz
 26721                                  ;
 26722                                  ;	CMP	AL,"<"
 26723                                  ;	retz
 26724                                  ;	CMP	AL,"|"
 26725                                  ;	retz
 26726                                  ;	CMP	AL,">"
 26727                                  ;	retz
 26728                                  ;
 26729                                  ;	CMP	AL,"+"
 26730                                  ;	retz
 26731                                  ;	CMP	AL,"="
 26732                                  ;	retz
 26733                                  ;	CMP	AL,";"
 26734                                  ;	retz
 26735                                  ;	CMP	AL,","
 26736                                  ;	retz
 26737                                  ;ENDIF
 26738                                  
 26739                                  ;-------------------------------------------------------------------------
 26740                                  ;
 26741                                  ;  SPCHK - checks to see if a character is a space or equivalent
 26742                                  ;	Entry : AL = character to check
 26743                                  ;	Exit  : ZF set if character is a space
 26744                                  ;	Uses  : flags
 26745                                  ;
 26746                                  ;-------------------------------------------------------------------------
 26747                                  
 26748                                  	;entry SPCHK
 26749                                  SPCHK:
 26750                                  ;IF TableLook
 26751 0000591D 50                      	PUSH	AX
 26752                                  
 26753                                  	; MSDOS 6.0
 26754                                  	;CALL	GetCharType
 26755                                  	
 26756                                  	; MSDOS 3.3
 26757 0000591E 53                      	push	bx
 26758 0000591F BB[5413]                	mov	bx,CharType
 26759                                  	; 09/08/2018
 26760                                  	;xlat	byte [cs:bx]
 26761 00005922 2ED7                    	cs	xlat
 26762 00005924 5B                      	pop	bx
 26763                                  
 26764                                  	;test	al,4
 26765 00005925 A804                    	TEST	AL,FSPCHK
 26766 00005927 58                      	POP	AX
 26767 00005928 C3                      	RETN
 26768                                  ;ELSE
 26769                                  ;	CMP	AL,9		; Filter out tabs too
 26770                                  ;	retz
 26771                                  ;; WARNING! " " MUST be the last compare
 26772                                  ;	CMP	AL," "
 26773                                  ;	return
 26774                                  ;ENDIF
 26775                                  
 26776                                  ; MSDOS 6.0
 26777                                  ;-------------------------------------------------------------------------
 26778                                  ;
 26779                                  ;  GetCharType - return flag bits indicating character type
 26780                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 26781                                  ;	defined above at label CharType.
 26782                                  ;
 26783                                  ;	Entry : AL = character to return type flags for
 26784                                  ;	Exit  : AL = type flags
 26785                                  ;	Uses  : AL, flags
 26786                                  ;
 26787                                  ;-------------------------------------------------------------------------
 26788                                  ;
 26789                                  ;GetCharType:
 26790                                  ;	cmp	al,CharType_last	; beyond end of table?
 26791                                  ;	jae	short gct_90		; return standard value
 26792                                  ;
 26793                                  ;	push	bx
 26794                                  ;	mov	bx,CharType		; load lookup table
 26795                                  ;	shr	al,1			; adjust for half-byte table entry size
 26796                                  ;	;xlat	cs:[bx] 		; get flags
 26797                                  ;	cs	xlat	
 26798                                  ;	pop	bx
 26799                                  ;
 26800                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 26801                                  ; we have to shift the flags down to the low nibble
 26802                                  ;
 26803                                  ;	jnc	short gct_80		; carry clear, no shift needed
 26804                                  ;
 26805                                  ;	shr	al,1			; we want high nibble, shift it down
 26806                                  ;	shr	al,1
 26807                                  ;	shr	al,1
 26808                                  ;	shr	al,1
 26809                                  ;
 26810                                  ;gct_80:
 26811                                  ;	and	al,0Fh			; clear the unused nibble
 26812                                  ;	retn
 26813                                  ;
 26814                                  ;gct_90:
 26815                                  ;	mov	al,0Fh			; set all flags
 26816                                  ;	retn
 26817                                  
 26818                                  ;----------------------------------------------------------------------------
 26819                                  ;
 26820                                  ; Procedure : PATHCHRCMP
 26821                                  ;
 26822                                  ;----------------------------------------------------------------------------
 26823                                  
 26824                                  PATHCHRCMP:
 26825 00005929 3C2F                    	CMP	AL,'/'
 26826 0000592B 7606                    	JBE	short PathRet
 26827 0000592D 3C5C                    	CMP	AL,'\'
 26828 0000592F C3                      	retn
 26829                                  GotFor:
 26830 00005930 B05C                    	MOV	AL,'\'
 26831 00005932 C3                      	retn
 26832                                  PathRet:
 26833 00005933 74FB                    	JZ	short GotFor
 26834 00005935 C3                      	retn
 26835                                  
 26836                                  ;============================================================================
 26837                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 26838                                  ;============================================================================
 26839                                  ; 30/07/2018 - Retro DOS v3.0
 26840                                  
 26841                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 26842                                  
 26843                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 26844                                  
 26845                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 26846                                  ;	NAME	IBMCTRLC
 26847                                  
 26848                                  ;**	Low level routines for detecting special characters on CON input,
 26849                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 26850                                  ;	process termination code, and the INT 0 divide overflow handler.
 26851                                  ;
 26852                                  ;	FATAL
 26853                                  ;	FATAL1
 26854                                  ;	reset_environment
 26855                                  ;	DSKSTATCHK
 26856                                  ;	SPOOLINT
 26857                                  ;	STATCHK
 26858                                  ;	CNTCHAND
 26859                                  ;	DIVOV
 26860                                  ;	CHARHARD
 26861                                  ;	HardErr
 26862                                  ;
 26863                                  ;	Revision history:
 26864                                  ;
 26865                                  ;	    AN000	version 4.0   Jan 1988
 26866                                  ;	    A002	PTM    -- dir >lpt3 hangs
 26867                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 26868                                  ;
 26869                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 26870                                  ;	      flags register. In order to return to user normally DOS used to
 26871                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 26872                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 26873                                  ;
 26874                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 26875                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 26876                                  ;	      charhard.
 26877                                  
 26878                                  
 26879                                  	; MSDOS 6.0
 26880                                  ;		public	LowInt23Addr		
 26881                                  ;LowInt23Addr	LABEL	DWORD
 26882                                  ;	DW	offset DOSDATA:LowInt23, 0
 26883                                  ;
 26884                                  ;		public	LowInt24Addr
 26885                                  ;LowInt24Addr	LABEL	DWORD
 26886                                  ;	DW	offset DOSDATA:LowInt24, 0
 26887                                  ;
 26888                                  ;		public	LowInt28Addr
 26889                                  ;LowInt28Addr	LABEL	DWORD
 26890                                  ;	DW	offset DOSDATA:LowInt28, 0
 26891                                  
 26892                                  ;Break	<Checks for ^C in CON I/O>
 26893                                  
 26894                                  ;---------------------------------------------------------------------------
 26895                                  ;
 26896                                  ; Procedure Name : DSKSTATCHK
 26897                                  ;
 26898                                  ; Check for ^C if only one level in
 26899                                  ;
 26900                                  ;---------------------------------------------------------------------------
 26901                                  
 26902                                          ;procedure   DSKSTATCHK,NEAR ; Check for ^C if only one level in
 26903                                  
 26904                                  DSKSTATCHK:        
 26905                                  	;CMP	BYTE [INDOS],1
 26906 00005936 36803E[ED02]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 26907                                  	;retnz			; Do NOTHING
 26908 0000593C 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 26909                                  
 26910 0000593E 51                      	PUSH    CX
 26911 0000593F 06                              PUSH    ES
 26912 00005940 53                              PUSH    BX
 26913 00005941 1E                              PUSH    DS
 26914 00005942 56                              PUSH    SI
 26915                                          
 26916                                  	;PUSH	CS
 26917                                          ;POP	ES
 26918                                          ;PUSH	CS
 26919                                          ;POP	DS
 26920                                  
 26921 00005943 8CD3                    	MOV	BX, SS		; SS is DOSDATA. ES:BX must be set up
 26922 00005945 8EC3                    	MOV	ES, BX		; for deviocall2
 26923 00005947 8EDB                    	MOV	DS, BX
 26924                                  
 26925                                  	; 09/09/2018
 26926 00005949 C606[5E03]05                    MOV     BYTE [DSKSTCOM],DEVRDND
 26927 0000594E C606[5C03]0E                    MOV     BYTE [DSKSTCALL],DRDNDHL
 26928 00005953 C706[5F03]0000          	mov	word [DSKSTST],0
 26929                                  
 26930 00005959 BB[5C03]                        MOV     BX,DSKSTCALL
 26931 0000595C C536[3200]                      LDS     SI,[BCON]
 26932 00005960 E8CDF7                          CALL	DEVIOCALL2
 26933                                   	; 15/03/2018
 26934                                  	;test	word [ss:DSKSTST],200h
 26935                                          ;TEST	WORD [SS:DSKSTST],STBUI
 26936                                  	; 28/07/2019
 26937 00005963 36F606[6003]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 26938                                  	;JNZ	SHORT ZRET		; No characters available
 26939                                  	; 30/07/2018
 26940 00005969 7408                    	jz	short _GotCh
 26941                                  ;ZRET:
 26942 0000596B 30C0                            XOR     AL,AL                   ; Set zero
 26943                                  RET36:
 26944 0000596D 5E                              POP     SI
 26945 0000596E 1F                              POP     DS
 26946 0000596F 5B                              POP     BX
 26947 00005970 07                              POP     ES
 26948 00005971 59                              POP     CX
 26949                                  _RET37:
 26950 00005972 C3                              RETN
 26951                                  
 26952                                  _GotCh:
 26953 00005973 36A0[6903]                      MOV     AL,[SS:DSKCHRET]	; SS override
 26954                                  
 26955 00005977 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 26956 00005979 75F2                            JNZ     SHORT RET36
 26957 0000597B 36C606[5E03]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 26958 00005981 36C606[5C03]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 26959 00005987 36880E[6903]                    MOV     [SS:DSKCHRET],CL
 26960                                  	; 09/09/2018
 26961 0000598C 36C706[5F03]0000        	MOV	word [SS:DSKSTST],0
 26962 00005993 36C706[6E03]0100        	MOV	word [SS:DSKSTCNT],1
 26963 0000599A E893F7                  	CALL	DEVIOCALL2              ; Eat the ^C
 26964 0000599D 5E                              POP     SI
 26965 0000599E 1F                              POP     DS
 26966 0000599F 5B                              POP     BX                      ; Clean stack
 26967 000059A0 07                              POP     ES
 26968 000059A1 59                              POP     CX
 26969 000059A2 E9BF00                          JMP	CNTCHAND ; 10/08/2018
 26970                                  
 26971                                  NOSTOP:
 26972                                  	; MSDOS 6.0
 26973                                  	;CMP	AL,"P"-"@"
 26974                                  	;JNZ	short check_next
 26975                                  				    	; SS override
 26976                                  	;CMP	BYTE [SS:Scan_Flag],0	; ALT_Q ?
 26977                                  	;JZ	short INCHKJ		; no
 26978                                  	;retn
 26979                                  ;check_next:
 26980                                  	;;IF	NOT TOGLPRN
 26981                                  	;CMP	AL,"N"-"@"
 26982                                  	;JZ	short INCHKJ
 26983                                  	;;ENDIF
 26984                                  
 26985                                  	;CMP	AL,"C"-"@"
 26986                                  	;JZ	short INCHKJ
 26987                                  ;check_end:
 26988                                  	;retn
 26989                                  
 26990                                  	; MSDOS 3.3
 26991 000059A5 3C10                            CMP     AL,"P"-"@"  ; cmp al,16	
 26992 000059A7 7405                            JZ	short INCHKJ
 26993                                  
 26994                                  	; 15/04/2018
 26995                                          ;;IF	NOT TOGLPRN
 26996                                          ;CMP	AL,"N"-"@"
 26997                                          ;JZ	SHORT INCHKJ
 26998                                          ;;ENDIF
 26999                                  
 27000 000059A9 3C03                            CMP     AL,"C"-"@"  ; cmp al,3	
 27001 000059AB 7401                            JZ	short INCHKJ
 27002 000059AD C3                      	RETN
 27003                                  
 27004                                  	; 08/09/2018
 27005                                  INCHKJ:	; 10/08/2018
 27006 000059AE E98F00                  	JMP	INCHK
 27007                                  
 27008                                  ;----------------------------------------------------------------------------
 27009                                  ;
 27010                                  ; Procedure Name : SpoolInt
 27011                                  ;
 27012                                  ; SpoolInt - signal processes that the DOS is truly idle.  We are allowed to
 27013                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 27014                                  ; the middle of an INT 24.
 27015                                  ;
 27016                                  ;----------------------------------------------------------------------------
 27017                                  
 27018                                  SPOOLINT:
 27019 000059B1 9C                              PUSHF
 27020                                  	; 15/03/2018
 27021 000059B2 36803E[2203]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 27022 000059B8 7414                            JZ      SHORT POPFRET
 27023 000059BA 36803E[EC02]00                  CMP     BYTE [SS:ERRORMODE],0
 27024 000059C0 750C                            JNZ     SHORT POPFRET		;No spool ints in error mode
 27025                                  
 27026                                  	; 30/07/2018
 27027                                  
 27028                                  	; Note that we are going to allow an external program to issue system 
 27029                                  	; calls at this time.  We MUST preserve IdleInt across this.
 27030                                  
 27031                                  
 27032 000059C2 36FF36[2203]            	PUSH	WORD [SS:IDLEINT]
 27033                                   
 27034                                  	; MSDOS 6.0
 27035                                  	;cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 27036                                  	;jne	short do_low_int28	; Y: the int must be done from low mem
 27037                                  	;INT	int_spooler		; N: Execute user int 28 handler
 27038                                  	;jmp	short spool_ret_addr
 27039                                  
 27040                                  ;do_low_int28:
 27041                                  	;call	far [SS:LowInt28Addr]
 27042                                  
 27043                                  ;spool_ret_addr:
 27044                                  
 27045 000059C7 CD28                            INT     int_spooler		; INT 28h
 27046                                  
 27047 000059C9 368F06[2203]            	POP	WORD [SS:IDLEINT]
 27048                                  
 27049                                  POPFRET:
 27050 000059CE 9D                              POPF
 27051                                  _RET18:  
 27052 000059CF C3                      	RETN
 27053                                  
 27054                                  ;----------------------------------------------------------------------------
 27055                                  ;
 27056                                  ; Procedure Name : STATCHK
 27057                                  ;
 27058                                  ;----------------------------------------------------------------------------
 27059                                  
 27060                                  STATCHK:
 27061 000059D0 E863FF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 27062                                                                          ; input redirection
 27063 000059D3 53                              PUSH    BX
 27064 000059D4 31DB                            XOR     BX,BX
 27065 000059D6 E8BBE7                          CALL	GET_IO_SFT
 27066 000059D9 5B                              POP     BX
 27067 000059DA 72F3                            JC      SHORT _RET18
 27068 000059DC B401                            MOV     AH,1
 27069 000059DE E8A2F5                          CALL	IOFUNC
 27070 000059E1 74CE                            JZ      SHORT SPOOLINT
 27071 000059E3 3C13                            CMP     AL,'S'-'@'
 27072 000059E5 75BE                            JNZ     SHORT NOSTOP
 27073                                  
 27074                                  	; MSDOS 6.0			; SS override
 27075                                  	;CMP	BYTE [SS:Scan_Flag],0	; AN000; ALT_R ?
 27076                                  	;JNZ	short check_end		; AN000; yes
 27077                                  
 27078 000059E7 30E4                            XOR     AH,AH
 27079 000059E9 E897F5                          CALL	IOFUNC                  ; Eat Cntrl-S
 27080 000059EC EB4B                            JMP     SHORT PAUSOSTRT
 27081                                  
 27082                                  PRINTOFF:
 27083                                  PRINTON:
 27084 000059EE 36F616[CA02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 27085                                  
 27086                                  	; 30/07/2018 - Retro DOS v3.0
 27087 000059F3 53                      	PUSH	BX
 27088 000059F4 BB0400                  	MOV	BX,4
 27089 000059F7 E89AE7                  	call	GET_IO_SFT
 27090 000059FA 5B                      	POP	BX
 27091 000059FB 72D2                    	jc	short _RET18
 27092 000059FD 06                      	PUSH	ES
 27093 000059FE 57                      	PUSH	DI
 27094 000059FF 1E                      	PUSH	DS
 27095 00005A00 07                      	POP	ES
 27096 00005A01 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 27097                                  	;test	word [es:di+5],800h
 27098 00005A03 26F745050008            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 27099 00005A09 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 27100                                  
 27101                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 27102                                  					; See if allowed
 27103 00005A0B 50                      	push	ax
 27104 00005A0C B82611                  	mov	ax, 1126h
 27105 00005A0F CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 27106                                  			; Return: CF set on error, AX = error code
 27107                                  			; STACK unchanged
 27108 00005A11 58                      	pop	ax
 27109                                  
 27110 00005A12 730F                    	JNC	short NORM_PR 		; Echo is OK
 27111                                  
 27112                                  					; SS override
 27113 00005A14 36C606[CA02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 27114                                  
 27115                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 27116                                  
 27117 00005A1A 50                      	push    ax
 27118 00005A1B B82411                  	mov     ax,1124h
 27119 00005A1E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 27120                                  			; ES:DI -> SFT, SS = DOS CS
 27121 00005A20 58                      	pop     ax
 27122                                  
 27123 00005A21 EB10                    	JMP	SHORT RETP6
 27124                                  
 27125                                  NORM_PR:
 27126 00005A23 36803E[CA02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 27127 00005A29 7505                    	JNZ	short PRNOPN
 27128 00005A2B E884F6                  	call	DEV_CLOSE_SFT
 27129 00005A2E EB03                    	JMP	SHORT RETP6
 27130                                  
 27131                                  PRNOPN:
 27132 00005A30 E878F6                  	call	DEV_OPEN_SFT
 27133                                  RETP6:
 27134 00005A33 5F                      	POP	DI
 27135 00005A34 07                      	POP	ES
 27136                                  
 27137                                  STATCHK_RETN:
 27138 00005A35 C3                              RETN
 27139                                  
 27140                                  PAUSOLP:
 27141 00005A36 E878FF                          CALL    SPOOLINT
 27142                                  PAUSOSTRT:
 27143 00005A39 B401                            MOV     AH,1
 27144 00005A3B E845F5                          CALL	IOFUNC
 27145 00005A3E 74F6                            JZ      SHORT PAUSOLP
 27146                                  INCHK:
 27147 00005A40 53                              PUSH    BX
 27148 00005A41 31DB                            XOR     BX,BX
 27149 00005A43 E84EE7                          CALL	GET_IO_SFT
 27150 00005A46 5B                              POP     BX
 27151 00005A47 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 27152 00005A49 30E4                            XOR     AH,AH
 27153 00005A4B E835F5                          CALL	IOFUNC
 27154                                  	; 30/07/2018
 27155                                  	; MSDOS 3.3
 27156 00005A4E 3C10                            CMP     AL,'P'-'@' ;cmp al,16
 27157 00005A50 750E                            JNZ	SHORT NOPRINT
 27158                                  
 27159 00005A52 36803E[C10F]00          	cmp	byte [SS:SCAN_FLAG],0
 27160 00005A58 7494                    	JZ	SHORT PRINTON	
 27161 00005A5A 36C606[C10F]00          	mov	byte [ss:SCAN_FLAG],0
 27162                                  
 27163                                  	; MSDOS 6.0
 27164                                  	;CMP	AL,"P"-"@"
 27165                                  	;;;;;  7/14/86	ALT_Q key fix
 27166                                  	;JZ	short PRINTON		; no! must be CTRL_P
 27167                                  
 27168                                  NOPRINT:	
 27169                                  	;IF	NOT TOGLPRN
 27170                                  	;CMP	AL,"N"-"@"
 27171                                  	;JZ	short PRINTOFF
 27172                                  	;ENDIF
 27173 00005A60 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 27174                                  	;retnz
 27175 00005A62 75D1                    	jnz	short STATCHK_RETN
 27176                                  
 27177                                  ;	!! NOTE: FALL THROUGH !!
 27178                                  
 27179                                  ;---------------------------------------------------------------------------
 27180                                  ;
 27181                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 27182                                  ;
 27183                                  ; "^C" and CR/LF is printed.  Then the user registers are restored and the
 27184                                  ; user CTRL-C handler is executed.  At this point the top of the stack has 1)
 27185                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 27186                                  ; processing to continue; 2) the original interrupt return address to the code
 27187                                  ; that performed the function call in the first place.	If the user CTRL-C
 27188                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 27189                                  ; (not IRET) with carry CLEAR.	If carry is SET then an terminate system call
 27190                                  ; is simulated.
 27191                                  ;
 27192                                  ;---------------------------------------------------------------------------
 27193                                  
 27194                                  CNTCHAND:
 27195                                  	; MSDOS 6.0			; SS override
 27196                                  					; AN002; from RAWOUT
 27197                                  	;TEST	word [SS:Dos34_Flag],CTRL_BREAK_FLAG  
 27198                                  	;JNZ	short around_deadlock 	; AN002;
 27199                                  
 27200 00005A64 B003                            MOV     AL,3			; Display "^C"
 27201 00005A66 E846CA                          CALL	BUFOUT
 27202 00005A69 E8E6C8                          CALL	CRLF
 27203                                  ;around_deadlock:
 27204 00005A6C 16                              PUSH    SS
 27205 00005A6D 1F                              POP     DS
 27206 00005A6E 803E[2103]00                    CMP     BYTE [CONSWAP],0
 27207 00005A73 7403                            JZ      SHORT NOSWAP
 27208 00005A75 E835E4                          CALL	SWAPBACK
 27209                                  NOSWAP:
 27210 00005A78 FA                      	CLI				; Prepare to play with stack
 27211 00005A79 8E16[4205]              	MOV	SS,[USER_SS]		; User stack now restored
 27212 00005A7D 8B26[4005]              	MOV	SP,[USER_SP]
 27213 00005A81 E89FBB                          CALL	restore_world       ; User registers now restored
 27214                                  
 27215                                  	; 30/07/2018 - Retro DOS v3.0 
 27216                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 27217                                          ; 14/03/2018 - Retro DOS v2.0
 27218 00005A84 2EC606[ED02]00          	MOV     BYTE [CS:INDOS],0	
 27219 00005A8A 2EC606[EC02]00                  MOV     BYTE [CS:ERRORMODE],0
 27220 00005A90 2E8926[FE02]                    MOV     [CS:ConC_Spsave],SP
 27221 00005A95 F8                      	clc	;30/07/2018
 27222 00005A96 CD23                            INT     int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 27223                                  	;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 27224                                  			; Return: return via RETF 2 with CF set
 27225                                  			; DOS will abort program with errorlevel 0
 27226                                  			; else
 27227                                  			; interrupted DOS call continues
 27228                                  
 27229                                  	; 30/07/2018 
 27230                                  
 27231                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 27232                                  
 27233                                  ; The user has returned to us.	The circumstances we allow are:
 27234                                  ;
 27235                                  ;   IRET	We retry the operation by redispatching the system call
 27236                                  ;   CLC/RETF	POP the stack and retry
 27237                                  ;   ... 	Exit the current process with ^C exit
 27238                                  ;
 27239                                  ; User's may RETURN to us and leave interrupts on. 
 27240                                  ; Turn 'em off just to be sure
 27241                                  
 27242 00005A98 FA                      	CLI
 27243                                  
 27244 00005A99 2EA3[0403]              	MOV	[CS:USER_IN_AX],ax	; save the AX
 27245 00005A9D 9C                      	PUSHF				; and the flags (maybe new call)
 27246 00005A9E 58                      	POP	AX
 27247                                  
 27248                                  ; See if the input stack is identical to the output stack
 27249                                  
 27250 00005A9F 2E3B26[FE02]                    CMP	SP,[CS:ConC_Spsave]
 27251 00005AA4 7507                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 27252                                  
 27253                                  ; Repeat the operation by redispatching the system call.
 27254                                  
 27255                                  ctrlc_repeat:
 27256 00005AA6 2EA1[0403]                      MOV     AX,[CS:USER_IN_AX]
 27257                                  	;transfer COMMAND           ; Repeat command otherwise
 27258                                  COMMANDJ:
 27259 00005AAA E93BBA                  	JMP	COMMAND
 27260                                  
 27261                                  ; The current SP is NOT the same as the input SP. Presume that he 
 27262                                  ; RETF'd leaving some flags on the stack and examine the input
 27263                                  
 27264                                  ctrlc_try_new:
 27265 00005AAD 83C402                  	ADD	SP,2			; pop those flags
 27266                                  	;test	ax,1
 27267 00005AB0 A90100                  	TEST	AX,f_Carry		; did he return with carry?
 27268 00005AB3 74F1                    	JZ	short ctrlc_repeat	; no carry set, just retry
 27269                                  
 27270                                  	; Well...  time to abort the user.  
 27271                                  	; Signal a ^C exit and use the EXIT system call..
 27272                                  
 27273                                  ctrlc_abort:
 27274                                          ;MOV	AX,(EXIT SHL 8) + 0
 27275 00005AB5 B8004C                          MOV	AX, (EXIT*256) + 0  ; 4C00h
 27276 00005AB8 2EC606[1703]FF          	mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 27277                                          ;transfer COMMAND	    ; give up by faking $EXIT
 27278                                  	;JMP	SHORT COMMANDJ
 27279 00005ABE E927BA                  	JMP	COMMAND
 27280                                  
 27281                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 27282                                  ;----------------------------------------------------------------------------
 27283                                  ;
 27284                                  ; Procedure Name : DIVOV
 27285                                  ;
 27286                                  ; Default handler for division overflow trap
 27287                                  ;
 27288                                  ;----------------------------------------------------------------------------
 27289                                  
 27290                                  DIVOV: 
 27291                                  	; 30/07/2018
 27292                                  	; 07/07/2018 - Retro DOS v3.0
 27293 00005AC1 BE[FA12]                	mov	si,DIVMES
 27294 00005AC4 2E8B1E[0D13]            	mov	bx,[cs:DivMesLen]
 27295 00005AC9 8CC8                    	mov     ax,cs
 27296 00005ACB 8ED0                    	mov	ss,ax
 27297 00005ACD BC[3607]                	mov     sp,AUXSTACK
 27298 00005AD0 E80200                  	call	RealDivOv
 27299                                  	;call	_outmes ; MSDOS 6.0
 27300 00005AD3 EBE0                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 27301                                  
 27302                                  ; 30/07/2018
 27303                                  
 27304                                  ; MSDOS 6.0
 27305                                  ;---------------------------------------------------------------------------
 27306                                  ;
 27307                                  ; Procedure Name : OutMes
 27308                                  ;
 27309                                  ;
 27310                                  ; OutMes: perform message output
 27311                                  ; Inputs:   SS:SI points to message
 27312                                  ;	    BX has message length
 27313                                  ; Outputs:  message to BCON
 27314                                  ;
 27315                                  ;Actually, cs:si points to the message now. The segment address is filled in
 27316                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 27317                                  ;NB. This procedure is called only from DIVOV. -SR
 27318                                  ;
 27319                                  ;---------------------------------------------------------------------------
 27320                                  
 27321                                  ;MSDOS 3.3
 27322                                  ;---------------------------------------------------------------------------
 27323                                  ; RealDivOv: perform actual divide overflow stuff.
 27324                                  ; Inputs:   none
 27325                                  ; Outputs:  message to BCON
 27326                                  ;---------------------------------------------------------------------------
 27327                                  
 27328                                  	; 30/07/2018
 27329                                  	; MSDOS 6.0
 27330                                  ;_OUTMES:
 27331                                  	;MSDOS 3.3
 27332                                  RealDivOv:
 27333                                  	 
 27334                                  	; 07/07/2018 - Retro DOS v3.0
 27335                                          ;Context ES
 27336                                          ;push	ss ; 30/07/2018
 27337 00005AD5 0E                      	PUSH	CS			; get ES addressability
 27338 00005AD6 07                      	POP	ES
 27339                                          ;Context DS
 27340                                  	;push	ss ; 30/07/2018
 27341 00005AD7 0E                      	PUSH	CS			; get DS addressability
 27342 00005AD8 1F                      	POP	DS
 27343 00005AD9 C606[5E03]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 27344 00005ADE C606[5C03]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 27345 00005AE3 C706[5F03]0000                  MOV     WORD [DSKSTST],0
 27346                                  	; BX = [DivMesLen] = 19
 27347 00005AE9 891E[6E03]                      MOV     [DSKSTCNT],BX
 27348 00005AED BB[5C03]                        MOV     BX,DSKSTCALL
 27349                                          ;MOV     [DSKCHRET+1],SI	; transfer address (need an EQU)
 27350                                  	; 08/09/2018
 27351 00005AF0 8936[6A03]              	mov	[DEVIOBUF_PTR],si
 27352                                  	; MSDOS 6.0
 27353                                  					; CS is used for string, fill in 
 27354                                  					; segment address 
 27355                                  	;MOV	[DskChRet+3],CS
 27356                                  
 27357 00005AF4 C536[3200]                      LDS     SI,[BCON]
 27358 00005AF8 E835F6                          CALL	DEVIOCALL2
 27359                                  	; 14/03/2018
 27360                                          ;MOV     WORD [CS:DSKCHRET+1],DEVIOBUF
 27361                                  	; 08/09/2018
 27362 00005AFB 2EC706[6A03][8003]      	mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 27363 00005B02 2EC706[6E03]0100                MOV     WORD [CS:DSKSTCNT],1
 27364 00005B09 C3                              RETN
 27365                                  
 27366                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 27367                                  ;---------------------------------------------------------------------------
 27368                                  ;
 27369                                  ; Procedure Name : CHARHARD
 27370                                  ;
 27371                                  ;
 27372                                  ; Character device error handler
 27373                                  ; Same function as HARDERR
 27374                                  ;
 27375                                  ;---------------------------------------------------------------------------
 27376                                  
 27377                                  CHARHARD:
 27378                                  	; 30/07/2018
 27379                                  	; 08/07/2018 - Retro DOS v3.0
 27380                                  
 27381                                  	; MSDOS 6.0
 27382                                  ;		   			; M024 - start
 27383                                  ;	cmp	byte ptr [ERRORMODE], 0	; Q: are we in the middle of int 24
 27384                                  ;	jne	@f			; Y: allow fail
 27385                                  ;
 27386                                  ;	OR	AH, Allowed_RETRY	; assume ctrl p
 27387                                  ;
 27388                                  ;	test	byte ptr [PFLAG], -1	; Q: has ctrl p been pressed
 27389                                  ;	jnz	ctrlp			; Y: 
 27390                                  ;@@:					; M024 - end
 27391                                  
 27392                                  ; Character device error handler
 27393                                  ; Same function as HARDERR
 27394                                  
 27395                                  	;or	ah,38h
 27396 00005B0A 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 27397                                  ;ctrlp:			; SS override for Allowed and EXITHOLD
 27398 00005B0D 368826[1503]            	mov	[SS:ALLOWED],ah
 27399                                  
 27400                                  	; 15/03/2018
 27401 00005B12 368C06[3E05]                    MOV     [SS:EXITHOLD+2],ES
 27402 00005B17 36892E[3C05]                    MOV     [SS:EXITHOLD],BP
 27403 00005B1C 56                              PUSH    SI
 27404                                  	;and	di,0FFh
 27405 00005B1D 81E7FF00                        AND     DI,STECODE
 27406 00005B21 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 27407 00005B23 E86400                          CALL    FATALC
 27408 00005B26 5E                              POP     SI
 27409                                  	;return
 27410 00005B27 C3                              RETN
 27411                                  
 27412                                  ;---------------------------------------------------------------------------
 27413                                  ;
 27414                                  ; Procedure Name : HardErr
 27415                                  ;
 27416                                  ; Hard disk error handler. Entry conditions:
 27417                                  ;	DS:BX = Original disk transfer address
 27418                                  ;	DX = Original logical sector number
 27419                                  ;	CX = Number of sectors to go (first one gave the error)
 27420                                  ;	AX = Hardware error code
 27421                                  ;	DI = Original sector transfer count	
 27422                                  ;	ES:BP = Base of drive parameters
 27423                                  ;	[READOP] = 0 for read, 1 for write
 27424                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 27425                                  ; Output:
 27426                                  ;	[FAILERR] will be set if user responded FAIL
 27427                                  ;
 27428                                  ;--------------------------------------------------------------------------
 27429                                  
 27430                                  HARDERR:
 27431                                  	; 30/07/2018
 27432                                  	; 08/07/2018 - Retro DOS v3.0
 27433 00005B28 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 27434                                          ;and	di,0FFh
 27435 00005B29 81E7FF00                	AND     DI,STECODE              ; And off status bits
 27436                                          ;CMP	DI,WRECODE		; Write Protect Error?
 27437                                  	;cmp	di,0
 27438 00005B2D 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 27439 00005B30 750A                            JNZ     short NOSETWRPERR
 27440 00005B32 50                              PUSH    AX
 27441                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 27442                                          ;MOV	AL,[ES:BP+0]
 27443 00005B33 268A4600                	mov	al,[ES:BP]
 27444                                          	; 15/03/2018
 27445 00005B37 36A2[EE02]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 27446 00005B3B 58                              POP     AX
 27447                                  NOSETWRPERR:
 27448 00005B3C 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 27449 00005B3E 01C2                            ADD     DX,AX                   ; First sector number to retry
 27450 00005B40 52                              PUSH    DX
 27451                                  	; 08/07/2018
 27452                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 27453 00005B41 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 27454 00005B45 5A                              POP     DX
 27455 00005B46 01C3                            ADD     BX,AX                   ; First address for retry
 27456 00005B48 30E4                            XOR     AH,AH                   ; Flag disk section in error
 27457                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 27458 00005B4A 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 27459 00005B4E 721A                            JB      SHORT ERRINT
 27460 00005B50 FEC4                            INC     AH                      ; Flag for FAT
 27461                                          ;CMP	DX,[ES:BP+10H] 		; In FAT?
 27462 00005B52 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]   
 27463 00005B56 7308                    	JAE	short TESTDIR 		; No
 27464                                  		 ; Err in FAT must force recomp of freespace
 27465                                  	;mov	word[ES:BP+1Eh],-1
 27466 00005B58 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 27467 00005B5E EB0A                    	JMP	SHORT ERRINT
 27468                                  TESTDIR:
 27469 00005B60 FEC4                            INC     AH
 27470                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 27471 00005B62 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 27472 00005B66 7202                            JB      SHORT ERRINT
 27473 00005B68 FEC4                            INC     AH                      ; Must be in data area
 27474                                  ERRINT:
 27475 00005B6A D0E4                            SHL     AH,1                    ; Make room for read/write bit
 27476 00005B6C 360A26[3205]                    OR      AH,[SS:READOP] ; 15/03/2018
 27477                                  
 27478                                  	; 15/08/2018
 27479                                  					; SS override for allowed and EXITHOLD
 27480 00005B71 360A26[1503]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 27481                                  
 27482                                          ;entry   FATAL
 27483                                  FATAL:
 27484                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 27485                                          ;MOV	AL,[ES:BP+0]		; Get drive number
 27486 00005B76 268A4600                	MOV	AL,[ES:BP]        
 27487                                  
 27488                                  	;entry   FATAL1
 27489                                  FATAL1:  
 27490                                  	; 15/03/2018      
 27491 00005B7A 368C06[3E05]            	MOV     [SS:EXITHOLD+2],ES
 27492 00005B7F 36892E[3C05]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 27493                                  	;LES	SI,[ES:BP+12H]
 27494 00005B84 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 27495 00005B88 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 27496                                  
 27497                                  	; DI has the INT-24-style extended error. We now map the error code 
 27498                                  	; for this into the normalized get extended error set by using the 
 27499                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 27500                                  	; the device returned codes and leave all others beyond the look up 
 27501                                  	; table alone.
 27502                                  
 27503                                  	; 08/07/2018 - Retro DOS v3.0
 27504                                  FATALC:
 27505 00005B8A E86701                  	call	SET_I24_EXTENDED_ERROR
 27506                                  	;cmp	di,0Ch
 27507 00005B8D 83FF0C                  	CMP	DI,error_I24_gen_failure
 27508 00005B90 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 27509 00005B92 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 27510                                  					;  Only come via GetExtendedError
 27511                                  ;**
 27512                                  ;
 27513                                  ; Entry point used by REDIRector on Network I 24 errors.
 27514                                  ;
 27515                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 27516                                  ;
 27517                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 27518                                  ;     EXITHOLD set for restore of ES:BP.
 27519                                  ;
 27520                                  	;entry	NET_I24_ENTRY
 27521                                  NET_I24_ENTRY:
 27522                                  GOT_RIGHT_CODE:
 27523 00005B95 36803E[EC02]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 27524 00005B9B 7404                            JZ	SHORT NoSetFail
 27525 00005B9D B003                    	MOV	AL,3
 27526 00005B9F EB51                    	JMP	short FailRet
 27527                                  NoSetFail:
 27528 00005BA1 368926[4405]                    MOV     [SS:CONTSTK],SP		; SS override
 27529 00005BA6 16                              PUSH	SS
 27530 00005BA7 07                              POP	ES
 27531                                      
 27532                                  	; Wango!!! We may need to free some user state info... In 
 27533                                  	; particular, we may have locked down a JFN for a user and he may 
 27534                                  	; NEVER return to us. Thus,we need to free it here and then 
 27535                                  	; reallocate it when we come back.
 27536                                  
 27537 00005BA8 36833E[6605]FF          	CMP	word [SS:SFN],-1
 27538 00005BAE 740C                    	JZ	short _NoFree
 27539 00005BB0 1E                      	push	ds
 27540 00005BB1 56                      	push	si
 27541 00005BB2 36C536[6A05]            	LDS	SI,[SS:PJFN]
 27542 00005BB7 C604FF                  	MOV	BYTE [SI],0FFH
 27543 00005BBA 5E                      	pop	si
 27544 00005BBB 1F                      	pop	ds
 27545                                  
 27546                                  _NoFree:
 27547 00005BBC FA                      	CLI
 27548                                  					; Prepare to play with stack
 27549 00005BBD 36FE06[EC02]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 27550 00005BC2 36FE0E[ED02]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 27551 00005BC7 368E16[4205]                    MOV     SS,[SS:USER_SS]
 27552 00005BCC 268B26[4005]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 27553                                  	;int	24h	
 27554 00005BD1 CD24                            INT     int_fatal_abort         ; Fatal error interrupt vector, must preserve ES
 27555 00005BD3 268926[4005]                    MOV     [ES:USER_SP],SP         ; restore our stack
 27556 00005BD8 268C16[4205]                    MOV     [ES:USER_SS],SS
 27557 00005BDD 8CC5                            MOV     BP,ES
 27558 00005BDF 8ED5                            MOV     SS,BP
 27559 00005BE1 368B26[4405]                    MOV     SP,[SS:CONTSTK]
 27560 00005BE6 36FE06[ED02]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 27561 00005BEB 36C606[EC02]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 27562 00005BF1 FB                              STI
 27563                                  FailRet:
 27564 00005BF2 36C42E[3C05]                    LES     BP,[SS:EXITHOLD]
 27565                                  	
 27566                                  	; 08/07/2018
 27567                                  
 27568                                  	; Triage the user's reply.
 27569                                  
 27570 00005BF7 3C01                    	CMP	AL,1
 27571 00005BF9 7235                    	JB	short CheckIgnore	; 0 => ignore
 27572 00005BFB 743D                    	JZ	short CheckRetry	; 1 => retry
 27573 00005BFD 3C03                    	CMP	AL,3			; 3 => fail
 27574 00005BFF 7543                    	JNZ	short DoAbort 		; 2, invalid => abort
 27575                                  
 27576                                  	; The reply was fail.  See if we are allowed to fail.
 27577                                  
 27578                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 27579                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 27580                                  	;test	byte [ss:ALLOWED],8
 27581 00005C01 36F606[1503]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 27582 00005C07 743B                    	jz	short DoAbort	; No, do abort
 27583                                  DoFail:
 27584 00005C09 B003                    	MOV	AL,3		; just in case...
 27585                                  				; AN000;EO. I24 error disabled
 27586                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 27587                                  	;test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 27588                                  	;jnz	short Cleanup 		; AN000;EO. no
 27589                                  	
 27590 00005C0B 36FE06[1403]            	inc	byte [SS:FAILERR]	; Tell everybody
 27591                                  
 27592                                  CleanUp:
 27593 00005C10 36C606[EE02]FF          	MOV	byte [SS:WPERR],-1
 27594 00005C16 36833E[6605]FF          	CMP	word [SS:SFN],-1
 27595                                  	;jnz	short CleanUp2
 27596                                  	;retn
 27597 00005C1C 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 27598                                  ;CleanUp2:
 27599 00005C1E 1E                      	push	ds
 27600 00005C1F 56                      	push	si
 27601 00005C20 50                      	push	ax
 27602 00005C21 36A1[6605]              	MOV	AX,[ss:SFN]
 27603 00005C25 36C536[6A05]            	LDS	SI,[ss:PJFN]
 27604 00005C2A 8804                    	MOV	[SI],AL
 27605 00005C2C 58                      	pop	ax
 27606 00005C2D 5E                      	pop	si
 27607 00005C2E 1F                      	pop	ds
 27608                                  Cleanup_retn:
 27609 00005C2F C3                      	retn
 27610                                  
 27611                                  	; The reply was IGNORE. See if we are allowed to ignore.
 27612                                  
 27613                                  CheckIgnore:
 27614                                  	;test	byte [ss:ALLOWED],20h
 27615 00005C30 36F606[1503]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 27616 00005C36 74D1                    	jz	short DoFail			 ; No, do fail
 27617 00005C38 EBD6                    	jmp	short CleanUp
 27618                                  
 27619                                  	; The reply was RETRY. See if we are allowed to retry.
 27620                                  
 27621                                  CheckRetry:
 27622                                  	;test	byte [ss:ALLOWED],10h
 27623 00005C3A 36F606[1503]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 27624 00005C40 74C7                    	jz	short DoFail			; No, do fail
 27625 00005C42 EBCC                    	JMP	short CleanUp
 27626                                  
 27627                                  	; The reply was ABORT.
 27628                                  
 27629                                  DoAbort:
 27630 00005C44 16                      	push	ss
 27631 00005C45 1F                      	pop	ds
 27632                                  
 27633 00005C46 803E[2103]00            	CMP	byte [CONSWAP],0
 27634 00005C4B 7403                    	JZ	short NOSWAP2
 27635 00005C4D E85DE2                  	call	SWAPBACK
 27636                                  NOSWAP2:
 27637                                  	; See if we are to truly abort. If we are in the process of aborting, 
 27638                                  	; turn this abort into a fail.
 27639                                  
 27640                                  	;test	byte [fAborting],0FFh
 27641                                  	;jnz	short DoFail
 27642                                  
 27643 00005C50 803E[2303]00            	cmp	byte [fAborting],0
 27644 00005C55 75B2                    	JNZ	short DoFail
 27645                                  
 27646                                  	; Set return code
 27647                                  
 27648 00005C57 C606[3905]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR
 27649 00005C5C 30C0                    	XOR	AL,AL
 27650                                  
 27651                                  	; we are truly aborting the process. Go restore information from 
 27652                                  	; the PDB as necessary.
 27653                                  
 27654 00005C5E E9A00B                  	jmp	exit_inner
 27655                                  
 27656                                  ;**
 27657                                  ;
 27658                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 27659                                  ; different, then an old-style return is performed. If they are the same,
 27660                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 27661                                  ; the source of the terminate addresses.
 27662                                  ;
 27663                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 27664                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 27665                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 27666                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 27667                                  ; flag that will indicate that if any abort code is seen, we just continue the
 27668                                  ; operation. In essence, we dis-allow the abort response.
 27669                                  ;
 27670                                  ; output:   none.
 27671                                  ;
 27672                                  	;entry	reset_environment
 27673                                  	
 27674                                  reset_environment:
 27675                                  	; 30/07/2018 - Retro DOS v3.0
 27676                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 27677                                  
 27678                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 27679                                  
 27680 00005C61 1E                      	PUSH	DS			; save PDB of process
 27681                                  
 27682                                  	; There are no critical sections in force. Although we may enter 
 27683                                  	; here with critical sections locked down, they are no longer 
 27684                                  	; relevant. We may safely free all allocated resources.
 27685                                  
 27686 00005C62 B482                    	MOV	AH,82h
 27687                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 27688                                  	;int	2Ah 	
 27689 00005C64 CD2A                    	INT	int_IBM
 27690                                  
 27691                                  					; SS override
 27692 00005C66 36C606[2303]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 27693                                  
 27694                                  					; DOS 4.00 doesn't need it
 27695                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 27696                                  					; Allow REDIR to clear some stuff
 27697                                  					; On process exit.
 27698 00005C6C B82211                  	mov     ax, 1122h
 27699 00005C6F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 27700                                  			; SS = DOS CS
 27701                                  	;mov	al,22h	
 27702 00005C71 B022                    	MOV	AL,int_terminate
 27703 00005C73 E888C0                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 27704                                  
 27705 00005C76 59                      	POP	CX			; get ThisPDB
 27706 00005C77 06                      	push	es
 27707 00005C78 53                      	push	bx			; save return address
 27708                                  
 27709 00005C79 368B1E[FC02]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 27710 00005C7E 8EDB                    	MOV	DS,BX
 27711 00005C80 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 27712                                  
 27713                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 27714                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 27715                                  	; is not Exit_keep_process
 27716                                  	
 27717 00005C83 39D8                    	CMP	AX,BX
 27718 00005C85 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 27719 00005C87 39CB                    	CMP	BX,CX
 27720 00005C89 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 27721 00005C8B 50                      	PUSH	AX			; save parent
 27722                                  
 27723                                  					; SS override
 27724                                  	;cmp	byte [SS:EXIT_TYPE],3
 27725 00005C8C 36803E[3905]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 27726 00005C92 7406                    	JZ	short reset_to_parent 	; keeping this process
 27727                                  
 27728                                  	; We are truly removing a process. Free all allocation blocks 
 27729                                  	; belonging to this PDB
 27730                                  
 27731                                  	;invoke	arena_free_process
 27732 00005C94 E8A10B                  	call	arena_free_process
 27733                                  
 27734                                  	; Kill off remainder of this process. Close file handles and signal 
 27735                                  	; to relevant network folks that this process is dead. Remember that 
 27736                                  	; CurrentPDB is STILL the current process!
 27737                                  
 27738                                  	;invoke	DOS_ABORT
 27739 00005C97 E828DE                  	call	DOS_ABORT
 27740                                  
 27741                                  reset_to_parent:
 27742                                  					; SS override
 27743 00005C9A 368F06[FC02]            	POP	word [SS:CurrentPDB]	; set up process as parent
 27744                                  
 27745                                  reset_return:				; come here for normal return
 27746                                  	;Context DS			; DS is used to refer to DOSDATA  
 27747 00005C9F 16                      	push	ss
 27748 00005CA0 1F                      	pop	ds	
 27749                                  
 27750 00005CA1 B0FF                    	MOV	AL,-1
 27751                                  
 27752                                  	; make sure that everything is clean In this case ignore any errors, 
 27753                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 27754                                  
 27755                                  	;EnterCrit critDisk
 27756 00005CA3 E869C4                  	call	EcritDisk
 27757                                  	;invoke	FLUSHBUF
 27758 00005CA6 E8C305                  	call	FLUSHBUF
 27759                                  	;LeaveCrit critDisk
 27760 00005CA9 E86BC4                  	call	LcritDisk
 27761                                  
 27762                                  	; Decrement open ref. count if we had done a virtual open earlier.
 27763                                  
 27764 00005CAC E88DF8                  	call	CHECK_VIRT_OPEN
 27765 00005CAF FA                      	CLI
 27766 00005CB0 C606[ED02]00            	MOV	BYTE [INDOS],0		; Go to known state
 27767 00005CB5 C606[EE02]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 27768 00005CBA C606[2303]00            	MOV	byte [fAborting],0	; let aborts occur
 27769 00005CBF 8F06[3C05]              	POP	WORD [EXITHOLD]
 27770 00005CC3 8F06[3E05]              	POP	WORD [EXITHOLD+2]
 27771                                  
 27772                                  	; Snake into multitasking... Get stack from CurrentPDB person
 27773                                  
 27774 00005CC7 8E1E[FC02]              	MOV	DS,[CurrentPDB]
 27775 00005CCB 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 27776 00005CCF 8B262E00                	MOV	SP,[PDB.USER_STACK]
 27777                                  
 27778 00005CD3 E84DB9                  	call	restore_world
 27779                                  
 27780                                  	; MSDOS 6.0
 27781                                  	;push	ax			; set up ds, but save ds in TEMPSEG 
 27782                                  	;mov	ax, ds			; and not on stack.
 27783                                  	;getdseg <ds>			; ds -> dosdata
 27784                                  	;mov	TempSeg, ax
 27785                                  	;pop	ax
 27786                                  					; set up ds to DOSDATA
 27787 00005CD6 2EA3[4005]              	MOV	[CS:USER_SP],AX
 27788                                  
 27789 00005CDA 58                      	POP	AX			; suck off CS:IP of interrupt...
 27790 00005CDB 58                      	POP	AX
 27791 00005CDC 58                      	POP	AX
 27792                                  
 27793                                  ; M011 : BEGIN
 27794                                  
 27795                                  	; MSDOS 3.3
 27796                                  ;	MOV	AX,0F202h	; STI
 27797                                  
 27798                                  	; MSDOS 6.0
 27799 00005CDD 9F                      	LAHF
 27800 00005CDE 86E0                    	XCHG	AH, AL
 27801 00005CE0 2402                    	AND	AL, 02
 27802 00005CE2 B4F2                    	MOV	AH, 0F2h
 27803                                  
 27804                                  ; M011 : END
 27805                                  
 27806                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27807 00005CE4 50                      	PUSH	AX
 27808                                   
 27809 00005CE5 2EFF36[3E05]            	PUSH	word [CS:EXITHOLD+2]
 27810 00005CEA 2EFF36[3C05]            	PUSH	word [CS:EXITHOLD]
 27811                                  
 27812 00005CEF 2EA1[4005]              	MOV	AX,[CS:USER_SP]
 27813                                  
 27814                                  	; MSDOS 6.0
 27815                                  	;mov	ds,TempSeg	; restore ds
 27816                                  
 27817 00005CF3 CF                      	IRET			; Long return back to user terminate address
 27818                                  
 27819                                  ;---------------------------------------------------------------------------
 27820                                  ;
 27821                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 27822                                  ;
 27823                                  ; This routine handles extended error codes.
 27824                                  ; Input : DI = error code from device
 27825                                  ; Output: All EXTERR fields are set
 27826                                  ;
 27827                                  ;--------------------------------------------------------------------------
 27828                                  
 27829                                  SET_I24_EXTENDED_ERROR:
 27830 00005CF4 50                      	PUSH	AX
 27831                                  					; ErrMap24End is in DOSDATA
 27832 00005CF5 B8[330E]                	MOV	AX,ErrMap24End
 27833 00005CF8 2D[230E]                	SUB	AX,ErrMap24
 27834                                  					; Change to dosdata to access 
 27835                                  					; ErrMap24 and EXTERR -SR
 27836                                  	; MSDOS 6.0
 27837                                  	;push	ds
 27838                                  	;getdseg <ds>			; ds ->dosdata
 27839                                  
 27840                                  	; AX is the index of the first unavailable error. Do not translate 
 27841                                  	; if greater or equal to AX.
 27842                                  
 27843 00005CFB 39C7                    	CMP	DI,AX
 27844 00005CFD 89F8                    	MOV	AX,DI
 27845 00005CFF 7307                    	JAE	short NoTrans
 27846                                  
 27847 00005D01 2E8A85[230E]            	MOV	AL,[CS:DI+ErrMap24]
 27848 00005D06 30E4                    	XOR	AH,AH
 27849                                  NoTrans:
 27850 00005D08 2EA3[F002]              	MOV	[CS:EXTERR],AX
 27851                                  	;pop	ds
 27852                                  	;assume	ds:nothing
 27853 00005D0C 58                      	POP	AX
 27854                                  
 27855                                  	; Now Extended error is set correctly. Translate it to get correct 
 27856                                  	; error locus class and recommended action.
 27857                                  
 27858 00005D0D 56                      	PUSH	SI
 27859                                  					; ERR_TABLE_24 is in DOSCODE 
 27860 00005D0E BE[D30D]                	MOV	SI,ERR_TABLE_24
 27861 00005D11 E8CABA                  	call	CAL_LK			; Set other extended error fields
 27862 00005D14 5E                      	POP	SI
 27863 00005D15 C3                      	retn
 27864                                  
 27865                                  ;============================================================================
 27866                                  ; FAT.ASM, MSDOS 6.0, 1991
 27867                                  ;============================================================================
 27868                                  ; 30/07/2018 - Retro DOS v3.0
 27869                                  
 27870                                  ;	TITLE	FAT - FAT maintenance routines
 27871                                  ;	NAME	FAT
 27872                                  
 27873                                  ;**	FAT.ASM
 27874                                  ;
 27875                                  ;	Low level local device routines for performing disk change sequence,
 27876                                  ;	setting cluster validity, and manipulating the FAT
 27877                                  ;
 27878                                  ;	IsEof
 27879                                  ;	UNPACK
 27880                                  ;	PACK
 27881                                  ;	MAPCLUSTER
 27882                                  ;	FATREAD_SFT
 27883                                  ;	FATREAD_CDS
 27884                                  ;	FAT_operation
 27885                                  ;
 27886                                  ;	Revision history:
 27887                                  ;
 27888                                  ;	  AN000  version Jan. 1988
 27889                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 27890                                  ;
 27891                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 27892                                  ;	       from CL0FATENTRY rather than disk.
 27893                                  ;
 27894                                  
 27895                                  ;Break <IsEOF - check the quantity in BX for EOF>
 27896                                  ;----------------------------------------------------------------------------
 27897                                  ;
 27898                                  ; Procedure Name : IsEOF
 27899                                  ;
 27900                                  ; IsEOF - check the fat value in BX for eof.
 27901                                  ;
 27902                                  ;   Inputs:	ES:BP point to DPB
 27903                                  ;		BX has fat value
 27904                                  ;   Outputs:	JAE eof
 27905                                  ;   Registers modified: none
 27906                                  ;
 27907                                  ;---------------------------------------------------------------------------
 27908                                  
 27909                                  IsEOF:
 27910                                  	;cmp	word [es:bp+0Dh],0FF6h
 27911 00005D16 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 27912 00005D1C 730B                    	JAE	short EOF16			; yes, check for eof there
 27913                                  
 27914                                  ;J.K. 8/27/86
 27915                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 27916                                  ;of any media that has "F0"(Other) as a MediaByte.
 27917                                  ;Hopely, this does not create any side effect for those who may use any value
 27918                                  ;other than "FF8-FFF" as an EOF for their own file.
 27919                                  
 27920 00005D1E 81FBF00F                	cmp	bx,0FF0h
 27921 00005D22 7404                    	je	short IsEOF_other
 27922                                  
 27923 00005D24 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 27924                                  IsEOF_other:
 27925 00005D28 C3                      	retn
 27926                                  EOF16:
 27927 00005D29 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 27928 00005D2C C3                      	retn
 27929                                  
 27930                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 27931                                  ;---------------------------------------------------------------------------
 27932                                  ;
 27933                                  ; Procedur Name : UNPACK
 27934                                  ;
 27935                                  ; Inputs:
 27936                                  ;	BX = Cluster number (may be full 16-bit quantity)
 27937                                  ;	ES:BP = Base of drive parameters
 27938                                  ; Outputs:
 27939                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 27940                                  ;	Zero set means DI=0 (free cluster)
 27941                                  ;	Carry set means error (currently user FAILed to I 24)
 27942                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 27943                                  ;
 27944                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 27945                                  ;
 27946                                  ;----------------------------------------------------------------------------
 27947                                  
 27948                                  	; 25/07/2019 - Retro DOS v3.2
 27949                                  	; 20/05/2019 - Retro DOS v4.0
 27950                                  UNPACK:
 27951                                  	; MSDOS 6.0			; M014 - Start
 27952 00005D2D 09DB                    	or	bx,bx			; Q: are we unpacking cluster 0
 27953 00005D2F 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 27954 00005D31 8B3E[CB0F]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 27955 00005D35 09FF                    	or	di,di 			; return z if di=0
 27956 00005D37 C3                      	retn				; done
 27957                                  up_cont:				; M014 - End
 27958                                  	; MSDOS 3.3 & MSDOS 6.0
 27959                                  	;cmp	bx,[es:bp+0Dh]
 27960 00005D38 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 27961 00005D3C 7726                    	JA	short HURTFAT
 27962 00005D3E E8CA00                  	CALL	MAPCLUSTER
 27963 00005D41 721E                    	jc	short _DoContext
 27964 00005D43 8B3D                    	MOV	DI,[DI]
 27965 00005D45 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 27966 00005D47 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 27967 00005D4B 81FEF60F                	CMP	SI,4096-10
 27968 00005D4F 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 27969 00005D51 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 27970 00005D53 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 27971                                  High12:
 27972 00005D55 D1EF                    	SHR	DI,1
 27973 00005D57 D1EF                    	SHR	DI,1
 27974 00005D59 D1EF                    	SHR	DI,1
 27975 00005D5B D1EF                    	SHR	DI,1
 27976                                  Unpack12:
 27977 00005D5D 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 27978                                  _DoContext:
 27979 00005D61 16                      	PUSH	SS
 27980 00005D62 1F                      	POP	DS
 27981 00005D63 C3                      	retn
 27982                                  HURTFAT:
 27983                                  	;;mov	word [es:bp+1Eh],0FFFFh
 27984                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 27985 00005D64 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 27986 00005D6A 50                      	PUSH	AX
 27987 00005D6B B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 27988                                  
 27989                                  ;hkn; SS override
 27990 00005D6D 36C606[1503]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 27991                                  ;
 27992                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 27993                                  ;
 27994 00005D73 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 27995 00005D76 E8FDFD                  	call	FATAL
 27996 00005D79 3C03                    	CMP	AL,3
 27997 00005D7B F8                      	CLC
 27998 00005D7C 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 27999 00005D7E F9                      	STC				; User said FAIL
 28000                                  OKU_RET:
 28001 00005D7F 58                      	POP	AX
 28002                                  hurtfat_retn:
 28003 00005D80 C3                      	retn
 28004                                  
 28005                                  ;Break	<PACK -- PACK FAT ENTRIES>
 28006                                  ;----------------------------------------------------------------------------
 28007                                  ;
 28008                                  ; Procedure Name : PACK
 28009                                  ;
 28010                                  ; Inputs:
 28011                                  ;	BX = Cluster number
 28012                                  ;	DX = Data
 28013                                  ;	ES:BP = Pointer to drive DPB
 28014                                  ; Outputs:
 28015                                  ;	The data is stored in the FAT at the given cluster.
 28016                                  ;	SI,DX,DI all destroyed
 28017                                  ;	Carry set means error (currently user FAILed to I 24)
 28018                                  ;	No other registers affected
 28019                                  ;
 28020                                  ; NOTE: if BX = 0 then data in DX is atored in CL0FATENTRY.
 28021                                  ;
 28022                                  ;---------------------------------------------------------------------------
 28023                                  
 28024                                  	; 24/07/2019 - Retro DOS v3.2
 28025                                  	; 20/05/2019 - Retro DOS v4.0
 28026                                  PACK:
 28027                                  	; MSDOS 6.0			; M014 - start
 28028 00005D81 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 28029 00005D83 7505                    	jnz	short p_cont		; N: proceed with normal pack
 28030 00005D85 8916[CB0F]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 28031 00005D89 C3                      	retn				; done
 28032                                  p_cont:					; M014 - end
 28033                                  	; MSDOS 3.3 & MSDOS 6.0
 28034 00005D8A E87E00                  	CALL	MAPCLUSTER
 28035 00005D8D 72D2                    	JC	short _DoContext
 28036 00005D8F 8B35                    	MOV	SI,[DI]
 28037 00005D91 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 28038 00005D93 51                      	PUSH	CX			; move data to upper 12 bits
 28039 00005D94 B104                    	MOV	CL,4
 28040 00005D96 D3E2                    	SHL	DX,CL
 28041 00005D98 59                      	POP	CX
 28042 00005D99 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 28043 00005D9C EB14                    	JMP	SHORT PACKIN
 28044                                  ALIGNED:
 28045                                  	;cmp	word [es:bp+0Dh],0FF6h
 28046 00005D9E 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 28047 00005DA4 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 28048 00005DA6 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 28049 00005DAA 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 28050 00005DAE EB02                    	JMP	SHORT PACKIN		; MZ go store
 28051                                  Pack16:
 28052 00005DB0 31F6                    	XOR	SI,SI			; MZ no original data
 28053                                  PACKIN:
 28054 00005DB2 09D6                    	OR	SI,DX
 28055 00005DB4 8935                    	MOV	[DI],SI
 28056                                  
 28057                                  ;hkn; SS override
 28058 00005DB6 36C536[9E05]            	LDS	SI,[SS:CURBUF]
 28059                                  	; MSDOS 6.0
 28060                                  	;TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 28061                                  					;LB. if already dirty		  ;AN000;
 28062                                  	;JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 28063                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 28064                                  	
 28065                                  	;or	byte [si+5],40h
 28066 00005DBB 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 28067                                  ;yesdirty11:				;LB.				  ;AN000;
 28068                                  ;hkn; SS override
 28069 00005DBF 36803E[3505]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 28070                                  ;hkn; SS is DOSDATA
 28071 00005DC5 16                      	push	ss
 28072 00005DC6 1F                      	pop	ds
 28073 00005DC7 74B7                    	jz	short hurtfat_retn	; Carry clear
 28074 00005DC9 50                      	PUSH	AX
 28075 00005DCA 53                      	PUSH	BX
 28076 00005DCB 51                      	PUSH	CX
 28077 00005DCC A1[4A05]                	MOV	AX,[CLUSSAVE]
 28078 00005DCF 8E1E[A005]              	MOV	DS,[CURBUF+2]
 28079                                  	;;add	si,16 ; MSDOS 3.3
 28080                                  	;add	si,20 ; MSDOS 6.0
 28081 00005DD3 83C614                  	ADD	SI,BUFINSIZ
 28082 00005DD6 8824                    	MOV	[SI],AH
 28083                                  ;hkn; SS is DOSDATA
 28084                                  	;Context DS
 28085 00005DD8 16                      	push	ss
 28086 00005DD9 1F                      	pop	ds
 28087                                  	
 28088 00005DDA 50                      	PUSH	AX
 28089                                  	
 28090                                  	; MSDOS 6.0
 28091 00005DDB 8B16[4E05]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 28092 00005DDF 8916[B005]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 28093                                  
 28094                                  	; MSDOS 3.3 & MSDOS 6.0
 28095 00005DE3 8B16[4C05]              	MOV	DX,[CLUSSEC]
 28096 00005DE7 BE0100                  	MOV	SI,1
 28097 00005DEA 30C0                    	XOR	AL,AL
 28098 00005DEC E8B103                  	call	GETBUFFRB
 28099 00005DEF 58                      	POP	AX
 28100 00005DF0 7213                    	JC	short POPP_RET
 28101 00005DF2 C53E[9E05]              	LDS	DI,[CURBUF]
 28102                                  	; MSDOS 6.0
 28103                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 28104                                  	;				;LB. if already dirty		  ;AN000;
 28105                                  	;JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 28106                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 28107                                  	
 28108                                  	;or	byte [di+5],40h
 28109 00005DF6 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 28110                                  ;yesdirty12:
 28111                                  	;;add	di,16
 28112                                  	;add	di,20 ; MSDOS 6.0
 28113 00005DFA 83C714                  	ADD	DI,BUFINSIZ
 28114 00005DFD 4F                      	DEC	DI
 28115                                  	;add	di,[es:bp+2]
 28116 00005DFE 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 28117 00005E02 8805                    	MOV	[DI],AL
 28118 00005E04 F8                      	CLC
 28119                                  POPP_RET:
 28120 00005E05 16                      	PUSH	SS
 28121 00005E06 1F                      	POP	DS
 28122 00005E07 59                      	POP	CX
 28123 00005E08 5B                      	POP	BX
 28124 00005E09 58                      	POP	AX
 28125 00005E0A C3                      	retn
 28126                                  
 28127                                  ; 31/07/2018 - Retro DOS v3.0
 28128                                  
 28129                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 28130                                  ;---------------------------------------------------------------------------
 28131                                  ;
 28132                                  ; Procedure Name : MAPCLUSTER
 28133                                  ;
 28134                                  ; Inputs:
 28135                                  ;	ES:BP Points to DPB
 28136                                  ;	BX Is cluster number
 28137                                  ; Function:
 28138                                  ;	Get a pointer to the cluster
 28139                                  ; Outputs:
 28140                                  ;	DS:DI Points to contents of FAT for given cluster
 28141                                  ;	DS:SI Points to start of buffer
 28142                                  ;	Zero Not set if cluster data is in high 12 bits of word
 28143                                  ;	Zero set if cluster data is in low 12 or 16 bits
 28144                                  ;	Carry set if failed.
 28145                                  ; SI is destroyed.
 28146                                  ;
 28147                                  ;---------------------------------------------------------------------------
 28148                                  
 28149                                  	; 24/07/2019 - Retro DOS v3.2
 28150                                  	; 20/05/2019 - Retro DOS v4.0
 28151                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 28152                                  MAPCLUSTER:
 28153                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 28154 00005E0B C606[3505]00            	MOV	BYTE [CLUSSPLIT],0
 28155                                  	;SAVE	<AX,BX,CX,DX>
 28156 00005E10 50                      	push	ax
 28157 00005E11 53                      	push	bx
 28158 00005E12 51                      	push	cx
 28159 00005E13 52                      	push	dx
 28160 00005E14 89D8                    	MOV	AX,BX			; AX = BX
 28161 00005E16 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 28162 00005E1C 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 28163 00005E1E D1E8                    	SHR	AX,1			; AX = BX/2
 28164                                  Map16:	
 28165                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 28166 00005E20 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 28167                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28168 00005E22 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 28169 00005E24 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 28170 00005E26 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 28171                                  
 28172                                  ;IF FastDiv
 28173                                  ;
 28174                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 28175                                  ; case and apply a really fast algorithm to get the desired results
 28176                                  ;
 28177                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 28178                                  ; Fast method takes 39+20*4=119
 28179                                  ;
 28180                                  ; This saves a bunch.
 28181                                  ;
 28182 00005E2A 81F90002                	CMP	CX,512			; 4	Is this 512 byte sector?
 28183 00005E2E 7510                    	jne	short _DoDiv		; 4     for no jump
 28184 00005E30 89C2                    	MOV	DX,AX			; 2	get set for remainder
 28185 00005E32 81E2FF01                	AND	DX,512-1		; 4	Form remainder
 28186 00005E36 88E0                    	MOV	AL,AH			; 2     Quotient in formation in AL
 28187                                  	; MDOS 3.3
 28188                                  	;shr	al,1	
 28189                                  	; MDOS 6.0
 28190 00005E38 D1EF                    	shr	di,1			; 2
 28191 00005E3A D0D8                    	rcr	al,1			; 2
 28192                                  	; MDOS 3.3 (& MSDOS 6.0)
 28193 00005E3C 30E4                    	xor	ah,ah			; 3
 28194 00005E3E EB04                    	jmp	short DivDone		; 16
 28195                                  _DoDiv:
 28196                                  ;ENDIF
 28197                                  	; MSDOS 3.3
 28198                                  	;xor	dx,dx
 28199                                  	; MSDOS 6.0
 28200 00005E40 89FA                    	mov	dx,di			; 2
 28201                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 28202 00005E42 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 28203                                  ;IF FastDiv
 28204                                  DivDone:
 28205                                  ;ENDIF
 28206                                  	;add	ax,[es:bp+6]
 28207 00005E44 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 28208 00005E48 49                      	DEC	CX			; CX is sector size - 1
 28209                                  	;SAVE	<AX,DX,CX>
 28210 00005E49 50                      	push	ax
 28211 00005E4A 52                      	push	dx
 28212 00005E4B 51                      	push	cx
 28213 00005E4C 89C2                    	MOV	DX,AX
 28214                                  
 28215                                  	; MSDOS 6.0
 28216 00005E4E C706[B005]0000          	MOV	word [HIGH_SECTOR],0 	;F.C. >32mb  low sector #
 28217                                  	; MDOS 3.3 (& MSDOS 6.0)
 28218 00005E54 30C0                    	XOR	AL,AL
 28219 00005E56 BE0100                  	MOV	SI,1
 28220                                  	;invoke	GETBUFFRB
 28221 00005E59 E84403                  	call	GETBUFFRB
 28222                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 28223 00005E5C 59                      	pop	cx
 28224 00005E5D 58                      	pop	ax
 28225 00005E5E 5A                      	pop	dx
 28226 00005E5F 7257                    	JC	short MAP_POP
 28227                                  
 28228 00005E61 C536[9E05]              	LDS	SI,[CURBUF]
 28229                                  	;;lea	di,[si+16]
 28230                                  	;lea	di,[si+20] ; MSDOS 6.0
 28231 00005E65 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 28232 00005E68 01C7                    	ADD	DI,AX
 28233 00005E6A 39C8                    	CMP	AX,CX
 28234 00005E6C 7537                    	JNZ	short MAPRET
 28235 00005E6E 8A05                    	MOV	AL,[DI]
 28236                                  	;Context DS		 	;hkn; SS is DOSDATA
 28237 00005E70 16                      	push	ss
 28238 00005E71 1F                      	pop	ds	
 28239 00005E72 FE06[3505]              	INC	BYTE [CLUSSPLIT]
 28240 00005E76 A2[4A05]                	MOV	[CLUSSAVE],AL
 28241 00005E79 8916[4C05]              	MOV	[CLUSSEC],DX
 28242                                  	; MSDOS 6.0
 28243 00005E7D C706[4E05]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb		;AN000;
 28244 00005E83 42                      	INC	DX
 28245 00005E84 C706[B005]0000          	MOV	word [HIGH_SECTOR],0	;F.C. >32mb FAT sector <32mb ;AN000;
 28246                                  	; MDOS 3.3 (& MSDOS 6.0)
 28247 00005E8A 30C0                    	XOR	AL,AL
 28248 00005E8C BE0100                  	MOV	SI,1
 28249                                  	;invoke	GETBUFFRB
 28250 00005E8F E80E03                  	call	GETBUFFRB
 28251 00005E92 7224                    	JC	short MAP_POP
 28252 00005E94 C536[9E05]              	LDS	SI,[CURBUF]
 28253 00005E98 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 28254 00005E9B 8A05                    	MOV	AL,[DI]
 28255                                  	;Context DS			;hkn; SS is DOSDATA
 28256 00005E9D 16                      	push	ss
 28257 00005E9E 1F                      	pop	ds
 28258 00005E9F A2[4B05]                	MOV	[CLUSSAVE+1],AL
 28259                                  
 28260                                  ;hkn; CLUSSAVE is in DOSDATA
 28261 00005EA2 BF[4A05]                	MOV	DI,CLUSSAVE
 28262                                  MAPRET:
 28263                                  	;RESTORE <DX,CX,BX>
 28264 00005EA5 5A                      	pop	dx
 28265 00005EA6 59                      	pop	cx
 28266 00005EA7 5B                      	pop	bx
 28267 00005EA8 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 28268 00005EAA 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 28269 00005EB0 7302                    	JAE	short MapSet		; MZ no, set flags
 28270 00005EB2 89D8                    	MOV	AX,BX
 28271                                  MapSet:
 28272 00005EB4 A801                    	TEST	AL,1			; set zero flag if not on boundary
 28273                                  	;RESTORE <AX>
 28274 00005EB6 58                      	pop	ax
 28275 00005EB7 C3                      	retn
 28276                                  
 28277                                  MAP_POP:
 28278                                  	;RESTORE <DX,CX,BX,AX>
 28279 00005EB8 5A                      	pop	dx
 28280 00005EB9 59                      	pop	cx
 28281 00005EBA 5B                      	pop	bx
 28282 00005EBB 58                      	pop	ax
 28283 00005EBC C3                      	retn
 28284                                  
 28285                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 28286                                  ;----------------------------------------------------------------------------
 28287                                  ;
 28288                                  ; Procedure Name : FATREAD_SFT
 28289                                  ;
 28290                                  ; Inputs:
 28291                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 28292                                  ;		giving a NET SFT will produce system crashing results).
 28293                                  ;	DS DOSDATA
 28294                                  ; Function:
 28295                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 28296                                  ;	if disk changed.
 28297                                  ;	In other respects, same as FATREAD_CDS.
 28298                                  ;	(note ES:DI destroyed!)
 28299                                  ; Outputs:
 28300                                  ;	Carry set if error (currently user FAILed to I 24)
 28301                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 28302                                  ;	as far as invalidating curdir_ID is concerned.
 28303                                  ;	Since getting a true disk changed on this call is a screw up
 28304                                  ;	anyway, that's the way it goes.
 28305                                  ;
 28306                                  ;---------------------------------------------------------------------------
 28307                                  
 28308                                  FATREAD_SFT:
 28309 00005EBD 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 28310                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 28311 00005EC1 268A4600                	mov	AL,[ES:BP]
 28312 00005EC5 A2[3305]                	MOV	[THISDRV],AL
 28313 00005EC8 E8C7B8                  	call	GOTDPB			;Set THISDPB
 28314 00005ECB E87A00                  	CALL	FAT_GOT_DPB
 28315                                  fatread_sft_retn:
 28316 00005ECE C3                      	retn
 28317                                  
 28318                                  ;----------------------------------------------------------------------------
 28319                                  ;
 28320                                  ; Procedure Name : FATREAD_CDS
 28321                                  ;
 28322                                  ; Inputs:
 28323                                  ;	DS:DOSDATA
 28324                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 28325                                  ;		giving a NET or NUL CDS will produce system crashing results).
 28326                                  ; Function:
 28327                                  ;	If disk may have been changed, media is determined and buffers are
 28328                                  ;	flagged invalid. If not, no action is taken.
 28329                                  ; Outputs:
 28330                                  ;	ES:BP = Drive parameter block
 28331                                  ;	THISDPB = ES:BP
 28332                                  ;	THISDRV set
 28333                                  ;	Carry set if error (currently user FAILed to I 24)
 28334                                  ; DS preserved , all other registers destroyed
 28335                                  ;
 28336                                  ;---------------------------------------------------------------------------
 28337                                  
 28338                                  FATREAD_CDS:
 28339 00005ECF 06                      	PUSH	ES
 28340 00005ED0 57                      	PUSH	DI
 28341                                  	;les	bp,[es:di+45h]
 28342 00005ED1 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 28343                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 28344 00005ED5 268A4600                	mov	AL,[ES:BP]
 28345 00005ED9 A2[3305]                	MOV	[THISDRV],AL
 28346 00005EDC E8B3B8                  	call	GOTDPB			;Set THISDPB
 28347 00005EDF E86600                  	CALL	FAT_GOT_DPB
 28348 00005EE2 5F                      	POP	DI			;Get back CDS pointer
 28349 00005EE3 07                      	POP	ES
 28350 00005EE4 72E8                    	jc	short fatread_sft_retn
 28351 00005EE6 7539                    	JNZ	short NO_CHANGE		;Media NOT changed
 28352                                  
 28353                                  ;	Media changed. We now need to find all CDS structures which use this
 28354                                  ;	DPB and invalidate their ID pointers.
 28355                                  
 28356                                  MED_CHANGE:
 28357 00005EE8 31C0                    	XOR	AX,AX
 28358 00005EEA 48                      	DEC	AX			; AX = -1
 28359 00005EEB 1E                      	PUSH	DS
 28360 00005EEC 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 28361 00005EF0 30ED                    	XOR	CH,CH			; CX is number of structures
 28362                                  	;lds	si,[es:di+45h]
 28363 00005EF2 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 28364                                  
 28365                                  ;hkn; SS override
 28366                                  
 28367                                  ;	Find all CDSs with this DevPtr
 28368                                  ;
 28369                                  ;	(ax) = -1
 28370                                  ;	(ds:si) = DevPtr
 28371                                  
 28372 00005EF6 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 28373                                  frcd20: 
 28374                                  	;test	word [es:di+43h],8000h
 28375 00005EFB 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 28376 00005F01 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 28377                                  
 28378                                  	; MSDOS 3.3
 28379                                  	;push	es
 28380                                  	;push	di
 28381                                  	;les	di,[es:di+45h]
 28382                                  	;;les	di,[ES:DI+curdir.devptr]
 28383                                  	;call	POINTCOMP
 28384                                  	;pop	di
 28385                                  	;pop	es
 28386                                  	;jnz	short frcd25
 28387                                  
 28388                                  	; MSDOS 6.0
 28389 00005F03 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 28390 00005F07 7512                    	jne	short frcd25		; no match
 28391 00005F09 8CDB                    	mov	bx,ds
 28392 00005F0B 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 28393 00005F0F 750A                    	jne	short frcd25		; CDS not for this drive
 28394                                  
 28395                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28396                                  	;test	[es:di+49h],ax
 28397 00005F11 26854549                	test	[ES:DI+curdir.ID],AX
 28398 00005F15 7404                    	JZ	short frcd25		; If root (0), leave root
 28399                                  	;mov	[es:di+49h],ax
 28400 00005F17 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 28401                                  frcd25:	
 28402                                  	;add	di,81 ; MSDOS 3.3
 28403                                  	;add	di,88 ; MSDOS 6.0
 28404 00005F1B 83C751                  	ADD	DI,curdir.size	; 81	; Point to next CDS
 28405 00005F1E E2DB                    	LOOP	frcd20
 28406 00005F20 1F                      	POP	DS
 28407                                  NO_CHANGE:
 28408 00005F21 C42E[4605]              	LES	BP,[THISDPB]
 28409 00005F25 F8                      	CLC
 28410 00005F26 C3                      	retn
 28411                                  
 28412                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 28413                                  ;----------------------------------------------------------------------------
 28414                                  ;
 28415                                  ; Procedure Name : FAT_operation
 28416                                  ;
 28417                                  ;----------------------------------------------------------------------------
 28418                                  FAT_operation:
 28419                                  	; 24/07/2019 - Retro DOS v3.2
 28420                                  	; 31/07/2018 - Retro DOS v3.0
 28421                                  FATERR:
 28422                                  	;mov	word [es:bp+1Eh],-1
 28423                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28424 00005F27 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 28425                                  					; Err in FAT must force recomp of freespace
 28426                                  	;and	di,0FFh
 28427 00005F2D 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 28428                                  	;mov	byte [ALLOWED],18h
 28429 00005F31 C606[1503]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 28430                                  	;mov	ah,1Ah
 28431 00005F36 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 28432 00005F38 A0[3305]                	MOV	AL,[THISDRV]		; Tell which drive
 28433 00005F3B E83CFC                  	call	FATAL1
 28434 00005F3E C42E[4605]              	LES	BP,[THISDPB]
 28435 00005F42 3C03                    	CMP	AL,3
 28436 00005F44 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 28437 00005F46 F9                      	STC				; User said FAIL
 28438 00005F47 C3                      	retn
 28439                                  
 28440                                  FAT_GOT_DPB:
 28441                                  	;Context DS			;hkn; SS is DOSDATA
 28442 00005F48 16                      	push	ss			
 28443 00005F49 1F                      	pop	ds
 28444                                  	;mov	al,0Fh
 28445 00005F4A B00F                    	MOV	AL,DMEDHL
 28446                                  	;mov	al,[es:bp+1]
 28447 00005F4C 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 28448 00005F50 A3[2403]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 28449 00005F53 C606[2603]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 28450 00005F58 C706[2703]0000          	MOV	word [DEVCALL_REQSTAT],0
 28451                                  	;;mov	al,[es:bp+16h]
 28452                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 28453 00005F5E 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 28454 00005F62 A2[3103]                	MOV	[CALLMED],AL
 28455 00005F65 06                      	PUSH	ES
 28456 00005F66 1E                      	PUSH	DS
 28457                                  
 28458                                  ;hkn; DEVCALL is in DOSDATA
 28459 00005F67 BB[2403]                	MOV	BX,DEVCALL
 28460                                  	;;lds	si,[es:bp+12h]
 28461                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 28462 00005F6A 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 28463 00005F6E 07                      	POP	ES			; ES:BX Points to call header
 28464 00005F6F E8BEF1                  	call	DEVIOCALL2
 28465                                  	;Context DS		 	;hkn; SS is DOSDATA
 28466 00005F72 16                      	push	ss
 28467 00005F73 1F                      	pop	ds
 28468 00005F74 07                      	POP	ES			; Restore ES:BP
 28469 00005F75 8B3E[2703]              	MOV	DI,[DEVCALL_REQSTAT]
 28470                                  	;test	di,8000h
 28471                                  	;jnz	short FATERR
 28472 00005F79 09FF                    	or	di,di
 28473 00005F7B 78AA                    	js	short FATERR		; have error
 28474 00005F7D 30E4                    	XOR	AH,AH
 28475                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 28476                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 28477 00005F7F 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 28478 00005F83 A0[3305]                	MOV	AL,[THISDRV]		; Use physical unit number
 28479                                  ; See if we had changed volume id by creating one on the diskette
 28480 00005F86 3806[370A]              	cmp	[VOLCHNG_FLAG],AL
 28481 00005F8A 7508                    	jnz	short CHECK_BYT
 28482 00005F8C C606[370A]FF            	mov	byte [VOLCHNG_FLAG],-1
 28483 00005F91 E98800                  	jmp	GOGETBPB		; Need to get device driver to read in
 28484                                  					; new volume label.
 28485                                  CHECK_BYT:
 28486 00005F94 0A26[3203]              	OR	AH,[CALLRBYT]
 28487                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 28488                                  	;JMP	short NEWDSK
 28489 00005F98 785D                    	js	short NEWDSK
 28490                                  CHECK_ZR:
 28491 00005F9A 743D                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 28492 00005F9C F8                      	CLC
 28493 00005F9D C3                      	retn				; If Media not changed (NZ)
 28494                                  
 28495                                  DISK_CHNG_ERR:
 28496 00005F9E 06                      	PUSH	ES
 28497 00005F9F 55                      	PUSH	BP
 28498                                  	;;les	bp,[es:bp+12h]
 28499                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 28500 00005FA0 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 28501                                  	;test	word [es:bp+4],800h
 28502 00005FA4 26F746040008            	TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 28503 00005FAA 5D                      	POP	BP
 28504 00005FAB 07                      	POP	ES
 28505 00005FAC 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 28506 00005FAE 1E                      	PUSH	DS			; Save buffer pointer for ignore
 28507 00005FAF 57                      	PUSH	DI
 28508 00005FB0 16                      	push	ss			;hkn; SS is DOSDATA
 28509 00005FB1 1F                      	pop	ds
 28510                                  	;mov	byte [ALLOWED],18h
 28511 00005FB2 C606[1503]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 28512 00005FB7 06                      	PUSH	ES
 28513 00005FB8 C43E[3303]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 28514 00005FBC 8C06[F602]              	MOV	[EXTERRPT+2],ES
 28515 00005FC0 07                      	POP	ES
 28516 00005FC1 893E[F402]              	MOV	[EXTERRPT],DI
 28517                                  	;mov	ax,0Fh
 28518 00005FC5 B80F00                  	MOV	AX,error_I24_wrong_disk
 28519 00005FC8 C606[3205]01            	MOV	byte [READOP],1		; Write
 28520                                  	;invoke	HARDERR
 28521 00005FCD E858FB                  	call	HARDERR
 28522 00005FD0 5F                      	POP	DI			; Get back buffer for ignore
 28523 00005FD1 1F                      	POP	DS
 28524 00005FD2 3C03                    	CMP	AL,3
 28525                                  FAIL_OPJ2:
 28526 00005FD4 7416                    	JZ	short FAIL_OP
 28527 00005FD6 E96FFF                  	JMP	FAT_GOT_DPB		; Retry
 28528                                  
 28529                                  CHKBUFFDIRT:
 28530                                  	; 24/07/2019 - Retro DOS v3.2
 28531                                  
 28532                                  	; MSDOS 6.0
 28533                                  	;cmp	word [DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 28534                                  	;je	short NEWDSK			; no, skip the check
 28535                                  	;call	GetCurHead			; get pointer to first buffer
 28536                                  
 28537                                  	; MSDOS 3.3
 28538 00005FD9 C53E[3800]              	lds	di,[BUFFHEAD]
 28539                                  nbuffer:
 28540                                  	;cmp	al,[di+4]
 28541 00005FDD 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 28542 00005FE0 750E                    	jne	short lfnxt			; no, go for next buffer
 28543                                  	;test   byte [di+5],40h
 28544 00005FE2 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty ; is the buffer dirty ?
 28545 00005FE6 7408                    	jz	short lfnxt			; no, go for next buffer
 28546                                  	;Context DS
 28547 00005FE8 16                      	push	ss
 28548 00005FE9 1F                      	pop	ds
 28549 00005FEA F8                      	clc
 28550 00005FEB C3                      	retn
 28551                                  
 28552                                  FAIL_OP:					; This label & code is here
 28553                                  	;Context DS				;  for reachability
 28554 00005FEC 16                      	push	ss
 28555 00005FED 1F                      	pop	ds
 28556 00005FEE F9                      	STC
 28557 00005FEF C3                      	retn
 28558                                  
 28559                                  lfnxt:
 28560                                  	; 24/07/2019 - Retro DOS v3.2
 28561                                  	; 20/05/2019 - Retro DOS v4.0
 28562                                  	; 15/08/2018
 28563                                  	;mov	di,[di]
 28564                                  	;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 28565                                  	;
 28566 00005FF0 C53D                    	lds	di,[di]
 28567                                  	;
 28568                                  	; MSDOS 6.0
 28569                                  	;cmp	[FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 28570                                  	;jne	short nbuffer			; no, check this guy also
 28571                                  	; MSDOS 3.3
 28572 00005FF2 83FFFF                  	cmp	di,-1
 28573 00005FF5 75E6                    	jne	short nbuffer
 28574                                  
 28575                                  ; If no dirty buffers, assume Media changed
 28576                                  NEWDSK:
 28577                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 28578                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 28579 00005FF7 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 28580                                  	; MSDOS 6.0				;  recompute
 28581                                  	;call	GetCurHead
 28582                                  	; MSDOS 3.3
 28583 00005FFD E8BE00                  	call	SETVISIT
 28584                                  nxbuffer:
 28585                                  	; MSDOS 3.3
 28586 00006000 804D0520                	or 	byte [di+5],20h
 28587                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28588                                  	;cmp	[di+4],al
 28589 00006004 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 28590 00006007 750E                    	jne	short lfnxt2
 28591                                  	;test	byte [di+5],40h
 28592 00006009 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 28593 0000600D 758F                    	jnz	short DISK_CHNG_ERR
 28594                                  	;mov	word [di+4],20FFh
 28595 0000600F C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 28596 00006014 E8D400                  	call	SCANPLACE
 28597                                  	; MSDOS 6.0
 28598                                  	;jmp	short skpbuff
 28599                                  ;lfnxt2:
 28600                                  	;;mov	di,[di+BUFFINFO.buf_next]
 28601                                  	;mov	di,[di]
 28602                                  ;skpbuff:
 28603                                  	;cmp	di,[FIRST_BUFF_ADDR]					;hkn;
 28604                                  	;jne	short nxbuffer
 28605                                  
 28606                                  	;CMP	word [SC_CACHE_COUNT],0	;LB.  look ahead buffers ?	;AN001;
 28607                                  	;JZ	short GOGETBPB		;LB.  no			;AN001;
 28608                                  	;CMP	AL,[CURSC_DRIVE]	;LB.  same as changed drive	;AN001;
 28609                                  	;JNZ	short GOGETBPB		;LB.  no			;AN001;
 28610                                  	;MOV	byte [CURSC_DRIVE],-1	;LB.  invalidate look ahead buffers ;AN000;
 28611                                  lfnxt2:
 28612                                  	; MSDOS 3.3
 28613 00006017 E8BD00                  	call	SKIPVISIT
 28614 0000601A 75E4                    	jnz	short nxbuffer
 28615                                  GOGETBPB:
 28616                                  	; MSDOS 3.3 & MSDOS 6.0
 28617                                  	;;lds	di,[es:bp+12h]
 28618                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0
 28619 0000601C 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 28620                                  	; 20/05/2019
 28621                                  	;test	word [di+4],2000h
 28622                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 28623 00006020 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 28624 00006024 7510                    	JNZ	short GETFREEBUF
 28625                                  	;context DS	    		;hkn; SS is DOSDATA
 28626 00006026 16                      	push	ss
 28627 00006027 1F                      	pop	ds
 28628 00006028 BB0200                  	MOV	BX,2
 28629 0000602B E8FFFC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 28630                                  FAIL_OPJ:
 28631 0000602E 72BC                    	JC	short FAIL_OP
 28632 00006030 C53E[9E05]              	LDS	DI,[CURBUF]
 28633 00006034 EB15                    	JMP	SHORT GOTGETBUF
 28634                                  
 28635                                  GETFREEBUF:
 28636                                  	; 24/07/2019 - Retro DOS v3.2
 28637 00006036 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 28638 00006037 55                      	PUSH	BP
 28639                                  	; MSDOS 3.3
 28640 00006038 36C53E[3800]            	LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 28641                                  	; 25/07/2019
 28642                                  	; MSDOS 6.0
 28643 0000603D 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 28644                                  ;hkn; SS override
 28645 0000603F 368916[B005]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 28646                                  	;call	GETCURHEAD		;LB.			  ;AN000;
 28647                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28648 00006044 E87402                  	call	BUFWRITE
 28649 00006047 5D                      	POP	BP
 28650 00006048 07                      	POP	ES
 28651                                  	;JC	short FAIL_OPJ
 28652 00006049 72A1                    	jc	short FAIL_OP
 28653                                  GOTGETBUF:
 28654                                  	;;add	di,16
 28655                                  	;add	di,20 ; MSDOS 6.0
 28656 0000604B 83C714                  	ADD	DI,BUFINSIZ
 28657                                  
 28658                                  ;hkn; SS override
 28659 0000604E 368C1E[3403]            	MOV	[SS:CALLXAD+2],DS
 28660                                  	;Context DS			;hkn; SS is DOSDATA
 28661 00006053 16                      	push	ss
 28662 00006054 1F                      	pop	ds
 28663 00006055 893E[3203]              	MOV	[CALLXAD],DI
 28664                                  	;mov	al,16h
 28665 00006059 B016                    	MOV	AL,DBPBHL
 28666                                  	;mov	ah,[es:bp+1]
 28667 0000605B 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 28668 0000605F A3[2403]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 28669 00006062 C606[2603]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 28670 00006067 C706[2703]0000          	MOV	word [DEVCALL_REQSTAT],0
 28671                                  	;mov	al,[es:bp+16h]
 28672 0000606D 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 28673 00006071 A2[3103]                	MOV	[CALLMED],AL
 28674 00006074 06                      	PUSH	ES
 28675 00006075 1E                      	PUSH	DS
 28676                                  	;;push	word [es:bp+14h]
 28677                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 28678 00006076 26FF7615                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 28679                                  	;;push	word [es:bp+12h]
 28680                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 28681 0000607A 26FF7613                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 28682                                  
 28683                                  ;hkn; DEVCALL is in DOSDATA
 28684 0000607E BB[2403]                	MOV	BX,DEVCALL
 28685 00006081 5E                      	POP	SI
 28686 00006082 1F                      	POP	DS			; DS:SI Points to device header
 28687 00006083 07                      	POP	ES			; ES:BX Points to call header
 28688                                  	;invoke	DEVIOCALL2
 28689 00006084 E8A9F0                  	call	DEVIOCALL2
 28690 00006087 07                      	POP	ES			; Restore ES:BP
 28691                                  	;Context DS
 28692 00006088 16                      	push	ss		 	;hkn; SS is DOSDATA
 28693 00006089 1F                      	pop	ds
 28694 0000608A 8B3E[2703]              	MOV	DI,[DEVCALL_REQSTAT]
 28695                                  	; MSDOS 3.3
 28696                                  	;test	di,8000h
 28697                                  	;jnz	short FATERRJ
 28698                                  	; MSDOS 6.0
 28699 0000608E 09FF                    	or	di,di
 28700 00006090 7829                    	js	short FATERRJ 		; have error
 28701                                  	;;mov	al,[es:bp+16h]
 28702                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 28703 00006092 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 28704 00006096 C536[3603]              	LDS	SI,[CALLBPB]
 28705                                  	;;mov	word [es:bp+1Ch],0
 28706                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 28707 0000609A 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 28708                                  	;invoke	$SETDPB
 28709 000060A0 E87DBD                  	call	_$SETDPB
 28710                                  
 28711                                  ;hkn; SS override
 28712 000060A3 36C53E[3203]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 28713                                  	;mov	al,[es:bp+8]
 28714 000060A8 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 28715                                  
 28716                                  	; 24/07/2019 - Retro DOS v3.2
 28717                                  
 28718                                  	; MSDOS 3.3
 28719                                  	;;mov	ah,[es:bp+0Fh]
 28720                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 28721                                  	;;mov	[DI-8],ax
 28722                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 28723                                  
 28724                                  	; MSDOS 6.0
 28725                                  	;mov	[di-0Ah],al
 28726 000060AC 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL  
 28727                                  					;>32mb	  ;AN000;
 28728                                  	;mov	ax,[es:bp+0Fh]
 28729 000060AF 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]	;>32mb
 28730                                  	;mov	[di-9h],ax			  ;AC000;
 28731 000060B3 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 28732                                  
 28733                                  	;Context DS			;hkn; SS is DOSDATA
 28734 000060B6 16                      	push	ss
 28735 000060B7 1F                      	pop	ds
 28736 000060B8 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 28737 000060BA C3                      	retn
 28738                                  
 28739                                  FATERRJ: 
 28740 000060BB E969FE                  	JMP	FATERR
 28741                                  
 28742                                  ;============================================================================
 28743                                  ; STDBUF.ASM
 28744                                  ;============================================================================
 28745                                  ; Retro DOS v2.0 - 12/03/2018
 28746                                  
 28747                                  ;
 28748                                  ; Standard buffer management for MSDOS
 28749                                  ;
 28750                                  
 28751                                  ;.xlist
 28752                                  ;.xcref
 28753                                  ;INCLUDE STDSW.ASM
 28754                                  ;.cref
 28755                                  ;.list
 28756                                  
 28757                                  ;TITLE	STDBUF - MSDOS buffer management
 28758                                  ;NAME	STDBUF
 28759                                  
 28760                                  ;INCLUDE BUF.ASM
 28761                                  
 28762                                  ;============================================================================
 28763                                  ; BUF.ASM
 28764                                  ;============================================================================
 28765                                  ; 31/07/2018 - Retro DOS v3.0
 28766                                  ; Retro DOS v2.0 - 12/03/2018
 28767                                  
 28768                                  ;
 28769                                  ; buffer management for MSDOS
 28770                                  ;
 28771                                  
 28772                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 28773                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 28774                                  
 28775                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 28776                                  
 28777                                  SETVISIT:
 28778                                  	; 31/07/2018 - Retro DOS v3.0
 28779                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 28780                                  ; Inputs:
 28781                                  ;       None
 28782                                  ; Function:
 28783                                  ;       Set up a scan of I/O buffers
 28784                                  ; Outputs:
 28785                                  ;       All visit flags = 0
 28786                                  ;               NOTE: This pre-scan is needed because a hard disk error
 28787                                  ;                     may cause a scan to stop in the middle leaving some
 28788                                  ;                     visit flags set, and some not set.
 28789                                  ;       DS:DI Points to [BUFFHEAD]
 28790                                  ; No other registers altered
 28791                                  
 28792 000060BE 36C53E[3800]                    LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 28793 000060C3 50                      	PUSH    AX
 28794                                          ;;XOR	AX,AX	  ;; MSDOS 2.11
 28795                                  	;mov	al,0DFh
 28796 000060C4 B0DF                    	mov	al,~buf_visit
 28797                                  SETLOOP:
 28798                                          ;;MOV	[DI+7],AL ;; MSDOS 2.11
 28799                                  	;and	[DI+5],al
 28800 000060C6 204505                  	AND	[DI+BUFFINFO.buf_flags],AL
 28801 000060C9 C53D                            LDS     DI,[DI]
 28802 000060CB 83FFFF                          CMP     DI,-1
 28803 000060CE 75F6                            JNZ     SHORT SETLOOP
 28804 000060D0 58                              POP     AX ; 09/09/2018
 28805 000060D1 36C53E[3800]            	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 28806                                  SVISIT_RETN:
 28807 000060D6 C3                              RETN
 28808                                  
 28809                                  SKIPVISIT:
 28810                                  	; 31/07/2018 - Retro DOS v3.0
 28811                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 28812                                  
 28813                                  ; Inputs:
 28814                                  ;       DS:DI Points to a buffer
 28815                                  ; Function:
 28816                                  ;       Skip visited buffers
 28817                                  ; Outputs:
 28818                                  ;       DS:DI Points to next unvisited buffer
 28819                                  ;       Zero is set if skip to LAST buffer
 28820                                  ; No other registers altered
 28821                                  
 28822 000060D7 83FFFF                          CMP     DI,-1
 28823                                          ;retz
 28824 000060DA 74FA                            JZ	SHORT SVISIT_RETN  ; zf = 1 
 28825                                  
 28826                                  	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 28827                                          ;;;retnz
 28828                                          ;;JNZ	SHORT SVISIT_RETN
 28829                                  
 28830                                  	;test	byte [di+5],20h
 28831 000060DC F6450520                	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 28832 000060E0 7505                    	JNZ	short SKIPLOOP
 28833                                  	
 28834 000060E2 50                      	push	ax
 28835 000060E3 0C01                    	or	al,1
 28836 000060E5 58                      	pop	ax
 28837                                  		; zf = 0
 28838 000060E6 C3                      	retn	
 28839                                  
 28840                                  SKIPLOOP:
 28841 000060E7 C53D                    	LDS     DI,[DI]
 28842 000060E9 EBEC                            JMP     SHORT SKIPVISIT
 28843                                  
 28844                                  ;============================================================================
 28845                                  ; BUF.ASM, MSDOS 6.0, 1991
 28846                                  ;============================================================================
 28847                                  ; 31/07/2018 - Retro DOS v3.0
 28848                                  
 28849                                  ;	TITLE	BUF - MSDOS buffer management
 28850                                  ;	NAME	BUF
 28851                                  
 28852                                  ;**	BUF.ASM - Low level routines for buffer cache management
 28853                                  ;
 28854                                  ;	GETCURHEAD
 28855                                  ;	ScanPlace
 28856                                  ;	PLACEBUF
 28857                                  ;	PLACEHEAD
 28858                                  ;	PointComp
 28859                                  ;	GETBUFFR
 28860                                  ;	GETBUFFRB
 28861                                  ;	FlushBuf
 28862                                  ;	BufWrite
 28863                                  ;	SET_RQ_SC_PARMS
 28864                                  ;
 28865                                  ;	Revision history:
 28866                                  ;
 28867                                  ;		AN000  version 4.00  Jan. 1988
 28868                                  ;		A004   PTM 3765 -- Disk reset failed
 28869                                  ;		M039 DB 10/17/90 - Disk write optimization
 28870                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 28871                                  
 28872                                  ;Break	<GETCURHEAD -- Get current buffer header>
 28873                                  ;----------------------------------------------------------------------------
 28874                                  ; Procedure Name : GetCurHead
 28875                                  ; Inputs:
 28876                                  ;	 No Inputs
 28877                                  ; Function:
 28878                                  ;	Returns the pointer to the first buffer in Queue
 28879                                  ;	and updates FIRST_BUFF_ADDR
 28880                                  ;       and invalidates LASTBUFFER (recency pointer)
 28881                                  ; Outputs:
 28882                                  ;	DS:DI = pointer to the first buffer in Queue
 28883                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 28884                                  ;       LASTBUFFER = -1
 28885                                  ; No other registers altered
 28886                                  ;----------------------------------------------------------------------------
 28887                                  
 28888                                  ;procedure   GETCURHEAD,NEAR
 28889                                  ;
 28890                                  ;	lds	di, BufferQueue		; Pointer to the first buffer;smr;SS Override
 28891                                  ;	mov	word ptr [LastBuffer],-1; invalidate last buffer;smr;SS Override
 28892                                  ;	mov	[FIRST_BUFF_ADDR],di	;save first buffer addr;smr;SS Override
 28893                                  ;	ret
 28894                                  ;
 28895                                  ;EndProc GETCURHEAD
 28896                                  
 28897                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 28898                                  ;----------------------------------------------------------------------------
 28899                                  ; Procedure Name : ScanPlace
 28900                                  ; Inputs:
 28901                                  ;	Same as PLACEBUF
 28902                                  ; Function:
 28903                                  ;	Save scan location and call PLACEBUF
 28904                                  ; Outputs:
 28905                                  ;	DS:DI Points to saved scan location
 28906                                  ; All registers, except DS:DI, preserved.
 28907                                  ;----------------------------------------------------------------------------
 28908                                  ;M039: Rewritten to preserve registers.
 28909                                  
 28910                                  SCANPLACE:
 28911                                  	; 31/07/2018 - Retro DOS v3.0
 28912                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 28913 000060EB 06                      	push	es
 28914 000060EC C435                    	les	si,[di]
 28915                                  	;les	si,[DI+BUFFINFO.buf_link]
 28916 000060EE E80600                  	call	PLACEBUF
 28917 000060F1 06                      	push	es
 28918 000060F2 1F                      	pop	ds
 28919 000060F3 89F7                    	mov	di,si
 28920 000060F5 07                      	pop	es
 28921                                  scanplace_retn:
 28922 000060F6 C3                      	retn	
 28923                                  	
 28924                                  	; MSDOS 6.0
 28925                                  ;ScanPlace:
 28926                                  	;push	word [di+BUFFINFO.buf_next]	;Save scan location
 28927                                  	;call	PLACEBUF
 28928                                  	;pop	di
 28929                                  	;retn
 28930                                  
 28931                                  ;----------------------------------------------------------------------------
 28932                                  ; Procedure Name : PlaceBuf
 28933                                  ; Input:
 28934                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 28935                                  ; Function:
 28936                                  ;	Remove buffer from queue and re-insert it in proper place.
 28937                                  ; NO registers altered
 28938                                  ;----------------------------------------------------------------------------
 28939                                  
 28940                                  ;procedure   PLACEBUF,NEAR
 28941                                  
 28942                                  ;PLACEBUF:
 28943                                  	; 31/07/2018 - Retro DOS v3.0
 28944                                  
 28945                                  	; MSDOS 6.0
 28946                                  	;push	AX			;Save only regs we modify	;AN000;
 28947                                  	;push	BX							;AN000;
 28948                                  	;push	SI							;AN000;
 28949                                  	;mov	ax,[di].BUF_NEXT
 28950                                  	;mov	bx,word ptr[BufferQueue]	; bx = offset of head of list;smr;SS Override
 28951                                  	;
 28952                                  	;cmp	ax,bx				;Buf = last?		;AN000;
 28953                                  	;je	nret				;Yes, special case	;AN000;
 28954                                  	;cmp	di,bx				;Buf = first?		;AN000;
 28955                                  	;jne	not_first 			;Yes, special case	;AN000;
 28956                                  	;mov	word ptr [BufferQueue],ax	;smr;SS Override
 28957                                  	;jmp	short nret 			;Continue with repositioning;AN000;
 28958                                  ;not_first:
 28959                                  	;mov	SI,[DI].BUF_PREV		;No, SI = prior Buf	;AN000;
 28960                                  	;mov	[SI].BUF_NEXT,AX		; ax has di->buf_next	;AN000;
 28961                                  	;xchg	si, ax
 28962                                  	;mov	[SI].BUF_PREV,AX		;			;AN000;
 28963                                  	;
 28964                                  	;mov	SI,[BX].BUF_PREV		;SI-> last buffer	;AN000;
 28965                                  	;mov	[SI].BUF_NEXT,DI		;Add Buf to end of list ;AN000;
 28966                                  	;mov	[BX].BUF_PREV,DI					;AN000;
 28967                                  	;mov	[DI].BUF_PREV,SI		;Update link in Buf too	;AN000;
 28968                                  	;mov	[DI].BUF_NEXT,BX					;AN000;
 28969                                  ;nret:									;AN000;
 28970                                  	;pop	SI							;AN000;
 28971                                  	;pop	BX							;AN000;
 28972                                  	;pop	AX							;AN000;
 28973                                  	;								;AN000;
 28974                                  	;cmp	[di.buf_ID],-1			; Buffer FREE?		;AN000;
 28975                                          ;jne	pbx                             ; M039: -no, jump.
 28976                                  	;mov	WORD PTR [BufferQueue],di	; M039: -yes, make it LRU.
 28977                                  ;pbx:	
 28978                                  ;	ret								;AN000;
 28979                                  
 28980                                  	; 31/07/2018 - Retro DOS v3.0
 28981                                  
 28982                                  	; MSDOS 3.3
 28983                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 28984                                  
 28985                                  PLACEBUF:
 28986                                  	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 28987                                  	
 28988 000060F7 E83CB5                          CALL	save_world
 28989 000060FA C40D                            LES     CX,[DI]
 28990 000060FC 83F9FF                          CMP     CX,-1           	; Buf is LAST?
 28991 000060FF 744B                            JZ      SHORT NRET		; Buffer already last
 28992 00006101 8CC5                            MOV     BP,ES           	; Pointsave = Buf.nextbuf
 28993 00006103 1E                              PUSH    DS
 28994 00006104 07                              POP     ES              	; Buf is ES:DI
 28995                                  	; 15/03/2018
 28996 00006105 36C536[3800]                    LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 28997 0000610A E88200                          CALL    POINTCOMP       	; Buf == HEAD?
 28998 0000610D 750C                            JNZ     SHORT BUFLOOP
 28999 0000610F 36890E[3800]                    MOV     [SS:BUFFHEAD],CX
 29000 00006114 36892E[3A00]                    MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 29001 00006119 EB14                            JMP     SHORT LOOKEND
 29002                                  
 29003                                  BUFLOOP:
 29004                                  	; 31/07/2018
 29005 0000611B 8CD8                    	mov	ax,ds
 29006 0000611D 89F3                    	mov	bx,si
 29007                                  	;lds	si,[SI+BUFFINFO.buf_link]
 29008 0000611F C534                            LDS     SI,[SI]
 29009 00006121 E86B00                          CALL    POINTCOMP
 29010 00006124 75F5                            jnz	short BUFLOOP
 29011                                  	;
 29012 00006126 8ED8                    	mov	ds,ax
 29013 00006128 89DE                    	mov	si,bx
 29014 0000612A 890C                    	mov	[SI],cx
 29015                                  	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 29016 0000612C 896C02                  	mov	[SI+2],bp
 29017                                  	;mov	[SI+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 29018                                  LOOKEND:
 29019 0000612F 8CD8                    	mov	ax,ds
 29020 00006131 89F3                    	mov	bx,si
 29021 00006133 C534                            LDS     SI,[SI]
 29022 00006135 83FEFF                          CMP     SI,-1
 29023 00006138 75F5                            jnz     short LOOKEND
 29024                                  GOTHEEND:
 29025 0000613A 8ED8                            mov	ds,ax
 29026 0000613C 893F                    	mov	[BX],di
 29027 0000613E 8C4702                          MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 29028 00006141 26C705FFFF                      MOV     WORD [ES:DI],-1
 29029                                  	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 29030 00006146 26C74502FFFF                    MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 29031                                  	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 29032                                  NRET:
 29033 0000614C E8D4B4                          CALL	restore_world
 29034                                  	
 29035                                  	;cmp	byte [di+4],-1
 29036 0000614F 807D04FF                	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 29037 00006153 75A1                    	jnz     short scanplace_retn
 29038                                  
 29039                                  	; 26/07/2019
 29040                                  	;call	PLACEHEAD
 29041                                  	;retn
 29042                                  	;jmp	PLACEHEAD
 29043                                  
 29044                                  ;EndProc PLACEBUF
 29045                                  
 29046                                  ;M039 - Removed PLACEHEAD.
 29047                                  ;----------------------------------------------------------------------------
 29048                                  ; places buffer at head
 29049                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 29050                                  ;	ONE IN THE LIST!!!!!!!
 29051                                  ; BUGBUG ---- this routine can be removed because it has only
 29052                                  ; BUGBUG ---- one instruction. This routine is called from
 29053                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 29054                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 29055                                  ; BUGBUG ---- But kept as it is for modularity
 29056                                  ;----------------------------------------------------------------------------
 29057                                  ;procedure   PLACEHEAD,NEAR
 29058                                  ;	mov	word ptr [BufferQueue], di
 29059                                  ;	ret
 29060                                  ;EndProc PLACEHEAD
 29061                                  ;M039
 29062                                  
 29063                                  ;----------------------------------------------------------------------------
 29064                                  ; Procedure Name : PLACEHEAD
 29065                                  ;
 29066                                  ; SAME AS PLACEBUF except places buffer at head
 29067                                  ;----------------------------------------------------------------------------
 29068                                  
 29069                                  	; MSDOS 3.3 (Retro DOS v3.0)
 29070                                  	; 05/09/2018
 29071                                  	; MSDOS 2.11 (Retro DOS v2.0)
 29072                                  PLACEHEAD:
 29073                                  	; 31/07/2018 - Retro DOS v3.0
 29074                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 29075                                  
 29076 00006155 E8DEB4                          CALL	save_world
 29077 00006158 1E                              PUSH	DS
 29078 00006159 07                              POP	ES
 29079                                  	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 29080 0000615A 36C536[3800]                    LDS     SI,[SS:BUFFHEAD]
 29081                                  	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 29082 0000615F E82D00                  	CALL	POINTCOMP
 29083 00006162 7427                            JZ      SHORT GOTHEEND2
 29084 00006164 268935                  	MOV	[ES:DI],SI
 29085                                  	;mov	[ES:DI+BUFFINFO.buf_link],si
 29086 00006167 268C5D02                        MOV	[ES:DI+2],DS
 29087                                  	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 29088 0000616B 36893E[3800]                    MOV	[SS:BUFFHEAD],DI
 29089 00006170 368C06[3A00]                    MOV	[SS:BUFFHEAD+2],ES
 29090                                  LOOKEND2:
 29091 00006175 8CD8                            mov	ax,ds
 29092 00006177 89F3                    	mov	bx,si
 29093                                  	;lds	si,[SI+BUFFINFO.buf_link]
 29094 00006179 C534                            LDS     SI,[SI]
 29095 0000617B E81100                          CALL    POINTCOMP
 29096 0000617E 75F5                            JNZ	SHORT LOOKEND2 ; 05/09/2018
 29097 00006180 8ED8                            mov	ds,ax
 29098 00006182 C707FFFF                	mov	word [bx],-1
 29099                                  	;mov	word [BX+BUFFINFO.buf_link],-1
 29100 00006186 C74702FFFF              	mov	word [bx+2],-1
 29101                                  	;mov	word [BX+BUFFINFO.buf_link+2],-1
 29102                                  GOTHEEND2:
 29103 0000618B E895B4                         	call	restore_world
 29104                                  placehead_retn:
 29105 0000618E C3                      	retn
 29106                                  
 29107                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 29108                                  ;----------------------------------------------------------------------------
 29109                                  ;
 29110                                  ; Procedure Name : PointComp
 29111                                  ; Inputs:
 29112                                  ;         DS:SI & ES:DI
 29113                                  ; Function:
 29114                                  ;          Checks for ((SI==DI) && (ES==DS))
 29115                                  ;	   Assumes that pointers are normalized for the
 29116                                  ;	   same segment
 29117                                  ;
 29118                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 29119                                  ; DO NOT USE FOR < or >
 29120                                  ; No Registers altered
 29121                                  ;
 29122                                  ;----------------------------------------------------------------------------
 29123                                  
 29124                                  POINTCOMP:
 29125                                  	; 31/07/2018 - Retro DOS v3.0
 29126                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 29127 0000618F 39FE                    	CMP	SI,DI
 29128                                  	;jnz	short _ret_label	; return if nz
 29129 00006191 75FB                    	jnz	short placehead_retn 
 29130 00006193 51                      	PUSH	CX
 29131 00006194 52                      	PUSH	DX
 29132 00006195 8CD9                    	MOV	CX,DS
 29133 00006197 8CC2                    	MOV	DX,ES
 29134 00006199 39D1                    	CMP	CX,DX
 29135 0000619B 5A                      	POP	DX
 29136 0000619C 59                      	POP	CX
 29137                                  ;_ret_label:
 29138 0000619D C3                      	retn
 29139                                  
 29140                                  
 29141                                  ; 01/08/2018 - Retro DOS v3.0
 29142                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 29143                                  
 29144                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 29145                                  
 29146                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 29147                                  ;----------------------------------------------------------------------------
 29148                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 29149                                  ;	It gets the specified local sector into one of the I/O buffers
 29150                                  ;	and shuffles the queue
 29151                                  ; 
 29152                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 29153                                  ;		       ELSE no pre-read
 29154                                  ;		(DX) = Desired physical sector number	      (LOW)
 29155                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 29156                                  ;		(ES:BP) = Pointer to drive parameters
 29157                                  ;		ALLOWED set in case of INT 24
 29158                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 29159                                  ;		'C' clear if OK
 29160                                  ;		CURBUF Points to the Buffer for the sector
 29161                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 29162                                  ;	USES	AX, BX, CX, SI, DI, Flags
 29163                                  ;----------------------------------------------------------------------------
 29164                                  
 29165                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 29166                                  ;----------------------------------------------------------------------------
 29167                                  ;	GetBuffr reads a sector from the FAT file system's FAT table.
 29168                                  ;	It gets the specified sector into one of the I/O buffers
 29169                                  ;	and shuffles the queue. We need a special entry point so that
 29170                                  ;	we can read the alternate FAT sector if the first read fails, also
 29171                                  ;	so we can mark the buffer as a FAT sector.
 29172                                  ; 
 29173                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 29174                                  ;		       ELSE no pre-read
 29175                                  ;		(DX) = Desired physical sector number	      (LOW)
 29176                                  ;		(SI) != 0
 29177                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 29178                                  ;		(ES:BP) = Pointer to drive parameters
 29179                                  ;		ALLOWED set in case of INT 24
 29180                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 29181                                  ;		'C' clear if OK
 29182                                  ;		CUR ddBUF Points to the Buffer for the sector
 29183                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 29184                                  ;	USES	AX, BX, CX, SI, DI, Flags
 29185                                  ;----------------------------------------------------------------------------
 29186                                  
 29187                                  GETBUFFR:
 29188 0000619E 31F6                    	XOR	SI,SI
 29189                                  
 29190                                  ;	This entry point is called for FAT buffering with SI != 0
 29191                                  
 29192                                  GETBUFFRB:
 29193 000061A0 A3[5005]                	MOV	[PREREAD],AX			; save pre-read flag
 29194 000061A3 268A4600                	mov	al,[ES:BP]
 29195                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 29196 000061A7 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 29197                                  	; 22/07/2019 - Retro DOS v3.2
 29198                                  	; MSDOS 6.0
 29199                                  ;hkn; SS override
 29200 000061AB 368B0E[B005]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb		;AN000;
 29201                                  
 29202                                  ;	See if this is the buffer that was most recently returned.
 29203                                  ;	A big performance win if it is.
 29204                                  
 29205 000061B0 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 29206 000061B3 7412                    	je	short getb5			; No
 29207                                  	;cmp	dx,[di+6]
 29208 000061B5 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 29209 000061B8 750D                    	JNZ	short getb5			; Wrong sector
 29210                                  	
 29211                                  	; 22/07/2019
 29212                                  	; MSDOS 6.0
 29213                                  	;cmp	cx,[di+8]
 29214 000061BA 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb		;AN000;
 29215 000061BD 7508                    	JNZ	short getb5			; F.C. >32mb		;AN000;
 29216                                  	
 29217                                  	;cmp	al,[di+4]
 29218 000061BF 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 29219                                  	;JZ	getb35				; Just asked for same buffer
 29220 000061C2 7503                    	jnz	short getb5
 29221                                  	;jmp	getb35
 29222                                  	; 28/07/2019
 29223 000061C4 E99800                  	jmp	getb35x 
 29224                                  
 29225                                  ;	It's not the buffer most recently returned. See if it's in the
 29226                                  ;	cache.
 29227                                  ;
 29228                                  ;	(cx:dx) = sector #
 29229                                  ;	(al) = drive #
 29230                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 29231                                  ;	??? list may be incomplete ???
 29232                                  
 29233                                  getb5:	
 29234                                  	; MSDOS 6.0
 29235                                  	;CALL	GETCURHEAD			; get Q Head
 29236                                  	; MSDOS 3.3
 29237 000061C7 36C53E[3800]            	lds	di,[SS:BUFFHEAD]
 29238                                  getb10:	
 29239                                  	;cmp	dx,[di+6]
 29240 000061CC 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 29241 000061CF 750A                    	jne	short getb12			; wrong sector lo
 29242                                  	
 29243                                  	; 22/07/2019 - Retro DOS v3.2
 29244                                  	; MSDOS 6.0
 29245                                  	;cmp	cx,[di+8]
 29246 000061D1 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 29247 000061D4 7505                    	jne	short getb12			; wrong sector hi
 29248                                  	
 29249                                  	;cmp	al,[di+4]
 29250 000061D6 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 29251 000061D9 745E                    	je	short getb25 ; 05/09/2018	; Found the requested sector
 29252                                  	; MSDOS 6.0
 29253                                  	;jne	short getb12
 29254                                  	;jmp	getb25
 29255                                  getb12:	
 29256                                  	; 22/07/2019 - Retro DOS v3.2
 29257                                  	; MSDOS 6.0
 29258                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 29259                                  	;cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 29260                                  	;jne	short getb10			; no, continue looking
 29261                                  
 29262                                  	; MSDOS 3.3
 29263                                  	;mov	di,[DI]
 29264                                  	;mov	di,[DI+BUFFINFO.buf_link]
 29265                                  	
 29266                                  	; 15/08/2018
 29267 000061DB C53D                    	lds	di,[di]
 29268                                  	;
 29269 000061DD 83FFFF                  	cmp	di,-1 ; 0FFFFh
 29270 000061E0 75EA                    	jne	short getb10
 29271 000061E2 36C53E[3800]            	lds	di,[SS:BUFFHEAD]		
 29272                                  
 29273                                  ;	The requested sector is not available in the buffers. DS:DI now points
 29274                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 29275                                  ;	new sector into it.
 29276                                  ;
 29277                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 29278                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 29279                                  ;	him, we should take LRU. And the above lookup shouldn't be
 29280                                  ;	down a chain, but should be hashed.
 29281                                  ;
 29282                                  ;	(DS:DI) = first buffer in the queue
 29283                                  ;	(CX:DX) = sector # we want
 29284                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 29285                                  
 29286                                  ;hkn; SS override
 29287 000061E7 51                      	PUSH	cx ; 22/07/2019 (MSDOS 6.0)
 29288 000061E8 56                      	push	si
 29289 000061E9 52                      	push	dx
 29290 000061EA 55                      	push	bp
 29291 000061EB 06                      	push	es
 29292 000061EC E8CC00                  	CALL	BUFWRITE			; Write out the dirty buffer
 29293 000061EF 07                      	pop	es
 29294 000061F0 5D                      	pop	bp
 29295 000061F1 5A                      	pop	dx
 29296 000061F2 5E                      	pop	si
 29297 000061F3 368F06[B005]            	POP	word [SS:HIGH_SECTOR] ; 22/07/2019 (MSDOS 6.0)
 29298 000061F8 726F                    	jc	short getbx			; if got hard error
 29299                                  	
 29300                                  	; MSDOS 6.0
 29301                                  	;jnc	short getb13
 29302                                  	;jmp	getbx
 29303                                  ;getb13:
 29304                                  	; MSDOS 6.0
 29305                                  	;CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 29306                                  
 29307                                  ;	We're ready to read in the buffer, if need be. If the caller
 29308                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 29309                                  
 29310 000061FA 30E4                    	XOR	AH,AH				; initial flags
 29311                                  ;hkn; SS override
 29312                                  	;test	byte [ss:PREREAD],0FFh
 29313                                  	;jnz	short getb20
 29314 000061FC 363826[5005]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 29315 00006201 751E                    	JNZ	short getb20			; no, we're done 
 29316                                  	;lea	bx,[di+16] ; MSDOS 3.3
 29317                                  	;lea	bx,[di+20] ; MSDOS 6.0
 29318 00006203 8D5D14                  	LEA	BX,[DI+BUFINSIZ]		; (ds:bx) = data address
 29319 00006206 B90100                  	MOV	CX,1
 29320 00006209 56                      	push	si
 29321 0000620A 57                      	push	di
 29322 0000620B 52                      	push	dx
 29323                                  	
 29324                                  	; MSDOS 6.0
 29325                                  	;push	es ; ***
 29326                                  
 29327                                  ; Note: As far as I can tell, all disk reads into buffers go through
 29328                                  ;	this point. -mrw 10/88
 29329                                  	
 29330                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 29331                                  	;jz	short getb14
 29332                                  	;push	ds ; **
 29333                                  	;push	bx ; *
 29334                                  	;lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 29335                                  ;getb14:
 29336                                  ;M039: Eliminated redundant HMA code.
 29337                                  
 29338                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29339 0000620C 09F6                    	OR	SI,SI			; FAT sector ?
 29340 0000620E 7407                    	JZ	short getb15		
 29341                                  
 29342 00006210 E819E0                  	call	FATSECRD
 29343                                  	;mov	ah,2
 29344 00006213 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 29345                                  
 29346 00006215 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 29347                                  getb15:
 29348 00006217 E83EE0                  	call	DREAD			; Buffer is marked free if read barfs
 29349 0000621A B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 29350                                  getb17:	
 29351                                  	; MSDOS 6.0							  ;I001
 29352                                  	;pushf								  ;I001
 29353                                  	;cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 29354                                  	;jz	short not_in_hma	; no				  ;I001
 29355                                  	;mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 29356                                  	;shr	cx,1							  ;I001
 29357                                  	;popf				; Retrieve possible CY from DREAD ;I001
 29358                                  	;mov	si,bx							  ;I001
 29359                                  	;pop	di ; *	 						  ;I001
 29360                                  	;pop	es ; **							  ;I001
 29361                                  	;cld								  ;I001
 29362                                  	;pushf				; Preserve possible CY from DREAD ;I001
 29363                                  	;rep	movsw			; move the contents of scratch buf;I001
 29364                                  	;push	es							  ;I001
 29365                                  	;pop	ds							  ;I001
 29366                                  ;not_in_hma:								  ;I001
 29367                                  	;popf							 	  ;I001
 29368                                  	;pop	es ; ***	
 29369                                  	;
 29370 0000621C 5A                      	pop	dx
 29371 0000621D 5F                      	pop	di
 29372 0000621E 5E                      	pop	si
 29373 0000621F 7248                    	JC	short getbx
 29374                                  
 29375                                  ;	The buffer has the data setup in it (if we were to read)
 29376                                  ;	Setup the various buffer fields
 29377                                  ;
 29378                                  ;	(ds:di) = buffer address
 29379                                  ;	(es:bp) = DPB address
 29380                                  ;	(HIGH_SECTOR:DX) = sector #
 29381                                  ;	(ah) = BUF_FLAGS value
 29382                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 29383                                  
 29384                                  ;hkn; SS override
 29385                                  getb20:	
 29386                                  	; 22/07/2019 - Retro DOS v3.2
 29387                                  	; MSDOS 6.0
 29388 00006221 368B0E[B005]            	MOV	CX,[SS:HIGH_SECTOR]
 29389                                  	;mov	[di+8],cx
 29390 00006226 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 29391                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 29392                                   	;mov	[di+6],dx
 29393 00006229 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 29394                                  	;mov	[di+0Ah],bp  ; MSDOS 3.3
 29395                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 29396 0000622C 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 29397                                  	;mov	[di+0Ch],es
 29398                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 29399 0000622F 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 29400 00006232 268A4600                	mov	al,[es:bp]
 29401                                  	;mov	al,[es:bp+0]
 29402                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29403                                  	;mov	[di+4],ax
 29404 00006236 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 29405                                  getb25:	
 29406                                  	; 22/07/2019
 29407                                  	; MSDOS 6.0
 29408                                  	;mov	byte [di+0Ah],1
 29409 00006239 C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 29410 0000623D 31C0                    	XOR	AX,AX
 29411                                  
 29412                                  	; MSDOS 3.3
 29413                                  	;mov	ax,1
 29414                                  
 29415 0000623F 09F6                    	OR	SI,SI				; FAT sector ?
 29416 00006241 740B                    	JZ	short getb30
 29417                                  
 29418                                  	;mov	al,[es:bp+8]
 29419 00006243 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 29420                                  	; MSDOS 6.0
 29421 00006247 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 29422                                  	;mov	ax,[es:bp+0Fh]
 29423 0000624A 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 29424                                  						;  sectors
 29425                                  	; MSDOS 3.3
 29426                                  	;;mov	ah,[es:bp+0Fh]
 29427                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 29428                                  
 29429                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 29430                                  ;		is set
 29431                                  
 29432                                  getb30:	
 29433                                  	; MSDOS 3.3
 29434                                  	;mov	[di+8],ax ; 15/08/2018	
 29435                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 29436                                  
 29437                                  	; 22/07/2019 - Retro DOS v3.2
 29438                                  	; MSDOS 6.0
 29439                                  	;mov	[di+0Bh],ax
 29440 0000624E 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 29441                                  
 29442 00006251 E8A3FE                  	CALL	PLACEBUF
 29443                                  
 29444                                  ;hkn; SS override for next 4
 29445                                  getb35: 
 29446 00006254 368C1E[2000]            	MOV	[SS:LastBuffer+2],DS
 29447 00006259 36893E[1E00]            	MOV	[SS:LastBuffer],DI
 29448 0000625E F8                      	CLC
 29449                                  getb35x: ; 28/07/2019
 29450 0000625F 368C1E[A005]            	MOV	[SS:CURBUF+2],DS
 29451 00006264 36893E[9E05]            	MOV	[SS:CURBUF],DI
 29452                                  
 29453                                  ;	Return with 'C' set appropriately
 29454                                  ;
 29455                                  ;	(dx) = caller's original value
 29456                                  
 29457                                  getbx:	
 29458 00006269 16                      	push	ss
 29459 0000626A 1F                      	pop	ds
 29460 0000626B C3                      	retn
 29461                                  
 29462                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 29463                                  ;----------------------------------------------------------------------------
 29464                                  ; Input:
 29465                                  ;	DS = DOSGROUP
 29466                                  ;	AL = Physical unit number local buffers only
 29467                                  ;	   = -1 for all units and all remote buffers
 29468                                  ; Function:
 29469                                  ;	Write out all dirty buffers for unit, and flag them as clean
 29470                                  ;	Carry set if error (user FAILed to I 24)
 29471                                  ;	    Flush operation completed.
 29472                                  ; DS Preserved, all others destroyed (ES too)
 29473                                  ;----------------------------------------------------------------------------
 29474                                  
 29475                                  FLUSHBUF:
 29476                                  	; MSDOS 6.0
 29477                                  	;call	GetCurHead
 29478                                  	;TEST	word [DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 29479                                  	;jnz	short scan_buf_queue
 29480                                  	;cmp	word [DirtyBufferCount], 0			;hkn;
 29481                                  	;je	short end_scan
 29482                                  	
 29483                                  	; MSDOS 3.3
 29484                                  	;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 29485 0000626C C53E[3800]              	lds	di,[BUFFHEAD]
 29486                                  scan_buf_queue:
 29487 00006270 E81F00                  	call	CHECKFLUSH
 29488                                  	;push	ax  ; MSDOS 3.3
 29489                                  	; MSDOS 6.0
 29490 00006273 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 29491 00006276 363826[EE02]            	cmp	[SS:WPERR],ah					;hkn;
 29492                                  	;je	short free_the_buf
 29493                                  	;TEST	word [DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 29494                                  	;jz	short dont_free_the_buf
 29495                                  	; MSDOS 3.3
 29496                                  	;mov	al,[di+4]
 29497                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 29498                                  	;cmp	[SS:WPERR],al					;hkn;
 29499                                  	; 15/08/2018
 29500 0000627B 7505                    	jne	short dont_free_the_buf	
 29501                                  free_the_buf:
 29502                                  	; MSDOS 6.0 (& MSDOS 3.3)
 29503 0000627D C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 29504                                  dont_free_the_buf:
 29505                                  	;pop	ax  ; MSDOS 3.3 	   	
 29506                                  	
 29507                                  	; MSDOS 6.0
 29508                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 29509                                  	;cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 29510                                  	;jne	short scan_buf_queue
 29511                                  
 29512                                  	; MSDOS 3.3
 29513                                  	;mov	di,[DI]
 29514                                  	;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 29515                                  	;
 29516                                  	; 15/08/2018
 29517 00006282 C53D                    	lds	di,[di]
 29518                                  	;
 29519 00006284 83FFFF                  	cmp	di,-1 ; 0FFFFh
 29520 00006287 75E7                    	jnz	short scan_buf_queue 
 29521                                  
 29522                                  end_scan:
 29523 00006289 16                      	push	ss
 29524 0000628A 1F                      	pop	ds
 29525                                  	; 01/08/2018 - Retro DOS v3.0
 29526                                  	;cmp	byte [FAILERR],0
 29527                                  	;jne	short bad_flush
 29528                                  	;retn
 29529                                  ;bad_flush:
 29530                                  	;stc
 29531                                  	;retn
 29532                                  	; 01/08/2018 - Retro DOS v3.0
 29533 0000628B 803E[1403]01            	cmp	byte [FAILERR],1
 29534 00006290 F5                      	cmc
 29535                                  flushbuf_retn:
 29536 00006291 C3                      	retn
 29537                                  
 29538                                  ;----------------------------------------------------------------------------
 29539                                  ;
 29540                                  ; Procedure Name : CHECKFLUSH
 29541                                  ;
 29542                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 29543                                  ;	   DS:DI - pointer to buffer
 29544                                  ;
 29545                                  ; Function : Write out a buffer if it is dirty
 29546                                  ;
 29547                                  ; Carry set if problem (currently user FAILed to I 24)
 29548                                  ;
 29549                                  ;----------------------------------------------------------------------------
 29550                                  
 29551                                  CHECKFLUSH:
 29552                                  	; MSDOS 6.0
 29553 00006292 B4FF                    	mov	ah,-1 ; 01/08/2018 Retro DOS v3.0
 29554                                  	;cmp	[di+4],ah
 29555 00006294 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 29556 00006297 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 29557 00006299 38C4                    	CMP	AH,AL			; 
 29558 0000629B 7406                    	JZ	short DOBUFFER		; do this buffer
 29559                                  	;cmp	al,[di+4]
 29560 0000629D 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 29561 000062A0 F8                      	CLC
 29562 000062A1 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 29563                                  DOBUFFER:
 29564                                  	;test	byte [di+5],40h
 29565 000062A3 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 29566 000062A7 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 29567 000062A9 50                      	PUSH	AX
 29568                                  	;push	word [di+4]
 29569 000062AA FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 29570 000062AD E80B00                  	CALL	BUFWRITE
 29571 000062B0 58                      	POP	AX
 29572 000062B1 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 29573                                  	;and	ah,0BFh
 29574 000062B3 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 29575                                  	;mov	[di+4],ax
 29576 000062B6 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 29577                                  LEAVE_BUF:
 29578 000062B9 58                      	POP	AX			; Search info
 29579                                  checkflush_retn:
 29580 000062BA C3                      	retn
 29581                                  
 29582                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 29583                                  ;----------------------------------------------------------------------------
 29584                                  ;
 29585                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 29586                                  ;
 29587                                  ;	ENTRY	DS:DI Points to the buffer
 29588                                  ;
 29589                                  ;	EXIT	Buffer marked free
 29590                                  ;		Carry set if error (currently user FAILed to I 24)
 29591                                  ;
 29592                                  ;	USES	All buf DS:DI
 29593                                  ;		HIGH_SECTOR
 29594                                  ;----------------------------------------------------------------------------
 29595                                  
 29596                                  BUFWRITE:
 29597                                  	; 22/07/2019 - Retro DOS v3.2
 29598                                  	; 10/09/2018
 29599                                  	; 01/08/2018 - Retro DOS v3.0
 29600                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 29601 000062BB B8FF00                  	MOV	AX,00FFH
 29602                                  	;xchg	ax,[di+4]
 29603 000062BE 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 29604 000062C1 3CFF                    	CMP	AL,0FFH
 29605 000062C3 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 29606                                  	;test	ah,40h
 29607 000062C5 F6C440                  	test	AH,buf_dirty
 29608 000062C8 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 29609                                  	; MSDOS 6.0
 29610                                  	;call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 29611                                  
 29612                                  ;hkn; SS override
 29613 000062CA 363A06[EE02]            	CMP	AL,[SS:WPERR]
 29614 000062CF 74E9                    	jz      short checkflush_retn	; If in WP error zap buffer
 29615                                  
 29616                                  ;hkn; SS override
 29617                                  	; 22/07/2019 - Retro DOS v3.2
 29618                                  	; MSDOS 6.0
 29619                                  	;MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 29620                                  	
 29621                                  	;;les	bp,[di+10] ; MSDOS 3.3
 29622                                  	;les	bp,[di+13] ; MSDOS 6.0
 29623 000062D1 C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 29624                                  	;;lea	bx,[di+16]
 29625                                  	;lea	bx,[di+20] ; MSDOS 6.0
 29626 000062D4 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 29627                                  	;mov	dx,[di+6]
 29628 000062D7 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 29629                                  	
 29630                                  	; MSDOS 6.0
 29631                                  	;mov	cx,[di+8]
 29632 000062DA 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 29633                                  ;hkn; SS override
 29634 000062DD 36890E[B005]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 29635 000062E2 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 29636                                  	; MSDOS 3.3
 29637                                  	;; mov	cx,[DI+8]
 29638                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 29639                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 29640 000062E5 30ED                    	XOR	CH,CH
 29641                                  	;;mov	ah,ch ; MSDOS 3.3
 29642                                  
 29643                                  ;hkn; SS override for ALLOWED
 29644                                  	;mov	byte [SS:ALLOWED],18h
 29645 000062E7 36C606[1503]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 29646                                  	;test	byte [di+5],8
 29647                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 29648                                  	;test	ah,8
 29649 000062ED F6C408                  	test	AH,buf_isDATA
 29650 000062F0 7406                    	JZ	short NO_IGNORE
 29651                                  	;or	byte [SS:ALLOWED],20h
 29652 000062F2 36800E[1503]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 29653                                  NO_IGNORE:
 29654                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 29655                                  	; MSDOS 6.0
 29656                                  	;mov	ax,[di+11]
 29657 000062F8 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 29658                                  
 29659 000062FB 57                      	PUSH	DI		; Save buffer pointer
 29660 000062FC 31FF                    	XOR	DI,DI		; Indicate failure
 29661                                  
 29662                                  	;push	ds
 29663                                  	;push	bx
 29664                                  WRTAGAIN:
 29665 000062FE 57                      	push	di
 29666 000062FF 51                      	push	cx
 29667 00006300 50                      	push	ax
 29668                                  	;MOV	CX,1
 29669 00006301 B101                    	mov	cl,1 ; 24/07/2019
 29670 00006303 53                      	push	bx
 29671 00006304 52                      	push	dx
 29672 00006305 1E                      	push	ds
 29673                                  
 29674                                  ; Note:  As far as I can tell, all disk reads into buffers go through this point.  -mrw 10/88
 29675                                  
 29676                                  	; MSDOS 6.0
 29677                                  	;cmp	byte [BuffInHMA],0
 29678                                  	;jz	short NBUFFINHMA
 29679                                  	;push	cx
 29680                                  	;push	es
 29681                                  	;mov	si,bx
 29682                                  	;mov	cx,[es:bp+DPB.SECTOR_SIZE]
 29683                                  	;shr	cx,1
 29684                                  	;les	di,[LoMemBuff]
 29685                                  	;mov	bx,di
 29686                                  	;cld
 29687                                  	;rep	movsw
 29688                                  	;push	es
 29689                                  	;pop	ds
 29690                                  	;pop	es
 29691                                  	;pop	cx
 29692                                  ;NBUFFINHMA:
 29693 00006306 E8AFDF                  	call	DWRITE		; Write out the dirty buffer
 29694 00006309 1F                      	pop	ds
 29695 0000630A 5A                      	pop	dx
 29696 0000630B 5B                      	pop	bx
 29697 0000630C 58                      	pop	ax
 29698 0000630D 59                      	pop	cx
 29699 0000630E 5F                      	pop	di
 29700 0000630F 7201                    	JC	short NOSET
 29701 00006311 47                      	INC	DI		; If at least ONE write succeedes, the operation
 29702                                  NOSET:				;	succeedes.
 29703 00006312 01C2                    	ADD	DX,AX
 29704 00006314 E2E8                    	LOOP	WRTAGAIN
 29705                                  	;pop	bx
 29706                                  	;pop	ds
 29707 00006316 09FF                    	OR	DI,DI		; Clears carry
 29708 00006318 7501                    	JNZ	short BWROK	; At least one write worked
 29709 0000631A F9                      	STC			; DI never got INCed, all writes failed.
 29710                                  BWROK:	
 29711 0000631B 5F                      	POP	DI
 29712 0000631C C3                      	retn
 29713                                  
 29714                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 29715                                  ;----------------------------------------------------------------------------
 29716                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 29717                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 29718                                  ;	SC_DRIVE even if SC is disabled to save the testing
 29719                                  ;	code and time
 29720                                  ;
 29721                                  ;	ENTRY	ES:BP = drive parameter block
 29722                                  ;
 29723                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 29724                                  ;		[SC_DRIVE]= drive #
 29725                                  ;
 29726                                  ;	USES	Flags
 29727                                  ;----------------------------------------------------------------------------
 29728                                  
 29729                                  ;procedure   SET_RQ_SC_PARMS,NEAR
 29730                                  ;
 29731                                  ;;hkn; SS override for all variables used in this procedure.
 29732                                  ;
 29733                                  ;	SAVE	<ax>
 29734                                  ;
 29735                                  ;	MOV	ax,ES:[BP].DPB_SECTOR_SIZE	; save sector size
 29736                                  ;	MOV	SC_SECTOR_SIZE,ax
 29737                                  ;
 29738                                  ;	MOV	al,ES:[BP].DPB_DRIVE		; save drive #
 29739                                  ;	MOV	SC_DRIVE,al
 29740                                  ;
 29741                                  ;	RESTORE <ax>
 29742                                  ;
 29743                                  ;srspx:	return
 29744                                  ;
 29745                                  ;EndProc SET_RQ_SC_PARMS 			;LB. return
 29746                                  
 29747                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 29748                                  ;----------------------------------------------------------------------------
 29749                                  ; Input:
 29750                                  ;	none
 29751                                  ; Function:
 29752                                  ;	increment dirty buffers count
 29753                                  ; Output:
 29754                                  ;	dirty buffers count is incremented
 29755                                  ;
 29756                                  ; All registers preserved
 29757                                  ;----------------------------------------------------------------------------
 29758                                  
 29759                                  ;procedure   INC_DIRTY_COUNT,NEAR
 29760                                  ;
 29761                                  ;; BUGBUG  ---- remove this routine
 29762                                  ;; BUGBUG ---- only one instruction is needed   (speed win, space loose)
 29763                                  ;	inc	[DirtyBufferCount]			;hkn;
 29764                                  ;	ret
 29765                                  ;EndProc INC_DIRTY_COUNT
 29766                                  
 29767                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 29768                                  ;----------------------------------------------------------------------------
 29769                                  ; Input:
 29770                                  ;	none
 29771                                  ; Function:
 29772                                  ;	decrement dirty buffers count
 29773                                  ; Output:
 29774                                  ;	dirty buffers count is decremented
 29775                                  ;
 29776                                  ; All registers preserved
 29777                                  ;----------------------------------------------------------------------------
 29778                                  
 29779                                  ;procedure   DEC_DIRTY_COUNT,NEAR
 29780                                  ;	cmp	[DirtyBufferCount], 0	;hkn;
 29781                                  ;	jz	ddcx			; BUGBUG - shouldn't it be an
 29782                                  ;	dec	[DirtyBufferCount]	; error condition to underflow here? ;hkn;
 29783                                  ;ddcx:	ret
 29784                                  ;
 29785                                  ;EndProc DEC_DIRTY_COUNT
 29786                                  
 29787                                  ;============================================================================
 29788                                  ; MSPROC.ASM, MSDOS 6.0, 1991
 29789                                  ;============================================================================
 29790                                  ; 02/08/2018 - Retro DOS v3.0
 29791                                  
 29792                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 29793                                  
 29794                                  ; Pseudo EXEC system call for DOS
 29795                                  
 29796                                  ;	TITLE	MSPROC - process maintenance
 29797                                  ;	NAME	MSPROC
 29798                                  
 29799                                  ; =========================================================================
 29800                                  ;**	Process related system calls and low level routines for DOS 2.X.
 29801                                  ;	I/O specs are defined in DISPATCH.
 29802                                  ;
 29803                                  ;	$WAIT
 29804                                  ;	$EXEC
 29805                                  ;	$Keep_process
 29806                                  ;	Stay_resident
 29807                                  ;	$EXIT
 29808                                  ;	$ABORT
 29809                                  ;	abort_inner
 29810                                  ;
 29811                                  ;	Modification history:
 29812                                  ;
 29813                                  ;		Created: ARR 30 March 1983
 29814                                  ;		AN000	version 4.0 jan. 1988
 29815                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 29816                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 29817                                  ;
 29818                                  ;		M000	added support for loading programs into UMBs 7/9/90
 29819                                  ;
 29820                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 29821                                  ;		       dossym.inc. 7/30/90
 29822                                  ;		M005 - Support for EXE programs with out STACK segment and 
 29823                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 29824                                  ;		       stack is provided at the end of the program. Note that
 29825                                  ;		       only SP is changed.
 29826                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 29827                                  ;
 29828                                  ;		M028 - 4b04 implementation
 29829                                  ;
 29830                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 29831                                  ;			in memory block >= 64K, sp = 0. If memory block
 29832                                  ;			obtained is <64K, point sp at the end of the memory
 29833                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 29834                                  ;			added for a stack segment which may be needed if it
 29835                                  ;			is loaded in low memory situations.
 29836                                  ;
 29837                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 29838                                  ;
 29839                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 29840                                  ;			a bad environment if it reached 32767 bytes. Changed
 29841                                  ;			to allow 32768 bytes of environment.
 29842                                  ;
 29843                                  ;		M047 - Release the allocated UMB when we failed to load a 
 29844                                  ;		       COM file high. Also ensure that if the biggest block
 29845                                  ;		       into which we load the com file is less than 64K then
 29846                                  ;		       we provide atleast 256 bytes of stack to the user.
 29847                                  ;
 29848                                  ;		M050 - Made Lie table search CASE insensitive
 29849                                  ;
 29850                                  ;		M060 - Removed special version table from the kernal and
 29851                                  ;                      put it in a device drive which puts the address
 29852                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 29853                                  ;		       as a DWORD.
 29854                                  ;
 29855                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 29856                                  ;		       entry do not try to load low if there is no space in
 29857                                  ;		       UMBs.
 29858                                  ;
 29859                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 29860                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 29861                                  ;		       change return address to LeaveDos if AL=5.
 29862                                  ;
 29863                                  ;               20-Jul-1992 bens    Added ifdef RESTRICTED_BUILD code that
 29864                                  ;                      controls building a version of MSDOS.SYS that only
 29865                                  ;                      runs programs from a fixed list (defined in the
 29866                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 29867                                  ;                      for details.  This feature is used to build a
 29868                                  ;                      "special" version of DOS that can be handed out to
 29869                                  ;                      OEM/ISV customers as part of a "service" disk.
 29870                                  ;
 29871                                  ; =========================================================================
 29872                                  
 29873                                  ;SAVEXIT 	EQU	10
 29874                                  
 29875                                  ;BREAK	<$WAIT - return previous process error code>
 29876                                  ; =========================================================================
 29877                                  ;	$WAIT - Return previous process error code.
 29878                                  ;
 29879                                  ;	Assembler usage:
 29880                                  ;
 29881                                  ;	    MOV     AH, WaitProcess
 29882                                  ;	    INT     int_command
 29883                                  ;
 29884                                  ;	ENTRY	none
 29885                                  ;	EXIT	(ax) = exit code
 29886                                  ;	USES	all
 29887                                  ; =========================================================================
 29888                                  
 29889                                  _$WAIT:
 29890                                  	; 02/08/2018 - Retro DOS v3.0
 29891                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 29892                                  
 29893 0000631D 31C0                    	xor	AX,AX
 29894 0000631F 368706[0003]            	xchg	AX,[ss:exit_code]
 29895 00006324 E974B4                  	jmp	SYS_RET_OK
 29896                                  
 29897                                  ; =========================================================================
 29898                                  ;BREAK <$exec - load/go a program>
 29899                                  ;	EXEC.ASM - EXEC System Call
 29900                                  ;
 29901                                  ;
 29902                                  ; Assembler usage:
 29903                                  ;	    lds     DX, Name
 29904                                  ;	    les     BX, Blk
 29905                                  ;	    mov     AH, Exec
 29906                                  ;	    mov     AL, FUNC
 29907                                  ;	    int     INT_COMMAND
 29908                                  ;
 29909                                  ;	AL  Function
 29910                                  ;	--  --------
 29911                                  ;	 0  Load and execute the program.
 29912                                  ;	 1  Load, create  the  program	header	but  do  not
 29913                                  ;	    begin execution.
 29914                                  ;	 3  Load overlay. No header created.
 29915                                  ;
 29916                                  ;	    AL = 0 -> load/execute program
 29917                                  ;
 29918                                  ;	    +---------------------------+
 29919                                  ;	    | WORD segment address of	|
 29920                                  ;	    | environment.		|
 29921                                  ;	    +---------------------------+
 29922                                  ;	    | DWORD pointer to ASCIZ	|
 29923                                  ;	    | command line at 80h	|
 29924                                  ;	    +---------------------------+
 29925                                  ;	    | DWORD pointer to default	|
 29926                                  ;	    | FCB to be passed at 5Ch	|
 29927                                  ;	    +---------------------------+
 29928                                  ;	    | DWORD pointer to default	|
 29929                                  ;	    | FCB to be passed at 6Ch	|
 29930                                  ;	    +---------------------------+
 29931                                  ;
 29932                                  ;	    AL = 1 -> load program
 29933                                  ;
 29934                                  ;	    +---------------------------+
 29935                                  ;	    | WORD segment address of	|
 29936                                  ;	    | environment.		|
 29937                                  ;	    +---------------------------+
 29938                                  ;	    | DWORD pointer to ASCIZ	|
 29939                                  ;	    | command line at 80h	|
 29940                                  ;	    +---------------------------+
 29941                                  ;	    | DWORD pointer to default	|
 29942                                  ;	    | FCB to be passed at 5Ch	|
 29943                                  ;	    +---------------------------+
 29944                                  ;	    | DWORD pointer to default	|
 29945                                  ;	    | FCB to be passed at 6Ch	|
 29946                                  ;	    +---------------------------+
 29947                                  ;	    | DWORD returned value of	|
 29948                                  ;	    | CS:IP			|
 29949                                  ;	    +---------------------------+
 29950                                  ;	    | DWORD returned value of	|
 29951                                  ;	    | SS:IP			|
 29952                                  ;	    +---------------------------+
 29953                                  ;
 29954                                  ;	    AL = 3 -> load overlay
 29955                                  ;
 29956                                  ;	    +---------------------------+
 29957                                  ;	    | WORD segment address where|
 29958                                  ;	    | file will be loaded.	|
 29959                                  ;	    +---------------------------+
 29960                                  ;	    | WORD relocation factor to |
 29961                                  ;	    | be applied to the image.	|
 29962                                  ;	    +---------------------------+
 29963                                  ;
 29964                                  ; Returns:
 29965                                  ;	    AX = error_invalid_function
 29966                                  ;	       = error_bad_format
 29967                                  ;	       = error_bad_environment
 29968                                  ;	       = error_not_enough_memory
 29969                                  ;	       = error_file_not_found
 29970                                  ; =========================================================================
 29971                                  ;
 29972                                  ;   Revision history:
 29973                                  ;
 29974                                  ;	 A000	version 4.00  Jan. 1988
 29975                                  ;
 29976                                  ; =========================================================================
 29977                                  
 29978                                  Exec_Internal_Buffer		EQU	OPENBUF
 29979                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 29980                                  
 29981                                  ; =========================================================================
 29982                                  
 29983                                  ;IF1		; warning message on buffers
 29984                                  ;%out	Please make sure that the following are contiguous and of the
 29985                                  ;%out	following sizes:
 29986                                  ;%out
 29987                                  ;%out	OpenBuf     128
 29988                                  ;%out	RenBuf	    128
 29989                                  ;%out	SearchBuf    53
 29990                                  ;%out	DummyCDS    curdirLen
 29991                                  ;ENDIF
 29992                                  
 29993                                  ; =========================================================================
 29994                                  
 29995                                  ; =========================================================================
 29996                                  ;
 29997                                  ; =========================================================================
 29998                                  
 29999                                  _$EXEC:
 30000                                  	; 02/08/2018 - Retro DOS v3.0
 30001                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 30002                                  
 30003                                  EXEC001S:
 30004                                  
 30005                                  	;LocalVar    Exec_Blk		,DWORD
 30006                                  	;LocalVar    Exec_Func		,BYTE
 30007                                  	;LocalVar    Exec_Load_High	,BYTE
 30008                                  	;LocalVar    Exec_FH		,WORD
 30009                                  	;LocalVar    Exec_Rel_Fac	,WORD
 30010                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 30011                                  	;LocalVar    Exec_Environ	,WORD
 30012                                  	;LocalVar    Exec_Size		,WORD
 30013                                  	;LocalVar    Exec_Load_Block	,WORD
 30014                                  	;LocalVar    Exec_DMA		,WORD
 30015                                  	;LocalVar    ExecNameLen 	,WORD
 30016                                  	;LocalVar    ExecName		,DWORD
 30017                                  	;
 30018                                  	;LocalVar    Exec_DMA_Save	,WORD
 30019                                  	;LocalVar    Exec_NoStack	,BYTE
 30020                                  
 30021                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30022                                  	;%define	Exec_Blk	dword [bp-4]
 30023                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 30024                                  	%define		Exec_BlkL	word [bp-4]	
 30025                                  	%define		Exec_BlkH	word [bp-2]
 30026                                  	%define		Exec_Func	byte [bp-5]
 30027                                  	%define		Exec_Load_High	byte [bp-6]
 30028                                  	%define		Exec_FH		word [bp-8]
 30029                                  	%define		Exec_Rel_Fac	word [bp-10]
 30030                                  	%define		Exec_Res_Len_Para word [bp-12]
 30031                                  	%define		Exec_Environ	word [bp-14]
 30032                                  	%define		Exec_Size	word [bp-16]
 30033                                  	%define		Exec_Load_Block	word [bp-18]
 30034                                  	%define		Exec_DMA	word [bp-20]
 30035                                  	%define		ExecNameLen	word [bp-22]
 30036                                  	;%define	ExecName	dword [bp-26]
 30037                                  	%define		ExecName	[bp-26] ; 09/08/2018
 30038                                  	%define		ExecNameL	word [bp-26]	
 30039                                  	%define		ExecNameH	word [bp-24]
 30040                                  	; MSDOS 6.0
 30041                                  	%define		Exec_DMA_Save	word [bp-28]
 30042                                  	%define		Exec_NoStack	byte [bp-29]
 30043                                  	
 30044                                  	; ==================================================================
 30045                                  	; validate function
 30046                                  	; ==================================================================
 30047                                  		      	
 30048                                  	;
 30049                                  	; M068 - Start
 30050                                  	;
 30051                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 30052                                  	; possibility that the count may not be decremented all the way to
 30053                                  	; 0. A typical case is if the program for which we intended to keep 
 30054                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 30055                                  	; calls), exits pre-maturely due to error conditions.
 30056                                  	;
 30057                                  
 30058                                  	; MSDOS 6.0
 30059                                  	;mov	byte [SS:A20OFF_COUNT], 0
 30060                                  
 30061                                  	;
 30062                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 30063                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 30064                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 30065                                  	;
 30066                                  	
 30067                                  	;cmp	al,5			; Q: is this ExecReady call
 30068                                  	;jne	@f			; N: continue
 30069                                  					; Y: change ret addr. to LeaveDos.
 30070                                  	;pop	cx			; Note CX is not input to ExecReady
 30071                                  	;mov	cx, offset DOSCODE:LeaveDos
 30072                                  	;push	cx
 30073                                  ;@@:
 30074                                  	;
 30075                                  	; M068 - End
 30076                                  	;
 30077                                  
 30078                                  	;Enter
 30079                                  
 30080 00006327 55                      	push	bp
 30081 00006328 89E5                    	mov	bp,sp
 30082 0000632A 83EC1E                  	sub	sp,30 ; MSDOS 6.0
 30083                                  	;sub	sp,26 ; MSDOS 3.3
 30084                                  
 30085                                  	; MSDOS 6.0
 30086                                  	;cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 30087                                  					; M030
 30088                                  	;jna	short Exec_Check_2
 30089                                  
 30090                                  	; MSDOS 3.3
 30091 0000632D 3C03                    	cmp	AL,3
 30092 0000632F 760E                    	jna	short Exec_Check_2
 30093                                  
 30094                                  Exec_Bad_Fun:
 30095 00006331 36C606[EF02]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk 
 30096                                  					; Extended Error Locus	;smr;SS Override
 30097                                  	;mov	al,1
 30098 00006337 B001                    	mov	al,error_invalid_function
 30099                                  
 30100                                  Exec_Ret_Err:
 30101                                  	;Leave
 30102 00006339 89EC                    	mov	sp,bp
 30103 0000633B 5D                      	pop	bp
 30104                                  	;transfer SYS_RET_ERR
 30105 0000633C E965B4                  	jmp	SYS_RET_ERR
 30106                                  
 30107                                  	; MSDOS 6.0
 30108                                  ;ExecReadyJ:
 30109                                  	;call	ExecReady		; M028
 30110                                  	;jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 30111                                  
 30112                                  Exec_Check_2:
 30113 0000633F 3C02                    	cmp	AL,2			
 30114 00006341 74EE                    	jz	short Exec_Bad_Fun
 30115                                  
 30116                                  	; MSDOS 6.0
 30117                                  	;cmp	al,4			; 2 & 4 are not allowed
 30118                                  	;je	short Exec_Bad_Fun
 30119                                  	;
 30120                                  	;cmp	al,5			; M028 ; M030
 30121                                  	;je	short ExecReadyJ		; M028
 30122                                  
 30123                                  	;mov	[bp-4],bx
 30124 00006343 895EFC                  	mov	Exec_BlkL,BX		; stash args
 30125                                  	;mov	[bp-2],es
 30126 00006346 8C46FE                  	mov	Exec_BlkH,ES
 30127                                  	;mov	[bp-5],al
 30128 00006349 8846FB                  	mov	Exec_Func,AL
 30129                                  	;mov	byte [bp-6],0
 30130 0000634C C646FA00                	mov	Exec_Load_High,0
 30131                                  
 30132                                  	;mov	[bp-26],dx
 30133 00006350 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 30134                                  	;mov	[bp-24],ds
 30135 00006353 8C5EE8                  	mov	ExecNameH,DS
 30136 00006356 89D6                    	mov	SI,DX			; move pointer to convenient place
 30137                                  	;invoke	DStrLen
 30138 00006358 E8C0BC                  	call	DStrLen
 30139                                  	;mov	[bp-22],cx
 30140 0000635B 894EEA                  	mov	ExecNameLen,CX		; save length
 30141                                  
 30142                                  	; MSDOS 6.0
 30143                                  	;mov	al, [AllocMethod]	; M063: save alloc method in 
 30144                                  	;mov	[AllocMsave], al	; M063: AllocMsave
 30145                                  
 30146 0000635E 30C0                    	xor	AL,AL			; open for reading
 30147 00006360 55                      	push	BP
 30148                                  
 30149                                  	; MSDOS 6.0
 30150                                  	;or	byte [DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 30151                                  					; the redir that this open call is
 30152                                  					; due to an exec.
 30153                                  
 30154                                  	;invoke	$OPEN			; is the file there?
 30155 00006361 E81610                  	call	_$OPEN
 30156                                  
 30157                                  	; MSDOS 6.0
 30158                                  	;pushf
 30159                                  	;and	byte [DOS_FLAG],~EXECOPEN; reset flag
 30160                                  	;popf
 30161                                  
 30162 00006364 5D                      	pop	BP
 30163                                  	;MSDOS 3.3
 30164 00006365 72D2                    	jc	short Exec_Ret_Err
 30165                                  
 30166                                  	;mov	[bp-8],ax
 30167 00006367 8946F8                  	mov	Exec_FH,AX
 30168 0000636A 89C3                    	mov	BX,AX
 30169 0000636C 30C0                    	xor	AL,AL
 30170                                  	;invoke	$Ioctl
 30171 0000636E E8BCCC                  	call	_$IOCTL
 30172 00006371 7207                    	jc	short Exec_BombJ
 30173                                  
 30174                                  	;test	dl,80h
 30175 00006373 F6C280                  	test	DL,devid_ISDEV
 30176 00006376 740A                    	jz	short Exec_Check_Environ
 30177                                  
 30178                                  	;mov	al,2
 30179 00006378 B002                    	mov	AL,error_file_not_found
 30180                                  Exec_BombJ:
 30181 0000637A E9CC00                  	jmp	Exec_Bomb
 30182                                  
 30183                                  BadEnv:
 30184                                  	;mov	al,0Ah
 30185 0000637D B00A                    	mov	AL,error_bad_environment
 30186 0000637F E9C700                  	jmp	Exec_Bomb
 30187                                  
 30188                                  Exec_Check_Environ:
 30189                                  	;mov	word [bp-18],0
 30190 00006382 C746EE0000              	mov	Exec_Load_Block,0
 30191                                  	;mov	word [bp-14],0
 30192 00006387 C746F20000              	mov	Exec_Environ,0
 30193                                  					; overlays... no environment
 30194                                  	;test	byte [bp-5],2
 30195 0000638C F646FB02                	test	Exec_Func,exec_func_overlay
 30196 00006390 7554                    	jnz	short Exec_Read_Header
 30197                                  
 30198                                  	;lds	si,[bp-4]
 30199 00006392 C576FC                  	lds	SI,Exec_Blk		; get block
 30200 00006395 8B04                    	mov	ax,[SI]
 30201                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 30202 00006397 09C0                    	or	AX,AX
 30203 00006399 750C                    	jnz	short Exec_Scan_Env
 30204                                  
 30205 0000639B 368E1E[FC02]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 30206                                  	;mov	ax,[44]
 30207 000063A0 A12C00                  	mov	AX,[PDB.ENVIRON]
 30208                                  
 30209                                  ; MSDOS 6.0
 30210                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 30211                                  ;
 30212                                  ; Exec_environ is being correctly initialized after the environment has been
 30213                                  ; allocated and copied form the parent's env. It must not be initialized here.
 30214                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 30215                                  ; parent's environment.
 30216                                  ;	mov	Exec_Environ,AX
 30217                                  ;
 30218                                  ;----------------------------------------------------------------------------
 30219                                  
 30220                                  	;mov	[bp-14],ax
 30221                                  	;mov	Exec_Environ,ax
 30222                                  
 30223 000063A3 09C0                    	or	AX,AX
 30224 000063A5 743F                    	jz	short Exec_Read_Header
 30225                                  
 30226                                  Exec_Scan_Env:
 30227 000063A7 8EC0                    	mov	ES,AX
 30228 000063A9 31FF                    	xor	DI,DI
 30229                                  	;mov	cx,7FFFh ; MSDOS 3.3
 30230 000063AB B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 30231 000063AE 30C0                    	xor	AL,AL
 30232                                  
 30233                                  Exec_Get_Environ_Len:
 30234 000063B0 F2AE                    	repnz	scasb			; find that nul byte
 30235 000063B2 75C9                    	jnz	short BadEnv
 30236                                  
 30237 000063B4 49                      	dec	CX			; Dec CX for the next nul byte test
 30238 000063B5 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 30239                                  
 30240 000063B7 AE                      	scasb				; is there another nul byte?
 30241 000063B8 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 30242                                  
 30243 000063BA 57                      	push	DI
 30244                                  	;lea	bx,[DI+11h]
 30245 000063BB 8D5D11                  	lea	BX,[DI+0Fh+2]
 30246                                  	;add	bx,[bp-22]
 30247 000063BE 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 30248                                  					; remember argv[0] length
 30249                                  					; round up and remember argc
 30250 000063C1 B104                    	mov	CL,4
 30251 000063C3 D3EB                    	shr	BX,CL			; number of paragraphs needed
 30252 000063C5 06                      	push	ES
 30253                                  	;invoke	$Alloc			; can we get the space?
 30254 000063C6 E8CA04                  	call	_$ALLOC
 30255 000063C9 1F                      	pop	DS
 30256 000063CA 59                      	pop	CX
 30257 000063CB 7302                    	jnc	short Exec_Save_Environ
 30258                                  
 30259 000063CD EB74                    	jmp	SHORT Exec_No_Mem	; nope... cry and sob
 30260                                  
 30261                                  Exec_Save_Environ:
 30262 000063CF 8EC0                    	mov	ES,AX
 30263                                  	;mov	[bp-14],ax
 30264 000063D1 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 30265 000063D4 31F6                    	xor	SI,SI
 30266 000063D6 89F7                    	mov	DI,SI
 30267 000063D8 F3A4                    	rep	movsb			; copy the environment
 30268 000063DA B80100                  	mov	AX,1
 30269 000063DD AB                      	stosw
 30270                                  	;lds	si,[bp-26]
 30271 000063DE C576E6                  	lds	SI,ExecName
 30272                                  	;mov	cx,[bp-22]
 30273 000063E1 8B4EEA                  	mov	CX,ExecNameLen
 30274 000063E4 F3A4                    	rep	movsb
 30275                                  
 30276                                  Exec_Read_Header:
 30277                                  	; We read in the program header into the above data area and
 30278                                  	; determine where in this memory the image will be located.
 30279                                  
 30280                                  	;Context DS
 30281 000063E6 16                      	push	ss
 30282 000063E7 1F                      	pop	ds
 30283                                  	;mov	cx,26
 30284 000063E8 B91A00                  	mov	CX,Exec_Header_Len	; header size
 30285 000063EB BA[5C14]                	mov	DX,exec_signature
 30286 000063EE 06                      	push	ES
 30287 000063EF 1E                      	push	DS
 30288 000063F0 E87803                  	call	ExecRead
 30289 000063F3 1F                      	pop	DS
 30290 000063F4 07                      	pop	ES
 30291 000063F5 7250                    	jc	short Exec_Bad_File
 30292                                  
 30293 000063F7 09C0                    	or	AX,AX
 30294 000063F9 744C                    	jz	short Exec_Bad_File
 30295                                  	;cmp	ax,26
 30296 000063FB 83F81A                  	cmp	AX,Exec_Header_Len	; did we read the right number?
 30297 000063FE 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 30298                                  
 30299 00006400 F706[6814]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 30300 00006406 7504                    	jnz	short Exec_Check_Sig
 30301                                  
 30302                                  	;mov	byte [bp-6],0FFh
 30303 00006408 C646FAFF                	mov	Exec_Load_High,-1
 30304                                  
 30305                                  Exec_Check_Sig:
 30306 0000640C A1[5C14]                	mov	AX,[exec_signature]	; rms;NSS
 30307                                  	;cmp	ax,5A4Dh ; 'MZ'
 30308 0000640F 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 30309 00006412 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 30310                                  
 30311                                  	;cmp	ax,4D5Ah ; 'ZM'
 30312 00006414 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 30313 00006417 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 30314                                  
 30315                                  Exec_Com_Filej:
 30316 00006419 E9A201                  	jmp	Exec_Com_File
 30317                                  
 30318                                  	; We have the program header... determine memory requirements
 30319                                  
 30320                                  Exec_Save_Start:
 30321 0000641C A1[6014]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 30322 0000641F B105                    	mov	CL,5			; convert to paragraphs
 30323 00006421 D3E0                    	shl	AX,CL
 30324 00006423 2B06[6414]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs;rms;NSS
 30325                                  	;mov	[bp-12],ax
 30326 00006427 8946F4                  	mov	Exec_Res_Len_Para,AX
 30327                                  
 30328                                  		; Do we need to allocate memory?
 30329                                  		; Yes if function is not load-overlay
 30330                                  
 30331                                  	;test	byte [bp-5],2
 30332 0000642A F646FB02                	test	Exec_Func,exec_func_overlay
 30333 0000642E 742C                    	jz	short Exec_Allocate	; allocation of space
 30334                                  
 30335                                  		; get load address from block
 30336                                  
 30337                                  	;les	di,[bp-4]
 30338 00006430 C47EFC                  	les	DI,Exec_Blk
 30339 00006433 268B05                  	mov	ax,[es:di]
 30340                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 30341                                  	;mov	[bp-20],ax
 30342 00006436 8946EC                  	mov	Exec_DMA,AX
 30343 00006439 268B4502                	mov	AX,[ES:DI+EXEC3.reloc_fac]
 30344                                  	;mov	[bp-10],ax
 30345 0000643D 8946F6                  	mov	Exec_Rel_Fac,AX
 30346                                  	; 10/08/2018
 30347 00006440 E9AB00                  	jmp	Exec_Find_Res		; M000
 30348                                  
 30349                                  Exec_No_Mem:
 30350                                  	;mov	al,8
 30351 00006443 B008                    	mov	AL,error_not_enough_memory
 30352 00006445 EB02                    	jmp	short Exec_Bomb
 30353                                  
 30354                                  Exec_Bad_File:
 30355                                  	;mov	al,0Bh
 30356 00006447 B00B                    	mov	AL,error_bad_format
 30357                                  
 30358                                  Exec_Bomb:
 30359                                  	;mov	bx,[bp-8]
 30360 00006449 8B5EF8                  	mov	BX,Exec_FH
 30361 0000644C E82B03                  	call	Exec_Dealloc
 30362                                  	;LeaveCrit CritMem
 30363 0000644F E8C5BC                  	call	LcritMem
 30364                                  	;save	<AX,BP>
 30365 00006452 50                      	push	ax
 30366 00006453 55                      	push	bp
 30367                                  	;invoke	$CLOSE
 30368 00006454 E8B00C                  	call	_$CLOSE
 30369                                  	;restore <BP,AX>
 30370 00006457 5D                      	pop	bp
 30371 00006458 58                      	pop	ax
 30372 00006459 E9DDFE                  	jmp	Exec_Ret_Err
 30373                                  
 30374                                  Exec_Chk_Mem: 
 30375                                  	; MSDOS 6.0    			; M063 - Start
 30376                                  	;mov	al,[AllocMethod]	; save current alloc method in ax
 30377                                  	;mov	bl,[AllocMsave]
 30378                                  	;mov	[AllocMethod], bl	; restore original allocmethod
 30379                                  	;test	bl,HIGH_ONLY 		; Q: was the HIGH_ONLY bit already set
 30380                                  	;jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 30381                                  	;				; N: continue
 30382                                  	;
 30383                                  	;test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 30384                                  	;jz	short Exec_No_Mem	; N: no memory 
 30385                                  	;mov	ax,[save_AX]		; Y: restore ax and
 30386                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 30387                                  	;				; M063 - End
 30388                                  
 30389                                  Exec_Allocate:
 30390                                  	; 09/09/2018
 30391                                  
 30392                                  	; M005 - START
 30393                                  	; If there is no STACK segment for this exe file and if this
 30394                                  	; not an overlay and the resident size is less than 64K - 
 30395                                  	; 256 bytes we shall add 256bytes bytes to the programs 
 30396                                  	; resident memory requirement and set Exec_SP to this value.
 30397                                  
 30398                                  	; MSDOS 6.0
 30399 0000645C C646E300                	mov	Exec_NoStack,0
 30400 00006460 833E[6A14]00            	cmp	word [exec_SS],0	; Q: is there a stack seg
 30401 00006465 7512                    	jne	short ea1		; Y: continue normal processing
 30402 00006467 833E[6C14]00            	cmp	word [exec_SP],0	; Q: is there a stack ptr
 30403 0000646C 750B                    	jne	short ea1		; Y: continue normal processing
 30404                                  
 30405 0000646E FE46E3                  	inc	Exec_NoStack
 30406 00006471 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 30407 00006474 7303                    	jae	short ea1		; Y: don't set Exec_SP
 30408                                  
 30409 00006476 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 30410                                  ea1:
 30411                                  	; M005 - END
 30412                                  
 30413                                  	; MSDOS 6.0			; M000 - start
 30414                                  	;test	byte [AllocMethod],HIGH_FIRST
 30415                                  	;				; Q: is the alloc strat high_first
 30416                                  	;jz	short Exec_Norm_Alloc	; N: normal allocate
 30417                                  	;				; Y: set high_only bit
 30418                                  	;or	byte [AllocMethod],HIGH_ONLY
 30419                                  	;				; M000 - end
 30420                                  
 30421                                  ;Exec_Norm_Alloc:
 30422                                  	;mov	[save_ax],ax		; M000: save ax for possible 2nd  
 30423                                  					; M000: attempt at allocating memory
 30424                                  	;;push	ax			; M000
 30425                                  
 30426                                  	; MSDOS 3.3
 30427 00006479 50                      	push	ax	
 30428                                  
 30429 0000647A BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 30430 0000647D 1E                      	push	DS
 30431                                  	;invoke	$Alloc			; should have carry set and BX has max
 30432 0000647E E81204                  	call	_$ALLOC
 30433 00006481 1F                      	pop	DS
 30434                                  
 30435                                  	; MSDOS 6.0
 30436                                  	;mov	ax,[save_ax]		; M000
 30437                                  	;;pop	AX			; M000
 30438                                  
 30439                                  	; MSDOS 3.3
 30440 00006482 58                      	pop	ax
 30441                                  
 30442 00006483 83C010                  	add	AX,10h			; room for header
 30443 00006486 83FB11                  	cmp	BX,11h			; enough room for a header
 30444                                  	; MSDOS 6.0
 30445                                  	;jb	short Exec_Chk_Mem	; M000
 30446                                  	; MSDOS 3.3	
 30447 00006489 72B8                    	jb	short Exec_No_Mem
 30448                                  
 30449 0000648B 39D8                    	cmp	AX,BX			; is there enough for bare image?
 30450                                  	; MSDOS 6.0
 30451                                  	;ja	short Exec_Chk_Mem	; M000
 30452                                  	; MSDOS 3.3
 30453 0000648D 77B4                    	ja	short Exec_No_Mem
 30454                                  
 30455                                  	;test	byte [bp-6],0FFh
 30456 0000648F F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 30457 00006493 7518                    	jnz	short Exec_BX_Max	; use max
 30458                                  
 30459                                  	; 09/09/2018
 30460                                  
 30461 00006495 0306[6614]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 30462                                  	; MSDOS 6.0
 30463                                  	;jc	short Exec_Chk_Mem		; M000
 30464                                  	; MSDOS 3.3
 30465 00006499 72A8                    	jc	short Exec_No_Mem
 30466                                  
 30467 0000649B 39D8                    	cmp	AX,BX			; enough space?
 30468                                  	; MSDOS 6.0
 30469                                  	;ja	short Exec_Chk_Mem	; M000: nope...	
 30470                                  	; MSDOS 3.3
 30471 0000649D 77A4                    	ja	short Exec_No_Mem
 30472                                  
 30473 0000649F 2B06[6614]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 30474 000064A3 0306[6814]              	add	AX,[exec_max_BSS] 	; go for the MAX
 30475 000064A7 7204                    	jc	short Exec_BX_Max
 30476                                  
 30477 000064A9 39D8                    	cmp	AX,BX
 30478 000064AB 7602                    	jbe	short Exec_Got_Block
 30479                                  
 30480                                  Exec_BX_Max:
 30481 000064AD 89D8                    	mov	AX,BX
 30482                                  
 30483                                  Exec_Got_Block:
 30484                                  	; 03/08/2018 - Retro DOS v3.0
 30485                                  
 30486 000064AF 1E                      	push	DS
 30487 000064B0 89C3                    	mov	BX,AX
 30488                                  	;mov	[bp-16],bx
 30489 000064B2 895EF0                  	mov	Exec_Size,BX
 30490                                  	;invoke	$Alloc			; get the space
 30491 000064B5 E8DB03                  	call	_$ALLOC
 30492 000064B8 1F                      	pop	DS
 30493                                  	; MSDOS 6.0
 30494                                  	;jc	short Exec_Chk_Mem	; M000
 30495                                  	; MSDOS 3.3
 30496 000064B9 7288                    	jc	short Exec_No_Mem
 30497                                  
 30498                                  	; MSDOS 6.0
 30499                                  	;mov	cl,[AllocMsave]		; M063: 
 30500                                  	;mov	[AllocMethod],cl	; M063: restore allocmethod
 30501                                  
 30502                                  ;M029; Begin changes
 30503                                  ; This code does special handling for programs with no stack segment. If so,
 30504                                  ;check if the current block is larger than 64K. If so, we do not modify
 30505                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 30506                                  ;case Exec_SS is not changed.
 30507                                  ;
 30508                                  	; MSDOS 6.0
 30509 000064BB 807EE300                	cmp	Exec_NoStack,0
 30510                                  	;je	@f
 30511 000064BF 7412                    	je	short ea2
 30512                                  
 30513 000064C1 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 30514                                  	;jae	@f			; Y: Exec_SP = 0
 30515 000064C5 730C                    	jae	short ea2
 30516                                  ;
 30517                                  ;Make Exec_SP point at the top of the memory block
 30518                                  ;
 30519 000064C7 B104                    	mov	cl,4
 30520 000064C9 D3E3                    	shl	bx,cl			; get byte offset
 30521 000064CB 81EB0001                	sub	bx,100h			; take care of PSP
 30522 000064CF 891E[6C14]              	mov	[exec_SP],bx		; Exec_SP = top of block
 30523                                  ea2:
 30524                                  ;@@:
 30525                                  ;
 30526                                  ;M029; end changes
 30527                                  ;
 30528                                  	;mov	[bp-18],ax
 30529 000064D3 8946EE                  	mov	Exec_Load_Block,AX
 30530 000064D6 83C010                  	add	AX,10h
 30531                                  	;test	byte [bp-6],0FFh
 30532 000064D9 F646FAFF                	test	Exec_Load_High,-1
 30533 000064DD 7409                    	jz	short Exec_Use_AX	; use ax for load info
 30534                                  
 30535                                  	;add	ax,[bp-16]
 30536 000064DF 0346F0                  	add	AX,Exec_Size		; go to end
 30537                                  	;sub	ax,[bp-12]
 30538 000064E2 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 30539 000064E5 83E810                  	sub	AX,10h			; drop off pdb
 30540                                  
 30541                                  Exec_Use_AX:
 30542                                  	;mov	[bp-10],ax
 30543 000064E8 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 30544                                  	;mov	[bp-20],ax
 30545 000064EB 8946EC                  	mov	Exec_DMA,AX		; beginning of dma
 30546                                  
 30547                                  	; Determine the location in the file of the beginning of
 30548                                  	; the resident
 30549                                  
 30550                                  Exec_Find_Res:
 30551                                  	; MSDOS 6.0
 30552                                  	;mov	dx,[bp-20]
 30553 000064EE 8B56EC                  	mov	DX,Exec_DMA
 30554                                  	;mov	[bp-28],dx
 30555 000064F1 8956E4                  	mov	Exec_DMA_Save,DX
 30556                                  
 30557                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30558 000064F4 8B16[6414]              	mov	DX,[exec_par_dir]
 30559 000064F8 52                      	push	DX
 30560 000064F9 B104                    	mov	CL,4
 30561 000064FB D3E2                    	shl	DX,CL			; low word of location
 30562 000064FD 58                      	pop	AX
 30563 000064FE B10C                    	mov	CL,12
 30564 00006500 D3E8                    	shr	AX,CL			; high word of location
 30565 00006502 89C1                    	mov	CX,AX			; CX <- high
 30566                                  
 30567                                  		; Read in the resident image (first, seek to it)
 30568                                  	;mov	bx,[bp-8]
 30569 00006504 8B5EF8                  	mov	BX,Exec_FH
 30570 00006507 1E                      	push	DS
 30571 00006508 30C0                    	xor	AL,AL
 30572                                  	;invoke	$Lseek			; Seek to resident
 30573 0000650A E86C0D                  	call	_$LSEEK
 30574 0000650D 1F                      	pop	DS
 30575 0000650E 7303                    	jnc	short Exec_Big_Read
 30576                                  
 30577 00006510 E936FF                  	jmp	Exec_Bomb
 30578                                  
 30579                                  Exec_Big_Read:				; Read resident into memory
 30580                                  	;mov	bx,[bp-12]
 30581 00006513 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 30582 00006516 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 30583 0000651A 7203                    	jb	short Exec_Read_OK
 30584                                  
 30585 0000651C BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 30586                                  
 30587                                  Exec_Read_OK:
 30588                                  	;sub	[bp-12],bx
 30589 0000651F 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 30590 00006522 53                      	push	BX
 30591 00006523 B104                    	mov	CL,4
 30592 00006525 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 30593 00006527 89D9                    	mov	CX,BX			; Count in correct register
 30594 00006529 1E                      	push	DS
 30595                                  	;mov	ds,[bp-20]
 30596 0000652A 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 30597                                  
 30598 0000652D 31D2                    	xor	DX,DX
 30599 0000652F 51                      	push	CX			; Save our count
 30600 00006530 E83802                  	call	ExecRead
 30601 00006533 59                      	pop	CX			; Get old count to verify
 30602 00006534 1F                      	pop	DS
 30603 00006535 7248                    	jc	short Exec_Bad_FileJ
 30604                                  
 30605 00006537 39C1                    	cmp	CX,AX			; Did we read enough?
 30606 00006539 5B                      	pop	BX			; Get paragraph count back
 30607 0000653A 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 30608                                  
 30609                                  	; The read did not match the request. If we are off by 512
 30610                                  	; bytes or more then the header lied and we have an error.
 30611                                  
 30612 0000653C 29C1                    	sub	CX,AX
 30613 0000653E 81F90002                	cmp	CX,512
 30614 00006542 733B                    	jae	short Exec_Bad_FileJ
 30615                                  
 30616                                  	; We've read in CX bytes... bump DTA location
 30617                                  
 30618                                  ExecCheckEnd:
 30619                                  	;add	[bp-20],bx
 30620 00006544 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 30621                                  	;test	word [bp-12],0FFFFh
 30622 00006547 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 30623 0000654C 75C5                    	jnz	short Exec_Big_Read
 30624                                  
 30625                                  	; The image has now been read in. We must perform relocation
 30626                                  	; to the current location.
 30627                                  
 30628                                  exec_do_reloc:
 30629                                  	;mov	cx,[bp-10]
 30630 0000654E 8B4EF6                  	mov	CX,Exec_Rel_Fac
 30631 00006551 A1[6A14]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 30632 00006554 01C8                    	add	AX,CX			; and relocate him
 30633 00006556 A3[5614]                	mov	[exec_init_SS],AX 	; rms;NSS
 30634                                  
 30635 00006559 A1[6C14]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 30636 0000655C A3[5414]                	mov	[exec_init_SP],AX 	; rms;NSS
 30637                                  
 30638 0000655F C406[7014]              	les	AX,[exec_IP]		; rms;NSS
 30639 00006563 A3[5814]                	mov	[exec_init_IP],AX 	; rms;NSS
 30640 00006566 8CC0                    	mov	AX,ES			; rms;NSS
 30641 00006568 01C8                    	add	AX,CX			; relocated...
 30642 0000656A A3[5A14]                	mov	[exec_init_CS],AX 	; rms;NSS
 30643                                  
 30644 0000656D 31C9                    	xor	CX,CX
 30645 0000656F 8B16[7414]              	mov	DX,[exec_rle_table]	; rms;NSS
 30646                                  	;mov	bx,[bp-8]
 30647 00006573 8B5EF8                  	mov	BX,Exec_FH
 30648 00006576 1E                      	push	DS
 30649 00006577 31C0                    	xor	AX,AX
 30650                                  	;invoke	$Lseek
 30651 00006579 E8FD0C                  	call	_$LSEEK
 30652 0000657C 1F                      	pop	DS
 30653 0000657D 7303                    	jnc	short exec_get_entries
 30654                                  
 30655                                  Exec_Bad_FileJ:
 30656 0000657F E9C5FE                  	jmp	Exec_Bad_File
 30657                                  
 30658                                  exec_get_entries:
 30659 00006582 8B16[6214]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 30660                                  
 30661                                  exec_read_reloc:
 30662 00006586 52                      	push	DX
 30663                                  	;mov	dx,OPENBUF
 30664 00006587 BA[8203]                	mov	DX,Exec_Internal_Buffer
 30665                                  	;mov	cx,388
 30666 0000658A B98401                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (390>>2)<<2
 30667 0000658D 1E                      	push	DS
 30668 0000658E E8DA01                  	call	ExecRead
 30669 00006591 07                      	pop	ES
 30670 00006592 5A                      	pop	DX
 30671 00006593 72EA                    	jc	short Exec_Bad_FileJ
 30672                                  
 30673                                  	;mov	cx,97
 30674 00006595 B96100                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (390>>2)
 30675                                  					; Pointer to byte location in header
 30676                                  	;mov	di,OPENBUF
 30677 00006598 BF[8203]                	mov	DI,Exec_Internal_Buffer
 30678                                  	;mov	si,[bp-10]
 30679 0000659B 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 30680                                  
 30681                                  exec_reloc_one:
 30682 0000659E 09D2                    	or	DX,DX			; Any more entries?
 30683 000065A0 7416                    	jz	short Exec_Set_PDBJ
 30684                                  
 30685                                  exec_get_addr:
 30686 000065A2 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 30687 000065A5 8CD8                    	mov	AX,DS			; Relocate address of item
 30688                                  
 30689                                  	; MSDOS 6.0
 30690                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 30691                                  	;add	ax,[bp-28]
 30692 000065A7 0346E4                  	add	AX,Exec_DMA_Save
 30693                                  
 30694 000065AA 8ED8                    	mov	DS,AX
 30695 000065AC 0137                    	add	[BX],SI
 30696 000065AE 83C704                  	add	DI,4
 30697 000065B1 4A                      	dec	DX
 30698 000065B2 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 30699                                  
 30700                                  	; We've exhausted a single buffer's worth. Read in the next
 30701                                  	; piece of the relocation table.
 30702                                  
 30703 000065B4 06                      	push	ES
 30704 000065B5 1F                      	pop	DS
 30705 000065B6 EBCE                    	jmp	short exec_read_reloc
 30706                                  
 30707                                  Exec_Set_PDBJ:
 30708                                  
 30709                                  	; MSDOS 6.0
 30710                                  	;
 30711                                  	; We now determine if this is a buggy exe packed file and if 
 30712                                  	; so we patch in the right code. Note that fixexepatch will
 30713                                  	; point to a ret if dos loads low. The load segment as 
 30714                                  	; determined above will be in exec_dma_save
 30715                                  	;
 30716                                  	;push	es
 30717                                  	;push	ax			; M030
 30718                                  	;push	cx			; M030
 30719                                  	;mov	es,Exec_DMA_Save
 30720                                  	;mov	ax,[exec_init_CS]	; M030
 30721                                  	;mov	cx,[exec_init_IP]	; M030
 30722                                  	;call	word [fixexepatch]
 30723                                  	;call	word [Rational386PatchPtr]
 30724                                  	;pop	cx			; M030
 30725                                  	;pop	ax			; M030
 30726                                  	;pop	es
 30727                                  
 30728 000065B8 E99D00                  	jmp	Exec_Set_PDB
 30729                                  
 30730                                  Exec_No_Memj:
 30731 000065BB E985FE                  	jmp	Exec_No_Mem
 30732                                  
 30733                                  	; we have a .COM file. First, determine if we are merely
 30734                                  	; loading an overlay.
 30735                                  
 30736                                  Exec_Com_File:
 30737                                  	;test	byte [bp-5],2
 30738 000065BE F646FB02                	test	Exec_Func,exec_func_overlay
 30739 000065C2 740C                    	jz	short Exec_Alloc_Com_File
 30740                                  	;lds	si,[bp-4]
 30741 000065C4 C576FC                  	lds	SI,Exec_Blk		; get arg block
 30742 000065C7 AD                      	lodsw				; get load address
 30743                                  	;mov	[bp-20],ax
 30744 000065C8 8946EC                  	mov	Exec_DMA,AX
 30745 000065CB B8FFFF                  	mov	AX,0FFFFh
 30746 000065CE EB34                    	jmp	SHORT Exec_Read_Block	; read it all!
 30747                                  
 30748                                  Exec_Chk_Com_Mem:			
 30749                                  	; MSDOS 6.0	     		; M063 - Start
 30750                                  	;mov	al,[AllocMethod]	; save current alloc method in ax
 30751                                  	;mov	bl,[AllocMsave]
 30752                                  	;mov	[AllocMethod],bl	; restore original allocmethod
 30753                                  	;test	bl,HIGH_ONLY 		; Q: was the HIGH_ONLY bit already set
 30754                                  	;jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 30755                                  	;				; N: continue
 30756                                  	;
 30757                                  	;test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 30758                                  	;jz	short Exec_No_Memj	; N: no memory 
 30759                                  	;
 30760                                  	;mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 30761                                  	;xor	bx,bx			; M047: bx => free arena
 30762                                  	;call	ChangeOwner		; M047: free this block
 30763                                  	;
 30764                                  	;jmp	short Exec_Norm_Com_Alloc
 30765                                  	;				; M063 - End
 30766                                  	
 30767                                  	; We must allocate the max possible size block (ick!)
 30768                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 30769                                  	; size of block.
 30770                                  
 30771                                  Exec_Alloc_Com_File:
 30772                                  	; MSDOS 6.0			; M000 -start
 30773                                  	;test	byte [AllocMethod],HIGH_FIRST
 30774                                  	;				; Q: is the alloc strat high_first
 30775                                  	;jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 30776                                  	;				; Y: set high_only bit
 30777                                  	;or	byte [AllocMethod],HIGH_ONLY
 30778                                  	;				; M000 - end
 30779                                  ;Exec_Norm_Com_Alloc:			; M000
 30780                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30781 000065D0 BBFFFF                  	mov	BX,0FFFFh
 30782                                  	;invoke	$Alloc			; largest piece available as error
 30783 000065D3 E8BD02                  	call	_$ALLOC
 30784 000065D6 09DB                    	or	BX,BX
 30785                                  	; MSDOS 6.0
 30786                                  	;jz	short Exec_Chk_Com_Mem	; M000
 30787                                  	; MSDOS 3.3
 30788 000065D8 74E1                    	jz	short Exec_No_Memj
 30789                                  
 30790                                  	;mov	[bp-16],bx
 30791 000065DA 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 30792 000065DD 53                      	push	BX
 30793                                  	;invoke	$ALLOC			; largest piece available as error
 30794 000065DE E8B202                  	call	_$ALLOC
 30795 000065E1 5B                      	pop	BX			; get size of block...
 30796                                  	;mov	[bp-18],ax
 30797 000065E2 8946EE                  	mov	Exec_Load_Block,AX
 30798 000065E5 83C010                  	add	AX,10h			; increment for header
 30799                                  	;mov	[bp-20],ax
 30800 000065E8 8946EC                  	mov	Exec_DMA,AX
 30801 000065EB 31C0                    	xor	AX,AX			; presume 64K read...
 30802 000065ED 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 30803 000065F1 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 30804                                  
 30805 000065F3 89D8                    	mov	AX,BX			; convert size to bytes
 30806 000065F5 B104                    	mov	CL,4
 30807 000065F7 D3E0                    	shl	AX,CL
 30808                                  	; MSDOS 6.0
 30809 000065F9 3D0002                          cmp     AX,200h                 ; enough memory for PSP and stack?
 30810                                  ;	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 30811                                  ;	;jbe	short Exec_No_Memj	; M000: jump if not
 30812                                  	; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 30813                                  	;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 30814 000065FC 76BD                    	jbe	short Exec_No_Memj	; M000: jump if not
 30815                                  
 30816                                  					; M047: size of the block is < 64K
 30817 000065FE 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 30818                                  
 30819                                  Exec_Read_Com:
 30820                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30821 00006601 2D0001                  	sub	AX,100h 		; remember size of psp
 30822                                  
 30823                                  Exec_Read_Block:
 30824 00006604 50                      	push	AX			; save number to read
 30825                                  	;mov	bx,[bp-8]
 30826 00006605 8B5EF8                  	mov	BX,Exec_FH		; of com file
 30827 00006608 31C9                    	xor	CX,CX			; but seek to 0:0
 30828 0000660A 89CA                    	mov	DX,CX
 30829 0000660C 31C0                    	xor	AX,AX			; seek relative to beginning
 30830                                  	;invoke	$Lseek			; back to beginning of file
 30831 0000660E E8680C                  	call	_$LSEEK
 30832 00006611 59                      	pop	CX			; number to read
 30833                                  	;mov	ds,[bp-20]
 30834 00006612 8E5EEC                  	mov	DS,Exec_DMA
 30835 00006615 31D2                    	xor	DX,DX
 30836 00006617 51                      	push	CX
 30837 00006618 E85001                  	call	ExecRead
 30838 0000661B 5E                      	pop	SI			; get number of bytes to read
 30839 0000661C 7303                    	jnc	short OkRead
 30840 0000661E E926FE                  	jmp	Exec_Bad_File
 30841                                  
 30842                                  	; 10/09/2018
 30843                                  OkRead:
 30844 00006621 39F0                    	cmp	AX,SI			; did we read them all?
 30845                                  	; MSDOS 6.0
 30846                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 30847                                  	; MSDOS 3.3
 30848 00006623 7496                    	jz	short Exec_No_Memj	; M00: exactly the wrong number...
 30849                                  	
 30850                                  	; MSDOS 6.0
 30851                                  	;mov	bl,[AllocMsave]		; M063
 30852                                  	;mov	[AllocMethod],bl	; M063: restore allocmethod
 30853                                  
 30854                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30855                                  	;test	byte [bp-5],2
 30856 00006625 F646FB02                	test	Exec_Func,exec_func_overlay
 30857 00006629 752D                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 30858                                  
 30859                                  	;mov	ax,[bp-20]
 30860 0000662B 8B46EC                  	mov	AX,Exec_DMA
 30861 0000662E 83E810                  	sub	AX,10h
 30862 00006631 36A3[5A14]              	mov	[SS:exec_init_CS],AX
 30863 00006635 36C706[5814]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 30864                                  
 30865                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 30866                                  	; of 0 on stack.
 30867                                  
 30868 0000663C 81C6FE00                	add	SI,0FEh 		; make room for stack
 30869                                  
 30870                                  	; MSDOS 6.0
 30871 00006640 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 30872 00006643 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 30873 00006645 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 30874                                  
 30875                                  Exec_St_Ok:
 30876                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30877 00006649 368936[5414]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 30878 0000664E 36A3[5614]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 30879 00006652 8ED8                    	mov	DS,AX
 30880 00006654 C7040000                	mov	WORD [SI],0		; 0 for return
 30881                                  
 30882                                  	; MSDOS 6.0
 30883                                  	;
 30884                                  	; M068
 30885                                  	;
 30886                                  	; We now determine if this is a Copy Protected App. If so the 
 30887                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 30888                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 30889                                  
 30890                                  	;call	word ptr [ChkCopyProt]	
 30891                                  
 30892                                  Exec_Set_PDB:
 30893                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30894                                  	;mov	bx,[bp-8]
 30895 00006658 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 30896 0000665B E81C01                  	call	Exec_Dealloc
 30897 0000665E 55                      	push	BP
 30898                                  	;invoke	$Close			; release the jfn
 30899 0000665F E8A50A                  	call	_$CLOSE
 30900 00006662 5D                      	pop	BP
 30901 00006663 E81F01                  	call	Exec_Alloc
 30902                                  	;test	byte [bp-5],2
 30903 00006666 F646FB02                	test	Exec_Func,exec_func_overlay
 30904 0000666A 7406                    	jz	short Exec_Build_Header
 30905                                  
 30906                                  	; MSDOS 6.0
 30907                                  	;call	Scan_Execname
 30908                                  	;call	Scan_Special_Entries
 30909                                  	;
 30910                                  ;SR;
 30911                                  ;The current lie strategy uses the PSP to store the lie version. However,
 30912                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 30913                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 30914                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 30915                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 30916                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 30917                                  ;issues the version check, it gets the lie version until the next overlay
 30918                                  ;call is issued.
 30919                                  ;
 30920                                  	;cmp	DriverLoad,0		;was Sysinit processing done?
 30921                                  	;je	norm_ovl		;yes, no special handling
 30922                                  	;push	si
 30923                                  	;push	es
 30924                                  	;les	si,BiosDataPtr		;get ptr to BIOS data block
 30925                                  	;cmp	byte ptr es:[si],0		;in Sysinit?
 30926                                  	;je	sysinit_done		;no, Sysinit is finished
 30927                                  	;
 30928                                  	;mov	es,CurrentPDB		;es = current PSP (Sysinit PSP)
 30929                                  	;push	Special_Version
 30930                                  	;pop	es:PDB_Version		;store lie version in Sysinit PSP
 30931                                  		;;; PDB.VERSION
 30932                                  	;jmp	short setver_done
 30933                                  ;sysinit_done:
 30934                                  	;mov	DriverLoad,0		;Sysinit done,special handling off
 30935                                  ;setver_done:
 30936                                  	;pop	es
 30937                                  	;pop	si
 30938                                  ;norm_ovl:
 30939                                  
 30940                                  	;leave
 30941 0000666C 89EC                    	mov	sp,bp		
 30942 0000666E 5D                      	pop	bp
 30943                                  
 30944                                  	;transfer SYS_RET_OK		; overlay load -> done
 30945 0000666F E929B1                  	jmp	SYS_RET_OK
 30946                                  
 30947                                  Exec_Build_Header:
 30948                                  	;mov	dx,[bp-18]
 30949 00006672 8B56EE                  	mov	DX,Exec_Load_Block
 30950                                  					; assign the space to the process
 30951                                  	;mov	si,1
 30952 00006675 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 30953                                  	;mov	ax,[bp-14]
 30954 00006678 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 30955 0000667B 09C0                    	or	AX,AX
 30956 0000667D 7405                    	jz	short No_Owner		; no environment
 30957                                  
 30958 0000667F 48                      	dec	AX			; point to header
 30959 00006680 8ED8                    	mov	DS,AX
 30960 00006682 8914                    	mov	[SI],DX 		; assign ownership
 30961                                  
 30962                                  No_Owner:
 30963                                  	;mov	ax,[bp-18]
 30964 00006684 8B46EE                  	mov	AX,Exec_Load_Block	; get load block pointer
 30965 00006687 48                      	dec	AX
 30966 00006688 8ED8                    	mov	DS,AX			; point to header
 30967 0000668A 8914                    	mov	[SI],DX 		; assign ownership
 30968                                  
 30969                                  	; MSDOS 6.0
 30970                                  	;push	DS			;AN000;MS. make ES=DS
 30971                                  	;pop	ES			;AN000;MS.
 30972                                  	;mov	DI,Arena_Name		;AN000;MS. ES:DI points to destination
 30973                                  	;call	Scan_Execname		;AN007;MS. parse execname
 30974                                  	;				;	   ds:si->name, cx=name length
 30975                                  	;push	CX			;AN007;;MS. save for fake version
 30976                                  	;push	SI			;AN007;;MS. save for fake version
 30977                                  	;
 30978                                  ;MoveName:				;AN000;
 30979                                  	;lodsb				;AN000;;MS. get char
 30980                                  	;cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 30981                                  	;jz	Mem_Done		;AN000;;MS. no, move to header
 30982                                  	;				;AN000;
 30983                                  	;stosb				;AN000;;MS. move char
 30984                                  	;				; MSKK bug fix - limit length copied
 30985                                  	;cmp	di,16			; end of memory arena block?
 30986                                  	;jae	mem_done		; jump if so
 30987                                  	;
 30988                                  	;loop	movename		;AN000;;MS. continue
 30989                                  ;Mem_Done:				;AN000;
 30990                                  	;xor	AL,AL			;AN000;;MS. make ASCIIZ
 30991                                  	;cmp	DI,SIZE ARENA		;AN000;MS. if not all filled
 30992                                  	;jae	Fill8			;AN000;MS.
 30993                                  	;
 30994                                  	;stosb				;AN000;MS.
 30995                                  	;
 30996                                  ;Fill8:					;AN000;
 30997                                  	;pop	SI			;AN007;MS. ds:si -> file name
 30998                                  	;pop	CX			;AN007;MS.
 30999                                  	;
 31000                                  	;call	Scan_Special_Entries	;AN007;MS.
 31001                                  
 31002                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31003 0000668C 52                      	push	DX
 31004                                  	;mov	si,[bp-16]
 31005 0000668D 8B76F0                  	mov	SI,Exec_Size
 31006 00006690 01D6                    	add	SI,DX
 31007                                  	;Invoke	$Dup_PDB		; ES is now PDB
 31008 00006692 E859B8                  	call	_$DUP_PDB
 31009 00006695 5A                      	pop	DX
 31010                                  
 31011                                  	;push	word [bp-14]
 31012 00006696 FF76F2                  	push	Exec_Environ
 31013                                  	;pop	WORD [ES:2Ch]
 31014 00006699 268F062C00              	pop	word [ES:PDB.ENVIRON]
 31015                                  
 31016                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 31017                                  					; version number in PSP
 31018                                   	;push	word [Special_Version]	; Set the DOS version number to
 31019                                  	;pop	word [ES:PDB_Version]	; to be used for this application
 31020                                  		; PDB.VERSION
 31021                                  
 31022                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 31023                                  	;lds	si,[bp-4]
 31024 0000669E C576FC                  	lds	SI,Exec_Blk		; get the block
 31025 000066A1 1E                      	push	DS			; save its location
 31026 000066A2 56                      	push	SI
 31027                                  	;lds	si, [si+6]
 31028 000066A3 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 31029                                  
 31030                                  	; DS points to user space 5C FCB
 31031                                  
 31032 000066A6 B90C00                  	mov	CX,12			; copy drive, name and ext
 31033 000066A9 51                      	push	CX
 31034 000066AA BF5C00                  	mov	DI,5Ch
 31035 000066AD 8A1C                    	mov	BL,[SI]
 31036 000066AF F3A4                    	rep	movsb
 31037                                  
 31038                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 31039                                  
 31040 000066B1 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 31041 000066B3 AB                      	stosw
 31042 000066B4 AB                      	stosw
 31043                                  
 31044                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 31045                                  
 31046 000066B5 59                      	pop	CX
 31047 000066B6 5E                      	pop	SI			; get block
 31048 000066B7 1F                      	pop	DS
 31049 000066B8 1E                      	push	DS			; save (again)
 31050 000066B9 56                      	push	SI
 31051                                  	;lds	si,[si+0Ah]
 31052 000066BA C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 31053                                  
 31054                                  	; DS points to user space 6C FCB
 31055                                  
 31056 000066BD 8A3C                    	mov	BH,[SI] 		; do same as above
 31057 000066BF F3A4                    	rep	movsb
 31058 000066C1 AB                      	stosw
 31059 000066C2 AB                      	stosw
 31060 000066C3 5E                      	pop	SI			; get block (last time)
 31061 000066C4 1F                      	pop	DS
 31062                                  	;ld	si,[si+2]
 31063 000066C5 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 31064                                  
 31065                                  	; DS points to user space 80 command line
 31066                                  
 31067 000066C8 80C980                  	or	CL,80h
 31068 000066CB 89CF                    	mov	DI,CX
 31069 000066CD F3A4                    	rep	movsb			; Wham!
 31070                                  
 31071                                  	; Process BX into default AX (validity of drive specs on args).
 31072                                  	; We no longer care about DS:SI.
 31073                                  
 31074 000066CF FEC9                    	dec	CL			; get 0FFh in CL
 31075 000066D1 88F8                    	mov	AL,BH
 31076 000066D3 30FF                    	xor	BH,BH
 31077                                  	;invoke	GetVisDrv
 31078 000066D5 E8C605                  	call	GetVisDrv
 31079 000066D8 7302                    	jnc	short Exec_BL
 31080                                  
 31081 000066DA 88CF                    	mov	BH,CL
 31082                                  
 31083                                  Exec_BL:
 31084 000066DC 88D8                    	mov	AL,BL
 31085 000066DE 30DB                    	xor	BL,BL
 31086                                  	;invoke	GetVisDrv
 31087 000066E0 E8BB05                  	call	GetVisDrv
 31088 000066E3 7302                    	jnc	short Exec_Set_Return
 31089                                  
 31090 000066E5 88CB                    	mov	BL,CL
 31091                                  
 31092                                  Exec_Set_Return:
 31093                                  	;invoke	Get_User_Stack			; get his return address
 31094 000066E7 E85FAF                  	call	Get_User_Stack
 31095                                  
 31096                                  	;push	word [si+14h]
 31097 000066EA FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 31098                                  	;push	word [si+12h]
 31099 000066ED FF7412                  	push	word [SI+user_env.user_IP]
 31100                                  	;push	word [si+14h]
 31101 000066F0 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 31102                                  	;push	word [si+12h]
 31103 000066F3 FF7412                  	push	word [SI+user_env.user_IP]
 31104                                  	;pop	word [ES:0Ah]
 31105 000066F6 268F060A00              	pop	WORD [ES:PDB.EXIT]
 31106                                  	;pop	word [ES:0Ch]
 31107 000066FB 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 31108                                  
 31109 00006700 31C0                    	xor	AX,AX
 31110 00006702 8ED8                    	mov	DS,AX
 31111                                  					; save them where we can get them
 31112                                  					; later when the child exits.
 31113                                  	;pop	word [88h]
 31114 00006704 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 31115                                  	;pop	word [90h]
 31116 00006708 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 31117                                  
 31118 0000670C 36C706[F802]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 31119 00006713 368E1E[FC02]            	mov	DS,[SS:CurrentPDB]	; SS Override
 31120 00006718 368C1E[FA02]            	mov	[SS:DMAADD+2],DS	; SS Override
 31121                                  
 31122                                  	;test	byte [bp-5],1
 31123 0000671D F646FB01                	test	Exec_Func,exec_func_no_execute
 31124 00006721 7427                    	jz	short exec_go
 31125                                  
 31126 00006723 36C536[5414]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 31127                                  	;les	di,[bp-4]
 31128 00006728 C47EFC                  	les	DI,Exec_Blk		; and block for return
 31129                                  	;mov	[es:di+10h],ds
 31130 0000672B 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 31131                                  
 31132 0000672F 4E                      	dec	SI			; 'push' default AX
 31133 00006730 4E                      	dec	SI
 31134 00006731 891C                    	mov	[SI],BX 		; save default AX reg
 31135                                  	;mov	[es:di+0Eh], si
 31136 00006733 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 31137                                  
 31138 00006737 36C506[5814]            	lds	AX,[SS:exec_init_IP]	; SS Override
 31139                                  	;mov	[es:di+14h],ds
 31140 0000673C 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 31141                                  	;mov	[es:di+12h],ax
 31142 00006740 26894512                	mov	[ES:DI+EXEC1.IP],AX
 31143                                  
 31144                                  	;leave
 31145 00006744 89EC                    	mov	sp,bp
 31146 00006746 5D                      	pop	bp	
 31147                                  
 31148                                  	;transfer SYS_RET_OK
 31149 00006747 E951B0                  	jmp	SYS_RET_OK
 31150                                  
 31151                                  exec_go:
 31152 0000674A 36C536[5814]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 31153 0000674F 36C43E[5414]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 31154                                  
 31155 00006754 8CC0                    	mov	AX,ES
 31156                                  
 31157                                  	; MSDOS 6.0
 31158                                  	;cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 31159                                  	;je	short Xfer_To_User	; N: transfer control to user
 31160                                  
 31161                                  	;push	ds			; Y: control must go to low mem stub
 31162                                  	;	
 31163                                  	;push	cs			;    where we disable a20 and Xfer 
 31164                                  	;pop	ds			;    control to user 
 31165                                  	;
 31166                                  	;or	byte [DOS_FLAG],EXECA20OFF ; M068:
 31167                                  	;				; M004: Set bit to signal int 21
 31168                                  	;				; ah = 25 & ah= 49. See dossym.inc 
 31169                                  	;				; under TAG M003 & M009 for 
 31170                                  	;				; explanation
 31171                                  	;mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 31172                                  	;				; M068: going to be turned OFF.
 31173                                  	;
 31174                                  	;mov	ax,ds			; ax = segment of low mem stub
 31175                                  	;pop	ds
 31176                                  	;
 31177                                  	;push	ax			; ret far into the low mem stub
 31178                                  	;mov	ax,Disa20_Xfer
 31179                                  	;push	ax
 31180                                  	;mov	AX,ES			; restore ax
 31181                                  	;retf
 31182                                  
 31183                                  Xfer_To_User:
 31184                                  	; DS:SI points to entry point
 31185                                  	; AX:DI points to initial stack
 31186                                  	; DX has PDB pointer
 31187                                  	; BX has initial AX value
 31188                                  
 31189 00006756 FA                      	cli
 31190                                  	; 15/08/2018
 31191 00006757 36C606[ED02]00          	mov	BYTE [SS:INDOS],0	; SS Override
 31192                                  
 31193 0000675D 8ED0                    	mov	SS,AX			; set up user's stack
 31194 0000675F 89FC                    	mov	SP,DI			; and SP
 31195 00006761 FB                      	sti
 31196                                  
 31197 00006762 1E                      	push	DS			; fake long call to entry
 31198 00006763 56                      	push	SI
 31199 00006764 8EC2                    	mov	ES,DX			; set up proper seg registers
 31200 00006766 8EDA                    	mov	DS,DX
 31201 00006768 89D8                    	mov	AX,BX			; set up proper AX
 31202                                  
 31203 0000676A CB                      	retf
 31204                                  
 31205                                  ; 04/08/2018 - Retro DOS v3.0
 31206                                  
 31207                                  ;----------------------------------------------------------------------------
 31208                                  ;
 31209                                  ;----------------------------------------------------------------------------
 31210                                  
 31211                                  ExecRead:
 31212 0000676B E80C00                  	CALL	Exec_Dealloc
 31213                                  	;mov	bx,[bp-8]
 31214 0000676E 8B5EF8                  	MOV	bx,Exec_FH
 31215 00006771 55                      	PUSH	BP
 31216 00006772 E8AA0A                  	call	_$READ
 31217 00006775 5D                      	POP	BP
 31218 00006776 E80C00                  	CALL	Exec_Alloc
 31219 00006779 C3                      	retn
 31220                                  
 31221                                  ;----------------------------------------------------------------------------
 31222                                  ;
 31223                                  ;----------------------------------------------------------------------------
 31224                                  
 31225                                  Exec_Dealloc:
 31226 0000677A 53                      	push	BX
 31227                                  	;mov	bx,0
 31228 0000677B 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 31229 0000677D E88FB9                  	call	EcritMem
 31230 00006780 E81000                  	call	ChangeOwners
 31231 00006783 5B                      	pop	BX
 31232 00006784 C3                      	retn
 31233                                  
 31234                                  ;----------------------------------------------------------------------------
 31235                                  ;
 31236                                  ;----------------------------------------------------------------------------
 31237                                  
 31238                                  Exec_Alloc:
 31239 00006785 53                      	push	BX
 31240                                  	;mov	bx,[SS:CurrentPDB]	; SS Override
 31241 00006786 2E8B1E[FC02]            	mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 31242 0000678B E80500                  	call	ChangeOwners
 31243 0000678E E886B9                  	call	LcritMem
 31244 00006791 5B                      	pop	BX
 31245 00006792 C3                      	retn
 31246                                  
 31247                                  ;----------------------------------------------------------------------------
 31248                                  ;
 31249                                  ;----------------------------------------------------------------------------
 31250                                  
 31251                                  ChangeOwners:
 31252 00006793 9C                      	pushf
 31253 00006794 50                      	push	AX
 31254                                  	;mov	ax,[bp-14]
 31255 00006795 8B46F2                  	mov	AX,Exec_Environ
 31256 00006798 E80900                  	call	ChangeOwner
 31257                                  	;mov	ax,[bp-18]
 31258 0000679B 8B46EE                  	mov	AX,Exec_Load_Block
 31259 0000679E E80300                  	call	ChangeOwner
 31260 000067A1 58                      	pop	AX
 31261 000067A2 9D                      	popf
 31262                                  chgown_retn:
 31263 000067A3 C3                      	retn
 31264                                  
 31265                                  ;----------------------------------------------------------------------------
 31266                                  ;
 31267                                  ;----------------------------------------------------------------------------
 31268                                  
 31269                                  ChangeOwner:
 31270 000067A4 09C0                    	or	AX,AX			; is area allocated?
 31271 000067A6 74FB                    	jz	short chgown_retn	; no, do nothing
 31272 000067A8 48                      	dec	AX
 31273 000067A9 1E                      	push	DS
 31274 000067AA 8ED8                    	mov	DS,AX
 31275 000067AC 891E0100                	mov	[ARENA.OWNER],BX
 31276 000067B0 1F                      	pop	DS
 31277 000067B1 C3                      	retn
 31278                                  
 31279                                  
 31280                                  ; MSDOS 6.0
 31281                                  ;----------------------------------------------------------------------------
 31282                                  ;
 31283                                  ;----------------------------------------------------------------------------
 31284                                  
 31285                                  ;Procedure	Scan_Execname,near
 31286                                  ;	ASSUME	SS:DosData
 31287                                  ;
 31288                                  ;	lds	SI,ExecName		; DS:SI points to name
 31289                                  ;Entry	Scan_Execname1			; M028
 31290                                  ;Save_Begin:				;
 31291                                  ;	mov	CX,SI			; CX= starting addr
 31292                                  ;Scan0:					;
 31293                                  ;	lodsb				; get char
 31294                                  ;
 31295                                  ;	cmp	AL,':'			; is ':' , may be A:name
 31296                                  ;	jz	save_begin		; yes, save si
 31297                                  ;	cmp	AL,'\'                  ; is '\', may be A:\name
 31298                                  ;	jz	save_begin		; yes, save si
 31299                                  ;	cmp	AL,0			; is end of name
 31300                                  ;	jnz	scan0			; no, continue scanning
 31301                                  ;	sub	SI,CX			; get name's length
 31302                                  ;	xchg	SI,CX			; cx= length, si= starting addr
 31303                                  ;
 31304                                  ;	return
 31305                                  ;
 31306                                  ;EndProc Scan_Execname
 31307                                  
 31308                                  ; MSDOS 6.0
 31309                                  ;----------------------------------------------------------------------------
 31310                                  ;
 31311                                  ;----------------------------------------------------------------------------
 31312                                  
 31313                                  ;Procedure    Scan_Special_Entries,near
 31314                                  ;	assume	SS:DOSDATA
 31315                                  ;
 31316                                  ;	dec	CX			; cx= name length
 31317                                  ;;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 31318                                  ;					;reset to current version
 31319                                  ;	mov    [Special_Version],(Minor_Version SHL 8) + Major_Version
 31320                                  ;;***	call	Reset_Version
 31321                                  ;
 31322                                  ;;M060	push	SS
 31323                                  ;;M060	pop	ES
 31324                                  ;
 31325                                  ;	les	DI,SS:UU_IFS_DOS_CALL	;M060; ES:DI --> Table in SETVER.SYS
 31326                                  ;	mov	AX,ES			;M060; First do a NULL ptr check to
 31327                                  ;	or	AX,DI			;M060; be sure the table exists
 31328                                  ;	jz	End_List		;M060; If ZR then no table
 31329                                  ;
 31330                                  ;GetEntries:
 31331                                  ;	mov	AL,ES:[DI]		; end of list
 31332                                  ;	or	AL,AL
 31333                                  ;	jz	End_List		; yes
 31334                                  ;
 31335                                  ;	mov	[Temp_Var2],DI		; save di
 31336                                  ;	cmp	AL,CL			; same length ?
 31337                                  ;	jnz	SkipOne 		; no
 31338                                  ;
 31339                                  ;	inc	DI			; es:di -> special name
 31340                                  ;	push	CX			; save length and name addr
 31341                                  ;	push	SI
 31342                                  ;
 31343                                  ;;
 31344                                  ;; M050 - BEGIN
 31345                                  ;;
 31346                                  ;	push	ax			; save len
 31347                                  ;sse_next_char:
 31348                                  ;	lodsb
 31349                                  ;	call	UCase
 31350                                  ;	scasb
 31351                                  ;	jne	Not_Matched
 31352                                  ;	loop	sse_next_char
 31353                                  ;	
 31354                                  ;;
 31355                                  ;;	repz	cmpsb			; same name ?
 31356                                  ;;
 31357                                  ;;	jnz	Not_Matched		; no
 31358                                  ;;
 31359                                  ;	pop	ax			; take len off the stack
 31360                                  ;;
 31361                                  ;; M050 - END
 31362                                  ;;
 31363                                  ;	mov	AX,ES:[DI]		; get special version
 31364                                  ;	mov	[Special_Version],AX	; save it
 31365                                  ;
 31366                                  ;;***	mov	AL,ES:[DI+2]		; get fake count
 31367                                  ;;***	mov	[Fake_Count],AL 	; save it
 31368                                  ;
 31369                                  ;	pop	SI
 31370                                  ;	pop	CX
 31371                                  ;	jmp	SHORT end_list
 31372                                  ;
 31373                                  ;Not_Matched:
 31374                                  ;	pop	ax			; get len from stack ; M050
 31375                                  ;	pop	SI			; restore si,cx
 31376                                  ;	pop	CX
 31377                                  ;
 31378                                  ;SkipOne:
 31379                                  ;	mov	DI,[Temp_Var2]		; restore old di use SS Override
 31380                                  ;	xor	AH,AH			; position to next entry
 31381                                  ;	add	DI,AX
 31382                                  ;
 31383                                  ;	add	DI,3			; DI -> next entry length
 31384                                  ;;***	add	DI,4			; DI -> next entry length
 31385                                  ;
 31386                                  ;	jmp	Getentries
 31387                                  ;
 31388                                  ;End_List:
 31389                                  ;	return
 31390                                  ;
 31391                                  ;EndProc Scan_Special_Entries
 31392                                  
 31393                                  
 31394                                  ; 04/08/2018 - Retro DOS v3.0
 31395                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 31396                                  
 31397                                  ;----------------------------------------------------------------------------
 31398                                  ;SUBTTL Terminate and stay resident handler
 31399                                  ;
 31400                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 31401                                  ;	    truncate the current block.
 31402                                  ;
 31403                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 31404                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 31405                                  ;	    and restoring the vectors.
 31406                                  ;
 31407                                  ;----------------------------------------------------------------------------
 31408                                  
 31409                                  _$KEEP_PROCESS:
 31410 000067B2 50                      	push	AX			; keep exit code around
 31411                                  	;mov	byte [SS:EXIT_TYPE],3
 31412 000067B3 36C606[3905]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 31413 000067B9 368E06[FC02]            	mov	ES,[SS:CurrentPDB]
 31414 000067BE 83FA06                  	cmp	DX,6h			; keep enough space around for system
 31415 000067C1 7303                    	jae	short Keep_Shrink	; info
 31416                                  
 31417 000067C3 BA0600                  	mov	DX,6h
 31418                                  
 31419                                  Keep_Shrink:
 31420 000067C6 89D3                    	mov	BX,DX
 31421 000067C8 53                      	push	BX
 31422 000067C9 06                      	push	ES
 31423 000067CA E8BF01                  	call	_$SETBLOCK		; ignore return codes.
 31424 000067CD 1F                      	pop	DS
 31425 000067CE 5B                      	pop	BX
 31426 000067CF 7207                    	jc	short Keep_Done		; failed on modification
 31427                                  
 31428 000067D1 8CD8                    	mov	AX,DS
 31429 000067D3 01D8                    	add	AX,BX
 31430                                  	;mov	[2],ax
 31431 000067D5 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 31432                                  
 31433                                  Keep_Done:
 31434 000067D8 58                      	pop	AX
 31435 000067D9 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 31436                                  
 31437                                  ;----------------------------------------------------------------------------
 31438                                  ;
 31439                                  ;----------------------------------------------------------------------------
 31440                                  
 31441                                  STAY_RESIDENT:
 31442                                  	;mov	ax,3100h
 31443 000067DB B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 31444 000067DE 83C20F                  	add	DX,15
 31445 000067E1 D1DA                    	rcr	DX,1
 31446 000067E3 B103                    	mov	CL,3
 31447 000067E5 D3EA                    	shr	DX,CL
 31448                                  
 31449 000067E7 E9FEAC                  	jmp	COMMAND
 31450                                  
 31451                                  ;----------------------------------------------------------------------------
 31452                                  ;SUBTTL $EXIT - return to parent process
 31453                                  ;   Assembler usage:
 31454                                  ;	    MOV     AL, code
 31455                                  ;	    MOV     AH, Exit
 31456                                  ;	    INT     int_command
 31457                                  ;   Error return:
 31458                                  ;	    None.
 31459                                  ;
 31460                                  ;----------------------------------------------------------------------------
 31461                                  
 31462                                  _$EXIT:
 31463                                  	; 04/08/2018 - Retro DOS v3.0
 31464                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 31465 000067EA 30E4                    	xor	AH,AH
 31466 000067EC 368626[1703]            	xchg	AH,[SS:DidCTRLC]
 31467 000067F1 08E4                    	or	AH,AH
 31468                                  	;mov	BYTE [SS:EXIT_TYPE],0
 31469 000067F3 36C606[3905]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 31470 000067F9 7406                    	jz	short exit_inner
 31471                                  	;mov	BYTE [SS:EXIT_TYPE],1
 31472 000067FB 36C606[3905]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 31473                                  
 31474                                  	;entry	Exit_inner
 31475                                  exit_inner:
 31476 00006801 E845AE                  	call	Get_User_Stack		;PBUGBUG
 31477                                  
 31478 00006804 36FF36[FC02]            	push	word [ss:CurrentPDB]
 31479                                  	;pop	word [si+14h]
 31480 00006809 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 31481 0000680C EB08                    	jmp	short abort_inner
 31482                                  
 31483                                  ;BREAK <$ABORT -- Terminate a process>
 31484                                  ;----------------------------------------------------------------------------
 31485                                  ; Inputs:
 31486                                  ;	user_CS:00 must point to valid program header block
 31487                                  ; Function:
 31488                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 31489                                  ;	to the terminate address
 31490                                  ; Returns:
 31491                                  ;	TO THE TERMINATE ADDRESS
 31492                                  ;----------------------------------------------------------------------------
 31493                                  
 31494                                  _$ABORT:
 31495 0000680E 30C0                    	xor	AL,AL
 31496                                  	;mov	byte [SS:EXIT_TYPE],0
 31497                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 31498 00006810 36C606[3905]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 31499                                  
 31500                                  	; abort_inner must have AL set as the exit code! The exit type
 31501                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 31502                                  	; to be correct as the one that is terminating.
 31503                                  
 31504                                  abort_inner:
 31505 00006816 368A26[3905]            	mov	AH,[SS:EXIT_TYPE]
 31506 0000681B 36A3[0003]              	mov	[SS:exit_code],AX
 31507 0000681F E827AE                  	call	Get_User_Stack
 31508                                  
 31509                                  	;mov	ds,[si+14h]
 31510 00006822 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 31511 00006825 31C0                    	xor	AX,AX
 31512 00006827 8EC0                    	mov	ES,AX
 31513                                  	;mov	si,10
 31514 00006829 BE0A00                  	mov	SI,SAVEXIT
 31515                                  	;mov	di,88h
 31516 0000682C BF8800                  	mov	DI,addr_int_terminate
 31517 0000682F A5                      	movsw
 31518 00006830 A5                      	movsw
 31519 00006831 A5                      	movsw
 31520 00006832 A5                      	movsw
 31521 00006833 A5                      	movsw
 31522 00006834 A5                      	movsw
 31523 00006835 E929F4                  	jmp	reset_environment
 31524                                  
 31525                                  ; MSDOS 6.0
 31526                                  ;----------------------------------------------------------------------------
 31527                                  ;
 31528                                  ; fixexepatch will point to this is DOS loads low. 
 31529                                  ;
 31530                                  ;----------------------------------------------------------------------------
 31531                                  
 31532                                  ;retexepatch	proc	near
 31533                                  ;	
 31534                                  ;	ret
 31535                                  ;
 31536                                  ;retexepatch 	endp
 31537                                  
 31538                                  
 31539                                  ;============================================================================
 31540                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 31541                                  ;============================================================================
 31542                                  ; 04/08/2018 - Retro DOS v3.0
 31543                                  
 31544                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 31545                                  
 31546                                  ;**
 31547                                  ;	Microsoft Confidential
 31548                                  ;	Copyright (C) Microsoft Corporation 1991
 31549                                  ;	All Rights Reserved.
 31550                                  ;
 31551                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 31552                                  ;	I/O specs are defined in DISPATCH.
 31553                                  ;
 31554                                  ;	$ALLOC
 31555                                  ;	$SETBLOCK
 31556                                  ;	$DEALLOC
 31557                                  ;	$AllocOper
 31558                                  ;	arena_free_process
 31559                                  ;	arena_next
 31560                                  ;	check_signature
 31561                                  ;	Coalesce
 31562                                  ;
 31563                                  ;	Modification history:
 31564                                  ;
 31565                                  ;	    Created: ARR 30 March 1983
 31566                                  ;
 31567                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 31568                                  ;		      M003 - added support for link/unlink UMBs from
 31569                                  ;			     DOS arena chain. 7/18/90
 31570                                  ;		      M009 - Added error returns invalid function and 
 31571                                  ;			     arena trashed in set link state call.
 31572                                  ;		      M010 - Release UMB arenas allocated to current PDB
 31573                                  ;			     if UMB_HEAD is initialized.
 31574                                  ;
 31575                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 31576                                  ;			     support. Please see under M009 in 
 31577                                  ;			     ..\inc\dossym.inc. 8/31/90.
 31578                                  ;
 31579                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 31580                                  ;			     sure that umb_head arena is valid and also make
 31581                                  ;			     sure that the previous arena is pointing to 
 31582                                  ;			     umb_head.
 31583                                  ;
 31584                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 31585                                  ;			     set allloc strategy.
 31586                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 31587                                  ;			     bx in AllocSetStrat.
 31588                                  ;
 31589                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 31590                                  ;			     a bit to indicate to dos dispatcher to turn
 31591                                  ;			     a20 off before iret. See M016.
 31592                                  ;
 31593                                  
 31594                                  ;	BREAK	<memory allocation utility routines>
 31595                                  
 31596                                  
 31597                                  ; 15/04/2018 - Retro DOS v2.0
 31598                                  ;----------------------------------------------------------------------------
 31599                                  ; xenix memory calls for MSDOS
 31600                                  ;
 31601                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 31602                                  ; arena_owner_system are all equal to zero and are contained in DI.
 31603                                  ;
 31604                                  ;INCLUDE DOSSEG.ASM
 31605                                  
 31606                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 31607                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 31608                                  
 31609                                  ;.xlist
 31610                                  ;.xcref
 31611                                  ;INCLUDE DOSSYM.ASM
 31612                                  ;INCLUDE DEVSYM.ASM
 31613                                  ;.cref
 31614                                  ;.list
 31615                                  
 31616                                  ;TITLE ALLOC.ASM - memory arena manager
 31617                                  ;NAME Alloc
 31618                                  
 31619                                  ;SUBTTL memory allocation utility routines
 31620                                  ;PAGE
 31621                                  ;
 31622                                  ; arena data
 31623                                  ;
 31624                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 31625                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 31626                                  ;       i_need  FirstArena,WORD         ; first free block found
 31627                                  ;       i_need  BestArena,WORD          ; best free block found
 31628                                  ;       i_need  LastArena,WORD          ; last free block found
 31629                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 31630                                  
 31631                                  ;**	Arena_Free_Process
 31632                                  ;----------------------------------------------------------------------------
 31633                                  ;	Free all arena blocks allocated to a prOcess
 31634                                  ;
 31635                                  ;	ENTRY	(bx) = PID of process
 31636                                  ;	EXIT	none
 31637                                  ;	USES	????? BUGBUG
 31638                                  ;----------------------------------------------------------------------------
 31639                                  
 31640                                  arena_free_process:
 31641                                  	; 04/08/2018 - Retro DOS v3.0
 31642 00006838 36A1[2400]                      MOV	AX,[SS:arena_head]
 31643                                  arena_free_process_start:
 31644 0000683C BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 31645                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 31646 0000683F E81F00                          CALL    check_signature         ; ES <- AX, check for valid block
 31647                                  
 31648                                  arena_free_process_loop:
 31649                                          ;retc
 31650 00006842 722C                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 31651 00006844 06                      	PUSH    ES
 31652 00006845 1F                              POP     DS
 31653                                  	;cmp	[1],bx 
 31654 00006846 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 31655 0000684A 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 31656                                  	; 20/05/2019
 31657                                  	;mov	[1],di
 31658 0000684C 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 31659                                  
 31660                                  arena_free_next:
 31661                                  	;cmp	byte [di],5Ah ;'Z'
 31662 00006850 803D5A                          CMP     BYTE [DI],arena_signature_end
 31663                                                                          ; end of road, Jack?
 31664                                          ;retz				; never come back no more
 31665 00006853 741B                    	JZ	SHORT AFP_RETN  ;msdos 3.3 (& MSDOS 2.11)
 31666                                  	; MSDOS 6.0
 31667                                  	;jz	short arena_chk_umbs
 31668                                          
 31669 00006855 E80200                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 31670 00006858 EBE8                            JMP     SHORT arena_free_process_loop
 31671                                  
 31672                                  	; MSDOS 6.0
 31673                                  ;arena_chk_umbs:			; M010 - Start
 31674                                  	;mov	ax,[umb_head]		; ax = umb_head
 31675                                  	;cmp	ax,0FFFFh		; Q: is umb_head initialized
 31676                                  	;je	short ret_label		; N: we're done
 31677                                  	;
 31678                                  	;mov	di,ds			; di = last arena
 31679                                  	;cmp	di,ax			; Q: is last arena above umb_head
 31680                                  	;jae	short ret_label		; Y: we've scanned umbs also. done.
 31681                                  	;jmp	short arena_free_process_start
 31682                                  					; M010 - End
 31683                                  
 31684                                  ;AFP_RETN:
 31685                                  ;	RETN
 31686                                  
 31687                                  ;	BREAK	<Arena Helper Routines>
 31688                                  
 31689                                  ;**	Arena_Next - Find Next item in Arena
 31690                                  ;----------------------------------------------------------------------------
 31691                                  ;	ENTRY	DS - pointer to block head
 31692                                  ;		(di) = 0
 31693                                  ;	EXIT	AX,ES - pointers to next head
 31694                                  ;		'C' set iff arena damaged
 31695                                  ;----------------------------------------------------------------------------
 31696                                  
 31697                                  arena_next:
 31698 0000685A 8CD8                            MOV     AX,DS                   ; AX <- current block
 31699 0000685C 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 31700 00006860 40                              INC     AX                      ; remember that header!
 31701                                  ;
 31702                                  ;       fall into check_signature and return
 31703                                  ;
 31704                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 31705                                  ;       RET
 31706                                  
 31707                                  ;**	Check_Signature - Check Memory Block Signature
 31708                                  ;----------------------------------------------------------------------------
 31709                                  ;	ENTRY	(AX) = address of block header
 31710                                  ;		(di) = 0
 31711                                  ;	EXIT	 ES = AX
 31712                                  ;		'C' clear if signature good
 31713                                  ;		'C' set if signature bad
 31714                                  ;	USES	ES, Flags
 31715                                  ;----------------------------------------------------------------------------
 31716                                  
 31717                                  check_signature:        
 31718                                  
 31719 00006861 8EC0                    	MOV     ES,AX                   ; ES <- AX
 31720                                  	;cmp	byte [es:di],4Dh ; 'M'
 31721 00006863 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 31722                                                                          ; IF next signature = not_end THEN
 31723 00006867 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 31724                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 31725 00006869 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 31726                                                                          ; IF next signature = end then
 31727 0000686D 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 31728 0000686F F9                              STC                             ; set error
 31729                                  ;ret_label: ; MSDOS 6.0
 31730                                  AFP_RETN:
 31731                                   	;  Retro DOS v.20 - 05/03/2018
 31732                                  check_signature_ok:
 31733                                  COALESCE_RETN:
 31734 00006870 C3                      	RETN
 31735                                  
 31736                                  ;**	Coalesce - Combine free blocks ahead with current block
 31737                                  ;----------------------------------------------------------------------------
 31738                                  ;	Coalesce adds the block following the argument to the argument block,
 31739                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 31740                                  ;	some callers (such as $setblock) use it to join a free block to it's
 31741                                  ;	preceeding allocated block.
 31742                                  ;
 31743                                  ;	ENTRY	(ds) = pointer to the head of a free block
 31744                                  ;		(di) = 0
 31745                                  ;	EXIT	'C' clear if OK
 31746                                  ;		  (ds) unchanged, this block updated
 31747                                  ;		  (ax) = address of next block, IFF not at end
 31748                                  ;		'C' set if arena trashed
 31749                                  ;	USES	(cx)
 31750                                  ;----------------------------------------------------------------------------
 31751                                          
 31752                                  Coalesce:
 31753                                  	;cmp	byte [di],5Ah ; 'Z'
 31754 00006871 803D5A                  	CMP     BYTE [DI],arena_signature_end
 31755                                                                          ; IF current signature = END THEN
 31756                                          ;retz				;   GOTO ok
 31757 00006874 74FA                            jz	short COALESCE_RETN
 31758 00006876 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 31759                                          ;retc				; IF no error THEN GOTO check
 31760 00006879 72F5                    	jc	short COALESCE_RETN
 31761                                  
 31762                                  coalesce_check:
 31763                                  	;cmp	[es:1],di
 31764 0000687B 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 31765                                          ;retnz				; IF next block isnt free THEN return
 31766 00006880 75EE                            JNZ	SHORT COALESCE_RETN
 31767                                  	;mov	cx,[ES:3]
 31768 00006882 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 31769 00006887 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 31770                                          ;ADD	[3],CX
 31771 00006888 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 31772 0000688C 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 31773 0000688F 880D                            MOV     [DI],CL
 31774 00006891 EBDE                            JMP     SHORT Coalesce		; try again
 31775                                  
 31776                                  ; 04/08/2018 - Retro DOS v3.0
 31777                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 31778                                  
 31779                                  ;	BREAK  <$Alloc - allocate space in memory>
 31780                                  
 31781                                  ; MSDOS 6.0
 31782                                  ;----------------------------------------------------------------------------
 31783                                  ;**	$Alloc - Allocate Memory Space
 31784                                  ;
 31785                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 31786                                  ;	Alloc returns a pointer to a free block of memory that
 31787                                  ;	has the requested size in paragraphs.
 31788                                  ;
 31789                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 31790                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 31791                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 31792                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 31793                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 31794                                  ;
 31795                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 31796                                  ;	starts from arena_head.
 31797                                  ;
 31798                                  ;	Assembler usage:
 31799                                  ;           MOV     BX,size
 31800                                  ;           MOV     AH,Alloc
 31801                                  ;           INT     21h
 31802                                  ;
 31803                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 31804                                  ;	so that we start searching the arena at it's first non-trivial free
 31805                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 31806                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 31807                                  ;	doesn't have too many memory objects in it beyond the first free one.
 31808                                  ;	verify that this is true; if so, this can stay as is
 31809                                  ;
 31810                                  ;	ENTRY	(bx) = requested size, in bytes
 31811                                  ;		(DS) = (ES) = DOSGROUP
 31812                                  ;	EXIT	'C' clear if memory allocated
 31813                                  ;		  (ax:0) = address of requested memory
 31814                                  ;		'C' set if request failed
 31815                                  ;		  (AX) = error_not_enough_memory
 31816                                  ;		    (bx) = max size we could have allocated
 31817                                  ;		  (ax) = error_arena_trashed
 31818                                  ;	USES	All
 31819                                  ;----------------------------------------------------------------------------
 31820                                  
 31821                                  ; MSDOS 2.11 (& MSDOS 3.3)
 31822                                  ;----------------------------------------------------------------------------
 31823                                  ;SUBTTL $Alloc - allocate space in memory
 31824                                  ;
 31825                                  ;   Assembler usage:
 31826                                  ;           MOV     BX,size
 31827                                  ;           MOV     AH,Alloc
 31828                                  ;           INT     21h
 31829                                  ;         AX:0 is pointer to allocated memory
 31830                                  ;         BX is max size if not enough memory
 31831                                  ;
 31832                                  ;   Description:
 31833                                  ;           Alloc returns  a  pointer  to  a  free  block of
 31834                                  ;       memory that has the requested  size  in  paragraphs.
 31835                                  ;
 31836                                  ;   Error return:
 31837                                  ;           AX = error_not_enough_memory
 31838                                  ;              = error_arena_trashed
 31839                                  ;----------------------------------------------------------------------------
 31840                                  
 31841                                  _$ALLOC:
 31842                                  	; 04/08/2018 - Retro DOS v3.0
 31843                                  	;EnterCrit critMem
 31844 00006893 E879B8                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 31845                                  
 31846                                  	; MSDOS 6.0
 31847                                  	;mov	ax,[arena_head]
 31848                                  	;mov	[start_arena],ax	; assume LOW_FIRST
 31849                                  	;			
 31850                                  	;test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 31851                                  	;				; Q: should we start scanning from 
 31852                                  	;				;    UMB's
 31853                                  	;jz	short norm_alloc	; N: scan from arena_head
 31854                                  	;	
 31855                                  	;;cmp	word [umb_head],-1	; Q: Has umb_head been initialized
 31856                                  	;;je	short norm_alloc	; N: scan from arena_head
 31857                                  	;test	byte [UmbFlag],LINKSTATE ; Q: are umb's linked
 31858                                  	;jz	short norm_alloc	; N: scan from arena_head
 31859                                  	;
 31860                                  	;mov	ax,[umb_head]
 31861                                  	;mov	[start_arena],ax	; start_arena = umb_head
 31862                                  	;
 31863                                  					; M000 - end
 31864                                  ;norm_alloc:
 31865 00006896 31C0                            XOR     AX,AX
 31866 00006898 89C7                            MOV     DI,AX
 31867                                  	; 15/03/2018
 31868 0000689A 36A3[0A03]                      MOV     [SS:FirstArena],AX	; init the options
 31869 0000689E 36A3[0C03]                      MOV     [SS:BestArena],AX
 31870 000068A2 36A3[0E03]                      MOV     [SS:LastArena],AX
 31871 000068A6 50                              PUSH    AX                      ; alloc_max <- 0
 31872                                  	; 04/08/2018
 31873                                  start_scan:
 31874                                  	; MSDOS 6.0
 31875                                  	;mov	ax,[SS:start_arena]	; M000: AX <- beginning of arena
 31876                                  	;
 31877 000068A7 36A1[2400]              	MOV     AX,[SS:arena_head]	; AX <- beginning of arena
 31878 000068AB E8B3FF                  	CALL    check_signature         ; ES <- AX, carry set if error
 31879 000068AE 7212                            JC      SHORT alloc_err		; IF error THEN GOTO err
 31880                                  
 31881                                  alloc_scan:
 31882 000068B0 06                              PUSH    ES
 31883 000068B1 1F                              POP     DS                      ; DS <- ES
 31884 000068B2 393E0100                        CMP     [ARENA.OWNER],DI
 31885 000068B6 742A                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 31886                                  
 31887                                  alloc_next:
 31888                                  	; MSDOS 6.0			; M000 - start 
 31889                                  	;test	byte [UmbFlag],LINKSTATE ; Q: are umb's linked
 31890                                  	;jz	short norm_strat	; N: see if we reached last arena
 31891                                  	;
 31892                                  	;test	byte [AllocMethod],HIGH_FIRST
 31893                                  	;				; Q: is alloc strategy high_first
 31894                                  	;jz	short norm_strat	; N: see if we reached last arena
 31895                                  	;mov	ax,[start_arena]
 31896                                  	;cmp	ax,[arena_head]		; Q: did we start scan from 
 31897                                  					;    arena_head
 31898                                  	;jne	short norm_strat	; N: see if we reached last arena
 31899                                  	;mov	ax,ds			; ax = current block
 31900                                  	;cmp	ax,[umb_head]		; Q: check against umb_head 
 31901                                  	;jmp	short alloc_chk_end
 31902                                  
 31903                                  ;norm_strat:
 31904                                  	;cmp	byte [di],5Ah ; 'Z'
 31905 000068B8 803D5A                          CMP     BYTE [DI],arena_signature_end
 31906                                                                          ; IF current block is last THEN
 31907 000068BB 740E                            JZ      SHORT alloc_end		;   GOTO end
 31908 000068BD E89AFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 31909 000068C0 73EE                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 31910                                  
 31911                                  alloc_err:
 31912 000068C2 58                              POP     AX
 31913                                  
 31914                                  alloc_trashed:
 31915                                  	;LeaveCrit critMem
 31916 000068C3 E851B8                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0	
 31917                                          ;error	error_arena_trashed
 31918                                  	;mov	al,7
 31919 000068C6 B007                    	MOV	AL,error_arena_trashed
 31920                                  alloc_errj:
 31921 000068C8 E9D9AE                  	JMP	SYS_RET_ERR
 31922                                  
 31923                                  alloc_end:
 31924 000068CB 36833E[0A03]00                  CMP	WORD [SS:FirstArena],0	; 15/03/2018
 31925 000068D1 756B                    	JNZ     SHORT alloc_do_split
 31926                                  
 31927                                  	; MSDOS 6.0
 31928                                  	;mov	ax,[arena_head]
 31929                                  	;cmp	ax,[start_arena]	; Q: started scanning from arena_head
 31930                                  	;je	short alloc_fail	; Y: not enough memory
 31931                                  	;				; N:
 31932                                  	;				; Q: is the alloc strat HIGH_ONLY
 31933                                  	;test 	byte [AllocMethod],HIGH_ONLY
 31934                                  	;jnz	short alloc_fail	; Y: return size of largest UMB
 31935                                  	;
 31936                                  	;mov	[start_arena],ax	; N: start scanning from arena_head
 31937                                  	;jmp	short start_scan
 31938                                  	;				; M000 - end
 31939                                  
 31940                                  alloc_fail:
 31941                                          ;invoke Get_User_Stack
 31942 000068D3 E873AD                          CALL	Get_User_Stack
 31943 000068D6 5B                      	POP     BX
 31944                                          ;MOV	[SI].user_BX,BX
 31945                                  	;MOV	[SI+2],BX
 31946 000068D7 895C02                  	mov	[SI+user_env.user_BX],bx
 31947                                  	;LeaveCrit critMem
 31948 000068DA E83AB8                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 31949                                  	;error	error_not_enough_memory
 31950                                  	;mov	al,8
 31951 000068DD B008                    	MOV	AL,error_not_enough_memory
 31952                                  	;jmp	short alloc_errj
 31953 000068DF E9C2AE                  	JMP	SYS_RET_ERR
 31954                                  
 31955                                  alloc_free:
 31956 000068E2 E88CFF                          CALL    Coalesce		; add following free block to current
 31957 000068E5 72DB                            JC	SHORT alloc_err		; IF error THEN GOTO err
 31958 000068E7 8B0E0300                        MOV     CX,[ARENA.SIZE]
 31959 000068EB 5A                              POP     DX                      ; check for max found size
 31960 000068EC 39D1                            CMP     CX,DX
 31961 000068EE 7602                            JNA     SHORT alloc_test
 31962 000068F0 89CA                            MOV     DX,CX
 31963                                  
 31964                                  alloc_test:
 31965 000068F2 52                              PUSH    DX
 31966 000068F3 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 31967 000068F5 77C1                            JA      SHORT alloc_next	;   GOTO next
 31968                                  
 31969                                  	; 15/03/2018
 31970 000068F7 36833E[0A03]00                  CMP     WORD [SS:FirstArena],0
 31971 000068FD 7505                    	JNZ	SHORT alloc_best
 31972 000068FF 368C1E[0A03]                    MOV     [SS:FirstArena],DS	; save first one found	
 31973                                  alloc_best:
 31974 00006904 36833E[0C03]00                  CMP     WORD [SS:BestArena],0
 31975 0000690A 740E                            JZ      SHORT alloc_make_best	; initial best
 31976 0000690C 06                              PUSH	ES
 31977 0000690D 368E06[0C03]                    MOV     ES,[SS:BestArena]
 31978 00006912 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 31979 00006917 07                              POP	ES
 31980 00006918 7605                            JBE     SHORT alloc_last
 31981                                  alloc_make_best:
 31982 0000691A 368C1E[0C03]                    MOV     [SS:BestArena],DS	; assign best
 31983                                  alloc_last:
 31984 0000691F 368C1E[0E03]                    MOV     [SS:LastArena],DS 	; assign last
 31985 00006924 EB92                            JMP     SHORT alloc_next
 31986                                  ;
 31987                                  ; split the block high
 31988                                  ;
 31989                                  alloc_do_split_high:
 31990 00006926 368E1E[0E03]                    MOV     DS,[SS:LastArena]
 31991 0000692B 8B0E0300                        MOV     CX,[ARENA.SIZE]
 31992 0000692F 29D9                            SUB     CX,BX
 31993 00006931 8CDA                            MOV     DX,DS
 31994 00006933 7444                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 31995 00006935 01CA                            ADD     DX,CX                   ; point to next block
 31996 00006937 8EC2                            MOV     ES,DX                   ; no decrement!
 31997 00006939 49                              DEC     CX
 31998 0000693A 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 31999 0000693C EB26                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 32000                                  ;
 32001                                  ; we have scanned memory and have found all appropriate blocks
 32002                                  ; check for the type of allocation desired; first and best are identical
 32003                                  ; last must be split high
 32004                                  ;
 32005                                  alloc_do_split:
 32006                                  	; 04/08/2018
 32007                                  	; MSDOS 6.0			; M000 - start
 32008                                  	;xor	cx,cx
 32009                                  	;mov	cl,[AllocMethod]
 32010                                  	;and	cx,STRAT_MASK		; mask off bit 7
 32011                                  	;cmp	cx,BEST_FIT		; Q; is the alloc strategy best_fit
 32012                                  
 32013                                  	; 15/03/2018
 32014                                          ;CMP     BYTE [SS:AllocMethod], 1
 32015                                  	; 04/08/2018
 32016 0000693E 36803E[CE02]01          	CMP     BYTE [SS:AllocMethod],BEST_FIT
 32017 00006944 77E0                            JA      SHORT alloc_do_split_high
 32018 00006946 368E1E[0A03]                    MOV     DS,[SS:FirstArena]        
 32019 0000694B 7205                    	JB      SHORT alloc_get_size
 32020 0000694D 368E1E[0C03]            	MOV     DS,[SS:BestArena]
 32021                                  
 32022                                  alloc_get_size:
 32023 00006952 8B0E0300                        MOV     CX,[ARENA.SIZE]
 32024 00006956 29D9                            SUB     CX,BX                   ; get room left over
 32025 00006958 8CD8                            MOV     AX,DS
 32026 0000695A 89C2                            MOV     DX,AX                   ; save for owner setting
 32027 0000695C 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 32028 0000695E 01D8                            ADD     AX,BX
 32029 00006960 40                              INC     AX                      ; remember the header
 32030 00006961 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 32031 00006963 49                              DEC     CX                      ; CX <- size of split block
 32032                                  alloc_set_sizes:
 32033 00006964 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 32034 00006968 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 32035                                  	;mov	bl,4Dh ; 'M'
 32036 0000696D B34D                            MOV     BL,arena_signature_normal
 32037 0000696F 861D                            XCHG    BL,[DI]			; current signature <- 4D
 32038 00006971 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 32039 00006974 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 32040                                  
 32041                                  alloc_set_owner:
 32042 00006979 8EDA                            MOV     DS,DX
 32043 0000697B 36A1[FC02]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 32044 0000697F A30100                          MOV     [ARENA.OWNER],AX
 32045 00006982 8CD8                            MOV     AX,DS
 32046 00006984 40                              INC     AX
 32047 00006985 5B                              POP     BX
 32048                                  	;LeaveCrit critMem
 32049 00006986 E88EB7                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 32050                                          ;transfer SYS_RET_OK
 32051 00006989 E90FAE                  	JMP	SYS_RET_OK
 32052                                  
 32053                                  
 32054                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 32055                                  
 32056                                  ; MSDOS 6.0
 32057                                  ;----------------------------------------------------------------------------
 32058                                  ;**	$SETBLOCK - Change size of an Alocated Block
 32059                                  ;
 32060                                  ;	Setblock changes the size of an allocated block.  First, we coalesce
 32061                                  ;	any following free space onto this block; then we try to trim the
 32062                                  ;	block down to the size requested.
 32063                                  ;
 32064                                  ;	Note that if the guy wants to grow the block but that growth fails,
 32065                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 32066                                  ;	Thus the maximum-size-possible value that we return has already
 32067                                  ;	been allocated!  This is a bug, dare we fix it?  BUGBUG
 32068                                  ;
 32069                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 32070                                  ;		finish it's work.  FOr this reason we build the allocsf
 32071                                  ;		structure on the frame, to make us compatible with $ALLOCs
 32072                                  ;		code.
 32073                                  ;
 32074                                  ;	ENTRY	(es) = segment of old block
 32075                                  ;		(bx) = newsize
 32076                                  ;		(ah) = SETBLOCK
 32077                                  ;
 32078                                  ;	EXIT	'C' clear if OK
 32079                                  ;		'C' set if error
 32080                                  ;		  (ax) = error_invalid_block
 32081                                  ;		       = error_arena_trashed
 32082                                  ;		       = error_not_enough_memory
 32083                                  ;		       = error_invalid_function
 32084                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 32085                                  ;	USES	???? BUGBUG
 32086                                  ;----------------------------------------------------------------------------
 32087                                  
 32088                                  ; MSDOS 2.11 (& MSDOS 3.3)
 32089                                  ;----------------------------------------------------------------------------
 32090                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 32091                                  ;
 32092                                  ;   Assembler usage:
 32093                                  ;           MOV     ES,block
 32094                                  ;           MOV     BX,newsize
 32095                                  ;           MOV     AH,setblock
 32096                                  ;           INT     21h
 32097                                  ;         if setblock fails for growing, BX will have the maximum
 32098                                  ;         size possible
 32099                                  ;   Error return:
 32100                                  ;           AX = error_invalid_block
 32101                                  ;              = error_arena_trashed
 32102                                  ;              = error_not_enough_memory
 32103                                  ;              = error_invalid_function
 32104                                  ;----------------------------------------------------------------------------
 32105                                  
 32106                                  _$SETBLOCK:        
 32107                                  	; 04/08/2018 - Retro DOS v3.0
 32108                                  	;EnterCrit   critMem
 32109 0000698C E880B7                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 32110                                  
 32111 0000698F BF0000                  	MOV     DI,ARENA.SIGNATURE
 32112 00006992 8CC0                            MOV     AX,ES
 32113 00006994 48                              DEC     AX
 32114 00006995 E8C9FE                          CALL    check_signature
 32115 00006998 7303                            JNC     SHORT setblock_grab
 32116                                  
 32117                                  setblock_bad:
 32118 0000699A E926FF                          JMP     alloc_trashed
 32119                                  
 32120                                  setblock_grab:
 32121 0000699D 8ED8                            MOV     DS,AX
 32122 0000699F E8CFFE                          CALL    Coalesce
 32123 000069A2 72F6                            JC      SHORT setblock_bad
 32124 000069A4 8B0E0300                        MOV     CX,[ARENA.SIZE]
 32125 000069A8 51                              PUSH    CX
 32126 000069A9 39CB                            CMP     BX,CX
 32127 000069AB 76A5                            JBE     SHORT alloc_get_size
 32128 000069AD E923FF                          JMP     alloc_fail
 32129                                  
 32130                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 32131                                  
 32132                                  ; MSDOS 6.0
 32133                                  ;----------------------------------------------------------------------------
 32134                                  ;**	$DEALLOC - Free Heap Memory
 32135                                  ;
 32136                                  ;	ENTRY	(es) = address of item
 32137                                  ;
 32138                                  ;	EXIT	'C' clear of OK
 32139                                  ;		'C' set if error
 32140                                  ;		  (AX) = error_invalid_block
 32141                                  ;	USES	???? BUGBUG
 32142                                  
 32143                                  ; MSDOS 2.11 (& MSDOS 3.3)
 32144                                  ;----------------------------------------------------------------------------
 32145                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 32146                                  ;
 32147                                  ;   Assembler usage:
 32148                                  ;           MOV     ES,block
 32149                                  ;           MOV     AH,dealloc
 32150                                  ;           INT     21h
 32151                                  ;
 32152                                  ;   Error return:
 32153                                  ;           AX = error_invalid_block
 32154                                  ;              = error_arena_trashed
 32155                                  ;---------------------------------------------------------------------------- 
 32156                                  
 32157                                  _$DEALLOC:    
 32158                                  	; 04/08/2018 - Retro DOS v3.0
 32159                                  	;EnterCrit   critMem
 32160 000069B0 E85CB7                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 32161                                  
 32162                                  	; MSDOS 6.0			; M016, M068 - Start
 32163                                  	;test	byte [DOS_FLAG],EXECA20OFF
 32164                                  					; Q: was the previous call an int 21
 32165                                  					;    exec call
 32166                                  	;jz	short deallocate	; N: continue
 32167                                  	;cmp	byte [A20OFF_COUNT], 0	; Q: is count 0
 32168                                  	;jne	short deallocate	; N: continue
 32169                                  	;mov	byte [A20OFF_COUNT], 1	; Y: set count to 1
 32170                                  ;deallocate:				; M016, M068 - End
 32171                                      
 32172 000069B3 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 32173 000069B6 8CC0                            MOV     AX,ES
 32174 000069B8 48                              DEC     AX
 32175 000069B9 E8A5FE                          CALL    check_signature
 32176 000069BC 720B                            JC      SHORT dealloc_err
 32177 000069BE 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 32178                                  	;LeaveCrit critMem
 32179 000069C3 E851B7                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 32180                                          ;transfer SYS_RET_OK
 32181 000069C6 E9D2AD                  	JMP	SYS_RET_OK
 32182                                  
 32183                                  dealloc_err:
 32184                                  	;LeaveCrit critMem
 32185 000069C9 E84BB7                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 32186                                          ;error	error_invalid_block
 32187                                  	;mov	al,9
 32188 000069CC B009                    	MOV	AL,error_invalid_block
 32189 000069CE E9D3AD                  	JMP	SYS_RET_ERR
 32190                                  
 32191                                  ;	BREAK $AllocOper - get/set allocation mechanism
 32192                                  
 32193                                  ; MSDOS 6.0
 32194                                  ;----------------------------------------------------------------------------
 32195                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 32196                                  ;
 32197                                  ;	Assembler usage:
 32198                                  ;           MOV     AH,AllocOper
 32199                                  ;           MOV     BX,method
 32200                                  ;           MOV     AL,func
 32201                                  ;           INT     21h
 32202                                  ;
 32203                                  ;	ENTRY	
 32204                                  ;		(al) = 0
 32205                                  ;		  Get allocation Strategy in (ax)
 32206                                  ;
 32207                                  ;		(al) = 1, (bx) = method = zw0000xy
 32208                                  ;		  Set allocation strategy.
 32209                                  ;		   w  = 1  => HIGH_ONLY
 32210                                  ;		   z  = 1  => HIGH_FIRST
 32211                                  ;		   xy = 00 => FIRST_FIT
 32212                                  ;		      = 01 => BEST_FIT
 32213                                  ;		      = 10 => LAST_FIT
 32214                                  ;
 32215                                  ;		(al) = 2
 32216                                  ;		  Get UMB link state in (al)
 32217                                  ;
 32218                                  ;		(al) = 3
 32219                                  ;		  Set UMB link state
 32220                                  ;		   (bx) = 0 => Unlink UMBs
 32221                                  ;		   (bx) = 1 => Link UMBs
 32222                                  ;
 32223                                  ;
 32224                                  ;	EXIT	'C' clear if OK
 32225                                  ;
 32226                                  ;		 if (al) = 0
 32227                                  ;		  (ax) = existing method
 32228                                  ;		 if (al) = 1
 32229                                  ;		  Sets allocation strategy
 32230                                  ;		 if (al) = 2
 32231                                  ;		  (al) = 0 => UMBs not linked
 32232                                  ;		  (al) = 1 => UMBs linked in
 32233                                  ;		 if (al) = 3
 32234                                  ;		  Links/Unlinks the UMBs into DOS chain
 32235                                  ;
 32236                                  ;		'C' set if error
 32237                                  ;		  AX = error_invalid_function
 32238                                  ;
 32239                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 32240                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 32241                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 32242                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 32243                                  ;		    arena' if an arena sig is damaged.
 32244                                  ;----------------------------------------------------------------------------
 32245                                  
 32246                                  ; MSDOS 2.11 (& MSDOS 3.3)
 32247                                  ;----------------------------------------------------------------------------
 32248                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 32249                                  ;
 32250                                  ;   Assembler usage:
 32251                                  ;           MOV     AH,AllocOper
 32252                                  ;           MOV     BX,method
 32253                                  ;           MOV     AL,func
 32254                                  ;           INT     21h
 32255                                  ;
 32256                                  ;   Error return:
 32257                                  ;           AX = error_invalid_function
 32258                                  ;----------------------------------------------------------------------------
 32259                                  
 32260                                  _$ALLOCOPER:
 32261                                  	; MSDOS 6.0
 32262                                  	;or	al, al
 32263                                  	;jz	short AllocGetStrat
 32264                                  	;cmp	al, 1
 32265                                  	;jz	short AllocSetStrat
 32266                                  	;cmp	al, 2
 32267                                  	;jz	short AllocGetLink
 32268                                  	;cmp	al, 3
 32269                                  	;jz	short AllocSetLink
 32270                                  
 32271                                  	; 15/04/2018
 32272 000069D1 3C01                    	CMP     AL,1
 32273 000069D3 720D                            JB      SHORT AllocOperGet
 32274 000069D5 7414                            JZ      SHORT AllocOperSet
 32275                                  
 32276                                  AllocOperError:
 32277                                  	; 04/08/2018 - Retro DOS v3.0
 32278                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 32279                                  	;mov	byte [ss:EXTERR_LOCUS],5
 32280 000069D7 36C606[EF02]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 32281                                  	;error	error_invalid_function
 32282                                  	;mov	al,1
 32283 000069DD B001                    	MOV	AL,error_invalid_function
 32284                                  AllocOperErrj:
 32285 000069DF E9C2AD                  	JMP	SYS_RET_ERR
 32286                                  
 32287                                  ;AllocArenaError:
 32288                                  	; MSDOS 6.0
 32289                                  	;MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 32290                                  	;				; M009: Extended Error Locus
 32291                                  	;;error   error_arena_trashed	; M009:
 32292                                  	;MOV	AL,error_arena_trashed
 32293                                  	;;JMP	SYS_RET_ERR
 32294                                  	;jmp	short AllocOperErrj
 32295                                  
 32296                                  ;AllocGetStrat: 
 32297                                  	; MSDOS 6.0
 32298                                  AllocOperGet:
 32299 000069E2 36A0[CE02]                      MOV     AL,[SS:AllocMethod]
 32300 000069E6 30E4                            XOR     AH,AH
 32301                                          ;transfer SYS_RET_OK
 32302 000069E8 E9B0AD                  	JMP	SYS_RET_OK
 32303                                  
 32304                                  ;AllocSetStrat: 
 32305                                  	; MSDOS 6.0
 32306                                  	;push	bx			; M000 - start
 32307                                  	;and	bx,STRAT_MASK 		; M064: mask off bit 6 & 7
 32308                                  	;cmp	bx,2			; BX must be 0-2
 32309                                  	;pop	bx			; M000 - end
 32310                                  	;ja	short AllocOperError
 32311                                  
 32312                                  AllocOperSet:
 32313 000069EB 36881E[CE02]                    MOV     [SS:AllocMethod],BL
 32314                                          ;transfer SYS_RET_OK
 32315 000069F0 E9A8AD                  	JMP	SYS_RET_OK
 32316                                  
 32317                                  ;AllocGetLink:
 32318                                  	; MSDOS 6.0
 32319                                  	;mov	al,[UmbFlag]		; return link state in al
 32320                                  	;and 	al,LINKSTATE		
 32321                                  	;;transfer SYS_RET_OK
 32322                                  	;jmp	SYS_RET_OK
 32323                                  
 32324                                  ;AllocSetLink:
 32325                                  	; MSDOS 6.0			; M009 - start
 32326                                  	;mov	cx,[umb_head]		; cx = umb_head
 32327                                  	;cmp	cx,0FFFFh		; Q: has umb_head been initialized
 32328                                  	;je	short AllocOperError	; N: error
 32329                                  	;				; Y: continue
 32330                                  	;				; M009 - end
 32331                                  	;cmp	bx,1			
 32332                                  	;jb	short UnlinkUmbs
 32333                                  	;jz	short LinkUmbs
 32334                                  	;
 32335                                  	;jmp	short AllocOperError
 32336                                  	;
 32337                                  ;UnlinkUmbs:
 32338                                  	;test	byte[UmbFlag],LINKSTATE	; Q: umbs unlinked?
 32339                                  	;jz	short unlinked		; Y: return 
 32340                                  	;
 32341                                  	;call	GetLastArena		; get arena before umb_head in DS
 32342                                  	;jc	short AllocArenaError	; M009: arena trashed
 32343                                  	;
 32344                                  	;				; make it last
 32345                                  	;mov	byte [0],arena_signature_end
 32346                                  	;
 32347                                  	;and	byte [UmbFlag],~LINKSTATE ; indicate unlink'd state in umbflag
 32348                                  	;
 32349                                  ;unlinked:
 32350                                  	;;transfer SYS_RET_OK
 32351                                  	;jmp	SYS_RET_OK
 32352                                  
 32353                                  ;LinkUmbs:
 32354                                  	;test	byte [UmbFlag],LINKSTATE ; Q: umbs linked?
 32355                                  	;jnz	short linked		; Y: return
 32356                                  	;
 32357                                  	;call	GetLastArena		; get arena before umb_head
 32358                                  	;jc	short AllocArenaError	; M009: arena trashed
 32359                                  	;
 32360                                  	;				; make it normal. M061: ds points to
 32361                                  	;				; arena before umb_head
 32362                                  	;mov	byte [0],arena_signature_normal
 32363                                  	;
 32364                                  	;or	byte [UmbFlag],LINKSTATE ; indicate link'd state in umbflag
 32365                                  ;linked:
 32366                                  	;;transfer SYS_RET_OK
 32367                                  	;jmp	SYS_RET_OK
 32368                                  
 32369                                  ; MSDOS 6.0
 32370                                  ;--------------------------------------------------------------------------
 32371                                  ; Procedure Name : GetLastArena		-  M003
 32372                                  ;
 32373                                  ; Inputs	 : cx = umb_head
 32374                                  ;
 32375                                  ;
 32376                                  ; Outputs	 : If UMBs are linked
 32377                                  ;			ES = umb_head
 32378                                  ;			DS = arena before umb_head
 32379                                  ;		   else
 32380                                  ;			DS = last arena
 32381                                  ;			ES = next arena. will be umb_head if NC.
 32382                                  ;
 32383                                  ;		   CY if error
 32384                                  ;
 32385                                  ; Uses		 : DS, ES, DI, BX
 32386                                  ;--------------------------------------------------------------------------
 32387                                  	
 32388                                  ;Procedure	GetLastArena, NEAR
 32389                                  ;
 32390                                  ;	push	ax			; save ax
 32391                                  ;
 32392                                  ;	mov	ax, [arena_head]
 32393                                  ;	mov	es, ax			; es = arena_head
 32394                                  ;	xor	di, di
 32395                                  ;
 32396                                  ;	cmp     byte ptr es:[di],arena_signature_end
 32397                                  ;					; Q: is this the last arena
 32398                                  ;	je	GLA_done		; Y: return last arena in ES		
 32399                                  ;					
 32400                                  ;
 32401                                  ;GLA_next:
 32402                                  ;	mov	ds, ax
 32403                                  ;	call	arena_next		; ax, es -> next arena
 32404                                  ;	jc	GLA_err
 32405                                  ;
 32406                                  ;	test	[UmbFlag], LINKSTATE	; Q: are UMBs linked
 32407                                  ;	jnz	GLA_chkumb		; Y: terminating condition is 
 32408                                  ;					;    umb_head
 32409                                  ;					; N: terminating condition is 05Ah
 32410                                  ;
 32411                                  ;	cmp     byte ptr es:[di],arena_signature_end
 32412                                  ;					; Q: is this the last arena
 32413                                  ;	jmp	short @f
 32414                                  ;GLA_chkumb:
 32415                                  ;	cmp	ax, cx			; Q: is this umb_head
 32416                                  ;@@:
 32417                                  ;	jne	GLA_next		; N: get next arena
 32418                                  ;
 32419                                  ;GLA_done:
 32420                                  ;					; M061 - Start
 32421                                  ;	test	[UmbFlag], LINKSTATE	; Q: are UMBs linked
 32422                                  ;	jnz	GLA_ret			; Y: we're done
 32423                                  ;					; N: let us confirm that the next 
 32424                                  ;					;    arena is umb_head
 32425                                  ;	mov	ds, ax
 32426                                  ;	call	arena_next		; ax, es -> next arena
 32427                                  ;	jc	GLA_err
 32428                                  ;	cmp	ax, cx			; Q: is this umb_head
 32429                                  ;	jne	GLA_err			; N: error
 32430                                  ;					; M061 - End
 32431                                  ;
 32432                                  ;GLA_ret:				
 32433                                  ;	clc
 32434                                  ;	pop	ax			; M061
 32435                                  ;	ret				; M061
 32436                                  ;
 32437                                  ;GLA_err:
 32438                                  ;	stc				; M061
 32439                                  ;	pop	ax
 32440                                  ;	ret
 32441                                  ;
 32442                                  ;EndProc GetLastArena
 32443                                  
 32444                                  ;============================================================================
 32445                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 32446                                  ;============================================================================
 32447                                  ; 04/08/2018 - Retro DOS v3.0
 32448                                  
 32449                                  ;	TITLE SRVCALL - Server DOS call
 32450                                  ;	NAME  SRVCALL
 32451                                  
 32452                                  ;**	SRVCALL.ASM - Server DOS call functions
 32453                                  ;
 32454                                  ;
 32455                                  ;	$ServerCall
 32456                                  ;
 32457                                  ;	Modification history:
 32458                                  ;
 32459                                  ;	    Created: ARR 08 August 1983
 32460                                  
 32461                                  ;AsmVars <Installed>
 32462                                  
 32463                                  ;include dpl.asm
 32464                                  
 32465                                  ;Installed = TRUE
 32466                                  
 32467                                  ;BREAK <ServerCall -- Server DOS call>
 32468                                  ;----------------------------------------------------------------------------
 32469                                  ;
 32470                                  ; Procedure Name : $ServerCall
 32471                                  ;
 32472                                  ; Inputs:
 32473                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 32474                                  ; Function:
 32475                                  ;	AL=0	Server DOS call
 32476                                  ;	AL=1	Commit All files
 32477                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 32478                                  ;	AL=3	Close all files for DPL_UID
 32479                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 32480                                  ;	AL=5	Get open file list entry
 32481                                  ;		    IN: BX File Index
 32482                                  ;			CX User Index
 32483                                  ;		    OUT:ES:DI -> Name
 32484                                  ;			BX = UID
 32485                                  ;		    CX = # locked blocks held by this UID
 32486                                  ;	AL=6	Get DOS data area
 32487                                  ;		    OUT: DS:SI -> Start
 32488                                  ;			CX size in bytes of swap if indos
 32489                                  ;			DX size in bytes of swap always
 32490                                  ;	AL=7	Get truncate flag
 32491                                  ;	AL=8	Set truncate flag
 32492                                  ;	AL=9	Close all spool files
 32493                                  ;	AL=10	SetExtendedError
 32494                                  ;
 32495                                  ;----------------------------------------------------------------------------
 32496                                  
 32497                                  _$ServerCall:
 32498                                  	; 05/08/2018 - Retro DOS v3.0
 32499                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 32500 000069F3 3C07                    	CMP	AL,7
 32501 000069F5 7204                    	JB	short SET_STUFF
 32502 000069F7 3C09                    	CMP	AL,9
 32503 000069F9 7612                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 32504                                  SET_STUFF:
 32505 000069FB 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 32506                                  	;mov	bx,[si+12h]
 32507 000069FD 8B5C12                  	MOV	BX,[SI+DPL.UID]
 32508                                  
 32509                                  	; MSDOS 6.0
 32510                                  ;SR;
 32511                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 32512                                  ; of USER_ID
 32513                                  ;
 32514                                  	;test	byte [SS:IsWin386],1
 32515                                  	;jnz	short skip_win386
 32516                                  
 32517                                  ;hkn; SS override for user_id and proc_id
 32518                                  	; 15/08/2018
 32519 00006A00 36891E[0803]            	MOV	[SS:USER_ID],BX		; Set UID
 32520                                  
 32521                                  ;skip_win386:
 32522                                  
 32523 00006A05 8B5C14                  	MOV	BX,[SI+DPL.PID]
 32524 00006A08 36891E[0603]            	MOV	[SS:PROC_ID],BX		; Set process ID
 32525                                  NO_SET_ID:
 32526 00006A0D 36FF36[7814]            	PUSH	word [SS:SERVERLEAVE]	; push return address
 32527 00006A12 36FF36[7614]            	PUSH	word [SS:SERVERTAB]	; push table address
 32528 00006A17 50                      	PUSH	AX
 32529 00006A18 E82BB6                  	call	TableDispatch
 32530                                  
 32531                                  ;hkn; SS override
 32532                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 32533 00006A1B 36C606[EF02]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 32534                                  	;error	error_invalid_function
 32535                                  	;mov	al,1
 32536 00006A21 B001                    	MOV	AL,error_invalid_function
 32537                                  servercall_error:
 32538 00006A23 E97EAD                  	JMP	SYS_RET_ERR
 32539                                  
 32540                                  SERVERRETURN:
 32541 00006A26 C3                      	retn
 32542                                  
 32543                                  ; Commit - iterate through the open file list and make sure that the
 32544                                  ; directory entries are correctly updated.
 32545                                  
 32546                                  COMMIT_ALL:
 32547 00006A27 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 32548 00006A29 16                      	push	ss
 32549 00006A2A 1F                      	pop	ds
 32550 00006A2B E8E1B6                  	call	EcritSFT		; Gonna scan SFT cache, lock it down
 32551                                  CommitLoop:
 32552 00006A2E 53                      	push	bx
 32553 00006A2F E82501                  	call	SFFromSFN
 32554 00006A32 7223                    	JC	short CommitDone
 32555 00006A34 26833D00                	cmp	word [es:di],0
 32556                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 32557                                  					; if (ThisSFT->refcount != 0)
 32558 00006A38 7419                    	JZ	short CommitNext
 32559                                  	;cmp	word [es:di],0FFFFh ; -1
 32560 00006A3A 26833DFF                	cmp	word [ES:DI],sf_busy
 32561                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 32562                                  					; BUSY SFTs have god knows what
 32563 00006A3E 7413                    	JZ	short CommitNext	;   in them.
 32564 00006A40 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 32565 00006A46 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 32566                                  					;	doesn't deadlock
 32567 00006A48 893E[5A05]              	MOV	[THISSFT],DI
 32568 00006A4C 8C06[5C05]              	MOV	[THISSFT+2],ES
 32569 00006A50 E82BD2                  	call	DOS_COMMIT		;	DOSCommit ();
 32570                                  CommitNext:
 32571 00006A53 5B                      	pop	bx
 32572 00006A54 43                      	INC	BX
 32573 00006A55 EBD7                    	JMP	short CommitLoop
 32574                                  CommitDone:
 32575 00006A57 E8BDB6                  	call	LcritSFT
 32576 00006A5A 5B                      	pop	bx
 32577 00006A5B E93DAD                  	jmp	SYS_RET_OK
 32578                                  
 32579                                  CLOSE_NAME:
 32580                                  
 32581                                  ;if installed
 32582                                  
 32583                                  ;hkn; SS override
 32584 00006A5E 36FF1E[7000]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 32585                                  ;else
 32586                                  ;	Call	MFTcloN
 32587                                  ;endif
 32588                                  
 32589                                  CheckReturns:
 32590 00006A63 7203                    	JC	short func_err
 32591 00006A65 E933AD                  	jmp	SYS_RET_OK
 32592                                  func_err:
 32593                                  	;transfer SYS_RET_ERR
 32594                                  	;jmp	SYS_RET_ERR
 32595 00006A68 EBB9                    	jmp	short servercall_error
 32596                                  
 32597                                  CLOSE_UID:
 32598                                  
 32599                                  ;if installed
 32600                                  ;hkn; SS override
 32601 00006A6A 36FF1E[6800]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 32602                                  ;else
 32603                                  ;	Call	MFTclU
 32604                                  ;endif
 32605 00006A6F EBF2                    	JMP	short CheckReturns
 32606                                  
 32607                                  CLOSE_UID_PID:
 32608                                  
 32609                                  ;if installed
 32610                                  ;hkn; SS override
 32611 00006A71 36FF1E[6C00]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 32612                                  ;else
 32613                                  ;	Call	MFTCloseP
 32614                                  ;endif
 32615 00006A76 EBEB                    	JMP	CheckReturns
 32616                                  
 32617                                  GET_LIST:
 32618                                  
 32619                                  ;if installed
 32620                                  ;hkn; SS override
 32621 00006A78 36FF1E[8000]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 32622                                  ;else
 32623                                  ;	Call	MFT_get
 32624                                  ;endif
 32625 00006A7D 72E9                    	JC	short func_err
 32626 00006A7F E8C7AB                  	call	Get_User_Stack
 32627                                  	;mov	[si+2],bx
 32628 00006A82 895C02                  	MOV	[SI+user_env.user_BX],BX
 32629                                  	;mov	[si+10],di
 32630 00006A85 897C0A                  	MOV	[SI+user_env.user_DI],DI
 32631                                  	;mov	[si+16],es
 32632 00006A88 8C4410                  	MOV	[SI+user_env.user_ES],ES
 32633                                  SetCXOK:
 32634                                  	;mov	[si+4],cx
 32635 00006A8B 894C04                  	MOV	[SI+user_env.user_CX],CX
 32636 00006A8E E90AAD                  	jmp	SYS_RET_OK
 32637                                  
 32638                                  SRV_CALL:
 32639 00006A91 58                      	POP	AX			; get rid of call to $srvcall
 32640 00006A92 1E                      	push	ds
 32641 00006A93 56                      	push	si
 32642 00006A94 E8B2AB                  	call	Get_User_Stack
 32643 00006A97 5F                      	pop	di
 32644 00006A98 07                      	pop	es
 32645                                  ;
 32646                                  ; DS:SI point to stack
 32647                                  ; ES:DI point to DPL
 32648                                  ;
 32649 00006A99 E889B5                  	call	XCHGP
 32650                                  ;
 32651                                  ; DS:SI point to DPL
 32652                                  ; ES:DI point to stack
 32653                                  ;
 32654                                  ; We now copy the registers from DPL to save stack
 32655                                  ;
 32656 00006A9C 56                      	push	si
 32657 00006A9D B90600                  	MOV	CX,6
 32658 00006AA0 F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 32659 00006AA2 47                      	INC	DI
 32660 00006AA3 47                      	INC	DI			; Skip user_BP
 32661 00006AA4 A5                      	MOVSW				; DS
 32662 00006AA5 A5                      	MOVSW				; ES
 32663 00006AA6 5E                      	pop	si			; DS:SI -> DPL
 32664 00006AA7 8B04                    	mov	ax,[SI]
 32665                                  	;MOV	AX,[SI+DPL.AX]
 32666                                  	;mov	bx,[si+2]
 32667 00006AA9 8B5C02                  	MOV	BX,[SI+DPL.BX]
 32668                                  	;mov	cx,[si+4]
 32669 00006AAC 8B4C04                  	MOV	CX,[SI+DPL.CX]
 32670                                  	;mov	dx,[si+6]
 32671 00006AAF 8B5406                  	MOV	DX,[SI+DPL.DX]
 32672                                  	;mov	di,[si+10]
 32673 00006AB2 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 32674                                  	;mov	es,[si+14]
 32675 00006AB5 8E440E                  	MOV	ES,[SI+DPL.ES]
 32676                                  	;push	word [si+8]
 32677 00006AB8 FF7408                  	PUSH	word [SI+DPL.SI]
 32678                                  	;mov	ds,[si+12]
 32679 00006ABB 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 32680 00006ABE 5E                      	POP	SI
 32681                                  
 32682                                  ;hkn; SS override for next 3
 32683 00006ABF 368C1E[A805]            	MOV	[SS:SAVEDS],DS
 32684 00006AC4 36891E[A605]            	MOV	[SS:SAVEBX],BX
 32685 00006AC9 36C606[2F05]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 32686 00006ACF E9B1AA                  	jmp	REDISP
 32687                                  
 32688                                  GET_DOS_DATA:
 32689 00006AD2 16                      	push	ss
 32690 00006AD3 07                      	pop	es
 32691 00006AD4 BF[EC02]                	MOV     DI,SWAP_START
 32692 00006AD7 B9[390A]                	MOV     CX,SWAP_END
 32693 00006ADA BA[0403]                	MOV     DX,SWAP_ALWAYS
 32694 00006ADD 29F9                    	SUB     CX,DI
 32695 00006ADF 29FA                    	SUB     DX,DI
 32696 00006AE1 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 32697 00006AE3 83D100                  	ADC     CX,0                    ; div by 2 + round up
 32698 00006AE6 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 32699 00006AE8 E85EAB                  	call	Get_User_Stack
 32700                                  	;mov	[si+14],es
 32701 00006AEB 8C440E                  	MOV     [SI+user_env.user_DS],ES
 32702                                  	;mov	[si+8],di
 32703 00006AEE 897C08                  	MOV     [SI+user_env.user_SI],DI
 32704                                  	;mov	[si+6],dx
 32705 00006AF1 895406                  	MOV     [SI+user_env.user_DX],DX
 32706 00006AF4 EB95                    	JMP	short SetCXOK
 32707                                  
 32708                                  SPOOL_OPER:
 32709                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 32710                                  
 32711 00006AF6 50                      	push    ax
 32712 00006AF7 B82511                  	mov     ax, 1125h
 32713 00006AFA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 32714                                  			; STACK: WORD subfunction
 32715                                  			; Return: CF set on error, AX = error code
 32716                                  			; STACK unchanged
 32717 00006AFC 5B                      	pop	bx
 32718 00006AFD 7203                    	JC	short func_err2
 32719 00006AFF E999AC                  	jmp	SYS_RET_OK
 32720                                  func_err2:
 32721 00006B02 E99FAC                  	jmp	SYS_RET_ERR
 32722                                  
 32723                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 32724                                  ;--------------------------------------------------------------------------
 32725                                  ;
 32726                                  ; Procedure Name : $SetExtendedError
 32727                                  ;
 32728                                  ; $SetExtendedError takes extended error information and loads it up for the
 32729                                  ; next extended error call.  This is used by interrupt-level proccessors to
 32730                                  ; mask their actions.
 32731                                  ;
 32732                                  ;   Inputs: DS:SI points to DPL which contains all registers
 32733                                  ;   Outputs: none
 32734                                  ;
 32735                                  ;---------------------------------------------------------------------------
 32736                                  
 32737                                  _$SetExtendedError:
 32738                                  
 32739                                  ;hkn; SS override for all variables used
 32740                                  
 32741 00006B05 8B04                    	mov	ax,[si]
 32742                                  	;MOV	AX,[SI+DPL.AX]
 32743 00006B07 36A3[F002]              	MOV	[SS:EXTERR],AX
 32744                                  	;mov	ax,[si+10]
 32745 00006B0B 8B440A                  	MOV	AX,[SI+DPL.DI]
 32746 00006B0E 36A3[F402]              	MOV	[SS:EXTERRPT],AX
 32747                                  	;mov	ax,[si+14]
 32748 00006B12 8B440E                  	MOV	AX,[SI+DPL.ES]
 32749 00006B15 36A3[F602]              	MOV	[SS:EXTERRPT+2],AX
 32750                                  	;mov	ax,[si+2]
 32751 00006B19 8B4402                  	MOV	AX,[SI+DPL.BX]
 32752 00006B1C 36A3[F202]              	MOV	[SS:EXTERR_ACTION],AX
 32753                                  	;mov	ax,[si+4]
 32754 00006B20 8B4404                  	MOV	AX,[SI+DPL.CX]
 32755 00006B23 368826[EF02]            	MOV	[SS:EXTERR_LOCUS],AH
 32756 00006B28 C3                      	retn
 32757                                  
 32758                                  ;============================================================================
 32759                                  ; UTIL.ASM, MSDOS 6.0, 1991
 32760                                  ;============================================================================
 32761                                  ; 05/08/2018 - Retro DOS v3.0
 32762                                  
 32763                                  ;**	Handle related utilities for MSDOS 2.X.
 32764                                  ;
 32765                                  ;	pJFNFromHandle	written
 32766                                  ;	SFFromHandle	written
 32767                                  ;	SFFromSFN	written
 32768                                  ;	JFNFree 	written
 32769                                  ;	SFNFree 	written
 32770                                  ;
 32771                                  ;	Modification history:
 32772                                  ;
 32773                                  ;	    Created: MZ 1 April 1983
 32774                                  
 32775                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 32776                                  
 32777                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 32778                                  ;----------------------------------------------------------------------------
 32779                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 32780                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 32781                                  ;
 32782                                  ;	NOTE:
 32783                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 32784                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 32785                                  ;
 32786                                  ;	ENTRY	(bx) = handle
 32787                                  ;	EXIT	'C' clear if ok
 32788                                  ;		  (es:di) = address of JFN value
 32789                                  ;		'C' set if error
 32790                                  ;		  (ax) = error code
 32791                                  ;	USES	AX, DI, ES, Flags
 32792                                  ;----------------------------------------------------------------------------
 32793                                  
 32794                                  pJFNFromHandle:
 32795 00006B29 2E8E06[FC02]            	MOV	ES,[cs:CurrentPDB]	; get user process data block
 32796                                  	;cmp	bx,[ES:32h]
 32797 00006B2E 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 32798 00006B33 7204                    	JB	short pjfn10		; no, get offset
 32799                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 32800                                  	;mov	al,6
 32801 00006B35 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 32802                                  ReturnCarry:
 32803 00006B37 F9                      	STC                             ; signal error
 32804 00006B38 C3                      	retn				; go back
 32805                                  pjfn10: 
 32806                                  	;les	di,[es:34h]
 32807 00006B39 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 32808 00006B3E 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 32809                                  	;clc
 32810                                  pJFNFromHandle_error:
 32811 00006B40 C3                      	retn
 32812                                  
 32813                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 32814                                  ;----------------------------------------------------------------------------
 32815                                  ;
 32816                                  ; Procedure Name : SFFromHandle
 32817                                  ;
 32818                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 32819                                  ;
 32820                                  ;   Input:      BX has handle
 32821                                  ;   Output:     Carry Set
 32822                                  ;                   AX has error code
 32823                                  ;               Carry Reset
 32824                                  ;                   ES:DI has pointer to SF entry
 32825                                  ;   Registers modified: If error, AX,ES, else ES:DI
 32826                                  ; NOTE:
 32827                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 32828                                  ;       at DOSINIT time with SS NOT DOSGROUP
 32829                                  ;
 32830                                  ;----------------------------------------------------------------------------
 32831                                  
 32832                                  SFFromHandle:
 32833 00006B41 E8E5FF                  	CALL    pJFNFromHandle          ; get jfn pointer
 32834                                  	;retc				; return if error
 32835 00006B44 72FA                    	jc	short pJFNFromHandle_error
 32836 00006B46 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 32837                                  	;JNZ	short GetSF		; nope, suck out SF
 32838                                  	;;mov	al,6
 32839                                  	;MOV	AL,error_invalid_handle ; appropriate error
 32840                                  	;jmp	short ReturnCarry	; signal it
 32841 00006B4A 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 32842                                  GetSF:
 32843 00006B4C 53                      	push	bx			; save handle
 32844 00006B4D 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 32845 00006B50 30FF                    	XOR     BH,BH                   ; ignore upper half
 32846 00006B52 E80200                  	CALL    SFFromSFN               ; get real sf spot
 32847 00006B55 5B                      	pop	bx			; restore
 32848 00006B56 C3                      	retn                          ; say goodbye
 32849                                  
 32850                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 32851                                  
 32852                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 32853                                  ;----------------------------------------------------------------------------
 32854                                  ;	SFFromSfn uses an SFN to index an entry into the SF table.  This
 32855                                  ;	is more than just a simple index instruction because the SF table
 32856                                  ;	can be made up of multiple pieces chained together. We follow the
 32857                                  ;	chain to the right piece and then do the index operation.
 32858                                  ;
 32859                                  ;   NOTE:
 32860                                  ;	This routine is called from SFFromHandle which is called
 32861                                  ;       at DOSINIT time with SS NOT DOSGROUP
 32862                                  ;
 32863                                  ;	ENTRY	BX has SF index
 32864                                  ;	EXIT	'C' clear if OK
 32865                                  ;		  ES:DI points to SF entry
 32866                                  ;		'C' set if index too large
 32867                                  ;	USES	BX, DI, ES
 32868                                  ;----------------------------------------------------------------------------
 32869                                  
 32870                                  SFFromSFN:
 32871 00006B57 2EC43E[2A00]            	LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 32872                                  sfsfn5:	
 32873                                  	;cmp	bx,[es:di+4]
 32874 00006B5C 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 32875 00006B60 720E                    	JB	short sfsfn7		; yes, go grab it
 32876                                  	;sub	bx,[es:di+4]
 32877 00006B62 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 32878 00006B66 26C43D                  	les	di,[es:di] ; 14/08/2018
 32879                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 32880 00006B69 83FFFF                  	CMP     DI,-1                   ; end of tables?
 32881 00006B6C 75EE                    	JNZ	short sfsfn5		; no, try again
 32882 00006B6E F9                      	STC
 32883 00006B6F C3                      	retn				; return with error, not found
 32884                                  sfsfn7:
 32885 00006B70 50                      	push	ax
 32886                                  	;mov	ax,53
 32887                                  	;mov	ax,59 ; MSDOS 6.0
 32888                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 32889 00006B71 B03B                    	mov	al,SF_ENTRY.size ; 28/07/2019
 32890 00006B73 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 32891 00006B75 01C7                    	ADD	DI,AX			; add base of SF block
 32892 00006B77 58                      	pop	ax
 32893                                  	;add	di,6
 32894 00006B78 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 32895 00006B7B C3                      	retn				; return with 'C' clear
 32896                                  
 32897                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 32898                                  
 32899                                  ;**	JFNFree - Find a Free JFN Slot
 32900                                  ;----------------------------------------------------------------------------
 32901                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 32902                                  ;
 32903                                  ;	ENTRY	(ss) = DOSDATA
 32904                                  ;	EXIT	'C' clear if OK
 32905                                  ;		  (bx) = new handle
 32906                                  ;		  (es:di) = pointer to JFN slot
 32907                                  ;		'C' set if error
 32908                                  ;		  (al) = error code
 32909                                  ;	USES	bx, di, es, flags
 32910                                  ;----------------------------------------------------------------------------
 32911                                  
 32912                                  JFNFree:
 32913 00006B7C 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 32914                                  jfnf1:	
 32915 00006B7E E8A8FF                  	CALL	pJFNFromHandle		; get the appropriate handle
 32916 00006B81 7209                    	JC	short jfnf5		; no more handles
 32917 00006B83 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 32918 00006B87 7405                    	je	short jfnfx		; yes, carry is clear
 32919 00006B89 43                      	INC     BX                      ; no, next handle
 32920 00006B8A EBF2                    	JMP	short jfnf1		; and try again
 32921                                  
 32922                                  ;	Error.	'C' set
 32923                                  jfnf5:	
 32924                                  	;mov	al,4
 32925 00006B8C B004                    	MOV	AL,error_too_many_open_files
 32926                                  jfnfx:	
 32927 00006B8E C3                      	retn				; bye
 32928                                  
 32929                                  ;	BREAK <SFNFree - Allocate a free SFN>
 32930                                  
 32931                                  ;**	SFNFree - Allocate a Free SFN/SFT
 32932                                  ;----------------------------------------------------------------------------
 32933                                  ;	SFNFree scans through the sf table looking for a free entry
 32934                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 32935                                  ;
 32936                                  ;	The problem is that we want to mark the SFT busy so that other threads
 32937                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 32938                                  ;	we can't just mark it busy because we may get blown out of our open
 32939                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 32940                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 32941                                  ;	an SFT with this value we look to see if it belongs to this user
 32942                                  ;	and process.  If it does belong to us then it must be an orphan
 32943                                  ;	and we reclaim it.
 32944                                  ;
 32945                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 32946                                  ;		over and over, but we could at least set a high water mark...
 32947                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 32948                                  ;		even though this is not a frequently called routine - jgl
 32949                                  ;
 32950                                  ;	ENTRY	(ss) = DOSDATA
 32951                                  ;	EXIT	'C' clear if no error
 32952                                  ;		  (bx) = SFN
 32953                                  ;		  (es:di) = pointer to SFT
 32954                                  ;		  es:[di].SFT_REF_COUNT = -1
 32955                                  ;		'C' set if error
 32956                                  ;		  (al) = error code
 32957                                  ;	USES	bx, di, es, Flags
 32958                                  ;----------------------------------------------------------------------------
 32959                                  
 32960                                  SFNFree:
 32961                                  	;12/08/2018
 32962                                  	;05/08/2018 - Retro DOS v3.0
 32963                                  	; MSDOS 6.0
 32964 00006B8F 50                      	push	ax
 32965 00006B90 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 32966                                  sfnf5:	
 32967 00006B92 53                      	push	bx
 32968 00006B93 E8C1FF                  	call	SFFromSFN		; get the potential handle
 32969 00006B96 5B                      	pop	bx
 32970 00006B97 723A                    	jc	short sfnf95		; no more free SFNs
 32971 00006B99 26833D00                	cmp	word [ES:DI],0
 32972                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 32973 00006B9D 741D                    	je	short sfnf20			; yep, got one
 32974                                  	
 32975                                  	;cmp	word [es:di],0FFFFh ; -1
 32976 00006B9F 26833DFF                	cmp	word [ES:DI],sf_busy
 32977                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 32978 00006BA3 7403                    	je	short sfnf10		; special busy mark
 32979                                  sfnf7:	
 32980 00006BA5 43                      	inc	bx			; try the next one
 32981 00006BA6 EBEA                    	jmp	short sfnf5
 32982                                  
 32983                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 32984                                  ;	it was abandoned during a earlier call and we can use it.
 32985                                  ;
 32986                                  ;	(bx)	= SFN
 32987                                  ;	(es:di) = pointer to SFT
 32988                                  ;	(TOS)	= caller's (ax)
 32989                                  
 32990                                  sfnf10:	
 32991 00006BA8 36A1[0803]              	mov	ax,[SS:USER_ID]
 32992                                  	;cmp	[es:di+2Fh],ax
 32993 00006BAC 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 32994 00006BB0 75F3                    	jnz	short sfnf7		; not ours
 32995 00006BB2 36A1[0603]              	mov	ax,[SS:PROC_ID]
 32996                                  	;cmp	[es:di+31h],ax
 32997 00006BB6 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 32998 00006BBA 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 32999                                  
 33000                                  ;	We have an SFT to allocate
 33001                                  ;
 33002                                  ;	(bx)	= SFN
 33003                                  ;	(es:di) = pointer to SFT
 33004                                  ;	(TOS)	= caller's (ax)
 33005                                  
 33006                                  sfnf20:
 33007                                  	; cf = 0 ;; Retro DOS v3.0
 33008                                  
 33009                                  	;mov	word [es:di],0FFFFh
 33010 00006BBC 26C705FFFF              	mov	word [ES:DI],sf_busy
 33011                                  					; make sure that this is allocated
 33012                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 33013                                  
 33014 00006BC1 36A1[0803]              	mov	ax,[SS:USER_ID]
 33015                                  	;mov	[es:di+2Fh],ax
 33016 00006BC5 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 33017 00006BC9 36A1[0603]              	mov	ax,[SS:PROC_ID]
 33018                                  	;mov	[es:di+31h],ax
 33019 00006BCD 26894531                	mov	[es:DI+SF_ENTRY.sf_PID],ax
 33020                                  sfnf21: ;; Retro DOS v3.0
 33021 00006BD1 58                      	pop	ax
 33022                                  	;clc
 33023 00006BD2 C3                      	retn				; return with no error
 33024                                  
 33025                                  ;**	Error - no more free SFNs
 33026                                  ;
 33027                                  ;	'C' set
 33028                                  ;	(TOS) = saved ax
 33029                                  
 33030                                  sfnf95: 
 33031 00006BD3 58                      	pop	ax
 33032                                  	;mov	al,4
 33033 00006BD4 B004                    	mov	al,error_too_many_open_files
 33034 00006BD6 C3                      	retn				; return with 'C' and error
 33035                                  
 33036                                  ;============================================================================
 33037                                  ; MACRO.ASM, MSDOS 6.0, 1991
 33038                                  ;============================================================================
 33039                                  ; Retro	DOS v3.0 - 11/07/2018
 33040                                  
 33041                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 33042                                  ;	NAME	MACRO
 33043                                  
 33044                                  ;	Microsoft Confidential
 33045                                  ;	Copyright (C) Microsoft Corporation 1991
 33046                                  ;	All Rights Reserved.
 33047                                  
 33048                                  ;**	MACRO.ASM
 33049                                  ;
 33050                                  ;	$AssignOper
 33051                                  ;	FIND_DPB
 33052                                  ;	InitCDS
 33053                                  ;	$UserOper
 33054                                  ;	GetVisDrv
 33055                                  ;	GetThisDrv
 33056                                  ;	GetCDSFromDrv
 33057                                  ;
 33058                                  ;   Revision history:
 33059                                  ;
 33060                                  ;	Created: MZ 4 April 1983
 33061                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 33062                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 33063                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 33064                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 33065                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 33066                                  ;				    aliasing.
 33067                                  ;
 33068                                  ;   MSDOS performs several types of name translation. First, we maintain for
 33069                                  ;   each valid drive letter the text of the current directory on that drive.
 33070                                  ;   For invalid drive letters, there is no current directory so we pretend to
 33071                                  ;   be at the root. A current directory is either the raw local directory
 33072                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 33073                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 33074                                  ;
 33075                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 33076                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 33077                                  ;   this and all * are expanded into ?'s.
 33078                                  ;
 33079                                  ;   The second part of name translation involves subtree aliasing. A list of
 33080                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 33081                                  ;   the previous 'canonicalization' are then examined to see if any of the
 33082                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 33083                                  ;   replaced with the other subtree in the pair.
 33084                                  ;
 33085                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 33086                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 33087                                  ;   The output of the previous translation is examined to see if any of the
 33088                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 33089                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 33090                                  ;   'mount' one device under another.
 33091                                  ;
 33092                                  ;   The final form of name translation involves the mapping of a user's
 33093                                  ;   logical drive number into the internal physical drive. This is
 33094                                  ;   accomplished by converting the drive number into letter:CON, performing
 33095                                  ;   the above translation and then converting the character back into a drive
 33096                                  ;   number.
 33097                                  ;
 33098                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 33099                                  ;   take a path and form the real text of the pathname with all . and ..
 33100                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 33101                                  ;   TransPath.
 33102                                  ;
 33103                                  ;	A000	version 4.00  Jan. 1988
 33104                                  
 33105                                  ;Installed = TRUE
 33106                                  
 33107                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 33108                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 33109                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 33110                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 33111                                  ;					; current drive)
 33112                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 33113                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 33114                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 33115                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 33116                                  ;	I_need	MYNAME,16		; machine name
 33117                                  ;	I_need	MYNUM,WORD		; machine number
 33118                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 33119                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 33120                                  ;	I_need	DrvErr,BYTE		; drive error
 33121                                  
 33122                                  ;BREAK <$AssignOper -- Set up a Macro>
 33123                                  ;----------------------------------------------------------------------------
 33124                                  ; Inputs:
 33125                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 33126                                  ;	AL = 01 set assign mode 		    (SetMode)
 33127                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 33128                                  ;	AL = 03 Define Macro (attch start)
 33129                                  ;	    BL = Macro type
 33130                                  ;	       = 0 alias
 33131                                  ;	       = 1 file/device
 33132                                  ;	       = 2 drive
 33133                                  ;	       = 3 Char device -> network
 33134                                  ;	       = 4 File device -> network
 33135                                  ;	    DS:SI -> ASCIZ source name
 33136                                  ;	    ES:DI -> ASCIZ destination name
 33137                                  ;	AL = 04 Cancel Macro
 33138                                  ;	    DS:SI -> ASCIZ source name
 33139                                  ;	AL = 05 Modified get attach list entry
 33140                                  ;	AL = 06 Get ifsfunc item
 33141                                  ;	AL = 07 set in_use of a drive's CDS
 33142                                  ;	     DL = drive number, 0=default  0=A,,
 33143                                  ;	AL = 08 reset in_use of a drive's CDS
 33144                                  ;	     DL = drive number, 0=A, 1=B,,,
 33145                                  ; Function:
 33146                                  ;	Do macro stuff
 33147                                  ; Returns:
 33148                                  ;	Std Xenix style error return
 33149                                  ;----------------------------------------------------------------------------
 33150                                  
 33151                                  _$AssignOper:
 33152                                  	; MSDOS 6.0
 33153                                  	;CMP	AL,7			      ; set in_use ?		;AN000;
 33154                                  	;JNZ	short chk08		      ; no			;AN000;
 33155                                  ;srinuse:								;AN000;
 33156                                  	;PUSH	AX			      ; save al 		;AN000;
 33157                                  	;MOV	AL,DL			      ; AL= drive id		;AN000;
 33158                                  	;CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 33159                                  	;POP	AX			      ; 			;AN000;
 33160                                  	;JC	short baddrv		      ; bad drive		;AN000;
 33161                                  	;CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 33162                                  	;JZ	short baddrv		      ;     no			;AN000;
 33163                                  	;CMP	AL,7			      ; set ?			;AN000;
 33164                                  	;JNZ	short resetdrv		      ; no			;AN000;
 33165                                  	;OR	word [SI+curdir.flags],curdir_inuse; set in_use		;AN000;
 33166                                  	;JMP	SHORT okdone		      ; 			;AN000;
 33167                                  ;resetdrv:								;AN000;
 33168                                  	;AND	word [SI+curdir_flags],~curdir_inuse ; reset in_use	;AN000;
 33169                                  	;JMP	SHORT okdone			; 			;AN000;
 33170                                  ;baddrv: 								;AN000;
 33171                                  	;MOV	AX,error_invalid_drive	      ; error			;AN000;
 33172                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 33173                                  ;chk08:									;AN000;
 33174                                  	;CMP	AL,8			      ; reset inuse ?		;AN000;
 33175                                  	;JZ	short srinuse 		      ; yes			;AN000;
 33176                                  
 33177                                  	;IF	NOT INSTALLED
 33178                                  	;transfer NET_ASSOPER
 33179                                  	;ELSE
 33180                                  
 33181                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33182 00006BD7 50                      	PUSH	AX
 33183                                  	;mov	ax,111Eh
 33184                                  	;MOV	AX,(MultNET SHL 8) OR 30
 33185 00006BD8 B81E11                  	mov	ax,(MultNET*256)+30
 33186 00006BDB CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 33187                                  			; SS = DOS CS
 33188                                  			; STACK: WORD function to execute
 33189                                  			; Return: CF set on error, AX = error code
 33190                                  			; STACK unchanged
 33191 00006BDD 5B                      	POP	BX			; Don't zap error code in AX
 33192 00006BDE 7203                    	JC	short ASS_ERR
 33193                                  okdone:
 33194 00006BE0 E9B8AB                  	jmp	SYS_RET_OK
 33195                                  
 33196                                  ASS_ERR:
 33197 00006BE3 E9BEAB                  	jmp	SYS_RET_ERR
 33198                                  
 33199                                  	;ENDIF
 33200                                  
 33201                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 33202                                  ;----------------------------------------------------------------------------
 33203                                  ;**	FIND_DPB - Find a DPB from a Drive #
 33204                                  ;
 33205                                  ;	ENTRY	AL has drive number A = 0
 33206                                  ;	EXIT	'C' set
 33207                                  ;		    No DPB for this drive number
 33208                                  ;		'C' clear
 33209                                  ;		    DS:SI points to DPB for drive
 33210                                  ;	USES	SI, DS, Flags
 33211                                  ;----------------------------------------------------------------------------
 33212                                  
 33213                                  FIND_DPB:
 33214 00006BE6 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 33215                                  fdpb5:	
 33216 00006BEB 83FEFF                  	CMP	SI,-1
 33217 00006BEE 7409                    	JZ	short fdpb10
 33218 00006BF0 3A04                    	cmp	al,[si]
 33219                                  	;CMP	AL,[SI+DPB.DRIVE]
 33220 00006BF2 7406                    	jz	short ret_label15	; Carry clear (retz)
 33221                                  	;lds	si,[si+18h]
 33222 00006BF4 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 33223 00006BF7 EBF2                    	JMP	short fdpb5
 33224                                  
 33225                                  fdpb10:	
 33226 00006BF9 F9                      	STC
 33227                                  
 33228                                  ret_label15:
 33229 00006BFA C3                      	retn
 33230                                  
 33231                                  ;	Break <InitCDS - set up an empty CDS>
 33232                                  ;----------------------------------------------------------------------------
 33233                                  ;**	InitCDS - Setup an Empty CDS
 33234                                  ;
 33235                                  ;	ENTRY	ThisCDS points to CDS
 33236                                  ;		AL has uppercase drive letter
 33237                                  ;	EXIT	ThisCDS is now empty
 33238                                  ;		(ES:DI) = CDS
 33239                                  ;		'C' set if no DPB associated with drive
 33240                                  ;	USES	AH,ES,DI, Flags
 33241                                  ;----------------------------------------------------------------------------
 33242                                  
 33243                                  InitCDS:
 33244                                  	; 19/08/2018
 33245                                  	; 05/08/2018 - Retro DOS v3.0
 33246                                  	; MSDOS 6.0
 33247 00006BFB 50                      	push	ax			; save (AL) for caller
 33248 00006BFC 36C43E[5E05]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 33249                                  	;mov	word [es:di+67],0
 33250 00006C01 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 33251 00006C07 2C40                    	SUB	AL,"A"-1                ; A = 1
 33252 00006C09 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 33253 00006C0E 7236                    	JC	short icdsx		; Drive does not map a physical drive
 33254 00006C10 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 33255 00006C11 50                      	PUSH	AX			; save drive number for later
 33256 00006C12 0441                    	add	al,"A"
 33257 00006C14 B43A                    	MOV	AH,':'
 33258 00006C16 268905                  	mov	[ES:DI],ax
 33259                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 33260                                  	;mov	ax,"\"
 33261                                  	;mov	[es:di+2],ax
 33262                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 33263 00006C19 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 33264                                  	;or	word [es:di+67],4000h
 33265                                  	;or	byte [es:di+68],40h
 33266 00006C1F 26804D4440              	OR	byte [ES:DI+curdir.flags+1],curdir_inuse>>8
 33267 00006C24 29C0                    	sub	ax,ax
 33268                                  	;MOV	[es:di+73],ax ; 0
 33269 00006C26 26894549                	MOV	[ES:DI+curdir.ID],ax
 33270                                  	;mov	[es:di+75],ax ; 0
 33271 00006C2A 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 33272 00006C2E B002                    	mov	al,2
 33273                                  	;mov	[es:di+79],aX ; 2
 33274 00006C30 2689454F                	MOV	[ES:DI+curdir.end],ax
 33275 00006C34 58                      	POP	AX			; (al) = drive number
 33276 00006C35 1E                      	push	ds
 33277 00006C36 56                      	push	si
 33278 00006C37 E8ACFF                  	call	FIND_DPB
 33279 00006C3A 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 33280                                  	;mov	[es:di+69],si
 33281 00006C3C 26897545                	MOV	[ES:DI+curdir.devptr],SI
 33282                                  	;mov	[es:di+71],ds
 33283 00006C40 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 33284                                  icds5:	
 33285 00006C44 5E                      	pop	si
 33286 00006C45 1F                      	pop	ds
 33287                                  icdsx:	
 33288 00006C46 58                      	pop	ax
 33289                                  RET45:
 33290 00006C47 C3                      	retn
 33291                                  
 33292                                  ;Break <$UserOper - get/set current user ID (for net)>
 33293                                  ;----------------------------------------------------------------------------
 33294                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 33295                                  ;	maintain this string and do no verifications.
 33296                                  ;
 33297                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 33298                                  ;				      4-printer-set-flags,5-printer-get-flags)
 33299                                  ;		DS:DX is user string pointer (calls 1,2)
 33300                                  ;		ES:DI is user buffer (call 3)
 33301                                  ;		BX is assign index (calls 2,3,4,5)
 33302                                  ;		CX is user number (call 1)
 33303                                  ;		DX is flag word (call 4)
 33304                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 33305                                  ;			and user CX is set to the user number
 33306                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 33307                                  ;		If AL = 5 then DX is flag word
 33308                                  ;----------------------------------------------------------------------------
 33309                                  
 33310                                  _$UserOper:
 33311                                  	; 05/08/2018 - Retro DOS v3.0
 33312                                  	; MSDOS 6.0 (& MSDOS 3.3)
 33313 00006C48 50                      	PUSH	AX
 33314 00006C49 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 33315 00006C4B 58                      	POP	AX
 33316 00006C4C 7211                    	JB	short UserGet 		; return to user the string
 33317 00006C4E 742E                    	JZ	short UserSet 		; set the current user
 33318 00006C50 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 33319 00006C52 763D                    	JBE	short UserPrint		; yep
 33320                                  	;mov	byte [ss:EXTERR_LOCUS],1
 33321 00006C54 36C606[EF02]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 33322                                  					; Extended Error Locus
 33323                                  	;error	error_invalid_function	; not 0,1,2,3
 33324                                  	;mov	al,1
 33325 00006C5A B001                    	MOV	AL,error_invalid_function
 33326                                  useroper_error:
 33327 00006C5C E945AB                  	JMP	SYS_RET_ERR
 33328                                  
 33329                                  UserGet:
 33330                                  ; Transfer MYNAME to DS:DX
 33331                                  ; Set Return CX to MYNUM
 33332 00006C5F 1E                      	PUSH	DS			; switch registers
 33333 00006C60 07                      	POP	ES
 33334 00006C61 89D7                    	MOV	DI,DX			; destination
 33335 00006C63 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 33336 00006C68 E8DEA9                  	call	Get_User_Stack
 33337 00006C6B 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 33338 00006C6E 16                      	push	ss			; point to DOSDATA
 33339 00006C6F 1F                      	pop	ds
 33340 00006C70 BE[D102]                	MOV	SI,MYNAME		; point source to user string
 33341                                  UserMove:
 33342 00006C73 B90F00                  	MOV	CX,15
 33343 00006C76 F3A4                    	REP	MOVSB			; blam.
 33344 00006C78 31C0                    	XOR	AX,AX			; 16th byte is 0
 33345 00006C7A AA                      	STOSB
 33346                                  UserBye:
 33347 00006C7B E91DAB                  	jmp	SYS_RET_OK		; no errors here
 33348                                  
 33349                                  UserSet:
 33350                                  ; Transfer DS:DX to MYNAME
 33351                                  ; CX to MYNUM
 33352 00006C7E 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 33353 00006C83 89D6                    	MOV	SI,DX			; user space has source
 33354 00006C85 16                      	push	ss
 33355 00006C86 07                      	pop	es
 33356 00006C87 BF[D102]                	MOV	DI,MYNAME		; point dest to user string
 33357 00006C8A 36FE06[D002]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 33358 00006C8F EBE2                    	JMP	short UserMove
 33359                                  
 33360                                  UserPrint:
 33361                                  
 33362                                  ;IF NOT Installed
 33363                                  ;	transfer PRINTER_GETSET_STRING
 33364                                  ;ELSE
 33365 00006C91 50                      	PUSH	AX
 33366                                  	;mov	ax,111Fh
 33367                                  	;MOV	AX,(MultNET SHL 8) OR 31
 33368 00006C92 B81F11                  	mov	ax,(MultNET<<8)|31
 33369 00006C95 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 33370                                  			; STACK: WORD function
 33371                                  			; Return: CF set on error, AX = error code
 33372                                  			; STACK unchanged
 33373 00006C97 5A                      	POP	DX			; Clean stack
 33374 00006C98 7302                    	JNC	short OKPA
 33375 00006C9A EBC0                    	jmp	short useroper_error
 33376                                  OKPA:
 33377 00006C9C EBDD                    	jmp	short UserBye
 33378                                  ;ENDIF
 33379                                  
 33380                                  
 33381                                  ;Break	<GetVisDrv - return visible drive>
 33382                                  ;----------------------------------------------------------------------------
 33383                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 33384                                  ;
 33385                                  ;   Inputs:	AL has drive identifier (0=default)
 33386                                  ;   Outputs:	Carry Set - invalid drive/macro
 33387                                  ;		Carry Clear - AL has physical drive (0=A)
 33388                                  ;		    ThisCDS points to CDS
 33389                                  ;   Registers modified: AL
 33390                                  ;----------------------------------------------------------------------------
 33391                                  
 33392                                  GetVisDrv:
 33393                                  	; 05/08/2018 - Retro DOS v3.0
 33394                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 33395 00006C9E E81400                  	CALL	GETTHISDRV		; get inuse drive
 33396 00006CA1 72A4                    	jc	short RET45
 33397 00006CA3 1E                      	push	ds
 33398 00006CA4 56                      	push	si
 33399 00006CA5 36C536[5E05]            	LDS	SI,[SS:THISCDS]			;smr;SS Override
 33400                                  	;test	word [si+67],2000h
 33401 00006CAA F744430020              	TEST	word [SI+curdir.flags],curdir_splice
 33402 00006CAF 5E                      	pop	si
 33403 00006CB0 1F                      	pop	ds
 33404 00006CB1 7494                    	jz	short RET45		; if not spliced, return OK
 33405                                  	; MSDOS 6.0
 33406                                  	;MOV	[SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 33407                                  	;
 33408 00006CB3 F9                      	STC				; signal error
 33409 00006CB4 C3                      	retn
 33410                                  
 33411                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 33412                                  ;----------------------------------------------------------------------------
 33413                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 33414                                  ;	macro pointer
 33415                                  ;
 33416                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 33417                                  ;   Outputs:
 33418                                  ;		Carry Set - invalid drive/macro
 33419                                  ;		Carry Clear - AL has physical drive (0=A)
 33420                                  ;		   ThisCDS points to macro
 33421                                  ;   Registers modified: AL
 33422                                  ;----------------------------------------------------------------------------
 33423                                  
 33424                                  GETTHISDRV:
 33425                                  	; 05/08/2018
 33426                                  	; 12/07/2018 - Retro DOS v3.0
 33427                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 33428                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33429 00006CB5 08C0                    	OR	AL,AL			; are we using default drive?
 33430 00006CB7 7506                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 33431 00006CB9 36A0[0203]              	MOV	AL,[SS:CURDRV]		; get the current drive
 33432                                  	;INC	ax			; Counteract next instruction
 33433                                  	; 04/09/2018
 33434 00006CBD FEC0                    	inc	al
 33435                                  GTD10:	
 33436                                  	;DEC	ax			; 0 = A
 33437 00006CBF FEC8                    	dec	al
 33438 00006CC1 1E                      	PUSH	DS			; save world
 33439 00006CC2 56                      	PUSH	SI
 33440                                  	;mov	byte [ss:EXTERR_LOCUS],2
 33441 00006CC3 36C606[EF02]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 33442 00006CC9 36F606[2F05]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 33443 00006CCF 7421                    	JZ	SHORT GTD20		; Logical
 33444 00006CD1 50                      	PUSH	AX
 33445 00006CD2 06                      	PUSH	ES
 33446 00006CD3 57                      	PUSH	DI
 33447 00006CD4 36C706[5E05][B704]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 33448 00006CDB 368C0E[6005]            	mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 33449                                  	;MOV	[SS:THISCDS+2],SS	;ThisCDS = &DummyCDS;smr;
 33450 00006CE0 0441                    	ADD	AL,'A'
 33451 00006CE2 E816FF                  	CALL	InitCDS			;	InitCDS(c);
 33452                                  	;test	word [es:di+67],4000h
 33453 00006CE5 26F745430040            	TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 33454 00006CEB 5F                      	POP	DI
 33455 00006CEC 07                      	POP	ES
 33456 00006CED 58                      	POP	AX
 33457 00006CEE 740E                    	JZ	SHORT GTD30		; Not a physical drive.
 33458 00006CF0 EB13                    	JMP	SHORT GTDX		; carry clear
 33459                                  GTD20:
 33460 00006CF2 E81300                  	CALL	GetCDSFromDrv
 33461 00006CF5 7207                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 33462                                  	;test	word [si+43h],4000h
 33463 00006CF7 F744430040              	TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 33464 00006CFC 7507                    	JNZ	SHORT GTDX		; carry clear
 33465                                  GTD30:	
 33466                                  	; 14/08/2018
 33467                                  	;MOV	AL,error_invalid_drive	; invalid FAT drive
 33468                                  	;MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 33469 00006CFE 36C606[EF02]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 33470 00006D04 F9                      	STC
 33471                                  GTDX:	
 33472 00006D05 5E                      	POP	SI			; restore world
 33473 00006D06 1F                      	POP	DS
 33474 00006D07 C3                      	RETN
 33475                                   
 33476                                  
 33477                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 33478                                  ;----------------------------------------------------------------------------
 33479                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 33480                                  ;	pointer, returning an error if the drive number is greater than the
 33481                                  ;	number of CDS's
 33482                                  ;
 33483                                  ;   Inputs:	AL is physical unit # A=0...
 33484                                  ;   Outputs:	Carry Set if Bad Drive
 33485                                  ;		Carry Clear
 33486                                  ;		    DS:SI -> CDS
 33487                                  ;		    [THISCDS] = DS:SI
 33488                                  ;   Registers modified: DS,SI
 33489                                  ;----------------------------------------------------------------------------
 33490                                  
 33491                                  GetCDSFromDrv:
 33492 00006D08 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 33493 00006D0D 7202                    	JB	SHORT GetCDS		; yes, go get the macro
 33494 00006D0F F9                      	STC				; signal error
 33495 00006D10 C3                      	RETN				; bye
 33496                                  GetCDS:
 33497 00006D11 53                      	PUSH	BX
 33498 00006D12 50                      	PUSH	AX
 33499 00006D13 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 33500                                  	;mov	bl,81
 33501 00006D18 B351                    	MOV	BL,curdir.size		; size in convenient spot
 33502 00006D1A F6E3                    	MUL	BL			; get net offset
 33503 00006D1C 01C6                    	ADD	SI,AX			; convert to true pointer
 33504 00006D1E 368936[5E05]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 33505 00006D23 368C1E[6005]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 33506 00006D28 58                      	POP	AX
 33507 00006D29 5B                      	POP	BX
 33508 00006D2A F8                      	CLC				; no error
 33509 00006D2B C3                      	RETN				; bye!
 33510                                  
 33511                                  ;============================================================================
 33512                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 33513                                  ;============================================================================
 33514                                  ; Retro	DOS v3.0 - 12/07/2018
 33515                                  
 33516                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 33517                                  ;----------------------------------------------------------------------------
 33518                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 33519                                  ;       gritty substitution.
 33520                                  ;
 33521                                  ;   Inputs:     DS:DX - pointer to FCB
 33522                                  ;               ES:DI - point to destination
 33523                                  ;   Outputs:    Carry Set - invalid path in final map
 33524                                  ;               Carry Clear - FCB has been mapped into ES:DI
 33525                                  ;                   Sattrib is set from possibly extended FCB
 33526                                  ;                   ExtFCB set if extended FCB found
 33527                                  ;   Registers modified: most
 33528                                  ;----------------------------------------------------------------------------
 33529                                  
 33530                                  TransFCB:
 33531                                  	; 12/07/2018 - Retro DOS v3.0
 33532                                  	;LocalVar FCBTmp,16
 33533                                  	;ENTER
 33534 00006D2C 55                      	push	bp
 33535 00006D2D 89E5                    	mov	bp,sp
 33536                                  	;sub	sp,15	; MSDOS 3.3
 33537 00006D2F 83EC10                  	sub	sp,16	; MSDOS 6.0
 33538 00006D32 16                      	push	ss
 33539 00006D33 07                      	pop	es
 33540 00006D34 06                      	push	es
 33541 00006D35 57                      	push	di
 33542                                  	;lea	di,[bp-15] ; MSDOS 3.3
 33543                                  	;LEA	DI,FCBTmp 
 33544 00006D36 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 33545 00006D39 36C606[2905]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 33546 00006D3F 36C606[2A05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 33547 00006D45 E8E6BC                  	call	GetExtended             ; get FCB, extended or not
 33548 00006D48 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 33549 00006D4A 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 33550 00006D4D 36A2[2A05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 33551 00006D51 36C606[2905]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 33552                                  GetDrive:
 33553 00006D57 AC                      	lodsb				; get drive byte
 33554 00006D58 E85AFF                  	call	GETTHISDRV
 33555 00006D5B 722C                    	jc	short BadPack
 33556 00006D5D E87C03                  	call	TextFromDrive           ; convert 0-based drive to text
 33557                                  ;
 33558                                  ; Scan the source to see if there are any illegal chars
 33559                                  ;
 33560 00006D60 BB[5413]                	mov	bx,CharType		; load lookup table
 33561 00006D63 B90B00                  	mov	cx,11
 33562 00006D66 56                      	push	si			; back over name, ext
 33563                                  FCBScan:
 33564 00006D67 AC                      	lodsb				; get a byte
 33565                                  	; 09/08/2018
 33566                                  	;xlat	byte [es:bx]
 33567 00006D68 26D7                    	es	xlat			; get flags
 33568                                  	;test	al,8	
 33569 00006D6A A808                    	test	al,FFCB
 33570 00006D6C 741B                    	jz	short BadPack
 33571                                  NextCh: 
 33572 00006D6E E2F7                    	loop	FCBScan
 33573 00006D70 5E                      	pop	si
 33574 00006D71 89FB                    	mov	bx,di
 33575 00006D73 E81AC1                  	call	PackName                ; crunch the path
 33576 00006D76 5F                      	pop	di			; get original destination
 33577 00006D77 07                      	pop	es
 33578 00006D78 16                      	push	ss			; get DS addressability
 33579 00006D79 1F                      	pop	ds
 33580                                  	;lea	si,[bp-15] ; MSDOS 3.3
 33581                                  	;LEA	SI,FCBTmp		; point at new pathname
 33582 00006D7A 8D76F0                  	lea	si,[bp-16]
 33583 00006D7D 803F00                  	cmp	byte [bx],0
 33584 00006D80 7407                    	jz	short BadPack
 33585 00006D82 55                      	push	bp
 33586 00006D83 E80E00                  	call	TransPathSet            ; convert the path
 33587 00006D86 5D                      	pop	bp
 33588 00006D87 7303                    	jnc	short FCBRet		; bye with transPath error code
 33589                                  BadPack:
 33590 00006D89 F9                      	STC
 33591                                  	;mov	al,3
 33592 00006D8A B003                    	MOV     AL,error_path_not_found
 33593                                  FCBRet: 
 33594                                  	;LEAVE
 33595 00006D8C 89EC                    	mov	sp,bp
 33596 00006D8E 5D                      	pop	bp
 33597                                  TransPath_retn:
 33598 00006D8F C3                      	retn
 33599                                  
 33600                                  ; 12/07/2018 - Retro DOS v3.0
 33601                                  
 33602                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 33603                                  ;----------------------------------------------------------------------------
 33604                                  ;
 33605                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 33606                                  ;       substitution, insertion of current directory and fixing . and ..
 33607                                  ;       entries. Perform splicing. Allow input string to match splice
 33608                                  ;       exactly.
 33609                                  ;
 33610                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 33611                                  ;       matches splice.
 33612                                  ;
 33613                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 33614                                  ;
 33615                                  ;   The following anomalous behaviour is required:
 33616                                  ;
 33617                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 33618                                  ;       Paths on devices are ignored. (truncate to 0-length)
 33619                                  ;       Raw net I/O sets ThisCDS => NULL.
 33620                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 33621                                  ;
 33622                                  ;   Other behaviour:
 33623                                  ;
 33624                                  ;       ThisCDS set up.
 33625                                  ;       FatRead done on local CDS.
 33626                                  ;       ValidateCDS done on local CDS.
 33627                                  ;
 33628                                  ;   Brief flowchart:
 33629                                  ;
 33630                                  ;       if fSharing then
 33631                                  ;           set up DummyCDS (ThisCDS)
 33632                                  ;           canonicalize (sets cMeta)
 33633                                  ;           splice
 33634                                  ;           fatRead
 33635                                  ;           return
 33636                                  ;       if \\ or d:\\ lead then
 33637                                  ;           set up null CDS (ThisCDS)
 33638                                  ;           canonicalize (sets cMeta)
 33639                                  ;           return
 33640                                  ;       if device then
 33641                                  ;           set up dummyCDS (ThisCDS)
 33642                                  ;           canonicalize (sets cMeta)
 33643                                  ;           return
 33644                                  ;       if file then
 33645                                  ;           getCDS (sets (ThisCDS) from name)
 33646                                  ;           validateCDS (may reset current dir)
 33647                                  ;           Copy current dir
 33648                                  ;           canonicalize (set cMeta)
 33649                                  ;           splice
 33650                                  ;           generate correct CDS (ThisCDS)
 33651                                  ;           if local then
 33652                                  ;               fatread
 33653                                  ;           return
 33654                                  ;
 33655                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 33656                                  ;               DI - point to buffer in DOSDATA
 33657                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 33658                                  ;                   syntax, etc. or user FAILed to I 24.
 33659                                  ;               WFP_Start - points to beginning of buffer
 33660                                  ;               Curr_Dir_End - points to end of current dir in path
 33661                                  ;               DS - DOSDATA
 33662                                  ;   Registers modified: most
 33663                                  ;
 33664                                  ;----------------------------------------------------------------------------
 33665                                  
 33666                                  TransPath:
 33667 00006D90 30C0                    	XOR     AL,AL
 33668 00006D92 EB02                    	JMP     SHORT SetSplice
 33669                                  TransPathSet:
 33670 00006D94 B0FF                    	MOV     AL,-1
 33671                                  SetSplice:
 33672 00006D96 36A2[1603]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 33673 00006D9A B0FF                    	MOV     AL,-1
 33674                                  TransPathNoSet:
 33675 00006D9C 36A2[2E05]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 33676 00006DA0 36C606[3705]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 33677 00006DA6 36893E[6E05]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 33678 00006DAB 36C706[7205]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 33679 00006DB2 16                      	push	ss
 33680 00006DB3 07                      	pop	es
 33681                                  	;lea	bp,[di+134]
 33682 00006DB4 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 33683                                  ;
 33684                                  ; if this is through the server dos call, fsharing is set. We set up a
 33685                                  ; dummy cds and let the operation go.
 33686                                  ;
 33687 00006DB8 36F606[2F05]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 33688 00006DBE 7435                    	JZ	short CheckUNC		; skip to UNC check
 33689                                  ;
 33690                                  ; ES:DI point to buffer
 33691                                  ;
 33692 00006DC0 E80203                  	CALL	DriveFromText           ; get drive and advance DS:SI
 33693 00006DC3 E8EFFE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 33694 00006DC6 722A                    	jc	short NoPath
 33695 00006DC8 E81103                  	CALL	TextFromDrive		; drop in new
 33696 00006DCB 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 33697 00006DCE E83801                  	CALL	Canonicalize            ; copy and canonicalize
 33698 00006DD1 72BC                    	jc	short TransPath_retn	; errors
 33699                                  ;
 33700                                  ; Perform splices for net guys.
 33701                                  ;
 33702 00006DD3 16                      	push	ss
 33703 00006DD4 1F                      	pop	ds
 33704 00006DD5 8B36[6E05]              	MOV     SI,[WFP_START] 		; point to name
 33705 00006DD9 F606[2E05]FF            	TEST	byte [FSPLICE],-1
 33706 00006DDE 7403                    	JZ	short NoServerSplice
 33707 00006DE0 E83602                  	CALL    Splice
 33708                                  NoServerSplice:
 33709 00006DE3 16                      	push	ss
 33710 00006DE4 1F                      	pop	ds                      ; for FATREAD
 33711 00006DE5 C43E[5E05]              	LES     DI,[THISCDS]		; for fatread
 33712 00006DE9 E823B3                  	call	EcritDisk
 33713 00006DEC E8E0F0                  	call	FATREAD_CDS
 33714 00006DEF E825B3                  	call	LcritDisk
 33715                                  NoPath:
 33716                                  	;mov	al,3
 33717 00006DF2 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 33718 00006DF4 C3                      	retn				; any errors are in Carry flag
 33719                                  
 33720                                  ;
 33721                                  ; Let the network decide if the name is for a spooled device. It will map
 33722                                  ; the name if so.
 33723                                  ;
 33724                                  CheckUNC:
 33725 00006DF5 36C706[5E05]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 33726                                  	;CallInstall NetSpoolCheck,MultNET,35
 33727 00006DFC B82311                  	mov	ax,1123h
 33728 00006DFF CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 33729                                  			; DS:SI -> ASCIZ filename to canonicalize
 33730                                  			; ES:DI -> 128-byte buffer for qualified name
 33731                                  			; Return: CF set if not resolved
 33732 00006E01 7329                    	JNC	short UNCDone
 33733                                  ;
 33734                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 33735                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 33736                                  ; input, then the name has been changed to the remote spooler by the above net
 33737                                  ; call. Also, there may be a drive in front of the \\.
 33738                                  ;
 33739                                  NO_CHECK:
 33740 00006E03 E8BF02                  	CALL    DriveFromText		; eat drive letter
 33741 00006E06 50                      	PUSH    AX                      ; save it
 33742 00006E07 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 33743 00006E09 E81DEB                  	call    PATHCHRCMP              ; convert to normal form
 33744 00006E0C 86E0                    	XCHG    AH,AL                   ; swap for second byte
 33745 00006E0E E818EB                  	call    PATHCHRCMP              ; convert to normal form
 33746 00006E11 751F                    	JNZ	short CheckDevice	; not a path char
 33747 00006E13 38C4                    	CMP     AH,AL                   ; are they same?
 33748 00006E15 751B                    	JNZ	short CheckDevice	; nope
 33749                                  ;
 33750                                  ; We have a UNC request. We must copy the string up to the beginning of the
 33751                                  ; local machine root path
 33752                                  ;
 33753                                  
 33754 00006E17 58                      	POP     AX
 33755 00006E18 A5                      	MOVSW                           ; get the lead \\.
 33756                                  UNCCpy:
 33757 00006E19 AC                      	LODSB                           ; get a byte
 33758 00006E1A E8D0EA                   	call	UCase                   ;AN000;; convert the char
 33759 00006E1D 08C0                    	OR      AL,AL
 33760 00006E1F 740E                    	JZ	short UNCTerm		; end of string. All done.
 33761 00006E21 E805EB                  	call    PATHCHRCMP              ; is it a path char?
 33762 00006E24 89FB                    	MOV     BX,DI                   ; backup position
 33763 00006E26 AA                      	STOSB
 33764 00006E27 75F0                    	JNZ	short UNCCpy		; no, go copy
 33765 00006E29 E8DD00                  	CALL    Canonicalize            ; wham (and set cMeta)
 33766                                  UNCDone:
 33767 00006E2C 16                      	push	ss
 33768 00006E2D 1F                      	pop	ds
 33769 00006E2E C3                       	retn				; return error code
 33770                                  UNCTerm:
 33771 00006E2F AA                      	STOSB                           ;AN000;
 33772 00006E30 EBFA                    	JMP	short UNCDone		;AN000;
 33773                                  
 33774                                  CheckDevice:
 33775                                  ;
 33776                                  ; Check DS:SI for device. First eat any path stuff
 33777                                  ;
 33778 00006E32 58                      	POP     AX                      ; retrieve drive info
 33779 00006E33 803C00                  	CMP     BYTE [SI],0		; check for null file
 33780 00006E36 7504                    	JNZ	short CheckPath
 33781                                  	;mov	al,2 
 33782 00006E38 B002                    	MOV     AL,error_file_not_found ; bad file error
 33783 00006E3A F9                      	STC                             ; signal error on null input
 33784 00006E3B C3                      	RETN				; bye!
 33785                                  CheckPath:
 33786 00006E3C 50                      	push	ax
 33787 00006E3D 55                      	push	bp			; save drive number
 33788                                  
 33789                                  	; MSDOS 6.0
 33790                                  ;;;BUGBUG BUG 10-26-1992 scottq
 33791                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 33792                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 33793                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 33794                                  ;;;end up having a 5D in the opcode's displacement field. The
 33795                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 33796                                  ;;;
 33797                                  ;;;What we do here is do a call to a function that is less than 5Dh
 33798                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 33799                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 33800                                  ;;;
 33801                                  ;;;More info:
 33802                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 33803                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 33804                                  ;;;
 33805 00006E3E E82000                  	call	no5Dshere
 33806                                  start5Dhack:
 33807                                  ;following is replaced with 5Dhack code--Invoke  CheckThisDevice         
 33808                                  backfrom5Dhack:
 33809 00006E41 5D                      	pop	bp
 33810 00006E42 58                      	pop	ax			; get drive letter back
 33811 00006E43 731F                    	JNC	short DoFile		; yes we have a file.
 33812                                  ;
 33813                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 33814                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 33815                                  ; call.
 33816                                  ;
 33817 00006E45 36C606[2F05]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 33818 00006E4B E867FE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 33819 00006E4E 36C606[2F05]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 33820                                  ;
 33821                                  ; Now that we have noted that we have a device, we put it into a form that
 33822                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 33823                                  ; string. We relax this to state that if the d:\ is present then the path
 33824                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 33825                                  ; a device.
 33826                                  ;
 33827 00006E54 E88502                  	CALL    TextFromDrive
 33828 00006E57 B02F                    	MOV     AL,'/'                  ; path sep.
 33829 00006E59 AA                      	STOSB
 33830 00006E5A E898B1                  	call	StrCpy			; move remainder of string
 33831                                  
 33832 00006E5D F8                      	CLC                             ; everything OK.
 33833 00006E5E 16                      	push	ss
 33834 00006E5F 1F                      	pop	ds                      ; remainder of OK stuff
 33835                                  DoFile_retn:
 33836 00006E60 C3                      	retn
 33837                                  
 33838                                  no5Dshere:
 33839                                  	; 10/08/2018
 33840 00006E61 E9B3DF                  	jmp	CheckThisDevice		; snoop for device
 33841                                  
 33842                                  ;.erre (no5Dshere - start5Dhack - 5D)
 33843                                  
 33844                                  ;
 33845                                  ; We have a file. Get the raw CDS.
 33846                                  ;
 33847                                  
 33848                                  DoFile:
 33849                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33850                                  
 33851 00006E64 E837FE                  	call	GetVisDrv               ; get proper CDS
 33852                                  	;mov	al,3 
 33853 00006E67 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 33854 00006E69 72F5                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 33855                                  ;
 33856                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 33857                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 33858                                  ; Use the one that we are going to use (ES:DI).
 33859                                  ;
 33860                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 33861 00006E6B 1E                      	push	ds
 33862 00006E6C 56                      	push	si
 33863 00006E6D 06                      	push	es
 33864 00006E6E 57                      	push	di
 33865 00006E6F E8F1DE                  	call	ValidateCDS             ; poke CDS and make everything OK
 33866                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 33867 00006E72 5F                      	pop	di
 33868 00006E73 07                      	pop	es
 33869 00006E74 5E                      	pop	si
 33870 00006E75 1F                      	pop	ds
 33871                                  	;mov	al,3
 33872 00006E76 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 33873                                  	;retc				; someone failed an operation
 33874 00006E78 72E6                    	jc	short DoFile_retn
 33875                                  ;
 33876                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 33877                                  ; current directory. Copy it in.
 33878                                  ;
 33879 00006E7A 1E                      	push	ds
 33880 00006E7B 56                      	push	si
 33881 00006E7C 36C536[5E05]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 33882 00006E81 89FB                    	MOV     BX,DI                   ; point to destination
 33883 00006E83 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 33884                                  ;       LEA     SI,[SI+curdir.text]	; point to text
 33885                                  	;lea	bp,[di+134]
 33886 00006E86 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 33887                                  					;AN000;
 33888 00006E8A E877B1                  	call	FStrCpy                 ; copy string. ES:DI point to end
 33889 00006E8D 4F                      	DEC     DI                      ; point to NUL byte
 33890                                  
 33891                                  ;
 33892                                  ; Make sure that there is a path char at end.
 33893                                  ;
 33894 00006E8E B05C                    	MOV     AL,'\'
 33895 00006E90 263845FF                	CMP     [ES:DI-1],AL
 33896 00006E94 7401                    	JZ	short GetOrig
 33897 00006E96 AA                      	STOSB
 33898                                  ;
 33899                                  ; Now get original string.
 33900                                  ;
 33901                                  GetOrig:
 33902 00006E97 4F                      	DEC     DI                      ; point to path char
 33903 00006E98 5E                      	pop	si
 33904 00006E99 1F                      	pop	ds
 33905                                  ;
 33906                                  ; BX points to the end of the root part of the CDS (at where a path char
 33907                                  ; should be). Now, we decide whether we use this root or extend it with the
 33908                                  ; current directory.  See if the input string begins with a leading ;
 33910 00006E9A E8D100                  	CALL    PathSep                 ; is DS:SI a path sep?
 33911 00006E9D 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 33912 00006E9F 08C0                    	OR      AL,AL                   ; end of string?
 33913 00006EA1 7410                    	JZ	short DoCanon		; yes, skip.
 33914                                  ;
 33915                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 33916                                  ; to this root. Make sure that there is a path char there and advance the
 33917                                  ; source string over all leading \'s.
 33918                                  ;
 33919 00006EA3 89DF                    	MOV     DI,BX                   ; back up to root point.
 33920                                  SkipPath:
 33921 00006EA5 AC                      	LODSB
 33922 00006EA6 E880EA                  	call    PATHCHRCMP
 33923 00006EA9 74FA                    	JZ	short SkipPath
 33924 00006EAB 4E                      	DEC     SI
 33925 00006EAC 08C0                    	OR      AL,AL
 33926 00006EAE 7403                    	JZ	short DoCanon
 33927                                  ;
 33928                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 33929                                  ; for yucks.
 33930                                  ;
 33931                                  PathAssure:
 33932 00006EB0 B05C                    	MOV     AL,'\'
 33933 00006EB2 AA                      	STOSB
 33934                                  ;
 33935                                  ; ES:DI point to the correct spot for canonicalization to begin.
 33936                                  ; BP is the max extent to advance DI
 33937                                  ; BX is the backup limit for ..
 33938                                  ;
 33939                                  DoCanon:
 33940 00006EB3 E85300                  	CALL    Canonicalize            ; wham.
 33941                                  	;retc				; badly formatted path.
 33942 00006EB6 72A8                    	jc	short DoFile_retn
 33943                                  
 33944                                  ;
 33945                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 33946                                  ; to wfp_start and do string substitution. BP is still the max position in
 33947                                  ; buffer.
 33948                                  ;
 33949 00006EB8 16                      	push	ss
 33950 00006EB9 1F                      	pop	ds
 33951 00006EBA 8B3E[6E05]              	MOV     DI,[WFP_START]		; DS:SI point to string
 33952 00006EBE C536[5E05]              	LDS     SI,[THISCDS]		; point to CDS
 33953                                  ;       LEA     SI,[SI+curdir.text]	; point to text
 33954 00006EC2 E81F02                  	CALL    PathPref                ; is there a prefix?
 33955 00006EC5 7514                    	JNZ	short DoSplice		; no, do splice
 33956                                  ;
 33957                                  ; We have a match. Check to see if we ended in a path char.
 33958                                  ;
 33959 00006EC7 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 33960 00006ECA E85CEA                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 33961 00006ECD 740C                    	JZ	short DoSplice		; yes, no current dir here.
 33962                                  Pathline:                               ; 2/13/KK
 33963 00006ECF 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 33964 00006ED3 7406                    	JZ	short DoSplice
 33965 00006ED5 47                      	INC     DI                      ; point to after current path char
 33966 00006ED6 36893E[7205]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 33967                                  ;
 33968                                  ; Splice the result.
 33969                                  ;
 33970                                  DoSplice:
 33971 00006EDB 16                      	push	ss
 33972 00006EDC 1F                      	pop	ds			; back to DOSDATA
 33973 00006EDD 8B36[6E05]              	MOV     SI,[WFP_START]		; point to beginning of string
 33974 00006EE1 31C9                    	XOR     CX,CX
 33975 00006EE3 F606[2E05]FF            	TEST	byte [FSPLICE],-1
 33976 00006EE8 7403                    	JZ	short SkipSplice
 33977 00006EEA E82C01                  	CALL    Splice                  ; replaces in place.
 33978                                  SkipSplice:
 33979                                  ;
 33980                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 33981                                  ; device.
 33982                                  ;
 33983 00006EED 16                      	push	ss
 33984 00006EEE 1F                      	pop	ds
 33985 00006EEF C43E[5E05]              	LES     DI,[THISCDS]		; point to correct drive
 33986                                  	;test	word [es:di+67],8000h
 33987 00006EF3 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 33988 00006EF9 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 33989 00006EFB E30B                    	JCXZ    Done
 33990 00006EFD E80FB2                  	call	EcritDisk
 33991 00006F00 E8CCEF                  	call	FATREAD_CDS
 33992 00006F03 E811B2                  	call	LcritDisk
 33993                                  	;mov	al, 3
 33994 00006F06 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 33995                                  Done:   
 33996 00006F08 C3                      	retn                         ; any errors in carry flag.
 33997                                  
 33998                                  ; 13/07/2018
 33999                                  
 34000                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 34001                                  ;----------------------------------------------------------------------------
 34002                                  ;   Canonicalize - copy path removing . and .. entries.
 34003                                  ;
 34004                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 34005                                  ;               ES:DI - point to buffer
 34006                                  ;               BX - backup limit (offset from ES) points to slash
 34007                                  ;               BP - end of buffer
 34008                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 34009                                  ;                   syntax, etc.
 34010                                  ;               Carry Clear -
 34011                                  ;                   DS:DI - advanced to end of string
 34012                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 34013                                  ;   Registers modified: AX CX DX (in addition to those above)
 34014                                  ;----------------------------------------------------------------------------
 34015                                  
 34016                                  Canonicalize:
 34017                                  ;
 34018                                  ; We copy all leading path separators.
 34019                                  ;
 34020 00006F09 AC                      	LODSB                           ;   while (PathChr (*s))
 34021 00006F0A E81CEA                  	call    PATHCHRCMP
 34022 00006F0D 7507                    	JNZ	short CanonDec
 34023 00006F0F 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 34024 00006F11 7319                    	JAE	short CanonBad		;           goto error;
 34025 00006F13 AA                      	STOSB
 34026 00006F14 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 34027                                  CanonDec:
 34028 00006F16 4E                      	DEC     SI
 34029                                  ;
 34030                                  ; Main canonicalization loop.  We come here with DS:SI pointing to a textual
 34031                                  ; component (no leading path separators) and ES:DI being the destination
 34032                                  ; buffer.
 34033                                  ;
 34034                                  CanonLoop:
 34035                                  ;
 34036                                  ; If we are at the end of the source string, then we need to check to see that
 34037                                  ; a potential drive specifier is correctly terminated with a path sep char.
 34038                                  ; Otherwise, do nothing
 34039                                  ;
 34040 00006F17 31C0                    	XOR     AX,AX
 34041 00006F19 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 34042 00006F1B 751A                    	JNZ	short DoComponent
 34043 00006F1D 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 34044 00006F22 7505                    	JNZ	short DoTerminate
 34045 00006F24 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 34046 00006F26 AA                      	STOSB
 34047 00006F27 88E0                    	MOV     AL,AH
 34048                                  DoTerminate:
 34049 00006F29 AA                      	STOSB                           ;           *d++ = 0;
 34050 00006F2A F8                      	CLC                             ;           return (0);
 34051 00006F2B C3                      	retn
 34052                                  
 34053                                  CanonBad:
 34054 00006F2C E8CE01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 34055                                  	;mov	al,3
 34056 00006F2F B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 34057 00006F31 7402                    	JZ	short PathEnc		; path character encountered in string
 34058                                  	;mov	al,2
 34059 00006F33 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 34060                                  PathEnc:
 34061 00006F35 F9                      	STC
 34062                                  CanonBad_retn:
 34063 00006F36 C3                      	retn
 34064                                  ;
 34065                                  ; We have a textual component that we must copy.  We uppercase it and truncate
 34066                                  ; it to 8.3
 34067                                  ;
 34068                                  DoComponent:                            ;           }
 34069 00006F37 E85100                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 34070 00006F3A 72FA                    	jc	short CanonBad_retn	;           return (-1);
 34071                                  ;
 34072                                  ; We special case the . and .. cases.  These will be backed up.
 34073                                  ;
 34074                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 34075 00006F3C 26833D2E                	CMP	WORD [ES:DI],002Eh
 34076 00006F40 7408                    	JZ	short Skip1
 34077                                  	;CMP	WORD PTR ES:[DI],'..'
 34078 00006F42 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 34079 00006F47 750A                    	JNZ	short CanonNormal
 34080 00006F49 4F                      	DEC     DI                      ;           d--;
 34081                                  Skip1:  
 34082 00006F4A E82B00                  	CALL    SkipBack                ;           SkipBack ();
 34083                                  	;mov	al,3
 34084 00006F4D B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 34085 00006F4F 72E5                    	jc	short CanonBad_retn
 34086 00006F51 EB02                    	JMP     short CanonPath         ;           }
 34087                                  ;
 34088                                  ; We have a normal path.  Advance destination pointer over it.
 34089                                  ;
 34090                                  CanonNormal:                            ;       else
 34091 00006F53 01CF                    	ADD     DI,CX                   ;           d += ct;
 34092                                  ;
 34093                                  ; We have successfully copied a component.  We are now pointing at a path
 34094                                  ; sep char or are pointing at a nul or are pointing at something else.
 34095                                  ; If we point at something else, then we have an error.
 34096                                  ;
 34097                                  CanonPath:
 34098 00006F55 E81600                  	CALL    PathSep
 34099 00006F58 75D2                    	JNZ	short CanonBad		; something else...
 34100                                  ;
 34101                                  ; Copy the first path char we see.
 34102                                  ;
 34103 00006F5A AC                      	LODSB                           ; get the char
 34104 00006F5B E8CBE9                  	call    PATHCHRCMP              ; is it path char?
 34105 00006F5E 75B6                    	JNZ	short CanonDec		; no, go test for nul
 34106 00006F60 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 34107 00006F62 73C8                    	JAE	short CanonBad		; yep, error.
 34108 00006F64 AA                      	STOSB                           ; copy the one byte
 34109                                  ;
 34110                                  ; Skip all remaining path chars
 34111                                  ;
 34112                                  CanonPathLoop:
 34113 00006F65 AC                      	LODSB                           ; get next byte
 34114 00006F66 E8C0E9                  	call    PATHCHRCMP              ; path char again?
 34115 00006F69 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 34116 00006F6B 4E                      	DEC     SI                      ; back up
 34117 00006F6C EBA9                    	JMP	short  CanonLoop	; go copy component
 34118                                  
 34119                                  ;BREAK <PathSep - determine if char is a path separator>
 34120                                  ;----------------------------------------------------------------------------
 34121                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 34122                                  ;   Inputs:     DS:SI - point to a char
 34123                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 34124                                  ;               Zero set if AL is / \ or NUL
 34125                                  ;               Zero reset otherwise
 34126                                  ;   Registers modified: AL
 34127                                  ;----------------------------------------------------------------------------
 34128                                  
 34129                                  PathSep:
 34130 00006F6E 8A04                    	MOV     AL,[SI]                 ; get the character
 34131                                  PathSepGotCh:				; already have character
 34132 00006F70 08C0                    	OR      AL,AL                   ; test for zero
 34133 00006F72 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 34134 00006F74 E8B2E9                  	call    PATHCHRCMP              ; check for path character
 34135 00006F77 C3                      	retn				; and return HIS determination
 34136                                  
 34137                                  ;BREAK <SkipBack - move backwards to a path separator>
 34138                                  ;----------------------------------------------------------------------------
 34139                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 34141                                  ;               BX has current directory back up limit (point to a / \)
 34142                                  ;   Outputs:    ES:DI backed up to point to a path char
 34143                                  ;               AL has char from output ES:DI (path sep if carry clear)
 34144                                  ;               Carry set if illegal backup
 34145                                  ;               Carry Clear if ok
 34146                                  ;   Registers modified: DI,AL
 34147                                  ;----------------------------------------------------------------------------
 34148                                  
 34149                                  SkipBack:
 34150 00006F78 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 34151 00006F7A 720B                    	JB	short SkipBad		;       if (d < dlim)
 34152 00006F7C 4F                      	DEC     DI                      ;           goto err;
 34153 00006F7D 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 34154 00006F80 E8A6E9                  	call    PATHCHRCMP              ;           break;
 34155 00006F83 75F3                    	JNZ	short SkipBack		;       }
 34156 00006F85 F8                      	CLC                             ;   return (0);
 34157 00006F86 C3                      	retn				;
 34158                                  SkipBad:                                ;err:
 34159                                  	;mov	al,3
 34160 00006F87 B003                    	MOV     AL,error_path_not_found ; bad path error
 34161 00006F89 F9                      	STC                             ;   return (-1);
 34162 00006F8A C3                      	retn                          ;
 34163                                  
 34164                                  ;Break <CopyComponent - copy out a file path component>
 34165                                  ;----------------------------------------------------------------------------
 34166                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 34167                                  ;
 34168                                  ;   Inputs:     DS:SI - source path
 34169                                  ;               ES:DI - destination
 34170                                  ;               ES:BP - end of buffer
 34171                                  ;   Outputs:    Carry Set - too long
 34172                                  ;               Carry Clear - DS:SI moved past component
 34173                                  ;                   CX has length of destination
 34174                                  ;   Registers modified: AX,CX,DX
 34175                                  ;----------------------------------------------------------------------------
 34176                                  
 34177                                  CopyComponent:
 34178                                  
 34179                                  %define CopyBP	 [BP]		; word
 34180                                  %define CopyD	 [BP+2]		; dword
 34181                                  %define CopyDoff [BP+2]		; word
 34182                                  %define CopyS	 [BP+6]		; dword
 34183                                  %define CopySoff [BP+6]		; word
 34184                                  %define CopyTemp [BP+10]	; byte
 34185                                  
 34186 00006F8B 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 34187 00006F8E 1E                      	push	ds
 34188 00006F8F 56                      	push	si
 34189 00006F90 06                      	push	es
 34190 00006F91 57                      	push	di
 34191 00006F92 55                      	push	bp
 34192 00006F93 89E5                    	MOV     BP,SP
 34193 00006F95 B42E                    	MOV     AH,'.'
 34194 00006F97 AC                      	LODSB
 34195 00006F98 AA                      	STOSB
 34196 00006F99 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 34197 00006F9B 7518                    	JNZ	short NormalComp
 34198 00006F9D E8CEFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 34199 00006FA0 740B                    	JZ	short NulTerm
 34200                                  TryTwoDot:
 34201 00006FA2 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 34202 00006FA3 AA                      	STOSB
 34203 00006FA4 38E0                    	CMP     AL,AH
 34204 00006FA6 7557                    	JNZ	short CopyBad
 34205 00006FA8 E8C3FF                  	CALL    PathSep
 34206 00006FAB 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 34207                                  NulTerm:                                ;               return -1;
 34208 00006FAD 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 34209 00006FAF AA                      	STOSB
 34210 00006FB0 897606                  	MOV     CopySoff,SI
 34211 00006FB3 EB47                    	JMP     SHORT _GoodRet		;       }
 34212                                  NormalComp:                             ;   else {
 34213 00006FB5 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 34214 00006FB8 E804E9                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 34215 00006FBB 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 34216 00006FBE 743F                    	JZ	short CopyBad		;           return (-1);
 34217 00006FC0 36F606[2F05]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 34218 00006FC6 7510                    	JNZ	short DoPack
 34219 00006FC8 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 34220 00006FCB 360016[3705]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 34221 00006FD0 7F2D                    	JG	short CopyBad		;               return (-1);
 34222 00006FD2 7504                    	JNZ	short DoPack		;           else
 34223 00006FD4 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 34224 00006FD6 742F                    	JZ	short CopyBadPath	;               return (-1);
 34225                                  DoPack:                                 ;           }
 34226 00006FD8 897606                  	MOV     CopySoff,SI ; [bp+6]
 34227 00006FDB 16                      	push	ss
 34228 00006FDC 1F                      	pop	ds
 34229 00006FDD BE[0805]                	MOV     SI,NAME1
 34230 00006FE0 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 34231 00006FE3 57                      	push	di
 34232 00006FE4 E8A9BE                  	call	PackName                ;       PackName (Name1, temp);
 34233 00006FE7 5F                      	pop	di
 34234 00006FE8 E822B0                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 34235 00006FEB 49                      	DEC     CX
 34236 00006FEC 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 34237 00006FEF 3B4E00                  	CMP     CX,CopyBP   ; [bp+0]
 34238 00006FF2 730B                    	JAE	short CopyBad		;           return (-1);
 34239 00006FF4 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 34240 00006FF6 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 34241 00006FF9 E808B0                  	call	FStrCpy
 34242                                  _GoodRet:				;       }
 34243 00006FFC F8                      	CLC
 34244 00006FFD EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 34245                                  CopyBad:
 34246 00006FFF F9                      	STC
 34247 00007000 E8FA00                  	CALL    ScanPathChar            ; check for path chars in rest of string
 34248                                  	;mov	al,2
 34249 00007003 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 34250 00007005 7503                    	JNZ	short CopyEnd
 34251                                  CopyBadPath:
 34252 00007007 F9                      	STC
 34253                                  	;mov	al,3
 34254 00007008 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 34255                                  CopyEnd:
 34256 0000700A 5D                      	pop	bp
 34257 0000700B 5F                      	pop	di
 34258 0000700C 07                      	pop	es
 34259 0000700D 5E                      	pop	si
 34260 0000700E 1F                      	pop	ds
 34261 0000700F 9F                      	LAHF
 34262 00007010 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 34263 00007013 E8F7AF                  	call	StrLen
 34264 00007016 49                      	DEC     CX
 34265 00007017 9E                      	SAHF
 34266 00007018 C3                      	retn
 34267                                  
 34268                                  ;Break <Splice - pseudo mount by string substitution>
 34269                                  ;----------------------------------------------------------------------------
 34270                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 34271                                  ;       ThisCDS to point to physical drive CDS.
 34272                                  ;   Inputs:     DS:SI point to string
 34273                                  ;               NoSetDir = TRUE => exact matches with splice fail
 34274                                  ;   Outputs:    DS:SI points to thisCDS
 34275                                  ;               ES:DI points to DPB
 34276                                  ;               String at DS:SI may be reduced in length by removing prefix
 34277                                  ;               and substituting drive letter.
 34278                                  ;               CX = 0 If no splice done
 34279                                  ;               CX <> 0 otherwise
 34280                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 34281                                  ;                   left alone
 34282                                  ;               ThisDPB points to proper DPB
 34283                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 34284                                  ;----------------------------------------------------------------------------
 34285                                  
 34286                                  Splice:
 34287 00007019 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 34288 0000701F 746A                    	JZ	short AllDone
 34289 00007021 36FF36[5E05]            	push	word [SS:THISCDS]
 34290 00007026 36FF36[6005]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 34291 0000702B 1E                      	push	ds
 34292 0000702C 56                      	push	si
 34293 0000702D 5F                      	pop	di
 34294 0000702E 07                      	pop	es
 34295 0000702F 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 34296                                  SpliceScan:
 34297 00007031 E8D4FC                  	call	GetCDSFromDrv
 34298 00007034 724B                    	JC	short SpliceDone
 34299 00007036 FEC0                    	INC     AL
 34300                                  	;test	word [si+67],2000h
 34301 00007038 F744430020              	TEST    word [SI+curdir.flags],curdir_splice
 34302 0000703D 74F2                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 34303 0000703F 57                      	push	di
 34304 00007040 E8A100                  	CALL    PathPref                ;           if (!PathPref (s, d))
 34305 00007043 7403                    	JZ	short SpliceFound	;
 34306                                  SpliceSkip:
 34307 00007045 5F                      	pop	di
 34308 00007046 EBE9                    	JMP	short SpliceScan	;               continue;
 34309                                  SpliceFound:
 34310 00007048 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 34311 0000704C 7508                    	JNZ	short SpliceDo
 34312 0000704E 36F606[1603]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 34313 00007054 75EF                    	JNZ	short SpliceSkip
 34314                                  SpliceDo:
 34315 00007056 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 34316 00007058 06                      	push	es
 34317 00007059 1F                      	pop	ds
 34318 0000705A 5F                      	pop	di
 34319 0000705B E88000                  	CALL    TextFromDrive1          ;               src = TextFromDrive1(src,i);
 34320 0000705E 36A1[7205]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 34321 00007062 09C0                    	OR      AX,AX
 34322 00007064 7808                    	JS	short NoPoke
 34323 00007066 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 34324 00007068 29F0                    	SUB     AX,SI
 34325 0000706A 36A3[7205]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 34326                                  NoPoke:
 34327 0000706E 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 34328 00007071 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 34329 00007073 B05C                    	MOV     AL,"\"
 34330 00007075 AA                      	STOSB
 34331                                  SpliceCopy:                             ;               strcpy (src, p);
 34332 00007076 E88BAF                  	call	FStrCpy
 34333 00007079 83C404                  	ADD     SP,4                    ; throw away saved stuff
 34334 0000707C 80C901                  	OR      CL,1                    ; signal splice done.
 34335 0000707F EB0C                    	JMP     SHORT DoSet             ;               return;
 34336                                  SpliceDone:                             ;               }
 34337 00007081 368F06[6005]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 34338 00007086 368F06[5E05]            	pop	word [SS:THISCDS]			;smr;SS Override
 34339                                  AllDone:
 34340 0000708B 31C9                    	XOR     CX,CX
 34341                                  DoSet:
 34342 0000708D 36C536[5E05]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 34343                                  	;les	di,[si+69]
 34344 00007092 C47C45                  	LES     DI,[SI+curdir.devptr]	
 34345 00007095 36893E[4605]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 34346 0000709A 368C06[4805]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 34347                                  Splice_retn:
 34348 0000709F C3                      	retn
 34349                                  
 34350                                  ;Break <$NameTrans - partially process a name>
 34351                                  ;----------------------------------------------------------------------------
 34352                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 34353                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 34354                                  ;   to Transpath playing games with devices, we need to insure that the output
 34355                                  ;   has drive letter and : in it.
 34356                                  ;
 34357                                  ;   Inputs:     DS:SI - source string for translation
 34358                                  ;               ES:DI - pointer to buffer
 34359                                  ;   Outputs:
 34360                                  ;       Carry Clear
 34361                                  ;               Buffer at ES:DI is filled in with data
 34362                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 34363                                  ;       Carry Set
 34364                                  ;               AX = error_path_not_found
 34365                                  ;   Registers modified: all
 34366                                  ;----------------------------------------------------------------------------
 34367                                  
 34368                                  _$NameTrans:
 34369 000070A0 1E                      	push	ds
 34370 000070A1 56                      	push	si
 34371 000070A2 06                      	push	es
 34372 000070A3 57                      	push	di
 34373 000070A4 51                      	push	cx ; MSDOS 6.0
 34374                                  	
 34375                                  	; MSDOS 6.0	
 34376                                  ; M027 - Start
 34377                                  ;
 34378                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 34379                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 34380                                  ; device if the old call set the volume attribute bit. Note that devname in
 34381                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 34382                                  ; and restore CX.
 34383                                  ;
 34384 000070A5 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 34385 000070A7 E81C05                  	call	SetAttrib
 34386                                  
 34387                                  ; M027 - End
 34388                                  
 34389                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34390 000070AA BF[8203]                	MOV     DI,OPENBUF
 34391 000070AD E8E0FC                  	CALL    TransPath               ; to translation (everything)
 34392 000070B0 59                      	pop	cx ; MSDOS 6.0
 34393 000070B1 5F                      	pop     di
 34394 000070B2 07                      	pop	es
 34395 000070B3 5E                      	pop     si
 34396 000070B4 1F                      	pop     ds
 34397 000070B5 7303                    	JNC	short TransOK
 34398 000070B7 E9EAA6                  	jmp	SYS_RET_ERR
 34399                                  TransOK:
 34400 000070BA BE[8203]                	MOV     SI,OPENBUF
 34401 000070BD 16                      	push	ss
 34402 000070BE 1F                      	pop	ds
 34403                                  GotText:
 34404 000070BF E842AF                  	call	FStrCpy
 34405 000070C2 E9D6A6                  	jmp	SYS_RET_OK
 34406                                  
 34407                                  ;Break   <DriveFromText - return drive number from a text string>
 34408                                  ;----------------------------------------------------------------------------
 34409                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 34410                                  ;   pointer.
 34411                                  ;
 34412                                  ;   Inputs:     DS:SI point to a text string
 34413                                  ;   Outputs:    AL has drive number
 34414                                  ;               DS:SI advanced
 34415                                  ;   Registers modified: AX,SI.
 34416                                  ;----------------------------------------------------------------------------
 34417                                  
 34418                                  DriveFromText:
 34419 000070C5 30C0                    	XOR     AL,AL                   ;       drive = 0;
 34420 000070C7 803C00                  	CMP     BYTE [SI],0		;       if (*s &&
 34421 000070CA 74D3                    	jz	short Splice_retn
 34422 000070CC 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 34423 000070D0 75CD                    	jnz	short Splice_retn
 34424 000070D2 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 34425 000070D3 0C20                    	OR      AL,20h
 34426                                  	;sub	al,60h
 34427 000070D5 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 34428 000070D7 75C6                    	jnz	short Splice_retn
 34429 000070D9 B0FF                    	MOV     AL,-1                   ; nuke AL...
 34430 000070DB C3                      	retn				;           }
 34431                                  
 34432                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 34433                                  ;----------------------------------------------------------------------------
 34434                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 34435                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 34436                                  ;
 34437                                  ;   Inputs:     AL has 0-based drive number
 34438                                  ;   Outputs:    ES:DI advanced
 34439                                  ;   Registers modified: AX
 34440                                  ;----------------------------------------------------------------------------
 34441                                  
 34442                                  TextFromDrive:
 34443 000070DC FEC0                    	INC     AL
 34444                                  TextFromDrive1:
 34445                                  	;add	al,40h
 34446 000070DE 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 34447 000070E0 B43A                    	MOV     AH,":"                  ;   strcat (d, ":");
 34448 000070E2 AB                      	STOSW
 34449                                  PathPref_retn:
 34450 000070E3 C3                      	retn
 34451                                  
 34452                                  ;Break   <PathPref - see if one path is a prefix of another>
 34453                                  ;----------------------------------------------------------------------------
 34454                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 34455                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 34456                                  ;   prefix: A:\ and A:\FOO
 34457                                  ;
 34458                                  ;   Inputs:     DS:SI potential prefix
 34459                                  ;               ES:DI string
 34460                                  ;   Outputs:    Zero set => prefix found
 34461                                  ;                   DI/SI advanced past matching part
 34462                                  ;               Zero reset => no prefix, DS/SI garbage
 34463                                  ;   Registers modified: CX
 34464                                  ;----------------------------------------------------------------------------
 34465                                  
 34466                                  PathPref:
 34467 000070E4 E834AF                  	call	DStrLen                 ; get length
 34468 000070E7 49                      	DEC     CX                      ; do not include nul byte
 34469 000070E8 F3A6                    	REPZ    CMPSB                   ; compare
 34470 000070EA 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 34471 000070EC 50                      	push	ax			; save char register
 34472 000070ED 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 34473 000070F0 E836E8                  	call    PATHCHRCMP              ; is it a path char (Root!)
 34474 000070F3 7406                    	JZ	short Prefix		; yes, match root (I hope)
 34475                                  NotSep:                                 ; 2/13/KK
 34476 000070F5 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 34477 000070F8 E875FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 34478                                  Prefix:
 34479 000070FB 58                      	pop	ax			; get back original
 34480 000070FC C3                      	retn
 34481                                  
 34482                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 34483                                  ;----------------------------------------------------------------------------
 34484                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 34485                                  ;     a path separator.
 34486                                  ;
 34487                                  ;     Input:    DS:SI target string (null terminated)
 34488                                  ;     Output:   Zero set => path separator encountered in string
 34489                                  ;               Zero clear => null encountered
 34490                                  ;     Registers modified: SI
 34491                                  ;----------------------------------------------------------------------------
 34492                                  
 34493                                  ScanPathChar:
 34494 000070FD AC                      	LODSB                           ; fetch a character
 34495 000070FE E86FFE                  	call    PathSepGotCh
 34496 00007101 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 34497 00007103 E823E8                  	call    PATHCHRCMP              ; path separator?
 34498 00007106 C3                      	retn
 34499                                  
 34500                                  ;============================================================================
 34501                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 34502                                  ;============================================================================
 34503                                  ; 13/07/2018 - Retro DOS v3.0
 34504                                  
 34505                                  ;	BREAK <$Close - return a handle to the system>
 34506                                  ;----------------------------------------------------------------------------
 34507                                  ;
 34508                                  ;**	$Close - Close a file Handle
 34509                                  ;
 34510                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 34511                                  ;		path
 34512                                  ;
 34513                                  ;	Assembler usage:
 34514                                  ;	    MOV     BX, handle
 34515                                  ;	    MOV     AH, Close
 34516                                  ;	    INT     int_command
 34517                                  ;
 34518                                  ;	ENTRY	(bx) = handle
 34519                                  ;	EXIT	<normal INT21 return convention>
 34520                                  ;	USES	all
 34521                                  ;
 34522                                  ;----------------------------------------------------------------------------
 34523                                  
 34524                                  _$CLOSE:
 34525                                  ;	Grab the SFT pointer from the JFN.
 34526                                  
 34527 00007107 E85B02                  	call	CheckOwner		; get system file entry
 34528 0000710A 722B                    	jc	short CloseError	; error return
 34529 0000710C 16                      	push	ss
 34530 0000710D 1F                      	pop	ds			; For DOS_CLOSE
 34531 0000710E 893E[5A05]              	MOV	[THISSFT],DI		; save offset of pointer
 34532 00007112 8C06[5C05]              	MOV	[THISSFT+2],ES		; save segment value
 34533                                  
 34534                                  ; DS:SI point to JFN table entry.
 34535                                  ; ES:DI point to SFT
 34536                                  ;
 34537                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 34538                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 34539                                  ; If the file was not a net FCB, we free the JFN too.
 34540                                  
 34541                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 34542 00007116 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 34543 0000711A 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 34544                                  	;mov	al,[ES:DI+2]
 34545 0000711C 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 34546                                  	;and	al,0F0h
 34547 00007120 24F0                    	AND	AL,SHARING_MASK
 34548                                  	;cmp	al,70h
 34549 00007122 3C70                    	CMP	AL,SHARING_NET_FCB
 34550 00007124 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 34551                                  
 34552                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 34553                                  ; -1.
 34554                                  
 34555                                  FreeJFN:
 34556 00007126 E800FA                  	call	pJFNFromHandle		;   d = pJFN (handle);
 34557 00007129 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 34558                                  PostFree:
 34559                                  
 34560                                  ; ThisSFT is correctly set, we have DS = DOSDATA.  Looks OK for a DOS_CLOSE!
 34561                                  
 34562 0000712D E8FFC9                  	call	DOS_CLOSE
 34563                                  
 34564                                  ; DOS_Close may return an error.  If we see such an error, we report it but
 34565                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 34566                                  
 34567 00007130 7205                    	JC	short CloseError
 34568                                  	;mov	ah,3Eh
 34569 00007132 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 34570 00007134 E964A6                  	jmp	SYS_RET_OK
 34571                                  CloseError:
 34572 00007137 E96AA6                  	jmp	SYS_RET_ERR
 34573                                  
 34574                                  
 34575                                  ;	BREAK <$Commit - commit the file>
 34576                                  ;----------------------------------------------------------------------------
 34577                                  ;
 34578                                  ;**	$Commit - Commit a File
 34579                                  ;
 34580                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 34581                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 34582                                  ;	the directory entry, etc., so this commit is pretty useless.  check
 34583                                  ;	and fix this!! jgl
 34584                                  ;
 34585                                  ;	Assembler usage:
 34586                                  ;	    MOV     BX, handle
 34587                                  ;	    MOV     AH, Commit
 34588                                  ;	    INT     int_command
 34589                                  ;
 34590                                  ;	ENTRY	(bx) = handle
 34591                                  ;	EXIT	none
 34592                                  ;	USES	all
 34593                                  ;;----------------------------------------------------------------------------
 34594                                  
 34595                                  _$COMMIT:
 34596                                  ;	Grab the SFT pointer from the JFN.
 34597                                  
 34598 0000713A E82802                  	call	CheckOwner		; get system file entry
 34599 0000713D 7214                    	JC	short CommitError	; error return
 34600 0000713F 16                      	push	ss
 34601 00007140 1F                      	pop	ds			; For DOS_COMMIT
 34602 00007141 893E[5A05]              	MOV	[THISSFT],DI		; save offset of pointer
 34603 00007145 8C06[5C05]              	MOV	[THISSFT+2],ES		; save segment value
 34604                                  
 34605                                  ;	ThisSFT is correctly set, we have DS = DOSDATA.  Looks OK for a DOS_COMMIT
 34606                                  ;
 34607                                  ;	ES:DI point to SFT
 34608                                  
 34609 00007149 E832CB                  	call	DOS_COMMIT
 34610 0000714C 7205                    	JC	short CommitError
 34611                                  	;mov	ah,68h
 34612 0000714E B468                    	MOV	AH,COMMIT		;
 34613 00007150 E948A6                  	jmp	SYS_RET_OK
 34614                                  CommitError:
 34615 00007153 E94EA6                  	jmp	SYS_RET_ERR
 34616                                  
 34617                                  ;	BREAK <$ExtHandle - extend handle count>
 34618                                  
 34619                                  ;**	$ExtHandle - Extend Handle Count
 34620                                  ;----------------------------------------------------------------------------
 34621                                  ;	Assembler usage:
 34622                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 34623                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 34624                                  ;	    INT     int_command 		 busy )
 34625                                  ;
 34626                                  ;	ENTRY	(bx) = new number of handles
 34627                                  ;	EXIT	'C' clear if OK
 34628                                  ;		'C' set iff err
 34629                                  ;		  (ax) = error code
 34630                                  ;			 AX = error_not_enough_memory
 34631                                  ;			      error_too_many_open_files
 34632                                  ;	USES	all
 34633                                  ;----------------------------------------------------------------------------
 34634                                  
 34635                                  _$ExtHandle:
 34636 00007156 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 34637                                  	;cmp	bx,20
 34638 00007158 83FB14                  	CMP	BX,FILPERPROC
 34639 0000715B 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 34640 0000715D BB1400                  	MOV	BX,FILPERPROC
 34641                                  exth2:	
 34642 00007160 368E06[FC02]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 34643                                  	;mov	cx,[ES:32h]
 34644 00007165 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 34645 0000716A 39CB                    	CMP	BX,CX			; the requested == current
 34646 0000716C 7452                    	JE	short ok_done 		; yes and exit
 34647 0000716E 7722                    	JA	short larger		; go allocate new table
 34648                                  
 34649                                  ;	We're going to shrink the # of handles available
 34650                                  
 34651 00007170 BD0100                  	MOV	BP,1			; shrink
 34652                                  	;mov	ds,[ES:36h]
 34653 00007173 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 34654 00007178 89DE                    	MOV	SI,BX			;
 34655 0000717A 29D9                    	SUB	CX,BX			; get difference
 34656                                  
 34657                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 34658                                  chck_handles:
 34659 0000717C 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 34660 0000717F 7542                    	JNZ	short too_many_files	; status
 34661 00007181 46                      	INC	SI
 34662 00007182 E2F8                    	LOOP	chck_handles
 34663 00007184 83FB14                  	CMP	BX,FILPERPROC		; = 20
 34664 00007187 7709                    	JA	short larger		; no
 34665                                  
 34666 00007189 BD0200                  	MOV	BP,2			; psp
 34667                                  	;mov	di,24
 34668 0000718C BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 34669 0000718F 53                      	PUSH	BX
 34670 00007190 EB1F                    	JMP	short movhandl
 34671                                  
 34672                                  larger:
 34673 00007192 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 34674 00007195 0F848100                	JZ	invalid_func ; 10/08/2018
 34675 00007199 F8                      	CLC
 34676 0000719A 53                      	PUSH	BX			; save requested number
 34677 0000719B 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 34678 0000719E B104                    	MOV	CL,4
 34679                                  	;ror	bx,cl			; MSDOS 3.3
 34680 000071A0 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 34681 000071A2 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 34682                                  
 34683 000071A6 55                      	PUSH	BP
 34684 000071A7 E8E9F6                  	call	_$ALLOC			; allocate memory
 34685 000071AA 5D                      	POP	BP
 34686 000071AB 7267                    	JC	short no_memory		; not enough meory
 34687                                  
 34688 000071AD 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 34689 000071AF 31FF                    	XOR	DI,DI
 34690                                  movhandl:
 34691 000071B1 368E1E[FC02]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 34692                                  
 34693 000071B6 F7C50300                	test	BP,3			; enlarge ?
 34694 000071BA 740C                    	JZ	short enlarge 		; yes
 34695 000071BC 59                      	POP	CX			; cx = the amount you shrink
 34696 000071BD 51                      	PUSH	CX
 34697 000071BE EB0C                    	JMP	short copy_hand
 34698                                  
 34699                                  ;	Done.  'C' clear
 34700                                  
 34701                                  ok_done:
 34702 000071C0 E9D8A5                  	jmp	SYS_RET_OK
 34703                                  
 34704                                  too_many_files:
 34705                                  	;mov	al,4
 34706 000071C3 B004                    	MOV	AL,error_too_many_open_files
 34707 000071C5 E9DCA5                  	jmp	SYS_RET_ERR
 34708                                  
 34709                                  enlarge:
 34710                                  	;mov	cx,[32h]
 34711 000071C8 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 34712                                  copy_hand:
 34713 000071CC 89CA                    	MOV	DX,CX
 34714                                  	;lds	si,[34h]
 34715 000071CE C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 34716 000071D2 F3A4                    	REP	MOVSB			; copy infomation to new table
 34717 000071D4 59                      	POP	CX			; get new number of handles
 34718 000071D5 51                      	PUSH	CX			; save it again
 34719 000071D6 29D1                    	SUB	CX,DX			; get the difference
 34720 000071D8 B0FF                    	MOV	AL,-1			; set availability to handles
 34721 000071DA F3AA                    	REP	STOSB
 34722 000071DC 368E1E[FC02]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 34723                                  	;cmp	word [34h],0
 34724 000071E1 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 34725 000071E6 750D                    	JNZ	short update_info	; yes, go update PDB entries
 34726 000071E8 55                      	PUSH	BP
 34727 000071E9 1E                      	PUSH	DS			; save old table segment
 34728 000071EA 06                      	PUSH	ES			; save new table segment
 34729 000071EB 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 34730 000071EF E8BEF7                  	call	_$DEALLOC		; deallocate old table meomory
 34731 000071F2 07                      	POP	ES			; restore new table segment
 34732 000071F3 1F                      	POP	DS			; restore old table segment
 34733 000071F4 5D                      	POP	BP
 34734                                  
 34735                                  update_info:
 34736 000071F5 F7C50200                	test	BP,2			; psp?
 34737 000071F9 7408                    	JZ	short non_psp 		; no
 34738                                  	;mov	word [34h],18h ; 24
 34739 000071FB C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 34740 00007201 EB06                    	JMP	short final
 34741                                  non_psp:
 34742                                  	;mov	word [34h],0
 34743 00007203 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 34744                                  final:
 34745                                  	;mov	word [36h],es	
 34746 00007209 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 34747                                  	;pop	word [32h]
 34748 0000720D 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 34749 00007211 E987A5                  	jmp	SYS_RET_OK
 34750                                  
 34751                                  no_memory:
 34752 00007214 5B                      	POP	BX			; clean stack
 34753                                  	;mov	al,8
 34754 00007215 B008                    	MOV	AL,error_not_enough_memory
 34755 00007217 E98AA5                  	jmp	SYS_RET_ERR
 34756                                  invalid_func:
 34757                                  	;mov	al,1
 34758 0000721A B001                    	MOV	AL,error_invalid_function
 34759 0000721C E985A5                  	jmp	SYS_RET_ERR
 34760                                  
 34761                                  
 34762                                  ;	BREAK <$READ - Read from a file handle>
 34763                                  ;----------------------------------------------------------------------------
 34764                                  ;
 34765                                  ;**	$Read - Read from a File Handle
 34766                                  ;
 34767                                  ;   Assembler usage:
 34768                                  ;
 34769                                  ;	LDS	DX, buf
 34770                                  ;	MOV	CX, count
 34771                                  ;	MOV	BX, handle
 34772                                  ;	MOV	AH, Read
 34773                                  ;	INT	int_command
 34774                                  ;	  AX has number of bytes read
 34775                                  ;
 34776                                  ;	ENTRY	(bx) = file handle
 34777                                  ;		(cx) = byte count
 34778                                  ;		(ds:dx) = buffer address
 34779                                  ;	EXIT	Through system call return so that to user:
 34780                                  ;		  'C' clear if OK
 34781                                  ;		    (ax) = bytes read
 34782                                  ;		  'C' set if error
 34783                                  ;		    (ax) = error code
 34784                                  ;
 34785                                  ;----------------------------------------------------------------------------
 34786                                  
 34787                                  _$READ:
 34788 0000721F BE[C73E]                	MOV	SI,DOS_READ
 34789                                  ReadDo:
 34790 00007222 E804F9                  	call	pJFNFromHandle
 34791 00007225 7208                    	JC	short ReadError
 34792 00007227 268A05                  	MOV	AL,[ES:DI]
 34793 0000722A E83801                  	call	CheckOwner		; get the handle
 34794 0000722D 7303                    	JNC	short ReadSetup		; no errors do the operation
 34795                                  
 34796                                  ;	Have an error.	'C' set
 34797                                  
 34798                                  ReadError:
 34799 0000722F E972A5                  	jmp	SYS_RET_ERR		; go to error traps
 34800                                  
 34801                                  ReadSetup:
 34802 00007232 36893E[5A05]            	MOV	[SS:THISSFT],DI		; save offset of pointer;smr;SS Override
 34803 00007237 368C06[5C05]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 34804                                  	;;; MSDOS 6.0 
 34805                                  ;; Extended Open
 34806                                  	;;;testb [ES:DI+SF_ENTRY.sf_mode],INT_24_ERROR  ;AN000;;EO. need i24
 34807                                  	;;;JZ	short needi24 		      ;AN000;;EO. yes
 34808                                  	;;;OR	byte [EXTOPEN_ON],EXT_OPEN_I24_OFF 
 34809                                  					;AN000;;EO. set it off;smr;SS Override
 34810                                  needi24:				;AN000;
 34811                                  ;; Extended Open
 34812 0000723C 36FF36[F802]            	push	word [SS:DMAADD]
 34813 00007241 36FF36[FA02]            	push	word [SS:DMAADD+2]	;smr;SS Override
 34814                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 34815                                  	;;; MSDOS 6.0
 34816                                  	;;; CALL Align_Buffer		;AN000;MS. align user's buffer
 34817                                  	; MSDOS 3.3
 34818 00007246 89D3                    	MOV	BX,DX			; copy offset
 34819 00007248 51                      	push	cx			; don't stomp on count
 34820 00007249 B104                    	MOV	CL,4			; bits to shift bytes->para
 34821 0000724B D3EB                    	SHR	BX,CL			; get number of paragraphs
 34822 0000724D 59                      	pop	cx			; get count back
 34823 0000724E 8CD8                    	MOV	AX,DS			; get original segment
 34824 00007250 01D8                    	ADD	AX,BX			; get new segment
 34825 00007252 8ED8                    	MOV	DS,AX			; in seg register
 34826 00007254 83E20F                  	AND	DX,0Fh			; normalize offset
 34827 00007257 368916[F802]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 34828 0000725C 368C1E[FA02]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 34829                                  						;smr;SS Override
 34830                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 34831 00007261 16                      	push	ss			; go for DOS addressability
 34832 00007262 1F                      	pop	ds
 34833                                  
 34834 00007263 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 34835                                  
 34836 00007265 8F06[FA02]              	pop	word [DMAADD+2]
 34837 00007269 8F06[F802]              	pop	word [DMAADD]
 34838                                  	;JNC	short READ_OK		;AN002;
 34839                                  	;JMP	ReadError		;AN002; if error, say bye bye
 34840 0000726D 72C0                    	jc	short ReadError
 34841                                  READ_OK:
 34842 0000726F 89C8                    	MOV	AX,CX			; get correct return in correct reg
 34843 00007271 E927A5                  	jmp	SYS_RET_OK		; successful return
 34844                                  
 34845                                  ; 13/07/2018 - Retro DOS v3.0
 34846                                  
 34847                                  ;   Input: DS:DX points to user's buffer addr
 34848                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 34849                                  ;   Output: [DMAADD] set
 34850                                  
 34851                                  ;Align_Buffer:
 34852                                  ;	MOV	BX,DX			; copy offset
 34853                                  ;	push	cx			; don't stomp on count
 34854                                  ;	MOV	CL,4			; bits to shift bytes->para
 34855                                  ;	SHR	BX,CL			; get number of paragraphs
 34856                                  ;	pop	cx			; get count back
 34857                                  ;	MOV	AX,DS			; get original segment
 34858                                  ;	ADD	AX,BX			; get new segment
 34859                                  ;	MOV	DS,AX			; in seg register
 34860                                  ;	AND	DX,0Fh			; normalize offset
 34861                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 34862                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 34863                                  ;						;smr;SS Override
 34864                                  ;	retn
 34865                                  
 34866                                  ;BREAK <$WRITE - write to a file handle>
 34867                                  ;----------------------------------------------------------------------------
 34868                                  ;
 34869                                  ;   Assembler usage:
 34870                                  ;	    LDS     DX, buf
 34871                                  ;	    MOV     CX, count
 34872                                  ;	    MOV     BX, handle
 34873                                  ;	    MOV     AH, Write
 34874                                  ;	    INT     int_command
 34875                                  ;	  AX has number of bytes written
 34876                                  ;   Errors:
 34877                                  ;	    AX = write_invalid_handle
 34878                                  ;	       = write_access_denied
 34879                                  ;
 34880                                  ;   Returns in register AX
 34881                                  ;
 34882                                  ;----------------------------------------------------------------------------
 34883                                  
 34884                                  _$WRITE:
 34885 00007274 BE[5240]                	MOV	SI,DOS_WRITE
 34886 00007277 EBA9                    	JMP	short ReadDo
 34887                                  
 34888                                  ;BREAK <$LSEEK - move r/w pointer>
 34889                                  ;----------------------------------------------------------------------------
 34890                                  ;
 34891                                  ;   Assembler usage:
 34892                                  ;	    MOV     DX, offsetlow
 34893                                  ;	    MOV     CX, offsethigh
 34894                                  ;	    MOV     BX, handle
 34895                                  ;	    MOV     AL, method
 34896                                  ;	    MOV     AH, LSeek
 34897                                  ;	    INT     int_command
 34898                                  ;	  DX:AX has the new location of the pointer
 34899                                  ;   Error returns:
 34900                                  ;	    AX = error_invalid_handle
 34901                                  ;	       = error_invalid_function
 34902                                  ;   Returns in registers DX:AX
 34903                                  ;
 34904                                  ;----------------------------------------------------------------------------
 34905                                  
 34906                                  _$LSEEK:
 34907 00007279 E8E900                  	call	CheckOwner		; get system file entry
 34908                                  LSeekError:
 34909 0000727C 7302                    	JNC	short CHKOWN_OK		;AN002;
 34910 0000727E EBAF                    	JMP	short ReadError		;AN002; error return
 34911                                  
 34912                                  CHKOWN_OK:				;AN002;
 34913 00007280 3C02                    	CMP	AL,2			; is the seek value correct?
 34914 00007282 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 34915                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 34916 00007284 36C606[EF02]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 34917                                  					;smr;SS Override
 34918                                  	;mov	al,1
 34919 0000728A B001                    	mov	al, error_invalid_function ; invalid method
 34920 0000728C EBA1                    	jmp	short ReadError
 34921                                  LSeekDisp:
 34922 0000728E 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 34923 00007290 720A                    	JB	short LSeekStore	; just store CX:DX
 34924 00007292 771C                    	JA	short LSeekEOF		; seek from end of file
 34925                                  	;add	dx,[es:di+21]
 34926 00007294 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 34927                                  	;adc	cx,[es:di+23]
 34928 00007298 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 34929                                  LSeekStore:
 34930 0000729C 89C8                    	MOV	AX,CX			; AX:DX
 34931 0000729E 92                      	XCHG	AX,DX			; DX:AX is the correct value
 34932                                  LSeekSetpos:
 34933                                  	;mov	[es:di+21],ax
 34934 0000729F 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 34935                                  	;mov	[es:di+23],dx
 34936 000072A3 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 34937 000072A7 E89FA3                  	call	Get_User_Stack
 34938                                  	;mov	[si+6],dx
 34939 000072AA 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 34940                                  	;jmp	SYS_RET_OK		; successful return
 34941                                  	; 26/07/2019
 34942 000072AD E9EEA4                  	jmp	SYS_RET_OK_clc
 34943                                  
 34944                                  LSeekEOF:
 34945                                  	;test	word [es:di+5],8000h
 34946 000072B0 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 34947 000072B6 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 34948                                  LOCAL_LSeek:
 34949                                  	;add	dx,[es:di+17]
 34950 000072B8 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 34951                                  	;adc	cx,[es:di+19]
 34952 000072BC 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 34953 000072C0 EBDA                    	JMP	short LSeekStore	; go and set the position
 34954                                  
 34955                                  Check_LSeek_Mode:
 34956                                  	;test	word [es:di+2],8000h
 34957 000072C2 26F745020080            	test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 34958 000072C8 75EE                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 34959                                  	;mov	ax,[es:di+2]
 34960 000072CA 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 34961                                  	;and	ax, 0F0h
 34962 000072CE 25F000                  	AND	AX,SHARING_MASK
 34963                                  	;cmp	ax,40h
 34964 000072D1 83F840                  	CMP	AX,SHARING_DENY_NONE
 34965 000072D4 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 34966                                  	;cmp	ax,30h
 34967 000072D6 83F830                  	CMP	AX,SHARING_DENY_READ
 34968 000072D9 75DD                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 34969                                  NET_LSEEK:
 34970                                  ;	JMP	short LOCAL_LSeek
 34971                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 34972                                  	;CallInstall Net_Lseek,MultNET,33
 34973                                  	;JNC	short LSeekSetPos
 34974                                  
 34975 000072DB B82111                  	mov     ax, 1121h
 34976 000072DE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 34977                                  			; CX:DX = offset (in bytes) from end
 34978                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 34979                                  			; SS = DOS CS
 34980                                  			; Return: CF set on error
 34981                                  			; CF clear if successful, DX:AX = new file position
 34982 000072E0 73BD                    	jnb     short LSeekSetpos
 34983 000072E2 E9BFA4                  	jmp	SYS_RET_ERR
 34984                                  
 34985                                  ;BREAK <FileTimes - modify write times on a handle>
 34986                                  ;----------------------------------------------------------------------------
 34987                                  ;
 34988                                  ;   Assembler usage:
 34989                                  ;	    MOV AH, FileTimes (57H)
 34990                                  ;	    MOV AL, func
 34991                                  ;	    MOV BX, handle
 34992                                  ;	; if AL = 1 then then next two are mandatory
 34993                                  ;	    MOV CX, time
 34994                                  ;	    MOV DX, date
 34995                                  ;	    INT 21h
 34996                                  ;	; if AL = 0 then CX/DX has the last write time/date
 34997                                  ;	; for the handle.
 34998                                  ;
 34999                                  ;	AL=02		 get extended attributes
 35000                                  ;	   BX=handle
 35001                                  ;	   CX=size of buffer (0, return max size )
 35002                                  ;	   DS:SI query list (si=-1, selects all EA)
 35003                                  ;	   ES:DI buffer to hold EA list
 35004                                  ;
 35005                                  ;	AL=03		 get EA name list
 35006                                  ;	   BX=handle
 35007                                  ;	   CX=size of buffer (0, return max size )
 35008                                  ;	   ES:DI buffer to hold name list
 35009                                  ;
 35010                                  ;	AL=04		 set extended attributes
 35011                                  ;	   BX=handle
 35012                                  ;	   ES:DI buffer of EA list
 35013                                  ;
 35014                                  ;
 35015                                  ;   Error returns:
 35016                                  ;	    AX = error_invalid_function
 35017                                  ;	       = error_invalid_handle
 35018                                  ;
 35019                                  ;----------------------------------------------------------------------------
 35020                                  
 35021                                  _$FILE_TIMES:
 35022                                  	; 13/07/2018 - Retro DOS v3.0
 35023                                  
 35024                                  	; MSDOS 3.3
 35025 000072E5 3C02                    	cmp	al,2			; correct subfunction ?
 35026 000072E7 720B                    	jb	short ft1
 35027                                  
 35028                                          ;mov	byte [ss:EXTERR_LOCUS], 1
 35029 000072E9 36C606[EF02]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35030                                  						;SS Overr
 35031                                  	;mov	al,1
 35032 000072EF B001                    	mov	al,error_invalid_function ; give bad return
 35033 000072F1 E9B0A4                  	jmp     SYS_RET_ERR
 35034                                  
 35035                                  	; MSDOS 6.0
 35036                                  	;cmp	al,2			; correct subfunction ?
 35037                                  	;jae	short inval_func
 35038                                  ft1:
 35039 000072F4 E86E00                  	call	CheckOwner		; get sft
 35040 000072F7 7283                    	jc	short LSeekError	; bad handle
 35041                                  
 35042 000072F9 08C0                    	or	al,al			; get time/date ?
 35043 000072FB 7515                    	jnz	short ft_set_time
 35044                                  
 35045                                  ;------ here we get the time & date from the sft for the user
 35046                                  
 35047 000072FD FA                      	cli				; is this cli/sti reqd ? BUGBUG
 35048                                  	;mov	cx,[es:di+13]
 35049 000072FE 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 35050                                  	;mov	dx,[es:di+15]
 35051 00007302 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 35052 00007306 FB                      	sti
 35053 00007307 E83FA3                  	call	Get_User_Stack
 35054                                  	;mov	[si+4],cx
 35055 0000730A 894C04                  	mov	[si+user_env.user_CX],cx
 35056                                  	;mov	[si+6],dx
 35057 0000730D 895406                  	mov	[si+user_env.user_DX],dx
 35058 00007310 EB20                    	jmp	short ok_ret
 35059                                  
 35060                                  ;------ here we set the time in sft
 35061                                  
 35062                                  ft_set_time:
 35063 00007312 E8FAAD                  	call    EcritSFT
 35064                                  	;mov	[es:di+13],cx
 35065 00007315 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 35066                                  	;mov	[es:di+15],dx
 35067 00007319 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 35068                                  
 35069 0000731D 31C0                    	xor	ax, ax
 35070 0000731F 36FF1E[9400]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 35071                                  
 35072                                  ;------ set the flags in SFT entry
 35073                                  	;and	word [es:di+5],0FFBFh
 35074 00007324 26836505BF              	and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 35075                                  							; mark file as dirty
 35076                                  	;or	word [es:di+5],4000h
 35077 00007329 26814D050040            	or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 35078                                  							; ask close not to
 35079                                  							;   bother about date
 35080                                  							;   and time
 35081 0000732F E8E5AD                  	call	LcritSFT
 35082                                  ok_ret:
 35083 00007332 E966A4                  	jmp	SYS_RET_OK
 35084                                  
 35085                                  ;inval_func:
 35086                                  ;	mov	byte [ss:EXTERR_LOCUS], 1
 35087                                  ;	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35088                                  ;						;SS Overr
 35089                                  ;	;mov	al,1
 35090                                  ;	mov	al,error_invalid_function ; give bad return
 35091                                  ;	jmp     SYS_RET_ERR
 35092                                  
 35093                                  ;BREAK <$DUP - duplicate a jfn>
 35094                                  ;----------------------------------------------------------------------------
 35095                                  ;
 35096                                  ;   Assembler usage:
 35097                                  ;	    MOV     BX, fh
 35098                                  ;	    MOV     AH, Dup
 35099                                  ;	    INT     int_command
 35100                                  ;	  AX has the returned handle
 35101                                  ;   Errors:
 35102                                  ;	    AX = dup_invalid_handle
 35103                                  ;	       = dup_too_many_open_files
 35104                                  ;
 35105                                  ;----------------------------------------------------------------------------
 35106                                  
 35107                                  _$DUP:
 35108 00007335 89D8                    	MOV	AX,BX			; save away old handle in AX
 35109 00007337 E842F8                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 35110                                  DupErrorCheck:
 35111 0000733A 7218                    	JC	short DupErr		; nope, bye
 35112 0000733C 06                      	push	es
 35113 0000733D 57                      	push	di			; save away SFT
 35114 0000733E 5E                      	pop	si			; into convenient place DS:SI
 35115 0000733F 1F                      	pop	ds
 35116 00007340 93                      	XCHG	AX,BX			; get back old handle
 35117 00007341 E82100                  	call	CheckOwner		; get sft in ES:DI
 35118 00007344 720E                    	JC	short DupErr		; errors go home
 35119 00007346 E804C4                  	call	DOS_Dup_Direct
 35120 00007349 E8DDF7                  	call	pJFNFromHandle		; get pointer
 35121 0000734C 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 35122 0000734F 881C                    	MOV	[SI],BL			; stuff in new SFT
 35123 00007351 E947A4                  	jmp	SYS_RET_OK		; and go home
 35124                                  DupErr:
 35125 00007354 E94DA4                  	jmp	SYS_RET_ERR
 35126                                  
 35127                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 35128                                  ;----------------------------------------------------------------------------
 35129                                  ;
 35130                                  ;   Assembler usage:
 35131                                  ;	    MOV     BX, fh
 35132                                  ;	    MOV     CX, newfh
 35133                                  ;	    MOV     AH, Dup2
 35134                                  ;	    INT     int_command
 35135                                  ;   Error returns:
 35136                                  ;	    AX = error_invalid_handle
 35137                                  ;
 35138                                  ;----------------------------------------------------------------------------
 35139                                  
 35140                                  _$DUP2:
 35141 00007357 53                      	push	bx
 35142 00007358 51                      	push	cx			; save source
 35143 00007359 89CB                    	MOV	BX,CX			; get one to close
 35144 0000735B E8A9FD                  	call	_$CLOSE			; close destination handle
 35145 0000735E 5B                      	pop	bx
 35146 0000735F 58                      	pop	ax			; old in AX, new in BX
 35147 00007360 E8C6F7                  	call	pJFNFromHandle		; get pointer
 35148 00007363 EBD5                    	JMP	short DupErrorCheck	; check error and do dup
 35149                                  
 35150                                  ;Break	<CheckOwner - verify ownership of handles from server>
 35151                                  ;----------------------------------------------------------------------------
 35152                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 35153                                  ;   process without the process knowing it (delete/rename of open files, for
 35154                                  ;   example), it is possible for the redirector to issue a call to a handle
 35155                                  ;   that it soes not rightfully own.  We check here to make sure that the
 35156                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 35157                                  ;   SFFromHandle to really make sure that the SFT is good.
 35158                                  ;
 35159                                  ;	ENTRY	BX has the handle
 35160                                  ;		User_ID is the current user
 35161                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 35162                                  ;		Carry Set => AX has error code
 35163                                  ;	USES	none
 35164                                  ;----------------------------------------------------------------------------
 35165                                  
 35166                                  CheckOwner:
 35167                                  	; 13/07/2018 - Retro DOS v3.0
 35168                                  
 35169 00007365 E8D9F7                  	call	SFFromHandle
 35170 00007368 720F                    	jc	short co_ret_label	; retc
 35171                                  
 35172 0000736A 50                      	push	ax
 35173                                  
 35174                                  	; MSDOS 6.0
 35175                                  ;SR;
 35176                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 35177                                  ;SR; are shared across multiple VMs in win386.
 35178                                  ;SR;
 35179                                  	;test	byte [IsWin386],1
 35180                                  	;jz	short no_win386		;win386 is not present
 35181                                  	;xor	ax,ax			;set the zero flag
 35182                                  	;jmp	short skip_win386	
 35183                                  
 35184                                  ;no_win386:
 35185 0000736B 36A1[0803]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 35186                                  	;cmp	ax,[es:di+47]
 35187 0000736F 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 35188                                  
 35189                                  ;skip_win386:
 35190 00007373 58                      	pop	ax
 35191                                  	
 35192 00007374 7403                    	jz	short co_ret_label
 35193                                  	
 35194                                  	;mov	al,6
 35195 00007376 B006                    	mov	al,error_invalid_handle
 35196 00007378 F9                      	stc
 35197                                  
 35198                                  co_ret_label:
 35199 00007379 C3                      	retn
 35200                                  
 35201                                  ;============================================================================
 35202                                  ; FILE.ASM, MSDOS 6.0, 1991
 35203                                  ;============================================================================
 35204                                  ; 14/07/2018 - Retro DOS v3.0
 35205                                  
 35206                                  ; MSDOS 2.11
 35207                                  ;BREAK <$Open - open a file handle>
 35208                                  ;----------------------------------------------------------------------------
 35209                                  ;   Assembler usage:
 35210                                  ;           LDS     DX, Name
 35211                                  ;           MOV     AH, Open
 35212                                  ;           MOV     AL, access
 35213                                  ;           INT     int_command
 35214                                  ;
 35215                                  ;       ACCESS          Function
 35216                                  ;       ------          --------
 35217                                  ;       open_for_read   file is opened for reading
 35218                                  ;       open_for_write  file is opened for writing
 35219                                  ;       open_for_both   file is opened for both reading and writing.
 35220                                  ;
 35221                                  ;   Error returns:
 35222                                  ;           AX = error_invalid_access
 35223                                  ;              = error_file_not_found
 35224                                  ;              = error_access_denied
 35225                                  ;              = error_too_many_open_files
 35226                                  ;----------------------------------------------------------------------------
 35227                                  
 35228                                  ; MSDOS 6.0
 35229                                  ;	BREAK <$Open - open a file from a path string>
 35230                                  ;----------------------------------------------------------------------------
 35231                                  ;
 35232                                  ;**	$OPen - Open a File
 35233                                  ;
 35234                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 35235                                  ;	file and and returns a handle
 35236                                  ;
 35237                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 35238                                  ;		(AL) = open mode
 35239                                  ;	EXIT	'C' clear if OK
 35240                                  ;		  (ax) = file handle
 35241                                  ;		'C' set if error
 35242                                  ;		  (ax) = error code
 35243                                  ;	USES	all
 35244                                  ;
 35245                                  ;----------------------------------------------------------------------------
 35246                                  
 35247                                  _$OPEN:       
 35248 0000737A 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 35249                                  _$Open2:
 35250                                  	;mov	ch,16h
 35251 0000737C B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 35252 0000737E E84502                  	call	SetAttrib
 35253 00007381 B9[EF37]                	mov	cx,DOS_OPEN
 35254                                  
 35255                                  	;xor	ah,ah  ; MSDOS 3.3
 35256                                  
 35257 00007384 50                      	push	ax
 35258                                  
 35259                                  ;*	General file open/create code. The $CREATE call and the various
 35260                                  ;	$OPEN calls all come here.
 35261                                  ;
 35262                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 35263                                  ;	path names, etc., and then dispatch to our individual handlers.
 35264                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 35265                                  ;
 35266                                  ;	(TOS) = create mode
 35267                                  ;	(CX) = address of routine to call to do actual function
 35268                                  ;	(DS:DX) = ASCIZ name
 35269                                  ;	SAttrib = Attribute mask
 35270                                  
 35271                                  ;	Get a free SFT and mark it "being allocated"
 35272                                  
 35273                                  AccessFile:
 35274 00007385 E887AD                  	call	EcritSFT
 35275 00007388 E804F8                  	call	SFNFree			; get a free sfn
 35276 0000738B E889AD                  	call	LcritSFT
 35277 0000738E 7214                    	jc	short OpenFailJ		; oops, no free sft's
 35278 00007390 36891E[6605]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 35279 00007395 36893E[5A05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 35280 0000739A 368C06[5C05]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 35281                                  
 35282                                  ;	Find a free area in the user's JFN table.
 35283                                  
 35284 0000739F E8DAF7                  	call	JFNFree			; get a free jfn
 35285 000073A2 7303                    	jnc	short SaveJFN
 35286                                  OpenFailJ:
 35287 000073A4 E98100                  	JMP	OpenFail		; there were free JFNs... try SFN
 35288                                  
 35289                                  SaveJFN:
 35290 000073A7 36893E[6A05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 35291 000073AC 368C06[6C05]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 35292 000073B1 36891E[6805]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 35293                                  
 35294                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 35295                                  ;	reusing the same JFN.
 35296                                  
 35297 000073B6 368B1E[6605]            	MOV	BX,[ss:SFN]					;smr;SS Override
 35298 000073BB 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 35299 000073BE 89D6                    	MOV	SI,DX			; get name in appropriate place
 35300 000073C0 BF[8203]                	MOV	DI,OPENBUF		; appropriate buffer
 35301 000073C3 51                      	push	cx			; save routine to call
 35302 000073C4 E8C9F9                  	call	TransPath		; convert the path
 35303 000073C7 5B                      	pop	bx			; (bx) = routine to call
 35304                                  
 35305 000073C8 36C536[5A05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 35306 000073CD 720A                    	JC	short OpenCleanJ	; no error, go and open file
 35307 000073CF 36803E[3705]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 35308 000073D5 7404                    	JZ	short SetSearch
 35309                                  	;mov	al,2
 35310 000073D7 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 35311                                  OpenCleanJ:
 35312 000073D9 EB3E                    	JMP	short OpenClean
 35313                                  
 35314                                  SetSearch:
 35315 000073DB 58                      	pop	ax			; Mode (Open), Attributes (Create)
 35316                                  
 35317                                  ;	We need to get the new inheritance bits.
 35318                                  
 35319 000073DC 31C9                    	xor	cx,cx
 35320                                  	; MSDOS 6.0
 35321                                  	;mov	[si+2],cx ; 0
 35322 000073DE 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 35323                                  	;mov    [si+51],cx ; 0
 35324 000073E1 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 35325                                  	;
 35326 000073E4 81FB[EF37]              	CMP	BX,DOS_OPEN
 35327 000073E8 7509                    	JNZ	short _DoOper
 35328                                  	;test   al,80h
 35329 000073EA A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 35330 000073EC 7405                    	JZ	short _DoOper ; 10/08/2018
 35331 000073EE 247F                    	AND	AL,7Fh			; mask off inherit bit
 35332                                  	;mov	cx,1000h
 35333 000073F0 B90010                  	MOV	CX,sf_no_inherit
 35334                                  _DoOper:
 35335                                  	;; MSDOS 3.3
 35336                                  	;;mov	word [si+2], 0
 35337                                  	;;mov	word [si+33h], 0
 35338                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 35339                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 35340                                  
 35341                                  	; MSDOS 6.0
 35342                                  ;**	Check if this is an extended open. If so you must set the
 35343                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 35344                                  ;	Set_EXT_mode in creat.asm
 35345                                  
 35346                                  	; MSDOS 6.0
 35347                                  	;;SAVE	<di, es>                ;M022 conditional removed here
 35348                                  	;push	di
 35349                                  	;push	es
 35350                                  	;push	ds
 35351                                  	;pop	es
 35352                                  	;push	si
 35353                                  	;pop	di			; (es:di) = SFT address
 35354                                  	;call	Set_EXT_mode
 35355                                  	;;RESTORE <es, di>
 35356                                  	;pop	es
 35357                                  	;pop	di
 35358                                  
 35359                                  	;Context DS
 35360 000073F3 16                      	push	ss
 35361 000073F4 1F                      	pop	ds	
 35362                                  
 35363 000073F5 51                      	push	cx
 35364 000073F6 FFD3                    	CALL	BX			; blam!
 35365 000073F8 59                      	pop	cx
 35366 000073F9 C536[5A05]              	LDS	SI,[THISSFT]
 35367                                  	;JC	short OpenE2		;AN000;FT. chek extended open hooks first
 35368 000073FD 721B                    	jc	short OpenE ; MSDOS 3.3
 35369                                  
 35370                                  ;	The SFT was successfully opened. Remove busy mark.
 35371                                  
 35372                                  OpenOK:
 35373                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 35374 000073FF C7040100                	mov	word [SI],1
 35375                                  	;or	[SI+5],cx
 35376 00007403 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 35377                                  
 35378                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 35379                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 35380                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 35381                                  ;
 35382                                  ; Since this is only relevant on sharer systems, we stick this code into the
 35383                                  ; sharer.
 35384                                  
 35385 00007406 36A1[6805]              	MOV	AX,[ss:JFN]				;smr;SS Override
 35386 0000740A 36FF1E[8C00]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 35387                                  
 35388 0000740F 36C706[6605]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 35389 00007416 E982A3                  	jmp	SYS_RET_OK		; bye with no errors
 35390                                  
 35391                                  	; MSDOS 6.0
 35392                                  ;Extended Open hooks check
 35393                                  ;OpenE2:					;AN000;;EO.
 35394                                  ;	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 35395                                  ;	JNZ	short OpenE		;AN000;;EO. no.
 35396                                  ;	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 35397                                  
 35398                                  ;	Extended Open hooks check
 35399                                  ;
 35400                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 35401                                  
 35402                                  OpenClean:
 35403 00007419 5B                      	pop	bx			; clean off stack
 35404                                  OpenE:
 35405                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 35406 0000741A C7040000                	mov	word [SI],0
 35407 0000741E 36C536[6A05]            	LDS	SI,[ss:PJFN]				;smr;SS Override
 35408 00007423 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 35409 00007426 EB02                    	JMP	SHORT OpenCritLeave
 35410                                  
 35411                                  OpenFail:
 35412 00007428 FB                      	STI
 35413 00007429 59                      	pop	cx			; Clean stack
 35414                                  OpenCritLeave:
 35415 0000742A 36C706[6605]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 35416                                  
 35417                                  	; MSDOS 6.0
 35418                                  ;; File Tagging DOS 4.00
 35419                                  ;	CMP	[SS:EXTERR],error_Code_Page_Mismatched 
 35420                                  ;				;AN000;;FT. code page mismatch;smr;SS Override
 35421                                  ;	JNZ	short NORERR	  	;AN000;;FT. no
 35422                                  ;	jmp	From_GetSet		;AN000;;FT. yes
 35423                                  ;NORERR: 				;AN000;
 35424                                  ;; File Tagging DOS 4.00
 35425                                  
 35426 00007431 E970A3                  	jmp	SYS_RET_ERR		; no free, return error
 35427                                  
 35428                                  ; MSDOS 2.11
 35429                                  ;BREAK <$CREAT - creat a new file and open him for input>
 35430                                  ;----------------------------------------------------------------------------
 35431                                  ;   Assembler usage:
 35432                                  ;           LDS     DX, name
 35433                                  ;           MOV     AH, Creat
 35434                                  ;           MOV     CX, access
 35435                                  ;           INT     21h
 35436                                  ;       ; AX now has the handle
 35437                                  ;
 35438                                  ;   Error returns:
 35439                                  ;           AX = error_access_denied
 35440                                  ;              = error_path_not_found
 35441                                  ;              = error_too_many_open_files
 35442                                  ;----------------------------------------------------------------------------
 35443                                  
 35444                                  ; MSDOS 6.0
 35445                                  ;	BREAK <$Creat - create a brand-new file>
 35446                                  ;----------------------------------------------------------------------------
 35447                                  ;
 35448                                  ;**	$Creat - Create a File
 35449                                  ;
 35450                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 35451                                  ;	initial attributes contained in CX
 35452                                  ;
 35453                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 35454                                  ;		(CX) = initial attributes
 35455                                  ;	EXIT	'C' set if error
 35456                                  ;		  (ax) = error code
 35457                                  ;		'C' clear if OK
 35458                                  ;		  (ax) = file handle
 35459                                  ;	USES	all
 35460                                  ;
 35461                                  ;----------------------------------------------------------------------------
 35462                                  
 35463                                  _$CREAT:
 35464 00007434 51                      	push	cx			; Save attributes on stack
 35465 00007435 B9[5937]                	mov	CX,DOS_CREATE		; routine to call
 35466                                  AccessSet:
 35467                                  	;mov	byte [ss:SATTRIB],6
 35468 00007438 36C606[2A05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 35469                                  	; 10/08/2018
 35470 0000743E E944FF                  	JMP	AccessFile		; use good ol' open
 35471                                  
 35472                                  
 35473                                  ; MSDOS 6.0 (MSDOS 3.3)
 35474                                  ;	BREAK <$CHMOD - change file attributes>
 35475                                  ;----------------------------------------------------------------------------
 35476                                  ;
 35477                                  ;**	$CHMOD - Change File Attributes
 35478                                  ;
 35479                                  ;   Assembler usage:
 35480                                  ;	    LDS     DX, name
 35481                                  ;	    MOV     CX, attributes
 35482                                  ;	    MOV     AL,func (0=get, 1=set)
 35483                                  ;	    INT     21h
 35484                                  ;   Error returns:
 35485                                  ;	    AX = error_path_not_found
 35486                                  ;	    AX = error_access_denied
 35487                                  ;
 35488                                  ;----------------------------------------------------------------------------
 35489                                  
 35490                                  _$CHMOD:
 35491                                  	; 05/08/2018 - Retro DOS v3.0
 35492                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 35493 00007441 BF[8203]                	MOV	DI,OPENBUF		; appropriate buffer
 35494 00007444 50                      	push	ax
 35495 00007445 51                      	push	cx			; save function and attributes
 35496 00007446 89D6                    	MOV	SI,DX			; get things in appropriate places
 35497 00007448 E849F9                  	call	TransPathSet		; get correct path
 35498 0000744B 59                      	pop	cx
 35499 0000744C 58                      	pop	ax			; and get function and attrs back
 35500 0000744D 7235                    	JC	short ChModErr		; errors get mapped to path not found
 35501 0000744F 16                      	push	ss			; set up for later possible calls
 35502 00007450 1F                      	pop	ds
 35503 00007451 803E[3705]FF            	CMP	byte [CMETA],-1
 35504 00007456 752C                    	JNZ	short ChModErr
 35505                                  	;mov	byte [SATTRIB],16h
 35506 00007458 C606[2A05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 35507 0000745D 2C01                    	SUB	AL,1			; fast way to discriminate
 35508 0000745F 720B                    	JB	short ChModGet		; 0 -> go get value
 35509 00007461 7417                    	JZ	short ChModSet		; 1 -> go set value
 35510                                  	;mov	byte [EXTERR_LOCUS],1
 35511 00007463 C606[EF02]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35512                                  	;mov	al,1
 35513 00007468 B001                    	mov	al,error_invalid_function ; bad value
 35514                                  	;jmp	SYS_RET_ERR
 35515 0000746A EB1A                    	jmp	short ChModE	
 35516                                  ChModGet:
 35517 0000746C E8F1C1                  	call	GET_FILE_INFO		; suck out the ol' info
 35518 0000746F 7215                    	JC	short ChModE		; error codes are already set for ret
 35519 00007471 E8D5A1                  	call	Get_User_Stack		; point to user saved vaiables
 35520                                  	;mov	[SI+4],ax
 35521 00007474 894404                  	MOV	[SI+user_env.user_CX],AX  ; return the attributes
 35522                                  	;jmp	SYS_RET_OK		; say sayonara
 35523                                  	; 26/07/2019
 35524 00007477 E924A3                  	jmp	SYS_RET_OK_clc
 35525                                  ChModSet:
 35526 0000747A 89C8                    	MOV	AX,CX			; get attrs in position
 35527 0000747C E842C2                  	call	SET_FILE_ATTRIBUTE	; go set
 35528 0000747F 7205                    	JC	short ChModE		; errors are set
 35529 00007481 E917A3                  	jmp	SYS_RET_OK
 35530                                  ChModErr:
 35531                                  	;mov	al, 3
 35532 00007484 B003                    	mov	al,error_path_not_found
 35533                                  ChModE:
 35534 00007486 E91BA3                  	jmp	SYS_RET_ERR
 35535                                  
 35536                                  ;	BREAK <$UNLINK - delete a file entry>
 35537                                  ;----------------------------------------------------------------------------
 35538                                  ;
 35539                                  ;**	$UNLINK - Delete a File
 35540                                  ;
 35541                                  ;
 35542                                  ;	Assembler usage:
 35543                                  ;	    LDS     DX, name
 35544                                  ;	    IF VIA SERVER DOS CALL
 35545                                  ;	     MOV     CX,SEARCH_ATTRIB
 35546                                  ;	    MOV     AH, Unlink
 35547                                  ;	    INT     21h
 35548                                  ;
 35549                                  ;	ENTRY	(ds:dx) = path name
 35550                                  ;		(cx) = search_attribute, if via server_dos
 35551                                  ;	EXIT	'C' clear if no error
 35552                                  ;		'C' set if error
 35553                                  ;		  (ax) = error code
 35554                                  ;			= error_file_not_found
 35555                                  ;			= error_access_denied
 35556                                  ;
 35557                                  ;----------------------------------------------------------------------------
 35558                                  
 35559                                  _$UNLINK:
 35560 00007489 51                      	push	cx			; Save possible CX input parm
 35561 0000748A 89D6                    	MOV	SI,DX			; Point at input string
 35562 0000748C BF[8203]                	MOV	DI,OPENBUF		; temp spot for path
 35563 0000748F E802F9                  	call	TransPathSet		; go get normalized path
 35564 00007492 59                      	pop	cx
 35565 00007493 72EF                    	JC	short ChModErr		; badly formed path
 35566 00007495 36803E[3705]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 35567 0000749B 750F                    	JNZ	short NotFound
 35568 0000749D 16                      	push	ss
 35569 0000749E 1F                      	pop	ds
 35570                                  	;mov	ch,6
 35571 0000749F B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 35572 000074A1 E82201                  	call	SetAttrib
 35573 000074A4 E836BE                  	call	DOS_DELETE		; remove that file
 35574 000074A7 7205                    	JC	short UnlinkE 		; error is there
 35575 000074A9 E9EFA2                  	jmp	SYS_RET_OK		; okey doksy
 35576                                  NotFound:
 35577                                  	;mov	al, 3
 35578 000074AC B003                    	MOV	AL,error_path_not_found
 35579                                  UnlinkE:
 35580 000074AE E9F3A2                  	jmp	SYS_RET_ERR		; bye
 35581                                  
 35582                                  ;BREAK <$RENAME - move directory entries around>
 35583                                  ;----------------------------------------------------------------------------
 35584                                  ;
 35585                                  ;   Assembler usage:
 35586                                  ;	    LDS     DX, source
 35587                                  ;	    LES     DI, dest
 35588                                  ;	    IF VIA SERVER DOS CALL
 35589                                  ;	     MOV     CX,SEARCH_ATTRIB
 35590                                  ;	    MOV     AH, Rename
 35591                                  ;	    INT     21h
 35592                                  ;
 35593                                  ;   Error returns:
 35594                                  ;	    AX = error_file_not_found
 35595                                  ;	       = error_not_same_device
 35596                                  ;	       = error_access_denied
 35597                                  ;
 35598                                  ;----------------------------------------------------------------------------
 35599                                  
 35600                                  _$RENAME:
 35601                                  	; MSDOS 3.3 (& MSDOS 6.0)
 35602 000074B1 51                      	push	cx
 35603 000074B2 1E                      	push	ds
 35604 000074B3 52                      	push	dx			; save source and possible CX arg
 35605 000074B4 06                      	PUSH	ES
 35606 000074B5 1F                      	POP	DS			; move dest to source
 35607 000074B6 89FE                    	MOV	SI,DI			; save for offsets
 35608 000074B8 BF[0204]                	MOV	DI,RENBUF
 35609 000074BB E8D6F8                  	call	TransPathSet		; munge the paths
 35610 000074BE 36FF36[6E05]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 35611 000074C3 368F06[7005]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 35612 000074C8 5E                      	pop	si
 35613 000074C9 1F                      	pop	ds
 35614 000074CA 59                      	pop	cx			; get back source and possible CX arg
 35615                                  epjc2:	
 35616 000074CB 72B7                    	JC	short ChModErr		; get old error
 35617 000074CD 36803E[3705]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 35618 000074D3 75D7                    	JNZ	short NotFound
 35619 000074D5 51                      	push	cx			; Save possible CX arg
 35620 000074D6 BF[8203]                	MOV	DI,OPENBUF		; appropriate buffer
 35621 000074D9 E8B8F8                  	call	TransPathSet		; wham
 35622 000074DC 59                      	pop	cx
 35623 000074DD 72EC                    	JC	short epjc2
 35624 000074DF 16                      	push	ss
 35625 000074E0 1F                      	pop	ds
 35626 000074E1 803E[3705]FF            	CMP	byte [CMETA],-1
 35627 000074E6 72C4                    	JB	short NotFound
 35628                                  
 35629                                  	; MSDOS 6.0
 35630 000074E8 FF36[5E05]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 35631 000074EC FF36[6005]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 35632 000074F0 BF[8203]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 35633 000074F3 16                      	PUSH	SS			   ;AN000;;MS.
 35634 000074F4 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 35635 000074F5 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 35636                                  rnloop: 				   ;AN000;
 35637 000074F7 E80EF8                  	call	GetCDSFromDrv		   ;AN000;;MS.
 35638 000074FA 7211                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 35639 000074FC E8D8AA                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 35640 000074FF 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 35641 00007501 FEC0                    	INC	AL			   ;AN000;;MS.	next
 35642 00007503 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 35643                                  rnerr:					   ;AN000;
 35644 00007505 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 35645                                  	;error	error_current_directory    ;AN000;;MS.
 35646 00007508 B010                    	mov	al,error_current_directory 
 35647 0000750A E997A2                  	jmp	SYS_RET_ERR
 35648                                  dorn:					   ;AN000;
 35649 0000750D 368F06[6005]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 35650 00007512 368F06[5E05]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 35651                                  
 35652 00007517 16                      	push	ss
 35653 00007518 1F                      	pop	ds
 35654                                  
 35655                                  	; MSDOS 3.3 (& MSDOS 6.0)
 35656                                  	;mov	ch,16h
 35657 00007519 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 35658                                  					; rename appropriate files
 35659 0000751B E8A800                  	call	SetAttrib
 35660 0000751E E867BF                  	call	DOS_RENAME		; do the deed
 35661 00007521 728B                    	JC	short UnlinkE 		; errors
 35662                                  
 35663 00007523 E975A2                  	jmp	SYS_RET_OK
 35664                                  
 35665                                  
 35666                                  ; 14/07/2018 - Retro DOS v3.0
 35667                                  ; MSDOS 3.3 (& MSDOS 6.0)
 35668                                  
 35669                                  ;Break <$CreateNewFile - Create a new directory entry>
 35670                                  ;----------------------------------------------------------------------------
 35671                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 35672                                  ;	was no previous directory entry, and fail if a directory entry with
 35673                                  ;	the same name existed previously.
 35674                                  ;
 35675                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 35676                                  ;		CX contains default file attributes
 35677                                  ;   Outputs:	Carry Clear:
 35678                                  ;		    AX has file handle opened for read/write
 35679                                  ;		Carry Set:
 35680                                  ;		    AX has error code
 35681                                  ;   Registers modified: All
 35682                                  ;----------------------------------------------------------------------------
 35683                                  
 35684                                  _$CreateNewFile:
 35685 00007526 51                      	push	cx			; Save attributes on stack
 35686 00007527 B9[EA37]                	MOV	CX,DOS_Create_New	; routine to call
 35687 0000752A E90BFF                  	JMP	AccessSet		; use good ol' open
 35688                                  
 35689                                  ;**	BinToAscii - convert a number to a string.
 35690                                  ;----------------------------------------------------------------------------
 35691                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 35692                                  ;	This routine is used to generate temp file names so we don't spend
 35693                                  ;	the time and code needed for a true hex number, we just use
 35694                                  ;	A thorugh O.
 35695                                  ;
 35696                                  ;	ENTRY	(ax) = value
 35697                                  ;		(es:di) = destination
 35698                                  ;	EXIT	(es:di) updated by 4
 35699                                  ;	USES	cx, di, flags
 35700                                  ;----------------------------------------------------------------------------
 35701                                  
 35702                                  ; MSDOS 3.3
 35703                                  ;BinToAscii:
 35704                                  ;	mov     cx,4
 35705                                  ;bta5:
 35706                                  ;	push    cx
 35707                                  ;	mov     cl,4
 35708                                  ;	rol     ax,cl
 35709                                  ;	push    ax
 35710                                  ;	and     al,0Fh
 35711                                  ;	add     al,'0'
 35712                                  ;	cmp     al,'9'
 35713                                  ;	jbe     short bta6
 35714                                  ;	add     al,7
 35715                                  ;bta6: 
 35716                                  ;	stosb
 35717                                  ;	pop     ax
 35718                                  ;	pop     cx
 35719                                  ;	loop    bta5
 35720                                  ;	retn
 35721                                  
 35722                                  ; MSDOS 6.0
 35723                                  BinToAscii:
 35724 0000752D B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 35725                                  bta5:	
 35726 00007530 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 35727 00007532 50                      	push	ax			; preserve remainder of digits
 35728 00007533 240F                    	AND	AL,0Fh			; grab low nibble
 35729 00007535 0441                    	ADD	AL,'A'			; turn into ascii
 35730 00007537 AA                      	STOSB				; drop in the character
 35731 00007538 58                      	pop	ax			; (ax) = shifted number
 35732 00007539 FECD                    	dec	ch
 35733 0000753B 75F3                    	jnz	short bta5		; process 4 digits
 35734 0000753D C3                      	retn
 35735                                  
 35736                                  ;Break	<$CreateTempFile - create a unique name>
 35737                                  ;----------------------------------------------------------------------------
 35738                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 35739                                  ;	Method used is to get the current time, convert to a name and attempt
 35740                                  ;	a create new.  Repeat until create new succeeds.
 35741                                  ;
 35742                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 35743                                  ;		CX  contains default attributes
 35744                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 35745                                  ;		AX has handle
 35746                                  ;   Registers modified: all
 35747                                  ;----------------------------------------------------------------------------
 35748                                  
 35749                                  _$CreateTempFile:
 35750                                  	;Enter
 35751 0000753E 55                      	push	bp
 35752 0000753F 89E5                    	mov	bp,sp
 35753                                  
 35754                                  	;LocalVar    EndPtr,DWORD
 35755                                  	;LocalVar    FilPtr,DWORD
 35756                                  	;LocalVar    Attr,WORD
 35757                                  
 35758 00007541 83EC0A                  	sub	sp,10
 35759                                  
 35760                                  	;test	cx,0FFD8h
 35761 00007544 F7C1D8FF                	test	CX,~attr_changeable
 35762 00007548 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 35763                                  ;
 35764                                  ; We need this "hook" here to detect these cases (like user sets one both of
 35765                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 35766                                  ; below.  The code loops on error_access_denied, but if one of the non
 35767                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 35768                                  ; infinite because CreateNewFile will fail with access_denied always.  Thus we
 35769                                  ; need to detect these cases before getting to the loop.
 35770                                  ;
 35771                                  	;mov	ax, 5
 35772 0000754A B80500                  	MOV	AX,error_access_denied
 35773 0000754D EB6B                    	JMP	SHORT SETTMPERR
 35774                                  
 35775                                  OKatts:
 35776                                  	;MOV	attr,CX 		; save attribute
 35777 0000754F 894EF6                  	mov     [bp-10],cx
 35778                                  	;MOV	FilPtrL,DX		; pointer to file
 35779 00007552 8956F8                  	mov	[bp-8],dx
 35780                                  	;MOV	FilPtrH,DS
 35781 00007555 8C5EFA                  	mov	[bp-6],ds
 35782                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 35783 00007558 8C5EFE                  	mov	[bp-2],ds
 35784 0000755B 1E                      	PUSH	DS
 35785 0000755C 07                      	POP	ES			; destination for nul search
 35786 0000755D 89D7                    	MOV	DI,DX
 35787 0000755F 89F9                    	MOV	CX,DI
 35788 00007561 F7D9                    	NEG	CX			; number of bytes remaining in segment
 35789                                  	; MSDOS 6.0
 35790 00007563 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 35791 00007565 7501                    	JNZ	short okok		;AN000;MS. no
 35792                                  	;MOV	CX,-1			;AN000;MS.
 35793 00007567 49                      	dec	cx  ; mov cx,-1
 35794                                  	;
 35795                                  okok:					;AN000;
 35796 00007568 31C0                    	XOR	AX,AX			;AN000;
 35797 0000756A F2AE                    	REPNZ	SCASB			;AN000;
 35798                                  					;AN000;
 35799 0000756C 4F                      	DEC	DI			; point back to the null
 35800 0000756D 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 35801 00007571 E8B5E3                  	call	PATHCHRCMP		; Is it a path separator?
 35802 00007574 7403                    	JZ	short SETENDPTR		; Yes
 35803                                  STOREPTH:
 35804 00007576 B05C                    	MOV	AL,'\'
 35805 00007578 AA                      	STOSB				; Add a path separator (and INC DI)
 35806                                  SETENDPTR:
 35807                                  	;MOV	EndPtrL,DI		; pointer to the tail
 35808                                  	; 10/07/2024 (Retro DOS v3-v4 BugFix - Erdogan Tan - Istanbul)
 35809                                  	;mov	[bp-4],dl ; (Retro DOS v3-v4 !Bug!)
 35810 00007579 897EFC                  	mov	[bp-4],di ; !Fix!
 35811                                  CreateLoop:
 35812 0000757C 16                      	push	ss			; let ReadTime see variables
 35813 0000757D 1F                      	pop	ds
 35814 0000757E 55                      	push	bp
 35815 0000757F E8F9A3                  	call	READTIME		; go get time
 35816 00007582 5D                      	pop	bp
 35817                                  ;
 35818                                  ; Time is in CX:DX.  Go drop it into the string.
 35819                                  ;
 35820                                  	;les	di,EndPtr		; point to the string
 35821 00007583 C47EFC                  	les	di,[BP-4]
 35822 00007586 89C8                    	mov	ax,cx
 35823 00007588 E8A2FF                  	call	BinToAscii		; store upper word
 35824 0000758B 89D0                    	mov	ax,dx
 35825 0000758D E89DFF                  	call	BinToAscii		; store lower word
 35826 00007590 30C0                    	xor	al,al
 35827 00007592 AA                      	STOSB				; nul terminate
 35828                                  	;LDS	DX,FilPtr		; get name
 35829 00007593 C556F8                  	lds	dx,[bp-8]
 35830                                  	;MOV	CX,Attr 		; get attr
 35831 00007596 8B4EF6                  	mov	cx,[bp-10]
 35832 00007599 55                      	push	bp
 35833 0000759A E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 35834 0000759D 5D                      	pop	bp
 35835 0000759E 731B                    	JNC	short CreateDone	; failed, go try again
 35836                                  ;
 35837                                  ; The operation failed and the error has been mapped in AX.  Grab the extended
 35838                                  ; error and figure out what to do.
 35839                                  ;
 35840                                  	;; MSDOS 3.3			; M049 - start
 35841                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 35842                                  ;;	cmp	al,error_file_exists
 35843                                  ;;	jz	short CreateLoop	; file existed => try with new name
 35844                                  ;;	cmp	al,error_access_denied
 35845                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 35846                                  
 35847                                  	; MSDOS 6.0
 35848                                  	;cmp	al,50h
 35849 000075A0 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 35850 000075A2 74D8                    	JZ	short CreateLoop	; Y: try again
 35851                                  	;cmp	al,5
 35852 000075A4 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 35853 000075A6 7512                    	JNZ	short SETTMPERR		; N: Error out
 35854                                  					; Y: Check to see if we got this due
 35855                                  					;    to the network drive. Note that
 35856                                  					;    the redir will set the exterr
 35857                                  					;    to error_cannot_make if this is 
 35858                                  					;    so. 
 35859 000075A8 36803E[F002]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 35860                                  					; See if it's REALLY an att mismatch
 35861 000075AE 740A                    	je	short SETTMPERR		; no, network error, stop
 35862                                  ;M070
 35863                                  ; If the user failed on an I24, we do not want to try again
 35864                                  ;
 35865 000075B0 36803E[F002]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 35866 000075B6 7402                    	je	short SETTMPERR		;yes, do not try again ;M070
 35867                                  
 35868 000075B8 EBC2                    	jmp	short CreateLoop	;attr mismatch, try again ;M070
 35869                                  
 35870                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 35871                                  					; M049 - end
 35872                                  SETTMPERR:
 35873 000075BA F9                      	STC
 35874                                  CreateDone:
 35875                                  	;Leave
 35876 000075BB 89EC                    	mov	sp,bp
 35877 000075BD 5D                      	pop	bp
 35878 000075BE 7203                    	JC	short CreateFail
 35879 000075C0 E9D8A1                  	jmp	SYS_RET_OK		; success!
 35880                                  CreateFail:
 35881 000075C3 E9DEA1                  	jmp	SYS_RET_ERR
 35882                                  
 35883                                  ;
 35884                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 35885                                  ;   (CH) or to the value in CL if the current system call is through
 35886                                  ;   serverdoscall.
 35887                                  ;
 35888                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 35889                                  ;		fSharing == TRUE => set sattrib to CL
 35890                                  ;   Outputs:	none
 35891                                  ;   Registers changed:	CX
 35892                                  
 35893                                  SetAttrib:
 35894 000075C6 36F606[2F05]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 35895 000075CC 7502                    	jnz	short Set
 35896 000075CE 88E9                    	mov	cl,ch
 35897                                  Set:
 35898 000075D0 36880E[2A05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 35899 000075D5 C3                      	retn
 35900                                  
 35901                                  ; 14/07/2018 - Retro DOS v3.0
 35902                                  ; MSDOS 6.0
 35903                                  
 35904                                  ;Break	<Extended_Open- Extended open the file>
 35905                                  ;----------------------------------------------------------------------------
 35906                                  ; Input: AL= 0 reserved  AH=6CH
 35907                                  ;	 BX= mode
 35908                                  ;	 CL= create attribute  CH=search attribute (from server)
 35909                                  ;	 DX= flag
 35910                                  ;	 DS:SI = file name
 35911                                  ;	 ES:DI = parm list
 35912                                  ;			   DD  SET EA list (-1) null
 35913                                  ;			   DW  n  parameters
 35914                                  ;			   DB  type (TTTTTTLL)
 35915                                  ;			   DW  IOMODE
 35916                                  ; Function: Extended Open
 35917                                  ; Output: carry clear
 35918                                  ;		     AX= handle
 35919                                  ;		     CX=1 file opened
 35920                                  ;			2 file created/opened
 35921                                  ;			3 file replaced/opened
 35922                                  ;	  carry set: AX has error code
 35923                                  ;----------------------------------------------------------------------------
 35924                                  
 35925                                  ;_$Extended_Open:			  ;AN000;
 35926                                  ;	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 35927                                  ;	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 35928                                  ;	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 35929                                  ;	TEST	DX,reserved_bits_mask	  ;AN000;EO. reserved bits 0  ?
 35930                                  ;	JNZ	short ext_inval2	  ;AN000;EO. no
 35931                                  ;	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 35932                                  ;	CMP	DL,0			  ;AN000;EO. all fail ?
 35933                                  ;	JZ	short ext_inval2	  ;AN000;EO. yes, error
 35934                                  ;	AND	DL,exists_mask		  ;AN000;EO. get exists action byte
 35935                                  ;	CMP	DL,2			  ;AN000;EO, > 02
 35936                                  ;	JA	short ext_inval2	  ;AN000;EO. yes ,error
 35937                                  ;	AND	AH,not_exists_mask	  ;AN000;EO. get no exists action byte
 35938                                  ;	CMP	AH,10H			  ;AN000;EO. > 10
 35939                                  ;	JA	short ext_inval2	  ;AN000;EO. yes error
 35940                                  ;
 35941                                  ;	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 35942                                  ;	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 35943                                  ;	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 35944                                  ;	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 35945                                  ;	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 35946                                  ;	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 35947                                  ;	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 35948                                  ;	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 35949                                  ;	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 35950                                  ;	MOV	AX,BX			  ;AN000;EO. ax= mode
 35951                                  ;	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 35952                                  ;ext_inval2:				  ;AN000;;EO.
 35953                                  ;	mov	al,error_invalid_function ;AN000;EO.. invalid function
 35954                                  ;	jmp	SYS_RET_ERR
 35955                                  ;error_return:				  ;AN000;EO.
 35956                                  ;	retn				  ;AN000;EO.. return with error
 35957                                  ;goopen2:				  ;AN000;
 35958                                  ;	TEST	BX,int_24_error 	  ;AN000;EO.. disable INT 24 error ?
 35959                                  ;	JZ	short goopen		  ;AN000;EO.. no
 35960                                  ;	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 35961                                  ;goopen:					  ;AN000;
 35962                                  ;	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 35963                                  ;	AND	word [SS:EXTOPEN_FLAG],0FFH  ;AN000;EO.create new ?;smr;SS Override
 35964                                  ;	CMP	word [SS:EXTOPEN_FLAG],ext_exists_fail + ext_nexists_create ;AN000;FT.;smr;SS Override
 35965                                  ;	JNZ	short chknext 		  ;AN000;;EO. no
 35966                                  ;	call	_$CreateNewFile		  ;AN000;;EO. yes
 35967                                  ;	JC	short error_return	  ;AN000;;EO. error
 35968                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 35969                                  ;	JZ	short ok_return2	  ;AN000;;EO. yes
 35970                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened ;AN000;EO. creted/opened;smr;SS Override
 35971                                  ;	JMP	short setXAttr		  ;AN000;;EO. set XAs
 35972                                  ;ok_return2:
 35973                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 35974                                  ;chknext:
 35975                                  ;	TEST	word [SS:EXTOPEN_FLAG],ext_exists_open ;AN000;;EO. exists open;smr;SS Override
 35976                                  ;	JNZ	short exist_open	  ;AN000;;EO. yes
 35977                                  ;	call	_$CREAT			  ;AN000;;EO. must be replace open
 35978                                  ;	JC	short error_return	  ;AN000;;EO. return with error
 35979                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 35980                                  ;	JZ	short ok_return2	  ;AN000;;EO. yes
 35981                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened ;AN000;EO. prsume create/open;smr;SS Override
 35982                                  ;	TEST	byte [SS:EXTOPEN_ON],ext_file_not_exists ;AN000;;EO. file not exists ?;smr;SS Override
 35983                                  ;	JNZ	short setXAttr		  ;AN000;;EO. no
 35984                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_replaced_opened ;AN000;;EO. replaced/opened;smr;SS Override
 35985                                  ;	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 35986                                  ;error_return2:
 35987                                  ;	STC 				  ; Set Carry again to flag error ;AN001;
 35988                                  ;	retn				  ;AN000;;EO. return with error
 35989                                  ;					  ;AN000;
 35990                                  ;exist_open:				  ;AN000;
 35991                                  ;	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 35992                                  ;	jz	short noserver		  ;AN000;;EO. no
 35993                                  ;	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 35994                                  ;noserver:
 35995                                  ;	call	_$Open2			  ;AN000;;EO. do open
 35996                                  ;	JNC	short ext_ok		  ;AN000;;EO.
 35997                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 35998                                  ;	JZ	short error_return2	  ;AN000;;EO. return with error
 35999                                  ;local_extopen:
 36000                                  ;	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 36001                                  ;	JNZ	short error_return2	  ;AN000;;EO. no,
 36002                                  ;	TEST	word [SS:EXTOPEN_FLAG],ext_nexists_create;AN000;;EO. want to fail;smr;SS Override
 36003                                  ;	JNZ	short do_creat		  ;AN000;;EO. yes
 36004                                  ;	JMP	short extexit 		  ;AN000;;EO. yes
 36005                                  ;do_creat:
 36006                                  ;	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 36007                                  ;	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 36008                                  ;	MOV	DX,SI			  ;AN000;;EO.
 36009                                  ;	call	_$CREAT			  ;AN000;;EO. do create
 36010                                  ;	JC	short extexit 		  ;AN000;;EO. error
 36011                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened 
 36012                                  ;					  ;AN000;;EO. is created/opened;smr;SS Override
 36013                                  ;	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 36014                                  ;
 36015                                  ;ext_ok:
 36016                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 36017                                  ;	JZ	short ok_return		  ;AN000;;EO. yes
 36018                                  ;	MOV	[SS:EXTOPEN_FLAG],action_opened ;AN000;;EO.  opened;smr;SS Override
 36019                                  ;setXAttr:
 36020                                  ;	call	Get_User_Stack		  ;AN000;;EO.
 36021                                  ;	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 36022                                  ;	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 36023                                  ;	POP	AX			  ;AN000;;EO.
 36024                                  ;	MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 36025                                  ;
 36026                                  ;ok_return:				  ;AN000;
 36027                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 36028                                  ;
 36029                                  ;extexit2:				  ;AN000; ERROR RECOVERY
 36030                                  ;	POP	BX			  ;AN000;EO. close the handle
 36031                                  ;	PUSH	AX			  ;AN000;EO. save error code from set XA
 36032                                  ;	CMP	word [SS:EXTOPEN_FLAG],action_created_opened 
 36033                                  ;					  ;AN000;EO. from create;smr;SS Override
 36034                                  ;	JNZ	short justopen		  ;AN000;EO.
 36035                                  ;	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 36036                                  ;	LDS	DX,[SI]			  ;AN000;EO.
 36037                                  ;	call	_$UNLINK 		  ;AN000;EO. delete the file
 36038                                  ;	JMP	SHORT reserror		  ;AN000;EO.
 36039                                  ;
 36040                                  ;justopen:				  ;AN000;
 36041                                  ;	call	$CLOSE			  ;AN000;EO. pretend never happend
 36042                                  ;reserror:				  ;AN000;
 36043                                  ;	POP	AX			  ;AN000;EO. restore error code from set XA
 36044                                  ;	JMP	SHORT extexit		  ;AN000;EO.
 36045                                  ;
 36046                                  ;ext_file_unfound:			  ;AN000;
 36047                                  ;	MOV	AX,error_file_not_found   ;AN000;EO.
 36048                                  ;	JMP	SHORT extexit		  ;AN000;EO.
 36049                                  ;ext_inval:				  ;AN000;
 36050                                  ;	MOV	AX,error_invalid_function ;AN000;EO.
 36051                                  ;extexit:
 36052                                  ;	jmp	SYS_RET_ERR		  ;AN000;EO.
 36053                                  
 36054                                  ;============================================================================
 36055                                  ; LOCK.ASM, MSDOS 6.0, 1991
 36056                                  ;============================================================================
 36057                                  ; 14/07/2018 - Retro DOS v3.0
 36058                                  
 36059                                  ;BREAK <$LockOper - Lock Calls>
 36060                                  
 36061                                  ;
 36062                                  ;   Assembler usage:
 36063                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 36064                                  ;	    MOV     CX, OffsetHigh
 36065                                  ;	    MOV     DX, OffsetLow
 36066                                  ;	    MOV     SI, LengthHigh
 36067                                  ;	    MOV     DI, LengthLow
 36068                                  ;	    MOV     AH, LockOper
 36069                                  ;	    MOV     AL, Request
 36070                                  ;	    INT     21h
 36071                                  ;
 36072                                  ;   Error returns:
 36073                                  ;	    AX = error_invalid_handle
 36074                                  ;	       = error_invalid_function
 36075                                  ;	       = error_lock_violation
 36076                                  ;
 36077                                  ;   Assembler usage:
 36078                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 36079                                  ;
 36080                                  ;				    0? lock all
 36081                                  ;				    8? lock write
 36082                                  ;				    ?2 lock multiple
 36083                                  ;				    ?3 unlock multiple
 36084                                  ;				    ?4 lock/read
 36085                                  ;				    ?5 write/unlock
 36086                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 36087                                  ;	    MOV     BX, Handle
 36088                                  ;	    MOV     CX, count or size
 36089                                  ;	    LDS     DX, buffer
 36090                                  ;	    INT     21h
 36091                                  ;
 36092                                  ;   Error returns:
 36093                                  ;	    AX = error_invalid_handle
 36094                                  ;	       = error_invalid_function
 36095                                  ;	       = error_lock_violation
 36096                                  
 36097                                  _$LockOper:
 36098 000075D6 3C01                    	CMP	AL,1
 36099 000075D8 770C                    	JA	short lock_bad_func
 36100                                  
 36101 000075DA 57                      	PUSH	DI			       ; Save LengthLow
 36102 000075DB E863F5                  	call	SFFromHandle		       ; ES:DI -> SFT
 36103 000075DE 7311                    	JNC	short lock_do 		       ; have valid handle
 36104 000075E0 5F                      	POP	DI			       ; Clean stack
 36105                                  	;mov	al,6
 36106 000075E1 B006                    	mov	al,error_invalid_handle
 36107 000075E3 E9BEA1                  	jmp	SYS_RET_ERR
 36108                                  
 36109                                  lock_bad_func:
 36110                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36111 000075E6 36C606[EF02]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 36112                                  	;mov	al,1
 36113 000075EC B001                    	mov	al,error_invalid_function
 36114 000075EE E9B3A1                  	jmp	SYS_RET_ERR
 36115                                  
 36116                                  	; MSDOS 6.0 
 36117                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 36118                                  ; Dead code deleted, MD, 23 Mar 90
 36119                                  
 36120                                  lock_do:
 36121                                  	; MSDOS 3.3
 36122 000075F1 08C0                    	or	al,al
 36123 000075F3 58                      	pop	ax
 36124 000075F4 741E                    	jz	short DOS_Lock
 36125                                  DOS_Unlock:
 36126                                   	;test	word [es:di+5],8000h
 36127 000075F6 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36128 000075FC 7409                    	JZ	short LOCAL_UNLOCK
 36129 000075FE 50                      	push    ax
 36130 000075FF B80B11                  	mov     ax,110Bh
 36131 00007602 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 36132                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 36133                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 36134                                  			; SFT DPB field -> DPB of drive containing file
 36135                                  			; Return: CF set error
 36136 00007604 5B                      	pop     bx
 36137 00007605 EB05                    	jmp     short ValChk
 36138                                  
 36139                                  LOCAL_UNLOCK:
 36140 00007607 36FF1E[7800]            	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 36141                                  ValChk:
 36142 0000760C 7303                    	JNC	short Lock_OK
 36143                                  lockerror:
 36144 0000760E E993A1                  	jmp	SYS_RET_ERR
 36145                                  Lock_OK:
 36146                                  	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 36147 00007611 E987A1                  	jmp	SYS_RET_OK
 36148                                  DOS_Lock:
 36149                                  	;test	word [es:di+5],8000h
 36150 00007614 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36151 0000761A 7407                    	JZ	short LOCAL_LOCK
 36152                                  	;CallInstall NET_XLock,MultNET,10
 36153 0000761C B80A11                  	mov     ax, 110Ah
 36154 0000761F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 36155                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 36156                                  			; STACK: WORD low word of size, ES:DI -> SFT
 36157                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 36158                                  			; Return: CF set error
 36159 00007621 EBE9                    	JMP	short ValChk
 36160                                  
 36161                                  LOCAL_LOCK:
 36162 00007623 36FF1E[7400]            	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 36163 00007628 EBE2                    	JMP	short ValChk
 36164                                  
 36165                                  ;lock_do:
 36166                                  ;	; MSDOS 6.0
 36167                                  ;	MOV	BX,AX				; save AX
 36168                                  ;	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 36169                                  ;	MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 36170                                  ;	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 36171                                  ;	POP	CX				; get low length
 36172                                  ;	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 36173                                  ;	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 36174                                  ;	MOV	CX,1				; one range
 36175                                  ;
 36176                                  ;;	PUSH	CS				;
 36177                                  ;;	POP	DS				; DS:DX points to
 36178                                  ;
 36179                                  ;	push	ss
 36180                                  ;	pop	ds
 36181                                  ;
 36182                                  ;	MOV	DX,BP				;   Lock_Buffer
 36183                                  ;	TEST	AL,Unlock_all			; function 1
 36184                                  ;	JNZ	short DOS_Unlock		; yes
 36185                                  ;	JMP	short DOS_Lock			; function 0
 36186                                  ;
 36187                                  ;DOS_Unlock:
 36188                                  ;	;test	word [es:di+5],8000h
 36189                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36190                                  ;	JZ	short LOCAL_UNLOCK
 36191                                  ;	;CallInstall Net_Xlock,MultNET,10
 36192                                  ;	mov     ax, 110Bh
 36193                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 36194                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 36195                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 36196                                  ;			; SFT DPB field -> DPB of drive containing file
 36197                                  ;			; Return: CF set error
 36198                                  ;
 36199                                  ;	JMP	SHORT ValChk
 36200                                  ;LOCAL_UNLOCK:
 36201                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 36202                                  ;ValChk:
 36203                                  ;	JNC	short Lock_OK
 36204                                  ;lockerror:
 36205                                  ;	jmp	SYS_RET_ERR
 36206                                  ;Lock_OK:
 36207                                  ;	MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 36208                                  ;	jmp	SYS_RET_OK
 36209                                  ;DOS_Lock:
 36210                                  ;	;test	word [es:di+5],8000h
 36211                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36212                                  ;	JZ	short LOCAL_LOCK
 36213                                  ;	;CallInstall NET_XLock,MultNET,10
 36214                                  ;	mov     ax,110Ah
 36215                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 36216                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 36217                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 36218                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 36219                                  ;			; Return: CF set error
 36220                                  ;	JMP	short ValChk
 36221                                  ;
 36222                                  ;LOCAL_LOCK:
 36223                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 36224                                  ;	JMP	short ValChk
 36225                                  
 36226                                  ; 14/07/2018 - Retro DOS v3.0
 36227                                  ; LOC_CHECK
 36228                                  ;MSDOS 6.0 (& MSDOS 3.3)
 36229                                  
 36230                                  ; Inputs:
 36231                                  ;	Outputs of SETUP
 36232                                  ;	[USER_ID] Set
 36233                                  ;	[PROC_ID] Set
 36234                                  ; Function:
 36235                                  ;	Check for lock violations on local I/O
 36236                                  ;	Retries are attempted with sleeps in between
 36237                                  ; Outputs:
 36238                                  ;    Carry clear
 36239                                  ;	Operation is OK
 36240                                  ;    Carry set
 36241                                  ;	A lock violation detected
 36242                                  ; Outputs of SETUP preserved
 36243                                  
 36244                                  LOCK_CHECK:
 36245 0000762A 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 36246                                  LockRetry:
 36247 0000762E 53                      	push	bx		; save regs
 36248                                  	; 26/07/2019
 36249                                  	;push	ax ; MSDOS 6.0
 36250                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36251 0000762F FF1E[7C00]              	call	far [JShare+(8*4)] ; 8 = chk_block
 36252                                  	;pop	ax ; MSDOS 6.0
 36253 00007633 5B                      	pop	bx		; restrore regs
 36254 00007634 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 36255                                  LockN:
 36256 00007636 E8F3A9                  	call	Idle		; wait a while
 36257 00007639 4B                      	DEC	BX		; remember a retry
 36258 0000763A 75F2                    	JNZ	short LockRetry	; more retries left...
 36259 0000763C F9                      	STC
 36260                                  lc_ret_label:
 36261 0000763D C3                      	retn
 36262                                  
 36263                                  ; 14/07/2018 - Retro DOS v3.0
 36264                                  ; LOCK_VIOLATION
 36265                                  ;MSDOS 6.0 (& MSDOS 3.3)
 36266                                  
 36267                                  ; Inputs:
 36268                                  ;	[THISDPB] set
 36269                                  ;	[READOP] indicates whether error on read or write
 36270                                  ; Function:
 36271                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 36272                                  ; Outputs:
 36273                                  ;	Carry set if user says FAIL, causes error_lock_violation
 36274                                  ;	Carry clear if user wants a retry
 36275                                  ;
 36276                                  ; DS, ES, DI, CX preserved, others destroyed
 36277                                  
 36278                                  LOCK_VIOLATION:
 36279 0000763E 1E                      	PUSH	DS
 36280 0000763F 06                      	PUSH	ES
 36281 00007640 57                      	PUSH	DI
 36282 00007641 51                      	PUSH	CX
 36283                                  	;mov	ax,21h
 36284 00007642 B82100                  	MOV	AX,error_lock_violation
 36285                                  	;mov	byte [ALLOWED],18h
 36286 00007645 C606[1503]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 36287 0000764A C42E[4605]              	LES	BP,[THISDPB]
 36288 0000764E BF0100                  	MOV	DI,1		; Fake some registers
 36289 00007651 89F9                    	MOV	CX,DI
 36290                                  	;mov	dx,[es:bp+11]
 36291 00007653 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 36292 00007657 E8CEE4                  	call	HARDERR
 36293 0000765A 59                      	POP	CX
 36294 0000765B 5F                      	POP	DI
 36295 0000765C 07                      	POP	ES
 36296 0000765D 1F                      	POP	DS
 36297 0000765E 3C01                    	CMP	AL,1
 36298 00007660 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 36299 00007662 F9                      	STC
 36300 00007663 C3                      	retn
 36301                                  
 36302                                  ; 14/07/2018 - Retro DOS v3.0
 36303                                  
 36304                                  ;	do a retz to return error
 36305                                  
 36306                                  CheckShare:
 36307                                  	; MSDOS 6.0
 36308                                  	;push	ds			;smr;
 36309                                  	;;getdseg <ds>			; ds -> dosdata
 36310                                  	;push	cs
 36311                                  	;pop	ds
 36312                                  	;CMP	byte [fShare],0
 36313                                  	;pop	ds			;smr;
 36314                                  	;retn
 36315                                  	
 36316                                  	; MSDOS 3.3
 36317 00007664 2E803E[CF02]00          	cmp	byte [cs:fShare],0
 36318 0000766A C3                      	retn
 36319                                  
 36320                                  ;============================================================================
 36321                                  ; SHARE.ASM, MSDOS 6.0, 1991
 36322                                  ;============================================================================
 36323                                  ; 14/07/2018 - Retro DOS v3.0
 36324                                  
 36325                                  ; SHARE_CHECK
 36326                                  
 36327                                  ; Inputs:
 36328                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 36329                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 36330                                  ;       [WFP_START] has full path of name
 36331                                  ;       [USER_ID] Set
 36332                                  ;       [PROC_ID] Set
 36333                                  ; Function:
 36334                                  ;       Check for sharing violations on local file/device access
 36335                                  ; Outputs:
 36336                                  ;    Carry clear
 36337                                  ;       Sharing approved
 36338                                  ;    Carry set
 36339                                  ;       A sharing violation detected
 36340                                  ;           AX is error code
 36341                                  ; USES    ALL but DS
 36342                                  
 36343                                  SHARE_CHECK:
 36344                                  	; 26/07/2019
 36345 0000766B FF1E[6000]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 36346                                  shchk_retn:
 36347 0000766F C3                      	retn
 36348                                  
 36349                                  ; SHARE_VIOLATION
 36350                                  
 36351                                  ; Inputs:
 36352                                  ;       [THISDPB] Set
 36353                                  ;       AX has error code
 36354                                  ; Function:
 36355                                  ;       Handle Sharing errors
 36356                                  ; Outputs:
 36357                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 36358                                  ;       Carry clear if user wants a retry
 36359                                  ;
 36360                                  ; DS, ES, DI preserved, others destroyed
 36361                                  
 36362                                  SHARE_VIOLATION:
 36363 00007670 1E                      	PUSH    DS
 36364 00007671 06                      	PUSH	ES
 36365 00007672 57                      	PUSH    DI
 36366 00007673 C606[3205]00            	MOV     byte [READOP],0		; All share errors are reading
 36367                                  	;mov	byte [ALLOWED],18h
 36368 00007678 C606[1503]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 36369 0000767D C42E[4605]              	LES     BP,[THISDPB]
 36370 00007681 BF0100                  	MOV     DI,1			; Fake some registers
 36371 00007684 89F9                    	MOV     CX,DI
 36372                                  	;mov	dx,[es:bp+16]
 36373 00007686 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 36374 0000768A E89BE4                  	call	HARDERR
 36375 0000768D 5F                      	POP     DI
 36376 0000768E 07                      	POP	ES
 36377 0000768F 1F                      	POP     DS
 36378 00007690 3C01                    	CMP     AL,1
 36379 00007692 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 36380 00007694 F9                      	STC
 36381 00007695 C3                      	retn
 36382                                  
 36383                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID.  This does
 36384                                  ;       NOT perform a close, it merely asserts that the sharing information
 36385                                  ;       for the SFT/UID/PID may be safely released.
 36386                                  ;
 36387                                  ;   Inputs:     ES:DI points to an SFT
 36388                                  ;   Outputs:    None
 36389                                  ;   Registers modified: all except DS,ES,DI
 36390                                  
 36391                                  ShareEnd:
 36392                                  	; 26/07/2019
 36393 00007696 FF1E[6400]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 36394 0000769A C3                      	retn
 36395                                  
 36396                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 36397                                  
 36398                                  ;
 36399                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set.  If
 36400                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 36401                                  ;
 36402                                  ;   Inputs:     ThisSFT points to the SFT
 36403                                  ;               WFP_Start points to the WFP
 36404                                  ;   Outputs:    Carry clear => successful entry
 36405                                  ;               Carry set => failed system call
 36406                                  ;   Registers modified: all
 36407                                  
 36408                                  ShareEnter:
 36409 0000769B 51                      	push	cx
 36410                                  retry:
 36411 0000769C 8B0E[1A00]              	mov     cx,[RetryCount]
 36412                                  attempt:
 36413 000076A0 C43E[5A05]              	les     di,[THISSFT]		; grab sft
 36414 000076A4 31C0                    	XOR     AX,AX
 36415                                   	;mov	[es:di+51],ax
 36416 000076A6 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 36417 000076AA 51                      	push	cx
 36418 000076AB E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 36419 000076AE 59                      	pop	cx
 36420 000076AF 730A                    	jnc	short done		; success, let the user see this
 36421 000076B1 E878A9                  	call	Idle                    ; wait a while
 36422 000076B4 E2EA                    	loop    attempt                 ; go back for another attempt
 36423 000076B6 E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 36424 000076B9 73E1                    	jnc	short retry		; user said to retry, go do it
 36425                                  done:
 36426 000076BB 59                      	pop	cx
 36427 000076BC C3                      	retn
 36428                                  
 36429                                  ;----------------------------------------------------------------------------
 36430                                  
 36431                                  ;----------------------------------------------------------------------------
 36432                                  
 36433                                  ;align 2 ; 05/09/2018 (Error!)
 36434                                  
 36435 000076BD 90<rep 3h>              align 16 ; 08/09/2018 (OK.)
 36436                                  
 36437                                  ; 06/08/2018 - Retro DOS v3.0
 36438                                  
 36439                                  ;============================================================================
 36440                                  ; MSINIT.ASM
 36441                                  ;============================================================================
 36442                                  ;
 36443                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 36444                                  ;
 36445                                  	; 15/07/2018 - Retro DOS v3.0
 36446                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 36447                                  
 36448                                  SYSBUF:
 36449                                  IRETT:
 36450 000076C0 CF                      	iret
 36451                                  
 36452                                  	; 07/07/2018 - Retro DOS v3.0
 36453                                  	; Retro DOS v2.0 - 03/03/2018
 36454                                  DOSINIT:
 36455                                  	; Far call from SYSINIT
 36456                                  	; DX = Memory size in paragraphs
 36457                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 36458                                  	;	  (Retro DOS v2.0, 16/03/2018)
 36459 000076C1 FA                              CLI
 36460 000076C2 FC                              CLD
 36461 000076C3 2E8916[1003]                    MOV     [CS:ENDMEM],DX
 36462 000076C8 2E8926[8A04]                    MOV     [CS:INITSP],SP
 36463 000076CD 2E8C16[8C04]                    MOV     [CS:INITSS],SS
 36464 000076D2 8CC8                            MOV     AX,CS
 36465 000076D4 8ED0                            MOV     SS,AX
 36466 000076D6 BC[B879]                        MOV     SP,INITSTACK
 36467                                  	; 08/08/2018
 36468 000076D9 368C1E[4A00]            	MOV     [SS:NULDEV+2],DS
 36469 000076DE 368936[4800]                    MOV     [SS:NULDEV],SI	; DS:SI Points to CONSOLE Device
 36470                                  	; 15/07/2018
 36471                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 36472                                  	; (Set INT 2Ah handler address to an 'IRET')
 36473 000076E3 1E                      	push    ds
 36474 000076E4 31C0                    	xor     ax,ax
 36475 000076E6 8ED8                    	mov     ds,ax
 36476 000076E8 B8[C076]                	mov     ax,IRETT
 36477 000076EB A3A800                  	mov     [2Ah*4],ax ; 00A8h
 36478 000076EE 8CC8                    	mov     ax,cs
 36479 000076F0 A3AA00                  	mov     [(2Ah*4)+2],ax ; 00AAh
 36480 000076F3 1F                      	pop     ds
 36481                                  	;
 36482 000076F4 E81102                          CALL    CHARINIT	; initialize console driver
 36483                                  
 36484 000076F7 56                              PUSH	SI		; save pointer to header	
 36485 000076F8 0E                      	PUSH	CS
 36486 000076F9 07                              POP	ES
 36487                                          ; 07/07/2018
 36488 000076FA BF[9E00]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 36489 000076FD B80300                          MOV     AX,3
 36490 00007700 AB                              STOSW           	; Refcount
 36491 00007701 FEC8                            DEC     AL
 36492 00007703 AB                              STOSW           	; Access rd/wr, compatibility
 36493 00007704 30C0                            XOR     AL,AL
 36494 00007706 AA                              STOSB           	; attribute
 36495                                  	;mov	al,0C3h
 36496 00007707 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 36497 00007709 AB                      	STOSw			; flags
 36498 0000770A 89F0                            mov	ax,si
 36499 0000770C AB                              stosw			; device pointer in devptr	
 36500 0000770D 8CD8                            mov	ax,ds
 36501 0000770F AB                      	stosw
 36502 00007710 31C0                    	xor	ax,ax	; 0
 36503 00007712 AB                      	stosw			; firclus
 36504 00007713 AB                      	stosw			; time
 36505 00007714 AB                      	stosw			; date
 36506 00007715 48                      	dec	ax	; -1
 36507 00007716 AB                      	stosw			; size
 36508 00007717 AB                      	stosw
 36509 00007718 40                      	inc	ax	; 0
 36510 00007719 AB                      	stosw			; position
 36511 0000771A AB                      	stosw
 36512                                  	;add	di,7
 36513 0000771B 83C707                  	add	di,SF_ENTRY.sf_name - SF_ENTRY.sf_cluspos
 36514                                  				; point at name
 36515                                  	;add	si,10
 36516 0000771E 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 36517                                  				; point to name
 36518 00007721 B90400                  	mov	cx,4
 36519 00007724 F3A5                    	rep	movsw		; name
 36520 00007726 B103                    	mov	cl,3
 36521 00007728 B020                    	mov	al," "
 36522 0000772A F3AA                    	rep	stosb		; extension
 36523 0000772C 5E                      	POP	SI		; get back pointer to header
 36524                                  
 36525                                  				; mark device as CON I/O
 36526                                  	; 15/07/2018
 36527                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 36528 0000772D 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 36529                                  	; 12/03/2018
 36530 00007731 368936[3200]            	MOV     [SS:BCON],SI
 36531 00007736 368C1E[3400]                    MOV     [SS:BCON+2],DS
 36532                                  
 36533                                  CHAR_INIT_LOOP:
 36534 0000773B C534                            LDS     SI,[SI]				; AUX device
 36535 0000773D E8C801                          CALL    CHARINIT
 36536                                         	;15/07/2018
 36537                                  	;test	byte [SI+4],8
 36538 00007740 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 36539 00007744 74F5                            JZ      SHORT CHAR_INIT_LOOP
 36540                                  	; 12/03/2018
 36541 00007746 368936[2E00]                    MOV     [SS:BCLOCK],SI
 36542 0000774B 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 36543 00007750 BD[BA79]                        MOV     BP,MEMSTRT			; ES:BP points to DPB
 36544                                  PERDRV:
 36545                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 36546 00007753 C534                            LDS     SI,[SI]				; Next device
 36547 00007755 83FEFF                          CMP     SI,-1
 36548 00007758 7468                    	JZ      SHORT CONTINIT
 36549                                  
 36550 0000775A E8AB01                          CALL    CHARINIT
 36551                                  
 36552                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 36553                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 36554                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 36555                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 36556                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 36557                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 36558                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 36559                                  
 36560                                          ; 15/07/2018
 36561                                  	;test	word [SI+4],8000h		; DEVTYP
 36562 0000775D F744040080                      TEST    word [SI+SYSDEV.ATT],DEVTYP
 36563 00007762 75EF                    	JNZ     SHORT PERDRV			; Skip any other character devs
 36564                                  
 36565 00007764 368A0E[3103]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 36566 00007769 30ED                    	XOR     CH,CH
 36567                                          ; 07/07/2018
 36568                                  	;MOV	[SI+10],CL		; Number of units in name field
 36569 0000776B 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 36570 0000776E 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 36571 00007773 30F6                    	XOR     DH,DH
 36572 00007775 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 36573 0000777A 1E                      	PUSH    DS
 36574 0000777B 56                              PUSH    SI
 36575 0000777C 36C51E[3603]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 36576                                  PERUNIT:
 36577 00007781 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 36578 00007783 43                              INC     BX
 36579 00007784 43                              INC     BX                      ; On to next BPB
 36580                                  	;07/07/2018
 36581                                          ;mov	[ES:BP+DPB.DRIVE],dl
 36582 00007785 26885600                	MOV     [ES:BP],DL
 36583                                  	;MOV	[ES:BP+1],DH
 36584 00007789 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 36585 0000778D 53                              PUSH    BX
 36586 0000778E 51                              PUSH    CX
 36587 0000778F 52                              PUSH    DX
 36588                                  
 36589                                          ;invoke	$SETDPB
 36590 00007790 E88DA6                          CALL	_$SETDPB
 36591                                  
 36592                                  	; 07/07/2018
 36593                                  	;MOV	AX,[ES:BP+2]
 36594 00007793 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 36595                                          ; 12/03/2018
 36596 00007797 363B06[3600]            	CMP	AX,[SS:MAXSEC]
 36597 0000779C 7604                    	JBE     SHORT NOTMAX
 36598 0000779E 36A3[3600]              	MOV	[SS:MAXSEC],AX
 36599                                  NOTMAX:
 36600 000077A2 5A                              POP     DX
 36601 000077A3 59                              POP     CX
 36602 000077A4 5B                              POP     BX
 36603 000077A5 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 36604 000077A7 5E                              POP     SI
 36605 000077A8 1F                              POP     DS
 36606                                  					; ds:si -> device header
 36607                                  					; store it in the corresponding dpb
 36608                                  	; 07/07/2018
 36609                                          ;MOV	[ES:BP+18],SI
 36610 000077A9 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 36611                                          ;MOV	[ES:BP+20],DS
 36612 000077AD 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 36613                                  
 36614 000077B1 1E                              PUSH    DS			; save pointer to device header
 36615 000077B2 56                              PUSH    SI
 36616 000077B3 FEC6                            INC     DH			; inc unit #
 36617 000077B5 FEC2                            INC     DL			; inc drive #
 36618 000077B7 8ED8                            MOV     DS,AX			; restore segment of BPB array
 36619                                          ;add	bp,32 ; 15/07/2018
 36620                                  	;add	bp,33 ; MSDOS 6.0 ; 31/07/2019
 36621 000077B9 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 36622 000077BC E2C3                    	LOOP    PERUNIT			; process all units in each driver
 36623                                          
 36624 000077BE 5E                      	POP     SI			; restore pointer to device header
 36625 000077BF 1F                              POP     DS
 36626 000077C0 EB91                    	JMP	SHORT PERDRV		; process all drivers in chain
 36627                                  
 36628                                  CONTINIT:
 36629 000077C2 0E                              PUSH    CS
 36630 000077C3 1F                              POP     DS
 36631                                  ; Calculate true address of buffers, FATs, free space
 36632 000077C4 89EF                            MOV     DI,BP           ; First byte after current DPBs
 36633 000077C6 8B2E[3600]                      MOV     BP,[MAXSEC]
 36634 000077CA B8[C076]                        MOV     AX,SYSBUF	; = IRETT (15/07/2018)
 36635                                          ; 07/07/2018
 36636                                  	;MOV	[BUFFSTRT],AX
 36637 000077CD 01E8                            ADD     AX,BP           ; One I/O buffer
 36638 000077CF 83C014                          ADD     AX,BUFINSIZ ; = 16
 36639 000077D2 A3[2600]                        MOV     [DPBHEAD],AX	; True start of DPBs
 36640 000077D5 89C2                            MOV     DX,AX
 36641 000077D7 81EA[C076]                      SUB     DX,SYSBUF	; = IRETT (15/07/2018)
 36642 000077DB 89D5                            MOV     BP,DX
 36643 000077DD 01FD                            ADD     BP,DI           ; Allocate buffer space
 36644                                  	;sub	bp,918 ; = ADJFAC for current DOSINIT (07/07/2018)
 36645 000077DF 81EDFA02                        SUB     BP,ADJFAC       ; True address of free memory
 36646 000077E3 55                              PUSH    BP ; ### ; *fmem* (start of free memory)		
 36647                                          ; 24/07/2019
 36648 000077E4 BF[BA79]                	MOV     DI,MEMSTRT	; Current start of DPBs  ; 75A6h for MSDOS 3.3
 36649                                  	;add	di,24 ; MSDOS 3.3
 36650                                  	;add	di,25 ; MSDOS 6.0
 36651 000077E7 83C719                          ADD     DI,DPB.NEXT_DPB	; Point at dpb.next_dpb field
 36652 000077EA 8A0E[4600]                      MOV     CL,[NUMIO]
 36653 000077EE 30ED                            XOR     CH,CH
 36654                                  TRUEDPBAD:
 36655                                  	;add	ax,32 ; MSDOS 3.3
 36656                                  	;add	ax,33 ; MSDOS 6.0
 36657 000077F0 83C021                          ADD     AX,DPBSIZ       ; Compute address of next DPB
 36658 000077F3 AB                              STOSW                   ; Set the link to next DPB
 36659 000077F4 83C71F                          ADD     DI,DPBSIZ-2     ; Point at next address
 36660 000077F7 E2F7                            LOOP    TRUEDPBAD
 36661 000077F9 83EF21                          SUB     DI,DPBSIZ       ; Point at last dpb.next_dpb field
 36662 000077FC B8FFFF                          MOV     AX,-1
 36663 000077FF AB                              STOSW                   ; End of list
 36664 00007800 83C50F                          ADD     BP,15           ; True start of free space (round up to segment)
 36665                                  	; 15/07/2018
 36666                                  	;MOV	CL,4
 36667                                          ;SHR	BP,CL           ; Number of segments for DOS resources
 36668 00007803 D1DD                            rcr	bp,1
 36669 00007805 B103                    	mov	cl,3
 36670 00007807 D3ED                    	shr	bp,cl
 36671                                  	;
 36672 00007809 8CCA                    	MOV     DX,CS
 36673 0000780B 01EA                            ADD     DX,BP           ; First free segment
 36674                                  	
 36675                                    	; 06/07/2019
 36676                                  	;MOV	BX,15 ; 0Fh
 36677                                  	;MOV	CX,[ENDMEM]
 36678                                  	
 36679 0000780D 8CCD                    	MOV     BP,CS
 36680                                  
 36681                                  ; BP has segment of DOS (whether to load high or run in place)
 36682                                  ; DX has program segment (whether after DOS or overlaying DOS)
 36683                                  ; CX has size of memory in paragraphs (reduced by DOS size if HIGHMEM)
 36684                                          
 36685                                  	; 06/07/2019
 36686                                  	;MOV	[ENDMEM],CX
 36687                                          ;MOV	ES,BP
 36688                                          ;MOV	[ES:DSKCHRET+3],ES ; mov [ES:DOSEG_INIT],es
 36689                                  
 36690 0000780F 2E892E[6C03]            	mov	[cs:DSKCHRET+3],bp        
 36691                                  
 36692 00007814 31C0                    	XOR     AX,AX
 36693 00007816 8ED8                            MOV     DS,AX
 36694 00007818 8EC0                            MOV     ES,AX
 36695                                  	;mov	di,82h 
 36696 0000781A BF8200                          MOV     DI,INTBASE+2
 36697                                  	; 15/07/2018
 36698 0000781D 89E8                            MOV     AX,BP
 36699                                  	; Set INT 0 (divide by zero) handler
 36700 0000781F C7060000[C15A]          	mov     word [0],DIVOV
 36701 00007825 A30200                  	mov     word [2],ax  ; = cs
 36702                                  	; Set INT 20h to INT 28h handler segments 
 36703                                  	;mov	cx,17
 36704 00007828 B111                    	mov	cl,17 ; 06/07/2019
 36705 0000782A F3AB                    	rep	stosw
 36706                                  	; DI points to INT 29h vector, offset
 36707 0000782C 83C706                  	add	di,6 
 36708                                  	; DI points to INT 2Ah vector, segment
 36709                                  	;Set  INT 2Ah to INT 3Fh handler segments		
 36710                                  	;mov	cx,43
 36711 0000782F B12B                    	mov	cl,43 ; 06/07/2019
 36712 00007831 F3AB                    	rep	stosw
 36713                                  	; DI points to INT 40h vector, segment
 36714 00007833 BF8000                  	mov	di,80h
 36715                                  	; Set INT 20h to INT 28h vectors to their default handler offsets
 36716 00007836 B8[CF14]                	mov	ax,_IRET
 36717                                  	;mov	cx,9
 36718 00007839 B109                    	mov	cl,9 ; 06/07/2019
 36719                                  iset1:
 36720 0000783B AB                      	stosw
 36721 0000783C 83C702                  	add	di,2
 36722 0000783F E2FA                    	loop	iset1
 36723 00007841 83C704                  	add	di,4
 36724                                  	; Set INT 2Ah to INT 3Fh vectors to their default handler offsets
 36725                                  	;mov	cx,22
 36726 00007844 B116                    	mov	cl,22 ; 06/07/2019
 36727                                  iset2:
 36728 00007846 AB                      	stosw
 36729 00007847 83C702                  	add	di,2
 36730 0000784A E2FA                    	loop	iset2
 36731                                  	
 36732                                  	; 06/07/2019
 36733 0000784C 89E8                    	mov	ax,bp ; *ax=cs*
 36734                                  
 36735                                  	; Set	INT 2Fh handler offset to INT2F
 36736 0000784E C706BC00[5C18]          	mov	word [2Fh*4],INT2F  ; 00BCh
 36737                                  
 36738                                  	; set up entry point call at vectors 30-31h
 36739                                  
 36740 00007854 C606C000EA                      MOV     BYTE [ENTRYPOINT],mi_Long_JMP
 36741 00007859 C706C100[D014]                  MOV     WORD [ENTRYPOINT+1],CALL_ENTRY
 36742                                  
 36743 0000785F A3C300                  	MOV    [ENTRYPOINT+3],AX ; = cs
 36744                                  
 36745                                  	; Set	INT 20h, 21h, 22h, 23h handler offsets
 36746 00007862 C7068000[C914]                  MOV     WORD [addr_int_abort],QUIT
 36747 00007868 C7068400[E814]                  MOV     WORD [addr_int_command],COMMAND
 36748 0000786E C70688000001                    MOV     WORD [addr_int_terminate],100H
 36749 00007874 89168A00                        MOV     [addr_int_terminate+2],DX ; *cmc*
 36750                                  	; 15/07/2018 - Retro DOS v3.0
 36751 00007878 C7069400[F616]                  MOV     WORD [addr_int_disk_read],ABSDRD   ; INT 25h
 36752 0000787E C7069800[4117]                  MOV     WORD [addr_int_disk_write],ABSDWRT ; INT 26h
 36753 00007884 C7069C00[DB67]                  MOV     WORD [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 36754                                  
 36755                                  	; 15/07/2018
 36756                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 36757 0000788A 0E                      	push	cs
 36758 0000788B 1F                      	pop	ds
 36759 0000788C 0E                      	push	cs
 36760 0000788D 07                      	pop	es
 36761                                  	; initialize the jump table for the sharer..
 36762                                  	;	(MSDOS 6.0, MSINIT.ASM, 1991, "patch_misc_segments")
 36763                                  	; MSDOS 3.3
 36764                                  	; (set JSharer jump table segments)
 36765 0000788E BF[5C00]                	mov	di,JShare
 36766                                  	;mov	ax,cs ; *ax=cs*
 36767                                  	;mov	cx,15
 36768 00007891 B10F                    	mov	cl,15 ; 06/07/2019
 36769                                  iset3:
 36770 00007893 83C702                  	add	di,2
 36771 00007896 AB                      	stosw
 36772 00007897 E2FA                    	loop	iset3
 36773                                  
 36774                                  	; MSDOS 2.11, MSDOS 3.3
 36775 00007899 B8[7A03]                        MOV     AX,INITBLOCK
 36776 0000789C 83C00F                          ADD	AX,0Fh		; round to a paragraph
 36777 0000789F B104                            MOV     CL,4
 36778 000078A1 D3E8                            SHR     AX,CL
 36779 000078A3 8CDF                            MOV     DI,DS
 36780 000078A5 01C7                            ADD     DI,AX
 36781 000078A7 47                              INC     DI
 36782 000078A8 893E[FC02]                      MOV     [CurrentPDB],DI
 36783 000078AC 55                              PUSH    BP ; ## ; = cs
 36784 000078AD 52                              PUSH    DX ; #	; *cmc*	; Save COMMAND address
 36785 000078AE A1[1003]                        MOV     AX,[ENDMEM]
 36786 000078B1 89FA                            MOV     DX,DI
 36787                                  
 36788                                          ;invoke	SETMEM		; Basic Header
 36789 000078B3 E8BBA6                  	CALL	SETMEM
 36790 000078B6 0E                              PUSH	CS
 36791 000078B7 1F                              POP	DS
 36792                                  	;mov	di,24
 36793 000078B8 BF1800                          MOV     DI,PDB.JFN_TABLE
 36794 000078BB 31C0                            XOR     AX,AX
 36795 000078BD AB                              STOSW
 36796 000078BE AA                              STOSB                   ; 0,1 and 2 are CON device
 36797 000078BF B0FF                            MOV     AL,0FFH
 36798                                  	;mov	cx,17
 36799                                          ;MOV	CX,FILPERPROC-3 ; 17
 36800 000078C1 B111                    	mov	cl,FILPERPROC-3 ; 06/07/2019
 36801 000078C3 F3AA                            REP     STOSB           ; Rest are unused
 36802 000078C5 0E                              PUSH	CS
 36803 000078C6 07                              POP	ES
 36804 000078C7 8C1E[2C00]                      MOV     [SFT_ADDR+2],DS	; Must be set to print messages
 36805                                  
 36806                                  	; 15/07/2018 - Retro DOS v3.0
 36807                                  	; MSDOS 3.3
 36808                                  	; (set country cdpg table segments)
 36809 000078CB BE[3B10]                	mov	si,COUNTRY_CDPG ; country_tab
 36810                                  	;mov	[es:si+79],es	; Ucase table segment
 36811                                  	;mov	[es:si+84],es	; File ucase table segment
 36812                                  	;mov	[es:si+89],es	; File char list segment
 36813                                  	;mov	[es:si+94],es	; Collate table segment
 36814                                  	;mov	[es:si+123],es	; Monocase routine segment
 36815 000078CE 8C444F                  	mov	[si+79],es
 36816 000078D1 8C4454                  	mov	[si+84],es
 36817 000078D4 8C4459                  	mov	[Si+89],es
 36818 000078D7 8C445E                  	mov	[si+94],es
 36819 000078DA 8C447B                  	mov	[si+123],es
 36820                                  	; (set SysInitTable -sysinitvars and country_cdpg- segments)
 36821 000078DD BE[6B0F]                	mov     si,SysInitTable
 36822                                  	;;mov	[es:si+6], es
 36823                                  	;;mov	[es:si+2], es
 36824                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 36825                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 36826 000078E0 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 36827 000078E3 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 36828                                  
 36829                                  	; (set FastOpen table FastRet segment)
 36830 000078E6 BE[730F]                	mov     si,FastTable
 36831                                  	;mov	[es:si+4],es
 36832                                  	;;mov	[es:si+8],es
 36833 000078E9 8C4404                  	mov     [si+4],es
 36834                                  	;mov	[si+8],es
 36835                                  
 36836                                  	; 24/07/2019 - Retro DOS v3.2
 36837                                  
 36838                                  	; IBMDOS.COM (Offset 7259h), IBM PC DOS 3.30
 36839                                  	;mov	word [FETCHI_TAG],5872h ; ? ('Xr')
 36840                                  
 36841                                  	; 10/08/2018 - Retro DOS v3.0
 36842                                  
 36843                                  	; MSDOS 2.11 (Retro DOS v2.0), MSDOS 3.3
 36844                                  
 36845                                  ; After this points the char device functions for CON will work for
 36846                                  ; printing messages
 36847                                  
 36848                                  	;;IF	NOT IBM
 36849                                  	;;IF	NOT ALTVECT
 36850                                  	;MOV	SI,HEADER
 36851                                  	;;invoke OUTMES
 36852                                  	;CALL	OUTMES
 36853                                  	;;PUSH	CS		; Outmes stomps on segments
 36854                                  	;;POP	DS
 36855                                  	;;PUSH	CS
 36856                                  	;;POP	ES
 36857                                  	;;ENDIF
 36858                                  	;;ENDIF
 36859                                  
 36860                                  ; Move the FATs into position
 36861 000078EC 5A                              POP     DX ; #	; *cmc*		; Restore COMMAND address
 36862 000078ED 5D                              POP     BP ; ## ; = cs
 36863 000078EE 59                              POP     CX ; ### ; *fmem*	; True address of free memory
 36864 000078EF BE[BA79]                        MOV     SI,MEMSTRT		; Place to move DPBs from
 36865 000078F2 8B3E[2600]                      MOV     DI,[DPBHEAD]		; Place to move DPBs to
 36866 000078F6 29F9                            SUB     CX,DI                   ; Total length of DPBs
 36867 000078F8 39F7                            CMP     DI,SI
 36868 000078FA 7607                            JBE     SHORT MOVJMP		; Are we moving to higher or 
 36869                                  					; lower memory?
 36870 000078FC 49                              DEC     CX                      ; Move backwards to higher memory
 36871 000078FD 01CF                            ADD     DI,CX
 36872 000078FF 01CE                            ADD     SI,CX
 36873 00007901 41                              INC     CX
 36874 00007902 FD                              STD
 36875                                  MOVJMP:
 36876 00007903 8EC5                            MOV	ES,BP
 36877 00007905 E9868B                          JMP	MOVDPB
 36878                                  
 36879                                  CHARINIT:
 36880                                  	; 07/07/2018 - Retro DOS v3.0
 36881 00007908 36C606[2403]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 36882 0000790E 36C606[2503]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 36883 00007914 36C606[2603]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 36884 0000791A 36C706[2703]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 36885 00007921 06                              PUSH	ES
 36886 00007922 53                              PUSH	BX
 36887 00007923 50                              PUSH	AX
 36888 00007924 BB[2403]                        MOV	BX,DEVCALL
 36889 00007927 0E                              PUSH	CS
 36890 00007928 07                              POP	ES
 36891 00007929 E804D8                          CALL	DEVIOCALL2	
 36892 0000792C 58                      	POP	AX
 36893 0000792D 5B                              POP	BX
 36894 0000792E 07                              POP	ES
 36895 0000792F C3                              RETN
 36896                                  
 36897                                  align 2
 36898                                          ;;DB	80H DUP(?)
 36899                                  	;TIMES 	64 dw 0 ; 05/09/2018
 36900                                  	; 10/08/2018
 36901                                  	;times	128 dw 0
 36902                                  	; 12/08/2018
 36903                                  	;times	132 dW 0 ; ADJFAC = 918 ; 08/09/2018 (OK.)
 36904                                  	; 08/09/2018 
 36905 00007930 00<rep 88h>             	times	136 db 0 ; ADJFAC = 790	; 08/09/2018 (OK.)
 36906                                  
 36907                                  			 ; ADJFAC = 770 ; 06/07/2019
 36908                                  
 36909                                  	; 06/07/2019 - Retro DOS v3.1
 36910                                  	;times	148 db 0 ; ADJFAC = 918
 36911                                  
 36912                                  INITSTACK:	; INITSTACK LABEL BYTE
 36913 000079B8 0000                    	DW	0 ; DW ?
 36914                                  
 36915                                  ;MEMSTRT LABEL	WORD
 36916                                  MEMSTRT EQU	$
 36917                                  
 36918                                  ADJFAC  EQU     MEMSTRT-SYSBUF
 36919                                  
 36920                                  	; 01/08/2019
 36921                                  
 36922                                  	;db 0,0,0,0,0,0,0,0,0,0
 36923                                  
 36924 000079BA 18                      	db 24
 36925 000079BB 07                      	db 7
 36926 000079BC E307                    	dw 2019
 36927 000079BE 0000                    	dw 0	
 36928                                  
 36929                                  PcDosVersion:
 36930 000079C0 1A4040402323232050-     	db 1Ah,'@@@### PC-DOS Version 3.30',0Dh,0Ah
 36930 000079C9 432D444F5320566572-
 36930 000079D2 73696F6E20332E3330-
 36930 000079DB 0D0A               
 36931 000079DD 1A00                    	db 1Ah,0
 36932                                  
 36933                                          ;do_ext
 36934                                  ;LAST	ENDS
