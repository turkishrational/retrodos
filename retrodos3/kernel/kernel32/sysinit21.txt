     1                                  ; ****************************************************************************
     2                                  ; SYSINIT.BIN (MSDOS 3.3 Kernel) - RETRO DOS v3.2 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 22/11/2022 (Previous: 03/08/2019)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 29/06/2019 (Retro DOS 3.1)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.14 
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	    ((nasm sysinit.asm -l sysinit.txt -o SYSINIT.BIN)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 3.3
    13                                  ; source code by Microsoft, 24/07/1987
    14                                  ; ----------------------------------------------------------------------------
    15                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    16                                  ; by Microsoft, 12/10/1983
    17                                  ; ****************************************************************************
    18                                  ; main file: 'retrodos.asm'
    19                                  ; incbin 'SYSINIT.BIN' ; (SYINITSEG)
    20                                  
    21                                  ; ------------------------------------------
    22                                  ; SYSINIT2.S - Retro DOS v3.0, 06/07/2018
    23                                  ; SYSINIT2.ASM - Retro DOS v3.1, 29/06/2019 
    24                                  ; SYSINIT21.ASM - Retro DOS v3.2, 09/07/2019 
    25                                  ; ------------------------------------------
    26                                  
    27                                  ;--------------------------------------------------------------
    28                                  ; SYSINIT.TXT (27/01/1983)
    29                                  ;--------------------------------------------------------------
    30                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
    31                                  ;over  the  system  initialization  after  the  OEM  bios   has
    32                                  ;performed any  initialization  it  needs  to  do.   Control is
    33                                  ;transfered with a long jump to the external  variable  SYSINIT
    34                                  ;
    35                                  ;
    36                                  ;   The OEM  has  the  following  variables declared external:
    37                                  ;
    38                                  ;   CURRENT_DOS_LOCATION    WORD
    39                                  ;
    40                                  ;This word  contains  the  segment  number of the DOS before it
    41                                  ;is relocated.  The OEM bios must set this value.
    42                                  ;
    43                                  ;   FINAL_DOS_LOCATION      WORD
    44                                  ;
    45                                  ;This word contains the segment number of the DOS after SYSINIT
    46                                  ;moves it.  The OEM bios must set this value.
    47                                  ;
    48                                  ;   DEVICE_LIST             DWORD
    49                                  ;
    50                                  ;This  double  word  pointer  points  to  the  linked  list  of
    51                                  ;character and block device drivers.  The  OEM  must  set  this
    52                                  ;value.
    53                                  ;
    54                                  ;   MEMORY_SIZE             WORD
    55                                  ;
    56                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
    57                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
    58                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
    59                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
    60                                  ;and read it back until it gets a mismatch.
    61                                  ;
    62                                  ;   DEFAULT_DRIVE           BYTE
    63                                  ;
    64                                  ;This is  the initial default drive when the system first comes
    65                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
    66                                  ;it then drive a is assumed.
    67                                  ;
    68                                  ;   BUFFERS                 BYTE
    69                                  ;
    70                                  ;This is  the  default  number of buffers for the system.  This
    71                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
    72                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
    73                                  ;
    74                                  ;   FILES                   BYTE
    75                                  ;
    76                                  ;This is  the  default  number  of  files for the system.  This
    77                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
    78                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
    79                                  ;
    80                                  ;   SYSINIT                 FAR
    81                                  ;
    82                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
    83                                  ;this label at the end of its INIT code.
    84                                  ;
    85                                  ;   The OEM  has  the  following  variables declared public:
    86                                  ;
    87                                  ;   RE_INIT                 FAR
    88                                  ;
    89                                  ;This is an entry point which allows the BIOS to do some INIT
    90                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
    91                                  ;PRESERVED.  On entry DS points to the first available memory
    92                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
    93                                  ;prefix which represents  the  "program"  currently  running.
    94                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
    95                                  ;SYSINIT taken together.  This is not  a  normal  program  in
    96                                  ;that  no  memory  is  allocated to it, it is running in free
    97                                  ;memory.
    98                                  ;NOTES:
    99                                  ;     At the time this routine is called SYSINIT occupies the
   100                                  ;highest 10K of memory ("highest" is determined by the  value
   101                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
   102                                  ;     Since this is called AFTER DOS is initialized, you can
   103                                  ;make system calls.  This also implies that the code for this
   104                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
   105                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
   106                                  ;     If you don't want  anything done just set this to point
   107                                  ;at a FAR RET instruction.
   108                                  
   109                                  ; ----------------------------------------------------------------------------
   110                                  ; TITLE   BIOS SYSTEM INITIALIZATION
   111                                  ; ----------------------------------------------------------------------------
   112                                  
   113                                  FALSE   EQU     0
   114                                  TRUE    EQU     0FFFFh
   115                                  
   116                                  ;IBMVER     EQU     TRUE
   117                                  ;IBM        EQU     IBMVER
   118                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
   119                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
   120                                  ;MSVER      EQU     FALSE
   121                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
   122                                  ;KANJI      EQU     FALSE
   123                                  
   124                                  ;include version.inc
   125                                  
   126                                  ;	IF	IBMJAPVER
   127                                  ;NOEXEC	EQU	TRUE
   128                                  ;       ELSE
   129                                  ;NOEXEC	EQU	FALSE
   130                                  ;       ENDIF
   131                                  
   132                                  MAJOR_VERSION   EQU     3
   133                                  MINOR_VERSION   EQU     30	;3.30
   134                                  
   135                                  ;DOSSIZE EQU	0A000H
   136                                  
   137                                  ;; (MSDOS 2.0) SYSINITVAR table offsets
   138                                  ;; ----------------------------------------------------------------------
   139                                  
   140                                  ;DPBHEAD  EQU	0  ; dd ; Pointer to head of DPB-FAT list	
   141                                  ;SFT_ADDR EQU	4  ; dd ; Pointer to first FCB table
   142                                  ;BCLOCK	  EQU	8  ; dd ; Pointer to the CLOCK device	
   143                                  ;BCON	  EQU	12 ; dd ; Console device entry points
   144                                  ;NUMIO	  EQU	16 ; db ; Number of disk tables
   145                                  ;MAXSEC   EQU	17 ; dw ; Maximum allowed sector size
   146                                  ;BUFFHEAD EQU	19 ; dd	; Pointer to head of buffer queue
   147                                  ;DEVHEAD  EQU	23 ; dd ; Set to list start passed by BIOS at DOS Init
   148                                  ;NUL_DEV  EQU	23 ; dd	; NUL device header, first 4 bytes of dev header
   149                                  ;			; (4+14 bytes)
   150                                  ;			; Points to the next device in device chain 
   151                                  ;DEVTYPE  EQU   27 ; dw ; = ISNULL
   152                                  ;SNULDEV  EQU 	29 ; dw
   153                                  ;INULDEV  EQU	31 ; dw
   154                                  ;DEVNAME  EQU	33 ; 8 BYTES ; "NUL     "
   155                                  
   156                                  ;; ----------------------------------------------------------------------
   157                                  ;; Internal DOS data returned by DOSINIT
   158                                  ;;
   159                                  ;struc	SYSINITVAR
   160                                  ;.DPBHEAD:	resd 1			; Pointer to head of DPB-FAT list
   161                                  ;.SFT_ADDR:	resd 1			; Pointer to first FCB table
   162                                  ;; The following address points to the CLOCK device
   163                                  ;.BCLOCK:	resd 1
   164                                  ;; The following address is used by DISKSTATCHK it is always
   165                                  ;; points to the console input device header
   166                                  ;.BCON:		resd 1			; Console device entry points
   167                                  ;.NUMIO:	resb 1			; Number of disk tables
   168                                  ;.MAXSEC:	resw 1			; Maximum allowed sector size
   169                                  ;.BUFFHEAD:	resd 1			; Head of buffer queue
   170                                  ;.DEVHEAD:	resd 1			; NUL dev head points to next dev
   171                                  ;.size:
   172                                  ;endstruc
   173                                  
   174                                  ; ----------------------------------------------------------------------
   175                                  ; device definitions
   176                                  
   177                                  ;Attribute bit masks
   178                                  DEVTYP  EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
   179                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
   180                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
   181                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
   182                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
   183                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
   184                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
   185                                  ISIBM   EQU     0010H           ;Bit 4 - This device is special
   186                                  
   187                                  ; The device table list has the form:
   188                                  struc	SYSDEV
   189 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
   190 00000004 ????                    .ATT:		resw 1		;Attributes of the device
   191 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
   192 00000008 ????                    .INT:		resw 1		;Interrupt entry point
   193 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
   194                                  .size:
   195                                  endstruc
   196                                  
   197                                  ;Static Reguest Header
   198                                  struc	SRHEAD
   199 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
   200 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
   201 00000002 ??                      .REQFUNC:	resb 1		;Type of request
   202 00000003 ????                    .REQSTAT:	resw 1		;Status Word
   203 00000005 ????????????????                	resb 8		;Reserved for queue links
   204                                  .size:
   205                                  endstruc
   206                                  
   207                                  ;Status word masks
   208                                  STERR   EQU     8000H           ;Bit 15 - Error
   209                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
   210                                  STDON   EQU     0100H           ;Bit 8 - Done
   211                                  STECODE EQU     00FFH           ;Error code
   212                                  WRECODE EQU     0
   213                                  
   214                                  ;Function codes
   215                                  DEVINIT EQU     0               ;Initialization
   216                                  DINITHL EQU     26              ;Size of init header
   217                                  DEVMDCH EQU     1               ;Media check
   218                                  DMEDHL  EQU     15              ;Size of media check header
   219                                  DEVBPB  EQU     2               ;Get BPB
   220                                  DEVRDIOCTL EQU  3               ;IOCTL read
   221                                  DBPBHL  EQU     22              ;Size of Get BPB header
   222                                  DEVRD   EQU     4               ;Read
   223                                  DRDWRHL EQU     22              ;Size of RD/WR header
   224                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
   225                                  DRDNDHL EQU     14              ;Size of non destructive read header
   226                                  DEVIST  EQU     6               ;Input status
   227                                  DSTATHL EQU     13              ;Size of status header
   228                                  DEVIFL  EQU     7               ;Input flush
   229                                  DFLSHL  EQU     15              ;Size of flush header
   230                                  DEVWRT  EQU     8               ;Write
   231                                  DEVWRTV EQU     9               ;Write with verify
   232                                  DEVOST  EQU     10              ;Output status
   233                                  DEVOFL  EQU     11              ;Output flush
   234                                  DEVWRIOCTL EQU  12              ;IOCTL write
   235                                  
   236                                  ; ----------------------------------------------------------------------
   237                                  struc	SYS_FCB
   238 00000000 ??                      .fcb_drive:	resb 1
   239 00000001 ????????????????        .fcb_name:	resb 8
   240 00000009 ??????                  .fcb_ext:	resb 3
   241 0000000C ????                    .fcb_EXTENT:	resw 1
   242 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
   243 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
   244                                                          ; word
   245 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
   246 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
   247 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
   248 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
   249                                                          ; bit 7=0 for file, bit 7=1 for I/O device
   250                                                          ; If file, bit 6=0 if dirty
   251                                                          ; If I/O device, bit 6=0 if EOF (input)
   252                                                          ;               Bit 5=1 if Raw mode
   253                                                          ;               Bit 0=1 if console input device
   254                                                          ;               Bit 1=1 if console output device
   255                                                          ;               Bit 2=1 if null device
   256                                                          ;               Bit 3=1 if clock device
   257 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
   258 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
   259 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
   260 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
   261 00000020 ??                      .fcb_NR:	resb 1	; Next record
   262 00000021 ????????                .fcb_RR:	resb 4	; Random record
   263                                  .size:
   264                                  endstruc
   265                                  
   266                                  ; ----------------------------------------------------------------------
   267                                  ; Field definition for I/O buffer information
   268                                  
   269                                  ; 10/06/2018 - Retro DOS v3.0 (MSDOS 3.3, BUFFER.INC, 1987)
   270                                  ; 24/07/2019 - Retro DOS v3.2 (MSDOS 6.0, BUFFER.INC, 1991)
   271                                  
   272                                  struc BUFFINFO
   273                                  ; MSDOS 3.3
   274 00000000 ????????                .buf_link:	resd 1		; Pointer to next buffer in list  ; Retro DOS v3.2
   275                                  ; MSDOS 6.0
   276                                  ;.buf_next:	resw 1		; Pointer to next buffer in list
   277                                  ;.buf_prev:	resw 1		; Pointer to prev buffer in list
   278 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   279                                  				; SFT table index (bit 7 = 1)
   280                                  				; = FFH if buffer free
   281 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   282                                  				;	= 0 if Local device buffer
   283                                  				; Bit 6 = 1 if buffer dirty
   284                                  				; Bit 5 = Reserved
   285                                  				; Bit 4 = Search bit (bit 7 = 1)
   286                                  				; Bit 3 = 1 if buffer is DATA
   287                                  				; Bit 2 = 1 if buffer is DIR
   288                                  				; Bit 1 = 1 if buffer is FAT
   289                                  				; Bit 0 = Reserved
   290 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   291                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   292 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   293 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   294 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   295 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   296 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   297                                  .size:	; 20 bytes
   298                                  endstruc
   299                                  
   300                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   301                                  				;For buf_flags bit 7 = 1, this is the byte
   302                                  				;offset of the start of the buffer in
   303                                  				;the file pointed to by buf_ID. Thus
   304                                  				;the buffer starts at location
   305                                  				;buf_offset in the file and contains
   306                                  				;buf_fill bytes.
   307                                  
   308                                  BUFINSIZ        EQU     BUFFINFO.size ; ; Size of structure in bytes
   309                                  
   310                                  buf_Free	EQU	0FFh		; buf_id of free buffer
   311                                  
   312                                  ;Flag byte masks
   313                                  buf_isnet	EQU	10000000B
   314                                  buf_dirty	EQU	01000000B
   315                                  ;***
   316                                  buf_visit	EQU	00100000B
   317                                  ;***
   318                                  buf_snbuf	EQU	00010000B
   319                                  
   320                                  buf_isDATA	EQU	00001000B
   321                                  buf_isDIR	EQU	00000100B
   322                                  buf_isFAT	EQU	00000010B
   323                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   324                                  
   325                                  buf_NetID	EQU	BUFINSIZ
   326                                  
   327                                  ; ----------------------------------------------------------------------
   328                                  ; DPB structure
   329                                  
   330                                  ; 24/07/2019 - Retro DOS v3.2
   331                                  
   332                                  ; ----------------------------------------------------------------------
   333                                  ;**	DPB - Drive Parameter Block
   334                                  
   335                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
   336                                  
   337                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   338                                  ;	possibly inaccurate deductions from code study... - jgl
   339                                  ;
   340                                  ;	The DPB is DOS's main structure for describing block devices.
   341                                  ;	It contains info about the "Drive" intermingled with info about
   342                                  ;	the FAT file system which is presumably on the drive.  I don't know
   343                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   344                                  ;
   345                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   346                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   347                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   348                                  
   349                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
   350                                  
   351                                  ; 12/05/2019 - Retro DOS v4.0
   352                                  
   353                                  struc	DPB
   354 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   355 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   356 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   357 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   358 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   359 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   360 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   361 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   362 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   363 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   364                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
   365 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   366 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   367 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   368 00000017 ??                      .MEDIA:		resb 1		; Media byte
   369 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   370                                  				; check the first time this DPB is used
   371 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   372 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   373 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   374                                  .size:
   375                                  endstruc
   376                                  
   377                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   378                                  
   379                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   380                                  
   381                                  ; ----------------------------------------------------------------------
   382                                  ; 26/03/2018
   383                                  
   384                                  ; IOCTL SUB-FUNCTIONS
   385                                  IOCTL_GET_DEVICE_INFO	EQU	0
   386                                  IOCTL_SET_DEVICE_INFO	EQU	1
   387                                  IOCTL_READ_HANDLE	EQU	2
   388                                  IOCTL_WRITE_HANDLE	EQU	3
   389                                  IOCTL_READ_DRIVE	EQU	4
   390                                  IOCTL_WRITE_DRIVE	EQU	5
   391                                  IOCTL_GET_INPUT_STATUS	EQU	6
   392                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   393                                  IOCTL_CHANGEABLE?	EQU	8
   394                                  IOCTL_SHARING_RETRY	EQU	11
   395                                  GENERIC_IOCTL_HANDLE	EQU	12
   396                                  GENERIC_IOCTL		EQU	13
   397                                  
   398                                  ; GENERIC IOCTL SUB-FUNCTIONS
   399                                  RAWIO			EQU	8
   400                                  
   401                                  ; RAWIO SUB-FUNCTIONS
   402                                  GET_DEVICE_PARAMETERS	EQU	60H
   403                                  SET_DEVICE_PARAMETERS	EQU	40H
   404                                  READ_TRACK		EQU	61H
   405                                  WRITE_TRACK		EQU	41H
   406                                  VERIFY_TRACK		EQU	62H
   407                                  FORMAT_TRACK		EQU	42H
   408                                  
   409                                  ; DEVICETYPE VALUES
   410                                  MAX_SECTORS_IN_TRACK	EQU	63
   411                                  DEV_5INCH		EQU	0
   412                                  DEV_5INCH96TPI		EQU	1
   413                                  DEV_3INCH720KB		EQU	2
   414                                  DEV_8INCHSS		EQU	3
   415                                  DEV_8INCHDS		EQU	4
   416                                  DEV_HARDDISK		EQU	5
   417                                  DEV_OTHER		EQU	7
   418                                  ;DEV_3INCH1440KB	EQU	7
   419                                  DEV_3INCH2880KB		EQU	9
   420                                  ; Retro DOS v2.0 - 26/03/2018
   421                                  ;;DEV_TAPE		EQU	6
   422                                  ;;DEV_ERIMO		EQU	8
   423                                  ;DEV_3INCH2880KB	EQU	9
   424                                  DEV_3INCH1440KB		EQU	10
   425                                  
   426                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   427                                  					; CURRENTLY SUPPORT.
   428                                  MAX_DEV_TYPE		EQU	10
   429                                  
   430                                  struc A_SECTORTABLE
   431 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   432 00000002 ????                    .ST_SECTORSIZE:		resw	1
   433                                  .size:
   434                                  endstruc
   435                                  
   436                                  struc A_BPB
   437 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   438 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   439 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   440 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   441 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   442 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   443 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   444 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   445 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   446 0000000F ????                    .BPB_HEADS:		resw	1
   447 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   448 00000013 ????                    			resw	1
   449 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   450 00000017 ????                    			resw	1
   451 00000019 ????????????            			resb	6	; NOTE:  many times these
   452                                  ;					; 	 6 bytes are omitted
   453                                  ;					;	 when BPB manipulations
   454                                  ;					;	 are performed!
   455                                  .size:
   456                                  endstruc
   457                                  
   458                                  struc A_DEVICEPARAMETERS
   459 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   460 00000001 ??                      .DP_DEVICETYPE:		resb	1
   461 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   462 00000004 ????                    .DP_CYLINDERS:		resw	1
   463 00000006 ??                      .DP_MEDIATYPE:		resb	1
   464 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   465 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   466 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   467                                  endstruc
   468                                  
   469                                  ; ----------------------------------------------------------------------
   470                                  ; Memory arena structure
   471                                  struc ARENA
   472 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
   473 00000001 ????                    .OWNER:		resw 1		; owner of arena item
   474 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
   475                                  endstruc
   476                                  
   477                                  ; ----------------------------------------------------------------------
   478                                  ;
   479                                  ; Process data block (otherwise known as program header)
   480                                  ;
   481                                  
   482                                  FILPERPROC	EQU     20
   483                                  
   484                                  struc PDB	; Process_data_block
   485 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   486 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   487 00000004 ??                                      resb 1
   488 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   489 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   490 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   491 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   492 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   493 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   494 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   495 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   496 00000032 ????                    .JFN_LENGTH:	resw 1 ; 25/03/18 ; number of handles allowed
   497 00000034 ????????                .JFN_POINTER:	resd 1 ; 25/03/18 ; pointer to JFN table
   498 00000038 ????????                .NEXT_PDB:	resd 1 ; 25/03/18 ; pointer to nested PDB's
   499 0000003C <res 14h>               .PAD1:		resb 20 ; 25/03/2018
   500 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   501 00000055 ??????????????          .PAD2:		resb 7 ; 25/03/2018
   502                                  endstruc
   503                                  
   504                                  ; ----------------------------------------------------------------------
   505                                  ; <system call definitions>
   506                                  
   507                                  ABORT                           EQU 0   ;  0      0
   508                                  STD_CON_INPUT                   EQU 1   ;  1      1
   509                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
   510                                  STD_AUX_INPUT                   EQU 3   ;  3      3
   511                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
   512                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
   513                                  RAW_CON_IO                      EQU 6   ;  6      6
   514                                  RAW_CON_INPUT                   EQU 7   ;  7      7
   515                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
   516                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
   517                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
   518                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
   519                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
   520                                  DISK_RESET                      EQU 13  ; 13      D
   521                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
   522                                  FCB_OPEN                        EQU 15  ; 15      F
   523                                  FCB_CLOSE                       EQU 16  ; 16     10
   524                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
   525                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
   526                                  FCB_DELETE                      EQU 19  ; 19     13
   527                                  FCB_SEQ_READ                    EQU 20  ; 20     14
   528                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
   529                                  FCB_CREATE                      EQU 22  ; 22     16
   530                                  FCB_RENAME                      EQU 23  ; 23     17
   531                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
   532                                  SET_DMA                         EQU 26  ; 26     1A
   533                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
   534                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
   535                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
   536                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
   537                                  GET_FCB_POSITION                EQU 36  ; 36     24
   538                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
   539                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
   540                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
   541                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
   542                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
   543                                  GET_DATE                        EQU 42  ; 42     2A
   544                                  SET_DATE                        EQU 43  ; 43     2B
   545                                  GET_TIME                        EQU 44  ; 44     2C
   546                                  SET_TIME                        EQU 45  ; 45     2D
   547                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
   548                                  ; Extended functionality group
   549                                  GET_DMA                         EQU 47  ; 47     2F
   550                                  GET_VERSION                     EQU 48  ; 48     30
   551                                  KEEP_PROCESS                    EQU 49  ; 49     31
   552                                  GET_DPB                         EQU 50  ; 50     32
   553                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
   554                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
   555                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
   556                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
   557                                  CHAR_OPER                       EQU 55  ; 55     37
   558                                  INTERNATIONAL                   EQU 56  ; 56     38
   559                                  ; XENIX CALLS
   560                                  ;   Directory Group
   561                                  MKDIR                           EQU 57  ; 57     39
   562                                  RMDIR                           EQU 58  ; 58     3A
   563                                  CHDIR                           EQU 59  ; 59     3B
   564                                  ;   File Group
   565                                  CREAT                           EQU 60  ; 60     3C
   566                                  OPEN                            EQU 61  ; 61     3D
   567                                  CLOSE                           EQU 62  ; 62     3E
   568                                  READ                            EQU 63  ; 63     3F
   569                                  WRITE                           EQU 64  ; 64     40
   570                                  UNLINK                          EQU 65  ; 65     41
   571                                  LSEEK                           EQU 66  ; 66     42
   572                                  CHMOD                           EQU 67  ; 67     43
   573                                  IOCTL                           EQU 68  ; 68     44
   574                                  XDUP                            EQU 69  ; 69     45
   575                                  XDUP2                           EQU 70  ; 70     46
   576                                  CURRENT_DIR                     EQU 71  ; 71     47
   577                                  ;    Memory Group
   578                                  ALLOC                           EQU 72  ; 72     48
   579                                  DEALLOC                         EQU 73  ; 73     49
   580                                  SETBLOCK                        EQU 74  ; 74     4A
   581                                  ;    Process Group
   582                                  EXEC                            EQU 75  ; 75     4B
   583                                  EXIT                            EQU 76  ; 76     4C
   584                                  _WAIT				EQU 77  ; 77     4D
   585                                  FIND_FIRST                      EQU 78  ; 78     4E
   586                                  ;   Special Group
   587                                  FIND_NEXT                       EQU 79  ; 79     4F
   588                                  ; SPECIAL SYSTEM GROUP
   589                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
   590                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
   591                                  GET_IN_VARS                     EQU 82  ; 82     52
   592                                  SETDPB                          EQU 83  ; 83     53
   593                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
   594                                  DUP_PDB                         EQU 85  ; 85     55
   595                                  RENAME                          EQU 86  ; 86     56
   596                                  FILE_TIMES                      EQU 87  ; 87     57
   597                                  
   598                                  ; ----------------------------------------------------------------------
   599                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
   600                                  ; ----------------------------------------------------------------------
   601                                  
   602                                  ;;	IF	STACKSW
   603                                  
   604                                  ;;
   605                                  ;; Internal Stack Parameters
   606                                  ;EntrySize		equ	8
   607                                  ;
   608                                  ;MinCount		equ	8
   609                                  ;DefaultCount		equ	9
   610                                  ;MaxCount		equ	64
   611                                  ;
   612                                  ;MinSize 		equ	32
   613                                  ;DefaultSize		equ	128
   614                                  ;MaxSize 		equ	512
   615                                  
   616                                  ;;	ENDIF
   617                                  
   618                                  
   619                                  ; ----------------------------------------------------------------------
   620                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
   621                                  ; ----------------------------------------------------------------------
   622                                  					  ;;Rev 3.30 Modification
   623                                  ; ROM BIOS CALL PACKET STRUCTURES					  
   624                                  									  
   625                                  ;*******************************					  
   626                                  ;System Service call ( Int 15h )					  
   627                                  ;*******************************					  
   628                                  ;Function AH = 0C0h, Return system configuration			  
   629                                  ;For PC and PCJR on return:						  
   630                                  ;	(AH)	= 80h							  
   631                                  ;	(CY)	= 1							  
   632                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
   633                                  ;	(AH)	= 86h							  
   634                                  ;	(CY)	= 1							  
   635                                  ;For all others:							  
   636                                  ;	(AH)	= 0							  
   637                                  ;	(CY)	= 0							  
   638                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
   639                                  ; System descriptor :							  
   640                                  ;	DW	xxxx		length of descriptor in bytes,		  
   641                                  ;				minimum length = 8			  
   642                                  ;	DB	xx		model byte				  
   643                                  ;				0FFh	= PC				  
   644                                  ;				0FEh	= PC/XT, Portable		  
   645                                  ;				0FDh	= PC/JR 			  
   646                                  ;				0FCh	= PC/AT				  
   647                                  ;				0F9h	= Convertable			  
   648                                  ;				0F8h	= Model 80			  
   649                                  ;				0E0 thru 0EFh = reserved		  
   650                                  ;									  
   651                                  ;	DB	xx		secondary model byte			  
   652                                  ;				000h	= PC1				  
   653                                  ;				000h	= PC/XT, Portable		  
   654                                  ;				000h	= PC/JR 			  
   655                                  ;				000h	= PC/AT 			  
   656                                  ;				001h	= PC/AT Model 339		  
   657                                  ;				003h	= PC/RT				  
   658                                  ;				000h	= Convertable			  
   659                                  ;									  
   660                                  ;	DB	xx		bios revision level			  
   661                                  ;				00 for first release, subsequent release  
   662                                  ;				of code with same model byte and	  
   663                                  ;				secondary model byte require revison level
   664                                  ;				to increase by one.			  
   665                                  ;									  
   666                                  ;	DB	xx		feature information byte 1		  
   667                                  ;				X0000000 = 1, bios use DMA channel 3	  
   668                                  ;					 = 0, DMA channel 3 not used	  
   669                                  ;									  
   670                                  ;				0X000000 = 1, 2nd Interrupt chip present  
   671                                  ;					 = 0, 2nd Interrupt chip not present
   672                                  ;									  
   673                                  ;				00X00000 = 1, Real Time Clock present	  
   674                                  ;					 = 0, Real Time Clock not present 
   675                                  ;									  
   676                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
   677                                  ;						called in keyboard interrupt
   678                                  ;						(Int 09h).		  
   679                                  ;					 = 0, Keyboard escape sequence not
   680                                  ;						called. 		  
   681                                  ;				0000XXXX reserved			  
   682                                  ;									  
   683                                  ;	DB	xx		feature information byte 2 - reserved	  
   684                                  ;									  
   685                                  ;	DB	xx		feature information byte 2 - reserved	  
   686                                  ;									  
   687                                  ;	DB	xx		feature information byte 2 - reserved	  
   688                                  ;									  
   689                                  ;	DB	xx		feature information byte 2 - reserved	  
   690                                  ;									  
   691                                  									  
   692                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   693 00000000 ????                    .bios_SD_leng:		resw 1				  
   694 00000002 ??                      .bios_SD_modelbyte:	resb 1					  
   695                                  .bios_SD_scnd_modelbyte: 
   696 00000003 ??                      			resb 1					  
   697 00000004 ??                      			resb 1					  
   698 00000005 ??                      .bios_SD_featurebyte1:	resb 1					  
   699 00000006 ????????                			resb 4					  
   700                                  endstruc					  
   701                                  									  
   702                                  ;FeatureByte1	bit map equates 					  
   703                                  DMAchannel3		equ 10000000b					  
   704                                  ScndIntController	equ 01000000b					  
   705                                  RealTimeClock		equ 00100000b					  
   706                                  KeyEscapeSeq		equ 00010000b					  
   707                                  					;;End of Modification
   708                                  
   709                                  ; ----------------------------------------------------------------------
   710                                  ; SYSVAR.INC (MSDOS 3.3 - 24/07/1987) 	
   711                                  ; ----------------------------------------------------------------------
   712                                  ; 05/06/2018 - Retro DOS v3.0
   713                                  
   714                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
   715                                  struc SysInitVars
   716 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
   717 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
   718 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
   719 0000000C ????????                .SYSI_CON:    resd 1			; CON device
   720 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
   721 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
   722 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
   723 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
   724 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
   725 00000020 ??                      .SYSI_NUMIO:  resb 1			; Number of block devices
   726 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
   727 00000022 ????????                .SYSI_DEV:    resd 1			; device list
   728                                  .size:
   729                                  endstruc
   730                                  
   731                                  ;This is added for more information exchage between DOS, BIOS.
   732                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
   733                                  struc SysInitVars_Ext
   734 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
   735 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
   736                                  endstruc
   737                                  
   738                                  ; 09/06/2018
   739                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
   740                                  SYSI_DPB    equ	0
   741                                  SYSI_SFT    equ 4
   742                                  SYSI_CLOCK  equ 8
   743                                  SYSI_CON    equ 12
   744                                  SYSI_MAXSEC equ 16
   745                                  SYSI_BUF    equ 18 		
   746                                  SYSI_CDS    equ 22
   747                                  SYSI_FCB    equ 26
   748                                  SYSI_KEEP   equ 30
   749                                  SYSI_NUMIO  equ	32
   750                                  SYSI_NCDS   equ	33
   751                                  SYSI_DEV    equ 34
   752                                  
   753                                  ; ----------------------------------------------------------------------
   754                                  ; CURDIR.INC (MSDOS 3.3 - 24/07/1987) 	
   755                                  ; ----------------------------------------------------------------------
   756                                  ; 08/06/2018 - Retro DOS v3.0
   757                                  
   758                                  ;	SCCSID = @(#)curdir.asm	1.1 85/04/10
   759                                  ;BREAK <Current directory list structure>
   760                                  									  
   761                                  ; CDS items are used by the internal routines to store cluster numbers and
   762                                  ; network identifiers for each logical name.  The ID field is used dually,
   763                                  ; both as net ID and for a cluster number for local devices.  In the case
   764                                  ; of local devices, the cluster number will be -1 if there is a potential
   765                                  ; of the disk being changed or if the path must be recracked.  The END
   766                                  ; field is the location of the end of the definition.  No .. is allowed
   767                                  ; past this point							
   768                                  
   769                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
   770                                  TEMPLEN 	EQU	DIRSTRLEN*2
   771                                  
   772                                  struc 		curdir_list
   773 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
   774 00000043 ????                    .cdir_flags	resw	1		; various flags
   775 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
   776 00000049 ????                    .cdir_ID	resw	1		; cluster of current dir (net ID)
   777 0000004B ????                    		resw	1
   778 0000004D ????                    .cdir_usr_word	resw	1
   779 0000004F ????                    .cdir_end	resw	1		; end of assignment
   780                                  .size:
   781                                  endstruc
   782                                  
   783                                  curdirLen	EQU	curdir_list.size	; Needed for screwed up
   784                                  						; ASM87 which doesn't allow
   785                                  						; Size directive as a macro
   786                                  						; argument
   787                                  %define curdir_netID	dword [curdir_list.cdir_ID]
   788                                  
   789                                  ;Flag word masks
   790                                  curdir_isnet	EQU	1000000000000000B
   791                                  curdir_inuse	EQU	0100000000000000B
   792                                  curdir_splice	EQU	0010000000000000B
   793                                  curdir_local	EQU	0001000000000000B
   794                                  
   795                                  ; ----------------------------------------------------------------------
   796                                  ; SF.INC (MSDOS 6.0 - 1991) 	
   797                                  ; ----------------------------------------------------------------------
   798                                  ; 25/03/2019 - Retro DOS v4.0
   799                                  ; 26/07/2019 - Retro DOS v3.2
   800                                  
   801                                  ; system file table
   802                                  
   803                                  ;**	System File Table SuperStructure
   804                                  ;
   805                                  ;	The system file table entries are allocated in contiguous groups.
   806                                  ;	There may be more than one such groups; the SF "superstructure"
   807                                  ;	tracks the groups.
   808                                  
   809                                  struc	SF
   810 00000000 ????????                .SFLink:	resd	1
   811 00000004 ????                    .SFCount:	resw	1		; number of entries
   812 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
   813                                  .size:
   814                                  endstruc
   815                                  
   816                                  ;**	System file table entry
   817                                  ;
   818                                  ;	These are the structures which are at SFTABLE in the SF structure.
   819                                  
   820                                  struc SF_ENTRY
   821 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   822                                  				;   if FCB then ref count
   823 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   824 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   825 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   826                                  				; Bit 15 = 1 if remote file
   827                                  				;	 = 0 if local file or device
   828                                  				; Bit 14 = 1 if date/time is not to be
   829                                  				;   set from clock at CLOSE.  Set by
   830                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   831                                  				;   other reseters of the dirty bit
   832                                  				;   (WRITE)
   833                                  				; Bit 13 = Pipe bit (reserved)
   834                                  				;
   835                                  				; Bits 0-7 (old FCB_devid bits)
   836                                  				; If remote file or local file, bit
   837                                  				; 6=0 if dirty Device ID number, bits
   838                                  				; 0-5 if local file.
   839                                  				; bit 7=0 for local file, bit 7
   840                                  				;      =1 for local I/O device
   841                                  				; If local I/O device, bit 6=0 if EOF (input)
   842                                  				;		Bit 5=1 if Raw mode
   843                                  				;		Bit 0=1 if console input device
   844                                  				;		Bit 1=1 if console output device
   845                                  				;		Bit 2=1 if null device
   846                                  				;		Bit 3=1 if clock device
   847 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   848                                  				; to device header if local device,
   849                                  				; points to net device header if
   850                                  				; remote
   851 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   852 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   853 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   854 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   855 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   856                                  
   857                                  ; Starting here, the next 7 bytes may be used by the file system to store
   858                                  ; an ID
   859                                  
   860                                  ; 09/07/2018 - Retro DOS v3.0
   861                                  
   862                                  ; MSDOS 3.3 SF.INC, 1987
   863                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   864                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   865                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   866                                  ;				; for this file
   867                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   868                                  
   869                                  ; MSDOS 6.0, SF.INC, 1991
   870 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   871 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   872                                  				; for this file
   873 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   874                                  
   875                                  ; End of 7 bytes of file-system specific info.
   876                                  
   877 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   878                                  				; directory entry.  This is used by
   879                                  				; close to detect file deleted and
   880                                  				; disk changed errors.
   881                                  ; SHARING INFO
   882 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   883 0000002F ????                    .sf_UID:	resw	1
   884 00000031 ????                    .sf_PID:	resw	1
   885 00000033 ????                    .sf_MFT:	resw	1
   886                                  
   887                                  ; MSDOS 6.0, SF.INC, 1991
   888 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   889 00000037 ????????                .sf_IFS_HDR:	resd	1
   890                                  
   891                                  .size:
   892                                  endstruc
   893                                  
   894                                  ; ----------------------------------------------------------------------
   895                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
   896                                  ; ----------------------------------------------------------------------
   897                                  ; 11/06/2018 - Retro DOS v3.0
   898                                  
   899                                  ;Equates for COUNTRY INFORMATION.
   900                                  SetCountryInfo		EQU	1	;country info
   901                                  SetUcase		EQU	2	;uppercase table
   902                                  SetLcase		EQU	3	;lowercase table (Reserved)
   903                                  SetUcaseFile		EQU	4	;uppercase file spec table
   904                                  SetFileList		EQU	5	;valid file character list
   905                                  SetCollate		EQU	6	;collating sequence
   906                                  SetDBCS 		EQU	7	;double byte character set
   907                                  SetALL			EQU	-1	;all the entries
   908                                  
   909                                  ;DOS country and code page information table structure.
   910                                  ;Internally, IBMDOS gives a pointer to this table.
   911                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
   912                                  ;this structure.
   913                                  
   914                                  struc country_cdpg_info ; DOS_country_cdpg_info
   915 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
   916 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
   917 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
   918 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
   919 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
   920 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
   921                                  
   922 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
   923 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
   924                                  
   925 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
   926 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
   927                                  
   928 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
   929 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
   930                                  
   931 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
   932 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
   933 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
   934 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
   935 00000067 ????                    .ccDFormat:		resw	1	;date format
   936 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
   937                                  					;5 byte of (currency symbol+0)
   938 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
   939 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
   940 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
   941 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
   942 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
   943 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
   944 00000078 ??                      .ccTFormat:		resb	1	;time format
   945 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
   946 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
   947 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
   948                                  .size:
   949                                  endstruc
   950                                  
   951                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
   952                                  
   953                                  ; ----------------------------------------------------------------------
   954                                  
   955                                          ;INCLUDE DOSSYM.ASM
   956                                          ;INCLUDE DEVSYM.ASM
   957                                  
   958                                          ;IF      NOT IBM
   959                                          ;IF      NOT IBMJAPVER
   960                                          ;EXTRN   RE_INIT:FAR
   961                                          ;ENDIF
   962                                          ;ENDIF
   963                                  
   964                                  ;SYSINITSEG      SEGMENT PUBLIC 'SYSTEM_INIT'
   965                                  
   966                                  	;ASSUME  CS:SYSINITSEG,DS:NOTHING,ES:NOTHING,SS:NOTHING
   967                                  
   968                                  SYSINITSEG:
   969                                  
   970                                  	[org 0]
   971                                  
   972                                  	; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
   973                                  
   974                                  	;EXTRN	BADCOM:BYTE					
   975                                  	;EXTRN	SYSSIZE:BYTE					
   976                                  	;EXTRN	CONDEV:BYTE,AUXDEV:BYTE,PRNDEV:BYTE,COMMND:BYTE
   977                                  	;EXTRN	DeviceParameters:byte
   978                                  				
   979                                  	;EXTRN	INT24:NEAR,MEM_ERR:NEAR
   980                                  	;EXTRN	DOCONF:NEAR
   981                                  
   982                                          ;PUBLIC  CURRENT_DOS_LOCATION
   983                                          ;PUBLIC  FINAL_DOS_LOCATION
   984                                          ;PUBLIC  DEVICE_LIST
   985                                          ;PUBLIC  MEMORY_SIZE
   986                                          ;PUBLIC  DEFAULT_DRIVE
   987                                          ;PUBLIC  BUFFERS
   988                                          ;PUBLIC  FILES
   989                                          ;PUBLIC  SYSINIT
   990                                  	;PUBLIC	 CNTRYFILEHANDLE
   991                                  	;PUBLIC	 COMMAND_LINE
   992                                  
   993                                  ; 29/06/2019 - Retro DOS v3.1
   994                                  
   995                                  ; ----------------------------------------------------------------------
   996                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
   997                                  ; ----------------------------------------------------------------------
   998                                  ; 21/03/2019 - Retro DOS v4.0
   999                                  
  1000                                  true	equ	0FFFFh
  1001                                  false	equ	0
  1002                                  cr	equ	13
  1003                                  lf	equ	10
  1004                                  tab	equ	9
  1005                                  
  1006                                  multMULT		equ	4Ah
  1007                                  multMULTGETHMAPTR	equ	1
  1008                                  multMULTALLOCHMA	equ	2
  1009                                  
  1010                                  ;NOEXEC  equ     FALSE
  1011                                  
  1012                                  ;stacksw    equ	true	;include switchable hardware stacks
  1013                                  ;mycds_size equ	88	;size of curdir_list. if it is not
  1014                                  			;the same, then will generate compile error.
  1015                                  
  1016                                  EntrySize   equ     8
  1017                                  
  1018                                  MinCount    equ     8
  1019                                  DefaultCount equ    9
  1020                                  MaxCount    equ     64
  1021                                  
  1022                                  MinSize     equ     32
  1023                                  DefaultSize equ     128
  1024                                  MaxSize     equ     512
  1025                                  
  1026                                  ;%define allocbyte	byte [es:bp+0]  ; byte [es:bp]
  1027                                  ;%define intlevel	byte [es:bp+1]
  1028                                  ;%define savedsp 	word [es:bp+2]
  1029                                  ;%define savedss 	word [es:bp+4]
  1030                                  ;%define newsp		word [es:bp+6]
  1031                                  
  1032                                  allocbyte   equ     0
  1033                                  intlevel    equ     1
  1034                                  savedsp     equ     2
  1035                                  savedss     equ     4
  1036                                  newsp       equ     6
  1037                                  
  1038                                  free	    equ     0
  1039                                  allocated   equ     1
  1040                                  overflowed  equ     2
  1041                                  clobbered   equ     3
  1042                                  
  1043                                  ;---------------------------------------
  1044                                  ; external variable defined in ibmbio module for multi-track
  1045                                  
  1046                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
  1047                                  			  ; it on after handling config.sys file as a
  1048                                  			  ; default value,if multrk_flag = multrk_off1.
  1049                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
  1050                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
  1051                                  
  1052                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
  1053                                  
  1054                                  SYSINIT$:
  1055                                  	;IF	STACKSW 
  1056                                  	; include MSSTACK.INC	;Main stack program and data definitions
  1057                                  	; include STKMES.INC	;Fatal stack error message
  1058                                  	;   public Endstackcode
  1059                                  ;Endstackcode	label byte
  1060                                  	;ENDIF
  1061                                  
  1062                                  ; 05/07/2018
  1063                                  ; ----------------------------------------------------------------------
  1064                                  ; 04/06/2018 - Retro DOS v3.0
  1065                                  
  1066                                  ;	MSStack.inc
  1067                                  ;
  1068                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
  1069                                  ;	should follow the standard Interrupt Sharing Scheme which has
  1070                                  ;	a standard header structure.
  1071                                  ;	Fyi, the following shows the relations between
  1072                                  ;	the interrupt vector and interrupt level.
  1073                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
  1074                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
  1075                                  ;	MSSTACK module modifies the following interrupt vectors
  1076                                  ;	to meet the standard Interrupt Sharing standard;
  1077                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
  1078                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
  1079                                  ;	should be initialized to indicat whether this interrupt handler is
  1080                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
  1081                                  ;	program header is initialized in STKINIT.INC module.
  1082                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
  1083                                  ;
  1084                                  
  1085                                  ;  User specifies the number of stack elements - default = 9
  1086                                  ;						 minimum = 8
  1087                                  ;						 maximum = 64
  1088                                  ;
  1089                                  ;  Intercepts Asynchronous Hardware Interrupts only
  1090                                  ;
  1091                                  ;  Picks a stack from pool of stacks and switches to it
  1092                                  ;
  1093                                  ;  Calls the previously saved interrupt vector after pushing flags
  1094                                  ;
  1095                                  ;  On return, returns the stack to the stack pool
  1096                                  ;
  1097                                  
  1098                                  ; This is a modification of STACKS:
  1099                                  ; 1. To fix a bug which was causing the program to take up too much space.
  1100                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
  1101                                  ;    . Clobbers the stack that got too big instead of innocent stack
  1102                                  ;    . Allows system to work if the only stack that got too big was the most
  1103                                  ;      deeply nested one
  1104                                  ; 3. Disables NMI interrupts while setting the NMI vector.
  1105                                  ; 4. Does not intercept any interupts on a PCjr.
  1106                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
  1107                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
  1108                                  
  1109                                  		;EVEN
  1110                                  ;align 2
  1111 00000000 0000                    		dw	0	; spare field but leave these in order
  1112 00000002 0000                    StackCount:	dw	0
  1113 00000004 0000                    StackAt: 	dw	0
  1114 00000006 0000                    StackSize:	dw	0
  1115 00000008 0000                    Stacks:		dw	0
  1116 0000000A 0000                    		dw	0
  1117                                  
  1118 0000000C [0800]                  FirstEntry:	dw	Stacks
  1119 0000000E [4800]                  LastEntry:	dw	Stacks+(DefaultCount*EntrySize)-EntrySize
  1120 00000010 [4800]                  NextEntry:	dw	Stacks+(DefaultCount*EntrySize)-EntrySize
  1121                                  
  1122                                  ;***********************************************************************
  1123                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
  1124                                  
  1125                                  ; ----------------------------------------------------------------------
  1126                                  
  1127 00000012 00000000                old02:	dd	0
  1128                                  
  1129                                  int02:
  1130                                  
  1131                                  ; *********************************************************************
  1132                                  ;
  1133                                  ; this is special support for the pc convertible / nmi handler
  1134                                  ;
  1135                                  ;	on the pc convertible, there is a situation where an nmi can be 
  1136                                  ;	caused by using the "out" instructions to certain ports. when this
  1137                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
  1138                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
  1139                                  ;	includes other type of interrupts (hardware and software), and
  1140                                  ;	also includes other type of nmi's. when any nmi has occured,
  1141                                  ;	no other interrupt (hardware, software or nmi) can occur until
  1142                                  ;	the software takes specific steps to allow further interrupting.
  1143                                  ;
  1144                                  ;	for pc convertible, the situation where the nmi is generated by the
  1145                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
  1146                                  ;	otherwords, it is actually a "restartable exception". in this
  1147                                  ;	case, the software handler must be able to get to the stack in
  1148                                  ;	order to figure out what instruction caused the problem, where
  1149                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
  1150                                  ;	we will not switch stacks in this situation. this situation is
  1151                                  ;	detected by interrogating port 62h, and checking for a bit value
  1152                                  ;	of 80h. if set, *****do not switch stacks*****.
  1153                                  ;
  1154                                  ; *********************************************************************
  1155                                  
  1156 00000016 50                      	push	ax
  1157 00000017 06                      	push	es
  1158 00000018 B800F0                  	mov	ax,0F000h
  1159 0000001B 8EC0                    	mov	es,ax
  1160                                  	; 26/05/2019
  1161 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ;check if convertible
  1162 00000023 07                      	pop	es
  1163 00000024 750C                    	jne	short normal02
  1164                                  
  1165 00000026 E462                    	in	al,62h
  1166 00000028 A880                    	test	al,80h
  1167 0000002A 7406                    	jz	short normal02
  1168                                  
  1169                                  special02:
  1170 0000002C 58                      	pop	ax
  1171 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
  1172                                  
  1173                                  normal02:
  1174 00000032 58                      	pop	ax
  1175 00000033 E81101                  	call	do_int_stacks
  1176 00000036 [1200]                  	dw	old02
  1177                                  
  1178                                  ; ----------------------------------------------------------------------
  1179                                  
  1180 00000038 00000000                old08:	dd	0
  1181                                  
  1182                                  int08:
  1183 0000003C E80801                  	call	do_int_stacks
  1184 0000003F [3800]                  	dw	old08
  1185                                  
  1186                                  ; ----------------------------------------------------------------------
  1187                                  
  1188 00000041 00000000                old09:	dd	0
  1189                                  
  1190                                  int09:
  1191                                  
  1192                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
  1193                                  ; as its first instruction for compatibility reasons
  1194                                  
  1195 00000045 EB02                    	jmp	short keyboard_lbl
  1196 00000047 90                      	nop
  1197 00000048 00                      	db	0
  1198                                  
  1199                                  keyboard_lbl:
  1200 00000049 E8FB00                  	call	do_int_stacks
  1201 0000004C [4100]                  	dw	old09
  1202                                  
  1203                                  ; ----------------------------------------------------------------------
  1204                                  
  1205 0000004E 00000000                old70:	dd	0
  1206                                  
  1207                                  int70:
  1208 00000052 E8F200                  	call	do_int_stacks
  1209 00000055 [4E00]                  	dw	old70
  1210                                  
  1211                                  ; ----------------------------------------------------------------------
  1212                                  
  1213                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
  1214                                  ;public	int&a
  1215                                  ;public	old&a
  1216                                  ;public	firstflag&a
  1217                                  ;int&a	proc	far
  1218                                  ;	jmp	short entry_int&a&_stk
  1219                                  ;old&a	dd	  0		;forward pointer
  1220                                  ;	dw	  424bh 	;compatible signature for int. sharing
  1221                                  ;firstflag&a db   0		;the firstly hooked.
  1222                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
  1223                                  ;	db	7 dup (0)	;reserved for future.
  1224                                  ;entry_int&a&_stk:
  1225                                  ;	call	do_int_stacks
  1226                                  ;	dw	old&a
  1227                                  ;intret_&a:
  1228                                  ;	iret
  1229                                  ;int&a	endp
  1230                                  ;	endm
  1231                                  
  1232                                  ; ----------------------------------------------------------------------
  1233                                  
  1234                                  int0A:
  1235 00000057 EB10                    	jmp	short entry_int0A_stk
  1236 00000059 00000000                old0A:	dd	0	
  1237 0000005D 4B42                    	dw	424Bh
  1238                                  firstflag0A:
  1239 0000005F 00                      	db	0
  1240 00000060 EB0C                    	jmp	short intret_0A
  1241 00000062 00<rep 7h>              	times	7 db 0
  1242                                  
  1243                                  entry_int0A_stk:
  1244 00000069 E8DB00                  	call	do_int_stacks
  1245 0000006C [5900]                  	dw	old0A
  1246                                  intret_0A:
  1247 0000006E CF                      	iret
  1248                                  
  1249                                  ; ----------------------------------------------------------------------
  1250                                  
  1251                                  int0B:
  1252 0000006F EB10                    	jmp	short entry_int0B_stk
  1253 00000071 00000000                old0B:	dd	0	
  1254 00000075 4B42                    	dw	424Bh
  1255                                  firstflag0B:
  1256 00000077 00                      	db	0
  1257 00000078 EB0C                    	jmp	short intret_0B
  1258 0000007A 00<rep 7h>              	times	7 db 0
  1259                                  
  1260                                  entry_int0B_stk:
  1261 00000081 E8C300                  	call	do_int_stacks
  1262 00000084 [7100]                  	dw	old0B
  1263                                  intret_0B:
  1264 00000086 CF                      	iret
  1265                                  
  1266                                  ; ----------------------------------------------------------------------
  1267                                  
  1268                                  int0C:
  1269 00000087 EB10                    	jmp	short entry_int0C_stk
  1270 00000089 00000000                old0C:	dd	0	
  1271 0000008D 4B42                    	dw	424Bh
  1272                                  firstflag0C:
  1273 0000008F 00                      	db	0
  1274 00000090 EB0C                    	jmp	short intret_0C
  1275 00000092 00<rep 7h>              	times	7 db 0
  1276                                  
  1277                                  entry_int0C_stk:
  1278 00000099 E8AB00                  	call	do_int_stacks
  1279 0000009C [8900]                  	dw	old0C
  1280                                  intret_0C:
  1281 0000009E CF                      	iret
  1282                                  
  1283                                  ; ----------------------------------------------------------------------
  1284                                  
  1285                                  int0D:
  1286 0000009F EB10                    	jmp	short entry_int0D_stk
  1287 000000A1 00000000                old0D:	dd	0	
  1288 000000A5 4B42                    	dw	424Bh
  1289                                  firstflag0D:
  1290 000000A7 00                      	db	0
  1291 000000A8 EB0C                    	jmp	short intret_0D
  1292 000000AA 00<rep 7h>              	times	7 db 0
  1293                                  
  1294                                  entry_int0D_stk:
  1295 000000B1 E89300                  	call	do_int_stacks
  1296 000000B4 [A100]                  	dw	old0D
  1297                                  intret_0D:
  1298 000000B6 CF                      	iret
  1299                                  
  1300                                  ; ----------------------------------------------------------------------
  1301                                  
  1302                                  int0E:
  1303 000000B7 EB10                    	jmp	short entry_int0E_stk
  1304 000000B9 00000000                old0E:	dd	0	
  1305 000000BD 4B42                    	dw	424Bh
  1306                                  firstflag0E:
  1307 000000BF 00                      	db	0
  1308 000000C0 EB0C                    	jmp	short intret_0E
  1309 000000C2 00<rep 7h>              	times	7 db 0
  1310                                  
  1311                                  entry_int0E_stk:
  1312 000000C9 E87B00                  	call	do_int_stacks
  1313 000000CC [B900]                  	dw	old0E
  1314                                  intret_0E:
  1315 000000CE CF                      	iret
  1316                                  
  1317                                  ; ----------------------------------------------------------------------
  1318                                  
  1319                                  int72:
  1320 000000CF EB10                    	jmp	short entry_int72_stk
  1321 000000D1 00000000                old72:	dd	0	
  1322 000000D5 4B42                    	dw	424Bh
  1323                                  firstflag72:
  1324 000000D7 00                      	db	0
  1325 000000D8 EB0C                    	jmp	short intret_72
  1326 000000DA 00<rep 7h>              	times	7 db 0
  1327                                  
  1328                                  entry_int72_stk:
  1329 000000E1 E86300                  	call	do_int_stacks
  1330 000000E4 [D100]                  	dw	old72
  1331                                  intret_72:
  1332 000000E6 CF                      	iret
  1333                                  
  1334                                  ; ----------------------------------------------------------------------
  1335                                  
  1336                                  int73:
  1337 000000E7 EB10                    	jmp	short entry_int73_stk
  1338 000000E9 00000000                old73:	dd	0	
  1339 000000ED 4B42                    	dw	424Bh
  1340                                  firstflag73:
  1341 000000EF 00                      	db	0
  1342 000000F0 EB0C                    	jmp	short intret_73
  1343 000000F2 00<rep 7h>              	times	7 db 0
  1344                                  
  1345                                  entry_int73_stk:
  1346 000000F9 E84B00                  	call	do_int_stacks
  1347 000000FC [E900]                  	dw	old73
  1348                                  intret_73:
  1349 000000FE CF                      	iret
  1350                                  
  1351                                  ; ----------------------------------------------------------------------
  1352                                  
  1353                                  int74:
  1354 000000FF EB10                    	jmp	short entry_int74_stk
  1355 00000101 00000000                old74:	dd	0	
  1356 00000105 4B42                    	dw	424Bh
  1357                                  firstflag74:
  1358 00000107 00                      	db	0
  1359 00000108 EB0C                    	jmp	short intret_74
  1360 0000010A 00<rep 7h>              	times	7 db 0
  1361                                  
  1362                                  entry_int74_stk:
  1363 00000111 E83300                  	call	do_int_stacks
  1364 00000114 [0101]                  	dw	old74
  1365                                  intret_74:
  1366 00000116 CF                      	iret
  1367                                  
  1368                                  ; ----------------------------------------------------------------------
  1369                                  
  1370                                  int76:
  1371 00000117 EB10                    	jmp	short entry_int76_stk
  1372 00000119 00000000                old76:	dd	0	
  1373 0000011D 4B42                    	dw	424Bh
  1374                                  firstflag76:
  1375 0000011F 00                      	db	0
  1376 00000120 EB0C                    	jmp	short intret_76
  1377 00000122 00<rep 7h>              	times	7 db 0
  1378                                  
  1379                                  entry_int76_stk:
  1380 00000129 E81B00                  	call	do_int_stacks
  1381 0000012C [1901]                  	dw	old76
  1382                                  intret_76:
  1383 0000012E CF                      	iret
  1384                                  
  1385                                  ; ----------------------------------------------------------------------
  1386                                  
  1387                                  int77:
  1388 0000012F EB10                    	jmp	short entry_int77_stk
  1389 00000131 00000000                old77:	dd	0	
  1390 00000135 4B42                    	dw	424Bh
  1391                                  firstflag77:
  1392 00000137 00                      	db	0
  1393 00000138 EB0C                    	jmp	short intret_77
  1394 0000013A 00<rep 7h>              	times	7 db 0
  1395                                  
  1396                                  entry_int77_stk:
  1397 00000141 E80300                  	call	do_int_stacks
  1398 00000144 [3101]                  	dw	old77
  1399                                  intret_77:
  1400 00000146 CF                      	iret
  1401                                  
  1402                                  ; ----------------------------------------------------------------------
  1403                                  
  1404                                  ;********************************************************************
  1405                                  ;common routines
  1406                                  ;********************************************************************
  1407                                  
  1408                                  ; do interrupt stack switching. the fake return address holds
  1409                                  ; a pointer to the far-pointer of the actual interrupt
  1410                                  ; service routine
  1411                                  
  1412                                  ; 21/03/2019 - Retro DOS v4.0
  1413                                  
  1414                                  ;allocbyte   equ 0
  1415                                  ;intlevel    equ 1
  1416                                  ;savedsp     equ 2
  1417                                  ;savedss     equ 4
  1418                                  ;newsp       equ 6
  1419                                  
  1420                                  do_int_stacks:
  1421 00000147 50                      	push	ax
  1422 00000148 55                      	push	bp
  1423 00000149 06                      	push	es
  1424 0000014A 2E8E06[0A00]            	mov	es,[cs:Stacks+2]	; Get segment of stacks
  1425 0000014F 2E8B2E[1000]            	mov	bp,[cs:NextEntry]	; get most likely candidate
  1426 00000154 B001                    	mov	al,allocated ; 1
  1427                                  	;xchg	[es:bp+allocbyte],al 
  1428 00000156 26864600                	xchg	[es:bp],al		; grab the entry
  1429                                  
  1430 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
  1431 0000015C 7551                    	jne	short notfree02
  1432                                  
  1433 0000015E 2E832E[1000]08          	sub	word [cs:NextEntry],EntrySize ; set for next interrupt
  1434                                  
  1435                                  found02:
  1436 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
  1437 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
  1438                                  
  1439 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
  1440                                  
  1441 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
  1442 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
  1443 00000176 7544                    	jne	short foundbad02
  1444                                  
  1445 00000178 8CC0                    	mov	ax,es			; point ss,sp to the new stack
  1446 0000017A 8EC5                    	mov	es,bp
  1447 0000017C 89E5                    	mov	bp,sp
  1448 0000017E 8B6E06                  	mov	bp,[bp+6]
  1449 00000181 8ED0                    	mov	ss,ax
  1450 00000183 8CC4                    	mov	sp,es
  1451 00000185 8EC0                    	mov	es,ax
  1452 00000187 2E8B6E00                	mov	bp,[cs:bp]
  1453                                  
  1454 0000018B 9C                      	pushf				; go execute the real interrupt handler
  1455 0000018C 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
  1456                                  
  1457 00000190 89E5                    	mov	bp,sp			; retrieve the table offset for us
  1458 00000192 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
  1459 00000196 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
  1460 0000019A 268B6602                	mov	sp,[es:bp+savedsp]
  1461                                  
  1462                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
  1463 0000019E 26C6460000              	mov	byte [es:bp],free ; 0
  1464 000001A3 2E892E[1000]            	mov	[cs:NextEntry],bp	; setup to use next time
  1465                                  
  1466 000001A8 07                      	pop	es
  1467 000001A9 5D                      	pop	bp			; saved on entry
  1468 000001AA 58                      	pop	ax			; saved on entry
  1469 000001AB 83C402                  	add	sp,2
  1470 000001AE CF                      	iret				; done with this interrupt
  1471                                  
  1472                                  notfree02:
  1473 000001AF 3C01                    	cmp	al,allocated ; 1	; error flag
  1474 000001B1 7404                    	je	short findnext02	;  no, continue
  1475                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
  1476 000001B3 26864600                	xchg	[es:bp],al
  1477                                  
  1478                                  findnext02:
  1479 000001B7 E81200                  	call	longpath
  1480 000001BA EBA8                    	jmp	short found02
  1481                                  
  1482                                  foundbad02:
  1483 000001BC 2E3B2E[0C00]            	cmp	bp,[cs:FirstEntry]
  1484 000001C1 72F4                    	jc	short findnext02
  1485 000001C3 89C5                    	mov	bp,ax			; flag this entry
  1486                                  	;mov	byte [es:bp+allocbyte],clobbered
  1487 000001C5 26C6460003              	mov	byte [es:bp],clobbered ; 3
  1488 000001CA EBEB                    	jmp	short findnext02	; keep looking
  1489                                  
  1490                                  ; ----------------------------------------------------------------------
  1491                                  
  1492                                  ; Common routines
  1493                                  
  1494                                  longpath:
  1495                                  	; 21/03/2019
  1496 000001CC 2E8B2E[0E00]            	mov	bp,[cs:LastEntry]	; start with last entry in table
  1497                                  lploopp:
  1498                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
  1499 000001D1 26807E0000              	cmp	byte [es:bp],free
  1500 000001D6 7512                    	jne	short inuse		;  no, try next one
  1501                                  
  1502 000001D8 B001                    	mov	al,allocated
  1503                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
  1504 000001DA 26864600                	xchg	[es:bp],al
  1505 000001DE 3C00                    	cmp	al,free 		; is it still free?
  1506 000001E0 7414                    	je	short found		;  yes, go use it
  1507                                  
  1508 000001E2 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
  1509 000001E4 7404                    	je	short inuse		;  no, check the next one
  1510                                  
  1511                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
  1512 000001E6 26884600                	mov	[es:bp],al
  1513                                  inuse:
  1514 000001EA 2E3B2E[0C00]            	cmp	bp,[cs:FirstEntry]
  1515 000001EF 7406                    	je	short fatal
  1516 000001F1 83ED08                  	sub	bp,EntrySize
  1517 000001F4 EBDB                    	jmp	short lploopp
  1518                                  found:
  1519 000001F6 C3                      	retn
  1520                                  fatal:
  1521                                  	; 27/05/2019
  1522                                  	;push	ds
  1523 000001F7 B800F0                  	mov	ax,0F000h		;look at the model byte
  1524 000001FA 8ED8                    	mov	ds,ax
  1525 000001FC 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
  1526                                  	;pop	ds
  1527 00000201 7504                    	jne	short skip_nmis
  1528                                  
  1529 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
  1530 00000205 E672                    	out	72h,al
  1531                                  
  1532                                  skip_nmis:
  1533 00000207 FA                      	cli				; disable and mask
  1534 00000208 B0FF                    	mov	al,0FFh			;   all other ints
  1535 0000020A E621                    	out	021h,al
  1536 0000020C E6A1                    	out	0A1h,al
  1537                                  	
  1538                                  	; 29/06/2019 - Retro DOS v3.1
  1539 0000020E 8CCE                    	mov	si,cs
  1540 00000210 8EDE                    	mov	ds,si
  1541                                  	
  1542 00000212 BE[2402]                	mov	si,fatal_msg
  1543                                  fatal_loop:
  1544 00000215 AC                      	lodsb
  1545 00000216 3C24                    	cmp	al,'$'
  1546 00000218 7408                    	je	short fatal_done
  1547                                  
  1548 0000021A B307                    	mov	bl,7
  1549 0000021C B40E                    	mov	ah,14
  1550 0000021E CD10                    	int	10h			; whoops, this enables ints
  1551 00000220 EBF3                    	jmp	short fatal_loop
  1552                                  
  1553                                  fatal_done:
  1554 00000222 EBFE                    	jmp	short fatal_done
  1555                                  
  1556                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
  1557                                  ; ----------------------------------------------------------------------
  1558                                  ;	include msbio.cl5		; fatal stack error message
  1559                                  
  1560                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
  1561                                  
  1562                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
  1563                                  ; ----------------------------------------------------------------------
  1564                                  ; 04/06/2018 - Retro DOS v3.0
  1565                                  
  1566                                  fatal_msg:
  1567 00000224 0D0A                    	db	0Dh,0Ah
  1568 00000226 070D0A                  	db	7,0Dh,0Ah
  1569 00000229 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
  1569 00000232 737461636B206F7665-
  1569 0000023B 72666C6F770D0A     
  1570 00000242 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
  1570 0000024B 6C7465640D0A24     
  1571                                  
  1572                                  ;align 16
  1573                                  
  1574                                  	;times	07F0h-252h db 0 ; 29/06/2019
  1575                                  
  1576                                  endstackcode:
  1577                                  
  1578                                  	;db	0 ; 29/06/2019 - Retro DOS v3.1
  1579                                  
  1580 00000252 90<rep Eh>              align 16
  1581                                  
  1582                                  ; ----------------------------------------------------------------------
  1583                                  ; SYINIT1.ASM (MSDOS 3.3) - SYSINIT.ASM (MSDOS 2.0)
  1584                                  ; ----------------------------------------------------------------------
  1585                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
  1586                                  
  1587                                  SYSINIT:
  1588 00000260 E90501                          JMP	GOINIT
  1589                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
  1590                                  ;align 4
  1591 00000263 90                      align 2  ; 04/07/2019
  1592                                  DOSINFO: 
  1593 00000264 0000                    	dw	0
  1594                                  CURRENT_DOS_LOCATION: 
  1595 00000266 0000                    	dw	0
  1596                                  MSDOS:	
  1597                                  ENTRY_POINT:
  1598 00000268 0000                    	dw	0
  1599                                  FINAL_DOS_LOCATION:
  1600 0000026A 0000                    	dw	0
  1601                                  DEVICE_LIST:
  1602 0000026C 00000000                	dd	0
  1603                                  DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
  1604 00000270 0000                    	dw	0   ; 'MSDOS.BIN' kernel size in words
  1605                                  
  1606                                  ; 04/06/2018 - Retro DOS v3.0
  1607                                  ; 28/03/2018
  1608                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
  1609                                  ;
  1610                                  SYSI_Country:	
  1611 00000272 0000                    	dw	0 ; 5/29/86 Pointer to
  1612 00000274 0000                    	dw	0 ; country table in DOS
  1613                                  
  1614                                  ;; STACKSW   EQU   TRUE ;Include Switchable Hardware Stacks
  1615                                  ;; (SYSCONF.ASM, 1987)
  1616                                  ;; Internal Stack Parameters
  1617                                  ;EntrySize	equ	8
  1618                                  ;MinCount	equ	8
  1619                                  ;DefaultCount	equ	9
  1620                                  ;MaxCount	equ	64
  1621                                  ;MinSize 	equ	32
  1622                                  ;DefaultSize	equ	128
  1623                                  ;MaxSize 	equ	512
  1624                                  
  1625                                  	;IF	STACKSW    ; STACKSW TRUE
  1626                                  ;
  1627                                  ; Internal Stack Parameters
  1628                                  
  1629 00000276 0900                    STACK_COUNT:	DW	DefaultCount
  1630 00000278 8000                    STACK_SIZE:	DW	DefaultSize
  1631 0000027A 00000000                STACK_ADDR:	DD	0
  1632                                  	;ENDIF
  1633                                  
  1634                                  ; 05/06/2018 - Retro DOS v3.0
  1635                                  
  1636                                  ; various default values
  1637                                  
  1638                                  MEMORY_SIZE:
  1639 0000027E 0100                    	dw	1
  1640                                  DEFAULT_DRIVE:
  1641 00000280 00                      	db	0
  1642                                  BUFFERS:
  1643 00000281 FFFF                    	DW	-1	; initialized during buffer allocation
  1644                                  ;BUFFERS: 
  1645                                  ;	DW	2	; two buffers
  1646                                  FILES:
  1647 00000283 08                      	db	8	; enough files for pipe
  1648                                  FCBS:
  1649 00000284 04                      	db	4	; performance for recycling
  1650                                  KEEP:
  1651 00000285 00                      	db	0	; keep original set
  1652                                  NUM_CDS:
  1653 00000286 05                      	db	5	; 5 net drives
  1654                                  CONFBOT:
  1655 00000287 0000                    	dw	0
  1656                                  ALLOCLIM:
  1657 00000289 0000                    	dw	0
  1658                                  FOOSTRNG:
  1659 0000028B 413A5C00                	db	"A:\",0
  1660                                  COMMAND_LINE:
  1661 0000028F 020050                  	db	2,0,"P" ; Default Command.com Args
  1662                                          
  1663 00000292 00<rep 1Dh>             	times	29 db 0
  1664                                  ZERO:
  1665 000002AF 00                      	db	0
  1666                                  SEPCHR:
  1667 000002B0 00                      	db	0
  1668                                  
  1669                                  ; 10/06/2018
  1670                                  Sys_Model_Byte:
  1671 000002B1 FF                      	db	0FFh	;model byte used in SYSINIT
  1672                                  Sys_Scnd_Model_Byte:
  1673 000002B2 00                      	db	0	;secondary model byte used in SYSINIT
  1674                                  
  1675                                          ;IF      NOT NOEXEC
  1676                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
  1677                                          ;ENDIF
  1678                                  
  1679                                  ; 01/05/2018
  1680                                  COMEXE:
  1681 000002B3 0000                    EXEC0.ENVIRON:	DW	0	; seg addr of environment
  1682 000002B5 [8F02]                  EXEC0.COM_LINE:	DW	COMMAND_LINE ; pointer to asciz command line
  1683 000002B7 0000                    		DW	0
  1684 000002B9 [8002]                  EXEC0.5C_FCB:	DW	DEFAULT_DRIVE ; default fcb at 5C
  1685 000002BB 0000                    		DW	0
  1686 000002BD [AF02]                  EXEC0.6C_FCB:	DW	ZERO	; default fcb at 6C
  1687 000002BF 0000                    		DW	0
  1688                                  
  1689                                  COUNT:
  1690 000002C1 0000                    	dw	0
  1691                                  CHRPTR:
  1692 000002C3 0000                    	dw	0
  1693                                  
  1694                                  ; 04/06/2018
  1695                                  CntryFileHandle:
  1696 000002C5 0000                    	DW 	0 
  1697                                  
  1698                                  ;align 4
  1699 000002C7 90                      align 2 ; 04/07/2019 
  1700                                  
  1701                                  BUFPTR:
  1702                                  	; LEAVE THIS STUFF IN ORDER!
  1703                                  MEMLO:
  1704 000002C8 0000                    	dw	0
  1705                                  PRMBLK:
  1706                                  MEMHI:
  1707 000002CA 0000                    	dw	0
  1708                                  LDOFF:
  1709 000002CC 0000                    	dw	0
  1710                                  AREA:
  1711 000002CE 0000                    	dw	0
  1712                                  
  1713                                  PACKET:
  1714 000002D0 16                      	db	22
  1715 000002D1 00                      	db	0
  1716 000002D2 00                      	db	0	; INITIALIZE CODE
  1717 000002D3 0000                    	dw	0
  1718 000002D5 00<rep 8h>              	times	8 db 0
  1719                                  UNITCOUNT:
  1720 000002DD 00                      	db	0
  1721                                  BREAK_ADDR:
  1722 000002DE 00000000                	dd	0
  1723                                  BPB_ADDR:
  1724 000002E2 00000000                	dd	0
  1725                                  DriveNumber:
  1726 000002E6 00                      	db	0
  1727                                  
  1728                                  ; 17/07/2019 - Retro DOS v3.2
  1729                                  toomanydrivesflag:
  1730 000002E7 00                      	db	0  ; >24 fixed disk partitions flag 
  1731                                  
  1732                                  align 2
  1733                                  
  1734                                  ; 06/07/2019 - Retro DOS v3.1
  1735                                  TempStack:
  1736 000002E8 00<rep 80h>             	times	128 db 0
  1737                                  
  1738                                  GOINIT:
  1739                                  	; 06/07/2018
  1740                                  	; 04/06/2018 - Retro DOS v3.0
  1741                                  ; before doing anything else, let's set the model byte
  1742 00000368 B4C0                    	mov	ah,0C0h 		;get system configuration
  1743 0000036A CD15                    	int	15h			; *
  1744 0000036C 7217                    	jc	short No_ROM_Config
  1745 0000036E 80FC00                  	cmp	ah,0			; double check
  1746 00000371 7512                    	jne	short No_ROM_Config
  1747 00000373 268A4702                	mov	al,[ES:BX+ROMBIOS_DESC.bios_SD_modelbyte]
  1748 00000377 2EA2[B102]              	mov	[cs:Sys_Model_Byte],al 
  1749 0000037B 268A4703                	mov	al,[ES:BX+ROMBIOS_DESC.bios_SD_scnd_modelbyte]
  1750 0000037F 2EA2[B202]              	mov	[cs:Sys_Scnd_Model_Byte],al
  1751                                  	;jmp	short Move_Myself
  1752 00000383 EB0C                    	jmp	short SYSIN
  1753                                  No_ROM_Config:				; Old ROM
  1754 00000385 B800F0                  	mov	ax,0F000h
  1755 00000388 8ED8                    	mov	ds,ax
  1756 0000038A A0FEFF                  	mov	al,[0FFFEh]
  1757 0000038D 2EA2[B102]              	mov	[cs:Sys_Model_Byte],al	;set the model byte.
  1758                                  
  1759                                  ;Move_Myself:
  1760                                  ;	; 25/02/2018 - Retro DOS 2.0 - MSDOS 2.0 "SYSINIT.ASM"
  1761                                  ;	; (Modified for Retro DOS 2.0, for NASM 'incbin' method)
  1762                                  ;
  1763                                  ;	SYSINITSIZE	EQU  sysinit_code_end - sysinit_code_start
  1764                                  ;
  1765                                  ;      	;CLD
  1766                                  ;      	XOR     SI,SI
  1767                                  ;      	MOV     DI,SI
  1768                                  ;	; 19/03/2018
  1769                                  ;      	mov	CX,[SYSINIT_START+MEMORY_SIZE]
  1770                                  ;;	CMP     CX,1
  1771                                  ;;      JNZ     short NOSCAN
  1772                                  ;;	MOV     CX,2048		; START SCANNING AT 32K BOUNDARY
  1773                                  ;;	XOR     BX,BX
  1774                                  ;;MEMSCAN:
  1775                                  ;;	INC     CX
  1776                                  ;;    	JZ	short SETEND
  1777                                  ;;     	MOV     DS,CX
  1778                                  ;;     	MOV     AL,[BX]
  1779                                  ;;     	NOT     AL
  1780                                  ;;     	MOV     [BX],AL
  1781                                  ;;     	CMP     AL,[BX]
  1782                                  ;;     	NOT     AL
  1783                                  ;;     	MOV     [BX],AL
  1784                                  ;;     	JZ      short MEMSCAN
  1785                                  ;;SETEND:
  1786                                  ;;	MOV     AX,CS
  1787                                  ;;      MOV     DS,AX   
  1788                                  ;;	MOV	[SYSINIT_START+MEMORY_SIZE],CX 
  1789                                  ;;NOSCAN:
  1790                                  ;	MOV     AX,SYSINITSIZE + 15
  1791                                  ;	SHR     AX,1                    ; Divide by 16 for paras
  1792                                  ;	SHR     AX,1
  1793                                  ;	SHR     AX,1
  1794                                  ;	SHR     AX,1
  1795                                  ;
  1796                                  ;	SUB     CX,AX
  1797                                  ;	MOV     ES,CX ; SYSINITSEG = [MEMORY_SIZE] - (SYSIZE+15)/16
  1798                                  ;	MOV     CX,SYSINITSIZE + 1
  1799                                  ;	SHR     CX,1                    ; Divide by 2 to get words
  1800                                  ;	REP     MOVSW                   ; RELOCATE SYSINIT
  1801                                  ;
  1802                                  ;	PUSH    ES
  1803                                  ;	MOV	AX,SYSIN  ; 05/06/2018 (MSDOS 3.3, SYSINIT1.ASM)
  1804                                  ;	PUSH    AX
  1805                                  ;	
  1806                                  ;	RETF	; far jump to final location of SYSINIT code
  1807                                  ;
  1808                                  
  1809                                  ;
  1810                                  ;       MOVE THE DOS TO ITS PROPER LOCATION
  1811                                  ;
  1812                                  
  1813                                  	;nop	; 30/03/2018
  1814                                  SYSIN:
  1815                                  	; Retro DOS 2.0 - 25/02/2018 
  1816                                  
  1817 00000391 0E                      	PUSH	CS
  1818 00000392 1F                      	POP	DS
  1819                                  
  1820 00000393 8B0E[7002]                      MOV     CX,[DOSSIZE] ; words (not bytes!)
  1821                                  	        
  1822 00000397 A1[6A02]                	MOV	AX,[FINAL_DOS_LOCATION]
  1823 0000039A 8EC0                    	MOV     ES,AX
  1824 0000039C A1[6602]                        MOV     AX,[CURRENT_DOS_LOCATION]
  1825 0000039F 8ED8                            MOV     DS,AX
  1826                                  
  1827 000003A1 31F6                            XOR     SI,SI
  1828 000003A3 89F7                            MOV     DI,SI
  1829                                  	;INC	CX
  1830                                  	;SHR	CX,1
  1831 000003A5 F3A5                            REP     MOVSW
  1832                                  
  1833 000003A7 8CC8                    	MOV	AX,CS
  1834 000003A9 8ED8                    	MOV	DS,AX
  1835 000003AB 8B16[7E02]                      MOV	DX,[MEMORY_SIZE]
  1836 000003AF C536[6C02]              	LDS     SI,[DEVICE_LIST]
  1837                                  
  1838 000003B3 FA                              CLI
  1839 000003B4 8ED0                            MOV     SS,AX
  1840 000003B6 BC[BA03]                        MOV     SP,LOCSTACK	
  1841 000003B9 FB                      	STI
  1842                                  align 2
  1843                                  	; 30/03/2018
  1844                                  LOCSTACK:
  1845 000003BA 2EFF1E[6802]                    CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
  1846                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
  1847                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
  1848                                  
  1849                                  	; DS = PSP address for default process
  1850                                  	; ES:DI = Address of SYSINITVAR (MSDOS 2.0/2.11, Retro DOS 2.0)
  1851                                  
  1852                                  	;MOV     [CS:DOSINFO+2],ES ; SAVE POINTER TO DOS INFO
  1853                                  	;MOV     [CS:DOSINFO],DI
  1854                                  
  1855                                  	; 17/06/2018
  1856 000003BF 1E                      	PUSH	DS			; Save as input to RE_INIT
  1857                                  	
  1858 000003C0 0E                      	PUSH	CS
  1859 000003C1 1F                      	POP	DS
  1860                                  
  1861                                  	; 05/06/2018 - Retro DOS v3.0
  1862                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
  1863                                  
  1864                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
  1865 000003C2 268B05                  	mov	ax,[es:di] ; 05/07/2019 
  1866                                  	;mov	[CS:DOSINFO],ax
  1867 000003C5 A3[6402]                	mov	[DOSINFO],ax
  1868 000003C8 268B4502                	mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
  1869                                  	;mov	[CS:DOSINFO+2],ax
  1870 000003CC A3[6602]                	mov	[DOSINFO+2],ax ;set the sysvar pointer
  1871                                  
  1872 000003CF 268B4504                	mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
  1873                                  	;mov	[CS:SYSI_Country],ax
  1874 000003D3 A3[7202]                	mov	[SYSI_Country],ax
  1875 000003D6 268B4506                	mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
  1876                                  	;mov	[CS:SYSI_Country+2],ax
  1877 000003DA A3[7402]                	mov	[SYSI_Country+2],ax	;set the SYSI_Country pointer
  1878                                  
  1879 000003DD C43E[6402]              	les	di,[DOSINFO]	;es:di -> dosinfo
  1880                                  
  1881                                  	; 09/06/2018
  1882                                  	; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
  1883                                  	;SYSI_NUMIO equ	32
  1884                                   	
  1885                                  	; 25/03/2018 - Retro DOS v2.0 (MSDOS 2.0 <-> 3.3)
  1886                                  	;SYSI_NUMIO equ	16 ; SYSINITVAR NUMIO offset for MSDOS 2.0
  1887                                  
  1888                                  	; MSDOS 3.3 - SYSINIT1.ASM
  1889 000003E1 268A4520                	MOV	AL,[ES:DI+SYSI_NUMIO] ; SYSINITVAR.NUMIO
  1890 000003E5 A2[E602]                	MOV	[DriveNumber],AL ; Save start of installable block drvs
  1891                                  
  1892 000003E8 8CC8                    	MOV	AX,CS
  1893 000003EA 83E811                  	SUB	AX,11H			; room for header we will copy shortly
  1894                                  
  1895 000003ED A3[8702]                	MOV	[CONFBOT],AX		; Temp "unsafe" location
  1896                                  
  1897                                  	; 08/06/2018
  1898                                  	;PUSH	DS			; Save as input to RE_INIT
  1899                                  	;PUSH	CS
  1900                                  	;POP	DS
  1901 000003F0 E87D01                  	CALL	TEMPCDS 		; Set up CDSs so RE_INIT and SYSINIT
  1902                                  					;   can make DISK system calls
  1903                                  
  1904 000003F3 1F                      	POP	DS			; Recover DS input to RE_INIT
  1905                                  
  1906                                  	; 06/07/2019
  1907                                  
  1908                                          ;IF	NOT IBMJAPVER
  1909                                  	
  1910 000003F4 9A6B1A7000              	CALL	KERNEL_SEGMENT:RE_INIT	; Re-call the BIOS
  1911                                          
  1912                                  	;ENDIF
  1913                                  
  1914 000003F9 FB                              STI
  1915 000003FA FC                              CLD
  1916                                  
  1917                                  ; DOSINIT has set up a default "process" (PHP) at DS:0. We will move it out
  1918                                  ; of the way by putting it just below SYSINIT at end of memory.
  1919                                  
  1920 000003FB 8CCB                            MOV     BX,CS
  1921 000003FD 83EB10                          SUB     BX,10H
  1922 00000400 8EC3                            MOV     ES,BX
  1923 00000402 31F6                            XOR     SI,SI
  1924 00000404 89F7                            MOV     DI,SI
  1925 00000406 B98000                          MOV     CX,80H
  1926 00000409 F3A5                            REP     MOVSW
  1927                                  
  1928 0000040B 268C063600              	MOV	[ES:PDB.JFN_POINTER+2],ES ; Relocate
  1929                                  
  1930                                   	; Set Process Data Block - Program Segment Prefix address
  1931                                  	; BX = PDB/PSP segment
  1932 00000410 B450                            MOV     AH,SET_CURRENT_PDB
  1933 00000412 CD21                            INT     21H			; Tell DOS we moved it
  1934                                  
  1935                                  	;PUSH	DS ; 17/07/2019
  1936                                  
  1937 00000414 0E                              PUSH    CS
  1938 00000415 1F                              POP     DS
  1939                                  
  1940 00000416 BA[C614]                        MOV     DX,INT24	; SET UP INT 24 HANDLER
  1941 00000419 B82425                          MOV     AX,(SET_INTERRUPT_VECTOR*256)+24H
  1942 0000041C CD21                            INT     21H
  1943                                  
  1944                                  	; 25/03/2018 - MSDOS 3.3 - SYSINIT1.ASM
  1945 0000041E BBFFFF                  	MOV	BX,0FFFFH
  1946 00000421 B448                    	MOV	AH,ALLOC
  1947 00000423 CD21                    	INT	21H			;FIRST TIME FAILS
  1948                                  
  1949                                  ; 09/07/2019 - Retro DOS v3.1 test
  1950                                  ; X = BX = 9623h
  1951                                  
  1952 00000425 B448                    	MOV	AH,ALLOC
  1953 00000427 CD21                    	INT	21H			;SECOND TIME GETS IT
  1954 00000429 A3[CE02]                	MOV	[AREA],AX
  1955 0000042C A3[CA02]                	MOV	[MEMHI],AX		; MEMHI:MEMLO now points to
  1956                                  					; start of free memory
  1957                                  ; 09/07/2019 - Retro DOS v3.1 test
  1958                                  ; M = [MEMHI] = 099Dh
  1959                                  
  1960                                  ; 07/07/2019 (Test by using Bochs emulator)
  1961                                  ; [MEMHI] = [AREA] = 099Dh (for two harddisks)
  1962                                  ;		   = 0996h (for single harddisk)
  1963                                  ;		   = 098Fh (for floppy disks, without harddisk)
  1964                                  
  1965                                  	; 17/07/2019 - Retro DOS v3.2 
  1966                                  	; (MSDOS 6.0 SYSINIT feature, Retro DOS v4.0)
  1967 0000042F 803E[E702]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
  1968 00000434 7405                            je      short no_err		   ;  N: continue            M029
  1969 00000436 BA[F117]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
  1970                                          ;call	print 			   ;		             M029
  1971 00000439 EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
  1972                                  
  1973                                  no_err:
  1974                                  	;;IF	ALTVECT
  1975                                  	;; 27/06/2018
  1976                                  	;MOV	DX,BOOTMES
  1977                                          ;CALL	PRINT		; Print message DOSINIT couldn't
  1978                                          ;;ENDIF
  1979                                  
  1980                                  	; 12/05/2019
  1981                                  	;----------------------------------------------
  1982                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
  1983 0000043B BA[D914]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
  1984                                  p_dosinit_msg:
  1985 0000043E E85B10                  	call	PRINT			; Print message
  1986                                  	;----------------------------------------------
  1987                                  
  1988                                  	;POP	DS ; 17/07/2019
  1989                                  
  1990                                  	; ds = cs
  1991                                  
  1992                                  	; 17/06/2018
  1993                                          ;MOV     DL,[CS:DEFAULT_DRIVE]
  1994                                  
  1995 00000441 8A16[8002]              	mov	dl,[DEFAULT_DRIVE] ; 17/07/2019
  1996                                  
  1997 00000445 08D2                    	OR      DL,DL
  1998 00000447 7406                            JZ      SHORT NODRVSET
  1999                                          
  2000 00000449 FECA                    	DEC     DL                      ; A = 0
  2001 0000044B B40E                            MOV     AH,SET_DEFAULT_DRIVE
  2002 0000044D CD21                            INT     21H                     ; SELECT THE DISK
  2003                                  
  2004                                  NODRVSET:
  2005 0000044F E80806                  	CALL	DOCONF                  ; DO THE CONFIG STUFF
  2006                                  
  2007 00000452 E89301                  	CALL	ENDFILE	; 25/03/2018 - MSDOS 3.3 - SYSINIT1.ASM
  2008                                  
  2009                                  	; 01/05/2018 (NOEXEC = FALSE)
  2010                                  	;IF	NOEXEC
  2011                                  
  2012                                  	;MOV	BP,DS                   ; SAVE COMMAND.COM SEGMENT
  2013                                  
  2014                                  	;;PUSH	DS
  2015                                  	;;POP	ES
  2016                                  
  2017                                  	;; 13/04/2018
  2018                                  	;MOV	ES,BP	
  2019                                  
  2020                                          ;MOV	BX,CS
  2021                                          ;SUB	BX,10H
  2022                                          ;MOV	DS,BX
  2023                                          ;XOR	SI,SI
  2024                                          ;MOV	DI,SI
  2025                                          ;MOV	CX,80H
  2026                                          ;REP	MOVSW
  2027                                  	;MOV	[ES:PDB.JFN_POINTER+2],ES ; Relocate ; 25/03/2018
  2028                                          ;MOV	BX,ES
  2029                                  
  2030                                          ;MOV	AH,SET_CURRENT_PDB
  2031                                          ;INT	21H
  2032                                  
  2033                                          ;MOV	[ES:PDB.PARENT_PID],ES  ; WE ARE THE ROOT
  2034                                          ;ENDIF
  2035                                  
  2036                                  ; We must now close all handles and reopen STDIN,STDOUT,STDERR in order
  2037                                  ; to get a possibly NEW device driver for CON. STDAUX and STDPRN must
  2038                                  ; also be openned.
  2039                                  
  2040 00000455 0E                              PUSH    CS
  2041 00000456 1F                              POP     DS
  2042                                  
  2043 00000457 A0[8302]                        MOV     AL,[FILES]
  2044                                  	;CBW
  2045 0000045A 30E4                    	XOR	AH,AH			; DO NOT USE CBW INSTRUCTION!!!!!
  2046                                  					;  IT DOES SIGN EXTEND.
  2047 0000045C 89C1                            MOV     CX,AX
  2048 0000045E 31DB                            XOR     BX,BX                   ; Close standard input
  2049 00000460 B43E                            MOV     AH,CLOSE
  2050 00000462 CD21                            INT     21H
  2051                                  
  2052 00000464 BB0200                          MOV     BX,2
  2053                                  RCCLLOOP: 				; Close everybody but standard output
  2054 00000467 B43E                            MOV     AH,CLOSE
  2055 00000469 CD21                            INT     21H
  2056 0000046B 43                              INC     BX
  2057 0000046C E2F9                            LOOP    RCCLLOOP
  2058                                  
  2059 0000046E BA[1015]                        MOV     DX,CONDEV
  2060 00000471 B002                            MOV     AL,2
  2061 00000473 B43D                            MOV     AH,OPEN                 ; OPEN CON FOR READ/WRITE
  2062 00000475 F9                              STC
  2063 00000476 CD21                            INT     21H
  2064 00000478 7305                            JNC     SHORT GOAUX
  2065 0000047A E80110                          CALL    BADFIL
  2066 0000047D EB13                            JMP     SHORT GOAUX2
  2067                                  
  2068 0000047F 50                      GOAUX:  PUSH    AX
  2069 00000480 BB0100                          MOV     BX,1                    ; close standard output
  2070 00000483 B43E                            MOV     AH,CLOSE
  2071 00000485 CD21                            INT     21H
  2072 00000487 58                              POP     AX
  2073                                  
  2074 00000488 89C3                            MOV     BX,AX                   ; New device handle
  2075 0000048A B445                            MOV     AH,XDUP
  2076 0000048C CD21                            INT     21H                     ; Dup to 1, STDOUT
  2077 0000048E B445                            MOV     AH,XDUP
  2078 00000490 CD21                            INT     21H                     ; Dup to 2, STDERR
  2079                                  
  2080 00000492 BA[1415]                GOAUX2: MOV     DX,AUXDEV
  2081 00000495 B002                            MOV     AL,2                    ; READ/WRITE ACCESS
  2082 00000497 E80710                          CALL    OPEN_DEV
  2083                                  
  2084 0000049A BA[1815]                        MOV     DX,PRNDEV
  2085 0000049D B001                            MOV     AL,1                    ; WRITE ONLY
  2086 0000049F E8FF0F                          CALL    OPEN_DEV
  2087                                  
  2088                                  	; 08/06/2018 - Retro DOS v3.0
  2089                                  
  2090                                  ;Global Rearm command for Shared Interrupt devices attached in the system;
  2091                                  ;Shared interrupt attachment has some problem when it issues interrupt
  2092                                  ;during a warm reboot.	Once the interrupt is presented by the attachment,
  2093                                  ;no further interrupts on that level will be presented until a global rearm
  2094                                  ;is issued. BIOS will issue a global rearm after each device driver is loaded.
  2095                                  ;To issue a global rearm:	;For PC1, XT, Palace
  2096                                  ;			  OUT 02F2h, XX  ; Interrupt level 2
  2097                                  ;			  OUT 02F3h, XX  ; Interrupt level 3
  2098                                  ;			  OUT 02F4h, XX  ; Interrupt level 4
  2099                                  ;			  OUT 02F5h, XX  ; Interrupt level 5
  2100                                  ;			  OUT 02F6h, XX  ; Interrupt level 6
  2101                                  ;			  OUT 02F7h, XX  ; Interrupt level 7
  2102                                  ;
  2103                                  ;				;For PC AT, in addition to the above commands,
  2104                                  ;				;need to handle the secondary interrupt handler
  2105                                  ;			  OUT 06F2h, XX  ; Interrupt level 10
  2106                                  ;			  OUT 06F3h, XX  ; Interrupt level 11
  2107                                  ;			  OUT 06F4h, XX  ; Interrupt level 12
  2108                                  ;			  OUT 06F6h, XX  ; Interrupt level 14
  2109                                  ;			  OUT 06F7h, XX  ; Interrupt level 15
  2110                                  ;
  2111                                  ;				;For All others machine
  2112                                  ;			  None.
  2113                                  ; where XX stands for any value.
  2114                                  
  2115                                  	;PUSH	AX			;Save register
  2116                                  	;PUSH	BX			;Save register
  2117                                  	;PUSH	DX			;Save register
  2118                                  	;PUSH	ES			;Save register
  2119                                  
  2120 000004A2 B0FF                    	MOV	AL,0FFH 		;Set up registers for global rearm
  2121 000004A4 BAF202                  	MOV	DX,02F2H		;
  2122 000004A7 EE                      	OUT	DX,AL			;OUT 02F2H,0FFH
  2123 000004A8 42                      	INC	DX			;
  2124 000004A9 EE                      	OUT	DX,AL			;OUT 02F3H,0FFH
  2125 000004AA 42                      	INC	DX			;
  2126 000004AB EE                      	OUT	DX,AL			;OUT 02F4H,0FFH
  2127 000004AC 42                      	INC	DX			;
  2128 000004AD EE                      	OUT	DX,AL			;OUT 02F5H,0FFH
  2129 000004AE 42                      	INC	DX			;
  2130 000004AF EE                      	OUT	DX,AL			;OUT 02F6H,0FFH
  2131 000004B0 42                      	INC	DX			;
  2132 000004B1 EE                      	OUT	DX,AL			;OUT 02F7H,0FFH
  2133                                  
  2134 000004B2 B800F0                  	MOV	AX,0F000H		;Get machine type
  2135 000004B5 8EC0                    	MOV	ES,AX			;
  2136 000004B7 26803EFEFFFC            	CMP	BYTE [ES:0FFFEH],0FCH	;Q: Is it an AT type machine?
  2137 000004BD 751C                    	JNE	short REARMDONE		;  N: Skip next rearm
  2138 000004BF B4C0                    	MOV	AH,0C0H 		;Get system configuration
  2139 000004C1 CD15                    	INT	15H			;Q: Is it an old ROM?
  2140 000004C3 7216                    	JC	short REARMDONE		;  Y: Skip next rearm
  2141 000004C5 26F6470540              	TEST	byte [ES:BX+ROMBIOS_DESC.bios_SD_featurebyte1],ScndIntController
  2142                                  					; Q: Present?
  2143 000004CA 740F                    	JE	short REARMDONE		;  N: Skip next rearm
  2144                                  
  2145 000004CC B0FF                    	MOV	AL,0FFH 		;Set up registers for global rearm
  2146 000004CE BAF206                  	MOV	DX,06F2H		;
  2147 000004D1 EE                      	OUT	DX,AL			;OUT 06F2H,0FFH
  2148 000004D2 42                      	INC	DX			;
  2149 000004D3 EE                      	OUT	DX,AL			;OUT 06F3H,0FFH
  2150 000004D4 42                      	INC	DX			;
  2151 000004D5 EE                      	OUT	DX,AL			;OUT 06F4H,0FFH
  2152 000004D6 42                      	INC	DX			;
  2153 000004D7 42                      	INC	DX			;
  2154 000004D8 EE                      	OUT	DX,AL			;OUT 02F6H,0FFH
  2155 000004D9 42                      	INC	DX			;
  2156 000004DA EE                      	OUT	DX,AL			;OUT 02F7H,0FFH
  2157                                  
  2158                                  REARMDONE:
  2159                                  	;POP	ES			;Restore register
  2160                                  	;POP	DX			;Restore register
  2161                                  	;POP	BX			;Restore register
  2162                                  	;POP	AX			;Restore register
  2163                                  
  2164                                  ;Global Rearm end *******************
  2165                                  
  2166                                  ;
  2167                                  ; SET UP THE PARAMETERS FOR COMMAND
  2168                                  ;
  2169                                  GOSET:
  2170 000004DB BE[9002]                        MOV     SI,COMMAND_LINE+1
  2171                                  
  2172                                  	; 01/05/2018 (NOEXEC = FALSE)
  2173                                          ;IF	NOEXEC
  2174                                          ;MOV	DI,81H
  2175                                          ;ELSE
  2176 000004DE 1E                              PUSH	DS
  2177 000004DF 07                              POP	ES
  2178 000004E0 89F7                            MOV	DI,SI
  2179                                          ;ENDIF
  2180                                  
  2181 000004E2 B1FF                            MOV     CL,-1
  2182                                  COMTRANLP:                              ; FIND LENGTH OF COMMAND LINE
  2183 000004E4 FEC1                            INC     CL
  2184 000004E6 AC                              LODSB
  2185 000004E7 AA                              STOSB                           ; COPY COMMAND LINE IN
  2186 000004E8 08C0                            OR      AL,AL
  2187 000004EA 75F8                            JNZ     SHORT COMTRANLP
  2188 000004EC 4F                              DEC     DI
  2189 000004ED B00D                            MOV     AL,0DH
  2190 000004EF AA                              STOSB
  2191                                  
  2192                                  	; 01/05/2018 (NOEXEC = FALSE)
  2193                                          ;IF	NOEXEC
  2194                                          ;MOV	[ES:80H],CL
  2195                                          ;MOV	AL,[DEFAULT_DRIVE]
  2196                                          ;MOV	[ES:5CH],AL
  2197                                          ;ELSE
  2198 000004F0 880E[8F02]                      MOV	[COMMAND_LINE],CL       ; Count
  2199                                          ;ENDIF
  2200                                  
  2201                                          ;PUSH    CS
  2202                                          ;POP     ES
  2203                                  
  2204 000004F4 BA[7515]                        MOV     DX,COMMND		; NOW POINTING TO FILE DESCRIPTION
  2205                                  
  2206                                  	; 01/05/2018 (NOEXEC = FALSE)
  2207                                          ;IF	NOEXEC
  2208                                          ;MOV     ES,BP			; SET LOAD ADDRESS
  2209                                          ;MOV     BX,100H
  2210                                          ;CALL    LDFIL			; READ IN COMMAND
  2211                                          ;JC      SHORT COMERR
  2212                                          ;MOV     DS,BP
  2213                                          ;MOV     DX,80H
  2214                                          ;MOV     AH,SET_DMA		; SET DISK TRANSFER ADDRESS
  2215                                          ;INT     21H
  2216                                          ;CLI
  2217                                          ;MOV     SS,BP
  2218                                          ;MOV     SP,DX
  2219                                          ;STI
  2220                                          ;XOR     AX,AX			; PUSH A WORD OF ZEROS
  2221                                          ;PUSH    AX
  2222                                          ;PUSH    BP			; SET HIGH PART OF JUMP ADDRESS
  2223                                          ;MOV     AX,100H
  2224                                          ;PUSH    AX			; SET LOW PART OF JUMP ADDRESS
  2225                                          ;RETF				; CRANK UP COMMAND!
  2226                                  
  2227                                          ;ELSE
  2228                                  
  2229                                  	; 08/06/2018 - Retro DOS v3.0  (MSDOS 3.3, SYSINIT1.ASM, 1987)
  2230                                  
  2231                                  ; We are going to open the command interpreter and size it as is done in
  2232                                  ; LDFIL. The reason we must do this is that SYSINIT is in free memory. If
  2233                                  ; there is not enough room for the command interpreter, EXEC will probably
  2234                                  ; overlay our stack and code so when it returns with an error SYSINIT won't be
  2235                                  ; here to catch it. This code is not perfect (for instance .EXE command
  2236                                  ; interpreters are possible) because it does its sizing based on the
  2237                                  ; assumption that the file being loaded is a .COM file. It is close enough to
  2238                                  ; correctness to be usable.
  2239                                  
  2240 000004F7 52                      	PUSH	DX			; Save pointer to name
  2241                                  
  2242                                  ; First, find out where the command interpreter is going to go.
  2243 000004F8 BBFFFF                  	MOV	BX,0FFFFH
  2244 000004FB B448                    	MOV	AH,ALLOC
  2245 000004FD CD21                    	INT	21H			;Get biggest piece
  2246 000004FF B448                    	MOV	AH,ALLOC
  2247 00000501 CD21                    	INT	21H			;SECOND TIME GETS IT
  2248 00000503 7244                    	JC	short MEMERRJX		; Oooops
  2249 00000505 8EC0                    	MOV	ES,AX
  2250                                  
  2251                                  ; 09/07/2019 - Retro DOS v3.1 test
  2252                                  ; A = ES = 0C60h
  2253                                  
  2254 00000507 B449                    	MOV	AH,DEALLOC
  2255 00000509 CD21                    	INT	21H			; Give it right back
  2256 0000050B 89DD                    	MOV	BP,BX
  2257                                  ; ES:0 points to Block, and BP is the size of the block
  2258                                  ;   in para.
  2259                                  
  2260                                  ; 09/07/2019 - Retro DOS v3.1 test
  2261                                  ; B = BP = 9360h
  2262                                  
  2263                                  ; We will now adjust the size in BP DOWN by the size of SYSINIT. We
  2264                                  ;   need to do this because EXEC might get upset if some of the EXEC
  2265                                  ;   data in SYSINIT is overlayed during the EXEC.
  2266 0000050D 8B1E[7E02]              	MOV	BX,[MEMORY_SIZE]
  2267 00000511 8CC8                    	MOV	AX,CS
  2268 00000513 29C3                    	SUB	BX,AX			; BX is size of SYSINIT in Para
  2269 00000515 83C311                  	ADD	BX,11H			; Add the SYSINIT PHP
  2270 00000518 29DD                    	SUB	BP,BX			; BAIS down
  2271 0000051A 722D                    	JC	short MEMERRJX		; No Way.
  2272                                  
  2273                                  ; 09/07/2019 - Retro DOS v3.1 test
  2274                                  ; C = [MEMORY_SIZE]-CS+11h = 019Dh
  2275                                  
  2276 0000051C B8003D                  	MOV	AX,OPEN*256	 	;OPEN THE FILE being EXECED
  2277 0000051F F9                      	STC				;IN CASE OF INT 24
  2278 00000520 CD21                    	INT	21H
  2279 00000522 7244                    	JC	short COMERR		; Ooops
  2280                                  
  2281 00000524 89C3                    	MOV	BX,AX			;Handle in BX
  2282 00000526 31C9                    	XOR	CX,CX
  2283 00000528 31D2                    	XOR	DX,DX
  2284 0000052A B80242                  	MOV	AX,(LSEEK*256)|2
  2285 0000052D F9                      	STC				;IN CASE OF INT 24
  2286 0000052E CD21                    	INT	21H			; Get file size in DX:AX
  2287 00000530 7236                    	JC	short COMERR
  2288                                  
  2289                                      ; Convert size in DX:AX to para in AX
  2290 00000532 83C00F                  	ADD	AX,15			; Round up size for conversion to para
  2291 00000535 83D200                  	ADC	DX,0
  2292 00000538 B104                    	MOV	CL,4
  2293 0000053A D3E8                    	SHR	AX,CL
  2294 0000053C B10C                    	MOV	CL,12
  2295 0000053E D3E2                    	SHL	DX,CL			; Low nibble of DX to high nibble
  2296 00000540 09D0                    	OR	AX,DX			; AX is now # of para for file
  2297 00000542 83C010                  	ADD	AX,10H			; 100H byte PHP
  2298 00000545 39E8                    	CMP	AX,BP			; Will it fit?
  2299 00000547 7203                    	JB	short OKLD		; Jump if yes.
  2300                                  MEMERRJX:
  2301 00000549 E9030D                  	JMP	MEM_ERR
  2302                                  
  2303                                  OKLD:
  2304 0000054C B43E                    	MOV	AH,CLOSE
  2305 0000054E CD21                    	INT	21H			; Close file
  2306                                  
  2307 00000550 5A                      	POP	DX			; Recover pointer to name
  2308                                  
  2309 00000551 0E                      	PUSH	CS
  2310 00000552 07                      	POP	ES
  2311                                  
  2312 00000553 BB[B302]                	MOV	BX,COMEXE
  2313                                          ;MOV	[BX+EXEC0.COM_LINE+2],CS
  2314                                          ;MOV	[BX+EXEC0.5C_FCB+2],CS
  2315                                          ;MOV	[BX+EXEC0.6C_FCB+2],CS
  2316 00000556 8C0E[B702]              	MOV	[EXEC0.COM_LINE+2],CS
  2317 0000055A 8C0E[BB02]                      MOV	[EXEC0.5C_FCB+2],CS
  2318 0000055E 8C0E[BF02]                      MOV	[EXEC0.6C_FCB+2],CS
  2319                                  
  2320                                          ;XOR	AX,AX
  2321                                          ;MOV	AH,EXEC
  2322 00000562 B8004B                          MOV	AX,EXEC*256
  2323 00000565 F9                      	STC				; IN CASE OF INT 24
  2324 00000566 CD21                            INT	21H			; GO START UP COMMAND
  2325                                          ;ENDIF
  2326                                  
  2327                                  COMERR:
  2328 00000568 BA[0E17]                        MOV     DX,BADCOM		; WANT TO PRINT COMMAND ERROR
  2329 0000056B E8100F                          CALL    BADFIL
  2330                                  STALL:  
  2331 0000056E EBFE                    	JMP     SHORT STALL
  2332                                  
  2333                                  	; 08/06/2018 - Retro DOS v3.0
  2334                                  
  2335                                  TEMPCDS:
  2336 00000570 C43E[6402]              	LES	DI,[DOSINFO]
  2337                                  
  2338 00000574 268A4D20                	MOV	CL,[ES:DI+SYSI_NUMIO]
  2339 00000578 30ED                    	XOR	CH,CH
  2340 0000057A 26884D21                	MOV	[ES:DI+SYSI_NCDS],CL
  2341 0000057E 88C8                    	MOV	AL,CL
  2342 00000580 B451                    	MOV	AH,curdir_list.size ; 81
  2343 00000582 F6E4                    	MUL	AH
  2344 00000584 E8B102                  	call	ParaRound
  2345 00000587 8B36[8702]              	MOV	SI,[CONFBOT]
  2346 0000058B 29C6                    	SUB	SI,AX
  2347 0000058D 8936[8902]              	MOV	[ALLOCLIM],SI		; Can't alloc past here!
  2348 00000591 26897518                	MOV	[ES:DI+SYSI_CDS+2],SI
  2349 00000595 89F0                    	MOV	AX,SI
  2350 00000597 26C745160000            	MOV	WORD [ES:DI+SYSI_CDS],0
  2351                                  	;LDS	SI,[ES:DI+SYSI_DPB]
  2352 0000059D 26C535                  	lds	si,[es:di] ; 05/07/2019
  2353 000005A0 8EC0                    	MOV	ES,AX
  2354 000005A2 31FF                    	XOR	DI,DI
  2355                                  FOOSET: 				; Init CDSs
  2356                                  	; 18/06/2018
  2357 000005A4 2EA1[8B02]              	MOV	AX,[CS:FOOSTRNG]
  2358 000005A8 AB                      	STOSW
  2359 000005A9 2EA1[8D02]              	MOV	AX,[CS:FOOSTRNG+2]
  2360 000005AD AB                      	STOSW
  2361 000005AE 2EFE06[8B02]            	INC	BYTE [CS:FOOSTRNG]
  2362 000005B3 31C0                    	XOR	AX,AX
  2363 000005B5 51                      	PUSH	CX
  2364 000005B6 B93F00                  	MOV	CX,curdir_list.cdir_flags - 4
  2365 000005B9 F3AA                    	REP	STOSB
  2366 000005BB 83FEFF                  	CMP	SI,-1
  2367 000005BE 7507                    	JNZ	short NORMCDS
  2368                                  	;XOR	AX,AX ; 06/07/2019
  2369 000005C0 B103                    	MOV	CL,3
  2370 000005C2 F3AB                    	REP	STOSW
  2371 000005C4 59                      	POP	CX
  2372 000005C5 EB0E                    	JMP	SHORT FINCDS
  2373                                  
  2374                                  NORMCDS:
  2375 000005C7 59                      	POP	CX
  2376 000005C8 B80040                  	MOV	AX,curdir_inuse
  2377 000005CB AB                      	STOSW				; curdir_flags
  2378 000005CC 89F0                    	MOV	AX,SI
  2379 000005CE AB                      	STOSW				; curdir_devptr
  2380 000005CF 8CD8                    	MOV	AX,DS
  2381 000005D1 AB                      	STOSW
  2382 000005D2 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
  2383                                  FINCDS:
  2384 000005D5 B8FFFF                  	MOV	AX,-1
  2385 000005D8 AB                      	STOSW				; curdir_ID
  2386 000005D9 AB                      	STOSW				; curdir_ID
  2387 000005DA AB                      	STOSW				; curdir_user_word
  2388 000005DB B80200                  	mov	ax,2
  2389 000005DE AB                      	stosw				; curdir_end
  2390 000005DF E2C3                    	LOOP	FOOSET
  2391 000005E1 2EC606[8B02]41          	MOV	BYTE [CS:FOOSTRNG],"A"
  2392 000005E7 C3                      	retn
  2393                                  
  2394                                  ; 09/06/2018 - Retro DOS v3.0  (MSDOS 3.3, SYSINIT1.ASM, 1987)
  2395                                  
  2396                                  ; Allocate FILEs
  2397                                  ;------------------------------------------------------------------------------
  2398                                  ENDFILE:
  2399                                  
  2400                                  ; WE ARE NOW SETTING UP FINAL CDSs, BUFFERS, FILES, FCSs STRINGs etc. We no
  2401                                  ; longer need the space taken by The TEMP stuff below CONFBOT, so set ALLOCLIM
  2402                                  ; to CONFBOT.
  2403                                  
  2404                                  	; 18/06/2018
  2405                                  	;MOV	AX,[CS:CONFBOT]
  2406                                  	;MOV	[CS:ALLOCLIM],AX
  2407 000005E8 0E                      	PUSH	CS
  2408 000005E9 1F                      	POP	DS
  2409 000005EA A1[8702]                	MOV	AX,[CONFBOT]
  2410 000005ED A3[8902]                	MOV	[ALLOCLIM],AX
  2411 000005F0 E83A0C                  	call	ROUND
  2412 000005F3 A0[8302]                	MOV	AL,[FILES]
  2413 000005F6 2C05                    	SUB	AL,5
  2414 000005F8 763F                    	JBE	short DOFCBS
  2415 000005FA 30E4                    	XOR	AH,AH			; DO NOT USE CBW INSTRUCTION!!!!!
  2416                                  					;  IT DOES SIGN EXTEND.
  2417 000005FC 8B1E[C802]              	MOV	BX,[MEMLO]
  2418 00000600 8B16[CA02]              	MOV	DX,[MEMHI]
  2419                                  
  2420 00000604 C53E[6402]              	LDS	DI,[DOSINFO]		;GET POINTER TO DOS DATA
  2421 00000608 C57D04                  	LDS	DI,[DI+SYSI_SFT]	;DS:BP POINTS TO SFT
  2422                                  	;MOV	[DI+SF.SFLink],BX
  2423 0000060B 891D                    	mov	[di],bx ; 05/07/2019
  2424 0000060D 895502                  	MOV	[DI+SF.SFLink+2],DX	;SET POINTER TO NEW SFT
  2425 00000610 0E                      	PUSH	CS
  2426 00000611 1F                      	POP	DS
  2427 00000612 C43E[C802]              	LES	DI,[MEMLO]		;POINT TO NEW SFT
  2428                                  	;MOV	WORD [ES:DI+SF.SFLink],-1
  2429 00000616 26C705FFFF              	mov	word [es:di],-1	 ; 05/07/2019	
  2430 0000061B 26894504                	MOV	[ES:DI+SF.SFCount],AX
  2431                                  	; 26/07/2019
  2432                                  	;mov	bl,53 ; MSDOS 3.3
  2433                                  	;mov	bl,59 ; MSDOS 6.0
  2434 0000061F B33B                    	MOV	BL,SF_ENTRY.size
  2435 00000621 F6E3                    	MUL	BL			;AX = NUMBER OF BYTES TO CLEAR
  2436 00000623 89C1                    	MOV	CX,AX
  2437 00000625 0106[C802]              	ADD	[MEMLO],AX		;ALLOCATE MEMORY
  2438 00000629 B80600                  	MOV	AX,6
  2439 0000062C 0106[C802]              	ADD	[MEMLO],AX		;REMEMBER THE HEADER TOO
  2440 00000630 E8FA0B                  	call	ROUND			; Check for mem error before the STOSB
  2441 00000633 01C7                    	ADD	DI,AX
  2442 00000635 31C0                    	XOR	AX,AX
  2443 00000637 F3AA                    	REP	STOSB			;CLEAN OUT THE STUFF
  2444                                  
  2445                                  ; Allocate FCBs
  2446                                  ;------------------------------------------------------------------------------
  2447                                  DOFCBS:
  2448                                  	; 24/06/2018
  2449                                  	;PUSH	CS
  2450                                  	;POP	DS
  2451 00000639 E8F10B                  	call	ROUND
  2452 0000063C A0[8402]                	MOV	AL,[FCBS]
  2453 0000063F 30E4                    	XOR	AH,AH			; DO NOT USE CBW INSTRUCTION!!!!!
  2454                                  					;  IT DOES SIGN EXTEND.
  2455 00000641 8B1E[C802]              	MOV	BX,[MEMLO]
  2456 00000645 8B16[CA02]              	MOV	DX,[MEMHI]
  2457 00000649 C53E[6402]              	LDS	DI,[DOSINFO]		;GET POINTER TO DOS DATA
  2458                                  
  2459 0000064D 895D1A                  	MOV	[DI+SYSI_FCB],BX
  2460 00000650 89551C                  	MOV	[DI+SYSI_FCB+2],DX	;SET POINTER TO NEW Table
  2461                                  
  2462 00000653 2E8A1E[8502]            	MOV	BL,[CS:KEEP]
  2463 00000658 30FF                    	XOR	BH,BH
  2464 0000065A 895D1E                  	MOV	[DI+SYSI_KEEP],BX
  2465 0000065D 0E                      	PUSH	CS
  2466 0000065E 1F                      	POP	DS
  2467 0000065F C43E[C802]              	LES	DI,[MEMLO]		;POINT TO NEW Table
  2468                                  	;MOV	WORD [ES:DI+SF.SFLink],-1
  2469 00000663 26C705FFFF              	mov	word [es:di],-1 ; 05/07/2019
  2470 00000668 26894504                	MOV	[ES:DI+SF.SFCount],AX
  2471                                  	; 26/07/2019
  2472                                  	;mov	bl,53 ; MSDOS 3.3
  2473                                  	;mov	bl,59 ; MSDOS 6.0
  2474 0000066C B33B                    	MOV	BL,SF_ENTRY.size
  2475 0000066E 89C1                    	MOV	CX,AX
  2476 00000670 F6E3                    	MUL	BL			;AX = NUMBER OF BYTES TO CLEAR
  2477 00000672 0106[C802]              	ADD	[MEMLO],AX		;ALLOCATE MEMORY
  2478                                  	;mov	ax,6
  2479 00000676 B80600                  	MOV	AX,SF.size-2
  2480 00000679 0106[C802]              	ADD	[MEMLO],AX		;REMEMBER THE HEADER TOO
  2481 0000067D E8AD0B                  	call	ROUND			; Check for mem error before the STOSB
  2482 00000680 01C7                    	ADD	DI,AX			;Skip over header
  2483 00000682 B041                    	MOV	AL,'A'
  2484                                  FillLoop:
  2485 00000684 51                      	PUSH	CX			; save count
  2486                                  	;mov	cx,53
  2487                                  	;mov	cx,59 ; MSDOS 6.0
  2488 00000685 B93B00                  	MOV	CX,SF_ENTRY.size	; number of bytes to fill
  2489 00000688 FC                      	cld
  2490 00000689 F3AA                    	REP	STOSB			; filled
  2491                                  	
  2492                                  	;MOV	WORD [ES:DI-SF_ENTRY.size+SF_ENTRY.sf_ref_count],0
  2493                                  	;MOV	WORD [ES:DI-SF_ENTRY.size+SF_ENTRY.sf_position],0
  2494                                  	;MOV	WORD [ES:DI-SF_ENTRY.size+SF_ENTRY.sf_position+2],0
  2495                                  	
  2496                                  	; 06/07/2019
  2497 0000068B 26894DC5                	MOV	[ES:DI-SF_ENTRY.size+SF_ENTRY.sf_ref_count],cx ; 0
  2498 0000068F 26894DDA                	MOV	[ES:DI-SF_ENTRY.size+SF_ENTRY.sf_position],cx  ; 0
  2499 00000693 26894DDC                	MOV	[ES:DI-SF_ENTRY.size+SF_ENTRY.sf_position+2],cx ; 0
  2500                                  
  2501 00000697 59                      	POP	CX
  2502 00000698 E2EA                    	LOOP	FillLoop
  2503                                  
  2504                                  ; Allocate Buffers
  2505                                  ;------------------------------------------------------------------------------
  2506                                  
  2507                                  ; Search through the list of media supported and allocate 3 buffers if the
  2508                                  ; capacity of the drive is > 360KB
  2509                                  
  2510 0000069A 803E[8102]FF            	CMP	byte [BUFFERS],-1	; Has buffers been already set?
  2511 0000069F 7403                    	je	short DoDefaultBuff
  2512 000006A1 E98500                  	jmp	DOBUFF			; the user entered the buffers=.
  2513                                  
  2514                                  DoDefaultBuff:
  2515 000006A4 C606[8102]02            	MOV	byte [BUFFERS],2	; Default to 2 buffers
  2516                                  	; 24/06/2018
  2517                                  	;PUSH	AX
  2518                                  	;PUSH	DS
  2519                                  	;
  2520                                  	;LES	BP,[CS:DOSINFO] 	; Search through the DPB's
  2521                                  	;LES	BP,[ES:BP+SYSI_DPB]	; Get first DPB
  2522                                  
  2523                                  	; 24/06/2018
  2524                                  	;PUSH	CS
  2525                                  	;POP	DS
  2526                                  	; 18/06/2018
  2527 000006A9 C42E[6402]              	LES	BP,[DOSINFO] 		; Search through the DPB's
  2528                                  	;LES	BP,[ES:BP+SYSI_DPB]	; Get first DPB
  2529 000006AD 26C46E00                	les	bp,[es:bp] ; 05/07/2019
  2530                                  
  2531                                  NEXTDPB:
  2532                                  	; 26/07/2019
  2533                                  	; Test if the drive supports removeable media
  2534                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
  2535 000006B1 268A5E00                	mov	bl,[es:bp] ; 05/07/2019
  2536 000006B5 FEC3                    	INC	BL
  2537 000006B7 B80844                  	MOV	AX,(IOCTL*256)+8  ; mov	ax,(IOCTL<<8)|8	; 4408h
  2538 000006BA CD21                    	INT	21H
  2539                                  
  2540                                  ; Ignore fixed disks
  2541 000006BC 09C0                    	OR	AX,AX			; AX is nonzero if disk is nonremoveable
  2542 000006BE 7535                    	JNZ	short NOSETBUF
  2543                                  
  2544                                  ; Get parameters of drive
  2545 000006C0 31DB                    	XOR	BX,BX
  2546                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
  2547 000006C2 268A5E00                	mov	bl,[es:bp] ; 05/07/2019
  2548 000006C6 FEC3                    	INC	BL
  2549 000006C8 BA[E915]                	MOV	DX,DEVICEPARAMETERS
  2550 000006CB B80D44                  	MOV	AX,(IOCTL*256)+GENERIC_IOCTL
  2551                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL ; 440Dh
  2552 000006CE B96008                  	MOV	CX,(RAWIO*256)|GET_DEVICE_PARAMETERS
  2553                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
  2554 000006D1 CD21                    	INT	21H
  2555 000006D3 7220                    	JC	short NOSETBUF		; Get next DPB if driver doesn't support
  2556                                  					; Generic IOCTL
  2557                                  ; Determine capacity of drive
  2558                                  ; Media Capacity = #Sectors * Bytes/Sector
  2559 000006D5 8B1E[F815]              	MOV	BX,[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
  2560                                  
  2561                                  ; To keep the magnitude of the media capacity within a word,
  2562                                  ; scale the sector size
  2563                                  ; (ie. 1 -> 512 bytes, 2 -> 1024 bytes, ...)
  2564                                  
  2565                                  	;mov	ax,[deviceparameters+7+0]
  2566 000006D9 A1[F015]                	MOV	AX,[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
  2567 000006DC 31D2                    	XOR	DX,DX
  2568 000006DE B90002                  	MOV	CX,512
  2569 000006E1 F7F1                    	DIV	CX				; Scale sector size in factor of
  2570                                  						; 512 bytes
  2571                                  
  2572 000006E3 F7E3                    	MUL	BX				; AX = #sectors * size factor
  2573 000006E5 09D2                    	OR	DX,DX				; Just in case of LARGE floppies
  2574 000006E7 7505                    	JNZ	short SETBUF
  2575 000006E9 3DD002                  	CMP	AX,720				; 720 Sectors * size factor of 1
  2576 000006EC 7607                    	JBE	short NOSETBUF
  2577                                  SETBUF:
  2578 000006EE C606[8102]03            	MOV	byte [BUFFERS],3
  2579 000006F3 EB0D                    	jmp	short Chk_Memsize_for_Buffers 	; Now check the mem size for default buff count
  2580                                  NOSETBUF:
  2581                                  	;cmp	word [es:bp+19h],0FFFFh  ; MSDOS 6.0
  2582 000006F5 26837E19FF              	CMP	WORD [ES:BP+DPB.NEXT_DPB],-1
  2583 000006FA 7406                    	jz	short Chk_Memsize_for_Buffers
  2584                                  	;les	bp,[es:bp+19h] ; MSDOS 6.0
  2585 000006FC 26C46E19                	LES	BP,[ES:BP+DPB.NEXT_DPB]
  2586 00000700 EBAF                    	JMP	short NEXTDPB
  2587                                  
  2588                                  ;From DOS 3.3, the default number of buffers will be changed according to the
  2589                                  ;memory size too.
  2590                                  ; Default buffers = 2
  2591                                  ; If diskette Media > 360 kb, then default buffers = 3
  2592                                  ; If memory size > 128 kb (2000H para), then default buffers = 5
  2593                                  ; If memory size > 256 kb (4000H para), then default buffers = 10
  2594                                  ; If memory size > 512 kb (8000H para), then default buffers = 15.
  2595                                  
  2596                                  Chk_Memsize_for_Buffers:
  2597                                  	; 26/07/2019
  2598 00000702 813E[7E02]0020          	cmp	word [MEMORY_SIZE],2000h ; 8192  ; 128 kb
  2599 00000708 761F                    	jbe	short BUFSET
  2600                                  
  2601 0000070A C606[8102]0F            	mov	byte [BUFFERS],15
  2602                                  
  2603 0000070F 813E[7E02]0080          	cmp	word [MEMORY_SIZE],8000h ; 32768 ; 512 kb	
  2604 00000715 7712                    	ja	short BUFSET ; 06/07/2019
  2605                                  
  2606 00000717 C606[8102]0A            	mov	byte [BUFFERS],10
  2607                                  
  2608 0000071C 813E[7E02]0040          	cmp	word [MEMORY_SIZE],4000h ; 16384 ; 256 kb
  2609 00000722 7705                    	ja	short BUFSET ; 06/07/2019
  2610                                  
  2611 00000724 C606[8102]05            	mov	byte [BUFFERS],5
  2612                                  BUFSET:
  2613                                  	; 24/06/2018
  2614                                  	;POP	DS
  2615                                  	;POP	AX
  2616                                  DOBUFF:
  2617 00000729 E8010B                  	call	ROUND
  2618 0000072C FE0E[8102]              	DEC	byte [BUFFERS]		; FIRST DEC acounts for buffer already
  2619                                  					;    in system.
  2620 00000730 742F                    	JZ	short BUF1		; All done
  2621                                  
  2622 00000732 1E                      	PUSH	DS
  2623 00000733 C43E[C802]              	LES	DI,[BUFPTR] ; les di,[MEMLO]
  2624 00000737 C51E[6402]              	LDS	BX,[DOSINFO]
  2625 0000073B 8B4712                  	MOV	AX,[BX+SYSI_BUF]	; Link in new buffer
  2626                                  	;MOV	[ES:DI+BUFFINFO.buf_link],AX
  2627 0000073E 268905                  	mov	[es:di],ax ; 05/07/2019
  2628 00000741 8B4714                  	MOV	AX,[BX+SYSI_BUF+2]
  2629 00000744 26894502                	MOV	[ES:DI+BUFFINFO.buf_link+2],AX
  2630 00000748 897F12                  	MOV	[BX+SYSI_BUF],DI
  2631 0000074B 8C4714                  	MOV	[BX+SYSI_BUF+2],ES
  2632 0000074E 26C74504FF00            	MOV	word [ES:DI+BUFFINFO.buf_ID],00FFh ; NEW BUFFER FREE
  2633 00000754 8B5F10                  	MOV	BX,[BX+SYSI_MAXSEC]
  2634 00000757 1F                      	POP	DS
  2635                                  	;add	bx,16 ; MSDOS 3.3
  2636                                  	;add	bx,20 ; MSDOS 6.0
  2637 00000758 83C314                  	ADD	BX,BUFINSIZ
  2638 0000075B 011E[C802]              	ADD	[MEMLO],BX
  2639 0000075F EBC8                    	JMP	short DOBUFF
  2640                                  
  2641                                  ; 10/06/2018 - Retro DOS v3.0
  2642                                  
  2643                                  ; Allocate CDSs
  2644                                  ;------------------------------------------------------------------------------
  2645                                  BUF1:
  2646 00000761 E8C90A                  	call	ROUND
  2647 00000764 C43E[6402]              	LES	DI,[DOSINFO]
  2648 00000768 268A4D20                	MOV	CL,[ES:DI+SYSI_NUMIO]
  2649 0000076C 3A0E[8602]              	CMP	CL,[NUM_CDS]
  2650 00000770 7304                    	JAE	short GOTNCDS		; User setting must be at least NUMIO
  2651 00000772 8A0E[8602]              	MOV	CL,[NUM_CDS]
  2652                                  GOTNCDS:
  2653 00000776 30ED                    	XOR	CH,CH
  2654 00000778 26884D21                	MOV	[ES:DI+SYSI_NCDS],CL
  2655 0000077C A1[CA02]                	MOV	AX,[MEMHI]
  2656 0000077F 26894518                	MOV	[ES:DI+SYSI_CDS+2],AX
  2657 00000783 A1[C802]                	MOV	AX,[MEMLO]
  2658 00000786 26894516                	MOV	[ES:DI+SYSI_CDS],AX
  2659 0000078A 88C8                    	MOV	AL,CL
  2660 0000078C B451                    	MOV	AH,curdir_list.size
  2661 0000078E F6E4                    	MUL	AH
  2662 00000790 E8A500                  	call	ParaRound
  2663 00000793 0106[CA02]              	ADD	[MEMHI],AX
  2664 00000797 E8930A                  	call	ROUND			; Check for mem error before initializing
  2665                                  	;LDS	SI,[ES:DI+SYSI_DPB]
  2666 0000079A 26C535                  	lds	si,[es:di] ; 05/07/2019
  2667 0000079D 26C47D16                	LES	DI,[ES:DI+SYSI_CDS]
  2668 000007A1 E800FE                  	CALL	FOOSET
  2669                                  
  2670                                  ; Allocate Space for Internal Stack
  2671                                  ;------------------------------------------------------------------------------
  2672                                  
  2673                                  	;IF	STACKSW
  2674 000007A4 0E                      	PUSH	CS
  2675 000007A5 1F                      	POP	DS
  2676                                  	;ASSUME	DS:SYSINITSEG
  2677                                  
  2678                                  	; 27/07/2019 - Retro DOS v3.2
  2679                                  
  2680                                  ; 07/07/2019 (Bochs emulator, two harddisks)
  2681                                  ; [MEMHI] = 0BA4h (at thispoint)
  2682                                  
  2683                                  	; !!! 07/07/2019 - Retro DOS v3.1 !!! by Erdogan Tan
  2684                                  	; (move stack code -destination- address 1024 bytes upward
  2685                                  	;	it is seen as enough to prevent overlap!) 
  2686                                  	; (Note: Currently, I don't know the reason which causes overlap!?)	
  2687                                  	
  2688                                  	;;add	word [MEMHI],64  ; 64 = 1024/16
  2689                                  	;add	word [MEMHI],72	 ; 09/07/2019
  2690                                  
  2691                                  	;IF	IBM
  2692                                  ;Don't install the system stack on the PCjr. Ignore STACKS=command too.
  2693 000007A6 803E[B102]FD            	CMP	byte [Sys_Model_Byte],0FDh	; PCjr = 0FDh
  2694                                  	;JE	short SkipStack
  2695 000007AB 741C                    	JE	short SkipStack1
  2696                                  	;ENDIF
  2697                                  
  2698                                  ;If the user does not entered STACKS= command, as a default, do not install
  2699                                  ;sytem stacks for PC1, PC XT, PC Portable cases.
  2700                                  ;Otherwise, install it to the user specified value or to the default
  2701                                  ;value of 9, 128 for the rest of the system.
  2702                                  
  2703                                  	; 09/07/2019
  2704                                  
  2705 000007AD 833E[7A02]FF            	cmp	word [STACK_ADDR],-1		;Has the user entered "stacks=" command?
  2706 000007B2 741D                    	je	short DoInstallStack		;Then install as specified by the user
  2707 000007B4 803E[B202]00            	cmp	byte [Sys_Scnd_Model_Byte],0	;PC1, XT has the secondary model byte = 0
  2708 000007B9 7516                    	jne	short DoInstallStack		;Other model should have def. stack of 9, 128
  2709 000007BB 803E[B102]FF            	cmp	byte [Sys_Model_Byte],0FFh	;PC1 ?
  2710                                  	;je	short SkipStack
  2711 000007C0 7407                    	je	short SkipStack1
  2712 000007C2 803E[B102]FE            	cmp	byte [Sys_Model_Byte],0FEh	;PC/XT or PC Portable ?	
  2713                                  	;je	short SkipStack
  2714 000007C7 7508                    	jne	short DoInstallStack
  2715                                  
  2716                                  SkipStack1:
  2717                                  	; 09/07/2019
  2718 000007C9 C706[C802][1A07]        	mov	word [MEMLO],((EntrySize+DefaultSize)*DefaultCount)+endstackcode
  2719 000007CF EB46                    	jmp	short SkipStack
  2720                                  
  2721                                  DoInstallStack:
  2722 000007D1 A1[7602]                	mov	ax,[STACK_COUNT]		; Stack_count = 0?
  2723 000007D4 83F800                  	cmp	ax,0				;then, stack size must be 0 too.
  2724                                  	;jz	short SkipStack			;Don't install stack.
  2725 000007D7 74F0                    	jz	short SkipStack1
  2726                                  
  2727                                  ; 10/21/86 Dynamic Relocation of Stack code.			
  2728 000007D9 E8510A                  	call	ROUND				;[memhi] = Seg. for stack code
  2729                                  						;[memlo] = 0
  2730 000007DC A1[CA02]                	mov	ax,[MEMHI]
  2731 000007DF 8EC0                    	mov	es,ax				;ES -> Seg. the stack code is going to move.
  2732                                  
  2733                                  	;assume	es:nothing
  2734                                  	; 18/06/2018
  2735                                  	;push	cs
  2736                                  	;pop	ds
  2737                                  	; 05/07/2018
  2738 000007E1 31F6                    	xor	si,si			;!!We know that Stack code is at the beginning of SYSINIT.
  2739 000007E3 31FF                    	xor	di,di
  2740 000007E5 B9[5202]                	mov	cx,endstackcode
  2741 000007E8 890E[C802]              	mov	[MEMLO],cx
  2742 000007EC E83E0A                  	call	ROUND				;Have enough space for relocation?
  2743 000007EF F3A4                    	rep	movsb
  2744                                  
  2745                                  	;add word [MEMHI],64  ; 64 = 1024/16
  2746                                  
  2747 000007F1 A1[C802]                	MOV	AX,[MEMLO]			; Set address of stacks
  2748 000007F4 A3[7A02]                	MOV	[STACK_ADDR],AX
  2749 000007F7 A1[CA02]                	MOV	AX,[MEMHI]
  2750 000007FA A3[7C02]                	MOV	[STACK_ADDR+2],AX
  2751                                  
  2752                                  ; 07/07/2019 (Bochs emulator, two harddisks)
  2753                                  ; [MEMHI] = 0BD1h (at thispoint)
  2754                                  
  2755                                  ;	Space for Internal Stack = STACK_COUNT(ENTRYSIZE + STACK_SIZE)
  2756 000007FD B80800                  	MOV	AX,EntrySize
  2757 00000800 0306[7802]              	ADD	AX,[STACK_SIZE]
  2758 00000804 8B0E[7602]              	MOV	CX,[STACK_COUNT]
  2759 00000808 F7E1                    	MUL	CX
  2760 0000080A E82B00                  	call	ParaRound		; Convert size to paragraphs
  2761 0000080D 0106[CA02]              	ADD	[MEMHI],AX
  2762 00000811 E8190A                  	call	ROUND			; Check for memory error before
  2763                                  					; continuing
  2764 00000814 E82D00                  	CALL	stackinit		; Initialize hardware stack
  2765                                  
  2766                                  SkipStack:
  2767                                  	;ENDIF
  2768                                  
  2769                                  	; 18/06/2018
  2770                                  	;PUSH	CS
  2771                                  	;POP	DS
  2772                                  	;ASSUME	DS:SYSINITSEG
  2773                                  
  2774                                  ; Allocate rest of memory to system
  2775                                  ;------------------------------------------------------------------------------
  2776 00000817 E8130A                  	call	ROUND
  2777                                  
  2778                                  	; !!! 07/07/2019 - Retro DOS v3.1 !!! by Erdogan Tan
  2779                                  	; (move stack code -destination- address 1024 bytes upward
  2780                                  	;	it is seen as enough to prevent overlap!) 
  2781                                  	; (Note: Currently, I don't know the reason which causes overlap!?)	
  2782                                  
  2783                                  	;add	word [MEMHI],64  ; 64 = 1024/16
  2784                                  
  2785 0000081A 8B1E[CA02]              	MOV	BX,[MEMHI]
  2786                                  
  2787                                  ; 07/07/2019 (Bochs emulator, two harddisks)
  2788                                  ; [MEMHI] = 0C5Eh (at thispoint)
  2789                                  
  2790 0000081E A1[CE02]                	MOV	AX,[AREA]
  2791 00000821 8EC0                    	MOV	ES,AX			;CALC WHAT WE NEEDED
  2792 00000823 29C3                    	SUB	BX,AX
  2793                                  
  2794                                  ; 09/07/2019 - Retro DOS v3.1 test
  2795                                  ; Z = BX = 02BAh
  2796                                  
  2797 00000825 B44A                    	MOV	AH,SETBLOCK
  2798 00000827 CD21                    	INT	21H			;GIVE THE REST BACK
  2799 00000829 06                      	PUSH	ES
  2800 0000082A 8CC0                    	MOV	AX,ES
  2801 0000082C 48                      	DEC	AX
  2802 0000082D 8EC0                    	MOV	ES,AX			;Point to arena
  2803 0000082F 26C70601000800          	MOV	word [ES:ARENA.OWNER],8	;Set impossible owner
  2804                                  
  2805 00000836 07                      	POP	ES
  2806                                  
  2807                                  	;IF	NOEXEC   ; (NOEXEC = FALSE)
  2808                                  	;MOV	BX,0FFFFH		;ALLOCATE THE REST OF MEM FOR COMMAND
  2809                                  	;MOV	AH,ALLOC
  2810                                  	;INT	21H
  2811                                  	;MOV	AH,ALLOC
  2812                                  	;INT	21H
  2813                                  	;MOV	DS,AX
  2814                                  	;ENDIF
  2815                                  
  2816 00000837 C3                      	retn
  2817                                  
  2818                                  ParaRound:
  2819 00000838 83C00F                  	ADD	AX,15
  2820 0000083B D1D8                    	RCR	AX,1
  2821 0000083D D1E8                    	SHR	AX,1
  2822 0000083F D1E8                    	SHR	AX,1
  2823 00000841 D1E8                    	SHR	AX,1
  2824 00000843 C3                      	retn
  2825                                  
  2826                                  ;-------------------------------------------------------------------------
  2827                                  ; 5/6/86. MSSTACK initialization routine.
  2828                                  	;IF	STACKSW 
  2829                                  
  2830                                  ;INCLUDE STKINIT.INC
  2831                                  
  2832                                  	;ENDIF
  2833                                  ;--------------------------------------------------------------------------
  2834                                  
  2835                                  ; 05/07/2018
  2836                                  
  2837                                  ; ----------------------------------------------------------------------
  2838                                  ; STKINIT.INC - MSDOS 3.3 - 24/07/1987
  2839                                  ; ----------------------------------------------------------------------
  2840                                  ; 10/06/2018 - Retro DOS v3.0
  2841                                  
  2842                                  KERNEL_SEGMENT	equ 0070h
  2843                                  
  2844                                  ; 18/07/2019 - Retro DOS v3.2 
  2845                                  
  2846                                  ; retrodos33.asm (offset addresses in MSDOS.SYS or RETRODOS.SYS)
  2847                                  ; -----------------------------------------------------------
  2848                                  ; Note: These offset addresses must be chanqed when the code 
  2849                                  ; 	in retrodos33.asm (MSDOS.SYS) file will be changed.
  2850                                  
  2851                                  INT19SEM equ 06D5h ; 21/07/2019 - retrodos33.txt
  2852                                  I19_LST	 equ 06D6h ; 21/07/2019 - retrodos33.txt
  2853                                  INT19OLD02 equ I19_LST+1 ; 06D7h
  2854                                  INT19OLD08 equ I19_LST+6
  2855                                  INT19OLD09 equ I19_LST+11
  2856                                  INT19OLD0A equ I19_LST+16
  2857                                  INT19OLD0B equ I19_LST+21
  2858                                  INT19OLD0C equ I19_LST+26
  2859                                  INT19OLD0D equ I19_LST+31
  2860                                  INT19OLD0E equ I19_LST+36
  2861                                  INT19OLD70 equ I19_LST+41
  2862                                  INT19OLD72 equ I19_LST+46
  2863                                  INT19OLD73 equ I19_LST+51
  2864                                  INT19OLD74 equ I19_LST+56
  2865                                  INT19OLD76 equ I19_LST+61
  2866                                  INT19OLD77 equ I19_LST+66 ; 0718h
  2867                                  
  2868                                  ; 28/07/2019
  2869                                  RE_INIT	equ 1A6Bh ; 1AA6h for MSDOS 3.3 IBMBIO.COM
  2870                                  
  2871                                  ; 29/06/2019 - Retro DOS v3.1
  2872                                  		
  2873                                  ; ======================================================================
  2874                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
  2875                                  ; ----------------------------------------------------------------------
  2876                                  ; 27/03/2019 - Retro DOS v4.0
  2877                                  
  2878                                  ; ----------------------------------------------------------------------
  2879                                  ; ibmstack initialization routine.
  2880                                  ;
  2881                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
  2882                                  ;	has been modified. this initialization routine also has to
  2883                                  ;	be modified because for the interrupt level 7 and 15, firstflag
  2884                                  ;	should be set to signal that this interrupt handler is the
  2885                                  ;	first handler hooked to this interrupt vector.
  2886                                  ;	we determine this by looking at the instruction pointed by
  2887                                  ;	this vector. if it is iret, then this handler should be the
  2888                                  ;	first one. in our case, only the interrupt vector 77h is the
  2889                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
  2890                                  ;
  2891                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
  2892                                  ;	some design changes are needed to the above interrupt sharing
  2893                                  ;	method. the above sharing scheme assumes that 1). interrupt
  2894                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
  2895                                  ;	interrupts would only be generated on levels 7 and 15.
  2896                                  ;	these assumptions are not true any more. we have to use the firstflag
  2897                                  ;	for every level of interrupt. we will set the firstflag on the following
  2898                                  ;	conditions:
  2899                                  ;
  2900                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
  2901                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
  2902                                  ;	 c. else if cs:ip points to an iret, then "first"
  2903                                  ;	 d. else if cs:ip points to dummy, then "first"
  2904                                  ;
  2905                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
  2906                                  ;	be equal to the value at f000:ff01. this location is the initial value
  2907                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
  2908                                  ;	the bioses for all of the machines.
  2909                                  ;
  2910                                  ;	system design group requests bios to handle the phantom interrupts.
  2911                                  ;
  2912                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
  2913                                  ;	produced by the bogus adapter card even without interrupt request is
  2914                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
  2915                                  ;	edge triggered mode to latch a pulse and present the interrupt when
  2916                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
  2917                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
  2918                                  ;	2). or, this is caused by adapter cards placing a glitch on the
  2919                                  ;	interrupt line.
  2920                                  ;
  2921                                  ;	to handle those "phantom" interrupts, the main stack code will check
  2922                                  ;	the own firstflag, and if it is not "first" (which means the forward
  2923                                  ;	pointer points to the legal shared interrupt handler), then pass the
  2924                                  ;	control. if it is the first, then the following action should be
  2925                                  ;	taken. we don't have to implement skack logic in this case.
  2926                                  ;
  2927                                  ;	to implement this logic, we rather choose a simple method.
  2928                                  ;	if ont of the above "firstflag" conditions is met, we are not
  2929                                  ;	going to hook this interrupt vector. the reason is if the original
  2930                                  ;	vector points to "iret" and do nothing, we don't need
  2931                                  ;	to implement the stack logic for it. this will simplify implementation
  2932                                  ;	while maintaining compatibility with the old version of dos.
  2933                                  ;	this implies that in the main stack code, there might be a stack code
  2934                                  ;	that will never be used, a dead code.
  2935                                  ;
  2936                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
  2937                                  
  2938                                  stackinit:
  2939                                  	; 01/06/2019 - Retro DOS v4.0
  2940                                  	; SYSINIT:13BCh (MSDOS 6.21, MSDOS.SYS)
  2941                                  
  2942 00000844 50                      	push	ax
  2943 00000845 1E                      	push	ds
  2944 00000846 06                      	push	es
  2945 00000847 53                      	push	bx
  2946 00000848 51                      	push	cx
  2947 00000849 52                      	push	dx
  2948 0000084A 57                      	push	di
  2949 0000084B 56                      	push	si
  2950 0000084C 55                      	push	bp
  2951                                  
  2952                                  ;currently es -> stack code area
  2953                                  
  2954                                  	;mov	ax,[STACK_COUNT]		;defined in cs
  2955                                  	;mov	[es:StackCount],ax		;defined in stack code area
  2956                                  	; 06/06/2019
  2957 0000084D 8B0E[7602]              	mov	cx,[STACK_COUNT]
  2958 00000851 26890E[0200]            	mov	[es:StackCount],cx
  2959                                  
  2960                                  	;mov	ax,[STACK_SIZE]			;in cs
  2961                                  	;mov	[es:StackSize],ax
  2962                                  	; 06/06/2019
  2963 00000856 8B3E[7802]              	mov	di,[STACK_SIZE]
  2964 0000085A 26893E[0600]            	mov	[es:StackSize],di  ; *#*
  2965                                  
  2966                                  	;mov	ax,[STACK_ADDR]			; offset
  2967                                  	;mov	[es:Stacks],ax
  2968                                  	; 06/06/2019
  2969 0000085F 8B2E[7A02]              	mov	bp,[STACK_ADDR]			; offset
  2970 00000863 26892E[0800]            	mov	[es:Stacks],bp
  2971                                  
  2972 00000868 A1[7C02]                	mov	ax,[STACK_ADDR+2]		; segment
  2973 0000086B 26A3[0A00]              	mov	[es:Stacks+2],ax
  2974                                  
  2975                                  ; initialize the data fields with the parameters
  2976                                  
  2977                                  ; "firstentry" will always be at stacks
  2978                                  
  2979                                  	;mov	bp,[es:Stacks]			; get offset of stack
  2980 0000086F 26892E[0C00]            	mov	[es:FirstEntry],bp
  2981                                  
  2982                                  ; the stacks will always immediately follow the table entries
  2983                                  
  2984 00000874 B80800                  	mov	ax,EntrySize ; 8
  2985                                  	;mov	cx,[es:StackCount]
  2986 00000877 F7E1                    	mul	cx
  2987 00000879 01E8                    	add	ax,bp
  2988                                  
  2989 0000087B 26A3[0400]              	mov	[es:StackAt],ax	 ; *#*
  2990 0000087F 89C3                    	mov	bx,ax
  2991 00000881 83EB02                  	sub	bx,2
  2992                                  
  2993                                  ; zero the entire stack area to start with
  2994                                  
  2995                                  	;mov	di,[es:StackAt]
  2996                                  	;mov	ax,[es:StackSize]
  2997                                  	; 06/06/2019
  2998 00000884 97                      	xchg	ax,di ; *#*
  2999                                  
  3000 00000885 F7E1                    	mul	cx
  3001 00000887 89C1                    	mov	cx,ax
  3002 00000889 31C0                    	xor	ax,ax
  3003                                  
  3004 0000088B 06                      	push	es
  3005 0000088C 1F                      	pop	ds				; ds = relocated stack code seg.
  3006                                  
  3007                                  ;now, ds -> stack code area
  3008                                  
  3009 0000088D 8E06[0A00]              	mov	es,[Stacks+2]			; get segment of stack area.
  3010 00000891 FC                      	cld
  3011 00000892 F3AA                    	rep	stosb
  3012                                  
  3013 00000894 8B0E[0200]              	mov	cx,[StackCount]
  3014                                  
  3015                                  ; loop for "count" times, building a table entry
  3016                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
  3017                                  ;  cx = number of entries
  3018                                  ;  es:bp => base of stacks - 2
  3019                                  ;  es:bx => first table entry
  3020                                  
  3021                                  buildloop:
  3022                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
  3023 00000898 26C6460000              	mov	byte [es:bp],free
  3024 0000089D 26884601                	mov	[es:bp+intlevel],al	; ax = 0
  3025 000008A1 26894602                	mov	[es:bp+savedsp],ax
  3026 000008A5 26894604                	mov	[es:bp+savedss],ax
  3027 000008A9 031E[0600]              	add	bx,[StackSize]
  3028 000008AD 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
  3029 000008B1 26892F                  	mov	[es:bx],bp
  3030 000008B4 83C508                  	add	bp,EntrySize ; 8
  3031                                  
  3032 000008B7 E2DF                    	loop	buildloop
  3033                                  
  3034 000008B9 83ED08                  	sub	bp,EntrySize ; 8
  3035 000008BC 892E[0E00]              	mov	[LastEntry],bp
  3036 000008C0 892E[1000]              	mov	[NextEntry],bp
  3037                                  
  3038 000008C4 1E                      	push	ds
  3039 000008C5 B800F0                  	mov	ax,0F000h		; look at the model byte
  3040 000008C8 8ED8                    	mov	ds,ax
  3041 000008CA 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
  3042 000008CF 1F                      	pop	ds
  3043 000008D0 7504                    	jne	short skip_disablenmis
  3044                                  
  3045 000008D2 B007                    	mov	al,07h			; disable convertible nmis
  3046 000008D4 E672                    	out	72h,al
  3047                                  
  3048                                  skip_disablenmis:
  3049 000008D6 31C0                    	xor	ax,ax
  3050 000008D8 8EC0                    	mov	es,ax			;es - segid of vector table at 0
  3051                                  					;ds - relocated stack code segment
  3052 000008DA FA                      	cli
  3053                                  
  3054                                  	; 01/06/2019 - Retro DOS v4.0
  3055                                  	; SYSINIT:1462h (MSDOS 6.21, MSDOS.SYS)
  3056                                  
  3057                                  	;irp	aa,<02,08,09,70>
  3058                                  	;
  3059                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
  3060                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
  3061                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
  3062                                  	;mov	dx,offset int&aa	;pass where new handler is
  3063                                  	;call	new_init_loop		;adjust the vector to new handler,
  3064                                  	;				;saving pointer to original owner
  3065                                  	;endm
  3066                                  
  3067                                  stkinit_02:
  3068 000008DB BE0800                  	mov	si,02h*4 ; 8
  3069 000008DE BFD706                  	mov	di,INT19OLD02
  3070 000008E1 BB[1200]                	mov	bx,old02
  3071 000008E4 BA[1600]                	mov	dx,int02
  3072 000008E7 E84901                  	call	new_init_loop
  3073                                  stkinit_08:
  3074 000008EA BE2000                  	mov	si,08h*4 ; 32
  3075 000008ED BFDC06                  	mov	di,INT19OLD08
  3076 000008F0 BB[3800]                	mov	bx,old08
  3077 000008F3 BA[3C00]                	mov	dx,int08
  3078 000008F6 E83A01                  	call	new_init_loop
  3079                                  stkinit_09:
  3080 000008F9 BE2400                  	mov	si,09h*4 ; 36
  3081 000008FC BFE106                  	mov	di,INT19OLD09
  3082 000008FF BB[4100]                	mov	bx,old09
  3083 00000902 BA[4500]                	mov	dx,int09
  3084 00000905 E82B01                  	call	new_init_loop
  3085                                  stkinit_70:
  3086 00000908 BEC001                  	mov	si,70h*4 ; 448
  3087 0000090B BFFF06                  	mov	di,INT19OLD70
  3088 0000090E BB[4E00]                	mov	bx,old70
  3089 00000911 BA[5200]                	mov	dx,int70
  3090 00000914 E81C01                  	call	new_init_loop
  3091                                  
  3092                                  	; 01/06/2019
  3093                                  	; SYSINIT:149Eh (MSDOS 6.21, MSDOS.SYS)
  3094                                  
  3095                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
  3096                                  	;
  3097                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
  3098                                  	;push	ds			;save relocated stack code segment
  3099                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
  3100                                  	;push	ds
  3101                                  	;pop	dx			;dx = segment value
  3102                                  	;	
  3103                                  	;cmp	dx,0
  3104                                  	;jz	int&aa&_first
  3105                                  	;
  3106                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
  3107                                  	;jz	int&aa&_first
  3108                                  	;
  3109                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
  3110                                  	;jz	int&aa&_not_first
  3111                                  	;
  3112                                  	;cmp	dx,0f000h		;rom bios segment
  3113                                  	;jnz	int&aa&_not_first
  3114                                  	;
  3115                                  	;push	es
  3116                                  	;push	dx
  3117                                  	;mov	dx,0f000h
  3118                                  	;mov	es,dx
  3119                                  	;cmp	bx,word ptr es:0ff01h
  3120                                         	;pop	dx
  3121                                  	;pop	es
  3122                                  	;jz	int&aa&_first
  3123                                  	;
  3124                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
  3125                                  	;pop	ds
  3126                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
  3127                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
  3128                                  	;mov	dx, offset int&aa	;pass where new handler is
  3129                                  	;call	new_init_loop		;adjust the vector to new handler, saving
  3130                                  	;				;pointer to original owner.
  3131                                  	;jmp	short int&aa&_end
  3132                                  ;int&aa&_first:				;the first. don't have to hook stack code.
  3133                                  	;pop	ds
  3134                                  ;int&aa&_end:
  3135                                  	;
  3136                                  	;endm
  3137                                  
  3138                                  stkinit_0A:
  3139 00000917 BE2800                  	mov	si,0Ah*4 ; 40
  3140                                  	
  3141                                  	;push	ds
  3142                                  	;
  3143                                  	;lds	bx,[es:si]
  3144                                  	;push	ds
  3145                                  	;pop	dx
  3146                                  	;	
  3147                                  	;cmp	dx,0
  3148                                  	;je	short int_0A_first
  3149                                  	;
  3150                                  	;cmp	byte [bx],0CFh
  3151                                  	;je	short int_0A_first
  3152                                  	;
  3153                                  	;cmp	word [bx+6],424Bh
  3154                                  	;je	short int_0A_not_first
  3155                                  	;
  3156                                  	;cmp	dx,0F000h
  3157                                  	;jne	short int_0A_not_first
  3158                                  	
  3159                                  	;push	es
  3160                                  	;;push	dx
  3161                                  	;;mov	dx,0F000h
  3162                                  	;mov	es,dx
  3163                                  	;cmp	bx,[es:0FF01h]
  3164                                         	;;pop	dx
  3165                                  	;pop	es
  3166                                  	;je	short int_0A_first
  3167                                  
  3168 0000091A E81000                  	call	int_xx_first_check ; 27/03/2019 -  Retro DOS v4.0
  3169 0000091D 7339                    	jnc	short int_0A_first
  3170                                  	
  3171                                  int_0A_not_first:
  3172                                  	;pop	ds
  3173 0000091F BFE606                  	mov	di,INT19OLD0A
  3174 00000922 BB[5900]                	mov	bx,old0A
  3175 00000925 BA[5700]                	mov	dx,int0A
  3176 00000928 E80801                  	call	new_init_loop
  3177                                  	
  3178 0000092B EB2B                    	jmp	short int_0A_end
  3179                                  
  3180                                  ; -----------------------------------
  3181                                  	; 27/03/2019 - Retro DOS v4.0
  3182                                  int_xx_first_check:
  3183 0000092D 1E                      	push	ds
  3184 0000092E 26C51C                  	lds	bx,[es:si]
  3185 00000931 1E                      	push	ds
  3186 00000932 5A                      	pop	dx
  3187                                  		
  3188 00000933 83FA00                  	cmp	dx,0
  3189 00000936 741E                    	je	short int_xx_first
  3190                                  	
  3191 00000938 803FCF                  	cmp	byte [bx],0CFh
  3192 0000093B 7419                    	je	short int_xx_first
  3193                                  	
  3194 0000093D 817F064B42              	cmp	word [bx+6],424Bh
  3195 00000942 7411                    	je	short int_xx_not_first
  3196                                  	
  3197 00000944 81FA00F0                	cmp	dx,0F000h
  3198 00000948 750B                    	jne	short int_xx_not_first
  3199                                  
  3200 0000094A 06                      	push	es
  3201                                  	;push	dx
  3202                                  	;mov	dx,0F000h
  3203 0000094B 8EC2                    	mov	es,dx
  3204 0000094D 263B1E01FF              	cmp	bx,[es:0FF01h]
  3205                                         	;pop	dx
  3206 00000952 07                      	pop	es
  3207 00000953 7401                    	je	short int_xx_first
  3208                                  
  3209                                  int_xx_not_first:
  3210 00000955 F9                      	stc
  3211                                  int_xx_first:
  3212 00000956 1F                      	pop	ds
  3213 00000957 C3                      	retn
  3214                                  ; -----------------------------------
  3215                                  
  3216                                  int_0A_first:
  3217                                  	;pop	ds
  3218                                  int_0A_end:
  3219                                  
  3220                                  stkinit_0B:
  3221 00000958 BE2C00                  	mov	si,0Bh*4 ; 44
  3222                                  	
  3223 0000095B E8CFFF                  	call	int_xx_first_check ; 27/03/2019 -  Retro DOS v4.0
  3224 0000095E 730C                    	jnc	short int_0B_end ; int_0B_first
  3225                                  	
  3226                                  int_0B_not_first:
  3227 00000960 BFEB06                  	mov	di,INT19OLD0B
  3228 00000963 BB[7100]                	mov	bx,old0B
  3229 00000966 BA[6F00]                	mov	dx,int0B
  3230 00000969 E8C700                  	call	new_init_loop
  3231                                  int_0B_end:
  3232                                  
  3233                                  stkinit_0C:
  3234 0000096C BE3000                  	mov	si,0Ch*4 ; 48
  3235                                  	
  3236 0000096F E8BBFF                  	call	int_xx_first_check
  3237 00000972 730C                    	jnc	short int_0C_end ; int_0C_first ; 01/06/2019
  3238                                  	
  3239                                  int_0C_not_first:
  3240 00000974 BFF006                  	mov	di,INT19OLD0C
  3241 00000977 BB[8900]                	mov	bx,old0C
  3242 0000097A BA[8700]                	mov	dx,int0C
  3243 0000097D E8B300                  	call	new_init_loop
  3244                                  int_0C_end:
  3245                                  
  3246                                  stkinit_0D:
  3247 00000980 BE3400                  	mov	si,0Dh*4 ; 52
  3248                                  	
  3249 00000983 E8A7FF                  	call	int_xx_first_check
  3250 00000986 730C                    	jnc	short int_0D_end ; int_0D_first
  3251                                  	
  3252                                  int_0D_not_first:
  3253 00000988 BFF506                  	mov	di,INT19OLD0D
  3254 0000098B BB[A100]                	mov	bx,old0D
  3255 0000098E BA[9F00]                	mov	dx,int0D
  3256 00000991 E89F00                  	call	new_init_loop
  3257                                  int_0D_end:
  3258                                  
  3259                                  stkinit_0E:
  3260 00000994 BE3800                  	mov	si,0Eh*4 ; 56
  3261                                  	
  3262 00000997 E893FF                  	call	int_xx_first_check
  3263 0000099A 730C                    	jnc	short int_0E_end ; int_0E_first
  3264                                  	
  3265                                  int_0E_not_first:
  3266 0000099C BFFA06                  	mov	di,INT19OLD0E
  3267 0000099F BB[B900]                	mov	bx,old0E
  3268 000009A2 BA[B700]                	mov	dx,int0E
  3269 000009A5 E88B00                  	call	new_init_loop
  3270                                  int_0E_end:
  3271                                  
  3272                                  stkinit_72:
  3273 000009A8 BEC801                  	mov	si,72h*4 ; 456
  3274                                  	
  3275 000009AB E87FFF                  	call	int_xx_first_check
  3276 000009AE 730C                    	jnc	short int_72_end ; int_72_first
  3277                                  	
  3278                                  int_72_not_first:
  3279 000009B0 BF0407                  	mov	di,INT19OLD72
  3280 000009B3 BB[D100]                	mov	bx,old72
  3281 000009B6 BA[CF00]                	mov	dx,int72
  3282 000009B9 E87700                  	call	new_init_loop
  3283                                  int_72_end:
  3284                                  
  3285                                  stkinit_73:
  3286 000009BC BECC01                  	mov	si,73h*4 ; 460
  3287                                  	
  3288 000009BF E86BFF                  	call	int_xx_first_check
  3289 000009C2 730C                    	jnc	short int_73_end ; int_73_first
  3290                                  	
  3291                                  int_73_not_first:
  3292 000009C4 BF0907                  	mov	di,INT19OLD73
  3293 000009C7 BB[E900]                	mov	bx,old73
  3294 000009CA BA[E700]                	mov	dx,int73
  3295 000009CD E86300                  	call	new_init_loop
  3296                                  int_73_end:
  3297                                  
  3298                                  stkinit_74:
  3299 000009D0 BED001                  	mov	si,74h*4 ; 464
  3300                                  	
  3301 000009D3 E857FF                  	call	int_xx_first_check
  3302 000009D6 730C                    	jnc	short int_74_end ; int_74_first
  3303                                  	
  3304                                  int_74_not_first:
  3305 000009D8 BF0E07                  	mov	di,INT19OLD74
  3306 000009DB BB[0101]                	mov	bx,old74
  3307 000009DE BA[FF00]                	mov	dx,int74
  3308 000009E1 E84F00                  	call	new_init_loop
  3309                                  int_74_end:
  3310                                  
  3311                                  stkinit_76:
  3312 000009E4 BED801                  	mov	si,76h*4 ; 472
  3313                                  	
  3314 000009E7 E843FF                  	call	int_xx_first_check
  3315 000009EA 730C                    	jnc	short int_76_end ; int_76_first
  3316                                  	
  3317                                  int_76_not_first:
  3318 000009EC BF1307                  	mov	di,INT19OLD76
  3319 000009EF BB[1901]                	mov	bx,old76
  3320 000009F2 BA[1701]                	mov	dx,int76
  3321 000009F5 E83B00                  	call	new_init_loop
  3322                                  int_76_end:
  3323                                  
  3324                                  stkinit_77:
  3325 000009F8 BEDC01                  	mov	si,77h*4 ; 476
  3326                                  	
  3327 000009FB E82FFF                  	call	int_xx_first_check
  3328 000009FE 730C                    	jnc	short int_77_end ; int_77_first
  3329                                  	
  3330                                  int_77_not_first:
  3331 00000A00 BF1807                  	mov	di,INT19OLD77
  3332 00000A03 BB[3101]                	mov	bx,old77
  3333 00000A06 BA[2F01]                	mov	dx,int77
  3334 00000A09 E82700                  	call	new_init_loop
  3335                                  
  3336                                  int_77_end:
  3337 00000A0C 1E                      	push	ds
  3338 00000A0D B800F0                  	mov	ax,0F000h		;loook at the model byte
  3339 00000A10 8ED8                    	mov	ds,ax
  3340 00000A12 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;pc convertible?
  3341 00000A17 1F                      	pop	ds
  3342 00000A18 7504                    	jne	short skip_enablenmis
  3343                                  
  3344 00000A1A B027                    	mov	al,27h			; enable convertible nmis
  3345 00000A1C E672                    	out	72h,al
  3346                                  
  3347                                  skip_enablenmis:
  3348 00000A1E FB                      	sti
  3349                                  	;mov	ax,Bios_Data ; 70h
  3350 00000A1F B87000                  	mov	ax,KERNEL_SEGMENT ; 70h
  3351 00000A22 8ED8                    	mov	ds,ax
  3352                                  
  3353                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
  3354                                  
  3355 00000A24 C606D50601              	mov	byte [INT19SEM],1	; indicate that int 19
  3356                                  					; initialization is complete
  3357                                  
  3358 00000A29 5D                      	pop	bp			; restore all
  3359 00000A2A 5E                      	pop	si
  3360 00000A2B 5F                      	pop	di
  3361 00000A2C 5A                      	pop	dx
  3362 00000A2D 59                      	pop	cx
  3363 00000A2E 5B                      	pop	bx
  3364 00000A2F 07                      	pop	es
  3365 00000A30 1F                      	pop	ds
  3366 00000A31 58                      	pop	ax
  3367 00000A32 C3                      	retn
  3368                                  
  3369                                  ; 29/06/2019 - Retro DOS v3.1
  3370                                  								
  3371                                  ; ----------------------------------------------------------------------
  3372                                  ; 27/03/2019 - Retro DOS v4.0
  3373                                  
  3374                                  new_init_loop:
  3375                                  
  3376                                  ;input: si=ofset into vector table of the particular int vector being adjusted
  3377                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
  3378                                  ;	dx=ds:offset of intxx, the new interrupt handler
  3379                                  ;	di=offset value of int19old&aa variable in bios.
  3380                                  ;	es=zero, segid of vector table
  3381                                  ;	ds=relocated stack code segment
  3382                                  
  3383 00000A33 268B04                  	mov	ax,[es:si]		;remember offset in vector
  3384 00000A36 8907                    	mov	[bx],ax			; to original owner in ds
  3385 00000A38 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
  3386 00000A3C 894702                  	mov	[bx+2],ax		; to original owner in ds
  3387                                  
  3388 00000A3F 1E                      	push	ds
  3389                                  	;mov	ax,Bios_Data ; 70h
  3390 00000A40 B87000                  	mov	ax,KERNEL_SEGMENT ; 70h
  3391 00000A43 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
  3392 00000A45 268B04                  	mov	ax,[es:si]		;int 19 handler
  3393 00000A48 8905                    	mov	[di],ax
  3394 00000A4A 268B4402                	mov	ax,[es:si+2]
  3395 00000A4E 894502                  	mov	[di+2],ax
  3396 00000A51 1F                      	pop	ds
  3397                                  
  3398 00000A52 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
  3399 00000A55 268C5C02                	mov	[es:si+2],ds
  3400 00000A59 C3                      	retn
  3401                                  
  3402                                  ; End of STACK initialization routine
  3403                                  ; ----------------------------------------------------------------------
  3404                                  
  3405                                  ;align 16 ; 19/06/2018
  3406                                  
  3407                                  ; ----------------------------------------------------------------------
  3408                                  ; SYSCONF.ASM - MSDOS 3.3 - 24/07/1987
  3409                                  ; ----------------------------------------------------------------------
  3410                                  ; 10/06/2018 - Retro DOS v3.0
  3411                                  ; 25/03/2018 - Retro DOS v2.0
  3412                                  
  3413                                  ;	IF	STACKSW
  3414                                  ;;
  3415                                  ;; Internal Stack Parameters
  3416                                  ;EntrySize		equ	8
  3417                                  ;
  3418                                  ;MinCount		equ	8
  3419                                  ;DefaultCount		equ	9
  3420                                  ;MaxCount		equ	64
  3421                                  ;
  3422                                  ;MinSize 		equ	32
  3423                                  ;DefaultSize		equ	128
  3424                                  ;MaxSize 		equ	512
  3425                                  ;
  3426                                  ;	extrn  stack_count:word
  3427                                  ;	extrn  stack_size:word
  3428                                  ;	extrn  stack_addr:dword
  3429                                  ;
  3430                                  ;	ENDIF
  3431                                  
  3432                                  DOCONF: 		;Take care of Config.sys file.
  3433                                  	
  3434                                  	; 10/06/2018 - Retro DOS v3.0	
  3435                                  	
  3436                                  	; 17/07/2019 - Retro DOS v3.2
  3437                                  	; DS = CS
  3438                                  
  3439                                  	;PUSH    CS
  3440                                          ;POP     DS
  3441                                  
  3442                                  	; 13/04/2018 - Retro DOS v2.0
  3443                                  	
  3444 00000A5A B80037                  	MOV     AX,(CHAR_OPER*256)	; GET SWITCH CHARACTER
  3445 00000A5D CD21                    	INT     21H
  3446 00000A5F 8816[9002]              	MOV     [COMMAND_LINE+1],DL
  3447                                  
  3448 00000A63 BA[1C15]                        MOV     DX,CONFIG		; NOW POINTING TO FILE DESCRIPTION
  3449 00000A66 B8003D                          MOV     AX,(OPEN*256)		; OPEN FILE "CONFIG.SYS"
  3450 00000A69 F9                              STC				; IN CASE OF INT 24
  3451 00000A6A CD21                            INT     21H                     ; FUNCTION REQUEST
  3452                                          ;JC     SHORT ENDCONF
  3453                                          ;JMP    NOPROB			; PROBLEM WITH OPEN
  3454 00000A6C 730A                    	JNC	short NOPROB
  3455                                  
  3456                                  ENDCONF:
  3457 00000A6E C3                      		RETN
  3458                                  
  3459                                  BADOP:  
  3460 00000A6F BA[B416]                	MOV     DX,BADOPM		; WANT TO PRINT COMMAND ERROR
  3461 00000A72 E8270A                          CALL    PRINT
  3462 00000A75 E98500                          JMP     COFF
  3463                                  
  3464                                  NOPROB:
  3465                                  					; GET FILE SIZE (NOTE < 64K!!)
  3466 00000A78 89C3                    	MOV     BX,AX
  3467 00000A7A 31C9                            XOR     CX,CX
  3468 00000A7C 31D2                            XOR     DX,DX
  3469 00000A7E B80242                          MOV     AX,(LSEEK*256)+2
  3470 00000A81 CD21                            INT     21H
  3471 00000A83 A3[C102]                        MOV     [COUNT],AX
  3472 00000A86 31D2                            XOR     DX,DX
  3473 00000A88 B80042                          MOV     AX,(LSEEK*256)		; Reset pointer to beginning of file
  3474 00000A8B CD21                            INT     21H
  3475                                          
  3476 00000A8D 8CCA                    	MOV     DX,CS
  3477 00000A8F A1[C102]                        MOV     AX,[COUNT]
  3478 00000A92 E8A3FD                          call	ParaRound
  3479 00000A95 29C2                            SUB     DX,AX
  3480 00000A97 83EA11                          SUB     DX,11H                  ; ROOM FOR HEADER
  3481 00000A9A 8916[8702]              	MOV	[CONFBOT],DX		; Config starts here
  3482 00000A9E E8CFFA                  	CALL	TEMPCDS 		; Finally get CDS to "safe" location
  3483                                  
  3484 00000AA1 2E8B16[8702]                    MOV	DX,[CS:CONFBOT] ; 19/06/2018
  3485 00000AA6 8EDA                            MOV     DS,DX
  3486 00000AA8 8EC2                            MOV     ES,DX
  3487 00000AAA 31D2                            XOR     DX,DX
  3488 00000AAC 2E8B0E[C102]            	MOV	CX,[CS:COUNT] ; 19/06/2018
  3489 00000AB1 B43F                            MOV     AH,READ
  3490 00000AB3 F9                              STC                             ; IN CASE OF INT 24
  3491 00000AB4 CD21                            INT     21H                     ; Function request
  3492 00000AB6 9C                              PUSHF
  3493                                  ;
  3494                                  ; Find the EOF mark in the file. If present, then trim length.
  3495                                  ;	
  3496 00000AB7 50                      	PUSH	AX
  3497 00000AB8 57                      	PUSH	DI
  3498 00000AB9 51                      	PUSH	CX
  3499 00000ABA B01A                    	MOV	AL,1Ah			; eof mark
  3500 00000ABC 89D7                    	MOV	DI,DX			; point ro buffer
  3501 00000ABE E305                    	JCXZ	PUTEOL			; no chars
  3502 00000AC0 F2AE                    	REPNZ	SCASB			; find end
  3503 00000AC2 7501                    	JNZ	SHORT PUTEOL		; none found and count exahusted
  3504                                  ;
  3505                                  ; We found a 1A. Back up
  3506                                  ;
  3507 00000AC4 4F                      	DEC	DI			; backup past 1A
  3508                                  ;
  3509                                  ;  Just for the halibut, stick in an extra EOL
  3510                                  ;
  3511                                  PUTEOL:
  3512 00000AC5 B00D                    	MOV	AL,13
  3513 00000AC7 AA                      	STOSB				; CR
  3514 00000AC8 B00A                    	MOV	AL,10
  3515 00000ACA AA                      	STOSB				; LF
  3516 00000ACB 29D7                    	SUB	DI,DX			; difference moved
  3517                                  	; 19/06/2018
  3518 00000ACD 2E893E[C102]            	MOV	[CS:COUNT],DI		; new count
  3519                                  ;
  3520                                  ; Restore registers
  3521                                  ;
  3522 00000AD2 59                      	POP	CX
  3523 00000AD3 5F                      	POP	DI
  3524 00000AD4 58                      	POP	AX
  3525                                  
  3526 00000AD5 0E                              PUSH	CS
  3527 00000AD6 1F                              POP	DS
  3528                                  
  3529 00000AD7 50                              PUSH    AX
  3530 00000AD8 B43E                            MOV     AH,CLOSE
  3531 00000ADA CD21                            INT     21H
  3532 00000ADC 58                              POP     AX
  3533 00000ADD 9D                              POPF
  3534 00000ADE 7204                            JC      SHORT CONFERR		; IF NOT WE'VE GOT A PROBLEM
  3535 00000AE0 39C1                            CMP     CX,AX
  3536 00000AE2 7407                            JZ      SHORT GETCOM		; COULDN'T READ THE FILE
  3537                                  CONFERR:
  3538 00000AE4 BA[1C15]                        MOV     DX,CONFIG		; WANT TO PRINT CONFIG ERROR
  3539 00000AE7 E89409                          CALL    BADFIL
  3540                                  ENDCONV:
  3541                                  	;JMP	ENDCONF
  3542 00000AEA C3                      	RETN
  3543                                  
  3544                                  GETCOM:
  3545 00000AEB E84006                          CALL    ORGANIZE                ; ORGANIZE THE FILE
  3546 00000AEE E88404                          CALL    GETCHR
  3547                                  
  3548 00000AF1 72F7                    CONFLP: JC      SHORT ENDCONV
  3549 00000AF3 88C4                            MOV     AH,AL
  3550 00000AF5 E87D04                          CALL    GETCHR
  3551 00000AF8 730A                    	JNC	SHORT TRYB
  3552 00000AFA E972FF                  	JMP	BADOP
  3553                                  
  3554                                  COFF:   
  3555 00000AFD 0E                      	PUSH    CS
  3556 00000AFE 1F                              POP     DS
  3557 00000AFF E8DF06                          CALL    NEWLINE
  3558 00000B02 EBED                            JMP     SHORT CONFLP
  3559                                  
  3560                                  ;------------------------------------------------------------------------------
  3561                                  ; Buffer command
  3562                                  ;------------------------------------------------------------------------------
  3563                                  TRYB:	
  3564 00000B04 80FC42                  	CMP     AH,'B'                  ; BUFFER COMMAND?
  3565 00000B07 7512                            JNZ     SHORT TRYC
  3566 00000B09 E88807                          CALL    GETNUM
  3567 00000B0C 7405                            JZ      SHORT TRYBBAD
  3568 00000B0E 83F864                          CMP     AX,100
  3569 00000B11 7203                            JB	SHORT SAVEBUF
  3570                                  TRYBBAD:
  3571 00000B13 E959FF                  	JMP	BADOP
  3572                                  SAVEBUF:
  3573 00000B16 A2[8102]                        MOV     [BUFFERS],AL
  3574                                  COFFJ1:
  3575 00000B19 EBE2                            JMP     SHORT COFF
  3576                                  
  3577                                  ;------------------------------------------------------------------------------
  3578                                  ; Break command
  3579                                  ;------------------------------------------------------------------------------
  3580                                  TRYC:   
  3581 00000B1B 80FC43                  	CMP     AH,'C'
  3582                                          ;JZ	SHORT GOTC
  3583                                          ;JMP	SHORT TRYD
  3584 00000B1E 7527                    	JNZ	SHORT TRYD
  3585                                  GOTC:
  3586 00000B20 3C4F                            CMP     AL,'O'                  ; FIRST LETTER OF "ON" OR "OFF"
  3587 00000B22 7520                            JNZ     SHORT TRYCBAD
  3588 00000B24 E84E04                          CALL    GETCHR
  3589 00000B27 721B                            JC      SHORT TRYCBAD
  3590 00000B29 3C4E                            CMP     AL,'N'                  ; SECOND LETTER OF "ON"
  3591 00000B2B 750A                            JNZ     SHORT TRYCOFF
  3592 00000B2D B433                            MOV     AH,SET_CTRL_C_TRAPPING  ; TURN ON CONTROL-C CHECK
  3593 00000B2F B001                            MOV     AL,1
  3594 00000B31 88C2                            MOV     DL,AL
  3595 00000B33 CD21                            INT     21H
  3596                                  COFFJ2:
  3597 00000B35 EBC6                    	JMP	SHORT COFF
  3598                                  TRYCOFF: 
  3599 00000B37 3C46                    	CMP	AL,'F'
  3600 00000B39 7509                    	JNZ	SHORT TRYCBAD		; Check for "OFF"
  3601 00000B3B E83704                  	CALL	GETCHR
  3602 00000B3E 7204                    	JC	SHORT TRYCBAD
  3603 00000B40 3C46                    	CMP	AL,'F'
  3604 00000B42 74F1                    	JZ	SHORT COFFJ2
  3605                                  TRYCBAD:
  3606 00000B44 E928FF                  	JMP	BADOP
  3607                                  
  3608                                  ;------------------------------------------------------------------------------
  3609                                  ; Device command
  3610                                  ;------------------------------------------------------------------------------
  3611                                  
  3612                                  ; 10/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
  3613                                  
  3614                                  TRYD:   
  3615 00000B47 80FC44                  	CMP     AH,'D'
  3616 00000B4A 7403                            JZ      SHORT GOTD
  3617 00000B4C E9E501                          JMP     TRYQ
  3618                                  GOTD:   
  3619 00000B4F 8CCB                    	MOV     BX,CS
  3620 00000B51 8EDB                            MOV     DS,BX
  3621                                  
  3622 00000B53 8936[E202]                      MOV     [BPB_ADDR],SI
  3623 00000B57 8C06[E402]                      MOV     [BPB_ADDR+2],ES
  3624                                  
  3625 00000B5B E8CF06                          CALL    ROUND
  3626                                  
  3627 00000B5E 31C0                    	XOR     AX,AX
  3628 00000B60 A3[6802]                        MOV     [ENTRY_POINT],AX
  3629 00000B63 A1[CA02]                        MOV     AX,[MEMHI]
  3630 00000B66 A3[6A02]                        MOV     [ENTRY_POINT+2],AX	; SET ENTRY POINT
  3631                                  
  3632                                  	; 01/05/2018 (NOEXEC = FALSE)
  3633                                          ;IF     NOT NOEXEC
  3634 00000B69 A3[CC02]                        MOV	[LDOFF],AX		; SET LOAD OFFSET
  3635                                          ;ENDIF
  3636                                  
  3637 00000B6C 06                              PUSH    ES
  3638 00000B6D 1F                              POP     DS
  3639 00000B6E 89F2                            MOV     DX,SI                   ; DS:DX POINTS TO FILE NAME
  3640                                  
  3641                                          ;IF	NOEXEC
  3642                                          ;LES	BX,[CS:MEMLO]
  3643                                          ;CALL	LDFIL			; LOAD IN THE DEVICE DRIVER
  3644                                          ;ELSE
  3645                                  
  3646                                  ; We are going to open the cdevice driver and size it as is done
  3647                                  ;  in LDFIL. The reason we must do this is that EXEC does NO checking
  3648                                  ;  for us. We must make sure there is room to load the device without
  3649                                  ;  trashing SYSINIT. This code is not
  3650                                  ;  perfect (for instance .EXE device drivers are possible) because
  3651                                  ;  it does its sizing based on the assumption that the file being loaded
  3652                                  ;  is a .COM file. It is close enough to correctness to be usable.
  3653                                  
  3654 00000B70 8EC0                    	MOV	ES,AX			;ES:0 is LOAD addr
  3655 00000B72 B8003D                  	MOV	AX,OPEN*256		;OPEN THE FILE
  3656 00000B75 F9                      	STC				;IN CASE OF INT 24
  3657 00000B76 CD21                    	INT	21H
  3658 00000B78 724A                    	JC	short BADLDRESET
  3659 00000B7A 89C3                    	MOV	BX,AX			;Handle in BX
  3660 00000B7C 52                      	PUSH	DX			; Save pointer to name
  3661 00000B7D 31C9                    	XOR	CX,CX
  3662 00000B7F 31D2                    	XOR	DX,DX
  3663 00000B81 B80242                  	MOV	AX,(LSEEK*256)+2
  3664 00000B84 F9                      	STC				;IN CASE OF INT 24
  3665 00000B85 CD21                    	INT	21H			; Get file size in DX:AX
  3666 00000B87 7308                    	JNC	short GO_AHEAD_LOAD
  3667 00000B89 B43E                    	MOV	AH,CLOSE		; Close file
  3668 00000B8B CD21                    	INT	21H
  3669 00000B8D 5A                      	POP	DX			; Clean stack
  3670 00000B8E F9                      	STC				; Close may clear carry
  3671 00000B8F EB33                    	JMP	SHORT BADLDRESET
  3672                                  
  3673                                  GO_AHEAD_LOAD:
  3674                                      ; Convert size in DX:AX to para in AX
  3675 00000B91 83C00F                  	ADD	AX,15			; Round up size for conversion to para
  3676 00000B94 83D200                  	ADC	DX,0
  3677 00000B97 B104                    	MOV	CL,4
  3678 00000B99 D3E8                    	SHR	AX,CL
  3679 00000B9B B10C                    	MOV	CL,12
  3680 00000B9D D3E2                    	SHL	DX,CL			; Low nibble of DX to high nibble
  3681 00000B9F 09D0                    	OR	AX,DX			; AX is now # of para for file
  3682                                  
  3683 00000BA1 8CC1                    	MOV	CX,ES			; CX:0 is xaddr
  3684 00000BA3 01C1                    	ADD	CX,AX			; New device will take up to here
  3685 00000BA5 7207                    	JC	short MEM_ERRJY		; WOW!!!!
  3686 00000BA7 2E3B0E[8902]            	CMP	CX,[CS:ALLOCLIM]
  3687 00000BAC 7203                    	JB	short OKLDX
  3688                                  MEM_ERRJY:
  3689 00000BAE E99E06                  	JMP	MEM_ERR
  3690                                  OKLDX:
  3691 00000BB1 5A                      	POP	DX			; Recover name pointer
  3692 00000BB2 B43E                    	MOV	AH,CLOSE		; Close file
  3693 00000BB4 CD21                    	INT	21H
  3694 00000BB6 8CCB                    	MOV	BX,CS
  3695 00000BB8 8EC3                            MOV	ES,BX
  3696 00000BBA BB[CA02]                        MOV	BX,PRMBLK		; ES:BX POINTS TO PARAMETERS
  3697 00000BBD B003                            MOV	AL,3
  3698 00000BBF B44B                            MOV	AH,EXEC
  3699 00000BC1 F9                              STC				; IN CASE OF INT 24
  3700 00000BC2 CD21                            INT	21H                     ; LOAD IN THE DEVICE DRIVER
  3701                                          ;ENDIF
  3702                                  
  3703                                  BADLDRESET:
  3704 00000BC4 1E                              PUSH    DS
  3705 00000BC5 07                              POP     ES                      ; ES:SI BACK TO CONFIG.SYS
  3706 00000BC6 0E                              PUSH    CS
  3707 00000BC7 1F                              POP     DS                      ; DS BACK TO SYSINIT
  3708 00000BC8 730F                            JNC     SHORT GOODLD
  3709                                  BADBRK: 
  3710 00000BCA 26803C0D                	cmp	BYTE [ES:SI], 13	; file name is CR?
  3711 00000BCE 7503                    	jne	SHORT BADBRK_1		;(entered "device=" without filename)
  3712 00000BD0 E99CFE                  	jmp	BADOP			;"Unrecognized command in CONFIG.SYS"
  3713                                  BADBRK_1:
  3714 00000BD3 E8AC08                  	CALL    BADLOAD
  3715 00000BD6 E924FF                          JMP     COFF
  3716                                  GOODLD: 
  3717 00000BD9 06                      	PUSH    ES                      ; INITIALIZE THE DEVICE
  3718 00000BDA 56                              PUSH    SI
  3719                                  RESTORE:
  3720 00000BDB 268A1C                  	MOV	BL,[ES:SI]		;   while ((c=*p) != 0)
  3721 00000BDE 08DB                    	OR	BL,BL
  3722 00000BE0 7403                    	JZ	SHORT GOT
  3723 00000BE2 46                      	INC	SI			;	p++;
  3724 00000BE3 EBF6                    	JMP	SHORT RESTORE
  3725                                  GOT:	
  3726 00000BE5 26C60420                	MOV	BYTE [ES:SI], ' '	;   *p = ' ';
  3727                                  
  3728 00000BE9 06                      	PUSH    ES
  3729 00000BEA 56                              PUSH    SI        
  3730 00000BEB 0E                      	PUSH    CS
  3731 00000BEC 07                              POP     ES
  3732                                  	; 31/07/2019
  3733 00000BED BB0600                          MOV     BX,SYSDEV.STRAT ; 6
  3734 00000BF0 E86706                          CALL    CALLDEV			;   CallDev (SDevStrat);
  3735 00000BF3 BB0800                          MOV     BX,SYSDEV.INT ; 8
  3736 00000BF6 E86106                          CALL    CALLDEV			;   CallDev (SDevInt);
  3737 00000BF9 5E                      	POP	SI
  3738 00000BFA 1F                      	POP	DS
  3739 00000BFB C60400                  	MOV	BYTE [SI],0		;   *p = 0;
  3740                                  		
  3741 00000BFE 0E                              PUSH    CS
  3742 00000BFF 1F                              POP     DS
  3743 00000C00 A1[E002]                	MOV     AX,[BREAK_ADDR+2]	; REMOVE THE INIT CODE
  3744 00000C03 3B06[7E02]                      CMP     AX,[MEMORY_SIZE]
  3745 00000C07 7204                            JB      SHORT BREAKOK
  3746 00000C09 5E                              POP     SI
  3747 00000C0A 07                              POP     ES
  3748 00000C0B EBBD                            JMP     SHORT BADBRK
  3749                                  BREAKOK:
  3750 00000C0D C516[6802]                      LDS     DX,[ENTRY_POINT]        ; SET DS:DX TO HEADER
  3751 00000C11 89D6                            MOV     SI,DX
  3752 00000C13 83C604                          ADD     SI,SYSDEV.ATT	; 4	; DS:SI POINTS TO ATTRIBUTES
  3753 00000C16 2EC43E[6402]                    LES     DI,[CS:DOSINFO]         ; ES:DI POINT TO DOS INFO
  3754 00000C1B 8B04                            MOV     AX,[SI]			; GET ATTRIBUTES
  3755 00000C1D A90080                          TEST    AX,DEVTYP               ; TEST IF BLOCK DEV
  3756 00000C20 7422                            JZ      SHORT ISBLOCK
  3757 00000C22 E8E705                  	CALL	SET_BREAK		; Go ahead and alloc mem for device
  3758 00000C25 7225                    	JC	SHORT ERASE_DEV
  3759 00000C27 A90100                          TEST    AX,ISCIN                ; IS IT A CONSOLE IN?
  3760 00000C2A 7408                            JZ      SHORT TRYCLK
  3761 00000C2C 2689550C                        MOV     [ES:DI+SYSI_CON],DX
  3762 00000C30 268C5D0E                        MOV     [ES:DI+SYSI_CON+2],DS
  3763                                  
  3764                                  TRYCLK: 
  3765 00000C34 A90800                  	TEST    AX,ISCLOCK              ; IS IT A CLOCK DEVICE?
  3766 00000C37 7408                            JZ      SHORT GOLINK
  3767 00000C39 26895508                        MOV     [ES:DI+SYSI_CLOCK],DX
  3768 00000C3D 268C5D0A                        MOV     [ES:DI+SYSI_CLOCK+2],DS
  3769                                  GOLINK: 
  3770 00000C41 E9C000                  	JMP	LINKIT
  3771                                  
  3772                                  ISBLOCK:
  3773 00000C44 2EA0[DD02]                      MOV     AL,[CS:UNITCOUNT]	; IF NO UNITS FOUND, ERASE THE DEVICE
  3774 00000C48 08C0                            OR      AL,AL
  3775 00000C4A 7506                            JNZ     SHORT PERDRV
  3776                                  ERASE_DEV:					
  3777 00000C4C B8FFFF                          MOV     AX,-1			; No call to SET_BREAK yet, so no alloc
  3778 00000C4F E9D700                  	JMP	ENDDEV
  3779                                  
  3780                                  PERDRV:
  3781 00000C52 98                              CBW
  3782 00000C53 89C1                            MOV     CX,AX
  3783 00000C55 88E6                            MOV     DH,AH
  3784 00000C57 268A5520                        MOV     DL,[ES:DI+SYSI_NUMIO]	; GET NUMBER OF DEVICES
  3785 00000C5B 88D4                    	MOV	AH,DL
  3786 00000C5D 00C4                    	ADD	AH,AL			; Check for too many devices
  3787 00000C5F 80FC1A                  	CMP	AH,26			; 'A' - 'Z' is 26 devices
  3788 00000C62 760A                    	JBE	SHORT OK_BLOCK
  3789 00000C64 0E                      	PUSH	CS
  3790 00000C65 1F                      	POP	DS
  3791 00000C66 BA[B917]                	MOV	DX,BADBLOCK
  3792 00000C69 E83008                  	CALL	PRINT
  3793 00000C6C EBDE                    	JMP	SHORT ERASE_DEV
  3794                                  
  3795                                  OK_BLOCK:
  3796 00000C6E E89B05                  	CALL	SET_BREAK		; Alloc the device
  3797 00000C71 26004520                	ADD	[ES:DI+SYSI_NUMIO],AL	; UPDATE THE AMOUNT
  3798 00000C75 2E0006[E602]            	ADD	[CS:DriveNumber],AL	; remember amount for next device
  3799 00000C7A 2EC51E[E202]                    LDS     BX,[CS:BPB_ADDR]        ; POINT TO BPB ARRAY
  3800                                  PERUNIT:
  3801 00000C7F 2EC42E[6402]                    LES     BP,[CS:DOSINFO]
  3802                                  	;LES	BP,[ES:BP+SYSI_DPB]	; GET FIRST DPB
  3803 00000C84 26C46E00                	les	bp,[es:bp] ; 05/07/2019
  3804                                  SCANDPB:
  3805 00000C88 26837E19FF              	CMP     WORD [ES:BP+DPB.NEXT_DPB],-1
  3806 00000C8D 7406                            JZ      SHORT FOUNDPB
  3807 00000C8F 26C46E19                        LES     BP,[ES:BP+DPB.NEXT_DPB]
  3808 00000C93 EBF3                            JMP     SHORT SCANDPB
  3809                                  FOUNDPB:
  3810 00000C95 2EA1[C802]                      MOV     AX,[CS:MEMLO]
  3811 00000C99 26894619                        MOV     [ES:BP+DPB.NEXT_DPB],AX
  3812 00000C9D 2EA1[CA02]                      MOV     AX,[CS:MEMHI]
  3813 00000CA1 2689461B                        MOV     [ES:BP+DPB.NEXT_DPB+2],AX
  3814 00000CA5 2EC42E[C802]                    LES     BP,[CS:MEMLO]
  3815 00000CAA 2E8306[C802]21                  ADD     WORD [CS:MEMLO],DPBSIZ
  3816 00000CB0 E87A05                  	CALL	ROUND			;Check for alloc error
  3817 00000CB3 26C74619FFFF                    MOV     WORD [ES:BP+DPB.NEXT_DPB],-1
  3818 00000CB9 26C64618FF                      MOV     BYTE [ES:BP+DPB.FIRST_ACCESS],-1
  3819                                  
  3820 00000CBE 8B37                            MOV     SI,[BX]                 ; DS:SI POINTS TO BPB
  3821 00000CC0 43                              INC     BX
  3822 00000CC1 43                              INC     BX                      ; POINT TO NEXT GUY
  3823                                        	;MOV	[ES:BP+DPB.DRIVE],DX
  3824 00000CC2 26895600                	mov	[es:bp],dx ; 05/07/2019
  3825 00000CC6 B453                            MOV     AH,SETDPB               ; HIDDEN SYSTEM CALL
  3826 00000CC8 CD21                            INT     21H
  3827 00000CCA 268B4602                        MOV     AX,[ES:BP+DPB.SECTOR_SIZE]
  3828 00000CCE 06                              PUSH    ES
  3829 00000CCF 2EC43E[6402]                    LES     DI,[CS:DOSINFO]		; ES:DI POINT TO DOS INFO
  3830 00000CD4 263B4510                        CMP     AX,[ES:DI+SYSI_MAXSEC]
  3831 00000CD8 07                              POP     ES
  3832 00000CD9 760E                            JBE     SHORT NOTMAX
  3833 00000CDB 5E                              POP     SI
  3834 00000CDC 07                              POP     ES
  3835 00000CDD BA[DB16]                        MOV     DX,BADSIZ_PRE
  3836 00000CE0 BB[D816]                        MOV     BX,BADSIZ_POST
  3837 00000CE3 E89F07                          CALL    PRNERR
  3838 00000CE6 E914FE                          JMP	COFF
  3839                                  
  3840                                  NOTMAX: 
  3841 00000CE9 1E                      	PUSH    DS
  3842 00000CEA 52                              PUSH    DX
  3843 00000CEB 2EC516[6802]                    LDS     DX,[CS:ENTRY_POINT]
  3844 00000CF0 26895613                        MOV     [ES:BP+DPB.DRIVER_ADDR],DX
  3845 00000CF4 268C5E15                        MOV     [ES:BP+DPB.DRIVER_ADDR+2],DS
  3846 00000CF8 5A                              POP     DX
  3847 00000CF9 1F                              POP     DS
  3848 00000CFA 42                              INC     DX
  3849 00000CFB FEC6                            INC     DH
  3850 00000CFD E280                            LOOP    PERUNIT
  3851 00000CFF 0E                      	PUSH	CS
  3852 00000D00 1F                      	POP	DS
  3853 00000D01 E86CF8                  	CALL	TEMPCDS 		; Set CDS for new drives
  3854                                  
  3855                                  LINKIT:
  3856 00000D04 2EC43E[6402]                    LES     DI,[CS:DOSINFO]         ; ES:DI = DOS TABLE
  3857 00000D09 268B4D22                        MOV     CX,[ES:DI+SYSI_DEV] 	; DX:CX = HEAD OF LIST
  3858 00000D0D 268B5524                        MOV     DX,[ES:DI+SYSI_DEV+2]
  3859                                  
  3860 00000D11 2EC536[6802]                    LDS     SI,[CS:ENTRY_POINT]     ; DS:SI = DEVICE LOCATION
  3861 00000D16 26897522                        MOV     [ES:DI+SYSI_DEV],SI 	; SET HEAD OF LIST IN DOS
  3862 00000D1A 268C5D24                        MOV     [ES:DI+SYSI_DEV+2],DS
  3863 00000D1E 8B04                            MOV     AX,[SI]			; GET POINTER TO NEXT DEVICE
  3864 00000D20 2EA3[6802]                      MOV     [CS:ENTRY_POINT],AX	; AND SAVE IT
  3865                                  
  3866 00000D24 890C                            MOV    [SI],CX			; LINK IN THE DRIVER
  3867 00000D26 895402                          MOV    [SI+2],DX
  3868                                  ENDDEV:
  3869 00000D29 5E                              POP     SI
  3870 00000D2A 07                              POP     ES
  3871 00000D2B 40                              INC     AX                      ;AX = FFFF (no more devs if YES)?
  3872 00000D2C 7403                            JZ      SHORT COFFJ3
  3873 00000D2E E9A8FE                          JMP	GOODLD			; OTHERWISE PRETEND WE LOADED IT IN
  3874                                  COFFJ3:
  3875                                  COFFV:  
  3876 00000D31 E9C9FD                  	JMP	COFF
  3877                                  
  3878                                  ;------------------------------------------------------------------------------
  3879                                  ; Country command
  3880                                  ;  The syntax is:							  ;3.30
  3881                                  ;	COUNTRY=country id {,codepage {,path}}				  ;3.30
  3882                                  ;	COUNTRY=country id {,,path}	:Default CODEPAGE ID in DOS	  ;3.30
  3883                                  ;------------------------------------------------------------------------------
  3884                                  ; SYSCONF.ASM, MSDOS 3.3, 24/07/1987
  3885                                  
  3886                                  TRYQ:
  3887                                  	; 10/06/2018 - Retro DOS v3.0
  3888                                   
  3889 00000D34 80FC51                          CMP     AH,'Q'
  3890                                          ;JNZ	SHORT TRYF
  3891 00000D37 7403                    	JZ	short TRYQ_CONT
  3892 00000D39 E91C01                  	JMP	TRYF
  3893                                  TRYQ_CONT:
  3894 00000D3C E85505                          CALL    GETNUM
  3895 00000D3F 744F                            JZ	short TryQBad		; 0 is never a valid code, or number is
  3896                                  					; bad
  3897 00000D41 89C3                    	MOV	BX,AX			; Country code in BX
  3898                                  					; 5/26/86
  3899 00000D43 BA0000                  	MOV	DX,0			; assume no code page id
  3900 00000D46 E89B05                  	call	SKIP_DELIM		;skip the delimeters after the first num
  3901 00000D49 7239                    	jc	short TryQ_Def_File	;no more characters left? then use default file
  3902 00000D4B 3C0D                    	cmp	al,13			;
  3903 00000D4D 7435                    	je	short TryQ_Def_File
  3904 00000D4F 3C0A                    	cmp	al,10
  3905 00000D51 750A                    	jne	short TRYQ_YES_EXTENDED
  3906 00000D53 FF06[C102]              	inc	word [COUNT] 		;This is for NEWLINE routine in COFF.
  3907 00000D57 FF0E[C302]              	dec	word [CHRPTR]
  3908                                  COFFJ41:
  3909 00000D5B EB27                    	JMP	short TryQ_Def_File	;O.K. no code page, 
  3910                                  					; no path specified.Use default path.    
  3911                                  TRYQ_YES_EXTENDED:
  3912 00000D5D 3C2C                    	cmp	al,','			;was the second comma?
  3913 00000D5F 7505                    	jne	short TRYQ_GETNUM
  3914 00000D61 E88005                  	call	SKIP_DELIM		;Yes, skip ',' and other possible delim
  3915 00000D64 EB38                    	jmp	short TRYQ_PATH 	;and No code page id entered.
  3916                                  TRYQ_GETNUM:
  3917 00000D66 E82B05                  	call	GETNUM
  3918 00000D69 722C                    	jc	short TryQBadCOM	;"Country=xxx,path" will not be accepted.
  3919                                  ;	jc	short TRYQ_PATH		;Codepage is not specified. No code page.
  3920                                  ;					;At this point, AL already contain the
  3921                                  ;					;first char of the PATH.
  3922 00000D6B 7423                    	jz	short TryQBad 		;codepage=0 entered. Error
  3923 00000D6D 89C2                    	mov	DX,AX			;save code page in DX
  3924 00000D6F E87205                  	call	SKIP_DELIM		;move CHRPTR to the path string
  3925 00000D72 7210                    	jc	short TryQ_Def_File	;no more char? then use default filename
  3926 00000D74 3C0D                    	cmp	al, 13
  3927 00000D76 740C                    	je	short TryQ_Def_File
  3928 00000D78 3C0A                    	cmp	al, 10	
  3929 00000D7A 7522                    	jne	short TRYQ_PATH		;path entered.
  3930 00000D7C FF06[C102]              	inc	word [COUNT]
  3931 00000D80 FF0E[C302]              	dec	word [CHRPTR]
  3932                                  TryQ_Def_File:
  3933 00000D84 52                      	push	dx			;save code page
  3934 00000D85 2EC606[2815]00          	mov	byte [cs:CNTRY_DRV],0 	;flag that the default path has been used!!!
  3935 00000D8B BA[2A15]                	mov	dx,CNTRY_ROOT		;the default path
  3936 00000D8E EB3C                    	jmp	short TRYQ_OPEN
  3937                                  
  3938                                  TryQBad:				;"Invalid country code or code page"
  3939 00000D90 F9                      	STC
  3940 00000D91 BA[2217]                	MOV	DX,BADCOUNTRY
  3941 00000D94 E9A800                  	jmp	TryQChkErr
  3942                                  
  3943                                  TryQBadCOM:				;Error in COUNTRY command
  3944 00000D97 F9                      	STC
  3945 00000D98 BA[4817]                	MOV	DX,BADCOUNTRYCOM
  3946 00000D9B E9A100                  	jmp	TryQChkErr
  3947                                  
  3948                                  TRYQ_PATH:				;DS - sysinitseg, ES - CONFBOT,
  3949 00000D9E 8B0E[C102]              	mov	CX,[COUNT]		;AL - the first char of path
  3950 00000DA2 41                      	inc	CX			;BX - country id, DX - codepage id, 0 = No code page
  3951 00000DA3 89F7                    	mov	DI,SI
  3952                                  TRYQ_PATH_LOOP: 			;find the end of path to put 0 after that.
  3953 00000DA5 268A05                  	mov	AL,[ES:DI]
  3954 00000DA8 E80F04                  	call	DELIM
  3955 00000DAB 7409                    	jz	short TRYQ_PATH_END
  3956 00000DAD 3C0D                    	cmp	al, 13
  3957 00000DAF 7405                    	jz	short TRYQ_PATH_END
  3958 00000DB1 47                      	inc	DI
  3959 00000DB2 EBF1                    	jmp	short TRYQ_PATH_LOOP
  3960                                  TryQBad_Brg:
  3961 00000DB4 EBDA                    	jmp	short TryQBad
  3962                                  TRYQ_PATH_END:
  3963 00000DB6 26C60500                	mov	byte [es:di],0		;make it a ASCIIZ string. 
  3964                                  					; (Organize did not handle this string)
  3965 00000DBA 1E                      	push	ds			;switch ds,es
  3966 00000DBB 06                      	push	es
  3967 00000DBC 1F                      	pop	ds
  3968 00000DBD 07                      	pop	es
  3969                                  
  3970 00000DBE BF[2815]                	mov	di,CNTRY_DRV	;move the user specified path to CNTRY_DRV
  3971 00000DC1 E8B206                  	call	MOVE_ASCIIZ
  3972                                  
  3973 00000DC4 1E                      	push	ds			;restore ds,es
  3974 00000DC5 06                      	push	es
  3975 00000DC6 1F                      	pop	ds
  3976 00000DC7 07                      	pop	es
  3977                                  
  3978                                  ;	call	 Set_Country_Path	;set CNTRY_DRV
  3979                                  
  3980 00000DC8 52                      	push	dx			;save DX
  3981 00000DC9 BA[2815]                	mov	dx,CNTRY_DRV		;Now DS:DX -> CNTRY_DRV
  3982                                  TRYQ_OPEN:
  3983 00000DCC B8003D                  	mov	ax,3D00h		;open a file
  3984 00000DCF F9                      	stc
  3985 00000DD0 CD21                    	int	21h
  3986 00000DD2 5A                      	pop	dx			;restore codepage id
  3987 00000DD3 723F                    	jc	short TryQFileBad	;open failure
  3988                                  
  3989 00000DD5 2EA3[C502]              	mov	[cs:CntryFileHandle],ax ;save file handle
  3990 00000DD9 93                      	xchg	ax,bx			;now, AX = country id, BX = file handle
  3991 00000DDA 2E8B0E[CA02]            	mov	cx,[cs:MEMHI]
  3992 00000DDF 81C18000                	add	cx,128			;I need 2K buffer to handle COUNTRY.SYS
  3993 00000DE3 2E3B0E[8902]            	cmp	cx,[cs:ALLOCLIM]
  3994 00000DE8 7752                    	ja	short TryQMemory	;cannot allocate the buffer for country.sys
  3995                                  
  3996 00000DEA BE[2815]                	mov	si,CNTRY_DRV		;DS:SI -> CNTRY_DRV
  3997 00000DED 803C00                  	cmp	byte [si],0 		;default path?
  3998 00000DF0 7502                    	jne	short TRYQ_Set_for_DOS
  3999 00000DF2 46                      	inc	si
  4000 00000DF3 46                      	inc	si			;DS:SI -> CNTRY_ROOT
  4001                                  TRYQ_Set_for_DOS:
  4002 00000DF4 2EC43E[7202]            	les	di,[cs:SYSI_Country]	;ES:DI -> country info tab in DOS
  4003 00000DF9 57                      	push	di			;save di
  4004 00000DFA 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys
  4005 00000DFD E87606                  	call	MOVE_ASCIIZ		;Set the path to COUNTRY.SYS in DOS.
  4006 00000E00 5F                      	pop	di			;ES:DI -> country info tab again.
  4007 00000E01 2E8B0E[CA02]            	mov	cx,[cs:MEMHI]
  4008 00000E06 8ED9                    	mov	ds, cx
  4009 00000E08 31F6                    	xor	si, si			;DS:SI -> 2K buffer to be used.
  4010 00000E0A E8F504                  	call	SetDOSCountryInfo	;now do the job!!!
  4011 00000E0D 7330                    	jnc	short TryQChkErr	;read error or could not find country,
  4012                                  					;	code page combination
  4013 00000E0F 83F9FF                  	cmp	cx, -1			;Could not find matching country_id,code page?
  4014 00000E12 74A0                    	je	short TryQBad_Brg	;then "Invalid country code or code page"
  4015                                  TryQFileBad:
  4016 00000E14 2E803E[2815]00          	cmp	byte [cs:CNTRY_DRV],0	;Is the default file used?
  4017 00000E1A 740F                    	je	short TryQDefBad
  4018 00000E1C 2E8B36[8702]            	mov	si,[cs:CONFBOT]
  4019 00000E21 8EC6                    	mov	es,si
  4020 00000E23 2E8B36[C302]            	mov	si,[cs:CHRPTR]
  4021 00000E28 4E                      	dec	si			;ES:SI -> path in CONFBOT
  4022 00000E29 EB05                    	jmp	short TryQBADLOAD
  4023                                  TryQDefBad:				;Default file has been used.
  4024 00000E2B 0E                      	push	cs
  4025 00000E2C 07                      	pop	es
  4026 00000E2D BE[2A15]                	mov	si,CNTRY_ROOT		;ES:SI -> \COUNTRY.SYS in SYSINIT_SEG
  4027                                  TryQBADLOAD:
  4028 00000E30 E84F06                  	call	BADLOAD 		;DS will be restored to SYSINIT_SEG
  4029 00000E33 2E8B0E[8702]            	mov	cx,[cs:CONFBOT]
  4030 00000E38 8EC1                    	mov	es, cx			;Restore ES -> CONFBOT.
  4031 00000E3A EB11                    	jmp	short CoffJ4
  4032                                  TryQMemory:
  4033 00000E3C BA[6517]                	MOV	DX,INSUFMEMORY
  4034                                  TryQChkErr:
  4035 00000E3F 2E8B0E[8702]            	mov	cx,[cs:CONFBOT]
  4036 00000E44 8EC1                    	mov	es,cx			;restore ES -> CONFBOT seg
  4037 00000E46 0E                      	push	cs
  4038 00000E47 1F                      	pop	ds			;restore DS to SYSINIT_SEG
  4039 00000E48 7303                    	jnc	short CoffJ4		;if no error, then exit
  4040 00000E4A E84F06                  	call	PRINT			;else show error message
  4041                                  CoffJ4:
  4042 00000E4D 8B1E[C502]              	mov	bx,[CntryFileHandle]
  4043 00000E51 B43E                    	mov	ah,3Eh
  4044 00000E53 CD21                    	int	21h			;close a file. Don't care even if it fails.
  4045 00000E55 E9A5FC                  	JMP	COFF
  4046                                  
  4047                                  ;------------------------------------------------------------------------------
  4048                                  ; Files command
  4049                                  ;------------------------------------------------------------------------------
  4050                                  ; SYSCONF.ASM, MSDOS 3.3, 24/07/1987
  4051                                  
  4052                                  TRYF:
  4053 00000E58 80FC46                          CMP     AH,'F'
  4054 00000E5B 7516                    	JNZ	SHORT TRYL
  4055 00000E5D E83404                  	CALL    GETNUM
  4056 00000E60 83F805                  	CMP	AX,5
  4057 00000E63 720B                    	JB	SHORT TRYFBAD		; Gotta have at least 5
  4058 00000E65 3D0001                  	CMP	AX,256
  4059 00000E68 7306                    	JAE	SHORT TRYFBAD		; Has to be a byte
  4060 00000E6A A2[8302]                	MOV	[FILES],AL
  4061                                  COFFJ5: 
  4062 00000E6D E98DFC                  	JMP	COFF
  4063                                  TRYFBAD:
  4064 00000E70 E9FCFB                  	JMP	BADOP
  4065                                  
  4066                                  ;------------------------------------------------------------------------------
  4067                                  ; LastDrive command
  4068                                  ;------------------------------------------------------------------------------
  4069                                  ; SYSCONF.ASM, MSDOS 3.3, 24/07/1987
  4070                                  
  4071                                  TRYL:
  4072 00000E73 80FC4C                  	CMP	AH,'L'
  4073 00000E76 7515                    	JNZ	SHORT TRYP
  4074 00000E78 0C20                    	OR	AL,020h
  4075 00000E7A 2C61                    	SUB	AL,'a'
  4076 00000E7C 720C                    	JB	SHORT TRYLBAD
  4077 00000E7E FEC0                    	INC	AL
  4078 00000E80 3C1A                    	CMP	AL,26			; a-z are allowed
  4079 00000E82 7706                    	JA	SHORT TRYLBAD
  4080 00000E84 A2[8602]                	MOV	[NUM_CDS],AL
  4081                                  COFFJ6: 
  4082 00000E87 E973FC                  	JMP	COFF
  4083                                  TRYLBAD:
  4084 00000E8A E9E2FB                  	JMP	BADOP
  4085                                  
  4086                                  ;-------------------------------------------------------------------------------
  4087                                  ; Setting Drive Parameters
  4088                                  ;-------------------------------------------------------------------------------
  4089                                  ; SYSCONF.ASM, MSDOS 3.3, 24/07/1987
  4090                                  
  4091                                  TRYP:
  4092 00000E8D 80FC50                  	CMP	AH,'P'
  4093 00000E90 7510                    	JNZ	SHORT TRYK
  4094 00000E92 E83601                  	CALL	PARSELINE
  4095 00000E95 72F3                    	JC	SHORT TRYLBAD
  4096 00000E97 E8F700                  	CALL	SETPARMS
  4097 00000E9A E81601                  	CALL	DIDDLEBACK
  4098 00000E9D 72EB                    	JC	SHORT TRYLBAD
  4099 00000E9F E95BFC                  	JMP	COFF
  4100                                  
  4101                                  ;-------------------------------------------------------------------------------
  4102                                  ; Setting Internal Stack Parameters
  4103                                  ; STACK=M,N where
  4104                                  ;	M is the number of stacks (range 8 to 64, default 9)
  4105                                  ;	N is the stack size (range 32 to 512 bytes, default 128)
  4106                                  ;  5/5/86: STACKS=0,0 implies no stack installation.			  ;3.30
  4107                                  ;	Any combinations that are not within the specified limits will	  ;3.30
  4108                                  ;	result in "Unrecognized command" error.                    
  4109                                  ;-------------------------------------------------------------------------------
  4110                                  ; SYSCONF.ASM, MSDOS 3.3, 24/07/1987
  4111                                  
  4112                                  TRYK:
  4113 00000EA2 80FC4B                  	CMP	AH,'K'
  4114                                  	;JNZ	short TRYW
  4115 00000EA5 7559                    	jnz	short TRYS ; 03/08/2019 - Retro DOS v3.2
  4116                                  
  4117                                  	;IF	STACKSW
  4118                                  
  4119 00000EA7 C606[B002]2C            	MOV	byte [SEPCHR],','
  4120 00000EAC E8E503                  	call	GETNUM			; Get number of stacks
  4121 00000EAF C606[B002]00            	MOV	byte [SEPCHR],0
  4122 00000EB4 83F800                  	cmp	ax, 0			; 5/5/86
  4123 00000EB7 740A                    	je	short TRYK_0		; Let's accept 0.
  4124 00000EB9 83F808                  	CMP	AX,MinCount		; 8 <= Number of Stacks <= 64
  4125 00000EBC 7239                    	JB	short TryKBad
  4126 00000EBE 83F840                  	CMP	AX,MaxCount
  4127 00000EC1 7734                    	JA	short TryKBad
  4128                                  TRYK_0:
  4129 00000EC3 A3[7602]                	MOV	[STACK_COUNT],AX
  4130                                  ;
  4131                                  ; Skip delimiters after the ,
  4132                                  ;
  4133 00000EC6 E81B04                  	call	SKIP_DELIM
  4134 00000EC9 722C                    	JC	short TryKBad
  4135                                  
  4136 00000ECB E8C603                  	call	GETNUM			; Get size of individual stack
  4137 00000ECE 7227                    	JC	short TryKBad 		; Number bad
  4138                                  
  4139 00000ED0 83F800                  	cmp	ax, 0			; 5/5/86
  4140 00000ED3 740A                    	je	short TRYK_SIZE0	; 5/5/86. Accept 0
  4141                                  
  4142 00000ED5 83F820                  	CMP	AX,MinSize		; 32 <= Stack Size <= 512
  4143 00000ED8 721D                    	JB	short TryKBad
  4144 00000EDA 3D0002                  	CMP	AX,MaxSize
  4145 00000EDD 7718                    	JA	short TryKBad
  4146                                  TRYK_SIZE0:
  4147 00000EDF A3[7802]                	MOV	[STACK_SIZE],AX
  4148 00000EE2 83F800                  	cmp	ax,0
  4149 00000EE5 7409                    	je	short TRYK_BOTH0
  4150                                  TRYK_OK:
  4151 00000EE7 C706[7A02]FFFF          	mov	word [STACK_ADDR], -1	;set flag. user entered stacks=
  4152 00000EED E90DFC                  	JMP	COFF
  4153                                  TRYK_BOTH0:
  4154 00000EF0 833E[7602]00            	cmp	word [STACK_COUNT],0 	;stack_size=0. Stack_Count=0 too?
  4155 00000EF5 74F0                    	je	short TRYK_OK 		;yes. accepted.
  4156                                  TryKBad:
  4157 00000EF7 BA[D417]                	MOV	DX,BADSTACK		; 5/26/86 "Invalid stack parameter"
  4158 00000EFA E89F05                  	call	PRINT
  4159 00000EFD E9FDFB                  	JMP	COFF
  4160                                  
  4161                                  	;ENDIF
  4162                                  
  4163                                  ;------------------------------------------------------------------------------
  4164                                  ; Switch command
  4165                                  ;------------------------------------------------------------------------------
  4166                                  	
  4167                                  	; 03/08/2019 - Retro DOS v3.2
  4168                                  ;TRYW:
  4169                                  ;	CMP     AH,'W'
  4170                                  ;	JNZ     SHORT TRYA
  4171                                  ;	; 10/06/2018 - Retro DOS 3.0
  4172                                  ;	JMP	BADOP			; no longer implemented (MSDOS 3.3)
  4173                                  
  4174                                  ;;	; 01/04/2018 - Retro DOS 2.0
  4175                                  ;;	MOV     DL,AL
  4176                                  ;;	MOV     AX,(CHAR_OPER*256)+1	; SET SWITCH CHARACTER
  4177                                  ;;	MOV     [COMMAND_LINE+1],DL
  4178                                  ;;	INT     21H
  4179                                  ;;	JMP     COFF
  4180                                  
  4181                                  ;------------------------------------------------------------------------------
  4182                                  ; Availdev command
  4183                                  ;------------------------------------------------------------------------------
  4184                                  
  4185                                  	; 03/08/2019 - Retro DOS v3.2
  4186                                  ;TRYA:
  4187                                  ;	CMP     AH,'A'
  4188                                  ;	JNZ     SHORT TRYS
  4189                                  ;	JMP	BADOP			; no longer implemented (MSDOS 3.3)
  4190                                  
  4191                                  ;;	CMP     AL,'F'			; FIRST LETTER OF "FALSE"
  4192                                  ;;	JNZ     SHORT COFFJ
  4193                                  ;;	MOV     AX,(CHAR_OPER*256)+3	; TURN ON "/DEV" PREFIX
  4194                                  ;;	XOR     DL,DL
  4195                                  ;;	INT     21H
  4196                                  ;;COFFJ7:  
  4197                                  ;;	JMP     COFF
  4198                                  
  4199                                  ;------------------------------------------------------------------------------
  4200                                  ; shell command
  4201                                  ;------------------------------------------------------------------------------
  4202                                  
  4203                                  TRYS:
  4204 00000F00 80FC53                          CMP     AH,'S'
  4205 00000F03 752B                            JNZ     SHORT TRYX
  4206 00000F05 C606[9002]00                    MOV     BYTE [COMMAND_LINE+1],0
  4207 00000F0A BF[7615]                        MOV     DI,COMMND + 1
  4208 00000F0D 8845FF                          MOV     [DI-1],AL
  4209                                  STORESHELL:
  4210 00000F10 E86200                          CALL    GETCHR
  4211 00000F13 08C0                            OR      AL,AL
  4212 00000F15 744C                            JZ      SHORT GETSHPARMS
  4213 00000F17 3C20                            CMP     AL," "
  4214 00000F19 7205                            JB      SHORT ENDSH
  4215 00000F1B 8805                            MOV     [DI],AL
  4216 00000F1D 47                              INC     DI
  4217 00000F1E EBF0                            JMP     SHORT STORESHELL
  4218                                  
  4219                                  ENDSH:
  4220 00000F20 C60500                          MOV     BYTE [DI],0
  4221 00000F23 E84F00                          CALL    GETCHR
  4222 00000F26 3C0A                            CMP     AL,10
  4223 00000F28 7503                            JNZ     SHORT CONV
  4224 00000F2A E84800                          CALL    GETCHR
  4225                                  CONV:   
  4226 00000F2D E9C1FB                  	JMP     CONFLP
  4227                                  
  4228                                  ;------------------------------------------------------------------------------
  4229                                  ; FCBS Command
  4230                                  ;------------------------------------------------------------------------------
  4231                                  ; SYSCONF.ASM, MSDOS 3.3, 24/07/1987
  4232                                  
  4233                                  TRYX:
  4234                                  	; 10/06/2018 -  Retro DOS v3.0
  4235                                   
  4236                                  	;JMP	BADOP	; 25/03/2018 - Retro DOS v2.0 
  4237                                  
  4238 00000F30 80FC58                  	CMP	AH,'X'
  4239 00000F33 752B                    	JNZ	SHORT TRYZ
  4240 00000F35 E85C03                  	CALL	GETNUM
  4241 00000F38 7423                    	JZ	SHORT TRYXBAD 		; gotta have at least one
  4242 00000F3A 3D0001                  	CMP	AX,256
  4243 00000F3D 731E                    	JAE	SHORT TRYXBAD 		; Can't be more than 8 bits worth
  4244 00000F3F A2[8402]                	MOV	[FCBS],AL
  4245                                  ;
  4246                                  ; Skip delimiters after the ,
  4247                                  ;
  4248 00000F42 E89F03                  	CALL	SKIP_DELIM
  4249 00000F45 7216                    	JC	SHORT TRYXBAD
  4250 00000F47 E84A03                  	CALL	GETNUM
  4251 00000F4A 7211                    	JC	SHORT TRYXBAD		; Number bad (Zero is OK here)
  4252 00000F4C 3D0001                  	CMP	AX,256
  4253 00000F4F 730C                    	JAE	SHORT TRYXBAD
  4254 00000F51 3A06[8402]              	CMP	AL,[FCBS]
  4255 00000F55 7706                    	JA	SHORT TRYXBAD
  4256 00000F57 A2[8502]                	MOV	[KEEP],AL
  4257 00000F5A E9A0FB                  	JMP	COFF
  4258                                  TRYXBAD:
  4259 00000F5D E90FFB                  	JMP	BADOP
  4260                                  
  4261                                  ;------------------------------------------------------------------------------
  4262                                  ; Bogus command
  4263                                  ;------------------------------------------------------------------------------
  4264                                  
  4265                                  TRYZ:
  4266 00000F60 E90CFB                  	JMP	BADOP
  4267                                  
  4268                                  GETSHPARMS:
  4269 00000F63 C60500                  	MOV     BYTE [DI],0
  4270 00000F66 BF[9002]                	MOV     DI,COMMAND_LINE+1
  4271                                  PARMLOOP:
  4272 00000F69 E80900                          CALL    GETCHR
  4273 00000F6C 3C20                            CMP     AL," "
  4274 00000F6E 72B0                            JB      SHORT ENDSH
  4275 00000F70 8805                            MOV     [DI],AL
  4276 00000F72 47                              INC     DI
  4277 00000F73 EBF4                            JMP     SHORT PARMLOOP
  4278                                  
  4279                                  GETCHR: 
  4280 00000F75 51                      	PUSH	CX
  4281 00000F76 8B0E[C102]              	MOV     CX,[COUNT] ; 05/07/2018
  4282 00000F7A E312                            JCXZ    NOCHAR
  4283 00000F7C 8B36[C302]                      MOV     SI,[CHRPTR]
  4284 00000F80 268A04                          MOV     AL,[ES:SI]
  4285 00000F83 FF0E[C102]                      DEC     WORD [COUNT]
  4286 00000F87 FF06[C302]                      INC     WORD [CHRPTR]
  4287 00000F8B F8                              CLC
  4288                                  GET_RET:
  4289 00000F8C 59                      	POP	CX
  4290 00000F8D C3                              RETN
  4291                                  NOCHAR: 
  4292 00000F8E F9                      	STC
  4293 00000F8F EBFB                            JMP	SHORT GET_RET
  4294                                  
  4295                                  ; ----------------------------------------------------------------------
  4296                                  ; SYINIT2.ASM (MSDOS 3.3, 02/02/1988)
  4297                                  ; ----------------------------------------------------------------------
  4298                                  ; 10/06/2018 - Retro DOS v3.0
  4299                                  
  4300                                  ;
  4301                                  ; The following set of routines is used to parse the DRIVPARM = command in
  4302                                  ; the CONFIG.SYS file to change the default drive parameters.
  4303                                  ;
  4304                                  SETPARMS:
  4305 00000F91 1E                      	push	ds
  4306 00000F92 50                      	push	ax
  4307 00000F93 53                      	push	bx
  4308 00000F94 51                      	push	cx
  4309 00000F95 52                      	push	dx
  4310 00000F96 31DB                    	xor	bx,bx
  4311 00000F98 8A1E[1616]              	mov	bl,[DRIVE]
  4312 00000F9C FEC3                    	inc	bl		; get it correct for IOCTL call (1=A,2=B...)
  4313 00000F9E 0E                      	push	cs
  4314 00000F9F 1F                      	pop	ds
  4315 00000FA0 BA[E915]                	mov	dx,DEVICEPARAMETERS
  4316 00000FA3 B444                    	mov	ah,IOCTL
  4317 00000FA5 B00D                    	mov	al,GENERIC_IOCTL
  4318 00000FA7 B508                    	mov	ch,RAWIO
  4319 00000FA9 B140                    	mov	cl,SET_DEVICE_PARAMETERS
  4320 00000FAB CD21                    	int	21H
  4321 00000FAD 5A                      	pop	dx
  4322 00000FAE 59                      	pop	cx
  4323 00000FAF 5B                      	pop	bx
  4324 00000FB0 58                      	pop	ax
  4325 00000FB1 1F                      	pop	ds
  4326 00000FB2 C3                      	retn
  4327                                  
  4328                                  ;
  4329                                  ; Replace default values for further DRIVPARM commands
  4330                                  ;
  4331                                  DIDDLEBACK:
  4332 00000FB3 C706[ED15]5000          	mov	word [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_CYLINDERS],80
  4333 00000FB9 C606[EA15]02            	mov	byte [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB
  4334 00000FBE C706[EB15]0000          	mov	word [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
  4335 00000FC4 C706[1716]0000          	mov	word [SWITCHES],0	    ; zero all switches
  4336 00000FCA C3                      	retn
  4337                                  
  4338                                  ;
  4339                                  ; Entry point is ParseLine. AL contains the first character in command line.
  4340                                  ;
  4341                                  PARSELINE:			; don't get character first time
  4342 00000FCB 1E                      	push	ds
  4343 00000FCC 0E                      	push	cs
  4344 00000FCD 1F                      	pop	ds
  4345                                  NextSwtch:
  4346 00000FCE 3C0D                    	cmp	al,13			; carriage return?
  4347 00000FD0 7421                    	jz	short done_line
  4348 00000FD2 3C0A                    	cmp	al,10			; linefeed?
  4349 00000FD4 743D                    	jz	short put_back		; put it back and done
  4350                                  ; Anything less or equal to a space is ignored.
  4351 00000FD6 3C20                    	cmp	al,' '                  ; space?
  4352 00000FD8 7610                    	jbe	short get_next		; skip over space
  4353 00000FDA 3C2F                    	cmp	al,'/'
  4354 00000FDC 7403                    	jz	short getparm
  4355 00000FDE F9                      	stc				; mark error invalid-character-in-input
  4356 00000FDF EB30                    	jmp	short exitpl
  4357                                  
  4358                                  getparm:
  4359 00000FE1 E83900                  	call	Check_Switch
  4360 00000FE4 891E[1716]              	mov	[SWITCHES],BX		; save switches read so far
  4361 00000FE8 7207                    	jc	short swterr
  4362                                  get_next:
  4363 00000FEA E888FF                  	call	GETCHR
  4364 00000FED 7204                    	jc	short done_line
  4365 00000FEF EBDD                    	jmp	short NextSwtch
  4366                                  swterr:
  4367 00000FF1 EB1E                    	jmp	short exitpl		; exit if error
  4368                                  
  4369                                  done_line:
  4370 00000FF3 F706[1716]0400          	test	word [SWITCHES],flagdrive  ; see if drive specified
  4371 00000FF9 7503                    	jnz	short okay
  4372 00000FFB F9                      	stc				; mark error no-drive-specified
  4373 00000FFC EB13                    	jmp	short exitpl
  4374                                  
  4375                                  okay:
  4376 00000FFE A1[1716]                	mov	ax,[SWITCHES]
  4377 00001001 83E003                  	and	ax,0003H	    ; get flag bits for changeline and non-rem
  4378 00001004 A3[EB15]                	mov	word [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
  4379 00001007 C706[0F16]0000          	mov	word [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
  4380 0000100D F8                      	clc			    ; everything is fine
  4381 0000100E E89F00                  	call	SetDeviceParameters
  4382                                  exitpl:
  4383 00001011 1F                      	pop	ds
  4384 00001012 C3                      	retn
  4385                                  
  4386                                  put_back:
  4387 00001013 FF06[C102]              	inc	word [COUNT]		; one more char to scan
  4388 00001017 FF0E[C302]              	dec	word [CHRPTR]		; back up over linefeed
  4389 0000101B EBD6                    	jmp	short done_line
  4390                                  
  4391                                  ;
  4392                                  ; Processes a switch in the input. It ensures that the switch is valid, and
  4393                                  ; gets the number, if any required, following the switch. The switch and the
  4394                                  ; number *must* be separated by a colon. Carry is set if there is any kind of
  4395                                  ; error.
  4396                                  ;
  4397                                  Check_Switch:
  4398 0000101D E855FF                  	call	GETCHR
  4399 00001020 7251                    	jc	short err_check
  4400 00001022 24DF                    	and	al,0DFH			; convert it to upper case
  4401 00001024 3C41                    	cmp	al,'A'
  4402 00001026 724B                    	jb	short err_check
  4403 00001028 3C5A                    	cmp	al,'Z'
  4404 0000102A 7747                    	ja	short err_check
  4405 0000102C 06                      	push	es
  4406 0000102D 0E                      	push	cs
  4407 0000102E 07                      	pop	es
  4408 0000102F 8A0E[AC16]              	mov	cl,[switchlist]		; get number of valid switches
  4409 00001033 B500                    	mov	ch,0
  4410 00001035 BF[AD16]                	mov	di,1+switchlist		; point to string of valid switches
  4411 00001038 F2AE                    	repne	scasb
  4412 0000103A 07                      	pop	es
  4413 0000103B 7536                    	jnz	short err_check
  4414 0000103D B80100                  	mov	ax,1
  4415 00001040 D3E0                    	shl	ax,cl		; set bit to indicate switch
  4416 00001042 8B1E[1716]              	mov	bx,[SWITCHES]	 ; get switches so far
  4417 00001046 09C3                    	or	bx,ax		; save this with other switches
  4418 00001048 89C1                    	mov	cx,ax
  4419 0000104A A97C00                  	test	ax,7CH		; test against switches that require number to follow
  4420 0000104D 7420                    	jz	short done_swtch
  4421 0000104F E823FF                  	call	GETCHR
  4422 00001052 721D                    	jc	short err_swtch
  4423 00001054 3C3A                    	cmp	al,':'
  4424 00001056 7519                    	jnz	short err_swtch
  4425 00001058 E81AFF                  	call	GETCHR
  4426 0000105B 53                      	push	bx			; preserve switches
  4427 0000105C 2EC606[B002]20          	mov	byte [cs:SEPCHR],' '	; allow space separators
  4428 00001062 E82F02                  	call	GETNUM
  4429 00001065 2EC606[B002]00          	mov	byte [cs:SEPCHR],0
  4430 0000106B 5B                      	pop	bx			; restore switches
  4431                                  ; Because GetNum does not consider carriage-return or line-feed as OK, we do
  4432                                  ; not check for carry set here. If there is an error, it will be detected
  4433                                  ; further on (hopefully).
  4434 0000106C E80600                  	call	Process_Num
  4435                                  
  4436                                  done_swtch:
  4437 0000106F F8                      	clc
  4438 00001070 C3                      	retn
  4439                                  
  4440                                  err_swtch:
  4441 00001071 31CB                    	xor	bx,cx			; remove this switch from the records
  4442                                  err_check:
  4443 00001073 F9                      	stc
  4444 00001074 C3                      	retn
  4445                                  
  4446                                  ;
  4447                                  ; This routine takes the switch just input, and the number following (if any),
  4448                                  ; and sets the value in the appropriate variable. If the number input is zero
  4449                                  ; then it does nothing - it assumes the default value that is present in the
  4450                                  ; variable at the beginning. Zero is OK for form factor and drive, however.
  4451                                  ;
  4452                                  Process_Num:
  4453 00001075 850E[1716]              	test	[SWITCHES],cx		; if this switch has been done before,
  4454 00001079 7533                    	jnz	short done_ret		; ignore this one.
  4455 0000107B F7C10400                	test	cx,flagdrive
  4456 0000107F 7405                    	jz	short try_f
  4457 00001081 A2[1616]                	mov	[DRIVE],al
  4458 00001084 EB28                    	jmp	short done_ret
  4459                                  
  4460                                  try_f:
  4461 00001086 F7C14000                	test	cx,flagff
  4462 0000108A 7405                    	jz	short try_t
  4463                                  ; Ensure that we do not get bogus form factors that are not supported
  4464                                  	;cmp	al,Max_Dev_Type
  4465                                  	;ja	short done_ret
  4466 0000108C A2[EA15]                	mov	byte [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
  4467 0000108F EB1D                    	jmp	short done_ret
  4468                                  
  4469                                  try_t:
  4470 00001091 09C0                    	or	ax,ax
  4471 00001093 7419                    	jz	short done_ret	 ; if number entered was 0, assume default value
  4472 00001095 F7C10800                	test	cx,flagcyln
  4473 00001099 7405                    	jz	short try_s
  4474 0000109B A3[ED15]                	mov	word [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
  4475 0000109E EB0E                    	jmp	short done_ret
  4476                                  
  4477                                  try_s:
  4478 000010A0 F7C11000                	test	cx,flagseclim
  4479 000010A4 7405                    	jz	short try_h
  4480 000010A6 A3[1416]                	mov	[SLIM],ax
  4481 000010A9 EB03                    	jmp	short done_ret
  4482                                  ;
  4483                                  ; Must be for number of heads
  4484                                  try_h:
  4485 000010AB A3[1216]                	mov	[HLIM],ax
  4486                                  
  4487                                  done_ret:
  4488 000010AE F8                      	clc
  4489 000010AF C3                      	retn
  4490                                  
  4491                                  ; 05/07/2018 - Retro DOS v3.0
  4492                                  
  4493                                  ;
  4494                                  ; SetDeviceParameters sets up the recommended BPB in each BDS in the
  4495                                  ; system based on the form factor. It is assumed that the BPBs for the
  4496                                  ; various form factors are present in the BPBTable. For hard files,
  4497                                  ; the Recommended BPB is the same as the BPB on the drive.
  4498                                  ; No attempt is made to preserve registers since we are going to jump to
  4499                                  ; SYSINIT straight after this routine.
  4500                                  ;
  4501                                  SetDeviceParameters:
  4502                                  	; 06/07/2018 - Retro DOS v3.0
  4503 000010B0 06                      	push	es
  4504 000010B1 0E                      	push	cs
  4505 000010B2 07                      	pop	es
  4506                                  ;ASSUME ES:SYSINITSEG
  4507 000010B3 31DB                    	xor	bx,bx
  4508 000010B5 8A1E[EA15]              	mov	bl,[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_DEVICETYPE]
  4509 000010B9 80FB00                  	cmp	bl,DEV_5INCH
  4510 000010BC 7507                    	jnz	short Got_80
  4511 000010BE B92800                  	mov	cx,40			; 48tpi has 40 cylinders
  4512 000010C1 890E[ED15]              	mov	[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_CYLINDERS],cx
  4513                                  Got_80:
  4514 000010C5 D1E3                    	shl	bx,1			; get index into BPB table
  4515                                  	; 06/07/2018
  4516                                  	;mov	si,BPBTable
  4517 000010C7 81C3[9816]              	add	bx,BPBTable
  4518                                  	;mov	si,[si+bx]		; get address of BPB
  4519 000010CB 8B37                    	mov	si,[bx]
  4520                                  Set_RecBPB:
  4521 000010CD BF[F015]                	mov	di,DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB ; es:di -> BPB
  4522                                  	; 06/07/2018
  4523                                  	;mov	cx,A_BPB.size ; = 31
  4524 000010D0 B91900                  	mov	cx,BPBSIZ ; = 25 
  4525 000010D3 FC                      	cld
  4526 000010D4 F3A4                    	repe	movsb
  4527 000010D6 07                      	pop	es
  4528                                  ;ASSUME ES:NOTHING
  4529 000010D7 F706[1716]1000          	test	word [SWITCHES],flagseclim
  4530 000010DD 7406                    	jz	short see_heads
  4531 000010DF A1[1416]                	mov	ax,[SLIM]
  4532 000010E2 A3[FD15]                	mov	word [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
  4533                                  see_heads:
  4534 000010E5 F706[1716]2000          	test	word [SWITCHES],flagheads
  4535 000010EB 743E                    	jz	short Set_All_Done
  4536 000010ED A1[1216]                	mov	ax,[HLIM]
  4537 000010F0 A3[FF15]                	mov	word [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
  4538                                  ;
  4539                                  ; We need to set the media byte and the total number of sectors to reflect the
  4540                                  ; number of heads. We do this by multiplying the number of heads by the number
  4541                                  ; of 'sectors per head'. This is not a fool-proof scheme!!
  4542                                  ;
  4543 000010F3 89C1                    	mov	cx,ax			; cx has number of heads
  4544 000010F5 FEC9                    	dec	cl			; get it 0-based
  4545 000010F7 A1[F815]                	mov	ax,[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
  4546                                  					; this is OK for two heads
  4547 000010FA D1F8                    	sar	ax,1			; ax contains # of sectors/head
  4548 000010FC D3E0                    	sal	ax,cl
  4549 000010FE 722B                    	jc	short Set_All_Done	; We have too many sectors - overflow!!
  4550 00001100 A3[F815]                	mov	[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
  4551                                  ; Set up correct Media Descriptor Byte
  4552 00001103 80F901                  	cmp	cl,1
  4553 00001106 B3F0                    	mov	bl,0F0H
  4554 00001108 B002                    	mov	al,2			; AL contains sectors/cluster
  4555 0000110A 7717                    	ja	short Got_Correct_Mediad
  4556 0000110C 8A1E[FA15]              	mov	bl,[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
  4557 00001110 7411                    	je	short Got_Correct_Mediad
  4558                                  ; We have one head - OK for 48tpi medium
  4559 00001112 B001                    	mov	al,1			; AL contains sectors/cluster
  4560 00001114 8A2E[EA15]              	mov	ch,[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_DEVICETYPE]
  4561 00001118 80FD00                  	cmp	ch,DEV_5INCH
  4562 0000111B 7404                    	jz	short Dec_Mediad
  4563 0000111D B3F0                    	mov	bl,0F0H
  4564 0000111F EB02                    	jmp	short Got_Correct_Mediad
  4565                                  Dec_Mediad:
  4566 00001121 FECB                    	dec	bl			; adjust for one head
  4567                                  Got_Correct_Mediad:
  4568 00001123 881E[FA15]              	mov	[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
  4569 00001127 A2[F215]                	mov	[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al
  4570 0000112A F8                      	clc
  4571                                  Set_All_Done:
  4572 0000112B C3                      	RETN
  4573                                  
  4574                                  ;ASSUME DS:NOTHING, ES:NOTHING
  4575                                  
  4576 0000112C F9                      NOCHAR1: STC
  4577 0000112D C3                      	 retn
  4578                                  
  4579                                  ; ---------------------------------------
  4580                                  
  4581                                  ORGANIZE:
  4582                                  	;mov	cx,[cs:COUNT] ; 05/07/2018
  4583 0000112E 8B0E[C102]                      MOV     CX,[COUNT]
  4584 00001132 E3F8                            JCXZ    NOCHAR1
  4585 00001134 E8B700                          CALL    MAPCASE
  4586 00001137 31F6                            XOR     SI,SI
  4587 00001139 89F7                            MOV     DI,SI
  4588                                  ORG1:   
  4589 0000113B E86F00                  	CALL    GET                     ; SKIP LEADING CONTROL CHARACTERS
  4590 0000113E 3C20                            CMP     AL,' '
  4591 00001140 72F9                            JB      SHORT ORG1
  4592                                  
  4593 00001142 51                              PUSH    CX
  4594 00001143 56                              PUSH    SI
  4595 00001144 57                              PUSH    DI
  4596 00001145 89F5                            MOV     BP,SI
  4597 00001147 4D                              DEC     BP
  4598 00001148 BE[9615]                        MOV     SI,COMTAB		; Prepare to search command table
  4599 0000114B B500                            MOV     CH,0
  4600                                  FINDCOM:
  4601 0000114D 89EF                            MOV     DI,BP
  4602 0000114F 8A0C                            MOV     CL,[SI]
  4603 00001151 46                              INC     SI
  4604 00001152 E30E                            JCXZ    NOCOM
  4605 00001154 F3A6                            REPE    CMPSB
  4606 00001156 9F                              LAHF
  4607 00001157 01CE                            ADD     SI,CX                   ; Bump to next position without affecting flags
  4608 00001159 9E                              SAHF
  4609 0000115A AC                              LODSB                           ; Get indicator letter
  4610 0000115B 75F0                            JNZ     SHORT FINDCOM
  4611 0000115D 5F                              POP     DI
  4612 0000115E 5E                              POP     SI
  4613 0000115F 59                              POP     CX
  4614 00001160 EB05                            JMP     SHORT GOTCOM
  4615                                  
  4616                                  NOCOM:
  4617 00001162 5F                              POP     DI
  4618 00001163 5E                              POP     SI
  4619 00001164 59                              POP     CX
  4620 00001165 B05A                            MOV     AL,'Z'
  4621                                  GOTCOM: 
  4622 00001167 AA                      	STOSB                           ; SAVE INDICATOR CHAR IN BUFFER
  4623                                  
  4624                                  ORG2:   
  4625 00001168 E83A00                  	CALL    GET2                    ; SKIP NAME UNTIL DELIMETER
  4626 0000116B E84C00                          CALL    DELIM                   ;
  4627 0000116E 75F8                            JNZ     SHORT ORG2
  4628                                  
  4629                                  ; 10/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT2.ASM, 02/02/2018)
  4630                                  ;--------------------------------------------------------------bug330a03
  4631                                  ; - isp
  4632                                  ;* the following two lines in the parsing caused the drivparm line to break
  4633                                  ;* we cannot let the "/" character be counted as a delimiter here. 
  4634                                  ;	CALL	GET			;GET CHARS TO RIGHT OF EQUALS SIGN
  4635                                  ;	STOSB
  4636                                  ;--------------------------------------------------------------bug330a03
  4637                                  
  4638                                  ;--------------------------------------------------------------bug330a03
  4639                                  ; - isp
  4640                                  ;* the following lines replaced the lines taken out
  4641                                  ORG3:	
  4642 00001170 E83200                  	CALL	GET2
  4643 00001173 E84800                  	call	DELIM1
  4644 00001176 74F8                    	jz	short ORG3
  4645 00001178 3C2F                    	cmp	al,'/'
  4646 0000117A 7421                    	jz	short ORG_EXT
  4647 0000117C AA                      	stosb
  4648                                  ;--------------------------------------------------------------bug330a03
  4649                                  
  4650                                  ORG4:   
  4651 0000117D E82500                  	CALL    GET2
  4652 00001180 E83700                  	CALL	DELIM ; 26/03/2018
  4653 00001183 7418                    	JZ	SHORT ORG_EXT
  4654 00001185 AA                              STOSB
  4655 00001186 3C20                            CMP     AL,' '
  4656 00001188 77F3                            JA      SHORT ORG4
  4657 0000118A 3C0A                            CMP     AL,10
  4658 0000118C 74AD                            JZ      SHORT ORG1
  4659                                  
  4660 0000118E 26C645FF00                      MOV     BYTE [ES:DI-1],0
  4661                                  ORG5:   
  4662 00001193 E80F00                  	CALL    GET2
  4663 00001196 AA                              STOSB
  4664 00001197 3C0A                            CMP     AL,10
  4665 00001199 75F8                            JNZ     SHORT ORG5
  4666 0000119B EB9E                            JMP     SHORT ORG1
  4667                                  
  4668                                  ORG_EXT: ; 26/03/2018
  4669 0000119D 26C60500                	MOV	BYTE [ES:DI],0		;put 0 at DI to make it an ASCIIZ
  4670 000011A1 47                      	INC	DI
  4671 000011A2 AA                      	STOSB				;and copy the delimeter char.
  4672 000011A3 EBEE                    	JMP	SHORT ORG5		;and continue as usual.
  4673                                  
  4674                                  GET2:
  4675 000011A5 E32E                            JCXZ    NOGET
  4676 000011A7 268A04                          MOV     AL,[ES:SI]
  4677 000011AA 46                              INC     SI
  4678 000011AB 49                              DEC     CX
  4679 000011AC C3                              RETN
  4680                                  
  4681                                  GET:    
  4682 000011AD E326                    	JCXZ    NOGET
  4683 000011AF 268A04                          MOV     AL,[ES:SI]
  4684 000011B2 46                              INC     SI
  4685 000011B3 49                              DEC     CX
  4686 000011B4 E80300                          CALL    DELIM
  4687 000011B7 74F4                            JZ      SHORT GET
  4688                                  GRET:   
  4689 000011B9 C3                      	RETN
  4690                                  
  4691                                  ; 10/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT2.ASM, 02/02/2018)
  4692                                  ;--------------------------------------------------------------bug330a03
  4693                                  ; isp - small changes here, new entry point into routine
  4694                                  DELIM:	
  4695 000011BA 3C2F                    	CMP	AL,'/'          ; 5/30/86. IBM will assume "/" delim  ;3.30
  4696 000011BC 74FB                    	jz	short GRET					      ;3.30
  4697                                  DELIM1:
  4698 000011BE 3C20                    	CMP	AL,' '
  4699 000011C0 74F7                    	jz	short GRET
  4700 000011C2 3C09                    	CMP	AL,9
  4701 000011C4 74F3                    	jz	short GRET
  4702 000011C6 3C3D                    	CMP	AL,'='
  4703 000011C8 74EF                    	jz	short GRET
  4704 000011CA 3C2C                    	CMP	AL,','
  4705 000011CC 74EB                    	jz	short GRET
  4706 000011CE 3C3B                    	CMP	AL,';'
  4707 000011D0 74E7                    	jz	short GRET	; 5/23/86			      ;3.30
  4708 000011D2 3C00                    	cmp	al,0		; 5/23/86 Special case for sysinit!!! ;3.30
  4709 000011D4 C3                      	retn
  4710                                  
  4711                                  ;--------------------------------------------------------------bug330a03
  4712                                  
  4713                                  NOGET:  
  4714 000011D5 59                      	POP     CX
  4715                                  	; 20/06/2018
  4716                                          ;MOV	[cs:COUNT],DI
  4717 000011D6 893E[C102]                      MOV     [COUNT],DI ; 05/07/2018
  4718 000011DA 31F6                            XOR     SI,SI
  4719                                          ;MOV	[cs:CHRPTR],SI
  4720 000011DC 8936[C302]                      MOV	[CHRPTR],SI ; 05/07/2018
  4721 000011E0 C3                              RETN
  4722                                  
  4723                                  ;
  4724                                  ;  NEWLINE RETURNS WITH FIRST CHARACTER OF NEXT LINE
  4725                                  ;
  4726                                  NEWLINE:
  4727 000011E1 E891FD                  	CALL    GETCHR                  ; SKIP NON-CONTROL CHARACTERS
  4728 000011E4 7207                            JC      SHORT NONEW
  4729 000011E6 3C0A                            CMP     AL,10                   ; LOOK FOR LINE FEED
  4730 000011E8 75F7                            JNZ     SHORT NEWLINE
  4731 000011EA E888FD                          CALL    GETCHR
  4732                                  NONEW:  
  4733 000011ED C3                      	RETN
  4734                                  
  4735                                  MAPCASE:
  4736 000011EE 51                              PUSH    CX
  4737 000011EF 56                              PUSH    SI
  4738 000011F0 1E                              PUSH    DS
  4739 000011F1 06                              PUSH    ES
  4740 000011F2 1F                              POP     DS
  4741 000011F3 31F6                            XOR     SI,SI
  4742                                  CONVLOOP:
  4743 000011F5 AC                              LODSB
  4744                                  
  4745                                          ;IF      KANJI
  4746                                          ;CALL    TESTKANJ
  4747                                          ;JZ      SHORT NORMCONV
  4748                                          ;INC     SI			; Skip next char
  4749                                          ;DEC     CX
  4750                                          ;JCXZ    CONVDONE		; Just ignore 1/2 kanji error
  4751                                  ; Fall through, know AL is not in 'a'-'z' range
  4752                                  ;NORMCONV:
  4753                                          ;ENDIF
  4754                                  
  4755 000011F6 3C61                            CMP     AL,'a'
  4756 000011F8 7209                            JB      SHORT NOCONV
  4757 000011FA 3C7A                            CMP     AL,'z'
  4758 000011FC 7705                            JA      SHORT NOCONV
  4759 000011FE 2C20                            SUB     AL,20H
  4760 00001200 8844FF                          MOV     [SI-1],AL
  4761                                  NOCONV:
  4762 00001203 E2F0                            LOOP    CONVLOOP
  4763                                  CONVDONE:
  4764 00001205 1F                              POP     DS
  4765 00001206 5E                              POP     SI
  4766 00001207 59                              POP     CX
  4767 00001208 C3                              RETN
  4768                                  
  4769                                          ;IF      KANJI
  4770                                  ;TESTKANJ:
  4771                                          ;CMP     AL,81H
  4772                                          ;JB      SHORT NOTLEAD
  4773                                          ;CMP     AL,9FH
  4774                                          ;JBE     SHORT ISLEAD
  4775                                          ;CMP     AL,0E0H
  4776                                          ;JB      SHORT NOTLEAD
  4777                                          ;CMP     AL,0FCH
  4778                                          ;JBE    SHORT  ISLEAD
  4779                                  ;NOTLEAD:
  4780                                          ;PUSH    AX
  4781                                          ;XOR     AX,AX			; Set zero
  4782                                          ;POP     AX
  4783                                          ;RETN
  4784                                  ;ISLEAD:
  4785                                          ;PUSH    AX
  4786                                          ;XOR     AX,AX			; Set zero
  4787                                          ;INC     AX			; Reset zero
  4788                                          ;POP     AX
  4789                                          ;RETN
  4790                                          ;ENDIF
  4791                                  
  4792                                  Yes_Break_Failed:			;dev drv Init failed and aborted.
  4793 00001209 F9                      	stc
  4794 0000120A 58                      	pop	ax
  4795 0000120B C3                      	retn
  4796                                  
  4797                                  SET_BREAK:
  4798                                  	; 22/06/2018
  4799                                  	; 10/06/2018 - Retro DOS v3.0
  4800                                  
  4801                                  ; 8/14/86  For DOS 3.3, this routine is modified to take care of the
  4802                                  ;Device driver's initialization error and abort.
  4803                                  ;If [break_addr+2] == [memhi] && [break_addr] = 0 then assume
  4804                                  ;that the device driver's initialization has an error and wanted to
  4805                                  ;abort the device driver. In this case, this routine will set carry
  4806                                  ;and return to the caller.
  4807                                  ;
  4808 0000120C 50                      	PUSH	AX
  4809 0000120D 2EA1[E002]              	MOV	AX,[CS:BREAK_ADDR+2]	;REMOVE THE INIT CODE
  4810 00001211 2E3B06[CA02]            	cmp	ax,[CS:MEMHI]
  4811 00001216 7508                    	jne	short Set_Break_Continue  ;if not same, then O.K.
  4812                                  
  4813 00001218 2E833E[DE02]00          	cmp	word [CS:BREAK_ADDR],0 
  4814 0000121E 74E9                    	je	SHORT Yes_Break_Failed	;[Break_addr+2]=[MEMHI] & [Break_addr]=0 
  4815                                  
  4816                                  Set_Break_Continue:
  4817 00001220 2EA3[CA02]              	MOV	[CS:MEMHI],AX
  4818 00001224 2EA1[DE02]              	MOV	AX,[CS:BREAK_ADDR]
  4819 00001228 2EA3[C802]              	MOV	[CS:MEMLO],AX
  4820 0000122C 58                      	POP	AX			    ; NOTE FALL THROUGH
  4821                                  
  4822                                  ;
  4823                                  ; Round the values in MEMLO and MEMHI to paragraph boundary.
  4824                                  ; Perform bounds check.
  4825                                  ;
  4826                                  
  4827                                  ROUND: 
  4828                                  	; 22/06/2018 
  4829                                  	; 10/06/2018 - Retro DOS v3.0
  4830                                  	; 26/03/2018
  4831 0000122D 50                      	PUSH	AX
  4832 0000122E 2EA1[C802]              	MOV     AX,[CS:MEMLO]
  4833 00001232 E803F6                  	CALL	ParaRound
  4834 00001235 2E0106[CA02]                    ADD     [CS:MEMHI],AX
  4835                                          ;XOR     AX,AX
  4836                                          ;MOV     [CS:MEMLO],AX
  4837                                  	; 06/07/2018
  4838 0000123A 2EC706[C802]0000        	mov	word [CS:MEMLO], 0
  4839 00001241 2EA1[CA02]              	MOV	AX,[CS:MEMHI]		; ax = new memhi
  4840 00001245 2E3B06[8902]            	CMP	AX,[CS:ALLOCLIM]	; if new memhi >= alloclim, error
  4841 0000124A 7303                    	JAE	SHORT MEM_ERR
  4842 0000124C 58                      	POP	AX
  4843 0000124D F8                      	CLC
  4844 0000124E C3                              RETN
  4845                                  
  4846                                  MEM_ERR:
  4847 0000124F BA[9217]                	MOV	DX,BADMEM
  4848 00001252 0E                      	PUSH	CS
  4849 00001253 1F                      	POP	DS
  4850 00001254 E84502                  	CALL	PRINT
  4851 00001257 E914F3                  	JMP	STALL
  4852                                  
  4853                                  CALLDEV:
  4854 0000125A 2E8E1E[6A02]            	MOV     DS,[CS:ENTRY_POINT+2]
  4855 0000125F 2E031E[6802]                    ADD     BX,[CS:ENTRY_POINT]	; Do a little relocation
  4856 00001264 8B07                            MOV     AX,[BX]
  4857 00001266 2EFF36[6802]                    PUSH    WORD [CS:ENTRY_POINT]
  4858 0000126B 2EA3[6802]                      MOV     [CS:ENTRY_POINT],AX
  4859 0000126F BB[D002]                        MOV     BX,PACKET
  4860 00001272 2EFF1E[6802]                    CALL    FAR [CS:ENTRY_POINT]	; 10/06/2018
  4861 00001277 2E8F06[6802]                    POP     WORD [CS:ENTRY_POINT]
  4862 0000127C C3                              RETN
  4863                                  
  4864                                  BADNUM:
  4865                                  	; 10/06/2018 - Retro DOS v3.0
  4866 0000127D 2EC606[B002]00          	mov	byte [CS:SEPCHR],0 ; 06/07/2018
  4867 00001283 31C0                    	XOR	AX,AX		; Set Zero flag, and AX = 0
  4868 00001285 5B                      	pop	bx
  4869 00001286 F9                      	stc			; AND carry set
  4870 00001287 C3                      	retn
  4871                                  
  4872                                  TODIGIT:
  4873 00001288 2C30                            SUB     AL,'0'
  4874 0000128A 7206                            JB      SHORT NOTDIG
  4875 0000128C 3C09                            CMP     AL,9
  4876 0000128E 7702                            JA      SHORT NOTDIG
  4877 00001290 F8                              CLC
  4878 00001291 C3                              RETN
  4879                                  NOTDIG: 
  4880 00001292 F9                      	STC
  4881 00001293 C3                              RETN
  4882                                  
  4883                                  ; GetNum parses a decimal number.
  4884                                  ; Returns it in AX, sets zero flag if AX = 0 (MAY BE considered an
  4885                                  ; error), if number is BAD carry is set, zero is set, AX=0.
  4886                                  
  4887                                  GETNUM: 
  4888 00001294 53                      	push	bx	; 10/06/2018 (Retro DOS 3.0, MSDOS 3.3)
  4889 00001295 31DB                    	XOR     BX,BX                   ; running count is zero
  4890                                  B2:     
  4891 00001297 E8EEFF                  	CALL    TODIGIT                 ; do we have a digit
  4892 0000129A 72E1                            JC      SHORT BADNUM		; no, bomb
  4893 0000129C 93                              XCHG    AX,BX                   ; put total in AX
  4894 0000129D 53                              PUSH    BX                      ; save digit
  4895 0000129E BB0A00                          MOV     BX,10                   ; base of arithmetic
  4896 000012A1 F7E3                            MUL     BX                      ; shift by one decimal digit
  4897 000012A3 5B                              POP     BX                      ; get back digit
  4898 000012A4 00D8                            ADD     AL,BL                   ; get total
  4899 000012A6 80D400                          ADC     AH,0                    ; make that 16 bits
  4900 000012A9 72D2                            JC      SHORT BADNUM		; too big a number
  4901 000012AB 93                              XCHG    AX,BX                   ; stash total
  4902 000012AC E8C6FC                          CALL    GETCHR                  ; GET NEXT DIGIT
  4903 000012AF 722D                            JC      SHORT B1		; no more characters
  4904                                  
  4905                                  	; 10/06/2018
  4906 000012B1 3C20                    	cmp	al,' '			; 5/23/86 space? 
  4907 000012B3 741F                    	jz	short B15		; 5/23/86 then end of digits
  4908 000012B5 3C2C                    	cmp	al,','			; 5/23/86 ',' is a seperator!
  4909 000012B7 741B                    	jz	short B15		; 5/23/86 then end of digits.
  4910 000012B9 3C09                    	cmp	al,9			; 5/23/86 TAB
  4911 000012BB 7417                    	jz	short B15		;
  4912                                  	; 22/06/2018
  4913 000012BD 2E3A06[B002]            	CMP	AL,[CS:SEPCHR]		; allow , separators
  4914 000012C2 7410                    	JZ	short B15
  4915 000012C4 3C2F                    	cmp	al,SWTCHR		; See if another switch follows
  4916 000012C6 740C                    	JZ	short B15
  4917 000012C8 3C0A                    	cmp	al,10			; Line-feed?
  4918 000012CA 7408                    	jz	short B15
  4919 000012CC 3C0D                    	cmp	al,13			; Carriage return?
  4920 000012CE 7404                    	jz	short B15
  4921                                  	
  4922 000012D0 08C0                    	OR      AL,AL                   ; end of line separator?
  4923 000012D2 75C3                            JNZ     SHORT B2		; no, try as a valid character
  4924                                  B15:        
  4925 000012D4 2EFF06[C102]            	INC     WORD [CS:COUNT]		; one more character to scan
  4926 000012D9 2EFF0E[C302]                    DEC     WORD [CS:CHRPTR]	; back up over separator
  4927                                  B1:     
  4928 000012DE 89D8                    	MOV     AX,BX                   ; get proper count
  4929 000012E0 09C0                            OR      AX,AX
  4930 000012E2 5B                      	pop	bx	; 10/06/2018
  4931 000012E3 C3                              RETN
  4932                                  
  4933                                  SKIP_DELIM:
  4934                                  ;Skip the delimeters pointed by CHRPTR. AL will contain the first non delimeter
  4935                                  ;character encountered and CHRPTR will point to the next character.
  4936                                  ;This routine will assume the second "," found as a non delimiter character.
  4937                                  ;So, in case if the string is " , , ", this routine will stop at the second ",".
  4938                                  ;At this time, Zero flag is set.
  4939                                  ;If COUNT is exhausted, then carry will be set.
  4940                                  Skip_delim_char:
  4941 000012E4 E88EFC                  	call	GETCHR
  4942 000012E7 7218                    	jc	short Skip_delim_exit
  4943 000012E9 3C2C                    	cmp	al,','			;the first comma?
  4944 000012EB 7406                    	je	short Skip_delim_next
  4945 000012ED E8CAFE                  	call	DELIM			;check the charater in AL.
  4946 000012F0 74F2                    	jz	short Skip_delim_char
  4947                                  	; 06/07/2018
  4948                                  	;jmp	short Skip_delim_exit	;found a non delim char
  4949 000012F2 C3                      	retn
  4950                                  Skip_delim_next:
  4951 000012F3 E87FFC                  	call	GETCHR
  4952 000012F6 7209                    	jc	short Skip_delim_exit
  4953 000012F8 3C2C                    	cmp	al,','			;the second comma?
  4954 000012FA 7405                    	je	short Skip_delim_exit 	;done
  4955 000012FC E8BBFE                  	call	DELIM
  4956 000012FF 74F2                    	jz	short Skip_delim_next
  4957                                  Skip_delim_exit:
  4958 00001301 C3                      	retn
  4959                                  
  4960                                  ; 10/06/2018 (Retro DOS 3.0, MSDOS 3.3)
  4961                                  
  4962                                  ; 5/26/86 *****************************************************************
  4963                                  SetDOSCountryInfo:
  4964                                  ;Input: ES:DI -> pointer to DOS_COUNTRY_CDPG_INFO			 
  4965                                  ;	DS:0  -> buffer.						 
  4966                                  ;	SI = 0								 
  4967                                  ;	AX = country id 						 
  4968                                  ;	DX = code page id. (If 0, then use ccSysCodePage as a default.) 
  4969                                  ;	BX = file handle						 
  4970                                  ;	This routine can handle maxium 72 COUNTRY_DATA entries. 	 
  4971                                  ;Output: DOS_country_cdpg_info set.					 
  4972                                  ;	 Carry set if any file read failure or wrong information in the file.
  4973                                  ;	 Carry set and CX = -1 if cannot find the matching COUNTRY_id, CODEPAGE
  4974                                  ;	 _id in the file.						 
  4975                                  									 
  4976 00001302 57                      	push	di							 
  4977 00001303 50                      	push	ax							 
  4978 00001304 52                      	push	dx							 
  4979                                  									 
  4980 00001305 31C9                    	xor	cx,cx							 
  4981 00001307 31D2                    	xor	dx,dx							 
  4982 00001309 B80002                  	mov	ax,512			;read 512 bytes 		 
  4983 0000130C E80701                  	call	ReadInControlBuffer	;Read the file header		 
  4984 0000130F 724C                    	jc	short SetDOSData_fail 					 
  4985 00001311 06                      	push	es							 
  4986 00001312 56                      	push	si							 
  4987 00001313 0E                      	push	cs							 
  4988 00001314 07                      	pop	es							 
  4989 00001315 BF[6B15]                	mov	di,COUNTRY_FILE_SIGNATURE			 
  4990 00001318 B90800                  	mov	cx,8			;length of the signature	 
  4991 0000131B F3A6                    	repz	cmpsb							 
  4992 0000131D 5E                      	pop	si							 
  4993 0000131E 07                      	pop	es							 
  4994 0000131F 753C                    	jnz	short SetDOSData_fail 	;signature mismatch		 
  4995                                  									 
  4996 00001321 83C612                  	add	si,18			;SI -> county info type 	 
  4997 00001324 803C01                  	cmp	byte [si],1		;Only accept type 1 (Currently only 1 header type)
  4998 00001327 7534                    	jne	short SetDOSData_fail 	;cannot proceed. error return	 
  4999 00001329 46                      	inc	si			;SI -> file offset		 
  5000 0000132A 8B14                    	mov	dx,[si]			;Get the INFO file offset.	 
  5001 0000132C 8B4C02                  	mov	cx,[si+2]					 
  5002 0000132F B80004                  	mov	ax,1024			;read 1024 bytes.		 
  5003 00001332 E8E100                  	call	ReadInControlBuffer	;Read INFO			 
  5004 00001335 7226                    	jc	short SetDOSData_fail 					 
  5005 00001337 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
  5006 00001339 83F948                  	cmp	cx,72			;cannot handle more than 72 entries.
  5007 0000133C 771F                    	ja	short SetDOSData_fail 					 
  5008 0000133E 46                      	inc	si							 
  5009 0000133F 46                      	inc	si			;SI -> entry information packet 
  5010 00001340 5A                      	pop	dx			;restore code page id		 
  5011 00001341 58                      	pop	ax			;restore country id		 
  5012 00001342 5F                      	pop	di							 
  5013                                  									 
  5014                                  SetDOSCntry_find:			;Search for desired country_id,codepage_id.
  5015 00001343 3B4402                  	cmp	ax,[si+2]		;compare country_id		 
  5016 00001346 750A                    	jne	short SetDOSCntry_next					 
  5017 00001348 83FA00                  	cmp	dx,0			;No user specified code page ?	 
  5018 0000134B 7415                    	je	short SetDOSCntry_any_CodePage ;then no need to match code page id.
  5019 0000134D 3B5404                  	cmp	dx,[si+4]		;compare code page id		 
  5020 00001350 7413                    	je	short SetDOSCntry_got_it					 
  5021                                  SetDOSCntry_next:							 
  5022 00001352 0334                    	add	si,[si]			;next entry			 
  5023 00001354 46                      	inc	si							 
  5024 00001355 46                      	inc	si			;take a word for size of entry itself
  5025 00001356 E2EB                    	loop	SetDOSCntry_find					 
  5026 00001358 B9FFFF                  	mov	cx, -1			;signals that bad country id entered.
  5027                                  SetDOSCntry_fail:							 
  5028 0000135B F9                      	stc								 
  5029 0000135C C3                      	retn								 
  5030                                  									 
  5031                                  SetDOSData_fail:							 
  5032 0000135D 5E                      	pop	si							 
  5033 0000135E 59                      	pop	cx							 
  5034 0000135F 5F                      	pop	di							 
  5035 00001360 EBF9                    	jmp	short SetDOSCntry_fail				 
  5036                                  									 
  5037                                  SetDOSCntry_any_CodePage:		;use the code_page_id of the country_id found.
  5038 00001362 8B5404                  	mov	dx,[si+4]					 
  5039                                  SetDOSCntry_got_it:			;found the matching entry	 
  5040 00001365 2E8916[7315]            	mov	[cs:CntryCodePage_Id],dx ;save code page ID for this country.
  5041 0000136A 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
  5042 0000136D 8B4C0C                  	mov	cx,[si+12] 				 
  5043 00001370 B80002                  	mov	ax,512			;read 512 bytes 		 
  5044 00001373 E8A000                  	call	ReadInControlBuffer					 
  5045 00001376 72E3                    	jc	short SetDOSCntry_fail					 
  5046 00001378 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
  5047 0000137A 46                      	inc	si							 
  5048 0000137B 46                      	inc	si			;SI -> first entry		 
  5049                                  									 
  5050                                  SetDOSCntry_data:							 
  5051 0000137C 57                      	push	di			;ES:DI -> DOS_COUNTRY_CDPG_INFO 
  5052 0000137D 51                      	push	cx			;save # of entry left		 
  5053 0000137E 56                      	push	si			;si -> current entry in Control buffer
  5054                                  									 
  5055 0000137F 8A4402                  	mov	al,[si+2]		;get data entry id		 
  5056 00001382 E86300                  	call	GetCountryDestination	;get the address of destination in ES:DI
  5057 00001385 7257                    	jc	short SetDOSCntry_data_next ;No matching data entry id in DOS 
  5058                                  									 
  5059 00001387 8B5404                  	mov	dx,[si+4]		;get offset of data		 
  5060 0000138A 8B4C06                  	mov	cx,[si+6]					 
  5061 0000138D B80042                  	mov	ax,4200h						 
  5062 00001390 F9                      	stc								 
  5063 00001391 CD21                    	int	21h			;move pointer			 
  5064 00001393 72C8                    	jc	short SetDOSData_fail 					 
  5065 00001395 BA0002                  	mov	dx,512			;start of data buffer		 
  5066 00001398 268B0D                  	mov	cx,[es:di]		;length of the corresponding data in DOS.
  5067 0000139B 83C10A                  	add	cx,10			;Signature + A word for the length itself
  5068 0000139E B43F                    	mov	ah,3Fh 						 
  5069 000013A0 F9                      	stc								 
  5070 000013A1 CD21                    	int	21h			;read the country.sys data	 
  5071 000013A3 72B8                    	jc	short SetDOSData_fail 	;read failure			 
  5072 000013A5 39C8                    	cmp	ax, cx							 
  5073 000013A7 75B4                    	jne	short SetDOSData_fail 					 
  5074                                  									 
  5075 000013A9 8A4402                  	mov	al,[si+2]		;save Data id for future use.	 
  5076 000013AC BE0802                  	mov	si,(512+8)		;SI-> data buffer + id tag field 
  5077 000013AF 8B0C                    	mov	cx,[si]			;get the length of the file	 
  5078 000013B1 41                      	inc	cx			;Take care of a word for lenght of tab
  5079 000013B2 41                      	inc	cx			;itself.			 
  5080 000013B3 81F9F805                	cmp	cx,(2048-512-8)		;Fit into the buffer?		 
  5081 000013B7 77A4                    	ja	short SetDOSData_fail 					 
  5082 000013B9 3C01                    	cmp	al,SetCountryInfo	;is the data for SetCountryInfo table?
  5083 000013BB 7512                    	jne	short SetDOSCntry_Mov 	;no, don't worry                
  5084 000013BD 26FF7518                	push	word [es:di+24]		;Cannot destroy ccMono_ptr address. Save them.
  5085 000013C1 26FF751A                	push	word [es:di+26]					 
  5086 000013C5 57                      	push	di			;save DI			 
  5087                                  									 
  5088 000013C6 50                      	push	ax							 
  5089 000013C7 2EA1[7315]              	mov	ax,[cs:CntryCodePage_Id] ;Do not use the Code Page info in Country_Info
  5090 000013CB 894404                  	mov	[si+4], ax		;Use the saved one for this !!!! 
  5091 000013CE 58                      	pop	ax							 
  5092                                  									 
  5093                                  SetDOSCntry_Mov:							 
  5094 000013CF F3A4                    	rep	movsb			;copy the table into DOS	 
  5095 000013D1 3C01                    	cmp	al,SetCountryInfo	;was the ccMono_ptr saved?	 
  5096 000013D3 7509                    	jne	short SetDOSCntry_data_next					 
  5097 000013D5 5F                      	pop	di			;restore DI			 
  5098 000013D6 268F451A                	pop	word [es:di+26]		;restore ccMono_ptr in DOS.	 
  5099 000013DA 268F4518                	pop	word [es:di+24]					 
  5100                                  									 
  5101                                  SetDOSCntry_data_next:							 
  5102 000013DE 5E                      	pop	si			;restore control buffer pointer 
  5103 000013DF 59                      	pop	cx			;restore # of entries left	 
  5104 000013E0 5F                      	pop	di			;restore pointer to DSO_COUNTRY_CDPG
  5105 000013E1 0334                    	add	si,[si]			;try to get the next entry	 
  5106 000013E3 46                      	inc	si							 
  5107 000013E4 46                      	inc	si			;take a word of entry length itself
  5108 000013E5 E295                    	loop	SetDOSCntry_data					 
  5109 000013E7 C3                      	retn								 
  5110                                  					 
  5111                                  GetCountryDestination:				 
  5112                                  ;Get the destination address in the DOS country info table.		 
  5113                                  ;Input: AL - Data ID							 
  5114                                  ;	ES:DI -> DOS_COUNTRY_CDPG_INFO					 
  5115                                  ;On return:								 
  5116                                  ;	ES:DI -> Destination address of the matching data id		 
  5117                                  ;	carry set if no matching data id found in DOS.			 
  5118                                  									 
  5119 000013E8 51                      	push	cx							 
  5120 000013E9 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries
  5121                                  					;skip the reserved area, syscodepage etc.
  5122 000013EC 268B0D                  	mov	cx,[es:di]		;get the number of entries	 
  5123 000013EF 47                      	inc	di							 
  5124 000013F0 47                      	inc	di			;SI -> the first start entry id 
  5125                                  GetCntryDest:								 
  5126 000013F1 263805                  	cmp	[es:di],al					 
  5127 000013F4 7413                    	je	short GetCntryDest_OK 					 
  5128 000013F6 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it SetCountryInfo entry?
  5129 000013FA 7405                    	je	short GetCntryDest_1						 
  5130 000013FC 83C705                  	add	di,5			;next data id			 
  5131 000013FF EB03                    	jmp	short GetCntryDest_loop 				 
  5132                                  GetCntryDest_1: 							 
  5133 00001401 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id			 
  5134                                  GetCntryDest_loop:							 
  5135 00001404 E2EB                    	loop	GetCntryDest						 
  5136 00001406 F9                      	stc								 
  5137 00001407 EB0B                    	jmp	short GetCntryDest_Exit				 
  5138                                  GetCntryDest_OK:							 
  5139 00001409 3C01                    	cmp	al,SetCountryInfo	;select country info?		 
  5140 0000140B 7503                    	jne	short GetCntryDest_OK1					 
  5141 0000140D 47                      	inc	di			;now DI -> ccCountryInfoLen	 
  5142 0000140E EB04                    	jmp	short GetCntryDest_Exit				 
  5143                                  GetCntryDest_OK1:							 
  5144 00001410 26C47D01                	les	di,[es:di+1]		;get the destination in ES:DI	 
  5145                                  GetCntryDest_Exit:							 
  5146 00001414 59                      	pop	cx							 
  5147 00001415 C3                      	retn								 
  5148                                  								 
  5149                                  ReadInControlBuffer:				 
  5150                                  ;Move file pointer to CX:DX						 
  5151                                  ;Read AX bytes into the control buffer. (Should be less than 2 Kb)	 
  5152                                  ;SI will be set to 0 hence DS:SI points to the control buffer.		 
  5153                                  ;Entry:  CX,DX offset from the start of the file where the read/write pointer
  5154                                  ;	 be moved.							 
  5155                                  ;	 AX - # of bytes to read					 
  5156                                  ;	 BX - file handle						 
  5157                                  ;	 DS - buffer seg.						 
  5158                                  ;Return: The control data information is read into DS:0 - DS:0200.	 
  5159                                  ;	 CX,DX value destroyed. 					 
  5160                                  ;	 Carry set if error in Reading file.				 
  5161                                  ;									 
  5162 00001416 50                      	push	ax			;# of bytes to read		 
  5163 00001417 B80042                  	mov	ax, 4200h						 
  5164 0000141A F9                      	stc								 
  5165 0000141B CD21                    	int	21h			;move pointer			 
  5166 0000141D 59                      	pop	cx			;# of bytes to read		 
  5167 0000141E 7209                    	jc	short RICB_exit						 
  5168 00001420 31D2                    	xor	dx,dx			;ds:dx -> control buffer	 
  5169 00001422 31F6                    	xor	si,si							 
  5170 00001424 B43F                    	mov	ah,3Fh			;read into the buffer		 
  5171 00001426 F9                      	stc								 
  5172 00001427 CD21                    	int	21h			;should be less than 1024 bytes. 
  5173                                  RICB_exit:								 
  5174 00001429 C3                      	retn								 
  5175                                  									 
  5176                                  SET_COUNTRY_PATH:					 
  5177                                  ;In:  DS - SYSINITSEG, ES - CONFBOT, SI -> start of the asciiz path string
  5178                                  ;     DOSINFO_EXT, CNTRY_DRV, CNTRY_ROOT, CNTRY_PATH			 
  5179                                  ;     Assumes current directory is the ROOT directory.			 
  5180                                  ;Out: DS:DI -> full path (CNTRY_DRV).					 
  5181                                  ;     Set the CNTRY_DRV string from the COUNTRY=,,path command. 	 
  5182                                  ;     DS, ES, SI value saved.						 
  5183                                  									 
  5184 0000142A 56                      	push	si							 
  5185 0000142B 1E                      	push	ds			;switch ds, es			 
  5186 0000142C 06                      	push	es							 
  5187 0000142D 1F                      	pop	ds							 
  5188 0000142E 07                      	pop	es			;now DS -> CONFBOT, ES -> SYSINITSEG
  5189                                  									 
  5190 0000142F E82E00                  	call	CHK_DRIVE_LETTER	;current DS:[SI] is a drive letter? 
  5191 00001432 7206                    	jc	short SCP_Default_drv 	;no, use current default drive. 
  5192 00001434 8A04                    	mov	al,[SI]					 
  5193 00001436 46                      	inc	si							 
  5194 00001437 46                      	inc	si			;SI -> next char after ":"      
  5195 00001438 EB06                    	jmp	short SCP_SetDrv					 
  5196                                  SCP_Default_drv:							 
  5197 0000143A B419                    	mov	ah,19h 						 
  5198 0000143C CD21                    	int	21h							 
  5199 0000143E 0441                    	add	al,"A"			;convert it to a character.     
  5200                                  SCP_SetDrv:								 
  5201 00001440 2EA2[2815]              	mov	[cs:CNTRY_DRV],al	;set the drive letter.		 
  5202 00001444 BF[2B15]                	mov	di,CNTRY_PATH					 
  5203 00001447 8A04                    	mov	al,[SI]	
  5204 00001449 3C5C                    	cmp	al, "\"                                                 
  5205 0000144B 7406                    	je	short SCP_Root_Dir						 
  5206                                  	; 23/06/2018 - Retro DOS v3.0
  5207                                  	;cmp	al,[cs:SWTCHR]	!!!	;let's accept "/" as an directory delim
  5208 0000144D 3C2F                    	cmp	al,SWTCHR 
  5209 0000144F 7402                    	je	short SCP_Root_Dir						 
  5210 00001451 EB01                    	jmp	short SCP_Path						 
  5211                                  SCP_Root_Dir:								 
  5212 00001453 4F                      	dec	di			;DI -> CNTRY_ROOT		 
  5213                                  SCP_Path:								 
  5214 00001454 E81F00                  	call	MOVE_ASCIIZ		;copy it			 
  5215 00001457 BF[2815]                	mov	di,CNTRY_DRV					 
  5216                                  SCPath_Exit:								 
  5217 0000145A 1E                      	push	ds			;switch ds, es			 
  5218 0000145B 06                      	push	es							 
  5219 0000145C 1F                      	pop	ds							 
  5220 0000145D 07                      	pop	es			;DS, ES value restored		 
  5221 0000145E 5E                      	pop	si							 
  5222 0000145F C3                      	RETN
  5223                                  								 
  5224                                  CHK_DRIVE_LETTER:				 
  5225                                  ;Check if DS:[SI] is a drive letter followed by ":".                    
  5226                                  ;Assume that every alpha charater is already converted to UPPER CASE.	 
  5227                                  ;Carry set if not.							 
  5228                                  ;									 
  5229 00001460 50                      	push	ax							 
  5230 00001461 803C41                  	cmp	byte [si], "A"                                   
  5231 00001464 720D                    	jb	short CDLetter_NO						 
  5232 00001466 803C5A                  	cmp	byte [si], "Z"                                   
  5233 00001469 7708                    	ja	short CDLetter_NO						 
  5234 0000146B 807C013A                	cmp	byte [si+1], ":"                                 
  5235 0000146F 7502                    	jne	short CDLetter_NO						 
  5236 00001471 EB01                    	jmp	short CDLetter_exit					 
  5237                                  CDLetter_NO:								 
  5238 00001473 F9                      	stc								 
  5239                                  CDLetter_exit:								 
  5240 00001474 58                      	pop	ax							 
  5241 00001475 C3                      	retn								 
  5242                                  									 
  5243                                  MOVE_ASCIIZ:				 
  5244                                  ;In: DS:SI -> source ES:DI -> target					 
  5245                                  ;Out: copy the string until 0.						 
  5246                                  ;Assumes there exists a 0.						 
  5247                                  MASCIIZ_loop:								 
  5248 00001476 A4                      	movsb								 
  5249 00001477 807CFF00                	cmp	byte [SI-1], 0	;Was it 0?			 
  5250 0000147B 75F9                    	jne	short MASCIIZ_loop						 
  5251 0000147D C3                      	retn
  5252                                  
  5253                                  ; 10/06/2018 - Retro DOS v3.0
  5254                                  								 
  5255                                  ;
  5256                                  ;	DS:DX POINTS TO STRING TO OUTPUT (ASCIZ)
  5257                                  ;
  5258                                  ;	PRINTS <BADLD_PRE> <STRING> <BADLD_POST>
  5259                                  ;
  5260                                  
  5261                                  BADFIL:
  5262 0000147E 0E                              PUSH    CS
  5263 0000147F 07                              POP     ES
  5264 00001480 89D6                            MOV     SI,DX
  5265                                  BADLOAD:
  5266 00001482 BA[FC16]                        MOV     DX,BADLD_PRE		; WANT TO PRINT CONFIG ERROR
  5267                                          ;MOV	BX,BADLD_POST
  5268                                  PRNERR:
  5269 00001485 0E                              PUSH    CS
  5270 00001486 1F                              POP     DS
  5271 00001487 B409                            MOV     AH,STD_CON_STRING_OUTPUT
  5272 00001489 CD21                            INT     21H
  5273                                  PRN1:   
  5274 0000148B 268A14                  	MOV     DL,[ES:SI]
  5275 0000148E 08D2                            OR      DL,DL
  5276 00001490 7407                            JZ      SHORT PRN2
  5277 00001492 B402                            MOV     AH,STD_CON_OUTPUT
  5278 00001494 CD21                            INT     21H
  5279 00001496 46                              INC     SI
  5280 00001497 EBF2                            JMP     SHORT PRN1
  5281                                  PRN2:   
  5282                                  	;MOV	DX,BX
  5283 00001499 BA[D816]                	MOV	DX,BADLD_POST ; 10/04/2018
  5284                                  PRINT:  
  5285 0000149C B409                    	MOV     AH,STD_CON_STRING_OUTPUT
  5286 0000149E CD21                            INT     21H
  5287 000014A0 C3                              RETN
  5288                                  
  5289                                  	;IF	NOEXEC  ; (NOEXEC = FALSE)
  5290                                  ;;
  5291                                  ;; LOAD FILE CALLED [DS:DX] AT MEMORY LOCATION ES:BX
  5292                                  ;;
  5293                                  ;LDFIL:
  5294                                  ;	PUSH    AX
  5295                                  ;	PUSH    BX
  5296                                  ;	PUSH    CX
  5297                                  ;	PUSH    DX
  5298                                  ;	PUSH    SI
  5299                                  ;	PUSH    DS
  5300                                  ;	PUSH    BX
  5301                                  ;
  5302                                  ;	XOR     AX,AX                   ; OPEN THE FILE
  5303                                  ;	MOV     AH,OPEN
  5304                                  ;	STC                             ; IN CASE OF INT 24
  5305                                  ;	INT     21H
  5306                                  ;	POP     DX                      ; Trans addr is DS:DX
  5307                                  ;	JC      SHORT LDRET
  5308                                  ;
  5309                                  ;	; 10/06/2018
  5310                                  ;	PUSH	DX
  5311                                  ;	MOV     BX,AX                   ; Handle in BX
  5312                                  ;	XOR	CX,CX
  5313                                  ;	XOR	DX,DX
  5314                                  ;	MOV	AX,(LSEEK*256)+2
  5315                                  ;	STC				;IN CASE OF INT 24
  5316                                  ;	INT	21H			; Get file size in DX:AX
  5317                                  ;	JC	short LDCLSP
  5318                                  ;	POP	DX
  5319                                  ;	PUSH	DX
  5320                                  ;	MOV	CX,ES			; CX:DX is xaddr
  5321                                  ;	ADD	DX,AX			; Add file size to Xaddr
  5322                                  ;	JNC	short DOSIZE
  5323                                  ;	ADD	CX,1000H		; ripple carry
  5324                                  ;DOSIZE:
  5325                                  ;	mov	ax,dx
  5326                                  ;	call	ParaRound
  5327                                  ;	mov	dx,ax
  5328                                  ;
  5329                                  ;	ADD	CX,DX
  5330                                  ;	CMP	CX,[ALLOCLIM]
  5331                                  ;	JB	short OKLD
  5332                                  ;	JMP	short MEM_ERR
  5333                                  ;
  5334                                  ;OKLD:
  5335                                  ;	XOR	CX,CX
  5336                                  ;	XOR	DX,DX
  5337                                  ;	MOV	AX,LSEEK SHL 8		;Reset pointer to beginning of file
  5338                                  ;	STC				;IN CASE OF INT 24
  5339                                  ;	INT	21H
  5340                                  ;	JC	LDCLSP
  5341                                  ;	POP	DX
  5342                                  ;	PUSH	ES			;READ THE FILE IN
  5343                                  ;	POP	DS			;Trans addr is DS:DX
  5344                                  ;	MOV	CX,0FF00H		; .COM files arn't any bigger than
  5345                                  ;					; 64k-100H
  5346                                  ;	MOV	AH,READ
  5347                                  ;	STC				;IN CASE OF INT 24
  5348                                  ;	INT	21H
  5349                                  ;	JC	short LDCLS
  5350                                  ;	MOV	SI,DX			;CHECK FOR EXE FILE
  5351                                  ;	CMP	WORD [SI],"MZ"
  5352                                  ;	CLC				; Assume OK
  5353                                  ;	JNZ	short LDCLS		; Only know how to do .COM files
  5354                                  ;	STC
  5355                                  ;	JMP	SHORT LDCLS
  5356                                  ;
  5357                                  ;LDERRP:  
  5358                                  ;	STC
  5359                                  ;LDCLSP:
  5360                                  ;	POP	DX
  5361                                  ;LDCLS:  
  5362                                  ;	PUSHF
  5363                                  ;	MOV     AH,CLOSE                ; CLOSE THE FILE
  5364                                  ;       STC
  5365                                  ;       INT     21H
  5366                                  ;	POPF
  5367                                  ;
  5368                                  ;LDRET:  
  5369                                  ;	POP     DS
  5370                                  ;	POP     SI
  5371                                  ;	POP     DX
  5372                                  ;	POP     CX
  5373                                  ;	POP     BX
  5374                                  ;	POP     AX
  5375                                  ;	RETN
  5376                                  
  5377                                  	;ENDIF
  5378                                  ;
  5379                                  ;  OPEN DEVICE POINTED TO BY DX, AL HAS ACCESS CODE
  5380                                  ;   IF UNABLE TO OPEN DO A DEVICE OPEN NULL DEVICE INSTEAD
  5381                                  ;
  5382                                  OPEN_DEV:
  5383 000014A1 E81C00                          CALL    OPEN_FILE
  5384 000014A4 7307                            JNC     SHORT OPEN_DEV3
  5385                                  OPEN_DEV1:
  5386 000014A6 BA[0C15]                        MOV     DX,NULDEV
  5387 000014A9 E81400                          CALL    OPEN_FILE
  5388                                  OPEN_DEV2:
  5389 000014AC C3                              RETN
  5390                                  OPEN_DEV3:
  5391                                  	; 05/07/2018
  5392 000014AD 89C3                    	MOV	BX,AX			; Handle from open to BX
  5393 000014AF 31C0                            XOR     AX,AX                   ; GET DEVICE INFO
  5394 000014B1 B444                            MOV     AH,IOCTL
  5395 000014B3 CD21                            INT     21H
  5396 000014B5 F6C280                          TEST    DL,10000000B
  5397 000014B8 75F2                            JNZ     SHORT OPEN_DEV2
  5398 000014BA B43E                            MOV     AH,CLOSE
  5399 000014BC CD21                            INT     21H
  5400 000014BE EBE6                            JMP     SHORT OPEN_DEV1
  5401                                  
  5402                                  OPEN_FILE:
  5403 000014C0 B43D                            MOV     AH,OPEN
  5404 000014C2 F9                              STC
  5405 000014C3 CD21                            INT     21H
  5406 000014C5 C3                              RETN
  5407                                  
  5408                                  INT24:  
  5409 000014C6 83C406                  	ADD     SP,6                    ; RESTORE MACHINE STATE
  5410 000014C9 58                              POP     AX
  5411 000014CA 5B                              POP     BX
  5412 000014CB 59                              POP     CX
  5413 000014CC 5A                              POP     DX
  5414 000014CD 5E                              POP     SI
  5415 000014CE 5F                              POP     DI
  5416 000014CF 5D                              POP     BP
  5417 000014D0 1F                              POP     DS
  5418 000014D1 07                              POP     ES
  5419 000014D2 50                              PUSH    AX
  5420 000014D3 B419                            MOV     AH,GET_DEFAULT_DRIVE    ; INITIALIZE DOS
  5421 000014D5 CD21                            INT     21H
  5422 000014D7 58                              POP     AX
  5423 000014D8 CF                              IRET                            ; BACK TO USER
  5424                                  
  5425                                          ;IF	ALTVECT
  5426                                  BOOTMES:
  5427 000014D9 0D                      	DB	13
  5428 000014DA 0A                      TEN:	DB	10
  5429                                  	;DB	"MS-DOS version "
  5430                                  	;DB	MAJOR_VERSION + "0"
  5431                                  	;DB	"."
  5432                                  	;DB	(MINOR_VERSION / 10) + "0"
  5433                                  	;DB	(MINOR_VERSION % 10) + "0"
  5434                                  	;DB	13,10
  5435                                  	;;DB	"Copyright 1981,82 Microsoft Corp.",13,10,"$"
  5436                                  	;; 27/06/2018
  5437                                  	;DB	"Copyright 1981,87 Microsoft Corp.",13,10,"$"
  5438                                  	;ENDIF
  5439                                  	; 22/11/2022
  5440 000014DB 526574726F20444F53-     	db 	"Retro DOS v3.2"
  5440 000014E4 2076332E32         
  5441 000014E9 2028323031392D3230-     	db	" (2019-2022) "
  5441 000014F2 32322920           
  5442 000014F6 0D0A                    	db	13,10
  5443 000014F8 6279204572646F6761-     	db	"by Erdogan Tan "
  5443 00001501 6E2054616E20       
  5444 00001507 0D0A                    	db	13,10
  5445 00001509 0D0A24                  	db	13,10,"$"
  5446                                  
  5447                                  	; 10/06/2018 - Retro DOS v3.0
  5448                                  NULDEV: 
  5449 0000150C 4E554C00                	DB      "NUL",0
  5450                                  CONDEV: 
  5451 00001510 434F4E00                	DB      "CON",0
  5452                                  AUXDEV: 
  5453 00001514 41555800                	DB      "AUX",0
  5454                                  PRNDEV: 
  5455 00001518 50524E00                	DB      "PRN",0
  5456                                  
  5457                                  CONFIG:
  5458 0000151C 5C434F4E4649472E53-     	DB      "\CONFIG.SYS",0
  5458 00001525 595300             
  5459                                  
  5460                                  CNTRY_DRV:
  5461 00001528 413A                    	DB	"A:"
  5462                                  CNTRY_ROOT:
  5463 0000152A 5C                      	DB	"\"
  5464                                  CNTRY_PATH:
  5465 0000152B 434F554E5452592E53-     	DB	"COUNTRY.SYS",0
  5465 00001534 595300             
  5466 00001537 00<rep 34h>             	times	52 db 0
  5467                                  
  5468                                  COUNTRY_FILE_SIGNATURE:
  5469 0000156B FF434F554E545259        	db	0FFh,'COUNTRY' 	 
  5470                                  
  5471                                  CntryCodePage_Id:
  5472 00001573 0000                    	DW	0	
  5473                                  
  5474                                  COMMND:
  5475 00001575 5C434F4D4D414E442E-     	DB      "\COMMAND.COM",0
  5475 0000157E 434F4D00           
  5476 00001582 00<rep 14h>             	times	20 db 0
  5477                                  
  5478                                  COMTAB:
  5479                                          ;DB	8,"AVAILDEV",'A'	; NO LONGER SUPPORTED
  5480 00001596 074255464645525342      	DB	7,"BUFFERS",  'B'
  5481 0000159F 05425245414B43          	DB	5,"BREAK",    'C'
  5482 000015A6 0644455649434544        	DB	6,"DEVICE",   'D'
  5483 000015AE 0546494C455346          	DB	5,"FILES",    'F'
  5484 000015B5 044643425358            	DB	4,"FCBS",     'X'
  5485 000015BB 094C41535444524956-     	DB	9,"LASTDRIVE",'L'
  5485 000015C4 454C               
  5486 000015C6 08445249565041524D-     	DB	8,"DRIVPARM", 'P'       ; RS for DOS 3.2
  5486 000015CF 50                 
  5487                                  		;IF STACKSW					; 3.30
  5488 000015D0 06535441434B534B        	DB	6,"STACKS",   'K'       ; BAS for DOS 3.2	; 3.30
  5489                                  		;ENDIF						; 3.30
  5490 000015D8 07434F554E54525951      	DB	7,"COUNTRY",  'Q'
  5491 000015E1 055348454C4C53          	DB	5,"SHELL",    'S'
  5492                                  	;DB	8,"SWITCHAR",'W'	; NO LONGER SUPPORTED
  5493                                  
  5494 000015E8 00                              DB      0
  5495                                  
  5496                                  DEVICEPARAMETERS:  ; STRUC A_DEVICEPARAMETERS
  5497                                  ;DeviceParameters a_DeviceParameters <0,DEV_3INCH720KB,0,80>
  5498 000015E9 00                      DEVP.SPECIALFUNC:	DB 0
  5499 000015EA 02                      DEVP.DEVICETYPE:	DB DEV_3INCH720KB
  5500 000015EB 0000                    DEVP.ATTRIBUTES:	DW 0
  5501 000015ED 5000                    DEVP.CYLINDERS:		DW 80
  5502 000015EF 00                      DEVP.MEDIATYPE:		DB 0
  5503 000015F0 00<rep 1Fh>             DEVP.DP_BPB:		TIMES A_BPB.size DB 0
  5504 0000160F 0000                    DEVP.TRACKTBLENTS:	DW 0
  5505 00001611 FC                      DEVP.SECTORTABLE:	DB MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
  5506                                  
  5507 00001612 0200                    HLIM: DW 2
  5508 00001614 0900                    SLIM: DW 9
  5509                                  
  5510 00001616 00                      DRIVE: DB 0
  5511 00001617 0000                    SWITCHES: DW 0
  5512                                  
  5513                                  ; 06/07/2018
  5514                                  
  5515                                  ;-----------------------------------------------------------------------------
  5516                                  ; BOOT DISK PARAMETERS
  5517                                  ;-----------------------------------------------------------------------------
  5518                                  ; 02/06/2018 - Retro DOS v3.0
  5519                                  ; 07/04/2018 - Retro DOS V2.0
  5520                                  
  5521                                  ;BOOT_DRV_PARMS:
  5522                                  ;		; 1.44MB
  5523                                  ;		dw 512
  5524                                  ;               db 1
  5525                                  ;               dw 1	
  5526                                  ;               db 2
  5527                                  ;               dw 224
  5528                                  ;		dw 2880
  5529                                  ;		; Retro DOS v1.0 - 10/02/2018
  5530                                  ;		db 0F0h		; Media descriptor
  5531                                  ;		dw 9		; FAT size in sectors
  5532                                  ;		dw 18		; Sectors per track
  5533                                  ;		dw 2		; Number of heads
  5534                                  ;		; 02/06/2018 - Retro DOS v3.0
  5535                                  ;		;dw 0		
  5536                                  ;		dd 0		; Hidden sectors
  5537                                  ;		dd 0		; Big total sectors		
  5538                                  ;
  5539                                  ;; Note: These (fd&hd) parameters table sizes are  
  5540                                  ;;						 31 bytes for MSDOS 3.3		
  5541                                  ;;						 19 bytes for MSDOS 2.11
  5542                                  
  5543                                  ;-----------------------------------------------------------------------------
  5544                                  ; FLOPPY DISK PARAMETERS
  5545                                  ;-----------------------------------------------------------------------------
  5546                                  ; 02/06/2018 - Retro DOS v3.0
  5547                                  ; 07/04/2018 - Retro DOS V2.0
  5548                                  
  5549                                  
  5550                                  ; 02/06/2018 - Retro DOS v3.0 - 25 bytes of DOS disk paramaters
  5551                                  
  5552                                  
  5553                                  ;
  5554                                  ; The following are the recommended BPBs for the media that we know of so
  5555                                  ; far.
  5556                                  
  5557                                  ; 48 tpi diskettes
  5558                                  	;EVENB
  5559                                  ;align 2
  5560                                  ;BPB48T:
  5561                                  ;	DW	512
  5562                                  ;	DB	2
  5563                                  ;	DW	1
  5564                                  ;	DB	2
  5565                                  ;	DW	112
  5566                                  ;	DW	2*9*40
  5567                                  ;	DB	0FDH
  5568                                  ;	DW	2
  5569                                  ;	DW	9
  5570                                  ;	DW	2
  5571                                  ;	DD	0		;hidden sectors - sp
  5572                                  ;	DD	0		;big total sectors - sp
  5573                                  ;	;DB	6 DUP(?)	;reserved
  5574                                  ;	;times	6 db 0
  5575                                  
  5576                                  ; 96tpi diskettes
  5577                                  	;EVENB
  5578                                  ;align 2
  5579                                  ;BPB96T:	
  5580                                  ;	DW	512
  5581                                  ;	DB	1
  5582                                  ;	DW	1
  5583                                  ;	DB	2
  5584                                  ;	DW	224
  5585                                  ;	DW	2*15*80
  5586                                  ;	DB	0f9H
  5587                                  ;	DW	7
  5588                                  ;	DW	15
  5589                                  ;	DW	2
  5590                                  ;	DD	0		;hidden sectors - sp
  5591                                  ;	DD	0		;big total sectors - sp
  5592                                  ;	;DB	6 DUP(?)	;reserved
  5593                                  ;	;times	6 db 0
  5594                                  
  5595                                  ;BPBSIZ	equ	$-BPB96T
  5596                                  BPBSIZ	equ	25  ; 02/06/2018
  5597                                  
  5598                                  
  5599                                  ; 3 1/2 inch diskette BPB
  5600                                  	;EVENB
  5601                                  ;align 2
  5602                                  ;BPB35:	
  5603                                  ;	DW	512
  5604                                  ;	DB	2
  5605                                  ;	DW	1		; Double sided with 9 sec/trk
  5606                                  ;	DB	2
  5607                                  ;	DW	70h
  5608                                  ;	DW	2*9*80
  5609                                  ;	DB	0f9H
  5610                                  ;	DW	3
  5611                                  ;	DW	9
  5612                                  ;	DW	2
  5613                                  ;	DD	0		;hidden sectors - sp
  5614                                  ;	DD	0		;big total sectors - sp
  5615                                  ;	;DB	6 DUP(?)	;reserved
  5616                                  ;	;times	6 db 0
  5617                                  
  5618                                  	;EVENB
  5619 00001619 90                      align 2
  5620                                  		; Retro DOS v3.0 - 25 bytes disk parameters (02/06/2018)
  5621                                  		; Retro DOS v2.0 - 19 bytes disk parameters (07/04/2018)
  5622                                  _FD_parameters:
  5623                                  		; Retro DOS v1.0 - 10/02/2018
  5624                                  		; 17 bytes of DOS disk parameters
  5625                                  
  5626                                  ; 48 tpi diskettes
  5627                                  BPB48T: 	; 02/06/2018 - Retro DOS v3.0
  5628                                  _360K_parameters:
  5629                                  		; 360KB
  5630 0000161A 0002                    		dw 512		; Sector size in bytes.
  5631 0000161C 02                      		db 2		; Sector per allocation unit.
  5632 0000161D 0100                    		dw 1		; Reserved sectors.
  5633 0000161F 02                      		db 2		; Number of allocation tables.
  5634 00001620 7000                    		dw 112		; Number of directory entrys.
  5635 00001622 D002                    		dw 720		; Number of sectors on the disk.
  5636                                  		; Retro Dos v1.0 - 10/02/2018
  5637 00001624 FD                      		db 0FDh		; Media descriptor
  5638 00001625 0200                    		dw 2		; FAT size in sectors
  5639 00001627 0900                    		dw 9		; Sectors per track
  5640 00001629 0200                    		dw 2		; Number of heads
  5641                                  		; Retro DOS v2.0 - 07/04/2018
  5642                                  		;dw 0		; Hidden sectors
  5643                                  		; Retro DOS v3.0 - 02/06/2018
  5644 0000162B 00000000                		dd 0		; Hidden sectors
  5645 0000162F 00000000                		dd 0		; Big Total sectors
  5646                                  ; 96tpi diskettes
  5647                                  BPB96T:		; 02/06/2018 - Retro DOS v3.0
  5648                                  _1200K_parameters:
  5649                                  		; 1.2MB
  5650 00001633 0002                    		dw 512
  5651 00001635 01                                      db 1
  5652 00001636 0100                                    dw 1	
  5653 00001638 02                                      db 2
  5654 00001639 E000                                    dw 224
  5655 0000163B 6009                    		dw 2400
  5656                                  		; Retro DOS v1.0 - 10/02/2018
  5657 0000163D F9                      		db 0F9h		; Media Descriptor
  5658 0000163E 0700                    		dw 7		; FAT size in sectors
  5659 00001640 0F00                    		dw 15		; Sectors per track
  5660 00001642 0200                    		dw 2		; Number of heads
  5661                                  		; Retro DOS v2.0 - 07/04/2018
  5662                                  		;dw 0		; Hidden sectors
  5663                                  		; Retro DOS v3.0 - 02/06/2018
  5664 00001644 00000000                		dd 0		; Hidden sectors
  5665 00001648 00000000                		dd 0		; Big Total sectors
  5666                                  ; 3 1/2 inch diskette bpb
  5667                                  BPB35:		; 02/06/2018 - Retro DOS v3.0	
  5668                                  _720K_paramaters:
  5669                                  		; 720KB
  5670 0000164C 0002                    		dw 512		; Sector size in bytes.
  5671 0000164E 02                      		db 2		; Sector per allocation unit.
  5672 0000164F 0100                    		dw 1		; Reserved sectors.
  5673 00001651 02                      		db 2		; Number of allocation tables.
  5674 00001652 7000                    		dw 112		; Number of directory entrys.
  5675 00001654 A005                    		dw 1440		; Number of sectors on the disk.
  5676                                  		; Retro DOS v1.0 - 10/02/2018
  5677 00001656 F9                      		db 0F9h		; Media descriptor
  5678 00001657 0300                    		dw 3		; FAT size in sectors
  5679 00001659 0900                    		dw 9		; Sectors per track
  5680 0000165B 0200                    		dw 2		; Number of heads
  5681                                  		; Retro DOS v2.0 - 07/04/2018
  5682                                  		;dw 0
  5683                                  		; Retro DOS v3.0 - 02/06/2018
  5684 0000165D 00000000                		dd 0		; Hidden sectors
  5685 00001661 00000000                		dd 0		; Big Total sectors
  5686                                  BPB35H:		; 03/06/2018 - Retro DOS v3.0 (MSDOS 6.0, SYSINIT2.ASM, 1991)		
  5687                                  _1440K_parameters:
  5688                                  		; 1.44MB
  5689 00001665 0002                    		dw 512
  5690 00001667 01                                      db 1
  5691 00001668 0100                                    dw 1	
  5692 0000166A 02                                      db 2
  5693 0000166B E000                                    dw 224
  5694 0000166D 400B                    		dw 2880
  5695                                  		; Retro DOS v1.0 - 10/02/2018
  5696 0000166F F0                      		db 0F0h		; Media descriptor
  5697 00001670 0900                    		dw 9		; FAT size in sectors
  5698 00001672 1200                    		dw 18		; Sectors per track
  5699 00001674 0200                    		dw 2		; Number of heads
  5700                                  		; Retro DOS v2.0 - 07/04/2018
  5701                                  		;dw 0
  5702                                  		; Retro DOS v3.0 - 02/06/2018
  5703 00001676 00000000                		dd 0		; Hidden sectors
  5704 0000167A 00000000                		dd 0		; Big Total sectors
  5705                                  BPB288:		; 03/06/2018 - Retro DOS v3.0 (MSDOS 6.0, SYSINIT2.ASM, 1991)
  5706                                  _2880K_parameters:
  5707                                  		; 2.88MB
  5708 0000167E 0002                    		dw 512
  5709 00001680 02                                      db 2
  5710 00001681 0100                                    dw 1	
  5711 00001683 02                                      db 2
  5712 00001684 F000                                    dw 240
  5713 00001686 8016                    		dw 5760
  5714                                  		; Retro DOS v1.0 - 10/02/2018
  5715 00001688 F0                      		db 0F0h		; Media descriptor
  5716 00001689 0900                    		dw 9		; FAT size in sectors
  5717 0000168B 2400                    		dw 36		; Sectors per track
  5718 0000168D 0200                    		dw 2		; Number of heads
  5719                                  		; Retro DOS v2.0 - 07/04/2018
  5720                                  		;dw 0
  5721                                  		; Retro DOS v3.0 - 02/06/2018
  5722 0000168F 00000000                		dd 0		; Hidden sectors
  5723 00001693 00000000                		dd 0		; Big Total sectors
  5724                                  
  5725                                  ; 06/07/2018
  5726                                  
  5727 00001697 90                      align 2
  5728                                  
  5729                                  BPBTable:
  5730                                  	; Retro DOS v3.0 - 03/06/2018  (MSDOS 6.0, SYSINIT2.ASM, 1991)
  5731 00001698 [1A16]                  		dw	BPB48T	; 48tpi drives
  5732 0000169A [3316]                  		dw	BPB96T	; 96tpi drives
  5733 0000169C [4C16]                  		dw	BPB35	; 3.5" drives
  5734                                  ; the following are not supported, so default to 3.5" media layout
  5735 0000169E [4C16]                  		dw	BPB35	; not used - 8" drives
  5736 000016A0 [4C16]                  		dw	BPB35	; not used - 8" drives
  5737 000016A2 [4C16]                  		dw	BPB35	; not used - hard files
  5738 000016A4 [4C16]                  		dw	BPB35	; not used - tape drives
  5739 000016A6 [6516]                  		dw	BPB35H	; 3 1/2" 1.44mb drive
  5740 000016A8 [4C16]                  		dw	BPB35	; ERIMO
  5741 000016AA [7E16]                  		dw	BPB288	; 2.88 MB diskette drives
  5742                                  		;dw	BPB35H	; 3 1/2" 1.44mb drive
  5743                                  
  5744                                  END_OF_FDP_TBLS:
  5745                                  
  5746                                  ; ----------------------------------------------------------------------------
  5747                                  
  5748                                  ; 10/06/2018
  5749                                  
  5750                                  switchlist:
  5751 000016AC 074648535444434E        	 db	7,"FHSTDCN"         ; Preserve the positions of N and C.
  5752                                  
  5753                                  ; The following depend on the positions of the various letters in SwitchList
  5754                                  
  5755                                  flagdrive   equ     0004H
  5756                                  flagcyln    equ     0008H
  5757                                  flagseclim  equ     0010H
  5758                                  flagheads   equ     0020H
  5759                                  flagff	    equ     0040H
  5760                                  
  5761                                  SWTCHR	EQU "/"	
  5762                                  
  5763                                  ;SYSINITSEG      ENDS
  5764                                  ;       END
  5765                                  
  5766                                  ; ----------------------------------------------------------------------------
  5767                                  ; SYSIMES.ASM, 22/09/1983, -- SYSIMES.INC, 24/07/1987 (MSDOS 3.3) --
  5768                                  ; ----------------------------------------------------------------------------
  5769                                  
  5770                                  ;SYSINITSEG      SEGMENT PUBLIC BYTE 'SYSTEM_INIT'
  5771                                  
  5772                                          ;PUBLIC  BADOPM,CRLFM,BADSIZ,BADLD,BADCOM,SYSSIZE
  5773                                  
  5774                                  BADOPM: 
  5775 000016B4 0D0A556E7265636F67-     	DB      13,10,"Unrecognized command in CONFIG.SYS"
  5775 000016BD 6E697A656420636F6D-
  5775 000016C6 6D616E6420696E2043-
  5775 000016CF 4F4E4649472E535953 
  5776                                  BADSIZ_POST:
  5777                                  BADLD_POST:
  5778 000016D8 0D0A24                  CRLFM:  DB      13,10,'$'
  5779                                  
  5780                                  ;
  5781                                  ;PRINTED when installed device specifies too large a sector size.'$' terminated.
  5782                                  ; FORM: 	<BADSIZ_PRE>device name<BADSIZ_POST>
  5783                                  ;
  5784                                  
  5785                                  BADSIZ_PRE:
  5786 000016DB 0D0A536563746F7220-     	DB      13,10,"Sector size too large in file $"
  5786 000016E4 73697A6520746F6F20-
  5786 000016ED 6C6172676520696E20-
  5786 000016F6 66696C652024       
  5787                                  
  5788                                  ;
  5789                                  ;PRINTED when installed device cannot be found. '$' terminated.
  5790                                  ; FORM: 	<BADLD_PRE>device name<BADLD_POST>
  5791                                  ;
  5792                                  
  5793                                  BADLD_PRE:
  5794 000016FC 0D0A426164206F7220-     	DB      13,10,"Bad or missing $"
  5794 00001705 6D697373696E672024 
  5795                                  
  5796                                  ;
  5797                                  ;PRINTED when command interpreter is not found. NUL terminated.
  5798                                  ; FORM: 	<BADLD_PRE><BADCOM><BADLD_POST>
  5799                                  ;
  5800                                  
  5801 0000170E 436F6D6D616E642049-     BADCOM: DB      "Command Interpreter",0
  5801 00001717 6E7465727072657465-
  5801 00001720 7200               
  5802                                  
  5803                                  ;PRINTED when country code, code page combination was not found ;3.30
  5804                                  ;  in country.sys file. '$' terminated.				;3.30
  5805                                  ; FORM: 	<BADCOUNTRY>					; 3.30		
  5806                                  
  5807                                  BADCOUNTRY:
  5808 00001722 0D0A496E76616C6964-     	DB	13,10,"Invalid country code or code page",13,10,"$" ; 3.30
  5808 0000172B 20636F756E74727920-
  5808 00001734 636F6465206F722063-
  5808 0000173D 6F646520706167650D-
  5808 00001746 0A24               
  5809                                  
  5810                                  ; 10/06/2018
  5811                                  
  5812                                  ;PRINTED when code page id is missing or wrong syntax. - J.K.	;3.30
  5813                                  ; FORM: 	<BADCOUNTRYCOM> 				;3.30
  5814                                  BADCOUNTRYCOM:
  5815 00001748 0D0A4572726F722069-     	DB	13,10,"Error in COUNTRY command",13,10,"$"	;3.30
  5815 00001751 6E20434F554E545259-
  5815 0000175A 20636F6D6D616E640D-
  5815 00001763 0A24               
  5816                                  
  5817                                  ;PRINTED when the memory left is not sufficient to handle COUTRY.SYS file ;3.30
  5818                                  ; FORM: 	<INSUFMEMORY>						  ;3.30
  5819                                  INSUFMEMORY:
  5820 00001765 0D0A496E7375666669-     	DB	13,10,"Insufficient memory for COUNTRY.SYS file",13,10,"$" ;3.30
  5820 0000176E 6369656E74206D656D-
  5820 00001777 6F727920666F722043-
  5820 00001780 4F554E5452592E5359-
  5820 00001789 532066696C650D0A24 
  5821                                  
  5822                                  ; PRINTED when there is insufficient memory. '$' TERMINATED, note
  5823                                  ;   that this message includes crlfm!
  5824                                  ;
  5825                                  BADMEM:
  5826 00001792 0D0A436F6E66696775-     	DB	13,10,"Configuration too large for memory",13,10,"$"
  5826 0000179B 726174696F6E20746F-
  5826 000017A4 6F206C617267652066-
  5826 000017AD 6F72206D656D6F7279-
  5826 000017B6 0D0A24             
  5827                                  
  5828                                  ; 26/03/2018
  5829                                  ; PRINTED when the attempt is made to install a block device which would
  5830                                  ;   have a drive letter > 'Z'
  5831                                  ;
  5832                                  
  5833                                  BADBLOCK:
  5834 000017B9 0D0A546F6F206D616E-     	DB	13,10,"Too many Block Devices",13,10,"$"
  5834 000017C2 7920426C6F636B2044-
  5834 000017CB 6576696365730D0A24 
  5835                                  
  5836                                  ; 10/06/2018
  5837                                  ; PRINTED when the attempt is made to install a stack with invalid	;3.30
  5838                                  ;   combinations of # of stacks, stack size.	- J.K. 5/23/86		;3.30
  5839                                  BADSTACK:
  5840 000017D4 0D0A496E76616C6964-     	DB	13,10,"Invalid STACK parameters",13,10,"$" 		;3.30
  5840 000017DD 20535441434B207061-
  5840 000017E6 72616D65746572730D-
  5840 000017EF 0A24               
  5841                                  
  5842                                  ; 17/07/2019
  5843                                  TooManyDrivesMsg:
  5844 000017F1 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
  5844 000017FA 4C6F676963616C2064-
  5844 00001803 726976657320706173-
  5844 0000180C 74205A3A2065786973-
  5844 00001815 7420616E642077696C-
  5844 0000181E 6C2062652069676E6F-
  5844 00001827 7265640D0A24       
  5845                                  
  5846                                  ;SYSSIZE LABEL   BYTE
  5847                                  
  5848                                  ;SYSINITSEG      ENDS
  5849                                  ;       END
