     1                                  ; ****************************************************************************
     2                                  ; MSDOS3.BIN (MSDOS 3.3 Kernel) - RETRO DOS v3.0 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 16/01/2024 (BugFix)
     5                                  ;	BugFix: 22/11/2022
     6                                  ;	BugFix: 20/05/2019
     7                                  ;	Optimization: 06-22/07/2019
     8                                  ;	Completion: 10/09/2018
     9                                  ; ----------------------------------------------------------------------------
    10                                  ; Beginning: 24/02/2018 (Retro DOS 2.0), 07/07/2018 (Retro DOS 3.0)
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Assembler: NASM version 2.11  
    13                                  ; ----------------------------------------------------------------------------
    14                                  ;	    ((nasm msdos3.s -l msdos3.lst -o MSDOS3.BIN)) 	
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    17                                  ; ----------------------------------------------------------------------------
    18                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    19                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    20                                  ; ****************************************************************************
    21                                  ; main file: 'retrodos3.s'
    22                                  ; incbin 'MSDOS3.BIN' ; (DOSGROUP CODE SEGMENT)
    23                                  ; ----------------------------------------------------------------------------
    24                                  ; 07/07/2018 - Erdogan Tan
    25                                  ; (Note: I have not got MSDOS 3.3 kernel source files; so, I need to continue
    26                                  ; by using disassembled MSDOS.SYS -v3.3- and MSDOS 6.0 kernel source files.)
    27                                  ; ----------------------------------------------------------------------------
    28                                  ; MSDOS 6.0 Kernel source files:
    29                                  ;	MSDATA.ASM, 
    30                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    31                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC)
    32                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    33                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    34                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    35                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    36                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    37                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    38                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    39                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    40                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    41                                  ;
    42                                  ; MSDOS 2.0 Kernel source files:
    43                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    44                                  ;	MSCODE.ASM
    45                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    46                                  
    47                                  ;============================================================================
    48                                  ; DOSLINK
    49                                  ;============================================================================
    50                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    51                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    52                                  ;stdio time xenix xenix2
    53                                  
    54                                  ;============================================================================
    55                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    56                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    57                                  ;============================================================================
    58                                  ;
    59                                  ; ###########################################################################
    60                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    61                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    62                                  ; #			 Licensed to: Freeware version			    #
    63                                  ; ###########################################################################
    64                                  ;
    65                                  ; Input	MD5   :	EF2ADCA1CB3882118FD247DD4C672C81
    66                                  
    67                                  ; ---------------------------------------------------------------------------
    68                                  ; File Name   :	D:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS33.BIN
    69                                  ; Format      :	Binary file
    70                                  ; Base Address:	0000h Range: 0000h - 75CFh Loaded length: 75CFh
    71                                  ;============================================================================
    72                                  ; MSDOS33.BIN = IBMDOS.COM, 17/03/1987, 30159 bytes (IBM PC DOS 3.30 kernel)
    73                                  
    74                                  ;============================================================================
    75                                  ; MSDOS.ASM
    76                                  ;============================================================================
    77                                  
    78                                  ;TITLE   Standard MSDOS
    79                                  ;NAME    MSDOS_2
    80                                  
    81                                  ; Number of disk I/O buffers
    82                                  
    83                                  ;	INCLUDE STDSW.ASM
    84                                  ;       INCLUDE MSHEAD.ASM
    85                                  ;       INCLUDE MSDATA.ASM
    86                                  
    87                                  ;	END
    88                                  
    89                                  ;============================================================================
    90                                  ; STDSW.ASM
    91                                  ;============================================================================
    92                                  
    93                                  TRUE    EQU     0FFFFH
    94                                  FALSE   EQU     ~TRUE ; NOT TRUE
    95                                  
    96                                  ; Use the switches below to produce the standard Microsoft version or the IBM
    97                                  ; version of the operating system
    98                                  ;MSVER   EQU     false
    99                                  ;IBM     EQU     true
   100                                  ;WANG    EQU     FALSE
   101                                  ;ALTVECT EQU     FALSE
   102                                  
   103                                  ; Set this switch to cause DOS to move itself to the end of memory
   104                                  ;HIGHMEM EQU     FALSE
   105                                  
   106                                  ;	IF      IBM
   107                                  ESCCH   EQU     0			; character to begin escape seq.
   108                                  CANCEL  EQU     27			;Cancel with escape
   109                                  TOGLINS EQU     TRUE			;One key toggles insert mode
   110                                  TOGLPRN EQU     TRUE			;One key toggles printer echo
   111                                  ZEROEXT EQU     TRUE
   112                                  ;       ELSE
   113                                  ;       IF      WANG			;Are we assembling for WANG?
   114                                  ;ESCCH   EQU     1FH			;Yes. Use 1FH for escape character
   115                                  ;       ELSE
   116                                  ;ESCCH   EQU     1BH
   117                                  ;       ENDIF
   118                                  ;CANCEL  EQU     "X"-"@"		;Cancel with Ctrl-X
   119                                  ;TOGLINS EQU     WANG			;Separate keys for insert mode on
   120                                  					;and off if not WANG
   121                                  ;TOGLPRN EQU     FALSE			;Separate keys for printer echo on
   122                                  					;and off
   123                                  ;ZEROEXT EQU     TRUE
   124                                  ;        ENDIF
   125                                  
   126                                  ;============================================================================
   127                                  ; MSHEAD.ASM
   128                                  ;============================================================================
   129                                  
   130                                  ;--------------------------------------------------------------
   131                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   132                                  ;--------------------------------------------------------------
   133                                  
   134                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   135                                  ;        by Microsoft MSDOS development group:
   136                                  ;           Tim Paterson (Ret.)
   137                                  ;           Aaron Reynolds
   138                                  ;           Nancy Panners (Parenting)
   139                                  ;           Mark Zbikowski
   140                                  ;           Chris Peters (BIOS) (ret.)
   141                                  
   142                                  ; ****************** Revision History *************************
   143                                  ;          >> EVERY change must noted below!! <<
   144                                  ;
   145                                  ; 0.34 12/29/80 General release, updating all past customers
   146                                  ; 0.42 02/25/81 32-byte directory entries added
   147                                  ; 0.56 03/23/81 Variable record and sector sizes
   148                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   149                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   150                                  ; 0.75 04/17/81 Improve and correct buffer handling
   151                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   152                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   153                                  ; 1.00 04/28/81 Renumber for general release
   154                                  ; 1.01 05/12/81 Fix bug in `STORE'
   155                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   156                                  ;               RENAME fix, general cleanup
   157                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   158                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   159                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   160                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   161                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   162                                  ;               of smaller improvements
   163                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   164                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   165                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   166                                  ;               zero extent field in IBM version (back to 1.01!)
   167                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   168                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   169                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   170                                  ;               is searched first when possible to minimize I/O
   171                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   172                                  ;               full sector write when file is growing
   173                                  ;      03/09/82 Multiple I/O buffers
   174                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   175                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   176                                  ;               must invalidate all buffers (disk and directory).
   177                                  ; 1.27 03/31/82 Installable device drivers
   178                                  ;                 Function call 47 - Get pointer to device table list
   179                                  ;                 Function call 48 - Assign CON AUX LIST
   180                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   181                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   182                                  ;               call entries.  Most CS relative references changed to SS
   183                                  ;               relative with an eye toward putting a portion of the DOS in
   184                                  ;               ROM.  DOS source also broken into header, data and code pieces
   185                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   186                                  ;               return the current values.
   187                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   188                                  ;               call to return flag location (call 29)
   189                                  ;      04/15/82 Volume ID attribute added
   190                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   191                                  ;               avoid a CS relative reference.
   192                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   193                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   194                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   195                                  ;               call 49.
   196                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   197                                  ;               address of DPB
   198                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   199                                  ;               writting to console device via file I/O.  Added a console
   200                                  ;               output attribute to devices.
   201                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   202                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   203                                  ;               as devices....  pipes, redirection now possible
   204                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   205                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   206                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   207                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   208                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   209                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   210                                  ;               out back about 1.27 or so (oops).  ARR
   211                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   212                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   213                                  ;               RMDIR Xenix calls
   214                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   215                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   216                                  ;               Frees up lots of memory.
   217                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   218                                  ;               system buffers
   219                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   220                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   221                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   222                                  ;               changed to set file handle environment.
   223                                  ; 2.00 08/01/82 Number for IBM release
   224                                  ;      01/19/83 No environ bug in EXEC
   225                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   226                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   227                                  ;      01/27/83 Growcnt fixed for 32-bits
   228                                  ;      01/27/83 Find-first problem after create
   229                                  ; 2.01 02/17/83 International DOS
   230                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   231                                  ;               an IBM PC
   232                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   233                                  ; (MSHEAD.ASM, MSDOS6.0, 1991) - mshead.asm 1.1 85/04/10 -
   234                                  ; 2.10 03/09/83 Start of NETWORK support
   235                                  ;		New Buffer structure
   236                                  ;		New Sytem file table structure
   237                                  ;		FCB moved to internal representation
   238                                  ;		DOS re-organized
   239                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   240                                  ;		device interface.
   241                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   242                                  ;               an IBM PC
   243                                  ; 2.50 09/12/83 More network stuff
   244                                  ;
   245                                  ; *************************************************************
   246                                  
   247                                  ; ----------------------------------------------------------------------------
   248                                  ; EQUATES
   249                                  
   250                                  ; Interrupt Entry Points:
   251                                  
   252                                  ; INTBASE:      ABORT
   253                                  ; INTBASE+4:    COMMAND
   254                                  ; INTBASE+8:    BASE EXIT ADDRESS
   255                                  ; INTBASE+C:    CONTROL-C ABORT
   256                                  ; INTBASE+10H:  FATAL ERROR ABORT
   257                                  ; INTBASE+14H:  BIOS DISK READ
   258                                  ; INTBASE+18H:  BIOS DISK WRITE
   259                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   260                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   261                                  ; INTBASE+40H:  Long jump to CALL entry point
   262                                  
   263                                  ENTRYPOINTSEG   EQU     0CH
   264                                  MAXDIF          EQU     0FFFH
   265                                  SAVEXIT         EQU     10
   266                                  ;08/07/2018 - Retro DOS v3.0
   267                                  ;WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   268                                  
   269                                         ; INCLUDE DOSSYM.ASM
   270                                         ; INCLUDE DEVSYM.ASM
   271                                  
   272                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   273                                  ; PAGE
   274                                  ; There are three kinds of context resets that can occur during normal DOS
   275                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   276                                  ; be handles in a clean fashion that allows nested executions along with the
   277                                  ; ability to trap one's own errors.
   278                                  ;
   279                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   280                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   281                                  ;           follows:
   282                                  ;
   283                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   284                                  ;           Save it in static memory.
   285                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   286                                  ;
   287                                  ;           The interrupt service routine must preserve all registers and
   288                                  ;           return carry set iff the operation is to be aborted (via abort
   289                                  ;           system call), otherwise, carry is reset and the operation is
   290                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   291                                  ;           RESULTS.
   292                                  ;
   293                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   294                                  ;           restore INT int_ctrl_c from the saved vector.
   295                                  ;
   296                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   297                                  ;           also preserve registers and return one of three values in AL: 0 and
   298                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   299                                  ;           himself is not to issue the abort, rather, the dos will do it for
   300                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   301                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   302                                  ;
   303                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   304                                  ;           abort call.  This is reserved for knowledgeable system programs.
   305                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   306                                  
   307                                  ;SUBTTL SEGMENT DECLARATIONS
   308                                  
   309                                  ; The following are all of the segments used.  They are declared in the order
   310                                  ; that they should be placed in the executable
   311                                  
   312                                  ;
   313                                  ; segment ordering for MSDOS
   314                                  ;
   315                                  
   316                                  ;START           SEGMENT BYTE PUBLIC 'START'
   317                                  ;START           ENDS
   318                                  
   319                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   320                                  ;CONSTANTS       ENDS
   321                                  
   322                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   323                                  ;DATA            ENDS
   324                                  
   325                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   326                                  ;CODE            ENDS
   327                                  
   328                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   329                                  ;LAST            ENDS
   330                                  
   331                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   332                                  
   333                                  ; The following segment is defined such that the data/const classes appear
   334                                  ; before the code class for ROMification
   335                                  
   336                                  ;START		SEGMENT BYTE PUBLIC 'START'
   337                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   338                                  ;		JMP     DOSINIT
   339                                  ;START		ENDS
   340                                  
   341                                  ;============================================================================
   342                                  ; DOSSYM.ASM
   343                                  ;============================================================================
   344                                  
   345                                  ;<Control character definitions>
   346                                  
   347                                  c_DEL       EQU     7Fh         ;    ASCII rubout or delete previous char
   348                                  c_BS        EQU     08h         ; ^H ASCII backspace
   349                                  c_CR        EQU     0Dh         ; ^M ASCII carriage return
   350                                  c_LF        EQU     0Ah         ; ^J ASCII linefeed
   351                                  c_ETB       EQU     17h         ; ^W ASCII end of transmission
   352                                  c_NAK       EQU     15h         ; ^U ASCII negative acknowledge
   353                                  c_ETX       EQU     03h         ; ^C ASCII end of text
   354                                  c_HT        EQU     09h         ; ^I ASCII tab
   355                                  
   356                                  ;============================================================================
   357                                  ; BPB.INC, MSDOS 3.3, 1987
   358                                  ;============================================================================
   359                                  ; 09/07/2018 - Retro DOS v3.0
   360                                  
   361                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   362                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   363                                  ;									   ;
   364                                  
   365                                  ; BIOS PARAMETER BLOCK DEFINITION
   366                                  ; THIS STRUCTURE IS USED TO BUILD A FULL DPB
   367                                  
   368                                  struc BPBLOCK
   369 00000000 ????                    .SECSZ: resw 1		; Size in bytes of physical sector
   370 00000002 ??                      .CLUS:  resb 1		; Sectors/Alloc unit
   371 00000003 ????                    .RES:   resw 1		; Number of reserved sectors
   372 00000005 ??                      .FTCNT: resb 1		; Number of FATs
   373 00000006 ????                    .DRCNT: resw 1		; Number of directory entries
   374 00000008 ????                    .SCCNT: resw 1		; Total number of sectors
   375 0000000A ??                      .MEDIA: resb 1		; Media descriptor byte
   376 0000000B ????                    .FTSEC:	resw 1		; Number of sectors taken up by one FAT
   377                                  .size:
   378                                  endstruc
   379                                  
   380                                  ; 09/07/2018 - Retro DOS v3.0
   381                                  ; (BPB.INC, MSDOS 6.0, 1991)
   382                                  
   383                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   384                                  ;
   385                                  ;	The BPB contains information about the disk structure.  It dates
   386                                  ;	back to the earliest FAT systems and so FAT information is
   387                                  ;	intermingled with physical driver information.
   388                                  ;
   389                                  ;	A boot sector contains a BPB for its device; for other disks
   390                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
   391                                  ;	information in the DPB.
   392                                  ;
   393                                  ;	The BDS structure contains a BPB within it. 
   394                                  
   395                                  struc A_BPB
   396 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   397 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   398 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   399 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   400 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   401 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   402 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   403 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   404 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   405 0000000F ????                    .BPB_HEADS:		resw	1
   406 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   407 00000013 ????                    			resw	1
   408 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   409 00000017 ????                    			resw	1
   410 00000019 ????????????            			resb	6	; NOTE:  many times these
   411                                  ;					; 	 6 bytes are omitted
   412                                  ;					;	 when BPB manipulations
   413                                  ;					;	 are performed!
   414                                  .size:
   415                                  endstruc
   416                                  
   417                                  ;                                                                          ;
   418                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   419                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   420                                  
   421                                  ;============================================================================
   422                                  ; BUFFER.INC, MSDOS 3.3, 1987
   423                                  ;============================================================================
   424                                  ; 09/07/2018 - Retro DOS v3.0
   425                                  
   426                                  ; <Disk I/O Buffer Header>
   427                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   428                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   429                                  ;                                                                          ;
   430                                  
   431                                  ; Field definition for I/O buffer information
   432                                  
   433                                  struc BUFFINFO
   434 00000000 ????????                .buf_link:	resd 1		; Pointer to next buffer in list
   435 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   436                                  				; SFT table index (bit 7 = 1)
   437                                  				; = FFH if buffer free
   438 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   439                                  				;	= 0 if Local device buffer
   440                                  				; Bit 6 = 1 if buffer dirty
   441                                  				; Bit 5 = Reserved
   442                                  				; Bit 4 = Search bit (bit 7 = 1)
   443                                  				; Bit 3 = 1 if buffer is DATA
   444                                  				; Bit 2 = 1 if buffer is DIR
   445                                  				; Bit 1 = 1 if buffer is FAT
   446                                  				; Bit 0 = Reserved
   447 00000006 ????                    .buf_sector:	resw 1		; Sector number of buffer (bit 7 = 0)
   448                                  ; The next two items are often refed as a word (bit 7 = 0)
   449 00000008 ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   450 00000009 ??                      .buf_wrtcntinc:	resb 1		; "   "     "   , # sectors between each write
   451 0000000A ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   452 0000000E ????                    .buf_fill:	resw 1		; How full buffer is (bit 7 = 1)
   453                                  .size:
   454                                  endstruc
   455                                  
   456                                  %define buf_offset dword [buf_sector]
   457                                  				;For bit 7 = 1, this is the byte
   458                                  				;offset of the start of the buffer in
   459                                  				;the file pointed to by buf_ID.  Thus
   460                                  				;the buffer starts at location
   461                                  				;buf_offset in the file and contains
   462                                  				;buf_fill bytes.
   463                                  
   464                                  BUFINSIZ        EQU     BUFFINFO.size
   465                                  
   466                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   467                                  
   468                                  ;Flag byte masks
   469                                  buf_isnet	EQU	10000000B
   470                                  buf_dirty	EQU	01000000B
   471                                  ;***
   472                                  buf_visit	EQU	00100000B
   473                                  ;***
   474                                  buf_snbuf	EQU	00010000B
   475                                  
   476                                  buf_isDATA	EQU	00001000B
   477                                  buf_isDIR	EQU	00000100B
   478                                  buf_isFAT	EQU	00000010B
   479                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   480                                  
   481                                  buf_NetID	EQU	BUFINSIZ
   482                                  
   483                                  ;                                                                          ;
   484                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   485                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   486                                  
   487                                  ; <User stack inside of system call>
   488                                  ; Location of user registers relative user stack pointer
   489                                  
   490                                  struc	user_env   ; user_environ
   491 00000000 ????                    .user_AX: resw 1
   492 00000002 ????                    .user_BX: resw 1
   493 00000004 ????                    .user_CX: resw 1
   494 00000006 ????                    .user_DX: resw 1
   495 00000008 ????                    .user_SI: resw 1
   496 0000000A ????                    .user_DI: resw 1
   497 0000000C ????                    .user_BP: resw 1
   498 0000000E ????                    .user_DS: resw 1
   499 00000010 ????                    .user_ES: resw 1
   500 00000012 ????                    .user_IP: resw 1
   501 00000014 ????                    .user_CS: resw 1
   502 00000016 ????                    .user_F:  resw 1
   503                                  .size:
   504                                  endstruc
   505                                  
   506                                  ; 09/07/2018 - Retro DOS v3.0
   507                                  ; (VECTOR.INC, MSDOS 3.3, 1987)
   508                                  ; ----------------------------------------------------------------------------
   509                                  
   510                                  ; <interrupt definitions>
   511                                  
   512                                  INTTAB          EQU     20H
   513                                  INTBASE         EQU     4 * INTTAB
   514                                  ENTRYPOINT      EQU     INTBASE+40H
   515                                  
   516                                  ;	IF      ALTVECT
   517                                  ;ALTTAB  EQU     0F0H
   518                                  ;ALTBASE EQU     4 * ALTTAB
   519                                  ;	ENDIF
   520                                  
   521                                  ;
   522                                  ; interrupt assignments
   523                                  ;
   524                                  ;	IF	NOT ALTVECT
   525                                  int_abort	    EQU     INTTAB	; abort process
   526                                  int_command	    EQU     int_abort+1 ; call MSDOS
   527                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   528                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   529                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   530                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   531                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   532                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   533                                  					; resident
   534                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   535                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   536                                  ;									   ;
   537                                  int_spooler	    EQU     int_abort+8 ; spooler call
   538                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   539                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   540                                  ;									   ;
   541                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   542                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   543                                  ;	ELSE
   544                                  ;int_abort	    EQU     INTTAB	; abort process
   545                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   546                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   547                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   548                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   549                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   550                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   551                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   552                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   553                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   554                                  ;									   ;
   555                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   556                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   557                                  ;									   ;
   558                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   559                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   560                                  ;	ENDIF
   561                                  
   562                                  addr_int_abort		EQU    4 * int_abort
   563                                  addr_int_command	EQU    4 * int_command
   564                                  addr_int_terminate	EQU    4 * int_terminate
   565                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   566                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   567                                  addr_int_disk_read	EQU    4 * int_disk_read
   568                                  addr_int_disk_write	EQU    4 * int_disk_write
   569                                  addr_int_keep_process	EQU    4 * int_keep_process
   570                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   571                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   572                                  ;									   ;
   573                                  addr_int_spooler	EQU    4 * int_spooler
   574                                  addr_int_fastcon	EQU    4 * int_fastcon
   575                                  addr_int_IBM		EQU    4 * int_IBM
   576                                  ;									   ;
   577                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   578                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   579                                  
   580                                  
   581                                  ; <Disk map>
   582                                  ;  MSDOS partitions the disk into 4 sections:
   583                                  ;
   584                                  ;  phys sector 0:   +-------------------+
   585                                  ;       |           | boot/reserved     |
   586                                  ;       |           +-------------------+
   587                                  ;       |           |  File allocation  |
   588                                  ;       v           |      table(s)     |
   589                                  ;                   |  (multiple copies |
   590                                  ;                   |     are kept)     |
   591                                  ;                   +-------------------+
   592                                  ;                   |     Directory     |
   593                                  ;                   +-------------------+
   594                                  ;                   |     File space    |
   595                                  ;                   +-------------------+
   596                                  ;                   |   Unaddressable   |
   597                                  ;                   |  (to end of disk) |
   598                                  ;                   +-------------------+
   599                                  ;
   600                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   601                                  ; adjusted to maximize the file space addressable.
   602                                  
   603                                  ; BREAK <Directory entry>
   604                                  
   605                                  ;
   606                                  ;       +---------------------------+
   607                                  ;       |  (12 BYTE) filename/ext   |       0       0
   608                                  ;       +---------------------------+
   609                                  ;       |     (BYTE) attributes     |       11      B
   610                                  ;       +---------------------------+
   611                                  ;       |    (10 BYTE) reserved     |       12      C
   612                                  ;       +---------------------------+
   613                                  ;       | (WORD) time of last write |       22      16
   614                                  ;       +---------------------------+
   615                                  ;       | (WORD) date of last write |       24      18
   616                                  ;       +---------------------------+
   617                                  ;       |   (WORD) First cluster    |       26      1A
   618                                  ;       +---------------------------+
   619                                  ;       |     (DWORD) file size     |       28      1C
   620                                  ;       +---------------------------+
   621                                  ;
   622                                  ;   First byte of filename  = E5 -> free directory entry
   623                                  ;                           = 00 -> end of allocated directory
   624                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   625                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   626                                  ;
   627                                  struc dir_entry
   628 00000000 <res Bh>                .dir_name:	resb 11			; file name
   629 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   630 0000000C <res Ah>                .dir_pad:	resb 10			; reserved for expansion
   631 00000016 ????                    .dir_time:	resw 1			; time of last write
   632 00000018 ????                    .dir_date:	resw 1			; date of last write
   633 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   634 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   635 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   636                                  .size:
   637                                  endstruc
   638                                  
   639                                  attr_read_only      EQU      1h
   640                                  attr_hidden         EQU      2h
   641                                  attr_system         EQU      4h
   642                                  attr_volume_id      EQU      8h
   643                                  attr_directory      EQU     10h
   644                                  attr_archive        EQU     20h
   645                                  ;09/07/2018 - Retro DOS v3.0
   646                                  ;(DIRENT.INC, MSDOS 3.3, 1987)
   647                                  attr_device	    EQU     40h	; This is a VERY special bit.
   648                                  				;   NO directory entry on a disk EVER
   649                                  				;   has this bit set. It is set non-zero
   650                                  				;   when a device is found by GETPATH
   651                                  
   652                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   653                                                                          ; OR of hard attributes for FINDENTRY
   654                                  
   655                                  attr_ignore         EQU     attr_read_only+attr_archive
   656                                                                          ; ignore this(ese) attribute(s)
   657                                                                          ; during search first/next
   658                                  
   659                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   660                                                                          ; changeable via CHMOD
   661                                  
   662                                  ; 09/08/2018 - Retro DOS v3.0
   663                                  ; (DIRENT.INC, MSDOS 6,0, 1991)
   664                                  DIRFREE 	equ	0E5h	; stored in dir_name[0] to indicate free slot
   665                                  
   666                                  ; <File allocation Table information>
   667                                  ;
   668                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on the
   669                                  ; disk.  These entries are packed, two for every three bytes.  The contents of
   670                                  ; entry number N is found by 1) multiplying N by 1.5; 2) adding the result to
   671                                  ; the base address of the Allocation Table; 3) fetching the 16-bit word at this
   672                                  ; address; 4) If N was odd (so that N*1.5 was not an integer), shift the word
   673                                  ; right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry number zero
   674                                  ; is used as an end-of-file trap in the OS and is passed to the BIOS to help
   675                                  ; determine disk format.  Entry 1 is reserved for future use.  The first
   676                                  ; available allocation unit is assigned entry number two, and even though it is
   677                                  ; the first, is called cluster 2.  Entries greater than 0FF8H are end of file
   678                                  ; marks; entries of zero are unallocated.  Otherwise, the contents of a FAT
   679                                  ; entry is the number of the next cluster in the file.
   680                                  ;
   681                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would do
   682                                  ; because these clusters show as allocated, but are not part of any allocation
   683                                  ; chain and thus will never be allocated to a file.  A particular number is
   684                                  ; selected so that disk checking programs know what to do (ie.  a cluster with
   685                                  ; entry FF7H which is not in a chain is not an error).
   686                                  
   687                                  ;DIRSTRLEN       EQU     64	; Max length in bytes of directory strings
   688                                  
   689                                  ; 19/07/2018
   690                                  ; (DPB.INC, MSDOS 3.3, 1987)
   691                                  ; 07/07/2018 - Retro DOS v3.0
   692                                  ; (DPB.INC, MSDOS 6.0, 1991)
   693                                  ; ----------------------------------------------------------------------------
   694                                  ;**	DPB - Drive Parameter Block
   695                                  ;
   696                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   697                                  ;	possibly inaccurate deductions from code study... - jgl
   698                                  ;
   699                                  ;	The DPB is DOS's main structure for describing block devices.
   700                                  ;	It contains info about the "Drive" intermingled with info about
   701                                  ;	the FAT file system which is presumably on the drive.  I don't know
   702                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   703                                  ;
   704                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   705                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   706                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   707                                  
   708                                  struc	DPB
   709 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   710 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   711 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   712 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   713 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   714 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   715 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   716 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   717 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   718 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   719                                  ; MSDOS 3.3
   720 0000000F ??                      .FAT_SIZE:	resb 1		; Number of records occupied by FAT
   721                                  ; MSDOS 6.0
   722                                  ;.FAT_SIZE:	resw 1		; Number of records occupied by FAT
   723 00000010 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   724 00000012 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   725 00000016 ??                      .MEDIA:		resb 1		; Media byte
   726 00000017 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   727                                  				; check the first time this DPB is used
   728 00000018 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   729 0000001C ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   730 0000001E ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   731                                  .size:
   732                                  endstruc
   733                                  
   734                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   735                                  
   736                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   737                                  
   738                                  ;                                                                          ;
   739                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   740                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   741                                  
   742                                  ; 12/07/2018 - Retro DOS v3.0 
   743                                  ; (DOSSYM.INC, MSDOS 6.0, 1991)
   744                                  
   745                                  ;**	Character Type Flags
   746                                  ;
   747                                  ;	These flags are used in a lookup table indexed by the character code.
   748                                  ;	They're used to quickly classify characters when parsing paths.
   749                                  ;	I think that these are only used to parse FCBs - jgl
   750                                  
   751                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   752                                  FDELIM	equ 2		; is a delimiter
   753                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   754                                  FFCB	equ 8		; is valid in an FCB
   755                                  
   756                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   757                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   758                                  ;                                                                          ;
   759                                  devid_file_clean        EQU     40h     ; true if file and not written
   760                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   761                                  
   762                                  devid_device            EQU     80h     ; true if a device
   763                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   764                                  devid_device_raw        EQU     20h     ; true if in raw mode
   765                                  devid_device_special    EQU     10h     ; true if special device
   766                                  devid_device_clock      EQU     08h     ; true if clock device
   767                                  devid_device_null       EQU     04h     ; true if null device
   768                                  devid_device_con_out    EQU     02h     ; true if console output
   769                                  devid_device_con_in     EQU     01h     ; true if consle input
   770                                  
   771                                  ;
   772                                  ; structure of devid field as returned by IOCTL is:
   773                                  ;
   774                                  ;       BIT     7   6   5   4   3   2   1   0
   775                                  ;             |---|---|---|---|---|---|---|---|
   776                                  ;             | I | E | R | S | I | I | I | I |
   777                                  ;             | S | O | A | P | S | S | S | S |
   778                                  ;             | D | F | W | E | C | N | C | C |
   779                                  ;             | E |   |   | C | L | U | O | I |
   780                                  ;             | V |   |   | L | K | L | T | N |
   781                                  ;             |---|---|---|---|---|---|---|---|
   782                                  ;       ISDEV = 1 if this channel is a device
   783                                  ;             = 0 if this channel is a disk file
   784                                  ;
   785                                  ;       If ISDEV = 1
   786                                  ;
   787                                  ;             EOF = 0 if End Of File on input
   788                                  ;             RAW = 1 if this device is in Raw mode
   789                                  ;                 = 0 if this device is cooked
   790                                  ;             ISCLK = 1 if this device is the clock device
   791                                  ;             ISNUL = 1 if this device is the null device
   792                                  ;             ISCOT = 1 if this device is the console output
   793                                  ;             ISCIN = 1 if this device is the console input
   794                                  ;
   795                                  ;       If ISDEV = 0
   796                                  ;             EOF = 0 if channel has been written
   797                                  ;             Bits 0-5  are  the  block  device  number  for
   798                                  ;                 the channel (0 = A, 1 = B, ...)
   799                                  ;
   800                                  devid_ISDEV     EQU     80h
   801                                  devid_EOF       EQU     40h
   802                                  devid_RAW       EQU     20h
   803                                  devid_SPECIAL   EQU     10H
   804                                  devid_ISCLK     EQU     08h
   805                                  devid_ISNUL     EQU     04h
   806                                  devid_ISCOT     EQU     02h
   807                                  devid_ISCIN     EQU     01h
   808                                  
   809                                  devid_block_dev EQU     1Fh             ; mask for block device number
   810                                  
   811                                  ; 08/07/2018 - Retro DOS v3.0
   812                                  ; (PDB.INC, MSDOS 6.0, 1991)
   813                                  ; ----------------------------------------------------------------------------
   814                                  ; BREAK <Process data block>
   815                                  ;
   816                                  ;**	Process data block (otherwise known as program header)
   817                                  ;
   818                                  
   819                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
   820                                  ;	can be rearranged here, ever.  Reserved areas are probably safe
   821                                  ;	for use.
   822                                  
   823                                  FILPERPROC	EQU     20
   824                                  
   825                                  struc PDB	; Process_data_block
   826 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   827 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   828 00000004 ??                                      resb 1
   829 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   830 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   831 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   832 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   833 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   834 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   835 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   836 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   837 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
   838 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
   839 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
   840 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
   841 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
   842 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
   843 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
   844 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
   845 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   846 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
   847                                  				;  an extended FCB
   848                                  ;endstruc 	; MSDOS 3.3
   849                                  	  	; MSDOS 6.0
   850 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
   851 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
   852 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
   853 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
   854                                  endstruc
   855                                  
   856                                  ; BREAK <EXEC and EXE file structures>
   857                                  ;
   858                                  ; EXEC arg block - load/go program
   859                                  ;
   860                                  
   861                                  ;
   862                                  ; The following get used as arguments to the EXEC system call.  They indicate
   863                                  ; whether or not the program is executed or whether or not a program header
   864                                  ; gets created.
   865                                  ;
   866                                  exec_func_no_execute    EQU 1           ; no execute bit
   867                                  exec_func_overlay       EQU 2           ; overlay bit
   868                                  
   869                                  struc EXEC0
   870 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
   871 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
   872 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
   873 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
   874                                  .size:
   875                                  endstruc
   876                                  
   877                                  struc EXEC1
   878 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
   879 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
   880 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
   881 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
   882 0000000E ????                    .SP:		resw 1		; stack pointer of program
   883 00000010 ????                    .SS:		resw 1		; stack seg register of program
   884 00000012 ????                    .IP:		resw 1		; entry point IP
   885 00000014 ????                    .CS:		resw 1		; entry point CS
   886                                  .size:
   887                                  endstruc
   888                                  
   889                                  struc EXEC3
   890 00000000 ????                    .load_addr:	resw 1		; seg address of load point
   891 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
   892                                  endstruc
   893                                  
   894                                  ; 02/08/2018 (MSDOS 6.0, EXEC.INC, 1991)
   895                                  ;**	Exit codes (in upper byte) for terminating programs
   896                                  
   897                                  EXIT_TERMINATE		EQU	0
   898                                  EXIT_ABORT		EQU	0
   899                                  EXIT_CTRL_C		EQU	1
   900                                  EXIT_HARD_ERROR 	EQU	2
   901                                  EXIT_KEEP_PROCESS	EQU	3
   902                                  
   903                                  ;
   904                                  ; EXE file header
   905                                  ;
   906                                  
   907                                  struc EXE
   908 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
   909 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
   910 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
   911 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
   912 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
   913 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
   914 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
   915 0000000E ????                    .SS:          resw 1		; stack of image
   916 00000010 ????                    .SP:          resw 1		; SP of image
   917 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
   918 00000014 ????                    .IP:          resw 1		; IP of entry
   919 00000016 ????                    .CS:          resw 1		; CS of entry
   920 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
   921 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
   922 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
   923                                  .size:
   924                                  endstruc
   925                                  
   926                                  exe_valid_signature     EQU 5A4Dh
   927                                  exe_valid_old_signature EQU 4D5Ah
   928                                  
   929                                  struc symbol_entry
   930 00000000 ????????                .value:	resd 1
   931 00000004 ????                    .type:	resw 1
   932 00000006 ??                      .len:	resb 1
   933 00000007 <res FFh>               .name:	resb 255
   934                                  endstruc
   935                                  
   936                                  ; 07/07/2018 - Retro DOS v3.0
   937                                  ; MSDOS 6.0 (SF.INC, 1991)
   938                                  ; ----------------------------------------------------------------------------
   939                                  ;**	SF.INC - System File Table
   940                                  ;
   941                                  ;   AN000   version 4.00   Jan. 1988
   942                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   943                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   944                                  
   945                                  ;**	System File Table SuperStructure
   946                                  ;
   947                                  ;	The system file table entries are allocated in contiguous groups.
   948                                  ;	There may be more than one such groups; the SF "superstructure"
   949                                  ;	tracks the groups.
   950                                  
   951                                  struc	SFT
   952 00000000 ????????                .SFLink:	resd 1
   953 00000004 ????                    .SFCount:	resw 1		; number of entries
   954 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   955                                  .size:
   956                                  endstruc
   957                                  
   958                                  ; 07/07/2018 - Retro DOS v3.0
   959                                  ; MSDOS 6.0 (SF.INC, 1991)
   960                                  ; ----------------------------------------------------------------------------
   961                                  ;**	System file table entry
   962                                  ;
   963                                  ;	These are the structures which are at SFTABLE in the SF structure.
   964                                  
   965                                  struc SF_ENTRY
   966 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   967                                  				;   if FCB then ref count
   968 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   969 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   970 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   971                                  				; Bit 15 = 1 if remote file
   972                                  				;	 = 0 if local file or device
   973                                  				; Bit 14 = 1 if date/time is not to be
   974                                  				;   set from clock at CLOSE.  Set by
   975                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   976                                  				;   other reseters of the dirty bit
   977                                  				;   (WRITE)
   978                                  				; Bit 13 = Pipe bit (reserved)
   979                                  				;
   980                                  				; Bits 0-7 (old FCB_devid bits)
   981                                  				; If remote file or local file, bit
   982                                  				; 6=0 if dirty Device ID number, bits
   983                                  				; 0-5 if local file.
   984                                  				; bit 7=0 for local file, bit 7
   985                                  				;      =1 for local I/O device
   986                                  				; If local I/O device, bit 6=0 if EOF (input)
   987                                  				;		Bit 5=1 if Raw mode
   988                                  				;		Bit 0=1 if console input device
   989                                  				;		Bit 1=1 if console output device
   990                                  				;		Bit 2=1 if null device
   991                                  				;		Bit 3=1 if clock device
   992 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   993                                  				; to device header if local device,
   994                                  				; points to net device header if
   995                                  				; remote
   996 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   997 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   998 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   999 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
  1000 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
  1001                                  
  1002                                  ; Starting here, the next 7 bytes may be used by the file system to store an
  1003                                  ; ID
  1004                                  
  1005                                  ; 09/07/2018 - Retro DOS v3.0
  1006                                  
  1007                                  ; MSDOS 3.3 SF.INC, 1987
  1008 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
  1009 0000001B ????                    .sf_lstclus	resw	1	; Last cluster accessed
  1010 0000001D ????                    .sf_dirsec:	resw	1	; Sector number of directory sector
  1011                                  				; for this file
  1012 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
  1013                                  
  1014                                  ; MSDOS 6.0, SF.INC, 1991
  1015                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
  1016                                  ;.sf_dirsec:	resd	1	; Sector number of directory sector
  1017                                  ;				; for this file
  1018                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
  1019                                  
  1020                                  ; End of 7 bytes of file-system specific info.
  1021                                  
  1022 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
  1023                                  				; directory entry.  This is used by
  1024                                  				; close to detect file deleted and
  1025                                  				; disk changed errors.
  1026                                  ; SHARING INFO
  1027 0000002B ????????                .sf_chain:	resd	1	; link to next SF
  1028 0000002F ????                    .sf_UID:	resw	1
  1029 00000031 ????                    .sf_PID:	resw	1
  1030 00000033 ????                    .sf_MFT:	resw	1
  1031                                  
  1032                                  ; MSDOS 6.0, SF.INC, 1991
  1033                                  ;.sf_lstclus:	resw	1	;AN009; Last cluster accessed
  1034                                  ;.sf_IFS_HDR:	resd	1
  1035                                  
  1036                                  .size:
  1037                                  endstruc
  1038                                  
  1039                                  ; 20/07/2018
  1040                                  ; MSDOS 3.3, SF.INC, 1987
  1041                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
  1042                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
  1043                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
  1044                                  ; MSDOS 6.0, SDF.INC, 1991
  1045                                  %define sf_fsda	     SF_ENTRRY.sf_cluspos ; byte ;DOS 4.00
  1046                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
  1047                                  
  1048                                  ; 19/07/2018
  1049                                  
  1050                                  ; MSDOS 3.3, SF.INC, 1987
  1051                                  
  1052                                  sf_default_number  EQU	5
  1053                                  
  1054                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
  1055                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
  1056                                  ; by placing a -1 in the ref_count field.
  1057                                  
  1058                                  sf_busy EQU -1
  1059                                  
  1060                                  ; mode mask for FCB detection
  1061                                  sf_isFCB		EQU	1000000000000000B
  1062                                  
  1063                                  ; Flag word masks
  1064                                  sf_isnet		EQU	1000000000000000B
  1065                                  sf_close_nodate 	EQU	0100000000000000B
  1066                                  sf_pipe 		EQU	0010000000000000B
  1067                                  sf_no_inherit		EQU	0001000000000000B
  1068                                  sf_net_spool		EQU	0000100000000000B
  1069                                  
  1070                                  ; 19/04/2018
  1071                                  sf_entry_size equ SF_ENTRY.size ; 53
  1072                                  
  1073                                  ;                                                                          ;
  1074                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1075                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1076                                  
  1077                                  ; 09/07/2018 - Retro DOS v3.0
  1078                                  ; (ARENA.INC, MSDOS 3.3, 1987)
  1079                                  ; ----------------------------------------------------------------------------
  1080                                  ;BREAK <Memory arena structure>
  1081                                  
  1082                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1083                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1084                                  ;                                                                          ;
  1085                                  ;
  1086                                  ; arena item
  1087                                  ;
  1088                                  
  1089                                  struc ARENA
  1090 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1091 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1092 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1093                                  endstruc
  1094                                  
  1095                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1096                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1097                                  ; Change them and change ALLOC.ASM.
  1098                                  
  1099                                  arena_owner_system  EQU 0               ; free block indication
  1100                                  
  1101                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1102                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1103                                  
  1104                                  ; 04/08/2018 - Retro DOS v3.0
  1105                                  ; (ARENA.INC, MSDOS 6.0, 1991)
  1106                                  
  1107                                  FIRST_FIT	EQU	00000000B
  1108                                  BEST_FIT	EQU	00000001B
  1109                                  LAST_FIT	EQU	00000010B
  1110                                  
  1111                                  ; MSDOS 6.0
  1112                                  ;LOW_FIRST	EQU	00000000B	; M001
  1113                                  ;HIGH_FIRST	EQU	10000000B	; M001
  1114                                  ;HIGH_ONLY	EQU	01000000B	; M001
  1115                                  
  1116                                  ;LINKSTATE	EQU	00000001B	; M002
  1117                                  
  1118                                  ;HF_MASK		EQU	~HIGH_FIRST	; M001
  1119                                  ;HO_MASK		EQU	~HIGH_ONLY	; M001
  1120                                  
  1121                                  ;STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1122                                  						; M026: used to mask of bits
  1123                                  						; M026: 6 & 7 of AllocMethod
  1124                                  
  1125                                  ; 07/07/2018 - Retro DOS v3.0
  1126                                  ; (MI.INC, MSDOS 6.0, 1991)
  1127                                  ; ----------------------------------------------------------------------------
  1128                                  ;BREAK <Machine instruction, flag definitions and character types>
  1129                                  
  1130                                  mi_INT		EQU	0CDh
  1131                                  mi_Long_JMP	EQU	0EAh
  1132                                  mi_Long_CALL	EQU	09Ah
  1133                                  mi_Long_RET	EQU	0CBh
  1134                                  mi_Near_RET	EQU	0C3h
  1135                                  
  1136                                  ;			xxxxoditszxaxpxc
  1137                                  f_Overflow	EQU	0000100000000000B
  1138                                  f_Direction	EQU	0000010000000000B
  1139                                  f_Interrupt	EQU	0000001000000000B
  1140                                  f_Trace 	EQU	0000000100000000B
  1141                                  f_Sign		EQU	0000000010000000B
  1142                                  f_Zero		EQU	0000000001000000B
  1143                                  f_Aux		EQU	0000000000010000B
  1144                                  f_Parity	EQU	0000000000000100B
  1145                                  f_Carry 	EQU	0000000000000001B
  1146                                  
  1147                                  ; <Standard I/O assignments>
  1148                                  
  1149                                  stdin       EQU     0
  1150                                  stdout      EQU     1
  1151                                  stderr      EQU     2
  1152                                  stdaux      EQU     3
  1153                                  stdprn      EQU     4
  1154                                  
  1155                                  ; <Xenix subfunction assignments>
  1156                                  
  1157                                  open_for_read   EQU 0
  1158                                  open_for_write  EQU 1
  1159                                  open_for_both   EQU 2
  1160                                  
  1161                                  ; 13/07/2018 - Retro DOS v3.0
  1162                                  ; (FILEMODE.INC, MSDOS 6.0, 1991)
  1163                                  
  1164                                  access_mask	EQU 0Fh ; 09/08/2018
  1165                                  
  1166                                  EXEC_OPEN	EQU 3		; access code of 3 indicates that open was 
  1167                                  				; made from exec
  1168                                  SHARING_MASK	    equ 0F0h
  1169                                  SHARING_COMPAT	    equ 000h
  1170                                  SHARING_DENY_BOTH   equ 010h
  1171                                  SHARING_DENY_WRITE  equ 020h
  1172                                  SHARING_DENY_READ   equ 030h
  1173                                  SHARING_DENY_NONE   equ 040h
  1174                                  SHARING_NET_FCB     equ 070h
  1175                                  SHARING_NO_INHERIT  equ 080h
  1176                                  
  1177                                  ; 09/07/2018 - Retro DOS v3.0
  1178                                  ; (SYSCALL.INC, MSDOS 3.3, 1987)
  1179                                  ; ----------------------------------------------------------------------------
  1180                                  
  1181                                  ; <system call definitions>
  1182                                  
  1183                                  ABORT                           EQU 0   ;  0      0
  1184                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1185                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1186                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1187                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1188                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1189                                  RAW_CON_IO                      EQU 6   ;  6      6
  1190                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1191                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1192                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1193                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1194                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1195                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1196                                  DISK_RESET                      EQU 13  ; 13      D
  1197                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1198                                  FCB_OPEN                        EQU 15  ; 15      F
  1199                                  FCB_CLOSE                       EQU 16  ; 16     10
  1200                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1201                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1202                                  FCB_DELETE                      EQU 19  ; 19     13
  1203                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1204                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1205                                  FCB_CREATE                      EQU 22  ; 22     16
  1206                                  FCB_RENAME                      EQU 23  ; 23     17
  1207                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1208                                  SET_DMA                         EQU 26  ; 26     1A
  1209                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1210                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1211                                  ;                                                                          ;
  1212                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1213                                  ;                                                                          ;
  1214                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1215                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1216                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1217                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1218                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1219                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1220                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1221                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1222                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1223                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1224                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1225                                  GET_DATE                        EQU 42  ; 42     2A
  1226                                  SET_DATE                        EQU 43  ; 43     2B
  1227                                  GET_TIME                        EQU 44  ; 44     2C
  1228                                  SET_TIME                        EQU 45  ; 45     2D
  1229                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1230                                  ; Extended functionality group
  1231                                  GET_DMA                         EQU 47  ; 47     2F
  1232                                  GET_VERSION                     EQU 48  ; 48     30
  1233                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1234                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1235                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1236                                  ;                                                                          ;
  1237                                  GET_DPB                         EQU 50  ; 50     32
  1238                                  ;                                                                          ;
  1239                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1240                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1241                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1242                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1243                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1244                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1245                                  CHAR_OPER                       EQU 55  ; 55     37
  1246                                  INTERNATIONAL                   EQU 56  ; 56     38
  1247                                  ; XENIX CALLS
  1248                                  ;   Directory Group
  1249                                  MKDIR                           EQU 57  ; 57     39
  1250                                  RMDIR                           EQU 58  ; 58     3A
  1251                                  CHDIR                           EQU 59  ; 59     3B
  1252                                  ;   File Group
  1253                                  CREAT                           EQU 60  ; 60     3C
  1254                                  OPEN                            EQU 61  ; 61     3D
  1255                                  CLOSE                           EQU 62  ; 62     3E
  1256                                  READ                            EQU 63  ; 63     3F
  1257                                  WRITE                           EQU 64  ; 64     40
  1258                                  UNLINK                          EQU 65  ; 65     41
  1259                                  LSEEK                           EQU 66  ; 66     42
  1260                                  CHMOD                           EQU 67  ; 67     43
  1261                                  IOCTL                           EQU 68  ; 68     44
  1262                                  XDUP                            EQU 69  ; 69     45
  1263                                  XDUP2                           EQU 70  ; 70     46
  1264                                  CURRENT_DIR                     EQU 71  ; 71     47
  1265                                  ;    Memory Group
  1266                                  ALLOC                           EQU 72  ; 72     48
  1267                                  DEALLOC                         EQU 73  ; 73     49
  1268                                  SETBLOCK                        EQU 74  ; 74     4A
  1269                                  ;    Process Group
  1270                                  EXEC                            EQU 75  ; 75     4B
  1271                                  EXIT                            EQU 76  ; 76     4C
  1272                                  _WAIT				EQU 77  ; 77     4D
  1273                                  FIND_FIRST                      EQU 78  ; 78     4E
  1274                                  ;   Special Group
  1275                                  FIND_NEXT                       EQU 79  ; 79     4F
  1276                                  ; SPECIAL SYSTEM GROUP
  1277                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1278                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1279                                  ;                                                                          ;
  1280                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1281                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1282                                  GET_IN_VARS                     EQU 82  ; 82     52
  1283                                  SETDPB                          EQU 83  ; 83     53
  1284                                  ;                                                                          ;
  1285                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1286                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1287                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1288                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1289                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1290                                  ;                                                                          ;
  1291                                  DUP_PDB                         EQU 85  ; 85     55
  1292                                  ;                                                                          ;
  1293                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1294                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1295                                  RENAME                          EQU 86  ; 86     56
  1296                                  FILE_TIMES                      EQU 87  ; 87     57
  1297                                  ALLOCOPER			EQU 88	; 88	 58
  1298                                  ; Network extention system calls
  1299                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1300                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1301                                  CREATENEWFILE			EQU 91	; 91	 5B
  1302                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1303                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1304                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1305                                  ;									   ;
  1306                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1307                                  					;	    CloseByName, CloseUser,
  1308                                  					;	    CloseUserProcess,
  1309                                  					;	    GetOpenFileList
  1310                                  ;									   ;
  1311                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1312                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1313                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1314                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1315                                  XNAMETRANS			EQU 96	; 96	 60
  1316                                  PATHPARSE			EQU 97	; 97	 61
  1317                                  GETCURRENTPSP			EQU 98	; 98	 62
  1318                                  HONGEUL 			EQU 99	; 99	 63
  1319                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1320                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1321                                  ;									   ;
  1322                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1323                                  ;									   ;
  1324                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1325                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1326                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1327                                  GETSETCDPG			EQU 102 ; 102	 66
  1328                                  EXTHANDLE			EQU 103 ; 103	 67
  1329                                  COMMIT				EQU 104 ; 104	 68
  1330                                  
  1331                                  ; 09/07/2018 - Retro DOS v3.0
  1332                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1333                                  
  1334                                  ;GetSetMediaID			EQU 105 ; 105	 69
  1335                                  ;IFS_IOCTL			EQU 107 ; 107	 6B
  1336                                  ;ExtOpen 			EQU 108 ; 108	 6C
  1337                                  
  1338                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1339                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1340                                  ;                                                                          ;
  1341                                  ;ifdef ROMEXEC
  1342                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1343                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1344                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1345                                  ;endif
  1346                                  ;                                                                          ;
  1347                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1348                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1349                                  
  1350                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1351                                  ;OEM_C1				EQU 249 ; 249    F9
  1352                                  ;OEM_C2				EQU 250 ; 250    FA
  1353                                  ;OEM_C3				EQU 251 ; 251    FB
  1354                                  ;OEM_C4				EQU 252 ; 252    FC
  1355                                  ;OEM_C5				EQU 253 ; 253    FD
  1356                                  ;OEM_C6				EQU 254 ; 254    FE
  1357                                  ;OEM_C7				EQU 255 ; 255    FF
  1358                                  
  1359                                  ;============================================================================
  1360                                  ; VERSIONA.INC (MSDOS 3.3, 24/07/1987)
  1361                                  ;============================================================================
  1362                                  ; 08/07/2018 - Retro DOS 3.0
  1363                                  
  1364                                  MAJOR_VERSION   EQU     3
  1365                                  MINOR_VERSION   EQU     30
  1366                                  
  1367                                  ;============================================================================
  1368                                  ; DOSSYM_V211.ASM (-*-)
  1369                                  ;============================================================================
  1370                                  
  1371                                  ;DOS_MAJOR_VERSION   EQU      2
  1372                                  ;DOS_MINOR_VERSION   EQU     11
  1373                                  
  1374                                  ;============================================================================
  1375                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1376                                  ;============================================================================
  1377                                  ; 09/07/2018 - Retro DOS 3.0
  1378                                  
  1379                                  ;
  1380                                  ; Current structure of the data returned by the international call
  1381                                  ;
  1382                                  
  1383                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1384                                  .Date_tim_format:
  1385 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1386                                  .Currency_sym:
  1387 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1388                                  .Thous_sep:
  1389 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1390                                  .Decimal_sep:
  1391 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1392                                  .Date_sep:
  1393 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1394                                  .Time_sep:
  1395 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1396                                  .Bit_field:	
  1397 0000000F ??                      		RESB 1		; Bit values
  1398                                                                     ;   Bit 0 = 0 if currency symbol first
  1399                                                                     ;         = 1 if currency symbol last
  1400                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1401                                                                     ;         = 1 if space after currency symbol
  1402                                  .Currency_cents:
  1403 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1404                                  .Time_24:
  1405 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1406                                  .Map_call:
  1407 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1408 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1409                                  				;  in pieces.
  1410                                  .Data_sep:
  1411 00000016 ????                    		RESB	2	; Data list separator character
  1412                                  .size:		
  1413                                  endstruc
  1414                                  
  1415                                  ;
  1416                                  ; Max size of the block returned by the INTERNATIONAL call
  1417                                  ;
  1418                                  internat_block_max	EQU	32
  1419                                  
  1420                                  ;============================================================================
  1421                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1422                                  ;============================================================================
  1423                                  ; 08/07/2018 - Retro DOS v3.0
  1424                                  
  1425                                  ;SysInitVars STRUC
  1426                                  struc SYSI
  1427 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1428 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1429 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1430 0000000C ????????                .CON:	    resd 1		; CON device
  1431 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1432 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1433 00000016 ????????                .CDS:	    resd 1		; CDS list
  1434 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1435 0000001E ????                    .Keep:	    resw 1		; keep count
  1436 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1437 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1438 00000022 ????????                .DEV:	    resd 1		; device list
  1439                                  ; 09/07/2018
  1440                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1441                                  ; Following parameters are used with MDSOS 6.0 (Retro DOS v4.0)
  1442 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1443 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1444 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1445 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1446 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1447 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1448 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1449 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1450 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1451 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1452 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1453 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1454                                  endstruc
  1455                                  ;SysInitVars ENDS
  1456                                  
  1457                                  ;This is added for more information exchange between DOS, BIOS.
  1458                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1459                                  
  1460                                  ;SysInitVars_Ext struc
  1461                                  struc SYSI_EXT
  1462 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1463 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1464                                  endstruc
  1465                                  ;SysInitVars_Ext ends
  1466                                  
  1467                                  ;============================================================================
  1468                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1469                                  ;============================================================================
  1470                                  ; 09/07/2018 - Retro DOS v3.0
  1471                                  
  1472                                  ;*** J.K.
  1473                                  ;General Guide -
  1474                                  ;Category Code:
  1475                                  ; 0... .... DOS Defined
  1476                                  ; 1... .... User defined
  1477                                  ; .xxx xxxx Code
  1478                                  
  1479                                  ;Function Code:
  1480                                  ; 0... .... Return error if unsupported
  1481                                  ; 1... .... Ignore if unsupported
  1482                                  ; .0.. .... Intercepted by DOS
  1483                                  ; .1.. .... Passed to driver
  1484                                  ; ..0. .... Sends data/commands to device
  1485                                  ; ..1. .... Quries data/info from device
  1486                                  ; ...x .... Subfunction
  1487                                  ;
  1488                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1489                                  ; function set.  It plays no critical role; some functions may contain both
  1490                                  ; command and query elements. The convention is that such commands are
  1491                                  ; defined as "sends data".
  1492                                  
  1493                                  ;*****************************;*
  1494                                  ; BLOCK DRIVERS 	      ;*
  1495                                  ;*****************************;*
  1496                                  
  1497                                  ; IOCTL SUB-FUNCTIONS
  1498                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1499                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1500                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1501                                  IOCTL_READ_HANDLE	EQU	2
  1502                                  IOCTL_WRITE_HANDLE	EQU	3
  1503                                  IOCTL_READ_DRIVE	EQU	4
  1504                                  IOCTL_WRITE_DRIVE	EQU	5
  1505                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1506                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1507                                  IOCTL_CHANGEABLE?	EQU	8
  1508                                  IOCTL_DeviceLocOrRem?	EQU	9
  1509                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1510                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1511                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1512                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1513                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1514                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1515                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1516                                  ; (MSDOS 6.0)
  1517                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1518                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1519                                  
  1520                                  ; GENERIC IOCTL CATEGORY CODES
  1521                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1522                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1523                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1524                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1525                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1526                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1527                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1528                                  
  1529                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1530                                  RAWIO			EQU	8
  1531                                  
  1532                                  ; RAWIO SUB-FUNCTIONS
  1533                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1534                                  GET_DEVICE_PARAMETERS	EQU	60H
  1535                                  SET_DEVICE_PARAMETERS	EQU	40H
  1536                                  READ_TRACK		EQU	61H
  1537                                  WRITE_TRACK		EQU	41H
  1538                                  VERIFY_TRACK		EQU	62H
  1539                                  FORMAT_TRACK		EQU	42H
  1540                                  ; (MSDOS 6.0)
  1541                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1542                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1543                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1544                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1545                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1546                                  
  1547                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1548                                  BUILD_DEVICE_BPB	EQU	000000001B
  1549                                  
  1550                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1551                                  INSTALL_FAKE_BPB	EQU	000000001B
  1552                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1553                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1554                                  
  1555                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1556                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1557                                  STATUS_FOR_FORMAT	EQU	000000001B
  1558                                  ; (MSDOS 6.0)
  1559                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1560                                  
  1561                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1562                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1563                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1564                                  
  1565                                  ; DEVICETYPE VALUES
  1566                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1567                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1568                                  DEV_5INCH		EQU	0
  1569                                  DEV_5INCH96TPI		EQU	1
  1570                                  DEV_3INCH720KB		EQU	2
  1571                                  DEV_8INCHSS		EQU	3
  1572                                  DEV_8INCHDS		EQU	4
  1573                                  DEV_HARDDISK		EQU	5
  1574                                  DEV_OTHER		EQU	7
  1575                                  ; (MSDOS 6.0)
  1576                                  ;DEV_3INCH1440KB	EQU	7
  1577                                  DEV_3INCH2880KB		EQU	9
  1578                                  ; Retro DOS v2.0 - 26/03/2018
  1579                                  ;;DEV_TAPE		EQU	6
  1580                                  ;;DEV_ERIMO		EQU	8
  1581                                  ;DEV_3INCH2880KB	EQU	9
  1582                                  DEV_3INCH1440KB		EQU	10
  1583                                  
  1584                                  ; (MSDOS 3.3)
  1585                                  ;MAX_DEV_TYPE		EQU	7
  1586                                  
  1587                                  ; (MSDOS 6.0)
  1588                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1589                                  					; CURRENTLY SUPPORT.
  1590                                  
  1591                                  struc A_SECTORTABLE
  1592 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1593 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1594                                  .size:
  1595                                  endstruc
  1596                                  
  1597                                  ;============================================================================
  1598                                  ; DEVSYM.ASM
  1599                                  ;============================================================================
  1600                                  
  1601                                  ;SUBTTL DEVICE TABLE AND SRH DEFINITION
  1602                                  ;PAGE
  1603                                  
  1604                                  ; 07/07/2018 - Retro DOS v3.0
  1605                                  ; (DEVSYM.INC, MSDOS 6.0, 1991)
  1606                                  
  1607                                  ;**	DevSym.inc - Device Symbols
  1608                                  
  1609                                  ; The device table list has the form:
  1610                                  struc	SYSDEV
  1611 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1612 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1613 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1614 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1615 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1616                                  .size:
  1617                                  endstruc
  1618                                  
  1619                                  ;
  1620                                  ; ATTRIBUTE BIT MASKS
  1621                                  ;
  1622                                  ; CHARACTER DEVICES:
  1623                                  ;
  1624                                  ; BIT 15 -> MUST BE 1
  1625                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1626                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1627                                  ;     12 -> UNUSED
  1628                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1629                                  ;     10 -> MUST BE 0
  1630                                  ;      9 -> MUST BE 0
  1631                                  ;      8 -> UNUSED
  1632                                  ;      7 -> UNUSED
  1633                                  ;      6 -> UNUSED
  1634                                  ;      5 -> UNUSED
  1635                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1636                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1637                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1638                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1639                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1640                                  ;
  1641                                  ; BLOCK DEVICES:
  1642                                  ;
  1643                                  ; BIT 15 -> MUST BE 0
  1644                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1645                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1646                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1647                                  ;	    THE SAME PLACE.
  1648                                  ;     12 -> UNUSED
  1649                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1650                                  ;     10 -> MUST BE 0
  1651                                  ;      9 -> MUST BE 0
  1652                                  ;      8 -> UNUSED
  1653                                  ;      7 -> UNUSED
  1654                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1655                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1656                                  ;      5 -> UNUSED
  1657                                  ;      4 -> UNUSED
  1658                                  ;      3 -> UNUSED
  1659                                  ;      2 -> UNUSED
  1660                                  ;      1 -> UNUSED
  1661                                  ;      0 -> UNUSED
  1662                                  ;
  1663                                  
  1664                                  ;Attribute bit masks
  1665                                  DEVTYP  EQU     8000H           ;Bit 15 - 1  if Char, 0 if block
  1666                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1667                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1668                                  
  1669                                  ; 09/07/2018 - Retro DOS
  1670                                  ; (DEVSYM.INC, MSDOS 3.3, 1987) 
  1671                                  
  1672                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1673                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1674                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1675                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1676                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1677                                  				;  ENTRY POINTS, 0 IF NOT
  1678                                  
  1679                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1680                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1681                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1682                                  				;  ITS CURRENT FORM.
  1683                                  
  1684                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1685                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1686                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1687                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1688                                  
  1689                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1690                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1691                                  				;LOGICAL DRIVES, AND SUPPORTS
  1692                                  				;GENERIC IOCTL CALLS.
  1693                                  				;FOR CHARACTER DEVICES, THIS
  1694                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1695                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1696                                  
  1697                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1698                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1699                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1700                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1701                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1702                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1703                                  
  1704                                  ;Static Reguest Header
  1705                                  struc	SRHEAD
  1706 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1707 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1708 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1709 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1710 00000005 ????????????????                	resb 8		;Reserved for queue links
  1711                                  .size:
  1712                                  endstruc
  1713                                  
  1714                                  ;Status word masks
  1715                                  STERR   EQU     8000H           ;Bit 15 - Error
  1716                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1717                                  STDON   EQU     0100H           ;Bit 8 - Done
  1718                                  STECODE EQU     00FFH           ;Error code
  1719                                  WRECODE EQU     0
  1720                                  
  1721                                  ;Function codes
  1722                                  DEVINIT EQU     0               ;Initialization
  1723                                  DINITHL EQU     26              ;Size of init header
  1724                                  DEVMDCH EQU     1               ;Media check
  1725                                  DMEDHL  EQU     15              ;Size of media check header
  1726                                  DEVBPB  EQU     2               ;Get BPB
  1727                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1728                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1729                                  DEVRD   EQU     4               ;Read
  1730                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1731                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1732                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1733                                  DEVIST  EQU     6               ;Input status
  1734                                  DSTATHL EQU     13              ;Size of status header
  1735                                  DEVIFL  EQU     7               ;Input flush
  1736                                  DFLSHL  EQU     15              ;Size of flush header
  1737                                  DEVWRT  EQU     8               ;Write
  1738                                  DEVWRTV EQU     9               ;Write with verify
  1739                                  DEVOST  EQU     10              ;Output status
  1740                                  DEVOFL  EQU     11              ;Output flush
  1741                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1742                                  
  1743                                  ; 09/07/2018 - Retro DOS v3.0
  1744                                  ; (DEVSYM.INC, MSDOS 3.3, 1987) 
  1745                                  
  1746                                  DEVOPN	EQU	13		;DEVICE OPEN
  1747                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1748                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1749                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1750                                  ; 07/08/2018 - Retro DOS v3.0
  1751                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1752                                  GENIOCTL EQU	19
  1753                                  
  1754                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1755                                  ;		     20
  1756                                  ;		     21
  1757                                  ;		     22
  1758                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1759                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1760                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1761                                  
  1762                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1763                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1764                                  
  1765                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1766                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1767                                  ;
  1768                                  
  1769                                  struc IOCTL_REQ
  1770 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1771                                  				; GENERIC IOCTL ADDITION.
  1772 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1773 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1774 0000000F ????                    .REG_SI:	resw 1
  1775 00000011 ????                    .REG_DI:	resw 1
  1776 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1777                                  .size: ; 07/08/2018
  1778                                  endstruc
  1779                                  
  1780                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1781                                  GEN_IOCTL_WRT_TRK EQU	40H
  1782                                  GEN_IOCTL_RD_TRK  EQU	60H
  1783                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1784                                  
  1785                                  ;============================================================================
  1786                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1787                                  ;============================================================================
  1788                                  ; 16/07/2018 - Retro DOS v3.0 
  1789                                  
  1790                                  ;**	ERROR.INC - DOS Error Codes
  1791                                  ;
  1792                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1793                                  ;    return error codes through AX. If an error occurred then
  1794                                  ;    the carry bit will be set and the error code is in AX. If no error
  1795                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1796                                  ;
  1797                                  ;    Since the set of error codes is being extended as we extend the operating
  1798                                  ;    system, we have provided a means for applications to ask the system for a
  1799                                  ;    recommended course of action when they receive an error.
  1800                                  ;
  1801                                  ;    The GetExtendedError system call returns a universal error, an error
  1802                                  ;    location and a recommended course of action. The universal error code is
  1803                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1804                                  ;    is issued.
  1805                                  
  1806                                  
  1807                                  ;	2.0 error codes
  1808                                  
  1809                                  error_invalid_function		EQU	1
  1810                                  error_file_not_found		EQU	2
  1811                                  error_path_not_found		EQU	3
  1812                                  error_too_many_open_files	EQU	4
  1813                                  error_access_denied		EQU	5
  1814                                  error_invalid_handle		EQU	6
  1815                                  error_arena_trashed		EQU	7
  1816                                  error_not_enough_memory 	EQU	8
  1817                                  error_invalid_block		EQU	9
  1818                                  error_bad_environment		EQU	10
  1819                                  error_bad_format		EQU	11
  1820                                  error_invalid_access		EQU	12
  1821                                  error_invalid_data		EQU	13
  1822                                  ;**** reserved			EQU	14	; *****
  1823                                  error_invalid_drive		EQU	15
  1824                                  error_current_directory 	EQU	16
  1825                                  error_not_same_device		EQU	17
  1826                                  error_no_more_files		EQU	18
  1827                                  
  1828                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1829                                  
  1830                                  error_write_protect		EQU	19
  1831                                  error_bad_unit			EQU	20
  1832                                  error_not_ready 		EQU	21
  1833                                  error_bad_command		EQU	22
  1834                                  error_CRC			EQU	23
  1835                                  error_bad_length		EQU	24
  1836                                  error_seek			EQU	25
  1837                                  error_not_DOS_disk		EQU	26
  1838                                  error_sector_not_found		EQU	27
  1839                                  error_out_of_paper		EQU	28
  1840                                  error_write_fault		EQU	29
  1841                                  error_read_fault		EQU	30
  1842                                  error_gen_failure		EQU	31
  1843                                  
  1844                                  ;	the new 3.0 error codes reported through INT 24
  1845                                  
  1846                                  error_sharing_violation 	EQU	32
  1847                                  error_lock_violation		EQU	33
  1848                                  error_wrong_disk		EQU	34
  1849                                  error_FCB_unavailable		EQU	35
  1850                                  error_sharing_buffer_exceeded	EQU	36
  1851                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  1852                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  1853                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  1854                                  
  1855                                  ;	New OEM network-related errors are 50-79
  1856                                  
  1857                                  error_not_supported		EQU	50
  1858                                  
  1859                                  error_net_access_denied		EQU	65	;M028
  1860                                  
  1861                                  ;	End of INT 24 reportable errors
  1862                                  
  1863                                  error_file_exists		EQU	80
  1864                                  error_DUP_FCB			EQU	81	; *****
  1865                                  error_cannot_make		EQU	82
  1866                                  error_FAIL_I24			EQU	83
  1867                                  
  1868                                  ;	New 3.0 network related error codes
  1869                                  
  1870                                  error_out_of_structures 	EQU	84
  1871                                  error_already_assigned		EQU	85
  1872                                  error_invalid_password		EQU	86
  1873                                  error_invalid_parameter 	EQU	87
  1874                                  error_NET_write_fault		EQU	88
  1875                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  1876                                  
  1877                                  ;	BREAK <Interrupt 24 error codes>
  1878                                  
  1879                                  ;**	Int24 Error Codes
  1880                                  
  1881                                  error_I24_write_protect 	EQU	0
  1882                                  error_I24_bad_unit		EQU	1
  1883                                  error_I24_not_ready		EQU	2
  1884                                  error_I24_bad_command		EQU	3
  1885                                  error_I24_CRC			EQU	4
  1886                                  error_I24_bad_length		EQU	5
  1887                                  error_I24_Seek			EQU	6
  1888                                  error_I24_not_DOS_disk		EQU	7
  1889                                  error_I24_sector_not_found	EQU	8
  1890                                  error_I24_out_of_paper		EQU	9
  1891                                  error_I24_write_fault		EQU	0Ah
  1892                                  error_I24_read_fault		EQU	0Bh
  1893                                  error_I24_gen_failure		EQU	0Ch
  1894                                  ; NOTE: Code 0DH is used by MT-DOS.
  1895                                  error_I24_wrong_disk		EQU	0Fh
  1896                                  
  1897                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  1898                                  ;
  1899                                  ;	NOTE: ABORT is ALWAYS allowed
  1900                                  
  1901                                  Allowed_FAIL			EQU	00001000B
  1902                                  Allowed_RETRY			EQU	00010000B
  1903                                  Allowed_IGNORE			EQU	00100000B
  1904                                  
  1905                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  1906                                  I24_area			EQU	00000110B  ; 00 if DOS
  1907                                  						   ; 01 if FAT
  1908                                  						   ; 10 if root DIR
  1909                                  						   ; 11 if DATA
  1910                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  1911                                  
  1912                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  1913                                  
  1914                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  1915                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  1916                                  ;	to take for error codes that they don't explicitly understand.
  1917                                  
  1918                                  ;	Values for error CLASS
  1919                                  
  1920                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  1921                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  1922                                  errCLASS_Auth		EQU	3	; Permission problem
  1923                                  errCLASS_Intrn		EQU	4	; Internal System Error
  1924                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  1925                                  errCLASS_SysFail	EQU	6	; System Failure
  1926                                  errCLASS_Apperr 	EQU	7	; Application Error
  1927                                  errCLASS_NotFnd 	EQU	8	; Not Found
  1928                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  1929                                  errCLASS_Locked 	EQU	10	; Locked
  1930                                  errCLASS_Media		EQU	11	; Media Failure
  1931                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  1932                                  errCLASS_Unk		EQU	13	; Unknown/other
  1933                                  
  1934                                  ;	Values for error ACTION
  1935                                  
  1936                                  errACT_Retry		EQU	1	; Retry
  1937                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  1938                                  errACT_User		EQU	3	; Ask user to regive info
  1939                                  errACT_Abort		EQU	4	; abort with clean up
  1940                                  errACT_Panic		EQU	5	; abort immediately
  1941                                  errACT_Ignore		EQU	6	; ignore
  1942                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  1943                                  
  1944                                  ;	Values for error LOCUS
  1945                                  
  1946                                  errLOC_Unk		EQU	1	; No appropriate value
  1947                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  1948                                  errLOC_Net		EQU	3	; Network
  1949                                  errLOC_SerDev		EQU	4	; Serial Device
  1950                                  errLOC_Mem		EQU	5	; Memory
  1951                                  
  1952                                  ;============================================================================
  1953                                  ; MULT.INC (MSDOS 3.3, 1987)
  1954                                  ;============================================================================
  1955                                  
  1956                                  ;Break <Critical section and Multiplex channels>
  1957                                  
  1958                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1959                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1960                                  ;									   ;
  1961                                  ; Critical section definitions
  1962                                  ;
  1963                                  ; These below are subject to leave-all sections
  1964                                  critDisk    EQU     1			; Disk I/O critical section
  1965                                  critDevice  EQU     2			; Device I/O critical section
  1966                                  critShare   EQU     1			; Sharer I/O critical section
  1967                                  critMem     EQU     1			; memory maintenance critical section
  1968                                  critNet     EQU     5			; network critical section
  1969                                  critSFT     EQU     1			; sft table allocation
  1970                                  ; These below are not subject to leave-all sections
  1971                                  critASSIGN  EQU     8			; Assign has munged a system call
  1972                                  ;									   ;
  1973                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1974                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1975                                  
  1976                                  ;
  1977                                  ; The current set of defined multiplex channels is (* means documented):
  1978                                  ;
  1979                                  ;   Channel(h)	Issuer		Receiver    Function
  1980                                  ;      00	server		PSPRINT     print job control
  1981                                  ;     *01	print/apps	PRINT	    Queueing of files
  1982                                  ;      02	BIOS		REDIR	    signal open/close of printers
  1983                                  ;
  1984                                  ;      05	command 	REDIR	    obtain text of net int 24 message
  1985                                  ;     *06	server/assign	ASSIGN	    Install check
  1986                                  ;
  1987                                  ;      08	external driver IBMBIO	    interface to internal routines
  1988                                  ;
  1989                                  ;      10	sharer/server	Sharer	    install check
  1990                                  ;      11	DOS/server	Redir	    install check/redirection funcs
  1991                                  ;      12	sharer/redir	DOS	    dos functions and structure maint
  1992                                  ;      13	MSNET		MSNET	    movement of NCBs
  1993                                  ;      14	DOS		NLSFUNC     down load NLS country info,DOS 3.3
  1994                                  ;      14	Apps		Popup	    DOS 4.XX popup screen functions
  1995                                  ;	  ***> NOTE <***  Yes there are 2 users of 14h but since DOS 4.XX
  1996                                  ;			  doesn't use NLSFUNC, there is no conflict
  1997                                  ;      15	Apps		MSCDEX	    CD-ROM redirector interface
  1998                                  ;      16	Winoldap (?)	WIN386	    Private Windows communication
  1999                                  ;      17	Winoldap (?)	WIN386	    Win386 clipboard interface
  2000                                  ;      18	Apps		MS-Manager  Toggle interface to manager
  2001                                  ;      19,(13h) external driver IBMBIO	    Reset_Int_13, allows installation
  2002                                  ;					    of alternative INT_13 drivers after
  2003                                  ;					    boot_up
  2004                                  ;      B0	GRAFTABL	GRAFTABL
  2005                                  ;
  2006                                  
  2007                                  MultSHARE   EQU     10h 		; sharer
  2008                                      ;	1   MFT_enter
  2009                                      ;	2   MFTClose
  2010                                      ;	3   MFTclU
  2011                                      ;	4   MFTCloseP
  2012                                      ;	5   MFTCloN
  2013                                      ;	6   set_block
  2014                                      ;	7   clr_block
  2015                                      ;	8   chk_block
  2016                                      ;	9   MFT_get
  2017                                      ;	10  ShSave
  2018                                      ;	11  ShChk
  2019                                      ;	12  ShCol
  2020                                      ;	13  ShCloseFile
  2021                                  
  2022                                  MultNET     EQU     11h 		; Network support
  2023                                      ;	1   NET_RMDIR
  2024                                      ;	2   NET_SEQ_RMDIR
  2025                                      ;	3   NET_MKDIR
  2026                                      ;	4   NET_SEQ_MKDIR
  2027                                      ;	5   NET_CHDIR
  2028                                      ;	6   NET_CLOSE
  2029                                      ;	7   NET_COMMIT
  2030                                      ;	8   NET_READ
  2031                                      ;	9   NET_WRITE
  2032                                      ;	10  NET_LOCK
  2033                                      ;	11  NET_UNLOCK
  2034                                      ;	12  NET_DISK_INFO
  2035                                      ;	13  NET_SET_FILE_ATTRIBUTE
  2036                                      ;	14  NET_SEQ_SET_FILE_ATTRIBUTE
  2037                                      ;	15  NET_GET_FILE_INFO
  2038                                      ;	16  NET_SEQ_GET_FILE_INFO
  2039                                      ;	17  NET_RENAME
  2040                                      ;	18  NET_SEQ_RENAME
  2041                                      ;	19  NET_DELETE
  2042                                      ;	20  NET_SEQ_DELETE
  2043                                      ;	21  NET_OPEN
  2044                                      ;	22  NET_SEQ_OPEN
  2045                                      ;	23  NET_CREATE
  2046                                      ;	24  NET_SEQ_CREATE
  2047                                      ;	25  NET_SEQ_SEARCH_FIRST
  2048                                      ;	26  NET_SEQ_SEARCH_NEXT
  2049                                      ;	27  NET_SEARCH_FIRST
  2050                                      ;	28  NET_SEARCH_NEXT
  2051                                      ;	29  NET_ABORT
  2052                                      ;	30  NET_ASSOPER
  2053                                      ;	31  Printer_SET_STRING
  2054                                      ;	32  NetFlushBuf
  2055                                      ;	33  NetBufWrite
  2056                                      ;	34  NetResetEnvironment
  2057                                      ;	35  NetSpoolCheck
  2058                                      ;	36  NetSpoolClose
  2059                                  
  2060                                  MultDOS     EQU     12h 		; DOS call back
  2061                                      ;	1   DOS_CLOSE
  2062                                      ;	2   RECSET
  2063                                      ;	3   Get DOSGROUP
  2064                                      ;	4   PATHCHRCMP
  2065                                      ;	5   OUT
  2066                                      ;	6   NET_I24_ENTRY
  2067                                      ;	7   PLACEBUF
  2068                                      ;	8   FREE_SFT
  2069                                      ;	9   BUFWRITE
  2070                                      ;	10  SHARE_VIOLATION
  2071                                      ;	11  SHARE_ERROR
  2072                                      ;	12  SET_SFT_MODE
  2073                                      ;	13  DATE16
  2074                                      ;	14  SETVISIT
  2075                                      ;	15  SCANPLACE
  2076                                      ;	16  SKIPVISIT
  2077                                      ;	17  StrCpy
  2078                                      ;	18  StrLen
  2079                                      ;	19  UCase
  2080                                      ;	20  POINTCOMP
  2081                                      ;	21  CHECKFLUSH
  2082                                      ;	22  SFFromSFN
  2083                                      ;	23  GetCDSFromDrv
  2084                                      ;	24  Get_User_Stack
  2085                                      ;	25  GetThisDrv
  2086                                      ;	26  DriveFromText
  2087                                      ;	27  SETYEAR
  2088                                      ;	28  DSUM
  2089                                      ;	29  DSLIDE
  2090                                      ;	30  StrCmp
  2091                                      ;	31  initcds
  2092                                      ;	32  pjfnfromhandle
  2093                                      ;	33  $NameTrans
  2094                                      ;	34  CAL_LK
  2095                                      ;	35  DEVNAME
  2096                                      ;	36  Idle
  2097                                      ;
  2098                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2099                                      ;	0   NLSInstall
  2100                                      ;	1   ChgCodePage
  2101                                      ;	2   GetExtInfo
  2102                                      ;	3   SetCodePage
  2103                                      ;	4   GetCntry
  2104                                      ;
  2105                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2106                                  ;	  it calls Multdos 42 to set up an entry routine address
  2107                                      ;	0   Install status  (reserved)
  2108                                      ;	1   Lookup
  2109                                      ;	2   Insert
  2110                                      ;	3   Delete
  2111                                      ;	4   Purge	    (reserved)
  2112                                  
  2113                                  ;============================================================================
  2114                                  ; FIND.INC (MSDOS 3.3, 1987)
  2115                                  ;============================================================================
  2116                                  ; 09/07/2018 - Retro DOS v3.0
  2117                                  
  2118                                  ;Break	<find first/next buffer>
  2119                                  
  2120                                  struc find_buf
  2121 00000000 ??                      .drive:	    resb 1		; drive of search
  2122 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2123 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2124 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2125 0000000F ????                    .DirStart:  resw 1		; DirStart
  2126 00000011 ??                      .attr:	    resb 1		; attribute found
  2127 00000012 ????                    .time:	    resw 1		; time
  2128 00000014 ????                    .date:	    resw 1		; date
  2129 00000016 ????                    .size_l:    resw 1		; low(size)
  2130 00000018 ????                    .size_h:    resw 1		; high(size)
  2131 0000001A <res Dh>                .pname:	    resb 13		; packed name
  2132                                  .size:
  2133                                  endstruc
  2134                                  
  2135                                  ;============================================================================
  2136                                  ; DOSCNTRY.INC (MSDOS 3.3, 1987)
  2137                                  ;============================================================================
  2138                                  ; 09/07/2018 - Retro DOS v3.0
  2139                                  
  2140                                  ;Equates for COUNTRY INFORMATION.
  2141                                  SetCountryInfo	EQU	1	;country info
  2142                                  SetUcase	EQU	2	;uppercase table
  2143                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2144                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2145                                  SetFileList	EQU	5	;valid file character list
  2146                                  SetCollate	EQU	6	;collating sequence
  2147                                  SetDBCS 	EQU	7	;double byte character set
  2148                                  SetALL		EQU	-1	;all the entries
  2149                                  
  2150                                  
  2151                                  ;DOS country and code page information table structure.
  2152                                  ;Internally, IBMDOS gives a pointer to this table.
  2153                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2154                                  ;this structure.
  2155                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2156 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2157 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2158 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2159 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 5)
  2160 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2161 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2162                                  
  2163 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2164 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2165                                  
  2166 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2167 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2168                                  
  2169 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2170 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2171                                  
  2172 00000060 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2173 00000061 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2174 00000063 ????                    .ccDosCountry:		resw 1	;system country code id
  2175 00000065 ????                    .ccDosCodePage:		resw 1	;system code page id
  2176 00000067 ????                    .ccDFormat:		resw 1	;date format
  2177 00000069 ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2178 0000006E ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2179 00000070 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2180 00000072 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2181 00000074 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2182 00000076 ??                      .ccCFormat:		resb 1	;currency format flags
  2183 00000077 ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2184 00000078 ??                      .ccTFormat:		resb 1	;time format
  2185 00000079 ????????                .ccMono_Ptr:		resd 1	;monocase routine entry point
  2186 0000007D ????                    .ccListSep:		resb 2	;data list separator
  2187 0000007F <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2188                                  .size:
  2189                                  endstruc
  2190                                  
  2191                                  ;Ucase table
  2192                                  struc CC_UCASE_TAB
  2193 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2194 00000002 <res 80h>               .ccUcase_data:		resb 128
  2195                                  endstruc
  2196                                  
  2197                                  ;File Ucase table
  2198                                  struc CC_FILE_UCASE_TAB
  2199 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2200 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2201                                  endstruc
  2202                                  
  2203                                  ;File char list
  2204                                  struc CC_FILE_CHAR_TAB
  2205 00000000 ????                    .ccFilechar_leng:	resw 1
  2206 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2207                                  endstruc
  2208                                  
  2209                                  ;collate table
  2210                                  struc CC_COLLATE_TAB
  2211 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2212 00000002 <res 100h>              .ccCollate_data:	resb 256
  2213                                  endstruc
  2214                                  
  2215                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2216                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) 
  2217                                  
  2218                                  ; 06/08/2018
  2219                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2220                                  
  2221                                  ;CAPITALIZATION equates
  2222                                  CAP_ONE_CHAR	equ	20H
  2223                                  CAP_STRING	equ	21H
  2224                                  CAP_ASCIIZ	equ	22H
  2225                                  CHECK_YES_NO	equ	23H
  2226                                  UPPER_TABLE	equ	80H
  2227                                  
  2228                                  ;NLS_YES	equ	59H  ; 'Y'
  2229                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2230                                  ;NLS_NO		equ	4EH  ; 'N'	
  2231                                  ;NLS_no2	equ	6EH  ; 'n'	
  2232                                  
  2233                                  ;============================================================================
  2234                                  ; CURDIR.INC (MSDOS 3.3, 1987)
  2235                                  ;============================================================================
  2236                                  ; 09/07/2018 - Retro DOS v3.0
  2237                                  
  2238                                  ;BREAK <Current directory list structure>
  2239                                  
  2240                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2241                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2242                                  ;									   ;
  2243                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2244                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2245                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2246                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2247                                  ; of the disk being changed or if the path must be recracked.  The END	   ;
  2248                                  ; field is the location of the end of the definition.  No .. is allowed    ;
  2249                                  ; past this point							   ;
  2250                                  
  2251                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2252                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2253                                  
  2254                                  struc curdir	; curdir_list
  2255 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2256 00000043 ????                    .flags:		resw 1			; various flags
  2257 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2258 00000049 ????                    .ID:		resw 1			; cluster of current dir (net ID)
  2259 0000004B ????                    		resw 1
  2260 0000004D ????                    .user_word:	resw 1
  2261 0000004F ????                    .end:		resw 1			; end of assignment
  2262                                  .size:
  2263                                  endstruc
  2264                                  
  2265                                  curdirLen	EQU curdir.size		; Needed for screwed up
  2266                                  
  2267                                  %define curdir_netID curdir_ID  ; dword
  2268                                  
  2269                                  ;Flag word masks
  2270                                  curdir_isnet	EQU	1000000000000000B
  2271                                  curdir_inuse	EQU	0100000000000000B
  2272                                  curdir_splice	EQU	0010000000000000B
  2273                                  curdir_local	EQU	0001000000000000B
  2274                                  ;									   ;
  2275                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2276                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2277                                  
  2278                                  ;============================================================================
  2279                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2280                                  ;============================================================================
  2281                                  ; 09/07/2018 - Retro DOS v3.0
  2282                                  
  2283                                  ;BREAK <File Control Block definition>
  2284                                  
  2285                                  ;
  2286                                  ; Field definition for FCBs
  2287                                  ; The FCB has the following structure:
  2288                                  ;
  2289                                  ;	+---------------------------+
  2290                                  ;	|   Drive indicator(byte)   |
  2291                                  ;	+---------------------------+
  2292                                  ;	|    Filename (8 chars)     |
  2293                                  ;	+---------------------------+
  2294                                  ;	|    Extension (3 chars)    |
  2295                                  ;	+---------------------------+
  2296                                  ;	|   Current Extent(word)    |
  2297                                  ;	+---------------------------+
  2298                                  ;	|    Record size (word)     |
  2299                                  ;	+---------------------------+
  2300                                  ;	|    File Size (2 words)    |
  2301                                  ;	+---------------------------+
  2302                                  ;	|	Date of write	    |
  2303                                  ;	+---------------------------+
  2304                                  ;	|	Time of write	    |
  2305                                  ;	+---------------------------+
  2306                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2307                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2308                                  ;									   ;
  2309                                  ;	+---------------------------+
  2310                                  ;	|   8 bytes reserved	    |
  2311                                  ;	+---------------------------+
  2312                                  ;									   ;
  2313                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2314                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2315                                  ;	|    next record number     |
  2316                                  ;	+---------------------------+
  2317                                  ;	|   random record number    |
  2318                                  ;	+---------------------------+
  2319                                  ;
  2320                                  
  2321                                  struc	SYS_FCB
  2322 00000000 ??                      .drive:	resb 1
  2323 00000001 ????????????????        .name:	resb 8
  2324 00000009 ??????                  .ext:	resb 3
  2325 0000000C ????                    .EXTENT: resw 1
  2326 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2327 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2328                                  				; following word
  2329 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2330 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2331 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2332                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2333                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2334                                  ;									   ;
  2335 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2336                                  ;									   ;
  2337                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2338                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2339 00000020 ??                      .NR:	resb 1			; Next record
  2340 00000021 ????????                .RR:	resb 4			; Random record
  2341                                  endstruc
  2342                                  
  2343                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2344                                  				; NEXT
  2345                                  ; 20/07/2018
  2346                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2347                                  
  2348                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2349                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2350                                  ; NOTE about this byte (fcb_nsl_drive)
  2351                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2352                                  ;	00 means a local file or device with sharing loaded
  2353                                  ;	10 means a remote (network) file
  2354                                  ;	01 means a local file with no sharing loaded
  2355                                  ;	11 means a local device with no sharing loaded
  2356                                  
  2357                                  ; 20/07/2018
  2358                                  
  2359                                  ;
  2360                                  ; Network FCB
  2361                                  ;
  2362                                  
  2363                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2364                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2365                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2366                                  
  2367                                  ;
  2368                                  ; No sharing local file FCB
  2369                                  ;
  2370                                  
  2371                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2372                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2373                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2374                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2375                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2376                                  
  2377                                  ;
  2378                                  ; No sharing local device FCB
  2379                                  ;
  2380                                  
  2381                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2382                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2383                                  
  2384                                  ;
  2385                                  ; Sharing local FCB
  2386                                  ;
  2387                                  
  2388                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2389                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2390                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2391                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2392                                  
  2393                                  ;
  2394                                  ; Bogusness:  the four cases are:
  2395                                  ;
  2396                                  ;   local file	    00
  2397                                  ;   local device    40
  2398                                  ;   local sharing   C0
  2399                                  ;   network	    80
  2400                                  ;
  2401                                  ; Since sharing and network collide, we cannot use a test instruction for
  2402                                  ; deciding whether a network or a share check in involved
  2403                                  ;
  2404                                  FCBDEVICE   EQU 040h
  2405                                  FCBNETWORK  EQU 080h
  2406                                  FCBSHARE    EQU 0C0h
  2407                                  
  2408                                  ; FCBSPECIAL must be able to mask off both net and share
  2409                                  FCBSPECIAL  EQU 080h
  2410                                  FCBMASK     EQU 0C0h
  2411                                  
  2412                                  ;============================================================================
  2413                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2414                                  ;============================================================================
  2415                                  ; 11/07/2018 - Retro DOS v3.0
  2416                                  
  2417                                  struc	FEI	; FASTOPEN_EXTENDED_INFO
  2418 00000000 ??                      .dirpos:	resb 1
  2419                                  ;.dirsec:	resd 1 ; MSDOS 6.0
  2420 00000001 ????                    .dirsec:	resw 1 ; MSDOS 3.3
  2421 00000003 ????                    .clusnum:	resw 1
  2422                                  ;.lastent:	resw 1	; for search first ; MSDOS 6.0
  2423                                  ;.dirstart:	resw 1	; for search first ; MSDOS 6.0
  2424                                  .size:
  2425                                  endstruc
  2426                                  
  2427                                  ; 23/07/2018
  2428                                  ;FASTOPEN NAME CACHING Subfunctions
  2429                                  FONC_Look_up	equ	1
  2430                                  FONC_insert	equ	2
  2431                                  FONC_delete	equ	3
  2432                                  FONC_update	equ	4
  2433                                  FONC_purge	equ	5	;reserved for the future use.
  2434                                  FONC_Rename	equ	6	;AN001
  2435                                  
  2436                                  ; 27/07/2018
  2437                                  ;FastOpen Data Structure
  2438                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2439 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2440 00000002 ????????                .name_caching:	resd 1
  2441                                  ; MSDOS 6.0
  2442                                  ;.fatchain_caching: resd 1	;reserved for future use
  2443                                  .size:
  2444                                  endstruc
  2445                                  
  2446                                  ; 27/07/2018
  2447                                  ;Equates used in DOS.
  2448                                  FastOpen_Set	       equ     00000001b
  2449                                  FastOpen_Reset	       equ     11111110b
  2450                                  Lookup_Success	       equ     00000010b
  2451                                  Lookup_Reset	       equ     11111101b
  2452                                  Special_Fill_Set       equ     00000100b
  2453                                  Special_Fill_Reset     equ     11111011b
  2454                                  No_Lookup	       equ     00001000b
  2455                                  Set_For_Search	       equ     00010000b	;DCR 167
  2456                                  
  2457                                  ; 09/08/2018 
  2458                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2459                                  ; Fastxxx equates
  2460                                  FastOpen_ID	   equ	   1
  2461                                  FastSeek_ID	   equ	   2
  2462                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2463                                  
  2464                                  ;Structure definitions
  2465                                  ;
  2466                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2467 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2468 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2469                                  endstruc
  2470                                  
  2471                                  ;============================================================================
  2472                                  ; LOCK.INC, MSDOS 6.0, 1991
  2473                                  ;============================================================================
  2474                                  ; 14/07/2018 - Retro DOS v3.0
  2475                                  
  2476                                  ;**	LOCK.INC - Definitions for Record Locking
  2477                                  
  2478                                  ;**	LOCK functions
  2479                                  
  2480                                  LOCK_ALL	    equ    0
  2481                                  UNLOCK_ALL	    equ    1
  2482                                  LOCK_MUL_RANGE	    equ    2
  2483                                  UNLOCK_MUL_RANGE    equ    3
  2484                                  LOCK_READ	    equ    4
  2485                                  WRITE_UNLOCK	    equ    5
  2486                                  LOCK_ADD	    equ    6
  2487                                  
  2488                                  ;**	Structure for Lock buffer
  2489                                  
  2490                                  struc LockBuf
  2491 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2492 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2493                                  endstruc
  2494                                  
  2495                                  ;============================================================================
  2496                                  ; DPL.ASM, MSDOS 6.0, 1991
  2497                                  ;============================================================================
  2498                                  ; 04/08/2018 - Retro DOS v3.0
  2499                                  
  2500                                  ; (SRVCALL.ASM)
  2501                                  
  2502                                  struc DPL
  2503 00000000 ????                    .AX:	resw	1	; AX register
  2504 00000002 ????                    .BX:	resw	1	; BX register
  2505 00000004 ????                    .CX:	resw	1	; CX register
  2506 00000006 ????                    .DX:	resw	1	; DX register
  2507 00000008 ????                    .SI:	resw	1	; SI register
  2508 0000000A ????                    .DI:	resw	1	; DI register
  2509 0000000C ????                    .DS:	resw	1	; DS register
  2510 0000000E ????                    .ES:	resw	1	; ES register
  2511 00000010 ????                    .rsrvd: resw	1	; Reserved
  2512 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2513 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2514                                  .size:
  2515                                  endstruc
  2516                                   
  2517                                  ;============================================================================
  2518                                  ; MSDATA.ASM
  2519                                  ;============================================================================
  2520                                  ;============================================================================
  2521                                  ; MS_DATA.ASM (MSDOS 6.0, 1991) (1)
  2522                                  ;============================================================================
  2523                                  ; 16/07/2018 - Retro DOS 3.0	
  2524                                  
  2525                                  ;Break <Uninitialized data overlayed by initialization code>
  2526                                  
  2527                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
  2528                                  ; Init code overlaps with data area below
  2529                                  
  2530                                  		; Offset 0358h in IBMDOS.COM (MSDOS 3.3)
  2531                                  
  2532                                  ;	I_am    TIMEBUF,6               ; Time read from clock device
  2533                                  ;	I_am    DEVIOBUF,2              ; Buffer for I/O under file assignment
  2534                                  
  2535                                  TIMEBUF		EQU 	DATASEGMENT	; Offset 0358h (in IBMDOS.COM 3.3)
  2536                                  DEVIOBUF	EQU	TIMEBUF+6
  2537                                  ;
  2538                                  ; The following areas are used as temp buffer in EXEC system call
  2539                                  ;
  2540                                  ;       I_am    OPENBUF,128             ; buffer for name operations
  2541                                  ;       I_am    RenBuf,128              ; buffer for rename destination
  2542                                  
  2543                                  OPENBUF		EQU	DEVIOBUF+2	; DATASEGMENT+8 
  2544                                  RENBUF		EQU	OPENBUF+128	; DATASEGMENT+136
  2545                                  
  2546                                  ; Buffer for search calls
  2547                                  ;        I_am    SEARCHBUF,53		; internal search buffer
  2548                                  ;        I_am    DummyCDS,curdirLen
  2549                                  
  2550                                  SEARCHBUF	EQU	RENBUF+128	; DATASEGMENT+264
  2551                                  DUMMYCDS	EQU	SEARCHBUF+53	; DATASEGMENT+317 
  2552                                  						; Offset 495h in MSDOS 3.3
  2553                                  ;
  2554                                  ; End of contiguous buffer
  2555                                  ;
  2556                                  
  2557                                  ; Temporary directory entry for use by many routines.  Device directory
  2558                                  ; entries (bogus) are built here.
  2559                                  ;
  2560                                  ;        PUBLIC  DevFCB
  2561                                  ;DEVFCB  LABEL   BYTE                    ; Uses NAME1, NAME2, combined
  2562                                  ; WARNING.. do not alter position of NAME1 relative to DEVFCB
  2563                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
  2564                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
  2565                                  
  2566                                  DEVFCB		EQU	DUMMYCDS+curdirLen ; DATASEGMENT+398
  2567                                  
  2568                                  ;	I_am    NAME1,12                ; File name buffer
  2569                                  ;       I_am    NAME2,13                ;
  2570                                  ;	I_am    DESTSTART,WORD          ;
  2571                                  ;	DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
  2572                                  
  2573                                  NAME1		EQU	DEVFCB		; Offset 04E6h in IBMDOS.COM 3.3
  2574                                  NAME2		EQU	NAME1+12	; DATASEGMENT+410
  2575                                  DESTSTART	EQU	NAME2+13	; DATASEGMENT+423
  2576                                  
  2577                                  ;
  2578                                  ; End Temporary directory entry.
  2579                                  ;
  2580                                  
  2581                                  ;       I_am    ATTRIB,BYTE             ; storage for file attributes
  2582                                  ;	I_am    EXTFCB,BYTE             ; TRUE => extended FCB in use
  2583                                  
  2584                                  ATTRIB		EQU	DEVFCB + dir_entry.size ; Offset 0506h
  2585                                  	; Offset 0507h in IBMDOS.COM (MSDOS 3.3) 
  2586                                  EXTFCB		EQU	ATTRIB+1	; DATASEGMENT+431
  2587                                  
  2588                                  ;       I_am    SATTRIB,BYTE            ; Storage for search attributes
  2589                                  ;       I_AM    open_access,BYTE        ; access of open system call
  2590                                  ;       I_am    FoundDel,BYTE           ; true => file was deleted
  2591                                  ;       I_am    Found_dev,BYTE          ; true => search found a device
  2592                                  ;       I_am    fSplice,BYTE            ; true => do a splice in transpath
  2593                                  ;       I_am    fSharing,BYTE           ; TRUE => no redirection
  2594                                  ;       I_am    SECCLUSPOS,BYTE         ; Position of first sector within cluster
  2595                                  ;       I_am    TRANS,BYTE              ;
  2596                                  ;       I_am    READOP,BYTE             ;
  2597                                  ;       I_am    THISDRV,BYTE            ;
  2598                                  ;       I_am    CLUSFAC,BYTE            ;
  2599                                  ;       I_am    CLUSSPLIT,BYTE          ;
  2600                                  ;       I_am    INSMODE,BYTE            ; true => insert mode in buffered read
  2601                                  ;       I_am    cMeta,BYTE              ; count of meta'ed components found
  2602                                  ;       I_am    VOLID,BYTE              ;
  2603                                  ;       I_am    exit_type,BYTE          ; type of exit...
  2604                                  
  2605                                  SATTRIB		EQU	EXTFCB+1	; DATASEGMENT+432
  2606                                  OPEN_ACCESS	EQU	SATTRIB+1	; DATASEGMENT+433
  2607                                  FOUNDDEL	EQU	OPEN_ACCESS+1	; DATASEGMENT+434
  2608                                  FOUND_DEV	EQU	FOUNDDEL+1	; DATASEGMENT+435
  2609                                  FSPLICE		EQU	FOUND_DEV+1	; DATASEGMENT+436
  2610                                  FSHARING	EQU	FSPLICE+1	; DATASEGMENT+437
  2611                                  SECCLUSPOS	EQU	FSHARING+1	; DATASEGMENT+438
  2612                                  TRANS		EQU	SECCLUSPOS+1	; DATASEGMENT+439
  2613                                  READOP		EQU	TRANS+1		; DATASEGMENT+440	
  2614                                  THISDRV		EQU	READOP+1	; DATASEGMENT+441
  2615                                  CLUSFAC		EQU	THISDRV+1	; DATASEGMENT+442
  2616                                  CLUSSPLIT	EQU	CLUSFAC+1	; DATASEGMENT+443
  2617                                  INSMODE		EQU	CLUSSPLIT+1	; DATASEGMENT+444
  2618                                  CMETA		EQU	INSMODE+1	; DATASEGMENT+445
  2619                                  VOLID		EQU	CMETA+1		; DATASEGMENT+446
  2620                                  EXIT_TYPE	EQU	VOLID+1		; DATASEGMENT+447
  2621                                          
  2622                                  ;	EVEN
  2623                                  
  2624                                  ; WARNING - the following two items are accessed as a word
  2625                                  
  2626                                  ;	I_am    CREATING,BYTE           ; true => creating a file
  2627                                  ;	I_am	DELALL,BYTE		; = 0 iff BUGBUG
  2628                                  ;					; = DIRFREE iff BUGBUG
  2629                                  ;	I_am    EXITHOLD,DWORD          ; Temp location for proc terminate
  2630                                  ;	I_am    user_SP,WORD            ; User SP for system call
  2631                                  ;	I_am    user_SS,WORD            ; User SS for system call
  2632                                  ;	I_am    CONTSTK,WORD            ;
  2633                                  ;	I_am    THISDPB,DWORD           ;
  2634                                  ;	I_am    CLUSSAVE,WORD           ;
  2635                                  ; MSDOS 3.3
  2636                                  ;	I_am    CLUSSEC,WORD		;	
  2637                                  ;; MSDOS 6.0
  2638                                  ;;	I_am    CLUSSEC,DWORD           ;>32mb         ; AC0000
  2639                                  
  2640                                  	; Offset 0518h in IBMDOS.COM (MSDOS 3.3) 
  2641                                  
  2642                                  CREATING	EQU	EXIT_TYPE+1 	; DATASEGMENT+448
  2643                                  	; (End of 'MOVDPB' (in MSINIT) - Offset 0519h (just after 'retf'))
  2644                                  DELALL		EQU	CREATING+1	; DATASEGMENT+449
  2645                                  EXITHOLD	EQU	DELALL+1	; DATASEGMENT+450
  2646                                  USER_SP		EQU	EXITHOLD+4	; DATASEGMENT+454
  2647                                  USER_SS		EQU	USER_SP+2	; DATASEGMENT+456
  2648                                  CONTSTK		EQU	USER_SS+2	; DATASEGMENT+458	
  2649                                  THISDPB		EQU	CONTSTK+2	; DATASEGMENT+460
  2650                                  CLUSSAVE	EQU	THISDPB+4	; DATASEGMENT+464
  2651                                  CLUSSEC		EQU	CLUSSAVE+2	; Offset 052Ah ; DATASEGENT+466
  2652                                  
  2653                                  ;       I_am    PREREAD,WORD            ; 0 means preread; 1 means optional
  2654                                  ;       I_am    FATBYT,WORD             ; Used by ALLOCATE
  2655                                  ;       I_am    FATBYTE,WORD            ; Used by $SLEAZEFUNC
  2656                                  ;       I_am    DEVPT,DWORD             ;
  2657                                  ;       I_am    THISSFT,DWORD           ; Address of user SFT
  2658                                  ;       I_am    THISCDS,DWORD           ; Address of current CDS
  2659                                  ;       I_am    THISFCB,DWORD           ; Address of user FCB
  2660                                  
  2661                                  ; MSDOS 3.3
  2662                                  PREREAD		EQU	CLUSSEC+2	; OffseT 052Ch ; DATASEGMENT+468
  2663                                  
  2664                                  ; MSDOS 6.0
  2665                                  ; PREREAD	EQU	CLUSSEC+4
  2666                                  
  2667                                  FATBYT		EQU	PREREAD+2	; DATASEGMENT+470
  2668                                  FATBYTE		EQU	FATBYT+2	; Offset 0530h ; DATASEGMENT+472
  2669                                  DEVPT		EQU	FATBYTE+2	; DATASEGMENT+474	
  2670                                  THISSFT		EQU	DEVPT+4		; Offset 0536h ; DATASEGMENT+478
  2671                                  THISCDS		EQU	THISSFT+4	; DATASEGMENT+482	
  2672                                  THISFCB		EQU	THISCDS+4	; DATASEGMENT+486
  2673                                  
  2674                                  ; DATASEGMENT+490 :  ; *!!!*
  2675                                  	; Here is offset 0542h in IBMDOS.COM, 1987 (MSDOS 3.3 kernel) 
  2676                                  ;SFN		EQU	THISFCB+4	; DATASEGMENT + 0542h - 0358h
  2677                                  
  2678                                  ;       I_am    SFN,WORD,<-1>           ; SystemFileNumber found for accessfile
  2679                                  ;       I_am    JFN,WORD                ; JobFileNumber found for accessfile
  2680                                  ;       I_am    PJFN,DWORD              ; PointerJobFileNumber found for accessfile
  2681                                  ;       I_am    WFP_START,WORD          ;
  2682                                  ;       I_am    REN_WFP,WORD            ;
  2683                                  ;       I_am    CURR_DIR_END,WORD       ;
  2684                                  ;       I_am    NEXTADD,WORD            ;
  2685                                  ;       I_am    LASTPOS,WORD            ;
  2686                                  ;       I_am    CLUSNUM,WORD            ;
  2687                                  ;       I_am    DIRSEC,DWORD            ;>32mb 		; AC0000
  2688                                  ;       I_am    DIRSTART,WORD           ;
  2689                                  ;       I_am    SECPOS,DWORD		;>32mb Position of first sector accessed
  2690                                  ;       I_am    VALSEC,DWORD		;>32mb Number of valid (previously written)
  2691                                  ;                                       ; sectors
  2692                                  ;       I_am    BYTSECPOS,WORD          ; Position of first byte within sector
  2693                                  ;       I_am    BYTPOS,4                ; Byte position in file of access
  2694                                  ;       I_am    BYTCNT1,WORD            ; No. of bytes in first sector
  2695                                  ;       I_am    BYTCNT2,WORD            ; No. of bytes in last sector
  2696                                  ;       I_am    SECCNT,WORD             ; No. of whole sectors
  2697                                  ;       I_am    ENTFREE,WORD            ;
  2698                                  ;       I_am    ENTLAST,WORD            ;
  2699                                  ;       I_am    NXTCLUSNUM,WORD         ;
  2700                                  ;       I_am    GROWCNT,DWORD           ;
  2701                                  ;       I_am    CURBUF,DWORD            ;
  2702                                  ;       I_am    CONSft,DWORD            ; SFT of console swapped guy.
  2703                                  ;       I_am    SAVEBX,WORD             ;
  2704                                  ;       I_am    SAVEDS,WORD             ;
  2705                                  ;       I_am    restore_tmp,WORD        ; return address for restore world
  2706                                  ;       I_am    NSS,WORD
  2707                                  ;       I_am    NSP,WORD	
  2708                                  
  2709                                  ;	....  [ MS_DATA.ASM (MSDOS 6.0, 1991) (2) ] ; $$$
  2710                                  
  2711                                  ;DOSDATA ENDS
  2712                                  
  2713                                  ;============================================================================
  2714                                  ; MSHEAD.ASM
  2715                                  ;============================================================================
  2716                                  
  2717                                  [BITS 16]
  2718                                  [ORG 0]
  2719                                  
  2720                                  START:
  2721 00000000 E97E73                          JMP     DOSINIT
  2722                                  
  2723                                  ;============================================================================
  2724                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2725                                  ;============================================================================
  2726                                  ; 16/07/2018 - Retro DOS 3.0
  2727                                  
  2728                                  	; MSDOS 6.0
  2729                                  ;	dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  2730                                  ;BioDataSeg:
  2731                                  ;	dw	0070h		; Bios data segment fixed at 70h
  2732                                  
  2733                                  	; MSDOS 3.3
  2734 00000003 0000                    	dw	0
  2735 00000005 00                      	db	0 ; 12/08/2018
  2736 00000006 42554720                	db	"BUG "
  2737 0000000A 0000                    	dw	0
  2738 0000000C 0000                    	dw	0
  2739                                  
  2740                                  ;============================================================================
  2741                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
  2742                                  ;============================================================================
  2743                                  ; 16/07/2018 - Retro DOS 3.0	
  2744                                  
  2745                                  	; MSDOS 3.3
  2746                                  MYNUM:			; Offset 000Eh
  2747 0000000E 0000                    	dw	0	
  2748                                  FCBLRU: 
  2749 00000010 0000                    	dw	0
  2750                                  OpenLRU:
  2751 00000012 0000                    	dw	0
  2752                                  OEM_HANDLER: 		; Pointer to OEM handler code	
  2753 00000014 FFFFFFFF                	dd	-1
  2754                                  LeaveAddr:
  2755                                  	;dd	LeaveDOS
  2756 00000018 [BC15]                  	dw	LeaveDOS ; 12/08/2018
  2757                                  RetryCount:		; Share retries
  2758 0000001A 0300                    	dw	3
  2759                                  RetryLoop:
  2760 0000001C 0100                    	dw	1
  2761                                  LastBuffer:
  2762 0000001E FFFFFFFF                	dd	-1	; Buffer queue recency pointer
  2763                                  CONTPOS:
  2764 00000022 0000                    	dw	0	; location in buffer of next read
  2765                                  arena_head:
  2766 00000024 0000                    	dw	0	; Segment # of first arena in memory
  2767                                  
  2768                                  ;; 16/07/2018
  2769                                  ;;****************************************************************************
  2770                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
  2771                                  ;;****************************************************************************
  2772                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
  2773                                  ;;
  2774                                  ;;	AH = 52h
  2775                                  ;;
  2776                                  ;;	on return:
  2777                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
  2778                                  ;;		Known "invars" fields follow (varies with DOS version):
  2779                                  ;;
  2780                                  ;;	Offset Size		 Description
  2781                                  ;;
  2782                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
  2783                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
  2784                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
  2785                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
  2786                                  ;;		      0 indicates no unread input (DOS 3.x)
  2787                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
  2788                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
  2789                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
  2790                                  ;;	  08   dword  pointer to $CLOCK device driver
  2791                                  ;;	  0C   dword  pointer to CON device driver
  2792                                  ;;	  10   byte   number of logical drives in system
  2793                                  ;;	  11   word   maximum bytes/block of any block device
  2794                                  ;;	  13   dword  pointer to DOS cache buffer header
  2795                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
  2796                                  ;;		      point to the next device in device chain
  2797                                  ;;
  2798                                  ;;****************************************************************************
  2799                                  
  2800                                  ; The following block of data is used by SYSINIT.  Do not change the order or
  2801                                  ; size of this block
  2802                                  
  2803                                  
  2804                                  ; The following block of data is used by SYSINIT. 
  2805                                  ; Do not change the order or size of this block
  2806                                  
  2807                                  ;SYSINITVAR:
  2808                                  SYSINITVARS:
  2809                                  DPBHEAD:
  2810 00000026 00000000                	dd	0	; Pointer to head of DPB-FAT list
  2811                                  SFT_ADDR:
  2812 0000002A [98000000]              	dd	SFTABL	; Pointer to first SFT table
  2813                                  BCLOCK:
  2814 0000002E 00000000                	dd	0	; The CLOCK device
  2815                                  BCON:
  2816 00000032 00000000                	dd	0	; Console device entry points
  2817                                  MAXSEC:
  2818 00000036 8000                    	dw	128	; Maximum allowed sector size
  2819                                  BUFFHEAD:
  2820 00000038 00000000                	dd	0	; Pointer to head of buffer queue
  2821                                  CDSADDR:
  2822 0000003C 00000000                	dd	0	; Pointer to curdir structure table
  2823                                  SFTFCB:
  2824 00000040 00000000                	dd	0	; pointer to FCB cache table
  2825                                  KEEPCOUNT:
  2826 00000044 0000                    	dw	0	; count of FCB opens to keep
  2827                                  NUMIO:
  2828 00000046 00                      	db	0	; Number of disk tables
  2829                                  CDSCOUNT:
  2830 00000047 00                      	db	0	; Number of CDS structures in above
  2831                                  ; A fake header for the NUL device
  2832                                  NULDEV:
  2833 00000048 00000000                	dd	0	; Link to rest of device list
  2834                                  	;dw	8004h
  2835 0000004C 0480                    	dw	DEVTYP | ISNULL	; Null device attributes
  2836 0000004E [2C16]                  	dw	SNULDEV	; Strategy entry point
  2837 00000050 [3216]                  	dw	INULDEV	; Interrupt entry point
  2838 00000052 4E554C2020202020        	db	"NUL     " ; Name of null device
  2839                                  SPLICES:
  2840 0000005A 00                      	db	0	; TRUE => splices being done
  2841                                  
  2842                                  	; MSDOS 6.0 
  2843                                  ;Special_Entries:
  2844                                  ;	dw	0	; address of special entries	;AN000;
  2845                                  ;UU_IFS_DOS_CALL:
  2846                                  ;	dd	0	; entry for IFS DOS service	;AN000;
  2847                                  ;; 
  2848                                  ;; UU_IFS_HEADER:
  2849                                  ;; 	dd	0	; IFS header chain		;AN000;
  2850                                  ;;
  2851                                  ;ChkCopyProt:
  2852                                  ;	dw	0	; M068
  2853                                  ;A20OFF_PSP:
  2854                                  ;	dw	0	; M068
  2855                                  ;BUFFERS_PARM1:
  2856                                  ;	dw	0	; value of BUFFERS= ,m 	;AN000;
  2857                                  ;BUFFERS_PARM2:
  2858                                  ;	dw	0	; value of BUFFERS= ,n 	;AN000
  2859                                  ;BOOTDRIVE:
  2860                                  ;	db	0	; the boot drive	;AN000;
  2861                                  ;DDMOVE:
  2862                                  ;	db	0 	; 1 if we need DWORD move ;AN000;
  2863                                  ;EXT_MEM_SIZE:
  2864                                  ;	dw	0	; extended memory size 	;AN000;
  2865                                  
  2866                                  ;HASHINITVAR: ; LABEL   WORD	; AN000;
  2867                                  ;;
  2868                                  ;; Replaced by next two declarations
  2869                                  ;;
  2870                                  ;;UU_BUF_HASH_PTR:
  2871                                  ;;	dd	0	; buffer Hash table addr
  2872                                  ;;UU_BUF_HASH_COUNT:
  2873                                  ;;	dw	1	; number of Hash entries
  2874                                  ;
  2875                                  ;BufferQueue:
  2876                                  ;	dd	0	; Head of the buffer Queue
  2877                                  ;DirtyBufferCount:
  2878                                  ;	dw	0	; Count of Dirty buffers in the Que
  2879                                  ;			; BUGBUG ---- change to byte
  2880                                  ;SC_CACHE_PTR:
  2881                                  ;	dd	0	; secondary cache pointer
  2882                                  ;SC_CACHE_COUNT:
  2883                                  ;	dw	0 	; secondary cache count
  2884                                  ;BuffInHMA:
  2885                                  ;	db	0	; Flag to indicate that buffs are in HMA
  2886                                  ;LoMemBuff:
  2887                                  ;	dd	0	; Ptr to intermediate buffer
  2888                                  ;			;  in Low mem when buffs are in HMA
  2889                                  ;;
  2890                                  ;; All variables which have UU_ as prefix can be reused for other
  2891                                  ;; purposes and can be renamed. All these variables were used for
  2892                                  ;; EMS support of Buffer Manager. Now they are useless for Buffer
  2893                                  ;; manager ---- MOHANS
  2894                                  ;;
  2895                                  ;
  2896                                  ;	I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
  2897                                  ;UU_BUF_EMS_FIRST_PAGE:	
  2898                                  ;	db	0,0,0	; holds the first page above 640K
  2899                                  ;
  2900                                  ;;	I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
  2901                                  ;;					   ; above 640K
  2902                                  ;;UU_BUF_EMS_NPA640:
  2903                                  ;;	dw	0			
  2904                                  ;
  2905                                  ;CL0FATENTRY:
  2906                                  ;	dw	-1	; M014:	Holds the data that
  2907                                  ;			; is used in pack/unpack rts.
  2908                                  ;			; in fat.asm if cluster 0 is specified.
  2909                                  ;			; SR;
  2910                                  ;IoStatFail:
  2911                                  ;	db	0	; IoStatFail has been added to 
  2912                                  ;			; record a fail on an I24 
  2913                                  ;			; issued from IOFUNC on a status call. 
  2914                                  ;
  2915                                  ;;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
  2916                                  ;;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
  2917                                  ;;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
  2918                                  ;;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
  2919                                  ;;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
  2920                                  ;;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
  2921                                  ;
  2922                                  ;;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
  2923                                  ;						; state of the 	buffers page.
  2924                                  ;						; This one byte is retained to 
  2925                                  ;						; keep the size of this data 
  2926                                  ;						; block the same.;
  2927                                  ;ALLOCMSAVE:
  2928                                  ;	db	0	; M063: temp var. used to 
  2929                                  ;			; M063: save alloc method in
  2930                                  ;			; M063: msproc.asm
  2931                                  ;A20OFF_COUNT:
  2932                                  ;	db	0	; M068: indiactes the # of 
  2933                                  ;			; M068: int 21 calls for 
  2934                                  ;			; M068: which A20 is off
  2935                                  ;DOS_FLAG:
  2936                                  ;	db	0	; see DOSSYM.INC for Bit 
  2937                                  ;			; definitions
  2938                                  ;UNPACK_OFFSET:
  2939                                  ;	dw	0	; saves pointer to the start
  2940                                  ;			; of unpack code in exepatch.
  2941                                  ;			; asm.
  2942                                  ;UMBFLAG:
  2943                                  ;	db	0 	; M003: bit 0 indicates the 
  2944                                  ;			; M003: link state of the UMBs
  2945                                  ;			; M003: whether linked or not 
  2946                                  ;			; M003: to the DOS arena chain
  2947                                  ;SAVE_AX:
  2948                                  ;	dw	0	; M000: temp varibale to store ax
  2949                                  ;			; M000: in msproc.asm
  2950                                  ;UMB_HEAD:
  2951                                  ;	dw	-1	; M000: this is initialized to  
  2952                                  ;			; M000: the first umb arena by 
  2953                                  ;			; M000: BIOS sysinit.
  2954                                  ;START_ARENA:
  2955                                  ;	dw	1	; M000: this is the first arena 
  2956                                  ;			; M000: from which DOS will 
  2957                                  ;			; M000: start its scan for alloc.
  2958                                  
  2959                                  ; End of SYSINITVar block
  2960                                  
  2961                                  ; 16/07/2018
  2962                                  ; MSDOS 3.3 (& MDOS 6.0)
  2963                                  
  2964                                  ;
  2965                                  ; Sharer jump table
  2966                                  ;
  2967                                  
  2968                                  ;PUBLIC	JShare
  2969                                  	;EVEN
  2970 0000005B 90                      align 2
  2971                                  
  2972                                  JShare: ; LABEL	DWORD
  2973 0000005C [BB17]0000              		DW	BadCall,0
  2974 00000060 [BF17]0000              MFT_enter	DW	OKCall, 0  ; 1   MFT_enter
  2975 00000064 [BF17]0000              MFTClose	DW	OKCall, 0  ; 2   MFTClose
  2976 00000068 [BB17]0000              MFTclU		DW	BadCall,0  ; 3   MFTclU
  2977 0000006C [BB17]0000              MFTCloseP	DW	BadCall,0  ; 4   MFTCloseP
  2978 00000070 [BB17]0000              MFTCloN		DW	BadCall,0  ; 5   MFTCloN
  2979 00000074 [BB17]0000              set_block	DW	BadCall,0  ; 6   set_block
  2980 00000078 [BB17]0000              clr_block	DW	BadCall,0  ; 7   clr_block
  2981 0000007C [BF17]0000              chk_block	DW	OKCall, 0  ; 8   chk_block
  2982 00000080 [BB17]0000              MFT_get		DW	BadCall,0  ; 9   MFT_get
  2983 00000084 [BB17]0000              ShSave		DW	BadCall,0  ; 10  ShSave
  2984 00000088 [BB17]0000              ShChk		DW	BadCall,0  ; 11  ShChk
  2985 0000008C [BF17]0000              ShCol		DW	OKCall, 0  ; 12  ShCol
  2986 00000090 [BB17]0000              ShCloseFile	DW	BadCall,0  ; 13  ShCloseFile
  2987 00000094 [BB17]0000              ShSU		DW	BadCall,0  ; 14  ShSU
  2988                                  
  2989                                  ;============================================================================
  2990                                  ; CONST2.ASM (MSDOS 6.0, 1991)
  2991                                  ;============================================================================
  2992                                  ; 16/07/2018 - Retro DOS 3.0	
  2993                                  
  2994                                  ;Break <Initialized data and data used at DOS initialization>
  2995                                  
  2996                                  ;
  2997                                  ; We need to identify the parts of the data area that are relevant to tasks
  2998                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
  2999                                  ; data will be gathered with the system code.  The process data under 2.x will
  3000                                  ; be available for swapping and under 3.0 it will be allocated per-process.
  3001                                  ;
  3002                                  ; The data that is system data will be identified by [SYSTEM] in the comments
  3003                                  ; describing that data item.
  3004                                  
  3005                                  ;	AsmVars <Debug, Redirector, ShareF>
  3006                                  
  3007                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
  3008                                  
  3009                                  ;
  3010                                  ; Table of routines for assignable devices
  3011                                  ;
  3012                                  ; MSDOS allows assignment if the following standard devices:
  3013                                  ;   stdin  (usually CON input)
  3014                                  ;   stdout (usually CON output)
  3015                                  ;   auxin  (usually AUX input)
  3016                                  ;   auxout (usually AUX output)
  3017                                  ;   stdlpt (usually PRN output)
  3018                                  ;
  3019                                  ; SPECIAL NOTE:
  3020                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
  3021                                  ;   If we're not at end-of-file, then we always say that we have a character.
  3022                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
  3023                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
  3024                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
  3025                                  ;   as EOF).
  3026                                  
  3027                                  ; Default SFTs for boot up
  3028                                  
  3029                                  		;PUBLIC	SFTABL
  3030                                  
  3031                                  SFTABL:	   ; LABEL   DWORD		; file table
  3032 00000098 FFFF                    		DW -1			; link to next table
  3033 0000009A FFFF                    		DW -1			; link seg to next table
  3034 0000009C 0500                    		DW sf_default_number	; Number of entries in table
  3035 0000009E 00<rep 109h>            		times (sf_default_number*sf_entry_size) db 0
  3036                                  
  3037                                  ; the next two variables relate to the position of the logical stdout/stdin
  3038                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
  3039                                  ; console.
  3040                                  
  3041                                  		; Offset 01A7h in IBMDOS.COM (MSDOS 3.3)
  3042 000001A7 00                      CARPOS:		db 0			; cursor position in stdin
  3043 000001A8 00                      STARTPOS:	db 0			; position of cursor at beginning
  3044 000001A9 00<rep 80h>             INBUF:		times 128 db 0		; general device input buffer
  3045 00000229 00<rep 83h>             CONBUF:		times 131 db 0		; The rest of INBUF and console buffer
  3046                                  		; Offset 02ACh in IBMDOS.COM (MSDOS 3.3)
  3047 000002AC 00                      PFLAG:		db 0			; printer echoing flag
  3048 000002AD 00                      VERFLG:		db 0			; Initialize with verify off
  3049 000002AE 03                      CHARCO:		db 00000011b		; Allows statchks every 4 chars...
  3050                                  switch_character:
  3051 000002AF 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
  3052 000002B0 00                      AllocMethod:	db 0			; how to alloc first(best)last
  3053 000002B1 00                      fShare:		db 0			; TRUE => sharing installed
  3054 000002B2 01                      DIFFNAM:	db 1			; Indicates when MYNAME has changed                                        ; of buffered input call
  3055 000002B3 20<rep 10h>             MYNAME:		times 16 db 20h		; My network name
  3056                                  
  3057                                  ;
  3058                                  ; The following table is a list of addresses that the sharer patches to be
  3059                                  ; PUSH AX to enable the critical sections
  3060                                  ;
  3061                                  		; Offset 02C3h in IBMDOS.COM (MSDOS 3.3)
  3062                                  
  3063                                  ;PUBLIC	CritPatch
  3064                                  
  3065                                  CritPatch:	; LABEL WORD
  3066                                  
  3067                                  ;IRP sect,<critDisk,critDevice>
  3068                                  
  3069                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
  3070                                  ;
  3071                                  ;SR; Change code patch address to a variable in data segment
  3072                                  ;
  3073                                  ;       dw OFFSET DOSDATA: redir_patch
  3074                                  ;       dw OFFSET DOSDATA: redir_patch
  3075                                  ;
  3076                                  ;;hkn	Short_Addr  E&sect
  3077                                  ;;hkn	Short_Addr  L&sect
  3078                                  ;
  3079                                  ;ELSE
  3080                                  ;	DW	0
  3081                                  ;	DW	0
  3082                                  ;ENDIF
  3083                                  ;ENDM
  3084                                  ;	DW	0
  3085                                  
  3086                                  	; 16/07/2018 - Retro DOS v3.0
  3087                                  	; IBMDOS.COM (MSDOS 3.3), offset 02C3h
  3088                                   
  3089 000002C3 [6C20]                  	dw 	EcritDisk
  3090 000002C5 [7420]                  	dw 	LcritDisk			
  3091 000002C7 [7C20]                  	dw	EcritDevice
  3092 000002C9 [8420]                  	dw 	LcritDevice
  3093                                  
  3094 000002CB 0000                    	dw	0
  3095                                  
  3096                                  ;
  3097                                  ; WARNING!!!  PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
  3098                                  ; Also, IBM server 1.0 requires this also.
  3099                                  ;
  3100                                  	;EVEN			; Force swap area to start on word boundry
  3101 000002CD 90                      align 2
  3102                                  	;PUBLIC	SWAP_START
  3103                                  SWAP_START:	; LABEL BYTE
  3104 000002CE 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
  3105 000002CF 00                      INDOS:		db 0		; DOS status for interrupt processing
  3106 000002D0 FF                      WPERR:		db -1		; Write protect error flag
  3107 000002D1 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
  3108 000002D2 0000                    EXTERR:		dw 0		; Extended Error code
  3109                                  
  3110                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
  3111 000002D4 00                      EXTERR_ACTION:	db 0		; Extended Error Action
  3112 000002D5 00                      EXTERR_CLASS:	db 0		; Extended Error Class
  3113                                  ; end warning
  3114                                   
  3115 000002D6 00000000                EXTERRPT:	dd 0		; Extended Error pointer
  3116                                  
  3117 000002DA 8000                    DMAADD:		dw 80H		; User's disk transfer address (disp/seg)
  3118 000002DC 0000                                    dw 0	
  3119 000002DE 0000                    CurrentPDB:	dw 0		; Current process identifier
  3120 000002E0 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
  3121 000002E2 0000                    exit_code:	dw 0		; exit code of last proc.
  3122 000002E4 00                      CURDRV:		db 0		; Default drive (init A)
  3123 000002E5 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
  3124                                  ;				; F.C. 2/17/86
  3125                                  ;CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
  3126                                  ;CPSWSAVE:	db 0		; copy of above in case of ABORT
  3127                                  SWAP_ALWAYS:	; 05/08/2018
  3128 000002E6 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
  3129                                  				;   extended error type stuff.
  3130                                  				;   NOTE: does not have Correct value on
  3131                                  				;   1-12, OEM, Get/Set CurrentPDB,
  3132                                  				;   GetExtendedError system calls)
  3133 000002E8 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
  3134 000002EA 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
  3135 000002EC 0000                    FirstArena:	dw 0		; first free block found
  3136 000002EE 0000                    BestArena:	dw 0		; best free block found
  3137 000002F0 0000                    LastArena:	dw 0		; last free block found
  3138 000002F2 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
  3139 000002F4 0000                    LASTENT:	dw 0		; Last entry for directory search
  3140 000002F6 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
  3141 000002F7 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
  3142 000002F8 00                      NoSetDir:	db 0		; true -> do not set directory
  3143 000002F9 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
  3144 000002FA 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
  3145                                  
  3146                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
  3147                                  	;EVEN
  3148 000002FB 90                      align 2
  3149                                  	; Offset 02FCh in IBMDOS.COM (MSDOS 3.3); 
  3150 000002FC 00                      DAY:		db 0		; Day of month
  3151 000002FD 00                      MONTH:		db 0		; Month of year
  3152 000002FE 0000                    YEAR:		dw 0		; Year (with century)
  3153 00000300 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
  3154 00000302 00                      WEEKDAY:	db 0		; Day of week
  3155                                  ; end warning
  3156                                  
  3157 00000303 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
  3158 00000304 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
  3159 00000305 00                      fAborting:	db 0		; TRUE => abort in progress
  3160                                  
  3161                                  ; Combination of all device call parameters
  3162                                  	;PUBLIC	DEVCALL 	;
  3163                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
  3164                                  DEVCALL: ; 08/08/2018
  3165 00000306 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
  3166 00000307 00                      DEVCALL_REQUNIT: db 0		;Device unit number
  3167 00000308 00                      DEVCALL_REQFUNC: db 0		;Type of request
  3168 00000309 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
  3169 0000030B 00<rep 8h>                       times 8 db 0		;Reserved for queue links
  3170                                  
  3171                                  	;PUBLIC	CALLUNIT
  3172                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
  3173                                  CALLFLSH: ; LABEL   WORD	;
  3174 00000313 00                      CALLMED:	db 0		; media byte
  3175                                  CALLBR:	  ; LABEL   DWORD	;
  3176                                  	;PUBLIC	CALLXAD 	;
  3177                                  CALLXAD:  ; LABEL   DWORD	;
  3178 00000314 00                      CALLRBYT:	db 0		;
  3179                                  	;PUBLIC	CALLVIDM	;
  3180                                  CALLVIDM: ; LABEL   DWORD	;
  3181 00000315 00<rep 3h>              	times 3 db 0	;
  3182                                  	;PUBLIC CallBPB		;
  3183                                  CALLBPB:  ; LABEL   DWORD	;
  3184                                  CALLSCNT:			;
  3185 00000318 0000                    		dw 0		;
  3186                                  	;PUBLIC	CALLSSEC	;
  3187                                  CALLSSEC: ; LABEL   WORD	;
  3188 0000031A 0000                    		dw 0		;
  3189 0000031C 00000000                CALLVIDRW:	dd 0		;
  3190                                  ;*MSDOS 6.0
  3191                                  ;*CALLNEWSC:	dd 0		; starting sector for >32mb
  3192 00000320 00000000                CALLDEVAD:	dd 0		; stash for device entry point
  3193                                  
  3194                                  ; Same as above for I/O calls	;
  3195                                  				;
  3196                                  	;PUBLIC	IOCall		;
  3197                                  ;IOCALL	SRHEAD	<>		;
  3198                                  IOCALL:	; 07/08/2018
  3199 00000324 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
  3200 00000325 00                      IOCALL_REQUNIT:	db 0		;Device unit number
  3201 00000326 00                      IOCALL_REQFUNC: db 0		;Type of request
  3202 00000327 0000                    IOCALL_REQSTAT: dw 0		;Status Word
  3203 00000329 00<rep 8h>              	times 8	db 0		;Reserved for queue links
  3204                                  IOFLSH:	  ; LABEL   WORD	;
  3205                                          ;PUBLIC  IORCHR		;
  3206                                  IORCHR:	  ; LABEL   BYTE	;
  3207 00000331 00                      IOMED:		db 0		;
  3208 00000332 00000000                IOXAD:		dd 0		;
  3209 00000336 0000                    IOSCNT:		dw 0		;	
  3210 00000338 0000                    IOSSEC:		dw 0		;
  3211                                  
  3212                                  ; Call struct for DSKSTATCHK	;
  3213 0000033A 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
  3214 0000033B 00                      		db 0
  3215 0000033C 05                      DSKSTCOM:	db DEVRDND	; = 5
  3216 0000033D 0000                    DSKSTST:	dw 0		;
  3217 0000033F 00<rep 8h>              	times 8	db 0		;
  3218 00000347 00                      DSKCHRET:	db 0		;
  3219                                  
  3220                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
  3221                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
  3222                                  ;hkn   short_addr  DEVIOBUF	;
  3223                                  	
  3224 00000348 [5E03]                  DEVIOBUF_PTR	dw DEVIOBUF
  3225 0000034A 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
  3226 0000034C 0100                    DSKSTCNT:	dw 1		;
  3227 0000034E 0000                    		dw 0		;
  3228                                  
  3229 00000350 00                      CreatePDB:	db 0		; flag for creating a process
  3230                                  
  3231                                  ;* MSDOS 6.0
  3232                                  ;*	;PUBLIC	Lock_Buffer	;
  3233                                  ;*Lock_Buffer: ; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
  3234                                  ;*	    	dd 0		;MS. position
  3235                                  ;*	 	dd 0		;MS. length
  3236                                  
  3237                                  ;hkn; the foll. was moved from dosmes.asm.
  3238                                  
  3239                                  	;EVEN
  3240 00000351 90                      align 2				; needed to maintain offsets
  3241                                  
  3242                                  	; Offset 0352h in IBMDOS.COM (MSDOS 3.3)
  3243                                  	;PUBLIC  UserNum, OEMNum
  3244                                  USERNUM:
  3245 00000352 0000                     		dw 0		; 24 bit user number
  3246 00000354 00                      		db 0
  3247                                  ;IF IBM
  3248                                  ;IF IBMCOPYRIGHT
  3249 00000355 00                      OEMNUM:		DB 0		; 8 bit OEM number
  3250                                  ;ELSE
  3251                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
  3252                                  ;ENDIF
  3253                                  ;ELSE
  3254                                  ;OEMNUM:	DB 0FFh
  3255                                  ;ENDIF
  3256                                  
  3257                                  ; 17/07/2018
  3258                                  ;----------------------------------------------------------------------------
  3259                                  ; (MSDOS 3.3, DOSMES.INC, 1987)
  3260                                  
  3261                                  ; The next variable points to the country table for the current country
  3262                                  ;	(the table returned by the AL=0 INTERNATIONAL call).
  3263                                  
  3264 00000356 [E40F]                  CurrentCounry:	dw USTABLE			
  3265                                  
  3266                                  
  3267                                  ;DOSDATA ENDS
  3268                                  
  3269                                  ;----------------------------------------------------------------------------
  3270                                  
  3271                                  ; 16/07/2018 - Retro DOS v3.0
  3272                                  
  3273                                  align 2
  3274                                  
  3275                                  DATASEGMENT EQU $ ; 17/04/2018
  3276                                  
  3277                                  ;============================================================================
  3278                                  ; MSINIT.ASM
  3279                                  ;============================================================================
  3280                                  ; 16/07/2018 - Retro DOS v3.0
  3281                                  ;	      (MSINIT code order/reference: MSDOS 3.3, IBMDOS.COM, 1987)
  3282                                  	
  3283                                  ; 15/04/2018 - Retro DOS v2.0 (DATA adaption for NASM)
  3284                                  
  3285                                  ; TITLE MSINIT.ASM -- MS-DOS INITIALIZATION CODE
  3286                                  
  3287                                  ;       ORG     0                       ; reset to beginning of data segment
  3288                                  ; Init code below overlaps with data area
  3289                                  
  3290                                  	
  3291                                  	; Offset 0358h in IBMDOS.COM (MSDOS 3.3)
  3292                                  
  3293                                  ;INITBLOCK DB    110H DUP(0)     ; Allow for segment round up
  3294 00000358 00<rep 110h>            INITBLOCK:	TIMES 272 DB 0
  3295                                  
  3296                                  	; Offset 0468h in IBMDOS.COM (MSDOS 3.3)
  3297                                  
  3298 00000468 0000                    INITSP:		DW 0
  3299 0000046A 0000                    INITSS:		DW 0
  3300                                  ;BUFFSTRT:	DW 0
  3301                                  
  3302                                  	; Offset 046Ch in IBMDOS.COM (MSDOS 3.3)	
  3303                                  
  3304                                  ;ASSUME  CS:DOSGROUP,DS:DOSGROUP,ES:DOSGROUP,SS:NOTHING
  3305                                  ;
  3306                                  ;        EXTRN   QUIT:NEAR,IRET:NEAR,ABSDRD:FAR,ABSDWRT:FAR
  3307                                  ;        EXTRN   COMMAND:NEAR,CALL_ENTRY:NEAR
  3308                                  ;        IF      NOT IBM
  3309                                  ;        EXTRN   HEADER:BYTE
  3310                                  ;        ENDIF
  3311                                  
  3312                                  MOVDPB:
  3313                                  	; 08/07/2018 - Retro DOS v3.0
  3314                                  ; This section of code is safe from being overwritten by block move
  3315                                          ;MOV     SP,[CS:INITSP]
  3316                                          ;MOV     SS,[CS:INITSS]
  3317                                          ; 30/03/2018
  3318 0000046C 8B26[6804]              	MOV     SP,[INITSP]
  3319 00000470 8E16[6A04]                      MOV     SS,[INITSS]
  3320 00000474 F3A4                    	REP     MOVSB
  3321 00000476 FC                              CLD
  3322                                          ; 15/07/2018
  3323                                  	;MOV	[ES:DMAADD+2],DX
  3324 00000477 8916[DC02]              	MOV	[DMAADD+2],DX
  3325 0000047B 8B36[2600]                      MOV     SI,[DPBHEAD]	; Address of first DPB
  3326                                  	;MOV	[ES:DPBHEAD+2],ES
  3327 0000047F 8C06[2800]                      MOV	[DPBHEAD+2],ES
  3328                                  	;MOV	[ES:SFT_ADDR+2],ES
  3329 00000483 8C06[2C00]              	MOV     [SFT_ADDR+2],ES
  3330 00000487 8A0E[4600]                      MOV     CL,[NUMIO]	; Number of DPBs
  3331 0000048B 30ED                            XOR     CH,CH
  3332                                  SETFINDPB:
  3333                                          ; 06/07/2019
  3334                                          ;MOV	[ES:SI+1AH],ES
  3335 0000048D 8C441A                  	mov	[si+1Ah],es
  3336                                          ;MOV	BYTE [ES:SI+17H],-1  ; Never accessed before
  3337 00000490 C64417FF                	mov	byte [si+17h],-1
  3338 00000494 83C620                          ADD     SI,DPBSIZ ; 32	; Point to next DPB
  3339 00000497 E2F4                            LOOP    SETFINDPB
  3340 00000499 83EE20                          SUB     SI,DPBSIZ ; sub si,32
  3341                                  	;MOV	WORD [ES:SI+1AH],-1
  3342 0000049C C7441AFFFF              	mov	word [SI+1Ah],-1
  3343                                  
  3344                                          ; 15/07/2018 - Retro DOS v3.0
  3345                                  	;; MSDOS 2.11
  3346                                          ;MOV	DI,[BUFFSTRT]		; Set up one default buffer
  3347                                  	;MOV	[ES:BUFFHEAD+2],ES
  3348                                          ;MOV	[ES:BUFFHEAD],DI
  3349                                  	; MSDOS 3.3
  3350 000004A1 06                      	push	es ; *
  3351 000004A2 BF[8F73]                	mov	di,SYSBUF+15 
  3352 000004A5 D1DF                    	rcr	di,1
  3353 000004A7 D1EF                    	shr	di,1
  3354 000004A9 D1EF                    	shr	di,1
  3355 000004AB D1EF                    	shr	di,1
  3356 000004AD 8CC0                    	mov	ax,es
  3357 000004AF 01F8                    	add	ax,di
  3358 000004B1 8EC0                    	mov	es,ax
  3359 000004B3 31FF                    	xor	di,di
  3360 000004B5 8C06[3A00]              	mov     [BUFFHEAD+2],es
  3361 000004B9 893E[3800]              	mov     [BUFFHEAD],di
  3362                                  	;	
  3363 000004BD 26C74504FF00                    MOV     WORD [ES:DI+4],00FFH
  3364 000004C3 26C705FFFF                      MOV     WORD [ES:DI],-1
  3365 000004C8 26C74502FFFF                    MOV     WORD [ES:DI+2],-1
  3366 000004CE 07                      	pop	es; * ; 15/07/2018
  3367 000004CF 06                              PUSH    ES
  3368 000004D0 42                              INC     DX ; **			; Leave enough room for the ARENA
  3369 000004D1 8B36[F202]              	mov	si,[ENDMEM] ; 15/07/2018
  3370                                  
  3371                                  	; 11/08/2018 - Retro DOS v3.0
  3372                                          ;invoke _$DUP_PDB		; create jfns and set CurrentPDB
  3373 000004D5 E85E19                  	CALL	_$DUP_PDB
  3374 000004D8 07                              POP	ES
  3375                                  
  3376                                  	; [CurrentPDB] = dx ; **
  3377                                  	; ds = previous [CurrentPDB]
  3378                                  	; es = cs
  3379                                  ;
  3380                                  ; set up memory arena
  3381                                  ;SPECIAL NOTE FOR HIGHMEM VERSION
  3382                                  ; At this point a process header has been built where the start of the 
  3383                                  ; CONSTANTS segment as refed by CS is. From this point until the return 
  3384                                  ; below be careful about references off of CS.
  3385                                  ;
  3386                                  	; 13/04/2018 ; *
  3387                                          ;PUSH	AX ; *
  3388                                  	;MOV	AX,[CurrentPDB]
  3389                                  
  3390                                        	; 06/07/2019
  3391                                  	;MOV	AX,[CS:CurrentPDB] ; 15/03/2018
  3392                                  	;MOV    [ES:CurrentPDB],AX	; Put it in the REAL location
  3393                                          ;MOV	BYTE [ES:CreatePDB],0	; reset flag in REAL location
  3394                                          
  3395 000004D9 2EA1[DE02]              	mov	ax,[cs:CurrentPDB]  ; es = cs
  3396                                  
  3397 000004DD 48                              DEC     AX
  3398 000004DE 26A3[2400]                      MOV     [ES:arena_head],AX
  3399 000004E2 1E                              PUSH    DS
  3400 000004E3 8ED8                            MOV     DS,AX
  3401 000004E5 C60600005A                      MOV     BYTE [ARENA.SIGNATURE],arena_signature_end
  3402 000004EA C70601000000                    MOV     WORD [ARENA.OWNER],arena_owner_system
  3403 000004F0 262B06[F202]                    SUB     AX,[ES:ENDMEM]
  3404 000004F5 F7D8                            NEG     AX
  3405 000004F7 48                              DEC     AX
  3406 000004F8 A30300                          MOV     [ARENA.SIZE],AX
  3407 000004FB 1F                              POP     DS
  3408                                          ;POP	AX ; *
  3409                                  
  3410 000004FC BF[9E00]                        MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
  3411                                  	; 15/07/2018
  3412 000004FF B80300                          MOV     AX,3
  3413 00000502 AB                              STOSW		; Adjust Refcount
  3414                                  	;MOV	DI,SYSINITVAR	; 16/03/2018 (Retro DOS v2.0)
  3415 00000503 BF[3B0F]                	MOV     DI,SysInitTable ; 15/07/2018 (Retro DOS v3.0)
  3416 00000506 CB                              RETF
  3417                                  	
  3418                                  	; 18/04/2018
  3419                                  FILL1	equ	$ - DATASEGMENT
  3420                                  ; ---------------------------------------------------------------------------
  3421                                  ; 16/07/2018 - Retro DOS v3.0
  3422 00000507 00<rep 3Bh>             	times (490-FILL1) db 0	; *!!!*
  3423                                  
  3424                                  ;============================================================================
  3425                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)  (2)
  3426                                  ;============================================================================
  3427                                  ; 16/07/2018 - Retro DOS 3.0	
  3428                                  
  3429                                  ;  MS_DATA.ASM (MSDOS 6.0, 1991) (1) ... $$$
  3430                                   
  3431                                  ; (continues from 'SFN' ..) - from offset 0542h in IBMDOS.COM, 1987 -
  3432                                  
  3433                                  ; DATASEGMENT + 490
  3434                                  
  3435                                  ;       I_am    SFN,WORD,<-1>           ; SystemFileNumber found for accessfile
  3436                                  ;       I_am    JFN,WORD                ; JobFileNumber found for accessfile
  3437                                  ;       I_am    PJFN,DWORD              ; PointerJobFileNumber found for accessfile
  3438                                  ;       I_am    WFP_START,WORD          ;
  3439                                  ;       I_am    REN_WFP,WORD            ;
  3440                                  ;       I_am    CURR_DIR_END,WORD       ;
  3441                                  ;       I_am    NEXTADD,WORD            ;
  3442                                  ;       I_am    LASTPOS,WORD            ;
  3443                                  ;       I_am    CLUSNUM,WORD            ;
  3444                                  ; MSDOS 3.3
  3445                                  ;	I_am	DIRSEC,WORD
  3446                                  ;; MSDOS 6.0
  3447                                  ;;      I_am    DIRSEC,DWORD            ;>32mb		; AC0000
  3448                                  ;       I_am    DIRSTART,WORD           ;
  3449                                  ;       I_am    SECPOS,DWORD		;>32mb Position of first sector accessed
  3450                                  ;       I_am    VALSEC,DWORD		;>32mb Number of valid (previously written)
  3451                                  ;                                       ; sectors
  3452                                  ;       I_am    BYTSECPOS,WORD          ; Position of first byte within sector
  3453                                  ;       I_am    BYTPOS,4                ; Byte position in file of access
  3454                                  ;       I_am    BYTCNT1,WORD            ; No. of bytes in first sector
  3455                                  ;       I_am    BYTCNT2,WORD            ; No. of bytes in last sector
  3456                                  ;       I_am    SECCNT,WORD             ; No. of whole sectors
  3457                                  
  3458 00000542 FFFF                    SFN:		dw -1
  3459 00000544 0000                    JFN:		dw 0
  3460 00000546 00000000                PJFN:		dd 0
  3461 0000054A 0000                    WFP_START: 	dw 0
  3462 0000054C 0000                    REN_WFP: 	dw 0
  3463 0000054E 0000                    CURR_DIR_END: 	dw 0
  3464 00000550 0000                    NEXTADD: 	dw 0
  3465 00000552 0000                    LASTPOS: 	dw 0
  3466 00000554 0000                    CLUSNUM: 	dw 0
  3467                                  ; MSDOS 3.3
  3468 00000556 0000                    DIRSEC: 	dw 0
  3469                                  ; MSDOS 6.0
  3470                                  ;DIRSEC:	dd 0
  3471 00000558 0000                    DIRSTART: 	dw 0
  3472                                  ; MSDOS 3.3
  3473 0000055A 0000                    SECPOS: 	dw 0
  3474                                  ; MSDOS 6.0
  3475                                  ;SECPOS: 	dd 0
  3476                                  ; MSDOS 3.3
  3477 0000055C 0000                    VALSEC: 	dw 0
  3478                                  ; MSDOS 6.0
  3479                                  ;VALSEC: 	dd 0
  3480 0000055E 0000                    BYTSECPOS: 	dw 0
  3481 00000560 00000000                BYTPOS:		dd 0
  3482 00000564 0000                    BYTCNT1: 	dw 0
  3483 00000566 0000                    BYTCNT2: 	dw 0
  3484 00000568 0000                    SECCNT: 	dw 0
  3485                                  
  3486                                  	; Offset 056Ah in IBMDOS.COM (MSDOS 3.3)
  3487                                  ; DATASEGMENT + 530 (in Retro DOS v3.0)
  3488                                  
  3489                                  ;       I_am    ENTFREE,WORD            ;
  3490                                  ;       I_am    ENTLAST,WORD            ;
  3491                                  ;       I_am    NXTCLUSNUM,WORD         ;
  3492                                  ;       I_am    GROWCNT,DWORD           ;
  3493                                  ;       I_am    CURBUF,DWORD            ;
  3494                                  ;       I_am    CONSft,DWORD            ; SFT of console swapped guy.
  3495                                  ;       I_am    SAVEBX,WORD             ;
  3496                                  ;       I_am    SAVEDS,WORD             ;
  3497                                  ;       I_am    restore_tmp,WORD        ; return address for restore world
  3498                                  ;       I_am    NSS,WORD
  3499                                  ;       I_am    NSP,WORD
  3500                                  
  3501 0000056A 0000                    ENTFREE:	dw 0
  3502 0000056C 0000                    ENTLAST:	dw 0
  3503 0000056E 0000                    NXTCLUSNUM:	dw 0
  3504 00000570 00000000                GROWCNT:	dd 0
  3505 00000574 00000000                CURBUF:		dd 0
  3506 00000578 00000000                CONSFT:		dd 0
  3507 0000057C 0000                    SAVEBX:		dw 0
  3508 0000057E 0000                    SAVEDS:		dw 0
  3509 00000580 0000                    RESTORE_TMP:	dw 0
  3510 00000582 0000                    NSS:		dw 0
  3511 00000584 0000                    NSP:		dw 0	 ; Offset 0584h in IBMDOS.COM (MSDOS 3.3)
  3512                                  
  3513                                  ; DATASEGMENT+558 :  ; *!!!*
  3514                                  	; Here is offset 0586h in IBMDOS.COM, 1987 (MSDOS 3.3 kernel) 
  3515                                  
  3516                                  ; MSDOS 6.0
  3517                                  ;       I_am    EXTOPEN_FLAG,WORD,<0>   ;FT. extended open input flag       ;AN000;
  3518                                  ;       I_am    EXTOPEN_ON,BYTE,<0>     ;FT. extended open conditional flag ;AN000;
  3519                                  ;       I_am    EXTOPEN_IO_MODE,WORD,<0>;FT. extended open io mode          ;AN000;
  3520                                  ;       I_am    SAVE_DI,WORD            ;FT. extended open saved DI         ;AN000;
  3521                                  ;       I_am    SAVE_ES,WORD            ;FT. extended open saved ES         ;AN000;
  3522                                  ;       I_am    SAVE_DX,WORD            ;FT. extended open saved DX         ;AN000;
  3523                                  ;       I_am    SAVE_CX,WORD            ;FT. extended open saved CX         ;AN000;
  3524                                  ;       I_am    SAVE_BX,WORD            ;FT. extended open saved BX         ;AN000;
  3525                                  ;       I_am    SAVE_SI,WORD            ;FT. extended open saved SI         ;AN000;
  3526                                  ;       I_am    SAVE_DS,WORD            ;FT. extended open saved DS         ;AN000;
  3527                                  
  3528                                  ;	HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
  3529                                  ;	we used to just pass 16 bits in a register.  Now High_SECTOR holds
  3530                                  ;	the high 16, the low 16 are still in the register.
  3531                                  ;
  3532                                  ;       I_am    HIGH_SECTOR,WORD,<0>    ;>32mb higher sector #		    ;AN000;
  3533                                  ;
  3534                                  ;       ;I_am    UU_HIGH_SECTOR_TEMP,WORD,<0> ;M019: Unused
  3535                                  ;       I_am    OffsetMagicPatch,WORD,<offset MagicPatch> ;scottq 8/6/92
  3536                                  ;                                                         ;see dos\mpatch.asm
  3537                                  ;
  3538                                  ;       I_am    DISK_FULL,BYTE          ;>32mb indicating disk full when 1  ;AN000;
  3539                                  ;       I_am    TEMP_VAR,WORD           ; temporary variable for everyone   ;AN000;
  3540                                  ;       I_am    TEMP_VAR2,WORD          ; temporary variable 2 for everyone ;AN000;
  3541                                  ;       I_am    DrvErr,BYTE             ; used to save drive error          ;AN000;
  3542                                  ;       I_am    DOS34_FLAG,WORD,<0>     ; common flag for DOS 3.4           ;AN000;
  3543                                  ;       I_am    NO_FILTER_PATH,DWORD    ; pointer to orignal path           ;AN000;
  3544                                  ;       I_am    NO_FILTER_DPATH,DWORD   ; pointer to orignal path of destination;AN000;
  3545                                  ;; M008
  3546                                  ;       I_am   AbsRdWr_SS,WORD         ; INT 25/26 user stack segment
  3547                                  ;       I_am   AbsRdWr_SP,WORD         ; INT 25/26 user stack offset
  3548                                  ;       I_am   UU_Callback_flag,BYTE,<0>  ; Unused
  3549                                  ;; M008
  3550                                   
  3551                                  ; make those pushes fast!!!
  3552                                  	;.EVEN
  3553                                  align 2
  3554                                  
  3555                                  ; MSDOS 3.3 ($ MSDOS 6.0)
  3556                                  StackSize equ 180h			; gross but effective
  3557                                  
  3558                                  ;;;StackSize = 300h			; This is a "trial" change IBM hasn't
  3559                                  ;;;					; made up their minds about
  3560                                   
  3561                                  ;
  3562                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
  3563                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
  3564                                  ;
  3565                                   
  3566                                          ;PUBLIC  RENAMEDMA,AuxStack,DskStack,IOStack
  3567                                  RENAMEDMA:  ; LABEL   BYTE		; See DOS_RENAME
  3568                                  	;DB	StackSize DUP (?)       ;
  3569 00000586 00<rep 180h>            	times	StackSize db 0
  3570                                  
  3571                                  AUXSTACK:   ; LABEL   BYTE		;  Offset 0706h in IBMDOS.COM, 1987
  3572                                   	;DB	StackSize DUP (?)       ;
  3573 00000706 00<rep 180h>            	times	StackSize db 0
  3574                                  DSKSTACK:   ; LABEL   BYTE		;  Offset 0886h in IBMDOS.COM, 1987
  3575                                   	;DB	StackSize DUP (?)       ;
  3576 00000886 00<rep 180h>            	times	StackSize db 0
  3577                                  IOSTACK:    ; LABEL   BYTE		;  Offset 0A06h in IBMDOS.COM, 1987
  3578                                   
  3579                                  ; patch space for Boca folks.
  3580                                  ; Say What????!!! This does NOT go into the swappable area!
  3581                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
  3582                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
  3583                                   
  3584                                  ;PUBLIC  IBMPATCH
  3585                                  ;IBMPATCH label byte
  3586                                  ;	I_am    PRINTER_FLAG,BYTE,<0>   ; status of PRINT utility
  3587                                  ;	I_am    VOLCHNG_FLAG,BYTE,<0>   ; true if volume label created
  3588                                  ;	I_am    VIRTUAL_OPEN,BYTE,<0>   ; non-zero if we opened a virtual file
  3589                                  
  3590                                  IBMPATCH:
  3591 00000A06 00                      PRINTER_FLAG:	db 0
  3592 00000A07 00                      VOLCHNG_FLAG:	db 0
  3593 00000A08 00                      VIRTUAL_OPEN:	db 0
  3594                                  
  3595                                  ; MSDOS 6.0
  3596                                  ;; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
  3597                                  ;      I_am     FSeek_drive,BYTE        ;AN000; fastseek drive #
  3598                                  ;      I_am     FSeek_firclus,WORD      ;AN000; fastseek first cluster #
  3599                                  ;      I_am     FSeek_logclus,WORD      ;AN000; fastseek logical cluster #
  3600                                  ;      I_am     FSeek_logsave,WORD      ;AN000; fastseek returned log clus #
  3601                                  ;      I_am     UU_ACT_PAGE,WORD,<-1>   ;;;;;;; ;BL ; active EMS page ;AN000;
  3602                                  ;      I_am     TEMP_DOSLOC,WORD,<-1>   ;stores the temporary location of dos
  3603                                  					;at SYSINIT time.
  3604                                  ;SWAP_END LABEL   BYTE
  3605                                  ;PUBLIC  SWAP_END
  3606                                  
  3607                                  SWAP_END:
  3608                                   
  3609                                  ;; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
  3610                                  ;;   BE USED. If the size of the swap data area is ODD, it will be rounded up
  3611                                  ;;   to include this byte.
  3612                                  ;       DB      ?
  3613                                  
  3614 00000A09 00                      	db	0
  3615                                   
  3616                                  ;;hkn;	DB      (512+80+32-(SWAP_END-ibmpatch)) DUP (?)
  3617                                  
  3618                                  ;DOSDATA    ENDS
  3619                                  
  3620                                  ; 08/09/2018
  3621 00000A0A 00<rep 243h>            	times 579 db 0
  3622                                  
  3623                                  ;12/08/2018 - Retro DOS v3.0
  3624                                  ;15/07/2018
  3625                                  ;============================================================================
  3626                                  ; 	Retro DOS v3.0
  3627                                  ;============================================================================
  3628 00000C4D 00                      	db 	0
  3629                                  RETRODOSMSG:
  3630 00000C4E 0D0A                    	db	13,10
  3631                                  	;;db	"Retro DOS v3.0 by Erdogan Tan [2018]"
  3632                                  	; 22/11/2022
  3633                                  	;db	"Retro DOS v3.0 by Erdogan Tan [2018-2022]"
  3634                                  	; 16/01/2024
  3635 00000C50 526574726F20444F53-     	db	"Retro DOS v3.0 by Erdogan Tan [2018-2024]"
  3635 00000C59 2076332E3020627920-
  3635 00000C62 4572646F67616E2054-
  3635 00000C6B 616E205B323031382D-
  3635 00000C74 323032345D         
  3636 00000C79 0D0A2400                	db	13,10,"$", 0 
  3637                                  
  3638                                  ;============================================================================
  3639                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3640                                  ;============================================================================
  3641                                  ; 16/07/2018 - Retro DOS 3.0
  3642                                  
  3643                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3644                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3645 00000C7D 03                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3646 00000C7E 1E                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3647                                  
  3648                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3649                                  ;        I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3650                                  ;        I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3651                                  
  3652                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3653                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3654                                  ;
  3655                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3656                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3657                                  
  3658                                  ; Days in year
  3659                                  
  3660                                  YRTAB:   
  3661 00000C7F C8A6                    	DB	200,166			; Leap year
  3662 00000C81 C8A5                    	DB	200,165
  3663 00000C83 C8A5                    	DB	200,165
  3664 00000C85 C8A5                    	DB	200,165
  3665                                  
  3666                                  ; Days of each month
  3667                                  
  3668                                  MONTAB:        
  3669 00000C87 1F                      	DB      31                      ; January
  3670                                  february:
  3671 00000C88 1C                      	DB	28 			; February--reset each 
  3672                                  					; time year changes
  3673 00000C89 1F                              DB      31                      ; March
  3674 00000C8A 1E                              DB      30                      ; April
  3675 00000C8B 1F                              DB      31                      ; May
  3676 00000C8C 1E                              DB      30                      ; June
  3677 00000C8D 1F                              DB      31                      ; July
  3678 00000C8E 1F                              DB      31                      ; August
  3679 00000C8F 1E                              DB      30                      ; September
  3680 00000C90 1F                              DB      31                      ; October
  3681 00000C91 1E                              DB      30                      ; November
  3682 00000C92 1F                              DB      31                      ; December
  3683                                  
  3684                                  ;
  3685                                  ; This is the error code mapping table for INT 21 errors.  This table defines
  3686                                  ; those error codes which are "allowed" for each system call.  If the error
  3687                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3688                                  ; is to return the "real" error via Extended error, and one of the allowed
  3689                                  ; errors on the actual call.
  3690                                  ;
  3691                                  ; The table is organized as follows:
  3692                                  ;
  3693                                  ;    Each entry in the table is of variable size, but the first
  3694                                  ;       two bytes are always:
  3695                                  ;
  3696                                  ;       Call#,Cnt of bytes following this byte
  3697                                  ;
  3698                                  ; EXAMPLE:
  3699                                  ;       Call 61 (OPEN)
  3700                                  ;
  3701                                  ;       DB      61,5,12,3,2,4,5
  3702                                  ;
  3703                                  ;       61 is the AH INT 21 call value for OPEN.
  3704                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3705                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3706                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3707                                  ;       this case 5).  The last value will be the one returned on the call if
  3708                                  ;       the "real" error is not one of the allowed ones.
  3709                                  ;
  3710                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3711                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3712                                  ;   call, so set up an Extended error and leave the current error code alone.
  3713                                  ;
  3714                                  ; The table is terminated by a call value of 0FFh
  3715                                  
  3716                                  ;PUBLIC I21_MAP_E_TAB
  3717                                  	; 10/08/2018
  3718                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3719 00000C93 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3720 00000C97 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3721 00000C9C 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3722 00000CA0 0205                        DB          error_file_not_found,error_access_denied
  3723 00000CA2 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3724 00000CA6 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3725 00000CAA 04                          DB          error_too_many_open_files
  3726 00000CAB 05                          DB          error_access_denied
  3727                                      ; MSDOS 6.0
  3728                                      ;DB  OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3729                                      ;DB          error_too_many_open_files
  3730                                      ;DB          error_not_dos_disk,error_access_denied
  3731                                      ; MSDOS 3.3
  3732 00000CAC 3D0503020C                  DB  OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3733 00000CB1 0405                        DB          error_too_many_open_files,error_access_denied
  3734 00000CB3 3E0106                      DB  CLOSE,1,error_invalid_handle
  3735 00000CB6 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3736 00000CBA 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3737 00000CBE 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3738 00000CC3 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3739 00000CC7 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3740 00000CCC 05                          DB          error_access_denied
  3741 00000CCD 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3742 00000CD2 0605                        DB          error_invalid_handle,error_access_denied
  3743 00000CD4 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3744 00000CD8 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3745                                      ; MSDOS 6.0	
  3746                                      ;DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3747                                      ; MSDOS 3.3	
  3748 00000CDC 47010F                      DB  CURRENT_DIR,1,error_invalid_drive
  3749 00000CDF 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3750 00000CE3 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3751 00000CE7 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3752 00000CEC 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3753 00000CF1 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3754 00000CF4 0805                        DB          error_not_enough_memory,error_access_denied
  3755 00000CF6 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3756 00000CFB 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3757                                      ; MSDOS 6.0
  3758                                      ;DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3759                                      ;DB          error_current_directory,error_access_denied
  3760                                      ; MSDOS 3.3
  3761 00000CFE 5604110302                  DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3762 00000D03 05                          DB          error_access_denied
  3763                                      ; MSDOS 6.0	
  3764                                      ;DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3765                                      ;DB             error_invalid_data,error_invalid_function
  3766                                      ; MSDOS 3.03	
  3767 00000D04 57020601                    DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3768 00000D08 580101                      DB  ALLOCOPER,1,error_invalid_function
  3769 00000D0B 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3770 00000D0F 0405                        DB          error_too_many_open_files,error_access_denied
  3771 00000D11 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3772 00000D15 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3773 00000D18 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3774 00000D1C 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3775 00000D1E 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3776 00000D22 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3777 00000D26 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3778 00000D29 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3779 00000D2D 01                          DB              error_invalid_function
  3780                                      ; MSDOS 6.0		
  3781                                      ;DB	ExtOpen,10
  3782                                      ;DB   error_path_not_found,error_file_not_found,error_invalid_access
  3783                                      ;DB         error_too_many_open_files,error_file_exists,error_not_enough_memory
  3784                                      ;DB         error_not_dos_disk,error_invalid_data
  3785                                      ;DB             error_invalid_function,error_access_denied
  3786                                      ;DB GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3787                                      ;DB         error_invalid_function,error_access_denied
  3788 00000D2E FF                          DB  0FFh
  3789                                  
  3790                                  ;============================================================================
  3791                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3792                                  ;============================================================================
  3793                                  ; 16/07/2018 - Retro DOS 3.0
  3794                                  
  3795                                  ;**
  3796                                  ;
  3797                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
  3798                                  ; errors.  Each entry is 4 bytes long:
  3799                                  ;
  3800                                  ;       Err#,Class,Action,Locus
  3801                                  ;
  3802                                  ; A value of 0FFh indicates a call specific value (ie.  should already
  3803                                  ; be set).  AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
  3804                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
  3805                                  ;
  3806                                  
  3807                                  ;PUBLIC  ERR_TABLE_21
  3808                                  ERR_TABLE_21: ; LABEL   BYTE
  3809 00000D2F 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,     0FFh
  3810 00000D33 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3811 00000D37 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3812 00000D3B 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,     errLOC_Unk
  3813 00000D3F 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,      0FFh
  3814 00000D43 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3815 00000D47 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,     errLOC_Mem
  3816 00000D4B 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3817 00000D4F 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,     errLOC_Mem
  3818 00000D53 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,     errLOC_Mem
  3819 00000D57 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,      errLOC_Unk
  3820 00000D5B 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3821 00000D5F 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,     errLOC_Unk
  3822 00000D63 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3823 00000D67 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,      errLOC_Disk
  3824 00000D6B 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,      errLOC_Disk
  3825 00000D6F 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3826 00000D73 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,      errLOC_Disk
  3827 00000D77 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3828 00000D7B 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3829 00000D7F 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,     0FFh
  3830 00000D83 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,      errLOC_Unk
  3831 00000D87 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,     errLOC_Disk
  3832 00000D8B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,      errLOC_Net
  3833 00000D8F 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,      errLOC_Net
  3834 00000D93 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,      errLOC_Unk
  3835 00000D97 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,     errLOC_Unk
  3836 00000D9B 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3837                                      ; MSDOS 6.0
  3838                                      ;DB  error_handle_EOF,            errCLASS_OutRes,    errACT_Abort,     errLOC_Unk ;AN000;
  3839                                      ;DB  error_handle_Disk_Full,      errCLASS_OutRes,    errACT_Abort,     errLOC_Unk ;AN000;
  3840                                      ;DB  error_sys_comp_not_loaded,   errCLASS_Unk,       errACT_Abort,     errLOC_Disk ;AN001;
  3841 00000D9F FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	    0FFh
  3842                                  
  3843                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
  3844                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
  3845                                  ;		db 2,8,3,2
  3846                                  ;		db 3,8,3,2
  3847                                  ;		db 4,1,4,1
  3848                                  ;		db 5,3,3,0FFh
  3849                                  ;		db 6,7,4,1
  3850                                  ;		db 7,7,5,5
  3851                                  ;		db 8,1,4,5
  3852                                  ;		db 9,7,4,5
  3853                                  ;		db 0Ah,7,4,5
  3854                                  ;		db 0Bh,9,3,1
  3855                                  ;		db 0Ch,7,4,1
  3856                                  ;		db 0Dh,9,4,1
  3857                                  ;		db 0Fh,8,3,2
  3858                                  ;		db 10h,3,3,2
  3859                                  ;		db 11h,0Dh,3,2
  3860                                  ;		db 12h,8,3,2
  3861                                  ;		db 50h,0Ch,3,2
  3862                                  ;		db 20h,0Ah,2,2
  3863                                  ;		db 21h,0Ah,2,2
  3864                                  ;		db 54h,1,4,0FFh
  3865                                  ;		db 56h,3,3,1
  3866                                  ;		db 52h,1,4,2
  3867                                  ;		db 32h,9,3,3
  3868                                  ;		db 55h,0Ch,3,3
  3869                                  ;		db 57h,9,3,1
  3870                                  ;		db 53h,0Dh,4,1
  3871                                  ;		db 24h,1,4,5
  3872                                  ;		db 0FFh,0FFh,0FFh,0FFh
  3873                                  
  3874                                  ;
  3875                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
  3876                                  ; errors.  Each entry is 4 bytes long:
  3877                                  ;
  3878                                  ;       Err#,Class,Action,Locus
  3879                                  ;
  3880                                  ; A Locus value of 0FFh indicates a call specific value (ie.  should already
  3881                                  ; be set).  AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
  3882                                  ; THE END.
  3883                                  
  3884                                  ;PUBLIC  ERR_TABLE_24
  3885                                  ERR_TABLE_24: ; LABEL   BYTE
  3886 00000DA3 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3887 00000DA7 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3888 00000DAB 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,    0FFh
  3889 00000DAF 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3890 00000DB3 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,     errLOC_Disk
  3891 00000DB7 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3892 00000DBB 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,     errLOC_Disk
  3893 00000DBF 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3894 00000DC3 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,     errLOC_Disk
  3895 00000DC7 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,    errLOC_SerDev
  3896 00000DCB 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,     0FFh
  3897 00000DCF 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,     0FFh
  3898 00000DD3 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,     0FFh
  3899 00000DD7 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3900 00000DDB 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3901 00000DDF 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3902 00000DE3 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,      errLOC_Net
  3903 00000DE7 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3904 00000DEB 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3905 00000DEF FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,     0FFh
  3906                                  
  3907                                  
  3908                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
  3909                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
  3910                                  ;		db 14h,4,5,1
  3911                                  ;		db 15h,5,7,0FFh
  3912                                  ;		db 16h,4,5,1
  3913                                  ;		db 17h,0Bh,4,2
  3914                                  ;		db 18h,4,5,1
  3915                                  ;		db 19h,5,1,2
  3916                                  ;		db 1Ah,0Bh,7,2
  3917                                  ;		db 1Bh,0Bh,4,2
  3918                                  ;		db 1Ch,2,7,4
  3919                                  ;		db 1Dh,5,4,0FFh
  3920                                  ;		db 1Eh,5,4,0FFh
  3921                                  ;		db 1Fh,0Dh,4,0FFh
  3922                                  ;		db 20h,0Ah,2,2
  3923                                  ;		db 21h,0Ah,2,2
  3924                                  ;		db 22h,0Bh,7,2
  3925                                  ;		db 32h,9,3,3
  3926                                  ;		db 23h,7,4,1
  3927                                  ;		db 24h,1,4,5
  3928                                  ;		db 0FFh,0Dh,5,0FFh
  3929                                  
  3930                                  ;
  3931                                  ; We need to map old int 24 errors and device driver errors into the new set
  3932                                  ; of errors.  The following table is indexed by the new errors
  3933                                  ;
  3934                                  
  3935                                  ;Public  ErrMap24
  3936                                  ErrMap24: ; Label   BYTE
  3937 00000DF3 13                          DB  error_write_protect	; 0
  3938 00000DF4 14                          DB  error_bad_unit		; 1
  3939 00000DF5 15                          DB  error_not_ready		; 2
  3940 00000DF6 16                          DB  error_bad_command	; 3
  3941 00000DF7 17                          DB  error_CRC		; 4
  3942 00000DF8 18                          DB  error_bad_length	; 5
  3943 00000DF9 19                          DB  error_seek		; 6
  3944 00000DFA 1A                          DB  error_not_DOS_disk	; 7
  3945 00000DFB 1B                          DB  error_sector_not_found	; 8
  3946 00000DFC 1C                          DB  error_out_of_paper	; 9
  3947 00000DFD 1D                          DB  error_write_fault	; A
  3948 00000DFE 1E                          DB  error_read_fault	; B
  3949 00000DFF 1F                          DB  error_gen_failure	; C
  3950 00000E00 1F                          DB  error_gen_failure	; D  RESERVED
  3951 00000E01 1F                          DB  error_gen_failure	; E  RESERVED
  3952 00000E02 22                          DB  error_wrong_disk	; F
  3953                                  
  3954                                  ;Public  ErrMap24End
  3955                                  ErrMap24End: ; LABEL   BYTE
  3956                                  
  3957                                  ; 16/07/2018 - Retro DOS v3.0
  3958                                  ;_MAXCALL:	db 	36
  3959                                  ;_MAXCOM:	db	104
  3960                                  
  3961                                  ; 08/09/2018
  3962 00000E03 24                          db  36
  3963 00000E04 68                          db  104
  3964                                  
  3965                                  ;============================================================================
  3966                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3967                                  ;============================================================================
  3968                                  ; 11/07/2018 - Retro DOS v3.0
  3969                                  
  3970                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3971                                  
  3972 00000E05 90                      align 2
  3973                                  
  3974                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3975                                  
  3976                                  ; Standard Functions
  3977                                  ;DISPATCH    LABEL WORD
  3978                                  DISPATCH:
  3979                                  	; 16/07/2018 - Retro DOS v3.0
  3980                                  	; (MSDOS 3.3)
  3981                                  
  3982 00000E06 [CD64]                          short_addr  _$ABORT			    ;  0      0
  3983 00000E08 [7923]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3984 00000E0A [8223]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3985 00000E0C [3B24]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3986 00000E0E [5824]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3987 00000E10 [5E24]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3988 00000E12 [CB22]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3989 00000E14 [F722]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3990 00000E16 [8C20]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3991 00000E18 [F820]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3992 00000E1A [0421]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3993 00000E1C [7224]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3994 00000E1E [7C24]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3995 00000E20 [531D]                          short_addr  _$DISK_RESET		    ; 13      D
  3996 00000E22 [4F1C]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3997 00000E24 [872B]                          short_addr  _$FCB_OPEN			    ; 15      F
  3998 00000E26 [2525]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3999 00000E28 [872C]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  4000 00000E2A [1C2D]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  4001 00000E2C [C124]                          short_addr  _$FCB_DELETE		    ; 19     13
  4002 00000E2E [732C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  4003 00000E30 [782C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  4004 00000E32 [592C]                          short_addr  _$FCB_CREATE		    ; 22     16
  4005 00000E34 [9625]                          short_addr  _$FCB_RENAME		    ; 23     17
  4006                                  	; 16/07/2018
  4007                                          ;short_addr _CPMFUNC			    ; 24     18	
  4008 00000E36 [1C17]                          short_addr  NO_OP			    ; 24     18
  4009 00000E38 [4A1C]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  4010 00000E3A [3F1C]                          short_addr  _$SET_DMA			    ; 26     1A
  4011                                  
  4012                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4013                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4014                                  ;                                                                          ;
  4015 00000E3C [DC1C]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  4016 00000E3E [DE1C]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  4017                                  ;                                                                          ;
  4018                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4019                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4020                                  
  4021                                          ;short_addr  _CPMFUNC			    ; 29     1D
  4022                                          ;short_addr  _CPMFUNC			    ; 30     1E
  4023                                  
  4024                                  ; 08/07/2018 - Retro DOS v3.0
  4025                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4026                                  
  4027 00000E40 [1C17]                  	short_addr  NO_OP			    ; 29     1D
  4028 00000E42 [1C17]                  	short_addr  NO_OP			    ; 30     1E
  4029                                  
  4030                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4031                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4032                                  ;                                                                          ;
  4033 00000E44 [221D]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  4034                                  ;                                                                          ;
  4035                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4036                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4037                                          ;short_addr _CPMFUNC			    ; 32     20
  4038                                  
  4039                                  ; 08/07/2018 - Retro DOS v3.0
  4040                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4041                                  
  4042 00000E46 [1C17]                  	short_addr  NO_OP			    ; 32     20
  4043                                  
  4044 00000E48 [7D2C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  4045 00000E4A [822C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  4046 00000E4C [D624]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  4047 00000E4E [A924]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  4048                                  
  4049                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  4050                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  4051                                  
  4052                                  ; Extended Functions
  4053 00000E50 [711C]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  4054                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4055                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4056                                  ;                                                                          ;
  4057 00000E52 [441E]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  4058                                  ;                                                                          ;
  4059                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4060                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4061 00000E54 [6E2C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  4062 00000E56 [692C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  4063 00000E58 [D11C]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  4064 00000E5A [2418]                          short_addr  _$GET_DATE                      ; 42     2A
  4065 00000E5C [4118]                          short_addr  _$SET_DATE                      ; 43     2B
  4066 00000E5E [6118]                          short_addr  _$GET_TIME                      ; 44     2C
  4067 00000E60 [7218]                          short_addr  _$SET_TIME                      ; 45     2D
  4068 00000E62 [1F1A]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  4069                                  
  4070                                  ; Extended functionality group
  4071 00000E64 [2B1C]                          short_addr  _$GET_DMA                       ; 47     2F
  4072 00000E66 [011A]                          short_addr  _$GET_VERSION                   ; 48     30
  4073 00000E68 [7164]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  4074                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4075                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4076                                  ;                                                                          ;
  4077 00000E6A [241D]                          short_addr  _$GET_DPB			    ; 50     32
  4078                                  ;                                                                          ;
  4079                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4080                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4081 00000E6C [5F14]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  4082 00000E6E [0A1D]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  4083 00000E70 [611C]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  4084 00000E72 [001C]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  4085 00000E74 [891C]                          short_addr  _$CHAR_OPER                     ; 55     37
  4086 00000E76 [261A]                          short_addr  _$INTERNATIONAL                 ; 56     38
  4087                                  ; XENIX CALLS
  4088                                  ;   Directory Group
  4089 00000E78 [5B2F]                          short_addr  _$MKDIR			    ; 57     39
  4090 00000E7A [AD2E]                          short_addr  _$RMDIR			    ; 58     3A
  4091 00000E7C [E92E]                          short_addr  _$CHDIR			    ; 59     3B
  4092                                  ;   File Group
  4093 00000E7E [F470]                          short_addr  _$CREAT			    ; 60     3C
  4094 00000E80 [3A70]                          short_addr  _$OPEN			    ; 61     3D
  4095 00000E82 [C76D]                          short_addr  _$CLOSE		 	    ; 62     3E
  4096 00000E84 [DF6E]                          short_addr  _$READ			    ; 63     3F
  4097 00000E86 [346F]                          short_addr  _$WRITE			    ; 64     40
  4098 00000E88 [4971]                          short_addr  _$UNLINK			    ; 65     41
  4099 00000E8A [396F]                          short_addr  _$LSEEK			    ; 66     42
  4100 00000E8C [0171]                          short_addr  _$CHMOD			    ; 67     43
  4101 00000E8E [B82F]                          short_addr  _$IOCTL			    ; 68     44
  4102 00000E90 [F56F]                          short_addr  _$DUP			    ; 69     45
  4103 00000E92 [1770]                          short_addr  _$DUP2			    ; 70     46
  4104 00000E94 [502E]                          short_addr  _$CURRENT_DIR		    ; 71     47
  4105                                  ;   Memory Group
  4106 00000E96 [5265]                          short_addr  _$ALLOC			    ; 72     48
  4107 00000E98 [6F66]                          short_addr  _$DEALLOC                       ; 73     49
  4108 00000E9A [4B66]                          short_addr  _$SETBLOCK                      ; 74     4A
  4109                                  ;   Process Group
  4110 00000E9C [E65F]                          short_addr  _$EXEC			    ; 75     4B
  4111 00000E9E [A964]                          short_addr  _$EXIT			    ; 76     4C
  4112 00000EA0 [DC5F]                          short_addr  _$WAIT			    ; 77     4D
  4113 00000EA2 [8F2D]                          short_addr  _$FIND_FIRST		    ; 78     4E
  4114                                  ;   Special Group
  4115 00000EA4 [E82D]                          short_addr  _$FIND_NEXT			    ; 79     4F
  4116                                  ; SPECIAL SYSTEM GROUP
  4117                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4118                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4119                                  ;                                                                          ;
  4120 00000EA6 [5314]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  4121 00000EA8 [5914]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  4122 00000EAA [161D]                          short_addr  _$GET_IN_VARS                   ; 82     52
  4123 00000EAC [8C1D]                          short_addr  _$SETDPB			    ; 83     53
  4124                                  ;                                                                          ;
  4125                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4126                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4127 00000EAE [1A1A]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  4128                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4129                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4130                                  ;                                                                          ;
  4131 00000EB0 [361E]                          short_addr  _$DUP_PDB                       ; 85     55
  4132                                  ;                                                                          ;
  4133                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4134                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4135 00000EB2 [7171]                          short_addr  _$RENAME			    ; 86     56
  4136 00000EB4 [A56F]                          short_addr  _$FILE_TIMES                    ; 87     57
  4137 00000EB6 [9066]                          short_addr  _$ALLOCOPER                     ; 88     58
  4138                                  
  4139                                  ; 08/07/2018 - Retro DOS v3.0
  4140                                  ; -------------------------------------------------------------------------;
  4141                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4142                                  
  4143                                  ; Network extention system calls
  4144 00000EB8 [AE1C]                          short_addr  _$GetExtendedError              ; 89     59
  4145 00000EBA [FE71]                          short_addr  _$CreateTempFile                ; 90     5A
  4146 00000EBC [E671]                          short_addr  _$CreateNewFile                 ; 91     5B
  4147 00000EBE [9672]                          short_addr  _$LockOper                      ; 92     5C
  4148 00000EC0 [B266]                          short_addr  _$ServerCall                    ; 93     5D
  4149 00000EC2 [0869]                          short_addr  _$UserOper                      ; 94     5E
  4150 00000EC4 [9768]                          short_addr  _$AssignOper                    ; 95     5F
  4151 00000EC6 [606D]                          short_addr  _$NameTrans                     ; 96     60
  4152 00000EC8 [1C17]                  	short_addr  NO_OP			    ; 97     61
  4153 00000ECA [5914]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  4154                                  ; the next call is reserved for hangool sys call
  4155                                  	; 16/07/2018
  4156                                  	;short_addr  _$ECS_Call			    ; 99     63
  4157 00000ECC [1C17]                  	short_addr  NO_OP			    ; 99     63
  4158                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4159                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4160                                  ;                                                                          ;
  4161 00000ECE [8614]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  4162                                  ;                                                                          ;
  4163                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4164                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4165 00000ED0 [AC1A]                          short_addr  _$GetExtCntry                   ; 101    65
  4166 00000ED2 [A91B]                          short_addr  _$GetSetCdPg                    ; 102    66
  4167 00000ED4 [166E]                          short_addr  _$ExtHandle                     ; 103    67
  4168 00000ED6 [FA6D]                          short_addr  _$COMMIT                        ; 104    68
  4169                                  
  4170                                  ; 08/07/2018
  4171                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  4172                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  4173                                  
  4174                                  ;	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  4175                                  ;	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  4176                                  ;	short_addr  NO_OP                           ; 107    6B   
  4177                                  ;						    ; IFS_IOCTL no longer 
  4178                                  ;						    ; supported
  4179                                  ;	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  4180                                  
  4181                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4182                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4183                                  ;                                                                          ;
  4184                                  ;ifdef ROMEXEC
  4185                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  4186                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  4187                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  4188                                  ;endif
  4189                                  ;                                                                          ;
  4190                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4191                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4192                                  
  4193                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  4194                                  
  4195                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  4196                                  
  4197                                  ; 08/07/2018 - Retro DOS v3.0
  4198                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4199                                  
  4200                                  ;	If	Installed
  4201                                  
  4202                                  align 2
  4203                                  
  4204                                  ;PUBLIC FOO
  4205                                  
  4206                                  FOO:	; LABEL WORD
  4207 00000ED8 [CE17]                          short_addr  Leave2F
  4208                                  
  4209 00000EDA [DC0E]                  DTab:	DW  DOSTable
  4210                                  
  4211                                  	;PUBLIC FOO,DTAB
  4212                                  
  4213                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  4214                                         
  4215                                  DOSTable:  ; LABEL  WORD
  4216 00000EDC 2F                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  46
  4217 00000EDD [FB17]                          short_addr  DOSInstall          ;   0 install check
  4218 00000EDF [C23A]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  4219 00000EE1 [7E1C]                          short_addr  RECSET              ;   2   RECSET
  4220 00000EE3 [F817]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  4221 00000EE5 [4C56]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  4222 00000EE7 [8423]                          short_addr  OUTT                ;   5   OUT
  4223 00000EE9 [B958]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  4224 00000EEB [DE5D]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  4225 00000EED [7C3B]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  4226 00000EEF [805F]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  4227 00000EF1 [3273]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  4228 00000EF3 [6C38]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  4229 00000EF5 [5538]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  4230 00000EF7 [B918]                          short_addr  DATE16              ;   13  DATE16
  4231 00000EF9 [891F]                          short_addr  Idle		;   14      empty slot
  4232 00000EFB [D25D]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  4233 00000EFD [891F]                          short_addr  Idle		;   16      empty slot
  4234 00000EFF [521F]                          short_addr  StrCpy              ;   17  StrCpy
  4235 00000F01 [6A1F]                          short_addr  StrLen              ;   18  StrLen
  4236 00000F03 [1056]                          short_addr  UCase		;   19  UCase
  4237 00000F05 [7A5E]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  4238 00000F07 [575F]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  4239 00000F09 [1668]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  4240 00000F0B [C869]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  4241 00000F0D [0B16]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  4242 00000F0F [7569]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  4243 00000F11 [856D]                          short_addr  DriveFromText       ;   26  DriveFromText
  4244 00000F13 [6019]                          short_addr  SETYEAR             ;   27  SETYEAR
  4245 00000F15 [F719]                          short_addr  DSUM                ;   28  DSUM
  4246 00000F17 [5419]                          short_addr  DSLIDE              ;   29  DSLIDE
  4247 00000F19 [341F]                          short_addr  StrCmp              ;   30  StrCmp
  4248 00000F1B [BB68]                          short_addr  InitCDS             ;   31  initcds
  4249 00000F1D [E867]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  4250 00000F1F [606D]                          short_addr  _$NameTrans		;   33  $NameTrans
  4251 00000F21 [4317]                          short_addr  CAL_LK              ;   34  CAL_LK
  4252 00000F23 [E44A]                          short_addr  DEVNAME             ;   35  DEVNAME
  4253 00000F25 [891F]                          short_addr  Idle                ;   36  Idle
  4254 00000F27 [781F]                          short_addr  DStrLen             ;   37  DStrLen
  4255 00000F29 [0B20]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  4256 00000F2B [C76D]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  4257 00000F2D [1120]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  4258 00000F2F [DF6E]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  4259 00000F31 [EA1F]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  4260 00000F33 [4A20]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  4261 00000F35 [3D20]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  4262 00000F37 [6720]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  4263                                          
  4264                                  	; 10/08/2018
  4265                                  	;short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  4266                                  
  4267 00000F39 [1C17]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  4268                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  4269                                  
  4270                                  DOSTableEnd:  ; LABEL BYTE
  4271                                  
  4272                                  	;ENDIF
  4273                                  
  4274                                  ;============================================================================
  4275                                  ; DOSTAB.ASM, MSDOS 6.0, 1991
  4276                                  ;============================================================================
  4277                                  ; 16/07/2018 - Retro DOS v3.0
  4278                                  
  4279                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
  4280                                  
  4281                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
  4282                                  ;
  4283                                  	;PUBLIC	SysInitTable
  4284                                  
  4285                                  SysInitTable:	; label  byte
  4286 00000F3B [2600]                  	dw      SYSINITVARS			; pointer to sysinit var
  4287 00000F3D 0000                            dw      0                             	; segment
  4288 00000F3F [FD0F]                          dw      COUNTRY_CDPG		   	; pointer to country tabl
  4289 00000F41 0000                            dw      0                            	; segment of pointer
  4290                                  
  4291                                  ; DOS 3.3 F.C. 6/12/86
  4292                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
  4293                                  ;
  4294                                  	;PUBLIC	FastOpenTable
  4295                                  	;PUBLIC	FastTable		; a better name
  4296                                  	;EXTRN	FastRet:FAR		; defined in misc2.asm
  4297                                  
  4298                                  ; MSDOS 6.0
  4299                                  ;FastTable:     ;label  byte		; a better name
  4300                                  ;FastOpenTable: ;label  byte
  4301                                  ;	dw      2                       ; number of entries
  4302                                  ;	dw      FastRet			; pointer to ret instr.
  4303                                  ;	dw      0                       ; and will be modified by
  4304                                  ;	dw      FastRet			; FASTxxx when loaded in
  4305                                  ;	dw      0                       
  4306                                  
  4307                                  ;
  4308                                  ; DOS 3.3 F.C. 6/12/86
  4309                                  ;
  4310                                  
  4311                                  ;	PUBLIC	FastFlg                 ; flags
  4312                                  ;FastFlg:	;label  byte		; don't change the foll: order
  4313                                  ;FastOpenFlg:
  4314                                  ;	db	0  ; I_am    FastOpenFlg,BYTE,<0>
  4315                                  
  4316                                  ; MSDOS 3.3
  4317                                  FastTable:
  4318                                  FastOpenTable:
  4319 00000F43 0400                    	dw      4 
  4320 00000F45 [0720]                  	dw      FastRet
  4321 00000F47 0000                    	dw      0  ; (('FastRet' segment will be set to CS by DOSINIT))
  4322                                  
  4323                                  	;PUBLIC	FastOpen_Ext_Info
  4324                                  
  4325                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
  4326                                  ; and clusnum  which are filled by DOS 3.ncwhen calling FastOpen Insert
  4327                                  ; or filled by FastOPen when calling FastOpen Lookup
  4328                                  
  4329                                  FastOpen_Ext_Info: ;label  byte		;dirpos
  4330 00000F49 00<rep 5h>              	times	FEI.size db 0	; 5 (for MSDOS 3.3), 11 (for MSDOS 6.0)
  4331                                  
  4332                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
  4333                                  ; when calling FastOpen Lookup
  4334                                  
  4335                                  	;PUBLIC	Dir_Info_Buff
  4336                                  
  4337                                  Dir_Info_Buff:	; label  byte
  4338 00000F4E 00<rep 20h>             	times	dir_entry.size db 0 ; 32 ; segment of pointer
  4339                                  
  4340                                  ; MSDOS 3.3 (IBMDOS.COM, 1987)
  4341                                  FastFlg:
  4342                                  FastOpenFlg:
  4343 00000F6E 00                      	db	0
  4344                                  
  4345                                  	;I_am	Next_Element_Start,WORD	; save next element start offset
  4346                                  Next_Element_Start:
  4347 00000F6F 0000                    	dw	0
  4348                                  
  4349                                  	; MSDOS 6.0
  4350                                  	;I_am    Del_ExtCluster,WORD     ; for dos_delete                       
  4351                                  
  4352                                  ; 17/07/2018
  4353                                  
  4354                                  ; The following is a stack and its pointer for interrupt 2F which is uesd
  4355                                  ; by NLSFUNC.  There is no significant use of this stack, we are just trying
  4356                                  ; not to destroy the INT 21 stack saved for the user.
  4357                                  
  4358                                  	;PUBLIC	USER_SP_2F
  4359                                  
  4360                                  USER_SP_2F:	; LABEL  WORD
  4361 00000F71 [730F]                  	dw	FAKE_STACK_2F
  4362                                  
  4363                                  	;PUBLIC	Packet_Temp
  4364                                  ;Packet_Temp	label  word		; temporary packet used by readtime
  4365                                  	;PUBLIC  DOS_TEMP		; temporary word
  4366                                  ;DOS_TEMP	label  word
  4367                                  FAKE_STACK_2F:
  4368                                  	;dw	14 dup (0)
  4369 00000F73 0000<rep Ch>            	times	12 dw 0			; 12 register temporary storage
  4370                                  
  4371                                  	;PUBLIC	Hash_Temp		; temporary word
  4372                                  ;Hash_Temp	label  word              
  4373                                  	;dw	4 dup (0)		; temporary hash table during config.sys
  4374                                  
  4375                                  	;PUBLIC  SCAN_FLAG             	; flag to indicate key ALT_Q
  4376                                  SCAN_FLAG:	; label  byte
  4377 00000F8B 00                      	db	0
  4378                                  
  4379                                  ; MSDOS 3.3
  4380                                  DISK_FULL:
  4381 00000F8C 00                      	db	0
  4382                                  
  4383                                  	;PUBLIC  DATE_FLAG
  4384                                  DATE_FLAG:   	;label  word 		; flag to
  4385 00000F8D 0000                    	dw     0                	; to update the date
  4386                                  
  4387                                  FETCHI_TAG:	;label  word		; OBSOLETE - no longer used
  4388 00000F8F 0000                    	dw     0			; formerly part of IBM's piracy protection
  4389                                  
  4390                                  ; MSDOS 6.0
  4391                                  ;      PUBLIC	MSG_EXTERROR 		; for system message addr              
  4392                                  ;MSG_EXTERROR	label  DWORD                                                     
  4393                                  ;               dd     0                ; for extended error                   
  4394                                  ;               dd     0                ; for parser                           
  4395                                  ;              	dd     0                ; for critical errror                  
  4396                                  ;              	dd     0                ; for IFS                              
  4397                                  ;              	dd     0                ; for code reduction                   
  4398                                  ;
  4399                                  ;      PUBLIC  	SEQ_SECTOR              ; last sector read                     
  4400                                  ;SEQ_SECTOR    	label  DWORD                                                     
  4401                                  ;              	dd     -1                                                        
  4402                                  ;
  4403                                  ;;      I_am    ACT_PAGE,WORD,<-1>      ; active EMS page                       
  4404                                  ;	I_am    SC_SECTOR_SIZE,WORD     ; sector size for SC                 
  4405                                  ;       I_am    SC_DRIVE,BYTE           ; drive # for secondary cache        
  4406                                  ;       I_am    CurSC_DRIVE,BYTE,<-1>   ; current SC drive                   
  4407                                  ;       I_am    CurSC_SECTOR,DWORD      ; current SC starting sector         
  4408                                  ;       I_am    SC_STATUS,WORD,<0>      ; SC status word                     
  4409                                  ;       I_am    SC_FLAG,BYTE,<0>        ; SC flag                            
  4410                                  ;       I_am    AbsDskErr,WORD,<0>	; Storage for Abs dsk read/write err
  4411                                  ;
  4412                                  ;	PUBLIC 	NO_NAME_ID                                                           
  4413                                  ;NO_NAME_ID	label byte                                                           
  4414                                  ;		db   'NO NAME    '	; null media id                      
  4415                                  ;
  4416                                  ;;hkn; moved from TABLE segment in kstrin.asm
  4417                                  ;
  4418                                  ;Public	KISTR001S,KISTR001E,LOOKSIZ	; 2/17/KK
  4419                                  ;KISTR001S	label	byte		; 2/17/KK
  4420                                  ;LOOKSIZ DB	0			; 0 if byte, NZ if word	2/17/KK
  4421                                  ;KISTR001E	label	byte		; 2/17/KK
  4422                                  ;
  4423                                  ;; the nul device driver used to be part of the code.  However, since the 
  4424                                  ;; header is in the data, and the entry points are only given as an offset,
  4425                                  ;; the strategy and interrupt entry points must also be in the data now.
  4426                                  ;;
  4427                                  ;
  4428                                  ;procedure   snuldev,far
  4429                                  ;assume ds:nothing,es:nothing,ss:nothing, cs:dosdata
  4430                                  ; 	or	es:[bx.reqstat],stdon	; set done bit
  4431                                  ;entry inuldev
  4432                                  ;	ret				; must not be a return!
  4433                                  ;endproc snuldev
  4434                                  ;
  4435                                  
  4436                                  ;============================================================================
  4437                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  4438                                  ;============================================================================
  4439                                  ; 17/07/2018 - Retro DOS v3.0
  4440                                  
  4441                                  ; ----------------------------------------------------------------------------
  4442                                  ; BREAK   <Copyright notice and version>
  4443                                  ; ----------------------------------------------------------------------------
  4444                                  
  4445                                  ;CODSTRT EQU     $
  4446                                  
  4447                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  4448                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  4449                                  
  4450                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  4451                                  ;       module. The reason is so that the data alignments are the same in
  4452                                  ;       IBM-DOS and MS-DOS up through header.
  4453                                  
  4454                                  	;PUBLIC	HEADER
  4455                                  
  4456                                  HEADER:	; LABEL	BYTE
  4457                                          ;IF	DEBUG
  4458                                          ;DB	13,10,"Debugging DOS version "
  4459                                          ;DB	MAJOR_VERSION + "0"
  4460                                          ;DB	"."
  4461                                          ;DB	(MINOR_VERSION / 10) + "0"
  4462                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  4463                                          ;ENDIF
  4464                                  
  4465                                          ;IF	NOT IBM
  4466 00000F91 0D0A4D532D444F5320-             DB	13,10,"MS-DOS version "
  4466 00000F9A 76657273696F6E20   
  4467 00000FA2 33                              DB	MAJOR_VERSION + "0"
  4468 00000FA3 2E                              DB	"."
  4469 00000FA4 33                              DB	(MINOR_VERSION / 10) + "0"
  4470                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  4471 00000FA5 30                              DB	(MINOR_VERSION % 10) + "0"
  4472                                  
  4473                                          ;IF	HIGHMEM
  4474                                          ;DB	"H"
  4475                                          ;ENDIF
  4476                                  
  4477 00000FA6 0D0A436F7079726967-     	DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  4477 00000FAF 687420313938312C38-
  4477 00000FB8 322C38332C38342C38-
  4477 00000FC1 38204D6963726F736F-
  4477 00000FCA 667420436F72702E0D-
  4477 00000FD3 0A24               
  4478                                  	;ENDIF
  4479                                  
  4480                                  ;IF DEBUG
  4481                                  ;	DB	13,10,"$"
  4482                                  ;ENDIF
  4483                                  
  4484                                  ;include copyrigh.inc
  4485                                  
  4486                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  4487                                  	;DB	"Licensed Material - Property of Microsoft "
  4488                                  	;DB	"All rights reserved "
  4489                                  
  4490                                  ;============================================================================
  4491                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4492                                  ;============================================================================
  4493                                  ; 17/07/2018 - Retro DOS v3.0
  4494                                  
  4495                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4496                                  ;	NAME	IBMCODE
  4497                                  
  4498                                  ;BREAK <NullDev -- Driver for null device>
  4499                                  
  4500                                  ; ROMDOS note:
  4501                                  ;	NUL device driver used to be here, but it was removed and placed in
  4502                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4503                                  ;	header, which is also in DOSDATA.
  4504                                  
  4505                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4506                                  
  4507                                  ;Public MSC001S,MSC001E
  4508                                  ;MSC001S label byte
  4509                                  	;IF	IBM
  4510                                  ; Codes returned by BIOS
  4511                                  ERRIN:
  4512 00000FD5 02                      	DB	2			; NO RESPONSE
  4513 00000FD6 06                      	DB	6			; SEEK FAILURE
  4514 00000FD7 0C                      	DB	12			; GENERAL ERROR
  4515 00000FD8 04                      	DB	4			; BAD CRC
  4516 00000FD9 08                      	DB	8			; SECTOR NOT FOUND
  4517 00000FDA 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4518                                  ERROUT:
  4519                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4520 00000FDB 80                      	DB	80H			; NO RESPONSE
  4521 00000FDC 40                      	DB	40H			; Seek failure
  4522 00000FDD 02                      	DB	2			; Address Mark not found
  4523 00000FDE 10                      	DB	10H			; BAD CRC
  4524 00000FDF 04                      	DB	4			; SECTOR NOT FOUND
  4525 00000FE0 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4526                                  
  4527                                  NUMERR	EQU	$-ERROUT
  4528                                  	;ENDIF
  4529                                  ;MSC001E label byte
  4530                                  
  4531                                  ;============================================================================
  4532                                  ; DOSMES.INC (MSDOS 3.3, 1987)
  4533                                  ;============================================================================
  4534                                  ; 17/07/2018 - Retro DOS v3.0
  4535                                  
  4536                                  ;TABLE	SEGMENT BYTE PUBLIC 'TABLE'
  4537                                  
  4538                                  ; The international table(s). Used for DOS 3.x  (x < 3)
  4539                                  ; This is simply a sequence of tables of the following form:
  4540                                  ;
  4541                                  ; Offset
  4542                                  ;		BYTE  Size of this table excluding this byte and the next
  4543                                  ;		WORD  Country code represented by this table
  4544                                  ;			A sequence of n bytes, where n is the number specified
  4545                                  ;			by the first byte above and is not > internat_block_max,
  4546                                  ;			in the correct order for being returned by the
  4547                                  ;			INTERNATIONAL call as follows:
  4548                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  4549                                  ;		5 BYTE	Currency symbol null terminated
  4550                                  ;		2 BYTE	thousands separator null terminated
  4551                                  ;		2 BYTE	Decimal point null terminated
  4552                                  ;		2 BYTE	Date separator null terminated
  4553                                  ;		2 BYTE	Time separator null terminated
  4554                                  ;		1 BYTE	Bit field.  Currency format.
  4555                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  4556                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  4557                                  ;			Bit 2.	=1 imbedded at decimal point, & no spaces;
  4558                                  ;		1 BYTE	No. of significant decimal digits in currency
  4559                                  ;		1 BYTE	Bit field.  Time format.
  4560                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  4561                                  ;		WORD	Segment offset for address of case conversion routine
  4562                                  ;		WORD	RESERVED. Filled in by DOS. Segment value for above routine
  4563                                  ;		2 BYTE	Data list separator null terminated.
  4564                                  ;		   NOTE: The segment part of the DWORD Map_call is set
  4565                                  ;			by the INTERNATIONAL call. Do not try to initialize
  4566                                  ;			it to anything meaningful.
  4567                                  ;
  4568                                  ; The list of tables is terminated by putting a byte of -1 after the last
  4569                                  ;	table (a table with length -1).
  4570                                  
  4571                                  	; PUBLIC  international_table
  4572                                  
  4573                                  ; Offset 0F95h in IBMDOS.COM (MSDOS 3.3), 1987
  4574                                  
  4575                                  international_table:	; LABEL BYTE
  4576                                  
  4577 00000FE1 18                      	DB 	INTERNAT_BLOCK.size  ; = 24 ; Size in bytes of this table
  4578 00000FE2 0100                    	DW 	1		; Country code
  4579                                  USTABLE:
  4580 00000FE4 0000                    	dw	0		; 0-USA, 1-EUR, 2-JAP
  4581 00000FE6 2400000000              	db	'$',0,0,0,0	; Currency Symbol 5 bytes
  4582 00000FEB 2C00                    	db	',',0		; Thousands separator 2 bytes
  4583 00000FED 2E00                    	db	'.',0		; Decimal separator 2 bytes
  4584 00000FEF 2D00                    	db	'-',0		; Date separator 2 bytes
  4585 00000FF1 3A00                    	db	':',0		; Time separator 2 bytes
  4586 00000FF3 00                      	db	0		; Bit values
  4587                                                                 	;   Bit 0 = 0 if currency symbol first
  4588                                                                 	;         = 1 if currency symbol last
  4589                                                                 	;   Bit 1 = 0 if No space after currency symbol
  4590                                                                 	;         = 1 if space after currency symbol
  4591 00000FF4 02                      	db	2		; Number of places after currency dec point
  4592 00000FF5 00                      	db	0		; if 24 hour time, 0 if 12 hour time
  4593 00000FF6 [FE17]                  	dw	MAP_CASE	; Address of case mapping call (DWORD)
  4594 00000FF8 0000                            dw	0		; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  4595                                  				;  in pieces.
  4596 00000FFA 2C00                    	db	',',0		; Data list separator character
  4597                                  
  4598                                  ;	Tables for the IBM PC character set follow. The values
  4599                                  ;	associated with some of the currency symbols may change with
  4600                                  ;	other character sets. You may wish to add or delete country
  4601                                  ;	entries. NOTE: It is not a mistake that the JAPANESE entry
  4602                                  ;	has different currency symbols for the KANJI and
  4603                                  ;	non-KANJI versions.
  4604                                  	
  4605 00000FFC FF                      	DB	-1		; end of table
  4606                                  
  4607                                  ; The following table is used for DOS 3.3
  4608                                  ;DOS country and code page information is defined here for DOS 3.3.
  4609                                  ;The initial value for ccDosCountry is 1 (USA).
  4610                                  ;The initial value for ccDosCodepage is 850.
  4611                                  ;
  4612                                  ;
  4613                                  	;PUBLIC  COUNTRY_CDPG,UCASE_TAB,FILE_UCASE_TAB
  4614                                  	;PUBLIC  FILE_CHAR_TAB
  4615                                  
  4616                                  ; country and code page infomation
  4617                                  
  4618                                  COUNTRY_CDPG:	; label  byte
  4619 00000FFD 0000000000000000        	db	0,0,0,0,0,0,0,0		; reserved words
  4620 00001005 5C434F554E5452592E-     	db	'\COUNTRY.SYS',0	; path name of country.sys
  4620 0000100E 53595300           
  4621 00001012 00<rep 33h>             	times	51 db 0
  4622 00001045 B501                    	dw	437			; system code page id
  4623 00001047 0500                    	dw	5			; number of entries
  4624 00001049 02                      	db	SetUcase		; Ucase type
  4625 0000104A [8610]                  	dw	UCASE_TAB		; pointer to upper case table
  4626 0000104C 0000                    	dw	0			; segment of poiter
  4627 0000104E 04                      	db	SetUcaseFile		; Ucase file char type
  4628 0000104F [0811]                  	dw	FILE_UCASE_TAB		; pointer to file upper case table
  4629 00001051 0000                    	dw	0			; segment of poiter
  4630 00001053 05                      	db	SetFileList		; valid file chars type
  4631 00001054 [8A11]                  	dw	FILE_CHAR_TAB		; pointer to valid file char tab
  4632 00001056 0000                    	dw	0			; segment of poiter
  4633 00001058 06                      	db	SetCollate		; collate type
  4634 00001059 [BA11]                  	dw	COLLATE_TAB		; pointer to collate table
  4635 0000105B 0000                    	dw	0			; segment of pointer
  4636 0000105D 01                      	db	SetCountryInfo		; country info type
  4637 0000105E 2600                    	dw	NEW_COUNTRY_SIZE	; extended country info size
  4638 00001060 0100                    	dw	1			; USA country id
  4639 00001062 B501                    	dw	437			; USA system code page id
  4640 00001064 0000                    	dw	0			; date format
  4641 00001066 2400000000              	db	'$',0,0,0,0		; currency symbol
  4642 0000106B 2C00                    	db	',',0			; thousand separator
  4643 0000106D 2E00                    	db	'.',0			; decimal separator
  4644 0000106F 2D00                    	db	'-',0			; date separator
  4645 00001071 3A00                    	db	':',0			; time separator
  4646 00001073 00                      	db	0			; currency format flag
  4647 00001074 02                      	db	2			; # of disgit in currency
  4648 00001075 00                      	db	0			; time format
  4649 00001076 [FE17]                  	dw	MAP_CASE		;mono case routine entry point
  4650 00001078 0000                    	dw	0			; segment of entry point
  4651 0000107A 2C00                    	db	',',0			; data list separator
  4652 0000107C 000000000000000000-     	dw	0,0,0,0,0		; reserved
  4652 00001085 00                 
  4653                                  
  4654                                  ; upper case table
  4655                                  
  4656                                  UCASE_TAB: 	; label   byte
  4657 00001086 8000                    	dw	128
  4658 00001088 809A45418E418F80        	db	128,154,069,065,142,065,143,128
  4659 00001090 4545454949498E8F        	db	069,069,069,073,073,073,142,143
  4660 00001098 9092924F994F5555        	db	144,146,146,079,153,079,085,085
  4661 000010A0 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
  4662 000010A8 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
  4663 000010B0 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
  4664 000010B8 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4665 000010C0 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4666 000010C8 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4667 000010D0 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4668 000010D8 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4669 000010E0 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4670 000010E8 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
  4671 000010F0 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4672 000010F8 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4673 00001100 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4674                                  
  4675                                  ; file upper case table
  4676                                  
  4677                                  FILE_UCASE_TAB: ; label  byte
  4678 00001108 8000                    	dw	128
  4679 0000110A 809A45418E418F80        	db	128,154,069,065,142,065,143,128
  4680 00001112 4545454949498E8F        	db	069,069,069,073,073,073,142,143
  4681 0000111A 9092924F994F5555        	db	144,146,146,079,153,079,085,085
  4682 00001122 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
  4683 0000112A 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
  4684 00001132 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
  4685 0000113A B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4686 00001142 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4687 0000114A C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4688 00001152 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4689 0000115A D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4690 00001162 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4691 0000116A E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
  4692 00001172 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4693 0000117A F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4694 00001182 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4695                                  
  4696                                  ; file char list
  4697                                  
  4698                                  FILE_CHAR_TAB:	; label  byte
  4699 0000118A 1600                    	dw	22				; length
  4700 0000118C 0100FF                  	db	1,0,255 			; include all
  4701 0000118F 000020                  	db	0,0,20h 			; exclude 0 - 20h
  4702 00001192 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
  4702 0000119B 7C3C3E2B3D3B2C     
  4703                                  	;db	24 dup (?)			; reserved
  4704 000011A2 00<rep 18h>             	times	24 db 0
  4705                                  
  4706                                  ; collate table
  4707                                  
  4708                                  COLLATE_TAB:	; label   byte
  4709 000011BA 0001                    	dw	256
  4710 000011BC 0001020304050607        	db	0,1,2,3,4,5,6,7
  4711 000011C4 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
  4712 000011CC 1011121314151617        	db	16,17,18,19,20,21,22,23
  4713 000011D4 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
  4714 000011DC 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
  4715 000011E4 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
  4716 000011EC 3031323334353637        	db	"0","1","2","3","4","5","6","7"
  4717 000011F4 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
  4718 000011FC 4041424344454647        	db	"@","A","B","C","D","E","F","G"
  4719 00001204 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
  4720 0000120C 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
  4721 00001214 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
  4722 0000121C 6041424344454647        	db	"`","A","B","C","D","E","F","G"
  4723 00001224 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
  4724 0000122C 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
  4725 00001234 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
  4726 0000123C 4355454141414143        	db	"C","U","E","A","A","A","A","C"
  4727 00001244 4545454949494141        	db	"E","E","E","I","I","I","A","A"
  4728 0000124C 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
  4729 00001254 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
  4730 0000125C 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
  4731 00001264 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
  4732 0000126C B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4733 00001274 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4734 0000127C C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4735 00001284 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4736 0000128C D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4737 00001294 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4738 0000129C E053                    	db	224,"S"
  4739 0000129E E2E3E4E5E6E7            	db	226,227,228,229,230,231
  4740 000012A4 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4741 000012AC F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4742 000012B4 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4743                                  
  4744                                  ;include divmes.inc
  4745                                  
  4746                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  4747                                  	;PUBLIC	DIVMES
  4748                                  
  4749 000012BC 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  4749 000012C5 6F766572666C6F770D-
  4749 000012CE 0A                 
  4750                                  
  4751                                  	;PUBLIC	DivMesLen
  4752                                  DivMesLen:
  4753 000012CF 1300                    	DW	$-DIVMES	; Length of the above message in bytes
  4754                                  
  4755                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  4756                                  
  4757                                  ; The following two tables implement the current buffered input editing
  4758                                  ; routines. The tables are pairwise associated in reverse order for ease
  4759                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  4760                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  4761                                  
  4762                                  	;PUBLIC	CANCHAR
  4763                                  CANCHAR:
  4764 000012D1 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  4765                                  	
  4766                                  	;PUBLIC	ESCCHAR
  4767                                  ESCCHAR:
  4768 000012D2 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  4769                                  	
  4770                                  	;IF	NOT Rainbow
  4771                                  
  4772                                  ESCTAB:	; LABEL BYTE
  4773                                  
  4774                                  	;IF	IBM
  4775 000012D3 40                      	DB	64		; Ctrl-Z - F6
  4776 000012D4 4D                      	DB	77		; Copy one char - -->
  4777 000012D5 3B                      	DB	59		; Copy one char - F1
  4778 000012D6 53                      	DB	83		; Skip one char - DEL
  4779 000012D7 3C                      	DB	60		; Copy to char - F2
  4780 000012D8 3E                      	DB	62		; Skip to char - F4
  4781 000012D9 3D                      	DB	61		; Copy line - F3
  4782 000012DA 3D                      	DB	61		; Kill line (no change to template ) - Not used
  4783 000012DB 3F                      	DB	63		; Reedit line (new template) - F5
  4784 000012DC 4B                      	DB	75		; Backspace - <--
  4785 000012DD 52                      	DB	82		; Enter insert mode - INS (toggle)
  4786 000012DE 52                      	DB	82		; Exit insert mode - INS (toggle)
  4787 000012DF 41                      	DB	65		; Escape character - F7
  4788 000012E0 41                      	DB	65		; End of table
  4789                                  	;ENDIF
  4790                                  
  4791                                  ESCEND: ; LABEL BYTE
  4792                                  
  4793                                  ESCTABLEN EQU ESCEND-ESCTAB
  4794                                  
  4795                                  ESCFUNC: ; LABEL WORD
  4796                                  	
  4797 000012E1 [3F21]                  	short_addr  GETCH	; Ignore the escape sequence
  4798 000012E3 [2C22]                  	short_addr  TWOESC
  4799 000012E5 [B422]                  	short_addr  EXITINS
  4800 000012E7 [B422]                  	short_addr  ENTERINS
  4801 000012E9 [B621]                  	short_addr  BACKSP
  4802 000012EB [A022]                  	short_addr  REEDIT
  4803 000012ED [A321]                  	short_addr  KILNEW
  4804 000012EF [3322]                  	short_addr  COPYLIN
  4805 000012F1 [6622]                  	short_addr  SKIPSTR
  4806 000012F3 [3922]                  	short_addr  COPYSTR
  4807 000012F5 [5C22]                  	short_addr  SKIPONE
  4808 000012F7 [3E22]                  	short_addr  COPYONE
  4809 000012F9 [3E22]                  	short_addr  COPYONE
  4810 000012FB [BC22]                  	short_addr  CTRLZ
  4811                                  
  4812                                  	;ENDIF
  4813                                  
  4814                                  ;TABLE	ENDS
  4815                                  
  4816                                  ; 17/07/2018
  4817                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
  4818                                  
  4819                                  ;CRTERRTAB: ; 19/07/2018	
  4820                                  ;	db	0,5,52h,50h,3,5,20h
  4821                                  
  4822                                  ; 08/08/2018
  4823                                  
  4824                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
  4825 000012FD 00                      	DB	0			; none
  4826 000012FE 05                      	DB	error_access_denied	; MakeNode error 1
  4827 000012FF 52                      	DB	error_cannot_make	; MakeNode error 2
  4828 00001300 50                      	DB	error_file_exists	; MakeNode error 3
  4829 00001301 03                      	DB	error_path_not_found	; MakeNode error 4
  4830 00001302 05                      	DB	error_access_denied	; MakeNode error 5
  4831 00001303 20                      	DB	error_sharing_violation ; MakeNode error 6
  4832                                  	; MSDOS 6.0
  4833                                  	;DB	error_file_not_found	; MakeNode error 7
  4834                                  
  4835                                  ;============================================================================
  4836                                  ; DEV.ASM (MSDOS 6.0, 1987)
  4837                                  ;============================================================================
  4838                                  ; 17/07/2018 - Retro DOS v3.0
  4839                                  
  4840                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
  4841                                  
  4842                                  ;Public DEV001S, DEV001E 		; Pathgen labels
  4843                                  ;DEV001s:
  4844                                  ;		length of packets
  4845 00001304 160E160D0F0E            LenTab:		DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
  4846                                  ;LenTab:	db	22,14,22,13,15,14
  4847                                  
  4848                                  ;	       Error Function
  4849                                  
  4850                                  CmdTab:
  4851 0000130A 8604                    	DB	86h, DEVRD	; 0 input
  4852 0000130C 8605                    	DB	86h, DEVRDND	; 1 input status
  4853 0000130E 8708                    	DB	87h, DEVWRT	; 2 output
  4854 00001310 870A                    	DB	87h, DEVOST	; 3 output status
  4855 00001312 8607                    	DB	86h, DEVIFL	; 4 input flush
  4856 00001314 8605                    	DB	86H, DEVRDND	; 5 input status with system WAIT
  4857                                  
  4858                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
  4859                                  
  4860                                  ;CmdTab:
  4861                                  ;	db	86h, 4
  4862                                  ;	db	86h, 5
  4863                                  ;	db	87h, 8
  4864                                  ;	db	87h, 10
  4865                                  ;	db	86h, 7
  4866                                  ;	db	86h, 5
  4867                                  
  4868                                  ;DEV001E:
  4869                                  
  4870                                  ;============================================================================
  4871                                  ; FCB.ASM (MSDOS 6.0, 1987)
  4872                                  ;============================================================================
  4873                                  ; 17/07/2018 - Retro DOS v3.0
  4874                                  
  4875                                  ; Character type table for file name scanning
  4876                                  ; Table provides a mapping of characters to validity bits.
  4877                                  ; Four bits are provided for each character.  Values 7Dh and above
  4878                                  ; have all bits set, so that part of the table is chopped off, and
  4879                                  ; the translation routine is responsible for screening these values.
  4880                                  ; The bit values are defined in DOSSYM.INC
  4881                                  
  4882                                  ;	      ; ^A and NUL
  4883                                  ;CharType:
  4884                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4885                                  ;
  4886                                  ;	      ; ^C and ^B
  4887                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4888                                  ;
  4889                                  ;	      ; ^E and ^D
  4890                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4891                                  ;
  4892                                  ;	      ; ^G and ^F
  4893                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4894                                  ;
  4895                                  ;	      ; TAB and BS
  4896                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4897                                  ;
  4898                                  ;	      ; ^K and ^J
  4899                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4900                                  ;
  4901                                  ;	      ; ^M and ^L
  4902                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4903                                  ;
  4904                                  ;	      ; ^O and ^N
  4905                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4906                                  ;
  4907                                  ;	      ; ^Q and ^P
  4908                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4909                                  ;
  4910                                  ;	      ; ^S and ^R
  4911                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4912                                  ;
  4913                                  ;	      ; ^U and ^T
  4914                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4915                                  ;
  4916                                  ;	      ; ^W and ^V
  4917                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4918                                  ;
  4919                                  ;	      ; ^Y and ^X
  4920                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4921                                  ;
  4922                                  ;	      ; ESC and ^Z
  4923                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4924                                  ;
  4925                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4927                                  ;
  4928                                  ;	      ; ^_ and ^^
  4929                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4930                                  ;
  4931                                  ;	      ; ! and SPACE
  4932                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
  4933                                  ;
  4934                                  ;	      ; # and "
  4935                                  ;	 db   LOW (NOT FFCB+FCHK)
  4936                                  ;
  4937                                  ;	      ; $ - )
  4938                                  ;	 db   3 dup (0FFh)
  4939                                  ;
  4940                                  ;	      ; + and *
  4941                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
  4942                                  ;
  4943                                  ;	      ; - and '
  4944                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
  4945                                  ;
  4946                                  ;	      ; / and .
  4947                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
  4948                                  ;
  4949                                  ;	      ; 0 - 9
  4950                                  ;	 db   5 dup (0FFh)
  4951                                  ;
  4952                                  ;	      ; ; and :
  4953                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
  4954                                  ;
  4955                                  ;	      ; = and <
  4956                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
  4957                                  ;
  4958                                  ;	      ; ? and >
  4959                                  ;	 db   NOT FFCB+FCHK+FDELIM
  4960                                  ;
  4961                                  ;	      ; A - Z
  4962                                  ;	 db   13 dup (0FFh)
  4963                                  ;
  4964                                  ;	      ; \ and [
  4965                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
  4966                                  ;
  4967                                  ;	      ; ^ and ]
  4968                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4969                                  ;
  4970                                  ;	      ; _ - {
  4971                                  ;	 db   15 dup (0FFh)
  4972                                  ;
  4973                                  ;	      ; } and |
  4974                                  ;	 db   NOT FFCB+FCHK+FDELIM
  4975                                  
  4976                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
  4977                                  ;					; character in the table
  4978                                  
  4979                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
  4980                                  
  4981                                  CharType:
  4982 00001316 F6F6F6F6F6F6F6F6                db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4983 0000131E F6F0F6F6F6F6F6F6        	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4984 00001326 F6F6F6F6F6F6F6F6        	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4985 0000132E F6F6F6F6F6F6F6F6        	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4986 00001336 F8FFF6FFFFFFFFFF        	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
  4987 0000133E FFFFFFF4F4FFFEF6        	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
  4988 00001346 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4989 0000134E FFFFF4F4F4F4F4FF        	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
  4990 00001356 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4991 0000135E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4992 00001366 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4993 0000136E FFFFFFF6F6F6FFFF        	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
  4994 00001376 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4995 0000137E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4996 00001386 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4997 0000138E FFFFFFFFF4FFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
  4998 00001396 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4999 0000139E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5000 000013A6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5001 000013AE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5002 000013B6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5003 000013BE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5004 000013C6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5005 000013CE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5006 000013D6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5007 000013DE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5008 000013E6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5009 000013EE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5010 000013F6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5011 000013FE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5012 00001406 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5013 0000140E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5014                                  
  5015                                  ; 02/08/2018 - Retro DOS v3.0
  5016                                  ; DOSTAB.ASM - MSDOS 6.0 - 1991
  5017                                  
  5018                                  ; Offset 13CAh of IBMDOS.COM (MSDOS 3.3), 1987
  5019                                  
  5020 00001416 0000                    exec_init_SP:	dw 0
  5021 00001418 0000                    exec_init_SS:	dw 0
  5022 0000141A 0000                    exec_init_IP:	dw 0
  5023 0000141C 0000                    exec_init_CS:	dw 0
  5024                                  
  5025 0000141E 0000                    exec_signature:	dw 0	; must contain 4D5A  (yay zibo!)
  5026 00001420 0000                    exec_len_mod_512: dw 0	; low 9 bits of length
  5027 00001422 0000                    exec_pages:	dw 0	; number of 512b pages in file
  5028 00001424 0000                    exec_rle_count:	dw 0	; count of reloc entries
  5029 00001426 0000                    exec_par_dir:	dw 0	; number of paragraphs before image
  5030 00001428 0000                    exec_min_BSS:	dw 0	; minimum number of para of BSS
  5031 0000142A 0000                    exec_max_BSS:	dw 0	; max number of para of BSS
  5032 0000142C 0000                    exec_SS:	dw 0	; stack of image
  5033 0000142E 0000                    exec_SP:	dw 0	; SP of image
  5034 00001430 0000                    exec_chksum:	dw 0	; checksum  of file (ignored)
  5035 00001432 0000                    exec_IP:	dw 0	; IP of entry
  5036 00001434 0000                    exec_CS:	dw 0	; CS of entry
  5037 00001436 0000                    exec_rle_table:	dw 0	; byte offset of reloc table
  5038                                  
  5039                                  Exec_Header_Len	EQU $-exec_signature
  5040                                  
  5041                                  ; 02/08/2018 - Retro DOS v3.0
  5042                                  ; SRVCALL.ASM - MSDOS 6.0 - 1991
  5043                                  ;** Server DOS call functions
  5044                                  
  5045 00001438 [3C14]                  SERVERTAB:      dw SERVER_DISP
  5046 0000143A [E566]                  SERVERLEAVE:	dw SERVERRETURN
  5047 0000143C 0B                      SERVER_DISP:	db (SERVER_DISP_END-SERVER_DISP-1)/2
  5048 0000143D [5067]                  		dw SRV_CALL	; 0
  5049 0000143F [E666]                  		dw COMMIT_ALL	; 1
  5050 00001441 [1D67]                  		dw CLOSE_NAME	; 2
  5051 00001443 [2967]                  		dw CLOSE_UID	; 3
  5052 00001445 [3067]                  		dw CLOSE_UID_PID ; 4
  5053 00001447 [3767]                  		dw GET_LIST	; 5
  5054 00001449 [9167]                  		dw GET_DOS_DATA	; 6
  5055 0000144B [B567]                  		dw SPOOL_OPER	; 7
  5056 0000144D [B567]                  		dw SPOOL_OPER	; 8
  5057 0000144F [B567]                  		dw SPOOL_OPER	; 9
  5058 00001451 [C467]                  		dw _$SetExtendedError ; 10
  5059                                  SERVER_DISP_END:
  5060                                  
  5061                                  ;============================================================================
  5062                                  ; MSCODE.ASM
  5063                                  ;============================================================================
  5064                                  
  5065                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  5066                                  ; 03/03/2018
  5067                                  
  5068                                  ;
  5069                                  ; MSCODE.ASM -- MSDOS code
  5070                                  ;
  5071                                  
  5072                                  ;INCLUDE DOSSEG.ASM
  5073                                  ;INCLUDE STDSW.ASM
  5074                                  
  5075                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  5076                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5077                                  
  5078                                  ;.xcref
  5079                                  ;INCLUDE DOSSYM.ASM
  5080                                  ;INCLUDE DEVSYM.ASM
  5081                                  ;.cref
  5082                                  ;.list
  5083                                  
  5084                                  ;IFNDEF  KANJI
  5085                                  ;KANJI   EQU     0       ; FALSE
  5086                                  ;ENDIF
  5087                                  
  5088                                  ;IFNDEF  IBM
  5089                                  ;IBM     EQU     0
  5090                                  ;ENDIF
  5091                                  
  5092                                  ;IFNDEF  HIGHMEM
  5093                                  ;HIGHMEM  EQU     0
  5094                                  ;ENDIF
  5095                                  
  5096                                          ;i_need  USER_SP,WORD
  5097                                          ;i_need  USER_SS,WORD
  5098                                          ;i_need  SAVEDS,WORD
  5099                                          ;i_need  SAVEBX,WORD
  5100                                          ;i_need  INDOS,BYTE
  5101                                          ;i_need  NSP,WORD
  5102                                          ;i_need  NSS,WORD
  5103                                          ;i_need  CURRENTPDB,WORD
  5104                                          ;i_need  AUXSTACK,BYTE
  5105                                          ;i_need  CONSWAP,BYTE
  5106                                          ;i_need  IDLEINT,BYTE
  5107                                          ;i_need  NOSETDIR,BYTE
  5108                                          ;i_need  ERRORMODE,BYTE
  5109                                          ;i_need  IOSTACK,BYTE
  5110                                          ;i_need  WPERR,BYTE
  5111                                          ;i_need  DSKSTACK,BYTE
  5112                                          ;i_need  CNTCFLAG,BYTE
  5113                                          ;i_need  LEAVEADDR,WORD
  5114                                          ;i_need  NULLDEVPT,DWORD
  5115                                  
  5116                                          ;IF NOT IBM
  5117                                          ;i_need  OEM_HANDLER,DWORD
  5118                                          ;ENDIF
  5119                                  
  5120                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  5121                                  
  5122                                  ;============================================================================
  5123                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  5124                                  ;============================================================================
  5125                                  ; 11/07/2018 - Retro DOS v3.0
  5126                                  
  5127                                  ; 18/07/2018
  5128                                  
  5129                                  ; The following two routines are dispatched to directly with ints disabled
  5130                                  ; immediately after the int 21h entry.	no DIS state is set.
  5131                                  
  5132                                  ; ---------------------------------------------------------------------------
  5133                                  ; $Set_current_PDB takes BX and sets it to be the current process
  5134                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  5135                                  ;
  5136                                         ;procedure   $SET_CURRENT_PDB,NEAR
  5137                                  _$SET_CURRENT_PDB:
  5138                                          ;ASSUME	DS:NOTHING,SS:NOTHING
  5139 00001453 2E891E[DE02]                    MOV     [CS:CurrentPDB],BX ; 12/03/2018
  5140 00001458 CF                      	iret ; 08/07/2018 - Retro DOS v3.0
  5141                                  ;$SET_CURRENT_PDB    ENDP
  5142                                  
  5143                                  ; ---------------------------------------------------------------------------
  5144                                  ; $get_current_PDB returns in BX the current process
  5145                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  5146                                  ;
  5147                                          ;procedure $GET_CURRENT_PDB,NEAR
  5148                                  _$GET_CURRENT_PDB:
  5149                                          ;ASSUME	DS:NOTHING,SS:NOTHING
  5150 00001459 2E8B1E[DE02]            	mov	BX,[CS:CurrentPDB] ; 11/07/2018
  5151 0000145E CF                      	iret ; 08/07/2018 - Retro DOS v3.0
  5152                                  ;$GET_CURRENT_PDB    ENDP
  5153                                  ; ---------------------------------------------------------------------------
  5154                                  
  5155                                  ; 11/07/2018 - Retro DOS v3.0
  5156                                  
  5157                                  ;BREAK <$Set_CTRL_C_Trapping -- En/Disable ^C check in dispatcher>
  5158                                  
  5159                                  _$SET_CTRL_C_TRAPPING:
  5160                                  
  5161                                  ; Inputs:
  5162                                  ;       AL = 0 read ^C status
  5163                                  ;       AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  5164                                  ;	AL = 2 Set ^C status to contents of DL.	Output is old state.
  5165                                  ;	     (MSDISP.ASM,MSDOS 6.0, 1991)
  5166                                  ; Function:
  5167                                  ;       Enable disable ^C checking in dispatcher
  5168                                  ; Outputs:
  5169                                  ;       If AL = 0 then DL = 0/1 for ^C off/on
  5170                                  
  5171                                  	; 08/07/2018 - Retro DOS v3.0
  5172                                  
  5173 0000145F 08C0                            OR      AL,AL
  5174 00001461 7506                            JNZ     SHORT CTRL_C_set
  5175                                  
  5176                                  	; 11/07/2018
  5177 00001463 2E8A16[E502]            	mov	dl,[CS:CNTCFLAG]
  5178 00001468 CF                      	iret
  5179                                  
  5180                                  CTRL_C_set:
  5181                                  	; 08/07/2018
  5182 00001469 3C02                    	cmp	al,2
  5183 0000146B 7716                    	ja	short bad_val
  5184 0000146D 740B                    	je	short scct_3
  5185                                  
  5186 0000146F 52                      	push    dx
  5187 00001470 80E201                  	and     dl,1
  5188 00001473 2E8816[E502]            	mov     [cs:CNTCFLAG],dl
  5189 00001478 5A                      	pop     dx
  5190 00001479 CF                      	iret
  5191                                  
  5192                                  scct_3:
  5193 0000147A 80E201                  	and	dl,1
  5194 0000147D 2E8616[E502]                    xchg	dl,[CS:CNTCFLAG]
  5195 00001482 CF                              iret
  5196                                  
  5197                                  bad_val:
  5198 00001483 B0FF                    	MOV	AL,0FFH
  5199 00001485 CF                      	iret
  5200                                  
  5201                                  ; 11/07/2018
  5202                                  
  5203                                  _$SET_PRINTER_FLAG:
  5204                                  	; 08/07/2018 - Retro DOS v3.0
  5205                                  	;mov 	[cs:IOSTACK],al
  5206 00001486 2EA2[060A]              	mov	[cs:PRINTER_FLAG],al
  5207 0000148A CF                      	iret
  5208                                  
  5209                                  ; 08/07/2018 - Retro DOS v3.0
  5210                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  5211                                  
  5212                                  ; ----------------------------------------------------------------------------
  5213                                  ; BREAK   <System call entry points and dispatcher>
  5214                                  ; ----------------------------------------------------------------------------
  5215                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5216                                  
  5217                                          ;procedure   SYSTEM_CALL,NEAR
  5218                                  SYSTEM_CALL:
  5219                                  ;entry	QUIT				; INT 20H entry point
  5220                                  QUIT:
  5221                                  	;MOV	AH,0
  5222 0000148B 30E4                    	xor	ah,ah ; 08/07/2018
  5223 0000148D EB47                    	JMP     SHORT SAVREGS
  5224                                  
  5225                                  ; ---------------------------------------------------------------------------
  5226                                  
  5227                                  ;COMMAND:
  5228                                  ;	;IF	NOT IBM
  5229                                  ;       CMP	AH,SET_OEM_HANDLER
  5230                                  ;       JB      SHORT NOTOEM
  5231                                  ;	; 18/07/2018
  5232                                  ;	je	_$SET_OEM_HANDLER	
  5233                                  ;
  5234                                  ;	; 20/04/2018
  5235                                  ;       ;JMP	_$SET_OEM_HANDLER
  5236                                  ;
  5237                                  ;	; Retro DOS v2.0 - 20/04/2018
  5238                                  ;	CMP	AX, 0FFFFh
  5239                                  ;	;JNE	_$SET_OEM_HANDLER
  5240                                  ;	; 18/07/2018
  5241                                  ;	jne	DO_OEM_FUNC
  5242                                  ;
  5243                                  ;	PUSHA
  5244                                  ;	MOV     SI,RETRODOSMSG
  5245                                  ;       ;CALL	OUTMES
  5246                                  ;wrdosmsg:
  5247                                  ;	mov	ah, 0Eh
  5248                                  ;	mov	bx, 7
  5249                                  ;wrdosmsg_nxt:
  5250                                  ;	cs	lodsb
  5251                                  ;	cmp	al, '$'
  5252                                  ;	je	short wrdosmsg_ok		
  5253                                  ;	int	10h
  5254                                  ;	jmp	short wrdosmsg_nxt
  5255                                  ;wrdosmsg_ok:
  5256                                  ;	POPA
  5257                                  ;	JMP	SHORT BADCALL 
  5258                                  ;	;
  5259                                  ;NOTOEM:
  5260                                  ;	;ENDIF
  5261                                  ;
  5262                                  ;       CMP     AH,MAXCOM
  5263                                  ;       JBE     SHORT SAVREGS
  5264                                  
  5265                                  	; The system call in AH is out of the range that we know how
  5266                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  5267                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  5268                                  	; error as this may break some programs compatability.
  5269                                  
  5270                                  BADCALL:
  5271                                          ;MOV	AL,0
  5272 0000148F 30C0                    	xor	al,al ; 08/07/2018
  5273                                  ;entry	IRET
  5274                                  _IRET:
  5275 00001491 CF                              IRET
  5276                                  
  5277                                  ; ---------------------------------------------------------------------------
  5278                                  
  5279                                  ;entry	CALL_ENTRY                      ; System call entry point and dispatcher
  5280                                  CALL_ENTRY:
  5281 00001492 58                              POP     AX                      ; IP from the long call at 5
  5282 00001493 58                              POP     AX                      ; Segment from the long call at 5
  5283                                          ;POP	WORD [USER_SP]		; IP from the CALL 5
  5284 00001494 2E8F06[1E05]                    POP	WORD [CS:USER_SP] ; 12/03/2018
  5285 00001499 9C                      	PUSHF                           ; Start re-ordering the stack
  5286 0000149A FA                              CLI
  5287 0000149B 50                              PUSH    AX                      ; Save segment
  5288                                          ;PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  5289 0000149C 2EFF36[1E05]                    PUSH	WORD [CS:USER_SP] ; 12/03/2018
  5290 000014A1 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  5291 000014A4 77E9                            JA      SHORT BADCALL
  5292 000014A6 88CC                            MOV     AH,CL
  5293                                  	; 08/07/2018
  5294 000014A8 EB2C                    	jmp	short SAVREGS 
  5295                                  
  5296                                  COMMAND:
  5297                                  	; 08/07/2018 - Retro DOS v3.0
  5298                                  
  5299                                  	;IF	NOT IBM
  5300 000014AA 80FCF8                          CMP	AH,SET_OEM_HANDLER
  5301 000014AD 7221                            JB      SHORT NOTOEM
  5302                                  	; 18/07/2018
  5303 000014AF 0F845E01                	je	_$SET_OEM_HANDLER	
  5304                                  
  5305                                  	; 20/04/2018
  5306                                          ;JMP	_$SET_OEM_HANDLER
  5307                                  
  5308                                  	; Retro DOS v2.0 - 20/04/2018
  5309 000014B3 83F8FF                  	CMP	AX,0FFFFh
  5310                                  	;JNE	_$SET_OEM_HANDLER
  5311                                  	; 18/07/2018
  5312 000014B6 0F856201                	jne	DO_OEM_FUNC
  5313                                  
  5314 000014BA 60                      	PUSHA
  5315 000014BB BE[4E0C]                	MOV     SI,RETRODOSMSG
  5316                                          ;CALL	OUTMES
  5317                                  wrdosmsg:
  5318 000014BE B40E                    	mov	ah, 0Eh
  5319 000014C0 BB0700                  	mov	bx, 7
  5320                                  wrdosmsg_nxt:
  5321 000014C3 2EAC                    	cs	lodsb
  5322 000014C5 3C24                    	cmp	al, '$'
  5323 000014C7 7404                    	je	short wrdosmsg_ok		
  5324 000014C9 CD10                    	int	10h
  5325 000014CB EBF6                    	jmp	short wrdosmsg_nxt
  5326                                  wrdosmsg_ok:
  5327 000014CD 61                      	POPA
  5328 000014CE EBBF                    	JMP	SHORT BADCALL 
  5329                                  	;
  5330                                  
  5331                                  NOTOEM:
  5332                                  	;ENDIF
  5333                                  
  5334 000014D0 FA                      	cli	; 08/07/2018
  5335                                  
  5336                                  _COMMAND: ; MSDOS 3.3 (IBM)
  5337                                  
  5338 000014D1 80FC68                          CMP     AH,MAXCOM
  5339                                  	;JBE	SHORT SAVREGS
  5340 000014D4 77B9                            JA	SHORT BADCALL ; 08/07/2018
  5341                                  
  5342                                  SAVREGS:
  5343                                  	; 10/08/2018
  5344                                  	; 08/07/2018 - Retro DOS v3.0
  5345 000014D6 80FC33                  	cmp	ah,33h
  5346 000014D9 7484                    	jz	short _$SET_CTRL_C_TRAPPING
  5347 000014DB 721C                    	jb	short SaveAllRegs
  5348 000014DD 80FC64                  	cmp	ah,64h
  5349 000014E0 7717                    	ja	short SaveAllRegs
  5350 000014E2 74A2                    	jz	short _$SET_PRINTER_FLAG
  5351 000014E4 80FC51                  	cmp	ah,51h
  5352 000014E7 0F846EFF                	jz	_$GET_CURRENT_PDB
  5353 000014EB 80FC62                  	cmp	ah,62h
  5354 000014EE 0F8467FF                	jz	_$GET_CURRENT_PDB
  5355 000014F2 80FC50                  	cmp     ah,50h
  5356 000014F5 0F845AFF                	jz	_$SET_CURRENT_PDB
  5357                                  SaveAllRegs:
  5358 000014F9 E8FC00                          CALL    save_world
  5359 000014FC 2E8C1E[7E05]                    MOV	[CS:SAVEDS],DS	; 12/03/2018
  5360 00001501 2E891E[7C05]                    MOV	[CS:SAVEBX],BX	; 12/03/2018
  5361 00001506 8CCB                            MOV     BX,CS
  5362 00001508 8EDB                            MOV     DS,BX
  5363                                  ;ASSUME  DS:DOSGROUP
  5364 0000150A FE06[CF02]                      INC     BYTE [INDOS]		; Flag that we're in the DOS
  5365                                  	
  5366                                  	; 08/07/2018 - Retro DOS v3.0        
  5367 0000150E 31C0                    	xor     ax, ax
  5368 00001510 A3[EA02]                	mov     [USER_ID],ax
  5369 00001513 A1[DE02]                	mov     ax,[CurrentPDB]
  5370 00001516 A3[E802]                	mov     [PROC_ID],ax
  5371                                  
  5372 00001519 A1[1E05]                	MOV     AX,[USER_SP]
  5373 0000151C A3[8405]                        MOV     [NSP],AX
  5374 0000151F A1[2005]                        MOV     AX,[USER_SS]
  5375 00001522 A3[8205]                        MOV     [NSS],AX
  5376 00001525 58                              POP     AX
  5377 00001526 50                              PUSH    AX
  5378 00001527 8926[1E05]                      MOV     [USER_SP],SP
  5379 0000152B 8C16[2005]                      MOV     [USER_SS],SS
  5380                                  ;
  5381                                  ; save user stack in his area for later returns (possibly from EXEC)
  5382                                  ; Here comes multitasking!!!
  5383                                  ;
  5384 0000152F 8E1E[DE02]                      MOV     DS,[CurrentPDB]
  5385 00001533 89262E00                        MOV     [PDB.USER_STACK],SP
  5386 00001537 8C163000                        MOV     [PDB.USER_STACK+2],SS
  5387                                  	; 18/07/2018
  5388 0000153B 2EC606[0D05]00          	mov	byte [CS:FSHARING], 0
  5389                                  
  5390 00001541 8CCB                            MOV     BX,CS                   ; no holes here.
  5391 00001543 8ED3                            MOV     SS,BX
  5392                                  ;ASSUME  SS:DOSGROUP
  5393                                  
  5394                                  ;entry	REDISP
  5395                                  REDISP:
  5396 00001545 BC[0607]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  5397 00001548 FB                              STI                             ; Stack OK now
  5398                                  	; 08/07/2018
  5399                                          ;PUSH	CS
  5400                                          ;POP	DS
  5401 00001549 8CCB                    	mov	bx,cs
  5402 0000154B 8EDB                    	mov	ds,bx
  5403 0000154D 30FF                            XOR     BH,BH
  5404 0000154F 883E[0303]                      MOV     [CONSWAP],BH
  5405 00001553 C606[0403]01                    MOV     BYTE [IDLEINT],1
  5406 00001558 883E[F802]                      MOV     BYTE [NoSetDir],bh ; 0	; set directories on search
  5407 0000155C 883E[F602]                      mov	byte [FAILERR],bh ; 0	
  5408 00001560 88E3                    	MOV     BL,AH
  5409 00001562 D1E3                            SHL     BX,1
  5410 00001564 FC                              CLD
  5411 00001565 08E4                            OR      AH,AH
  5412 00001567 7416                            JZ      SHORT DSKROUT		; ABORT
  5413                                  
  5414                                          ;CMP	AH,12
  5415                                          ;JBE	SHORT IOROUT		; Character I/O
  5416                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  5417                                          ;JZ	SHORT IOROUT
  5418                                          ;CMP	AH,SET_CURRENT_PDB
  5419                                          ;JNZ	SHORT DSKROUT
  5420                                  
  5421                                  	; 10/08/2018
  5422 00001569 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  5423 0000156C 743D                    	jz      short DISPCALL
  5424 0000156E 80FC0C                  	cmp     ah,STD_CON_INPUT_FLUSH ; 0Ch
  5425 00001571 770C                    	ja      short DSKROUT
  5426                                  
  5427                                  IOROUT:
  5428 00001573 803E[CE02]00                    CMP     BYTE [ERRORMODE],0
  5429 00001578 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  5430 0000157A BC[060A]                        MOV     SP,IOSTACK
  5431 0000157D EB2C                            JMP     SHORT DISPCALL
  5432                                  
  5433                                  DSKROUT:
  5434                                  	; 08/07/2018 - Retro DOS v3.0
  5435 0000157F A3[E602]                        mov     [USER_IN_AX],ax
  5436 00001582 C606[D102]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk  (Default)
  5437                                  
  5438 00001587 C606[CE02]00                    MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  5439 0000158C C606[D002]FF                    MOV     BYTE [WPERR],-1		; error mode, so good place to
  5440                                                                          ; make sure flags are reset
  5441 00001591 50                      	push    ax
  5442 00001592 B482                    	mov     ah, 82h
  5443 00001594 CD2A                    	int     2Ah 		; Microsoft Networks 
  5444                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  5445 00001596 58                      	pop     ax
  5446 00001597 C606[0403]00            	mov     byte [IDLEINT],0
  5447                                  
  5448 0000159C BC[8608]                        MOV     SP,DSKSTACK
  5449 0000159F F606[E502]FF                    TEST    BYTE [CNTCFLAG],-1
  5450 000015A4 7405                            JZ      SHORT DISPCALL
  5451 000015A6 50                              PUSH    AX
  5452                                          ;invoke	DSKSTATCHK
  5453 000015A7 E8AF40                          CALL	DSKSTATCHK
  5454 000015AA 58                      	POP     AX
  5455                                  DISPCALL:
  5456                                  	; 08/07/2018 -Retro DOS v3.0
  5457                                  	;;;PUSH	WORD [LEAVEADDR] ; (***)
  5458                                          ;;;PUSH	WORD [CS:BX+DISPATCH]
  5459                                          ;;;;PUSH WORD [BX+DISPATCH]
  5460                                  
  5461                                  	; 11/07/2018	
  5462                                  	;mov	bx,[CS:BX+DISPATCH]
  5463 000015AB 8B9F[060E]               	mov	bx,[bx+DISPATCH] 
  5464                                  
  5465                                  	;;;MOV	BX,[SAVEBX]
  5466 000015AF 871E[7C05]              	xchg    bx,[SAVEBX]        
  5467                                  
  5468 000015B3 8E1E[7E05]              	MOV     DS,[SAVEDS]
  5469                                  ;ASSUME	DS:NOTHING
  5470                                          ;return
  5471                                  ;;;	RETN	
  5472                                  
  5473 000015B7 36FF16[7C05]            	call	word [SS:SAVEBX]
  5474                                  
  5475                                  ;entry LEAVE
  5476                                  ;;;_LEAVE:				; Exit from a system call
  5477                                  LeaveDOS: ; 18/07/2018 
  5478                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  5479 000015BC FA                      	CLI
  5480                                          ; 12/03/2018
  5481 000015BD 2EFE0E[CF02]            	DEC     BYTE [CS:INDOS]
  5482 000015C2 2E8B26[1E05]                    MOV     SP,[CS:USER_SP]
  5483 000015C7 2E8E16[2005]                    MOV     SS,[CS:USER_SS]
  5484 000015CC 89E5                    	MOV     BP,SP
  5485                                  	;MOV	[BP.user_AX],AL	
  5486                                          ;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  5487 000015CE 884600                          MOV     [BP],AL
  5488 000015D1 2EA1[8405]              	MOV     AX,[CS:NSP]
  5489 000015D5 2EA3[1E05]                      MOV     [CS:USER_SP],AX
  5490 000015D9 2EA1[8205]                      MOV     AX,[CS:NSS]
  5491 000015DD 2EA3[2005]                      MOV     [CS:USER_SS],AX
  5492 000015E1 E80100                  	CALL    restore_world
  5493                                  
  5494 000015E4 CF                              IRET
  5495                                  
  5496                                  ;SYSTEM_CALL ENDP
  5497                                  
  5498                                  ;
  5499                                  ; restore_world restores all registers ('cept SS:SP, CS:IP, flags) from
  5500                                  ; the stack prior to giving the user control
  5501                                  ;
  5502                                  
  5503                                  ; 11/07/2018 - Retro DOS v3.0
  5504                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  5505                                  ;;restore_tmp DW  ?
  5506                                  ;restore_tmp: 
  5507                                  ;	dw	0
  5508                                          ;procedure restore_world,NEAR
  5509                                  restore_world:
  5510 000015E5 2E8F06[8005]                    POP	WORD [CS:RESTORE_TMP] ; 12/03/2018
  5511 000015EA 58                              POP     AX              ; PUSH    ES
  5512 000015EB 5B                              POP     BX              ; PUSH    DS
  5513 000015EC 59                              POP     CX              ; PUSH    BP
  5514 000015ED 5A                              POP     DX              ; PUSH    DI
  5515 000015EE 5E                              POP     SI              ; PUSH    SI
  5516 000015EF 5F                              POP     DI              ; PUSH    DX
  5517 000015F0 5D                              POP     BP              ; PUSH    CX
  5518 000015F1 1F                              POP     DS              ; PUSH    BX
  5519 000015F2 07                              POP     ES              ; PUSH    AX
  5520                                  	; 07/07/2018 - Retro DOS v3.0
  5521 000015F3 2EFF26[8005]                   	jmp	word [CS:RESTORE_TMP]
  5522                                  
  5523                                  ;restore_world	ENDP
  5524                                  
  5525                                  ;
  5526                                  ; save_world saves complete registers on the stack
  5527                                  ;
  5528                                          ;procedure save_world,NEAR
  5529                                  save_world:
  5530 000015F8 2E8F06[8005]                    POP	WORD [CS:RESTORE_TMP] ; 12/03/2018
  5531 000015FD 06                              PUSH    ES
  5532 000015FE 1E                              PUSH    DS
  5533 000015FF 55                              PUSH    BP
  5534 00001600 57                              PUSH    DI
  5535 00001601 56                              PUSH    SI
  5536 00001602 52                              PUSH    DX
  5537 00001603 51                              PUSH    CX
  5538 00001604 53                              PUSH    BX
  5539 00001605 50                              PUSH    AX
  5540                                  	; 07/07/2018 - Retro DOS v3.0
  5541 00001606 2EFF26[8005]                   	jmp	word [CS:RESTORE_TMP]
  5542                                  
  5543                                  ;save_world	ENDP
  5544                                  
  5545                                  ;
  5546                                  ; get_user_stack returns the user's stack (and hence registers) in DS:SI
  5547                                  ;
  5548                                          ;procedure get_user_stack,NEAR
  5549                                  Get_User_Stack:
  5550                                          ;LDS	SI,DWORD PTR [USER_SP]
  5551                                          ;LDS	SI,[USER_SP]
  5552 0000160B 2EC536[1E05]                    LDS	SI,[CS:USER_SP] ; 12/03/2018
  5553                                  	;return
  5554 00001610 C3                      	RETN
  5555                                  
  5556                                  ;get_user_stack  ENDP
  5557                                  
  5558                                  ; ---------------------------------------------------------------------------
  5559                                  ;
  5560                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  5561                                  ; Inputs:
  5562                                  ;	User registers, User Stack, INTS disabled
  5563                                  ;	If CALL F8, DS:DX is new handler address
  5564                                  ; Function:
  5565                                  ;	Process OEM INT 21 extensions
  5566                                  ; Outputs:
  5567                                  ;	Jumps to OEM_HANDLER if appropriate
  5568                                  ;
  5569                                  ; ---------------------------------------------------------------------------
  5570                                  
  5571                                  ;IF	NOT IBM
  5572                                  
  5573                                  _$SET_OEM_HANDLER:
  5574                                  	; 18/07/2018
  5575                                  
  5576                                  	;JNE	short DO_OEM_FUNC	; If above F8 try to jump to handler
  5577 00001611 2E8916[1400]            	MOV     [CS:OEM_HANDLER],DX	; Set Handler
  5578 00001616 2E8C1E[1600]            	MOV     [CS:OEM_HANDLER+2],DS
  5579 0000161B CF                      	IRET                            ; Quick return, Have altered no registers
  5580                                  
  5581                                  DO_OEM_FUNC:
  5582 0000161C 2E833E[1400]FF          	CMP     WORD [CS:OEM_HANDLER],-1
  5583 00001622 7503                    	JNZ     short OEM_JMP
  5584 00001624 E968FE                  	JMP     BADCALL                 ; Handler not initialized
  5585                                  
  5586                                  OEM_JMP:
  5587 00001627 2EFF2E[1400]            	JMP     FAR [CS:OEM_HANDLER]
  5588                                  
  5589                                  ;       ENDIF
  5590                                  
  5591                                  ;============================================================================
  5592                                  ; DOSTAB.ASM - MSDOS 6.0 - 1991
  5593                                  ;============================================================================
  5594                                  ; 11/07/2018 - Retro DOS v3.0
  5595                                  
  5596                                  ; the nul device driver used to be part of the code.  However, since the 
  5597                                  ; header is in the data, and the entry points are only given as an offset,
  5598                                  ; the strategy and interrupt entry points must also be in the data now.
  5599                                  ;
  5600                                  
  5601                                  ;procedure	snuldev,far
  5602                                  SNULDEV:
  5603                                  ;assume ds:nothing,es:nothing,ss:nothing, cs:dosdata
  5604                                  ; Offset 1599h in IBMDOS.COM (MSDOS 3.3), 1987
  5605                                  	;or	word [ES:BX+3],0100h
  5606 0000162C 26814F030001             	OR	word [ES:BX+SRHEAD.REQSTAT],STDON ; set done bit
  5607                                  ;entry inuldev
  5608                                  INULDEV:
  5609 00001632 CB                      	retf				; must not be a return!
  5610                                  ;endproc snuldev
  5611                                  
  5612                                  ;============================================================================
  5613                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  5614                                  ;============================================================================
  5615                                  ; 18/07/2018 - Retro DOS v3.0
  5616                                  
  5617                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  5618                                  
  5619                                  
  5620                                  ;   AbsSetup - setup for abs disk functions
  5621                                  ;----------------------------------------------------------------------------
  5622                                  
  5623                                  AbsSetup:
  5624 00001633 36FE06[CF02]            	INC	byte [SS:INDOS]		; SS override
  5625 00001638 FB                      	STI
  5626 00001639 FC                      	CLD
  5627 0000163A 1E                      	PUSH	DS
  5628 0000163B 16                      	push	ss
  5629 0000163C 1F                      	pop	ds
  5630 0000163D E89100                  	CALL	GETBP
  5631 00001640 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  5632 00001642 26C7461EFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  5633                                  errdriv:
  5634 00001648 1F                      	POP	DS
  5635 00001649 7301                    	jnc	short AbsSetup2
  5636                                  AbsSetup_retn:
  5637 0000164B C3                      	retn
  5638                                  
  5639                                  AbsSetup2:
  5640                                  	; MSDOS 6.0
  5641                                  	;				; SS override
  5642                                  	;MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  5643                                  	;CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  5644 0000164C 72FD                    	jc	short AbsSetup_retn
  5645                                  	;call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  5646                                  
  5647                                  	; MSDOS 3.3 (& MSDOS 6.0)
  5648 0000164E 1E                      	PUSH	DS
  5649 0000164F 56                      	PUSH	SI
  5650 00001650 50                      	PUSH	AX
  5651                                  
  5652 00001651 16                      	push	ss
  5653 00001652 1F                      	pop	ds
  5654                                  	
  5655 00001653 BE[6003]                	MOV	SI,OPENBUF
  5656 00001656 8804                    	MOV	[SI],AL
  5657 00001658 800441                  	ADD	BYTE [SI],"A"
  5658 0000165B C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  5659 00001660 B80003                  	MOV	AX,0300H
  5660 00001663 F8                      	CLC
  5661 00001664 CD2A                    	INT	int_IBM 		; Will set carry if shared
  5662 00001666 58                      	POP	AX
  5663 00001667 5E                      	POP	SI
  5664 00001668 1F                      	POP	DS
  5665 00001669 73E0                    	jnc	short AbsSetup_retn
  5666                                  
  5667                                  	;mov	word [ss:EXTERR],32h
  5668 0000166B 36C706[D202]3200        	MOV	word [ss:EXTERR],error_not_supported
  5669 00001672 C3                      	retn
  5670                                  
  5671                                  ;---------------------------------------------------------------------------
  5672                                  ;
  5673                                  ; Procedure Name : ABSDRD
  5674                                  ;
  5675                                  ; Interrupt 25 handler.  Performs absolute disk read.
  5676                                  ; Inputs:	AL - 0-based drive number
  5677                                  ;		DS:BX point to destination buffer
  5678                                  ;		CX number of logical sectors to read
  5679                                  ;		DX starting  logical sector number (0-based)
  5680                                  ; Outputs:	Original flags still on stack
  5681                                  ;		Carry set
  5682                                  ;		    AH error from BIOS
  5683                                  ;		    AL same as low byte of DI from INT 24
  5684                                  ;
  5685                                  ;---------------------------------------------------------------------------
  5686                                          ;procedure   ABSDRD,FAR
  5687                                  ABSDRD:
  5688                                  	; 15/07/2018
  5689                                  ;ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
  5690 00001673 FA                              CLI
  5691                                          ;MOV	[USER_SS],SS
  5692                                          ;MOV	[USER_SP],SP
  5693                                  	; 15/03/2018
  5694 00001674 2E8C16[2005]                    MOV	[CS:USER_SS],SS
  5695 00001679 2E8926[1E05]                    MOV	[CS:USER_SP],SP        
  5696 0000167E 0E                      	PUSH    CS
  5697 0000167F 17                              POP     SS
  5698                                  ;ASSUME  SS:DOSGROUP
  5699 00001680 BC[8608]                        MOV	SP,DSKSTACK
  5700                                  
  5701                                  	;; MSDOS 2.11
  5702                                  
  5703                                          ;;;INC	BYTE [INDOS]
  5704                                          ;;INC	BYTE [SS:INDOS]
  5705                                  	;;STI
  5706                                          ;;CLD
  5707                                          ;;PUSH	ES
  5708                                          ;;PUSH	DS
  5709                                          ;;PUSH	SS
  5710                                          ;;POP	DS
  5711                                  ;;;ASSUME DS:DOSGROUP
  5712                                          ;;;invoke GETBP
  5713                                  	;;CALL	GETBP
  5714                                          ;;POP	DS
  5715                                  ;;;ASSUME DS:NOTHING
  5716                                  
  5717                                  	; 15/07/2018 - Retro DOS v3.0
  5718                                  	; MSDOS 3.3 (& MSDOS 6.0, MSCODE.ASM, 1991)
  5719 00001683 06                              PUSH    ES
  5720 00001684 E8ACFF                  	call    AbsSetup
  5721                                  	;	
  5722 00001687 721A                            JC      SHORT ILEAVE
  5723                                          ;invoke	DSKREAD
  5724 00001689 E8332B                  	CALL	DSKREAD
  5725                                  TLEAVE:
  5726 0000168C 7415                            JZ      SHORT ILEAVE
  5727                                  
  5728                                  	; 15/07/2018 - Retro DOS v3.0
  5729                                          ;IF	IBM
  5730                                  ; Translate the error code to ancient 1.1 codes
  5731 0000168E 06                              PUSH    ES
  5732 0000168F 0E                              PUSH    CS
  5733 00001690 07                              POP     ES
  5734 00001691 30E4                            XOR     AH,AH			; Nul error code
  5735                                  	;mov	cx,6
  5736 00001693 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  5737 00001696 BF[D50F]                        MOV     DI,ERRIN		; Point to error conditions
  5738 00001699 F2AE                            REPNE   SCASB
  5739 0000169B 7504                            JNZ     SHORT LEAVECODE		; Not found
  5740                                  	;mov	ah,[ES:DI+5]
  5741 0000169D 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  5742                                  LEAVECODE:
  5743 000016A1 07                              POP     ES
  5744                                          ;ENDIF
  5745                                  
  5746 000016A2 F9                              STC
  5747                                  ILEAVE:
  5748 000016A3 07                              POP     ES
  5749 000016A4 FA                              CLI
  5750                                          ;DEC	BYTE [INDOS]
  5751                                          ;15/03/2018
  5752 000016A5 36FE0E[CF02]            	DEC	BYTE [SS:INDOS]
  5753                                  	; 15/08/2018
  5754                                          ;MOV	SS,[CS:USER_SS]
  5755                                  	;MOV	SP,[CS:USER_SP]
  5756 000016AA 368B26[1E05]            	MOV     SP,[SS:USER_SP]
  5757 000016AF 368E16[2005]                    MOV     SS,[SS:USER_SS]
  5758                                  ;ASSUME  SS:NOTHING
  5759 000016B4 FB                              STI
  5760                                          ;return
  5761 000016B5 CB                      	RETF   ; ! FAR return !
  5762                                  
  5763                                  ;ABSDRD	ENDP
  5764                                  
  5765                                  ;---------------------------------------------------------------------------
  5766                                  ;
  5767                                  ; Procedure Name : ABSDWRT
  5768                                  ;
  5769                                  ; Interrupt 26 handler.  Performs absolute disk write.
  5770                                  ; Inputs:	AL - 0-based drive number
  5771                                  ;		DS:BX point to source buffer
  5772                                  ;		CX number of logical sectors to write
  5773                                  ;		DX starting  logical sector number (0-based)
  5774                                  ; Outputs:	Original flags still on stack
  5775                                  ;		Carry set
  5776                                  ;		    AH error from BIOS
  5777                                  ;		    AL same as low byte of DI from INT 24
  5778                                  ;
  5779                                  ;---------------------------------------------------------------------------
  5780                                          ;procedure   ABSDWRT,FAR
  5781                                  ABSDWRT:
  5782                                  	; 15/07/2018
  5783                                  ;ASSUME	DS:NOTHING,ES:NOTHING,SS:NOTHING
  5784                                  
  5785 000016B6 FA                              CLI
  5786                                  	; 15/08/2018
  5787                                  	; 15/03/2018
  5788 000016B7 2E8C16[2005]            	MOV	[CS:USER_SS],SS
  5789 000016BC 2E8926[1E05]                    MOV	[CS:USER_SP],SP
  5790 000016C1 0E                              PUSH    CS
  5791 000016C2 17                              POP     SS
  5792                                  ;ASSUME	SS:DOSGROUP
  5793                                          ;MOV	SP,OFFSET DOSGROUP:DSKSTACK
  5794 000016C3 BC[8608]                        MOV	SP,DSKSTACK
  5795                                  
  5796                                  	;; MSDOS 2.11
  5797                                  
  5798                                          ;;;INC	BYTE [INDOS]
  5799                                          ;;INC	BYTE [SS:INDOS]
  5800                                  	;;STI
  5801                                          ;;CLD
  5802                                          ;;PUSH	ES
  5803                                          ;;PUSH	DS
  5804                                          ;;PUSH	SS
  5805                                          ;;POP	DS
  5806                                  ;;;ASSUME DS:DOSGROUP
  5807                                          ;;;invoke GETBP
  5808                                  	;;CALL	GETBP
  5809                                          ;;POP	DS
  5810                                  ;;;ASSUME DS:NOTHING
  5811                                  
  5812                                  	; 15/07/2018 - Retro DOS v3.0
  5813                                  	; MSDOS 3.3 (& MSDOS 6.0, MSCODE.ASM, 1991)
  5814 000016C6 06                              PUSH    ES
  5815 000016C7 E869FF                  	call    AbsSetup
  5816                                  	;
  5817 000016CA 72D7                            JC      SHORT ILEAVE
  5818                                          ;invoke DSKWRITE
  5819 000016CC E8192B                          CALL	DSKWRITE
  5820 000016CF EBBB                    	JMP     SHORT TLEAVE
  5821                                  
  5822                                  ;ABSDWRT ENDP
  5823                                  
  5824                                  ;----------------------------------------------------------------------------
  5825                                  ;
  5826                                  ; Procedure Name : GETBP
  5827                                  ;
  5828                                  ; Inputs:
  5829                                  ;	AL = Logical unit number (A = 0)
  5830                                  ; Function:
  5831                                  ;	Find Drive Parameter Block
  5832                                  ; Outputs:
  5833                                  ;	ES:BP points to DPB
  5834                                  ;	[THISDPB] = ES:BP
  5835                                  ;	Carry set if unit number bad or unit is a NET device.
  5836                                  ;		Later case sets extended error error_I24_not_supported
  5837                                  ; No other registers altered
  5838                                  ;
  5839                                  ;----------------------------------------------------------------------------
  5840                                  
  5841                                  GETBP:
  5842                                  	; 11/07/2018 - Retro DOS v3.0
  5843 000016D1 50                      	PUSH	AX
  5844 000016D2 0401                    	ADD	AL, 1		; No increment; need carry flag
  5845 000016D4 7203                    	JC	SHORT SKIPGET
  5846 000016D6 E89C52                  	CALL	GETTHISDRV
  5847                                  	; MSDOS 6.0
  5848                                  	;JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  5849                                  	;XOR	AH,AH			;DCR. ax= error code 	;AN000;
  5850                                  	;CMP	AX,error_not_dos_disk	;DCR. is unknown media ? ;AN000;
  5851                                  	;JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  5852                                  	;STC				;DCR.			;AN000;
  5853                                  	;MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  5854                                  	;MOV	WORD [AbsDskErr],201h
  5855                                  SKIPGET:
  5856 000016D9 58                      	POP	AX
  5857 000016DA 7213                    	JC	SHORT GETBP_RETN
  5858 000016DC C42E[3A05]              	LES	BP,[THISCDS]
  5859                                  	;TEST	WORD [ES:BP+43H],8000H
  5860 000016E0 26F746430080            	TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5861 000016E6 7408                    	JZ	SHORT GETBP_CDS
  5862 000016E8 C706[D202]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32
  5863 000016EE F9                      	STC
  5864                                  GETBP_RETN:
  5865 000016EF C3                      	RETN
  5866                                  
  5867                                  GETBP_CDS:
  5868                                  	;LES	BP,[ES:BP+45H]
  5869 000016F0 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5870                                  
  5871                                  GOTDPB:
  5872                                  	; Load THISDPB from ES:BP
  5873 000016F4 892E[2405]              	MOV	[THISDPB],BP
  5874 000016F8 8C06[2605]              	MOV	[THISDPB+2],ES
  5875 000016FC C3                      	RETN
  5876                                  
  5877                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5878                                  
  5879                                  ;----------------------------------------------------------------------------
  5880                                  ;
  5881                                  ; Procedure Name : SYS_RETURN
  5882                                  ;
  5883                                  ; These are the general system call exit mechanisms. All internal system
  5884                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5885                                  ; is to set the user's flags and set his AX register for return.
  5886                                  ;
  5887                                  ;----------------------------------------------------------------------------
  5888                                  
  5889                                          ;procedure   SYS_RETURN,NEAR
  5890                                  SYS_RETURN:        
  5891                                          ;entry	SYS_RET_OK
  5892                                  SYS_RET_OK:   
  5893                                  	; 18/07/2018
  5894                                  	; Offset 1666h in IBMDOS.COM (MSDOS 3.3), 1987
  5895 000016FD E82508                  	call    FETCHI_CHECK ; MSDOS 3.3 ! IBMDOS feature ! 	     
  5896 00001700 E808FF                  	call    Get_User_Stack
  5897                                  		; turn off user's carry flag 
  5898                                          ;and	word [SI+16h],0FFFEh 
  5899 00001703 836416FE                        and	word [SI+user_env.user_F],~f_Carry 
  5900 00001707 EB10                            JMP     SHORT DO_RET
  5901                                  
  5902                                          ;entry   SYS_RET_ERR
  5903                                  SYS_RET_ERR:        
  5904 00001709 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5905 0000170B E86900                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5906 0000170E E81A00                  	CALL	ErrorMap
  5907                                  
  5908                                  	;entry	From_GetSet
  5909                                  From_GetSet:
  5910 00001711 E8F7FE                          call    Get_User_Stack
  5911                                  		 ; signal carry to user
  5912                                  	;or	word [SI+16h],1
  5913 00001714 834C1601                	OR	word [SI+user_env.user_F],f_Carry
  5914 00001718 F9                      	STC			; also, signal internal error
  5915                                  DO_RET:
  5916                                          ;MOV	[SI+user_env.user_AX], AX ; Really only sets AH
  5917 00001719 8904                    	MOV	[SI],AX
  5918 0000171B C3                      	RETN
  5919                                  
  5920                                  	;entry	FCB_RET_OK
  5921                                  FCB_RET_OK:
  5922                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5923                                  NO_OP:
  5924 0000171C 30C0                    	XOR	AL,AL
  5925 0000171E C3                      	retn
  5926                                  
  5927                                  	;entry	FCB_RET_ERR
  5928                                  FCB_RET_ERR:
  5929 0000171F 30E4                    	XOR	AH,AH
  5930 00001721 36A3[D202]              	mov	[ss:EXTERR],AX
  5931 00001725 E80300                  	CALL	ErrorMap
  5932 00001728 B0FF                    	MOV	AL,-1
  5933 0000172A C3                      	retn
  5934                                  
  5935                                  	;entry	ErrorMap
  5936                                  ErrorMap:
  5937 0000172B 56                      	PUSH	SI
  5938                                  				; ERR_TABLE_21 is now in DOSDATA
  5939 0000172C BE[2F0D]                	MOV	SI,ERR_TABLE_21
  5940                                  				; SS override for FAILERR and EXTERR
  5941 0000172F 36803E[F602]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5942 00001735 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5943                                  		 ; Ooops, this is the REAL reason
  5944                                  	;mov	word [SS:EXTERR],53h
  5945 00001737 36C706[D202]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5946                                  EXTENDED_NORMAL:
  5947 0000173E E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5948 00001741 5E                      	POP	SI
  5949 00001742 C3                      	retn
  5950                                  
  5951                                  	;EndProc SYS_RETURN
  5952                                  
  5953                                  ;---------------------------------------------------------------------------
  5954                                  ;
  5955                                  ; Procedure Name : CAL_LK
  5956                                  ;
  5957                                  ; Inputs:
  5958                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5959                                  ;		(DS NEED not be DOSDATA)
  5960                                  ;	[EXTERR] is set with error
  5961                                  ; Function:
  5962                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5963                                  ; Outputs:
  5964                                  ;	[EXTERR_CLASS] set
  5965                                  ;	[EXTERR_ACTION] set
  5966                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5967                                  ; Destroys SI, FLAGS
  5968                                  ;
  5969                                  ;---------------------------------------------------------------------------
  5970                                  
  5971                                  	;procedure CAL_LK,NEAR
  5972                                  CAL_LK:
  5973 00001743 1E                      	PUSH	DS
  5974 00001744 50                      	PUSH	AX
  5975 00001745 53                      	PUSH	BX
  5976                                  
  5977                                  ;M048	Context DS		; DS:SI -> Table
  5978                                  ;
  5979                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5980                                  ; is DOSDATA
  5981                                  
  5982                                  	;getdseg	<ds>	; M048: DS:SI -> Table
  5983                                  
  5984                                  	; 18/07/2018
  5985 00001746 16                      	push	ss
  5986 00001747 1F                      	pop	ds
  5987                                  
  5988 00001748 8B1E[D202]              	MOV	BX,[EXTERR]	; Get error in BL
  5989                                  TABLK1:
  5990 0000174C AC                      	LODSB
  5991                                  
  5992 0000174D 3CFF                    	CMP	AL,0FFH
  5993 0000174F 7409                    	JZ	short GOT_VALS	; End of table
  5994 00001751 38D8                    	CMP	AL,BL
  5995 00001753 7405                    	JZ	short GOT_VALS	; Got entry
  5996 00001755 83C603                  	ADD	SI,3		; Next table entry
  5997                                  	; 15/08/2018
  5998 00001758 EBF2                    	JMP	short TABLK1
  5999                                  
  6000                                  GOT_VALS:
  6001 0000175A AD                      	LODSW			; AL is CLASS, AH is ACTION
  6002                                  
  6003 0000175B 80FCFF                  	CMP	AH,0FFH
  6004 0000175E 7404                    	JZ	short NO_SET_ACT
  6005 00001760 8826[D402]              	MOV	[EXTERR_ACTION],AH	; Set ACTION
  6006                                  NO_SET_ACT:
  6007 00001764 3CFF                    	CMP	AL,0FFH
  6008 00001766 7403                    	JZ	short NO_SET_CLS
  6009 00001768 A2[D502]                	MOV	[EXTERR_CLASS],AL	; Set CLASS
  6010                                  NO_SET_CLS:
  6011 0000176B AC                      	LODSB			; Get LOCUS
  6012                                  
  6013 0000176C 3CFF                    	CMP	AL,0FFH
  6014 0000176E 7403                    	JZ	short NO_SET_LOC
  6015 00001770 A2[D102]                	MOV	[EXTERR_LOCUS],AL
  6016                                  NO_SET_LOC:
  6017 00001773 5B                      	POP	BX
  6018 00001774 58                      	POP	AX
  6019 00001775 1F                      	POP	DS
  6020 00001776 C3                      	retn
  6021                                  
  6022                                  	;EndProc CAL_LK
  6023                                  
  6024                                  ;---------------------------------------------------------------------------
  6025                                  ;
  6026                                  ; Procedure Name : ETAB_LK
  6027                                  ;
  6028                                  ; Inputs:
  6029                                  ;	AX is error code
  6030                                  ;	[USER_IN_AX] has AH value of system call involved
  6031                                  ; Function:
  6032                                  ;	Make sure error code is appropriate to this call.
  6033                                  ; Outputs:
  6034                                  ;	AX MAY be mapped error code
  6035                                  ;	[EXTERR] = Input AX
  6036                                  ; Destroys ONLY AX and FLAGS
  6037                                  ;
  6038                                  ;---------------------------------------------------------------------------
  6039                                  
  6040                                  	;procedure ETAB_LK,NEAR
  6041                                  
  6042                                  ETAB_LK: ; 10/08/2018
  6043 00001777 1E                      	PUSH	DS
  6044 00001778 56                      	PUSH	SI
  6045 00001779 51                      	PUSH	CX
  6046 0000177A 53                      	PUSH	BX
  6047                                  
  6048                                  	;Context DS			; SS is DOSDATA
  6049                                  
  6050 0000177B 16                      	push	ss
  6051 0000177C 1F                      	pop	ds
  6052                                  
  6053 0000177D A3[D202]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  6054                                  
  6055                                  					; I21_MAP_E_TAB is now in DOSCODE
  6056 00001780 BE[930C]                	MOV	SI,I21_MAP_E_TAB
  6057 00001783 88C7                    	MOV	BH,AL			; Real code to BH
  6058 00001785 8A1E[E702]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  6059                                  TABLK2:
  6060                                  ;;hkn;	LODSW
  6061                                  ;	LODS	word ptr cs:[si] ; MSDOS 6.0
  6062                                  	
  6063                                  	; 18/07/2018
  6064 00001789 AD                      	lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  6065                                  
  6066 0000178A 3CFF                    	CMP	AL,0FFH 		; End of table?
  6067 0000178C 740C                    	JZ	short NOT_IN_TABLE	; Yes
  6068 0000178E 38D8                    	CMP	AL,BL			; Found call?
  6069 00001790 740C                    	JZ	short GOT_CALL		; Yes
  6070 00001792 86E0                    	XCHG	AH,AL			; Count to AL
  6071 00001794 30E4                    	XOR	AH,AH			; Make word for add
  6072 00001796 01C6                    	ADD	SI,AX			; Next table entry
  6073 00001798 EBEF                    	JMP	short TABLK2
  6074                                  
  6075                                  NOT_IN_TABLE:
  6076 0000179A 88F8                    	MOV	AL,BH			; Restore original code
  6077 0000179C EB0B                    	JMP	SHORT NO_MAP
  6078                                  
  6079                                  GOT_CALL:
  6080 0000179E 88E1                    	MOV	CL,AH
  6081 000017A0 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  6082                                  CHECK_CODE:
  6083                                  ;;hkn;	LODSB
  6084                                  ;	LODS	byte ptr cs:[si]
  6085                                  
  6086                                  	; 18/07/2018
  6087 000017A2 AC                      	lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  6088                                  
  6089 000017A3 38F8                    	CMP	AL,BH			; Code OK?
  6090 000017A5 7402                    	JZ	short NO_MAP		; Yes
  6091 000017A7 E2F9                    	LOOP	CHECK_CODE
  6092                                  NO_MAP:
  6093 000017A9 30E4                    	XOR	AH,AH			; AX is now valid code
  6094 000017AB 5B                      	POP	BX
  6095 000017AC 59                      	POP	CX
  6096 000017AD 5E                      	POP	SI
  6097 000017AE 1F                      	POP	DS
  6098 000017AF C3                      	retn
  6099                                  
  6100                                  	;EndProc ETAB_LK
  6101                                  
  6102                                  ; 18/07/2018 - Retro DOS v3.0
  6103                                  ;---------------------------------------------------------------------------
  6104                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  6105                                  
  6106                                  ;IF installed
  6107                                  ;---------------------------------------------------------------------------
  6108                                  ;
  6109                                  ; Procedure Name : SetBad
  6110                                  ;
  6111                                  ; SetBad sets up info for bad functions
  6112                                  ;
  6113                                  ;---------------------------------------------------------------------------
  6114                                  
  6115                                  SetBad:
  6116                                  	;mov	ax,1
  6117 000017B0 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  6118                                  
  6119                                  ;	set up ds to point to DOSDATA
  6120                                  
  6121                                  	; MSDOS 6.0
  6122                                  	;push	ds
  6123                                  
  6124                                  	;getdseg <ds>
  6125                                  	;MOV	[EXTERR_LOCUS],errLOC_Unk	
  6126                                  
  6127                                  	; MSDOS 3.3
  6128                                  	;mov	byte [cs:EXTERR_LOCUS],1
  6129 000017B3 2EC606[D102]01          	MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  6130                                  
  6131                                  	;pop	ds	  		;hkn; restore ds
  6132                                  
  6133 000017B9 F9                      	STC
  6134 000017BA C3                      	retn
  6135                                  
  6136                                  ;--------------------------------------------------------------------------
  6137                                  ;
  6138                                  ; Procedure Name : BadCall
  6139                                  ;
  6140                                  ; BadCall is the initial routine for bad function calls
  6141                                  ;
  6142                                  ;--------------------------------------------------------------------------
  6143                                  
  6144                                  BadCall:
  6145 000017BB E8F2FF                  	call	SetBad
  6146 000017BE CB                      	retf
  6147                                  
  6148                                  ;--------------------------------------------------------------------------
  6149                                  ;
  6150                                  ; OKCall always sets carry to off.
  6151                                  ;
  6152                                  ;-----------------------------------------------------------------------
  6153                                  
  6154                                  OKCall:
  6155 000017BF F8                      	CLC
  6156 000017C0 CB                      	retf
  6157                                  
  6158                                  ;---------------------------------------------------------------------------
  6159                                  ;
  6160                                  ; Procedure Name : INT2F
  6161                                  ;
  6162                                  ; INT 2F handler works as follows:
  6163                                  ;   PUSH    AX
  6164                                  ;   MOV     AX,multiplex:function
  6165                                  ;   INT     2F
  6166                                  ;   POP     ...
  6167                                  ; The handler itself needs to make the AX available for the various routines.
  6168                                  ;
  6169                                  ;----------------------------------------------------------------------------
  6170                                  
  6171                                  ;PUBLIC	Int2F
  6172                                  ;INT2F	PROC	FAR
  6173                                  
  6174                                  	; 18/07/2018 - Retro DOS v3.0
  6175                                  
  6176                                  INT2F:
  6177                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  6178                                  INT2FNT:
  6179                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  6180 000017C1 FB                      	STI
  6181                                  	;cmp	ah,11h
  6182 000017C2 80FC11                  	CMP	AH,MultNET
  6183 000017C5 750A                    	JNZ	short INT2FSHR
  6184                                  TestInstall:
  6185 000017C7 08C0                    	OR	AL,AL
  6186 000017C9 7403                    	JZ	short Leave2F
  6187                                  BadFunc:
  6188 000017CB E8E2FF                  	CALL	SetBad
  6189                                  
  6190                                  	;entry	Leave2F
  6191                                  Leave2F:
  6192 000017CE CA0200                  	RETF	2			; long return + clear flags off stack
  6193                                  
  6194                                  INT2FSHR:
  6195                                  	;cmp	ah,10h
  6196 000017D1 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  6197 000017D4 74F1                    	JZ	short TestInstall	; yes, check for installation
  6198                                  INT2FNLS:
  6199                                  	;cmp	ah,14h
  6200 000017D6 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  6201 000017D9 74EC                    	JZ	short TestInstall	; yes check for installation
  6202                                  INT2FDOS:
  6203                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  6204                                  
  6205                                  	; 18/07/2018
  6206                                  	; MSDOS 6.0
  6207                                  	;CMP	AH,MultDOS
  6208                                  	;JNZ	check_win		;check if win386 broadcast
  6209                                  	;jmp	DispatchDOS
  6210                                  
  6211                                  	; .... win386 .... 
  6212                                  	
  6213                                  	; 18/07/2018
  6214                                  	; MSDOS 3.3
  6215                                  	;cmp	ah,12h	
  6216 000017DB 80FC12                  	CMP	AH,MultDOS
  6217 000017DE 7401                    	jz	short DispatchDOS
  6218 000017E0 CF                      	iret
  6219                                  
  6220                                  ;INT2F	ENDP
  6221                                  	
  6222                                  DispatchDOS:
  6223 000017E1 2EFF36[D80E]            	PUSH	word [CS:FOO]		; push return address
  6224 000017E6 2EFF36[DA0E]            	PUSH	word [CS:DTab]		; push table address
  6225 000017EB 50                      	PUSH	AX			; push index
  6226 000017EC 55                      	PUSH	BP
  6227 000017ED 89E5                    	MOV	BP,SP
  6228                                  		; stack looks like:
  6229                                  		;   0	BP
  6230                                  		;   2	DISPATCH
  6231                                  		;   4	TABLE
  6232                                  		;   6	RETURN
  6233                                  		;   8	LONG-RETURN
  6234                                  		;   c	FLAGS
  6235                                  		;   e	AX
  6236                                  	
  6237 000017EF 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6238 000017F2 5D                      	POP	BP
  6239 000017F3 E8AD07                  	call	TableDispatch
  6240 000017F6 EBD3                    	JMP	short BadFunc 		; return indicates invalid function
  6241                                  
  6242                                  INT2F_etcetera:
  6243                                  	;entry	DosGetGroup
  6244                                  DosGetGroup:
  6245                                  	; MSDOS 6.0
  6246                                  ;SR; Cannot use CS now
  6247                                  ;
  6248                                  ;	PUSH	CS
  6249                                  ;	POP	DS
  6250                                  
  6251                                  	;getdseg <ds>
  6252                                  	;retn
  6253                                  
  6254                                  	; MSDOS 3.3
  6255 000017F8 0E                      	push	cs
  6256 000017F9 1F                      	pop	ds
  6257 000017FA C3                      	retn
  6258                                  
  6259                                  	;entry	DOSInstall
  6260                                  DOSInstall:
  6261 000017FB B0FF                    	MOV	AL,0FFh
  6262 000017FD C3                      	retn
  6263                                  
  6264                                  ;ENDIF
  6265                                  
  6266                                  ;============================================================================
  6267                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  6268                                  ;============================================================================
  6269                                  ; 18/07/2018 - Retro DOS 3.0
  6270                                  
  6271                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
  6272                                  ;     ENTRY: AL = Character to map
  6273                                  ;     EXIT:  AL = The converted character
  6274                                  ; Alters no registers except AL and flags.
  6275                                  ; The routine should do nothing to chars below 80H.
  6276                                  ;
  6277                                  ; Example:
  6278                                  
  6279                                  ;Procedure   MAP_CASE,FAR
  6280                                  
  6281                                  MAP_CASE:
  6282                                  	; Offset 176Ch in IBMDOS.COM (MSDOS 3.3), 1987
  6283                                  	
  6284 000017FE 3C80                    	CMP	AL,80H
  6285 00001800 7301                    	JAE	short Map1	;Map no chars below 80H ever
  6286 00001802 CB                      	RETF
  6287                                  Map1:
  6288 00001803 2C80                    	SUB	AL,80H		;Turn into index value
  6289 00001805 1E                      	PUSH	DS
  6290 00001806 53                      	PUSH	BX
  6291 00001807 BB[8810]                	MOV	BX,UCASE_TAB+2
  6292                                  FINISH:
  6293 0000180A 0E                      	PUSH	CS		;Move to DS
  6294 0000180B 1F                      	POP	DS
  6295 0000180C D7                      	XLAT			; Get upper case character
  6296 0000180D 5B                      	POP	BX
  6297 0000180E 1F                      	POP	DS
  6298                                  L_RET:	
  6299 0000180F CB                      	RETF
  6300                                  
  6301                                  ;EndProc MAP_CASE
  6302                                  
  6303                                  ;============================================================================
  6304                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6305                                  ;============================================================================
  6306                                  ; 18/07/2018 - Retro DOS v3.0
  6307                                  
  6308                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6309                                  
  6310                                  ; OEMFunction key is expected to process a single function
  6311                                  ;   key input from a device and dispatch to the proper
  6312                                  ;   routines leaving all registers UNTOUCHED.
  6313                                  ;
  6314                                  ; Inputs:   CS, SS are DOSGROUP
  6315                                  ; Outputs:  None. This function is expected to JMP to onw of
  6316                                  ;           the following labels:
  6317                                  ;
  6318                                  ;           GetCh       - ignore the sequence
  6319                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6320                                  ;           ExitIns     - toggle insert mode
  6321                                  ;           EnterIns    - toggle insert mode
  6322                                  ;           BackSp      - move backwards one space
  6323                                  ;           ReEdit      - reedit the line with a new template
  6324                                  ;           KilNew      - discard the current line and start from scratch
  6325                                  ;           CopyLin     - copy the rest of the template into the line
  6326                                  ;           SkipStr     - read the next character and skip to it in the template
  6327                                  ;           CopyStr     - read next char and copy from template to line until char
  6328                                  ;           SkipOne     - advance position in template one character
  6329                                  ;           CopyOne     - copy next character in template into line
  6330                                  ;           CtrlZ       - place a ^Z into the template
  6331                                  ; Registers that are allowed to be modified by this function are:
  6332                                  ;           AX, CX, BP
  6333                                  
  6334                                  OEMFunctionKey:
  6335 00001810 E87908                  	CALL	_$STD_CON_INPUT_NO_ECHO  ; Get the second byte of the sequence
  6336 00001813 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6337 00001815 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6338 00001816 BF[D312]                	MOV     DI,ESCTAB		; offset of second byte table
  6339 00001819 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6340 0000181B 5F                      	POP     DI                      ; restore DI
  6341 0000181C D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6342 0000181E 89CD                    	MOV     BP,CX                   ; move to indexable register
  6343                                  	;JMP	word [SS:BP+ESCFUNC]	; Go to the right routine
  6344 00001820 FFA6[E112]              	JMP	word [BP+ESCFUNC]
  6345                                  	
  6346                                  ;============================================================================
  6347                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6348                                  ;============================================================================
  6349                                  ; Retro DOS v3.0 - 18/07/2018
  6350                                  
  6351                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6352                                  ;----------------------------------------------------------------------------
  6353                                  ; Retro DOS v2.0 - 13/03/2018
  6354                                  
  6355                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6356                                  
  6357                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6358                                  
  6359                                  ;**	$GET_DATE - Get Current Date
  6360                                  ;
  6361                                  ;	ENTRY	none
  6362                                  ;	EXIT	(cx:dx) = current date
  6363                                  ;	USES	all
  6364                                  
  6365                                  _$GET_DATE:	;System call 42
  6366                                  
  6367 00001824 16                              PUSH    SS
  6368 00001825 1F                              POP     DS
  6369 00001826 E8B700                          CALL	READTIME        ;Check for rollover to next day
  6370 00001829 A1[FE02]                        MOV     AX,[YEAR]
  6371                                  
  6372                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6373                                  
  6374 0000182C 8B1E[FC02]                      MOV     BX,[DAY]	; fetch both day and month
  6375 00001830 E8D8FD                  	CALL	Get_User_Stack	;Get pointer to user registers
  6376                                          ;MOV    [SI+6],BX  	;DH=month, DL=day
  6377 00001833 895C06                  	MOV	[SI+user_env.user_DX],BX
  6378 00001836 05BC07                          ADD     AX,1980         ;Put bias back
  6379                                          ;MOV    [SI+4],AX  	;CX=year
  6380 00001839 894404                  	MOV	[SI+user_env.user_CX],AX
  6381                                          ;MOV	AL,[WEEKDAY]
  6382 0000183C 36A0[0203]                      MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6383 00001840 C3                      	RETN
  6384                                  
  6385                                  ;**	$SET_DATE - Set Current Date
  6386                                  ;
  6387                                  ;	ENTRY	(cx:dx) = current date
  6388                                  ;	EXIT	(al) = -1 iff bad date
  6389                                  ;		(al) = 0 if ok
  6390                                  ;	USES	all
  6391                                  
  6392                                  _$SET_DATE:			;System call 43
  6393                                  
  6394 00001841 B0FF                            MOV     AL,-1           ;Be ready to flag error
  6395 00001843 81E9BC07                        SUB     CX,1980         ;Fix bias in year
  6396 00001847 7217                            JC      SHORT RET24	;Error if not big enough
  6397 00001849 83F977                          CMP     CX,119          ;Year must be less than 2100
  6398 0000184C 7712                            JA      SHORT RET24
  6399 0000184E 08F6                            OR      DH,DH
  6400 00001850 740E                            JZ      SHORT RET24
  6401 00001852 08D2                            OR      DL,DL
  6402 00001854 740A                            JZ      SHORT RET24	;Error if either month or day is 0
  6403 00001856 80FE0C                          CMP     DH,12           ;Check against max. month
  6404 00001859 7705                            JA      SHORT RET24
  6405 0000185B 16                              PUSH    SS
  6406 0000185C 1F                              POP     DS
  6407 0000185D E81301                  	CALL	DODATE
  6408                                  RET24:  
  6409 00001860 C3                      	RETN
  6410                                  
  6411                                  
  6412                                  ;**	$GET_TIME - Get Current Time
  6413                                  ;
  6414                                  ;	ENTRY	none
  6415                                  ;	EXIT	(cx:dx) = current time
  6416                                  ;	USES	all
  6417                                  
  6418                                  _$GET_TIME:			;System call 44
  6419                                  
  6420 00001861 16                              PUSH    SS
  6421 00001862 1F                              POP     DS
  6422 00001863 E87A00                  	CALL	READTIME
  6423 00001866 E8A2FD                  	CALL	Get_User_Stack           ;Get pointer to user registers
  6424                                         ;MOV     [SI+6],DX
  6425 00001869 895406                  	MOV	[SI+user_env.user_DX],DX
  6426                                         ;MOV     [SI+4],CX
  6427 0000186C 894C04                  	MOV	[SI+user_env.user_CX],CX
  6428 0000186F 30C0                            XOR     AL,AL
  6429                                  RET26:  
  6430 00001871 C3                      	RETN
  6431                                  
  6432                                  ;**	$SET_TIME - Set Current Time
  6433                                  ;
  6434                                  ;	ENTRY	(cx:dx) = time
  6435                                  ;	EXIT	(al) = 0 if 0k
  6436                                  ;		(al) = -1 if invalid
  6437                                  ;	USES	ALL
  6438                                  
  6439                                  _$SET_TIME:			;System call 45
  6440                                  
  6441 00001872 B0FF                            MOV     AL,-1           ;Flag in case of error
  6442 00001874 80FD18                          CMP     CH,24           ;Check hours
  6443 00001877 73F8                            JAE     SHORT RET26
  6444 00001879 80F93C                          CMP     CL,60           ;Check minutes
  6445 0000187C 73F3                            JAE     SHORT RET26
  6446 0000187E 80FE3C                          CMP     DH,60           ;Check seconds
  6447 00001881 73EE                            JAE     SHORT RET26
  6448 00001883 80FA64                          CMP     DL,100          ;Check 1/100's
  6449 00001886 73E9                            JAE     SHORT RET26
  6450 00001888 51                              PUSH    CX
  6451 00001889 52                              PUSH    DX
  6452 0000188A 16                              PUSH    SS
  6453 0000188B 1F                              POP     DS
  6454 0000188C BB[5803]                        MOV     BX,TIMEBUF
  6455 0000188F B90600                          MOV     CX,6
  6456 00001892 31D2                            XOR     DX,DX
  6457 00001894 89D0                            MOV     AX,DX
  6458 00001896 53                              PUSH    BX
  6459 00001897 E88836                  	CALL	SETREAD
  6460 0000189A 1E                              PUSH    DS
  6461 0000189B C536[2E00]                      LDS     SI,[BCLOCK]
  6462 0000189F E85C36                  	CALL	DEVIOCALL2      ;Get correct day count
  6463 000018A2 1F                              POP     DS
  6464 000018A3 5B                              POP     BX
  6465 000018A4 E8AE36                  	CALL	SETWRITE
  6466 000018A7 8F06[5C03]                      POP     WORD [TIMEBUF+4]
  6467 000018AB 8F06[5A03]                      POP     WORD [TIMEBUF+2]
  6468 000018AF C536[2E00]                      LDS     SI,[BCLOCK]
  6469 000018B3 E84836                  	CALL	DEVIOCALL2      ;Set the time
  6470 000018B6 30C0                            XOR     AL,AL
  6471 000018B8 C3                              RETN
  6472                                  
  6473                                  ; 11/07/2018 - Retro DOS v3.0
  6474                                  ; Retro DOS v2.0 - 14/03/2018
  6475                                  
  6476                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6477                                  
  6478                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6479                                  
  6480                                  ;
  6481                                  ; Date16 returns the current date in AX, current time in DX
  6482                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6483                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6484                                  ;
  6485                                  
  6486                                  DATE16:
  6487                                  	
  6488                                  ;M048	Context DS
  6489                                  ;
  6490                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6491                                  ; is DOSDATA
  6492                                  
  6493                                  	;getdseg	<ds>			; M048
  6494                                  
  6495                                  	;PUSH	SS
  6496 000018B9 0E                      	PUSH	CS
  6497 000018BA 1F                      	POP	DS
  6498                                  
  6499 000018BB 51                              PUSH    CX
  6500 000018BC 06                              PUSH    ES
  6501 000018BD E82000                          CALL    READTIME
  6502 000018C0 07                              POP     ES
  6503 000018C1 D0E1                            SHL     CL,1            ;Minutes to left part of byte
  6504 000018C3 D0E1                            SHL     CL,1
  6505 000018C5 D1E1                            SHL     CX,1            ;Push hours and minutes to left end
  6506 000018C7 D1E1                            SHL     CX,1
  6507 000018C9 D1E1                            SHL     CX,1
  6508 000018CB D0EE                            SHR     DH,1            ;Count every two seconds
  6509 000018CD 08F1                            OR      CL,DH           ;Combine seconds with hours and minutes
  6510 000018CF 89CA                            MOV     DX,CX
  6511                                  
  6512                                  ;	WARNING!  MONTH and YEAR must be adjacently allocated
  6513                                  
  6514 000018D1 A1[FD02]                        MOV     AX,[MONTH]	;Fetch month and year
  6515 000018D4 B104                            MOV     CL,4
  6516 000018D6 D2E0                            SHL     AL,CL		;Push month to left to make room for day
  6517 000018D8 D1E0                            SHL     AX,1
  6518 000018DA 59                              POP     CX
  6519 000018DB 0A06[FC02]                      OR      AL,[DAY]
  6520                                  RET21:
  6521 000018DF C3                              RETN
  6522                                  
  6523                                  READTIME:
  6524                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6525                                  ;Uses AX, CX, DX.
  6526                                  
  6527 000018E0 C706[8D0F]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6528 000018E6 56                              PUSH    SI
  6529 000018E7 53                              PUSH    BX
  6530                                  
  6531 000018E8 BB[5803]                        MOV     BX,TIMEBUF
  6532                                  
  6533 000018EB B90600                          MOV     CX,6
  6534 000018EE 31D2                            XOR     DX,DX
  6535 000018F0 89D0                            MOV     AX,DX
  6536 000018F2 E82D36                  	CALL	SETREAD
  6537 000018F5 1E                              PUSH    DS
  6538 000018F6 C536[2E00]                      LDS     SI,[BCLOCK]
  6539 000018FA E80136                  	CALL	DEVIOCALL2      ;Get correct date and time
  6540 000018FD 1F                              POP     DS
  6541 000018FE 5B                              POP     BX
  6542 000018FF 5E                              POP     SI
  6543 00001900 A1[5803]                        MOV     AX,[TIMEBUF]
  6544 00001903 8B0E[5A03]                      MOV     CX,[TIMEBUF+2]
  6545 00001907 8B16[5C03]                      MOV     DX,[TIMEBUF+4]
  6546 0000190B 3B06[0003]                      CMP     AX,[DAYCNT]     ;See if day count is the same
  6547                                          ;JZ	SHORT RET22
  6548 0000190F 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6549                                  	;cmp	ax,43830
  6550 00001911 3D36AB                          CMP     AX,FOURYEARS*30 ;Number of days in 120 years
  6551 00001914 733D                            JAE     SHORT RET22	;Ignore if too large
  6552 00001916 A3[0003]                        MOV     [DAYCNT],AX
  6553 00001919 56                              PUSH    SI
  6554 0000191A 51                              PUSH    CX
  6555 0000191B 52                              PUSH    DX              ;Save time
  6556 0000191C 31D2                            XOR     DX,DX
  6557                                  	;mov	cx,1461
  6558 0000191E B9B505                          MOV     CX,FOURYEARS    ;Number of days in 4 years
  6559 00001921 F7F1                            DIV     CX              ;Compute number of 4-year units
  6560 00001923 D1E0                            SHL     AX,1
  6561 00001925 D1E0                            SHL     AX,1
  6562 00001927 D1E0                            SHL     AX,1            ;Multiply by 8 (no. of half-years)
  6563 00001929 89C1                            MOV     CX,AX           ;<240 implies AH=0
  6564                                  
  6565 0000192B BE[7F0C]                        MOV     SI,YRTAB        ;Table of days in each year
  6566                                  
  6567 0000192E E82300                          CALL    DSLIDE          ;Find out which of four years we're in
  6568 00001931 D1E9                            SHR     CX,1            ;Convert half-years to whole years
  6569 00001933 7304                            JNC     SHORT SK	;Extra half-year?
  6570 00001935 81C2C800                        ADD     DX,200
  6571                                  SK:
  6572 00001939 E82400                          CALL    SETYEAR
  6573 0000193C B101                            MOV     CL,1            ;At least at first month in year
  6574                                  
  6575 0000193E BE[870C]                        MOV     SI,MONTAB       ;Table of days in each month
  6576                                          
  6577 00001941 E81000                  	CALL    DSLIDE          ;Find out which month we're in
  6578 00001944 880E[FD02]                      MOV     [MONTH],CL
  6579 00001948 42                              INC     DX              ;Remainder is day of month (start with one)
  6580 00001949 8816[FC02]                      MOV     [DAY],DL
  6581 0000194D E89400                          CALL    WKDAY           ;Set day of week
  6582 00001950 5A                              POP     DX
  6583 00001951 59                              POP     CX
  6584 00001952 5E                              POP     SI
  6585                                  RET22:  
  6586 00001953 C3                      	RETN
  6587                                  
  6588                                  DSLIDE:
  6589 00001954 B400                            MOV     AH,0
  6590                                  DSLIDE1:
  6591 00001956 AC                              LODSB			;Get count of days
  6592 00001957 39C2                            CMP     DX,AX           ;See if it will fit
  6593 00001959 7217                            JB      SHORT RET23	;If not, done
  6594 0000195B 29C2                            SUB     DX,AX
  6595 0000195D 41                              INC     CX              ;Count one more month/year
  6596 0000195E EBF6                            JMP     SHORT DSLIDE1
  6597                                  
  6598                                  SETYEAR:
  6599                                  ;Set year with value in CX. Adjust length of February for this year.
  6600                                  
  6601                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6602                                  ;       set DS to DOSDATA. Since the only guy calling this should be the DOS
  6603                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6604                                  ;	preserve DS as CHKYR is also called as a routine.
  6605                                  
  6606                                  
  6607                                  	; MSDOS 6.0 (18/07/2018) ; *
  6608                                  
  6609                                  	;GETDSEG DS
  6610                                  
  6611 00001960 0E                      	PUSH	CS  ; *
  6612 00001961 1F                      	POP	DS  ; *
  6613                                  
  6614                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987 
  6615                                  
  6616 00001962 880E[FE02]                      MOV     [YEAR],CL
  6617                                  CHKYR:
  6618 00001966 F6C103                          TEST    CL,3            ;Check for leap year
  6619 00001969 B01C                            MOV     AL,28
  6620 0000196B 7502                            JNZ     SHORT SAVFEB	;28 days if no leap year
  6621 0000196D FEC0                            INC     AL              ;Add leap day
  6622                                  SAVFEB:
  6623                                  	;mov	[february],al
  6624 0000196F A2[880C]                        MOV     [MONTAB+1],AL   ;Store for February
  6625                                  RET23:  
  6626 00001972 C3                      	RETN
  6627                                  
  6628                                  DODATE:
  6629 00001973 E8F0FF                          CALL    CHKYR           ;Set Feb. up for new year
  6630 00001976 88F0                            MOV     AL,DH
  6631                                  
  6632 00001978 BB[860C]                        MOV     BX,MONTAB-1
  6633                                  
  6634 0000197B D7                              XLAT                    ;Look up days in month
  6635 0000197C 38D0                            CMP     AL,DL
  6636 0000197E B0FF                            MOV     AL,-1           ;Restore error flag, just in case
  6637                                          ;JB	SHORT RET25	;Error if too many days
  6638 00001980 72F0                            jb	short RET23 ; 18/07/2018
  6639 00001982 E8DBFF                  	CALL    SETYEAR
  6640                                  ;
  6641                                  ; WARNING!  DAY and MONTH must be adjacently allocated
  6642                                  ;
  6643 00001985 8916[FC02]                      MOV     [DAY],DX	;Set both day and month
  6644 00001989 D1E9                            SHR     CX,1
  6645 0000198B D1E9                            SHR     CX,1
  6646                                  	;mov	ax,1461
  6647 0000198D B8B505                          MOV     AX,FOURYEARS
  6648 00001990 89D3                            MOV     BX,DX
  6649 00001992 F7E1                            MUL     CX
  6650 00001994 8A0E[FE02]                      MOV     CL,[YEAR]
  6651 00001998 80E103                          AND     CL,3
  6652                                  
  6653 0000199B BE[7F0C]                        MOV     SI,YRTAB
  6654                                  
  6655 0000199E 89C2                            MOV     DX,AX
  6656 000019A0 D1E1                            SHL     CX,1            ;Two entries per year, so double count
  6657 000019A2 E85200                          CALL    DSUM            ;Add up the days in each year
  6658 000019A5 88F9                            MOV     CL,BH           ;Month of year
  6659                                  
  6660 000019A7 BE[870C]                        MOV     SI,MONTAB
  6661                                  
  6662 000019AA 49                              DEC     CX              ;Account for months starting with one
  6663 000019AB E84900                          CALL    DSUM            ;Add up days in each month
  6664 000019AE 88D9                            MOV     CL,BL           ;Day of month
  6665 000019B0 49                              DEC     CX              ;Account for days starting with one
  6666 000019B1 01CA                            ADD     DX,CX           ;Add in to day total
  6667 000019B3 92                              XCHG    AX,DX           ;Get day count in AX
  6668 000019B4 A3[0003]                        MOV     [DAYCNT],AX
  6669 000019B7 56                              PUSH    SI
  6670 000019B8 53                              PUSH    BX
  6671 000019B9 50                              PUSH    AX
  6672                                  
  6673 000019BA BB[5803]                        MOV     BX,TIMEBUF
  6674                                  
  6675 000019BD B90600                          MOV     CX,6
  6676 000019C0 31D2                            XOR     DX,DX
  6677 000019C2 89D0                            MOV     AX,DX
  6678 000019C4 53                              PUSH    BX
  6679 000019C5 E85A35                  	CALL	SETREAD
  6680                                  
  6681 000019C8 1E                              PUSH    DS
  6682 000019C9 C536[2E00]                      LDS     SI,[BCLOCK]
  6683 000019CD E82E35                  	CALL	DEVIOCALL2	;Get correct date and time
  6684 000019D0 1F                              POP     DS
  6685 000019D1 5B                              POP     BX
  6686 000019D2 E88035                  	CALL	SETWRITE
  6687 000019D5 8F06[5803]                      POP     WORD [TIMEBUF]
  6688 000019D9 1E                              PUSH    DS
  6689 000019DA C536[2E00]                      LDS     SI,[BCLOCK]
  6690 000019DE E81D35                  	CALL	DEVIOCALL2      ;Set the date
  6691 000019E1 1F                              POP     DS
  6692 000019E2 5B                              POP     BX
  6693 000019E3 5E                              POP     SI
  6694                                  WKDAY:
  6695 000019E4 A1[0003]                        MOV     AX,[DAYCNT]
  6696 000019E7 31D2                            XOR     DX,DX
  6697 000019E9 B90700                          MOV     CX,7
  6698 000019EC 40                              INC     AX
  6699 000019ED 40                              INC     AX              ;First day was Tuesday
  6700 000019EE F7F1                            DIV     CX              ;Compute day of week
  6701 000019F0 8816[0203]                      MOV     [WEEKDAY],DL
  6702 000019F4 30C0                            XOR     AL,AL           ;Flag OK
  6703                                  RET25:
  6704 000019F6 C3                      	RETN
  6705                                  
  6706                                  ;**	DSUM - Compute the sum of a string of bytes
  6707                                  ;
  6708                                  ;	ENTRY	(cx) = byte count
  6709                                  ;		(ds:si) = byte address
  6710                                  ;		(dx) = sum register, initialized by caller
  6711                                  ;	EXIT	(dx) updated
  6712                                  ;	USES	ax, cx, dx, si, flags
  6713                                  
  6714                                  DSUM:
  6715 000019F7 B400                            MOV     AH,0
  6716                                  	;JCXZ	DSUM9
  6717 000019F9 E3FB                            JCXZ	RET25 ; 18/07/2018
  6718                                  DSUM1:
  6719 000019FB AC                              LODSB
  6720 000019FC 01C2                            ADD     DX,AX
  6721 000019FE E2FB                            LOOP    DSUM1
  6722                                  DSUM9:
  6723 00001A00 C3                              RETN
  6724                                  
  6725                                  
  6726                                  ;============================================================================
  6727                                  ; GETSET.ASM
  6728                                  ;============================================================================
  6729                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6730                                  ; Retro DOS v2.0 - 12/03/2018
  6731                                  
  6732                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6733                                  ;NAME	GETSET
  6734                                  
  6735                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6736                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6737                                  
  6738                                  ;USERNUM:
  6739                                  ;	DW	0			; 24 bit user number
  6740                                  ;       DB      0
  6741                                  ;;	IF      IBM
  6742                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6743                                  ;;	ELSE
  6744                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6745                                  ;;	ENDIF
  6746                                  
  6747                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6748                                  ;; 08/07/2018 - Retro DOS v3.0
  6749                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6750                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6751                                  
  6752                                  
  6753                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6754                                  
  6755                                  _$GET_VERSION:
  6756                                  
  6757                                  ; Inputs:
  6758                                  ;       None
  6759                                  ; Function:
  6760                                  ;       Return MS-DOS version number
  6761                                  ; Outputs:
  6762                                  ;       OEM number in BH
  6763                                  ;       User number in BL:CX (24 bits)
  6764                                  ;       Version number as AL.AH in binary
  6765                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6766                                  
  6767                                  ; MSDOS 6.0
  6768                                  ;		if input al = 00
  6769                                  ;		  (bh) = OEM number			
  6770                                  ;		else if input al = 01
  6771                                  ;		  (bh) = version flags
  6772                                  ;		 
  6773                                  ;		       	 bits 0-2 = DOS internal revision
  6774                                  ;		       	 bits 3-7 = DOS type flags
  6775                                  ;		              bit 3    = DOS is in ROM
  6776                                  ;		              bit 4    = DOS in in HMA
  6777                                  ;		              bits 5-7 = reserved
  6778                                  ;               M007 change - only bit 3 is now valid.  Other bits
  6779                                  ;               are 0 when AL = 1
  6780                                  
  6781                                  	
  6782                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6783                                  
  6784 00001A01 16                              PUSH    SS
  6785 00001A02 1F                              POP     DS
  6786 00001A03 8B1E[5403]                      MOV     BX,[USERNUM+2]
  6787 00001A07 8B0E[5203]                      MOV     CX,[USERNUM]
  6788 00001A0B A1[7D0C]                        MOV     AX,[MSVERS]
  6789 00001A0E E8FAFB                          call	Get_User_Stack
  6790                                          ;MOV	[SI+2],BX
  6791 00001A11 895C02                  	mov	[SI+user_env.user_BX],BX
  6792                                          ;MOV	[SI+4],CX
  6793 00001A14 894C04                  	mov	[SI+user_env.user_CX],CX
  6794                                          ;MOV	[SI+user_env.user_AX],AX  ; Really only sets AH
  6795 00001A17 8904                            MOV	[SI],AX ; 31/03/2018
  6796 00001A19 C3                      	RETN
  6797                                  
  6798                                  ; 18/07/2018 - Retro DOS v3.0
  6799                                  
  6800                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6801                                  
  6802                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6803                                  ;
  6804                                  ;	ENTRY	none
  6805                                  ;	EXIT	(al) = value of VERIFY flag
  6806                                  ;	USES	all
  6807                                  
  6808                                  
  6809                                  _$GET_VERIFY_ON_WRITE:
  6810                                  
  6811                                  ;hkn; SS override
  6812 00001A1A 36A0[AD02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6813 00001A1E C3                      	retn
  6814                                  
  6815                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6816                                  ;
  6817                                  ;	ENTRY	(al) = value of VERIFY flag
  6818                                  ;	EXIT	none
  6819                                  ;	USES	all
  6820                                  
  6821                                  _$SET_VERIFY_ON_WRITE:
  6822                                  
  6823 00001A1F 2401                    	AND	AL,1
  6824                                  ;hkn; SS override
  6825 00001A21 36A2[AD02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6826                                  RET27:	; 18/07/2018
  6827 00001A25 C3                      	retn
  6828                                  
  6829                                  ; 19/07/2018 - Retro DOS v3.0
  6830                                  
  6831                                  ;BREAK <$International - return country-dependent information>
  6832                                  
  6833                                  ;----------------------------------------------------------------------------
  6834                                  ;
  6835                                  ; Procedure Name : $INTERNATIONAL
  6836                                  ;
  6837                                  ; Inputs:
  6838                                  ;	MOV	AH,International
  6839                                  ;	MOV	AL,country	(al = 0 => current country)
  6840                                  ;      [MOV	BX,country]
  6841                                  ;	LDS	DX,block
  6842                                  ;	INT	21
  6843                                  ; Function:
  6844                                  ;	give users an idea of what country the application is running
  6845                                  ; Outputs:
  6846                                  ;	IF DX != -1 on input (get country)
  6847                                  ;	  AL = 0 means return current country table.
  6848                                  ;	  0<AL<0FFH means return country table for country AL
  6849                                  ;	  AL = 0FF means return country table for country BX
  6850                                  ;	  No Carry:
  6851                                  ;	     Register BX will contain the 16-bit country code.
  6852                                  ;	     Register AL will contain the low 8 bits of the country code.
  6853                                  ;	     The block pointed to by DS:DX is filled in with the information
  6854                                  ;	     for the particular country.
  6855                                  ;		BYTE  Size of this table excluding this byte and the next
  6856                                  ;		BYTE  Country code represented by this table
  6857                                  ;			A sequence of n bytes, where n is the number specified
  6858                                  ;			by the first byte above and is not > internat_block_max,
  6859                                  ;			in the correct order for being returned by the
  6860                                  ;			INTERNATIONAL call as follows:
  6861                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6862                                  ;		5 BYTE	Currency symbol null terminated
  6863                                  ;		2 BYTE	thousands separator null terminated
  6864                                  ;		2 BYTE	Decimal point null terminated
  6865                                  ;		2 BYTE	Date separator null terminated
  6866                                  ;		2 BYTE	Time separator null terminated
  6867                                  ;		1 BYTE	Bit field.  Currency format.
  6868                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6869                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6870                                  ;		1 BYTE	No. of significant decimal digits in currency
  6871                                  ;		1 BYTE	Bit field.  Time format.
  6872                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6873                                  ;		DWORD	Call address of case conversion routine
  6874                                  ;		2 BYTE	Data list separator null terminated.
  6875                                  ;	  Carry:
  6876                                  ;	     Register AX has the error code.
  6877                                  ;	IF DX = -1 on input (set current country)
  6878                                  ;	  AL = 0 is an error
  6879                                  ;	  0<AL<0FFH means set current country to country AL
  6880                                  ;	  AL = 0FF means set current country to country BX
  6881                                  ;	  No Carry:
  6882                                  ;	    Current country SET
  6883                                  ;	    Register AL will contain the low 8 bits of the country code.
  6884                                  ;	  Carry:
  6885                                  ;	     Register AX has the error code.
  6886                                  ;-----------------------------------------------------------------------------
  6887                                  
  6888                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6889                                  
  6890                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6891                                  	 
  6892 00001A26 3CFF                    	CMP	AL,0FFH
  6893 00001A28 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6894 00001A2A 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6895 00001A2C 30FF                    	XOR	BH,BH
  6896                                  BX_HAS_CODE:
  6897 00001A2E 1E                      	PUSH	DS
  6898 00001A2F 07                      	POP	ES
  6899 00001A30 52                      	PUSH	DX
  6900 00001A31 5F                      	POP	DI			; User buffer to ES:DI
  6901                                  
  6902                                  ;hkn; SS is DOSDATA
  6903                                  ;	context DS
  6904                                  
  6905 00001A32 16                      	push	ss
  6906 00001A33 1F                      	pop	ds
  6907                                  
  6908 00001A34 83FFFF                  	CMP	DI,-1
  6909 00001A37 745F                    	JZ	short international_set
  6910 00001A39 09DB                    	OR	BX,BX
  6911 00001A3B 7505                    	JNZ	short international_find
  6912                                  
  6913                                  ;hkn; country_cdpg is in DOSDATA segment.
  6914 00001A3D BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  6915                                  
  6916 00001A40 EB40                    	JMP	SHORT international_copy
  6917                                  
  6918                                  international_find:
  6919 00001A42 BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  6920 00001A45 E80B00                  	CALL	international_get
  6921 00001A48 7256                    	JC	short errtn
  6922 00001A4A 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  6923 00001A4D 7533                    	JNZ	SHORT international_copy ; no, copy by myself
  6924 00001A4F 89D3                    	MOV	BX,DX			 ; put country back
  6925 00001A51 EB3A                    	JMP	SHORT international_ok3
  6926                                  
  6927                                  international_get:
  6928                                  
  6929                                  ;hkn; country_cdpg is in DOSDATA segment.
  6930                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6931 00001A53 BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  6932                                  
  6933                                  	; MSDOS 6.0
  6934                                  	;CMP	BX,ss:[SI.ccDosCountry]	 ; = current country id;smr;SS Override
  6935                                  	;retz				 ; return if equal
  6936                                  
  6937                                  	; MSDOS 3.3
  6938                                  	;cmp	bx,[SI+63h]
  6939 00001A56 3B5C63                  	CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  6940 00001A59 74CA                    	jz	short RET27
  6941                                  
  6942 00001A5B 89DA                    	MOV	DX,BX
  6943 00001A5D 31DB                    	XOR	BX,BX			; bx = 0, default code page
  6944                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  6945                                  
  6946 00001A5F B80014                  	mov	ax,1400h
  6947 00001A62 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  6948                                  			; Return: AL = 00h not installed, OK to install
  6949                                  			; 01h not installed, not OK
  6950                                  			; FFh installed
  6951                                  	
  6952 00001A64 3CFF                    	CMP	AL,0FFH
  6953 00001A66 7516                    	JNZ	short interr		; not in memory
  6954                                  	;cmp	bp,0
  6955 00001A68 09ED                    	or	bp,bp			; GetCntry ?
  6956 00001A6A 7507                    	JNZ	short stcdpg
  6957                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  6958                                  
  6959 00001A6C B80414                  	mov     ax,1404h
  6960 00001A6F CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  6961                                  			; BX = code page, DX = country code,
  6962                                  			; DS:SI -> internal code page structure
  6963                                  			; ES:DI -> user buffer
  6964                                  			; Return: AL = status
  6965                                  
  6966 00001A71 EB05                    	JMP	short chkok
  6967                                  	
  6968                                  	;nop
  6969                                  
  6970                                  stcdpg:
  6971                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  6972                                  
  6973 00001A73 B80314                  	mov     ax,1403h
  6974 00001A76 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  6975                                  			; DS:SI -> internal code page structure
  6976                                  			; BX = code page, DX = country code
  6977                                  			; Return: AL = status
  6978                                  chkok:
  6979 00001A78 08C0                    	or	al,al			; success ?
  6980                                  	;retz				; yes
  6981 00001A7A 74A9                    	jz	short RET27
  6982                                  
  6983                                  setcarry:
  6984 00001A7C F9                      	STC				; set carry
  6985 00001A7D C3                      	retn
  6986                                  interr:
  6987 00001A7E B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  6988 00001A80 EBFA                    	JMP	short setcarry
  6989                                  
  6990                                  international_copy:
  6991                                  
  6992                                  ;hkn; country_cdpg is in DOSDATA segment.
  6993                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6994                                  	; MSDOS 6.0
  6995                                  	;MOV	BX,ss:[SI.ccDosCountry]	 ; = current country id;smr;SS Override
  6996                                  	;MOV	SI,OFFSET DOSDATA:COUNTRY_CDPG.ccDFormat
  6997                                  
  6998                                  	; MSDOS 3.3
  6999                                  	;mov	bx,[SI+63h]
  7000 00001A82 8B5C63                  	mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7001 00001A85 BE[6410]                	mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7002                                  
  7003                                  	;mov	cx,24
  7004 00001A88 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7005                                  
  7006                                  	; MSDOS 6.0
  7007                                  ;hkn;	must set up DS to SS so that international info can be copied
  7008                                  	;push	ds
  7009                                  	;push	ss					; cs -> ss
  7010                                  	;pop	ds
  7011                                  
  7012 00001A8B F3A4                    	REP	MOVSB			;copy country info
  7013                                  
  7014                                  	; MSDOS 6.0
  7015                                  ;hkn;	restore ds
  7016                                  	;pop	ds
  7017                                  
  7018                                  international_ok3:
  7019 00001A8D E87BFB                  	call	Get_User_Stack
  7020                                  ;ASSUME	DS:NOTHING
  7021                                  	;MOV	[SI+2],BX
  7022 00001A90 895C02                  	MOV	[SI+user_env.user_BX],BX
  7023                                  international_ok:
  7024 00001A93 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7025 00001A95 E965FC                  	jmp	SYS_RET_OK
  7026                                  
  7027                                  international_set:
  7028                                  
  7029                                  ;hkn; ASSUME	DS:DOSGROUP
  7030                                  ;ASSUME	DS:DOSDATA
  7031                                  
  7032 00001A98 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7033 00001A9B E8B5FF                  	CALL	international_get
  7034 00001A9E 73F3                    	JNC	short international_ok
  7035                                  errtn:
  7036 00001AA0 3CFF                    	CMP	AL,0FFH
  7037 00001AA2 7403                    	JZ	short errtn2
  7038                                  errtn1:
  7039 00001AA4 E962FC                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7040                                  errtn2:
  7041                                  	;error	error_invalid_function	; NLSFUNC not existent
  7042                                  
  7043                                  	;mov	al,1
  7044 00001AA7 B001                    	mov	al,error_invalid_function 
  7045                                  	;jmp	short errtn1
  7046                                  errtn3:
  7047 00001AA9 E95DFC                  	jmp	SYS_RET_ERR
  7048                                  
  7049                                  ;EndProc $INTERNATIONAL
  7050                                  
  7051                                  ; 19/07/2018
  7052                                  
  7053                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7054                                  
  7055                                  ;---------------------------------------------------------------------------
  7056                                  ;
  7057                                  ; Procedure Name : $GetExtCntry
  7058                                  ;
  7059                                  ; Inputs:
  7060                                  ;	if AL >= 20H
  7061                                  ;	  AL= 20H    capitalize single char, DL= char
  7062                                  ;	      21H    capitalize string, CX= string length
  7063                                  ;	      22H    capitalize ASCIIZ string
  7064                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7065                                  ;	      80H bit 0 = use normal upper case table
  7066                                  ;		      1 = use file upper case table
  7067                                  ;	   DS:DX points to string
  7068                                  ;
  7069                                  ;	else
  7070                                  ;
  7071                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7072                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7073                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7074                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7075                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7076                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7077                                  ;	INT	21
  7078                                  ; Function:
  7079                                  ;	give users extended country dependent information
  7080                                  ;	or capitalize chars
  7081                                  ; Outputs:
  7082                                  ;	  No Carry:
  7083                                  ;	     extended country info is succesfully returned
  7084                                  ;	  Carry:
  7085                                  ;	     Register AX has the error code.
  7086                                  ;	     AX=0, NO	 for YES/NO CHECK
  7087                                  ;		1, YES
  7088                                  ;-------------------------------------------------------------------------------
  7089                                  
  7090                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7091                                  
  7092                                  	; MSDOS 6.0
  7093                                  _$GetExtCntry:
  7094 00001AAC 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7095 00001AAE 7262                    	JB	short notcap
  7096                                  capcap: 				;
  7097 00001AB0 A880                    	TEST	AL,UPPER_TABLE		; which upper case table
  7098 00001AB2 7505                    	JNZ	short fileupper		; file upper case
  7099                                  
  7100                                  ;hkn; UCASE_TAB in DOSDATA
  7101 00001AB4 BB[8810]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7102 00001AB7 EB03                    	JMP	SHORT capit
  7103                                  
  7104                                  fileupper:
  7105                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7106 00001AB9 BB[0A11]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7107                                  capit:					;
  7108 00001ABC 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7109 00001ABE 750D                    	JNZ	short chkyes		; no
  7110 00001AC0 88D0                    	MOV	AL,DL			; set up AL
  7111 00001AC2 E86C3B                  	call	GETLET3 		; upper case it
  7112 00001AC5 E843FB                  	call	Get_User_Stack		; get user stack
  7113 00001AC8 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7114 00001ACB EB1C                    	JMP	SHORT nono		; done
  7115                                  chkyes: 				;
  7116 00001ACD 3C23                    	CMP	AL,CHECK_YES_NO		; check YES or NO ?
  7117 00001ACF 751B                    	JNZ	short capstring		; no
  7118 00001AD1 31C0                    	XOR	AX,AX			; presume NO
  7119                                  		      
  7120                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7121                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7122                                  
  7123                                  	; 06/08/2018 - Retro DOS v3.0
  7124                                  	;CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7125 00001AD3 80FA59                  	cmp	DL,'Y'
  7126 00001AD6 7410                    	JZ	short yesyes		; yes
  7127                                  	;CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7128 00001AD8 80FA79                  	cmp	dl,'y'
  7129 00001ADB 740B                    	JZ	short yesyes		; yes
  7130 00001ADD 80FA4E                  	cmp	dl,'N'
  7131                                  	;CMP	DL,[cs:NLS_NO]		; is  'N'?
  7132 00001AE0 7407                    	JZ	short nono		; no
  7133 00001AE2 80FA6E                  	CMP	DL,'n'
  7134                                  	;CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7135 00001AE5 7402                    	JZ	short nono		; no
  7136                                  ;dbcs_char:				;
  7137 00001AE7 40                      	INC	AX			; not YES or NO
  7138                                  yesyes: 				;
  7139 00001AE8 40                      	INC	AX			; return 1
  7140                                  nono:					;
  7141 00001AE9 E911FC                  	jmp	SYS_RET_OK		; done
  7142                                  capstring:				;
  7143 00001AEC 89D6                    	MOV	SI,DX			; si=dx
  7144 00001AEE 3C21                    	CMP	AL,CAP_STRING		; cap string ?
  7145 00001AF0 750F                    	JNZ	short capascii		; no
  7146 00001AF2 09C9                    	OR	CX,CX			; check count 0
  7147 00001AF4 74F3                    	JZ	short nono		; yes finished
  7148                                  concap: 				;
  7149 00001AF6 AC                      	LODSB				; get char
  7150 00001AF7 E8373B                  	call	GETLET3 		; upper case it
  7151 00001AFA 8844FF                  	MOV	byte [SI-1],AL		; store back
  7152                                  next99: 				;
  7153 00001AFD E2F7                    	LOOP	concap			; continue
  7154 00001AFF EBE8                    	JMP	short nono		; done
  7155                                  capascii:				;
  7156 00001B01 3C22                    	CMP	AL,CAP_ASCIIZ		; cap ASCIIZ string ?
  7157 00001B03 7545                    	JNZ	short capinval		; no
  7158                                  concap2:				;
  7159 00001B05 AC                      	LODSB				; get char
  7160 00001B06 08C0                    	or	al,al			; end of string ?
  7161 00001B08 74DF                    	JZ	short nono		; yes
  7162 00001B0A E8243B                  	call	GETLET3 		; upper case it
  7163 00001B0D 8844FF                  	MOV	[SI-1],AL		; store back
  7164 00001B10 EBF3                    	JMP	short concap2 		; continue
  7165                                  
  7166                                  	; MSDOS 3.3 ($ MSDOS 6.0)
  7167                                  
  7168                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7169                                  ; _$GetExtCntry:
  7170                                  
  7171                                  notcap:
  7172 00001B12 83F905                  	CMP	CX,5			; minimum size is 5
  7173 00001B15 7279                    	jb	short sizeerror
  7174                                  
  7175                                  GEC_CONT:
  7176                                  ;hkn; SS is DOSDATA
  7177                                  	;context DS
  7178                                  
  7179 00001B17 16                      	push	ss
  7180                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7181 00001B18 1F                      	pop	ds  ; 17/05/2019 - BugFix
  7182                                  	
  7183                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7184 00001B19 BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  7185                                  
  7186 00001B1C 83FAFF                  	CMP	DX,-1			; active country ?
  7187 00001B1F 7503                    	JNZ	short GETCDPG 		; no
  7188                                  
  7189                                  ;hkn; use DS override to accesss country_cdpg fields
  7190                                  	;mov	dx,[si+63h]
  7191 00001B21 8B5463                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7192                                  					; get active country id;smr;use DS
  7193                                  GETCDPG:
  7194 00001B24 83FBFF                  	CMP	BX,-1			; active code page?
  7195 00001B27 7503                    	JNZ	short CHKAGAIN		; no, check again
  7196                                  
  7197                                  ;hkn; use DS override to accesss country_cdpg fields
  7198                                  	;mov	bx,[si+65h]
  7199 00001B29 8B5C65                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7200                                  					; get active code page id;smr;Use DS
  7201                                  CHKAGAIN:
  7202                                  	;cmp	dx,[si+63h]
  7203 00001B2C 3B5463                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7204                                  					; same as active country id?;smr;use DS
  7205 00001B2F 7552                    	JNZ	short CHKNLS		; no
  7206                                  	;cmp	bx,[si+65h]
  7207 00001B31 3B5C65                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7208                                  					; same as active code pg id?;smr;use DS
  7209 00001B34 754D                    	JNZ	short CHKNLS		; no
  7210                                  CHKTYPE:
  7211                                  	;mov	bx,[si+48h]
  7212 00001B36 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7213                                  					; bx = sys code page id;smr;use DS
  7214                                  ;	CMP	AL,SetALL		; select all?
  7215                                  ;	JNZ	short SELONE
  7216                                  ;	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccNumber_of_entries
  7217                                  ;SELONE:
  7218 00001B39 51                      	PUSH	CX			; save cx
  7219                                  	;mov	cx,[si+4Ah]
  7220 00001B3A 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]	;smr;use DS
  7221 00001B3D BE[4910]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7222                                  NXTENTRY:
  7223 00001B40 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7224 00001B42 740B                    	JZ	short FOUNDIT
  7225 00001B44 83C605                  	ADD	SI,5			; next entry
  7226 00001B47 E2F7                    	LOOP	NXTENTRY
  7227 00001B49 59                      	POP	CX
  7228                                  capinval:
  7229                                  	;error	error_invalid_function	; info type not found
  7230                                  	;mov	al,1
  7231 00001B4A B001                    	mov	al,error_invalid_function
  7232 00001B4C E9BAFB                  	jmp	SYS_RET_ERR
  7233                                  
  7234                                  FOUNDIT:
  7235 00001B4F A4                      	MOVSB				; move info id byte
  7236 00001B50 59                      	POP	CX			; retsore char count
  7237                                  	;cmp	al,1
  7238 00001B51 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7239 00001B53 7415                    	JZ	short setsize
  7240 00001B55 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7241 00001B58 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7242                                  OK_RETN:
  7243 00001B5B F3A4                    	REP	MOVSB			; copy info
  7244 00001B5D 89C1                    	MOV	CX,AX			; CX = actual length returned
  7245 00001B5F 89D8                    	MOV	AX,BX			; return sys code page in ax
  7246                                  GETDONE:
  7247 00001B61 E8A7FA                  	call	Get_User_Stack		; return actual length to user's CX
  7248                                  	;mov	[si+4],cx 
  7249 00001B64 894C04                  	MOV	[SI+user_env.user_CX],CX
  7250 00001B67 E993FB                  	jmp	SYS_RET_OK
  7251                                  setsize:
  7252 00001B6A 83E903                  	SUB	CX,3			; size after length field
  7253 00001B6D 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7254 00001B6F 7302                    	JAE	short setsize2		; no
  7255 00001B71 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7256                                  setsize2:
  7257 00001B73 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7258 00001B76 83C702                  	ADD	DI,2			; update index
  7259 00001B79 83C602                  	ADD	SI,2
  7260 00001B7C 89C8                    	MOV	AX,CX
  7261 00001B7E 83C003                  	ADD	AX,3			; AX has the actual length
  7262 00001B81 EBD8                    	JMP	short OK_RETN 		; go move it
  7263                                  CHKNLS:
  7264 00001B83 30E4                    	XOR	AH,AH
  7265 00001B85 50                      	PUSH	AX			; save info type
  7266 00001B86 5D                      	POP	BP			; bp = info type
  7267                                  	
  7268                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7269                                  
  7270 00001B87 B80014                  	mov     ax, 1400h
  7271 00001B8A CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7272                                  			; Return: AL = 00h not installed, OK to install
  7273                                  			; 01h not installed, not OK
  7274                                  			; FFh installed
  7275                                  	
  7276 00001B8C 3CFF                    	CMP	AL,0FFH
  7277 00001B8E 7405                    	JZ	short NLSNXT		; in memory
  7278                                  
  7279                                  sizeerror:
  7280                                  	;error	error_invalid_function
  7281                                  	;mov	al,1
  7282 00001B90 B001                    	mov	al,error_invalid_function
  7283 00001B92 E974FB                  	jmp	SYS_RET_ERR
  7284                                  
  7285                                  NLSNXT: 
  7286                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7287                                  
  7288 00001B95 B80214                  	mov     ax, 1402h
  7289 00001B98 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7290                                  			; BP = subfunction, BX = code page
  7291                                  			; DX = country code, DS:SI -> internal code page structure
  7292                                  			; ES:DI -> user buffer, CX = size of user buffer
  7293                                  			; Return: AL = status
  7294                                  			; 00h successful
  7295                                  			; else DOS error code
  7296                                  
  7297 00001B9A 3C00                    	CMP	AL,0			; success ?
  7298 00001B9C 7508                    	JNZ	short NLSERROR
  7299 00001B9E 8B4448                  	mov     ax,[si+48h]
  7300 00001BA1 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7301                                  			; ax = sys code page id;smr;use ds;
  7302                                  			;BUGBUG;check whether DS is OK after the above calls
  7303 00001BA4 EBBB                    	JMP	short GETDONE
  7304                                  NLSERROR:
  7305 00001BA6 E960FB                  	jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7306                                  
  7307                                  ;EndProc $GetExtCntry
  7308                                  
  7309                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7310                                  
  7311                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7312                                  ;
  7313                                  ;   System call format:
  7314                                  ;
  7315                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7316                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7317                                  ;	MOV	BX,CODE_PAGE	( set code page only)
  7318                                  ;	INT	21
  7319                                  ;
  7320                                  ;	ENTRY	(al) = n
  7321                                  ;		(bx) = code page
  7322                                  ;	EXIT	'C' clear
  7323                                  ;		  global code page is set	(set global code page)
  7324                                  ;		  (BX) = active code page id	(get global code page)
  7325                                  ;		  (DX) = system code page id	(get global code page)
  7326                                  ;		'C' set
  7327                                  ;		  (AX) = error code
  7328                                  
  7329                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7330                                  
  7331                                  _$GetSetCdPg:
  7332                                  
  7333                                  ;hkn; SS is DOSDATA
  7334                                  	;context DS
  7335                                  
  7336 00001BA9 16                      	push	ss
  7337 00001BAA 1F                      	pop	ds
  7338                                  
  7339                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7340 00001BAB BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  7341                                  
  7342 00001BAE 3C01                    	CMP	AL,1		       ; get global code page
  7343 00001BB0 7512                    	JNZ	short setglpg 	       ; set global cod epage
  7344                                  	;mov	bx,[si+65h]
  7345 00001BB2 8B5C65                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7346                                  					; get active code page id;smr;use ds
  7347                                  	;mov	dx,[si+48h]
  7348 00001BB5 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7349                                  				  	; get sys code page id;smr;use ds
  7350 00001BB8 E850FA                  	call	Get_User_Stack
  7351                                  ;ASSUME DS:NOTHING
  7352                                  	;mov	[si+2],bx
  7353 00001BBB 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7354                                  	;mov	[si+6],dx
  7355 00001BBE 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7356                                  OK_RETURN:
  7357                                  	;transfer SYS_RET_OK
  7358 00001BC1 E939FB                  	jmp	SYS_RET_OK
  7359                                  
  7360                                  ;hkn; ASSUME DS:DOSGROUP
  7361                                  ;ASSUME	DS:DOSDATA
  7362                                  
  7363                                  setglpg:
  7364 00001BC4 3C02                    	CMP	AL,2
  7365 00001BC6 7534                    	JNZ	short nomem
  7366                                  ;;;;;;; CMP	BX,[SI+DOS_CCDPG.ccDosCodePage] ; same as active code page
  7367                                  ;;;;;;; JZ	short OK_RETURN		; yes
  7368                                  	;mov	dx,[si+63h]
  7369 00001BC8 8B5463                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7370                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7371 00001BCB B80014                  	mov     ax, 1400h
  7372 00001BCE CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7373                                  			; Return: AL = 00h not installed, OK to install
  7374                                  			; 01h not installed, not OK
  7375                                  			; FFh installed
  7376 00001BD0 3CFF                    	CMP	AL,0FFH
  7377 00001BD2 7528                    	JNZ	short nomem		; not in memory
  7378                                  	;CallInstall SetCodePage,NLSFUNC,1  ;set the code page
  7379 00001BD4 B80114                  	mov     ax, 1401h
  7380 00001BD7 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7381                                  			; DS:SI -> internal code page structure
  7382                                  			; BX = new code page, DX = country code???
  7383                                  			; Return: AL = status
  7384                                  			; 00h successful
  7385                                  			; else DOS error code
  7386                                  	;cmp	al,0
  7387 00001BD9 08C0                    	or	al,al			   ; success ?
  7388 00001BDB 74E4                    	JZ	short OK_RETURN		   ; yes
  7389 00001BDD 3C41                    	CMP	AL,65			   ; set device code page failed
  7390 00001BDF 7518                    	JNZ	short seterr
  7391 00001BE1 B84100                  	MOV	AX,65
  7392 00001BE4 A3[D202]                	MOV	[EXTERR],AX
  7393                                  	;mov	byte [EXTERR_ACTION],6
  7394                                  	;mov	byte [EXTERR_CLASS],5
  7395                                  	;mov	byte [EXTERR_LOCUS],4
  7396 00001BE7 C606[D402]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7397 00001BEC C606[D502]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7398 00001BF1 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7399                                  	;transfer From_GetSet
  7400 00001BF6 E918FB                  	jmp	From_GetSet
  7401                                  
  7402                                  seterr:
  7403                                  	;transfer SYS_RET_ERR
  7404 00001BF9 E90DFB                  	jmp	SYS_RET_ERR
  7405                                  
  7406                                  nomem:
  7407                                  	;error	error_invalid_function ; function not defined
  7408                                  	;mov	al,1
  7409 00001BFC B001                    	mov	al,error_invalid_function
  7410 00001BFE EBF9                    	jmp	short seterr
  7411                                  
  7412                                  ;EndProc $GetSetCdPg
  7413                                  
  7414                                  
  7415                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7416                                  
  7417                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7418                                  ;
  7419                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7420                                  ;		drive.
  7421                                  ;
  7422                                  ;	This call returns the same info in the same registers (except for the
  7423                                  ;	FAT pointer) as the old FAT pointer calls
  7424                                  ;
  7425                                  ;	ENTRY	DL = Drive number
  7426                                  ;	EXIT	AX = Sectors per allocation unit
  7427                                  ;		   = -1 if bad drive specified
  7428                                  ;		On User Stack
  7429                                  ;		    BX = Number of free allocation units
  7430                                  ;		    DX = Total Number of allocation units on disk
  7431                                  ;		    CX = Sector size
  7432                                  
  7433                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7434                                  
  7435                                  _$GET_DRIVE_FREESPACE:
  7436                                  
  7437                                  ;hkn; SS is DOSDATA
  7438                                  	;context DS
  7439 00001C00 16                      	push	ss
  7440 00001C01 1F                      	pop	ds
  7441                                  
  7442 00001C02 88D0                    	MOV	AL,DL
  7443                                  	;invoke	GetThisDrv		; Get drive
  7444 00001C04 E86E4D                  	call	GETTHISDRV
  7445                                  SET_AX_RET:
  7446 00001C07 7218                    	JC	short BADFDRV
  7447                                  	;invoke	DISK_INFO
  7448 00001C09 E8AB1C                  	call	DISK_INFO
  7449 00001C0C 87D3                    	XCHG	DX,BX
  7450 00001C0E 72F7                    	JC	short SET_AX_RET	; User FAILed to I 24
  7451 00001C10 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7452                                  DoSt:
  7453 00001C12 E8F6F9                  	call	Get_User_Stack
  7454                                  ;ASSUME	DS:NOTHING
  7455                                  	;mov	[si+6],dx
  7456                                  	;mov	[si+4],cx
  7457                                  	;mov	[si+2],bx
  7458 00001C15 895406                  	MOV	[SI+user_env.user_DX],DX
  7459 00001C18 894C04                  	MOV	[SI+user_env.user_CX],CX
  7460 00001C1B 895C02                  	MOV	[SI+user_env.user_BX],BX
  7461                                  	;MOV	[SI+user_env.user_AX],AX
  7462 00001C1E 8904                    	mov     [si],ax
  7463                                  	;return
  7464 00001C20 C3                      	retn
  7465                                  
  7466                                  BADFDRV:
  7467                                  	; MSDOS 6.0
  7468                                  	;;mov	al,0Fh
  7469                                  	;MOV	AL,error_invalid_drive	; Assume error
  7470                                  	
  7471                                  	; MSDOS 3.3
  7472                                  	;mov	al,0Fh
  7473 00001C21 B00F                    	mov	al,error_invalid_drive	; Assume error
  7474                                  
  7475                                  	;invoke	FCB_RET_ERR
  7476 00001C23 E8F9FA                  	call	FCB_RET_ERR
  7477 00001C26 B8FFFF                  	MOV	AX,-1
  7478 00001C29 EBE7                    	JMP	short DoSt
  7479                                  
  7480                                  ;EndProc $GET_DRIVE_FREESPACE
  7481                                  
  7482                                  
  7483                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7484                                  
  7485                                  ;**	$Get_DMA - Get Disk Transfer Address
  7486                                  ;
  7487                                  ;	ENTRY	none
  7488                                  ;	EXIT	ES:BX is current transfer address
  7489                                  ;	USES	all
  7490                                  
  7491                                  _$GET_DMA:
  7492 00001C2B 368B1E[DA02]            	MOV	BX,[SS:DMAADD]
  7493 00001C30 368B0E[DC02]            	MOV	CX,[SS:DMAADD+2]
  7494 00001C35 E8D3F9                  	call	Get_User_Stack
  7495                                  	;mov	[si+2],bx
  7496                                  	;mov	[si+10h],cx
  7497 00001C38 895C02                  	MOV	[SI+user_env.user_BX],BX
  7498 00001C3B 894C10                  	MOV	[SI+user_env.user_ES],CX
  7499 00001C3E C3                      	retn
  7500                                  
  7501                                  ;**	$Set_DMA - Set Disk Transfer Address
  7502                                  ;
  7503                                  ;	ENTRY	DS:DX is current transfer address
  7504                                  ;	EXIT	none
  7505                                  ;	USES	all
  7506                                  
  7507                                  _$SET_DMA:
  7508 00001C3F 368916[DA02]            	MOV	[SS:DMAADD],DX
  7509 00001C44 368C1E[DC02]            	MOV	[SS:DMAADD+2],DS
  7510 00001C49 C3                      	retn
  7511                                  
  7512                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7513                                  
  7514                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7515                                  ;
  7516                                  ;	ENTRY	none
  7517                                  ;	EXIT	(AL) = drive number
  7518                                  ;	USES	all
  7519                                  
  7520                                  _$GET_DEFAULT_DRIVE:
  7521 00001C4A 36A0[E402]              	MOV	AL,[SS:CURDRV]
  7522 00001C4E C3                      	retn
  7523                                  
  7524                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7525                                  ;
  7526                                  ;	ENTRY	(DL) = Drive number for new default drive
  7527                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7528                                  
  7529                                  _$SET_DEFAULT_DRIVE:
  7530 00001C4F 88D0                    	MOV	AL,DL
  7531 00001C51 FEC0                    	INC	AL			; A=1, B=2...
  7532 00001C53 E8084D                  	call	GetVisDrv		; see if visible drive
  7533 00001C56 7204                    	JC	short SETRET		; errors do not set
  7534 00001C58 36A2[E402]              	MOV	[SS:CURDRV],AL		; no, set
  7535                                  
  7536                                  SETRET:
  7537 00001C5C 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7538 00001C60 C3                      	retn
  7539                                  
  7540                                  
  7541                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7542                                  
  7543                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7544                                  ;
  7545                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7546                                  ;	contents of an interrupt vector.
  7547                                  ;
  7548                                  ;	ENTRY	(AL) = interrupt number
  7549                                  ;	EXIT	(ES:BX) = current interrupt vector
  7550                                  
  7551                                  _$GET_INTERRUPT_VECTOR:
  7552 00001C61 E81A00                  	CALL	RECSET
  7553 00001C64 26C41F                  	LES	BX,[ES:BX]
  7554 00001C67 E8A1F9                  	call	Get_User_Stack
  7555                                  	;mov	[si+2],bx
  7556                                  	;mov	[si+10h],es
  7557 00001C6A 895C02                  	MOV	[SI+user_env.user_BX],BX
  7558 00001C6D 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7559 00001C70 C3                      	retn
  7560                                  
  7561                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7562                                  ;
  7563                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7564                                  ;	contents of an interrupt vector.
  7565                                  ;
  7566                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7567                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7568                                  ;	for explanation.
  7569                                  ;
  7570                                  ;	ENTRY	(AL) = interrupt number
  7571                                  ;		(ds:dx) = desired new vector value
  7572                                  ;	EXIT	none
  7573                                  ;	USES	all
  7574                                  
  7575                                  _$SET_INTERRUPT_VECTOR:
  7576 00001C71 E80A00                  	CALL	RECSET
  7577 00001C74 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7578 00001C75 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7579 00001C78 268C5F02                	MOV	[ES:BX+2],DS
  7580 00001C7C FB                      	STI
  7581                                  					; M004, M068 - Start
  7582                                  	; MSDOS 6.0
  7583                                  	;test	byte [DOS_FLAG],EXECA20OFF
  7584                                  					; Q: was the previous call an int 21
  7585                                  					;    exec call
  7586                                  	;jnz	short siv_1		; Y: go set count
  7587 00001C7D C3                      	retn				; N: return
  7588                                  
  7589                                  ;siv_1:	
  7590                                  	;cmp	byte [A20OFF_COUNT],0	; Q: is count 0
  7591                                  	;jne	short siv_2		; N: done 
  7592                                  	;mov	byte [A20OFF_COUNT],1	; Y: set it to 1 to indicate to dos 
  7593                                  					; dispatcher to turn A20 Off before 
  7594                                  					; returning to user.
  7595                                  ;siv_2:
  7596                                  	;retn				; M004, M068 - End
  7597                                  	
  7598                                  RECSET:
  7599 00001C7E 31DB                    	XOR	BX,BX
  7600 00001C80 8EC3                    	MOV	ES,BX
  7601 00001C82 88C3                    	MOV	BL,AL
  7602 00001C84 D1E3                    	SHL	BX,1
  7603 00001C86 D1E3                    	SHL	BX,1
  7604 00001C88 C3                      	retn
  7605                                  
  7606                                  
  7607                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7608                                  
  7609                                  ;**	$Char_Oper - Manipulate Switch Character
  7610                                  ;
  7611                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7612                                  ;
  7613                                  ;	ENTRY	AL = function:
  7614                                  ;		    0 - read switch char
  7615                                  ;		    1 - set switch char (char in DL)
  7616                                  ;		    2 - read device availability
  7617                                  ;			Always returns available
  7618                                  ;		    3 - set device availability
  7619                                  ;			No longer supported (NOP)
  7620                                  ;	EXIT	(al) = 0xff iff error
  7621                                  ;		(al) != 0xff if ok
  7622                                  ;		  (dl) = character/flag, iff "read switch char" subfunction
  7623                                  ;	USES	AL, DL
  7624                                  ;
  7625                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7626                                  ;		The character / is always returned for subfunction 0,
  7627                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7628                                  
  7629                                  _$CHAR_OPER:
  7630                                  	; MSDOS 6.0
  7631                                  	;or	al,al				; get switch?
  7632                                  	;mov	dl,'/'				; assume yes
  7633                                  	;jz	short chop_1			; jump if yes
  7634                                  	;cmp	al,2				; check device availability?
  7635                                  	;mov	dl,-1				; assume yes
  7636                                  	;jz	short chop_1				; jump if yes
  7637                                  	;retn					; otherwise just quit
  7638                                  
  7639                                  ; subfunctions requiring return of value to user come here.  DL holds
  7640                                  ; value to return
  7641                                  
  7642                                  ;chop_1:
  7643                                  	;call	Get_User_Stack
  7644                                  	;mov	[SI+user_env.user_DX],dx	; store value for user
  7645                                  	;retn
  7646                                  
  7647                                  	; MSDOS 3.3
  7648                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7649 00001C89 16                      	push    ss
  7650 00001C8A 1F                      	pop     ds
  7651 00001C8B 3C01                    	cmp     al, 1
  7652 00001C8D 720B                    	jb      short chop_1
  7653 00001C8F 740F                    	jz      short chop_2
  7654 00001C91 3C03                    	cmp     al, 3
  7655 00001C93 7210                    	jb      short chop_3
  7656 00001C95 7416                    	jz      short chop_5
  7657 00001C97 B0FF                    	mov     al, 0FFh
  7658 00001C99 C3                      	retn
  7659                                  chop_1:
  7660 00001C9A 8A16[AF02]              	mov     dl,[chSwitch]
  7661 00001C9E EB07                    	jmp     short chop_4
  7662                                  chop_2:
  7663 00001CA0 8816[AF02]              	mov     [chSwitch], dl
  7664 00001CA4 C3                      	retn
  7665                                  chop_3:
  7666 00001CA5 B2FF                    	mov     dl, 0FFh
  7667                                  chop_4:
  7668 00001CA7 E861F9                  	call    Get_User_Stack
  7669 00001CAA 895406                  	mov     [si+6],dx
  7670                                  chop_5:
  7671 00001CAD C3                      	retn
  7672                                  
  7673                                  
  7674                                  ;**	$GetExtendedError - Return Extended error code
  7675                                  ;
  7676                                  ;	This function reads up the extended error info from the static
  7677                                  ;	variables where it was stored.
  7678                                  ;
  7679                                  ;	ENTRY	none
  7680                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7681                                  ;		BL = recommended action
  7682                                  ;		BH = class of error
  7683                                  ;		CH = locus of error
  7684                                  ;		ES:DI = may be pointer
  7685                                  ;	USES	ALL
  7686                                  
  7687                                  _$GetExtendedError:
  7688 00001CAE 16                      	push	ss
  7689 00001CAF 1F                      	pop	ds
  7690 00001CB0 A1[D202]                	MOV	AX,[EXTERR]
  7691 00001CB3 C43E[D602]              	LES	DI,[EXTERRPT]
  7692 00001CB7 8B1E[D402]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7693 00001CBB 8A2E[D102]              	MOV	CH,[EXTERR_LOCUS]
  7694 00001CBF E849F9                  	call	Get_User_Stack
  7695                                  	;mov	[si+0Ah],di
  7696 00001CC2 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7697                                  	;mov	[si+10h],es
  7698 00001CC5 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7699                                  	;mov	[si+2],bx
  7700 00001CC8 895C02                  	MOV	[SI+user_env.user_BX],BX
  7701                                  	;mov	[si+4],cx
  7702 00001CCB 894C04                  	MOV	[SI+user_env.user_CX],CX
  7703 00001CCE E92CFA                  	jmp	SYS_RET_OK
  7704                                  
  7705                                  
  7706                                  ;============================================================================
  7707                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7708                                  ;============================================================================
  7709                                  ; 19/07/2018 - Retro DOS v3.0
  7710                                  
  7711                                  ; System calls for parsing command lines
  7712                                  ;
  7713                                  ;   $PARSE_FILE_DESCRIPTOR
  7714                                  ;
  7715                                  ;   Modification history:
  7716                                  ;
  7717                                  ;       Created: ARR 30 March 1983
  7718                                  ;               EE PathParse 10 Sept 1983
  7719                                  ;
  7720                                  
  7721                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7722                                  ;---------------------------------------------------------------------------
  7723                                  ; Inputs:
  7724                                  ;       DS:SI Points to a command line
  7725                                  ;       ES:DI Points to an empty FCB
  7726                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7727                                  ;                   = 0 Parse stops if separator encountered
  7728                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7729                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7730                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7731                                  ;                   = 0  "       "      "       - put blanks in FCB
  7732                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7733                                  ;                   = 0  "       "      "        - put blanks in FCB
  7734                                  ; Function:
  7735                                  ;       Parse command line into FCB
  7736                                  ; Returns:
  7737                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7738                                  ;       DS:SI points to first character after filename
  7739                                  ;---------------------------------------------------------------------------
  7740                                  
  7741                                  _$PARSE_FILE_DESCRIPTOR:
  7742 00001CD1 E85738                  	call	MAKEFCB
  7743 00001CD4 56                      	PUSH    SI
  7744 00001CD5 E833F9                  	call	Get_User_Stack
  7745                                  	;pop	word [si+8]
  7746 00001CD8 8F4408                  	POP     word [SI+user_env.user_SI]
  7747 00001CDB C3                      	retn
  7748                                  
  7749                                  ;============================================================================
  7750                                  ; MISC.ASM, MSDOS 6.0, 1991
  7751                                  ;============================================================================
  7752                                  ; 19/07/2018 - Retro DOS v3.0
  7753                                  
  7754                                  ;ENTRYPOINTSEG	EQU	0CH
  7755                                  ;MAXDIF		EQU	0FFFH
  7756                                  ;SAVEXIT 	EQU	10
  7757                                  ;WRAPOFFSET	EQU	0FEF0h
  7758                                  
  7759                                  ;
  7760                                  ;----------------------------------------------------------------------------
  7761                                  ;
  7762                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7763                                  ;
  7764                                  ;	Return Stuff sort of like old get fat call
  7765                                  ;
  7766                                  ;	ENTRY	none
  7767                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7768                                  ;			GOD help anyone who tries to do ANYTHING except
  7769                                  ;			READ this ONE byte.
  7770                                  ;		DX = Total Number of allocation units on disk
  7771                                  ;		CX = Sector size
  7772                                  ;		AL = Sectors per allocation unit
  7773                                  ;		   = -1 if bad drive specified
  7774                                  ;	USES	all
  7775                                  ;
  7776                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7777                                  ;
  7778                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7779                                  ;
  7780                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7781                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7782                                  ;			GOD help anyone who tries to do ANYTHING except
  7783                                  ;			READ this ONE byte.
  7784                                  ;		DX = Total Number of allocation units on disk
  7785                                  ;		CX = Sector size
  7786                                  ;		AL = Sectors per allocation unit
  7787                                  ;		   = -1 if bad drive specified
  7788                                  ;	USES	all
  7789                                  ;
  7790                                  ;----------------------------------------------------------------------------
  7791                                  ;
  7792                                  
  7793                                  _$SLEAZEFUNC:
  7794 00001CDC B200                    	MOV	DL,0
  7795                                  
  7796                                  _$SLEAZEFUNCDL:
  7797 00001CDE 16                      	push	ss
  7798 00001CDF 1F                      	pop	ds
  7799                                  	
  7800 00001CE0 88D0                    	MOV	AL,DL
  7801 00001CE2 E8904C                  	call	GETTHISDRV		; Get CDS structure
  7802                                  SET_AL_RET:
  7803                                  	; MSDOS 6.0
  7804                                  	;;mov	al, 0Fh
  7805                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7806                                  	
  7807                                  	; MSDOS 3.3
  7808                                  	;mov	al, 0Fh
  7809 00001CE5 B00F                    	MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7810                                  
  7811 00001CE7 721E                    	JC	short BADSLDRIVE
  7812                                  
  7813 00001CE9 E8CB1B                  	call	DISK_INFO
  7814 00001CEC 72F7                    	JC	short SET_AL_RET	; User FAILed to I 24
  7815 00001CEE 8826[3005]              	MOV	[FATBYTE],AH
  7816                                  
  7817                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7818                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7819                                  ; CALL AGAIN
  7820                                  
  7821 00001CF2 BF[3005]                	MOV	DI,FATBYTE
  7822 00001CF5 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7823 00001CF7 E811F9                  	call	Get_User_Stack
  7824                                  	;mov	[si+4],cx
  7825                                  	;mov	[si+6],bx
  7826                                  	;mov	[si+2],di
  7827 00001CFA 894C04                  	MOV	[SI+user_env.user_CX],CX
  7828 00001CFD 895C06                  	MOV	[SI+user_env.user_DX],BX
  7829 00001D00 897C02                  	MOV	[SI+user_env.user_BX],DI
  7830                                  	
  7831                                  	;mov	[si+0Eh],cs
  7832                                  	;mov	[SI+user_env.user_DS],SS
  7833 00001D03 8C4C0E                  	MOV     [SI+user_env.user_DS],CS ; stash correct pointer
  7834                                  
  7835 00001D06 C3                      	retn
  7836                                  
  7837                                  BADSLDRIVE:
  7838 00001D07 E915FA                  	jmp	FCB_RET_ERR
  7839                                  
  7840                                  ;
  7841                                  ;----------------------------------------------------------------------------
  7842                                  ;
  7843                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  7844                                  ;
  7845                                  ;	Returns location of DOS status for interrupt routines
  7846                                  ;									   ;
  7847                                  ;	ENTRY	none
  7848                                  ;	EXIT	(es:bx) = flag location
  7849                                  ;	USES	all
  7850                                  ;
  7851                                  ;----------------------------------------------------------------------------
  7852                                  ;
  7853                                  
  7854                                  _$GET_INDOS_FLAG:
  7855 00001D0A E8FEF8                          CALL	Get_User_Stack
  7856                                          ;MOV	WORD [SI+2],INDOS
  7857 00001D0D C74402[CF02]            	MOV     word [SI+user_env.user_BX],INDOS
  7858                                          ;MOV	[SI+10H],SS
  7859 00001D12 8C5410                  	MOV	[SI+user_env.user_ES],SS
  7860 00001D15 C3                      	RETN 
  7861                                  
  7862                                  ;
  7863                                  ;----------------------------------------------------------------------------
  7864                                  ;
  7865                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  7866                                  ;
  7867                                  ;	Return a pointer to interesting DOS variables This call is version
  7868                                  ;	dependent and is subject to change without notice in future versions.
  7869                                  ;	Use at risk.
  7870                                  ;
  7871                                  ;	ENTRY	none
  7872                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  7873                                  ;	uses	ALL
  7874                                  ;
  7875                                  ;----------------------------------------------------------------------------
  7876                                  ;
  7877                                  
  7878                                  _$GET_IN_VARS:
  7879 00001D16 E8F2F8                          CALL	Get_User_Stack
  7880                                          ;MOV	WORD [SI+2],SYSINITVAR
  7881                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  7882 00001D19 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  7883                                          ;MOV	[SI+10H],SS
  7884 00001D1E 8C5410                  	MOV	[SI+user_env.user_ES],SS
  7885 00001D21 C3                      	RETN
  7886                                  
  7887                                  ;
  7888                                  ;----------------------------------------------------------------------------
  7889                                  ;
  7890                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  7891                                  ;
  7892                                  ;	Return pointer to drive parameter table for default drive
  7893                                  ;
  7894                                  ;	ENTRY	none
  7895                                  ;	EXIT	(ds:bx) = DPB address
  7896                                  ;	USES	all
  7897                                  ;
  7898                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  7899                                  ;
  7900                                  ;	Return pointer to a specified drive parameter table
  7901                                  ;
  7902                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  7903                                  ;	EXIT	(al) = 0 iff ok
  7904                                  ;		  (ds:bx) = DPB address
  7905                                  ;		(al) = -1 if bad drive
  7906                                  ;	USES	all
  7907                                  ;
  7908                                  ;----------------------------------------------------------------------------
  7909                                  ;
  7910                                  
  7911                                  _$GET_DEFAULT_DPB:
  7912 00001D22 B200                    	MOV	DL,0
  7913                                  _$GET_DPB:
  7914 00001D24 16                      	push	ss
  7915 00001D25 1F                      	pop	ds
  7916                                  
  7917 00001D26 88D0                    	MOV	AL,DL
  7918 00001D28 E84A4C                  	call	GETTHISDRV		; Get CDS structure
  7919 00001D2B 7223                    	JC	short ISNODRV 		; no valid drive
  7920 00001D2D C43E[3A05]              	LES	DI,[THISCDS]		; check for net CDS
  7921                                  	;test	word [es:di+43h],8000h
  7922 00001D31 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
  7923 00001D37 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  7924 00001D39 E83003                  	call	EcritDisk
  7925 00001D3C E8803E                  	call	FATREAD_CDS		; Force Media Check and return DPB
  7926 00001D3F E83203                  	call	LcritDisk
  7927 00001D42 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  7928                                  					;   have.
  7929 00001D44 E8C4F8                  	call	Get_User_Stack
  7930                                  	;mov	[si+2],bp
  7931                                  	;mov	[si+0Eh],es
  7932 00001D47 896C02                  	MOV	[SI+user_env.user_BX],BP
  7933 00001D4A 8C440E                  	MOV	[SI+user_env.user_DS],ES
  7934 00001D4D 30C0                    	XOR	AL,AL
  7935 00001D4F C3                      	retn
  7936                                  ISNODRV:
  7937 00001D50 B0FF                    	MOV	AL,-1
  7938 00001D52 C3                      	retn
  7939                                  
  7940                                  ;
  7941                                  ;----------------------------------------------------------------------------
  7942                                  ;
  7943                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  7944                                  ;
  7945                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  7946                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  7947                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  7948                                  ;
  7949                                  ;	ENTRY	none
  7950                                  ;	EXIT	none
  7951                                  ;	USES	all
  7952                                  ;
  7953                                  ;----------------------------------------------------------------------------
  7954                                  ;
  7955                                  
  7956                                  _$DISK_RESET:
  7957 00001D53 16                      	push	ss
  7958 00001D54 1F                      	pop	ds
  7959 00001D55 B0FF                    	MOV	AL,-1
  7960 00001D57 E81203                  	call	EcritDisk
  7961                                  	; MSDOS 6.0
  7962                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  7963 00001D5A E8D441                  	call	FLUSHBUF
  7964                                  	; MSDOS 6.0
  7965                                  	;AND	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  7966                                  	;mov	word [SC_STATUS],0	; Throw out secondary cache M041
  7967                                  ;
  7968                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate.  This
  7969                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  7970                                  ; let's do it.
  7971                                  ;
  7972                                  ; Invalidate 'last-buffer' used
  7973                                  ;
  7974 00001D5D BBFFFF                  	MOV	BX,-1
  7975 00001D60 891E[2000]              	MOV	[LastBuffer+2],BX
  7976 00001D64 891E[1E00]              	MOV	[LastBuffer],BX
  7977                                  
  7978                                  	; MSDOS 3.3 
  7979                                  	; IBMDOS.COM, Offset 1C66h
  7980                                  	;;;;
  7981 00001D68 C536[3800]              	lds     si,[BUFFHEAD]
  7982 00001D6C B8FF20                  	mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  7983                                  				; .buf_flags, AH = 0, reset/clear
  7984                                  DRST_1:
  7985                                  	;mov	[si+4],ax
  7986 00001D6F 894404                  	mov	[si+BUFFINFO.buf_ID],ax
  7987 00001D72 C534                    	lds	si,[SI]
  7988 00001D74 39DE                    	cmp	si,bx ; -1
  7989 00001D76 7409                    	je	short DRST_2
  7990                                  	;mov	[si+4],ax
  7991 00001D78 894404                  	mov	[si+BUFFINFO.buf_ID],ax
  7992 00001D7B C534                    	lds	si,[SI]
  7993 00001D7D 39DE                    	cmp	si,bx
  7994 00001D7F 75EE                    	jne	short DRST_1
  7995                                  	;;;;
  7996                                  DRST_2:
  7997 00001D81 E8F002                  	call	LcritDisk
  7998                                  
  7999                                  	; 20/05/2019
  8000                                  	;MOV	AX,-1
  8001                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8002                                  	;mov	ax,0FFFFh
  8003                                  
  8004 00001D84 B82011                  	mov     ax,1120h
  8005 00001D87 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8006                                  			; DS = DOS CS
  8007                                  			; Return: CF clear (successful)
  8008 00001D89 C3                      	retn
  8009                                  
  8010                                  	; 19/07/2018 - Retro DOS v3.0
  8011                                  
  8012                                  ;
  8013                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8014                                  ;
  8015                                  ;----------------------------------------------------------------------------
  8016                                  ;
  8017                                  ;**	$SetDPB - Create a DPB
  8018                                  ;
  8019                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8020                                  ;
  8021                                  ;	ENTRY	ES:BP Points to DPB
  8022                                  ;		DS:SI Points to BPB
  8023                                  ;	EXIT	DPB setup
  8024                                  ;	USES	ALL but BP, DS, ES
  8025                                  ;
  8026                                  ;----------------------------------------------------------------------------
  8027                                  ;
  8028                                  
  8029                                  ; MSDOS 6.0
  8030 00001D8A 0300                    word3:	dw	3			; M008 -- word value for divides
  8031                                  
  8032                                  ;procedure   $SETDPB,NEAR
  8033                                  
  8034                                  _$SETDPB:
  8035 00001D8C 89EF                    	MOV	DI,BP
  8036 00001D8E 83C702                  	ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8037 00001D91 AD                      	LODSW
  8038 00001D92 AB                      	STOSW				; dpb_sector_size
  8039                                  	; MSDOS 6.0
  8040 00001D93 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8041 00001D97 7507                    	JNZ	short yesfat			     ; yes		;AN000;
  8042 00001D99 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8043 00001D9E EB50                    	JMP	short setend			     ; NO		;AN000;
  8044                                  yesfat: ; 10/08/2018
  8045 00001DA0 89C2                    	MOV	DX,AX
  8046 00001DA2 AC                      	LODSB
  8047 00001DA3 FEC8                    	DEC	AL
  8048 00001DA5 AA                      	STOSB				; dpb_cluster_mask
  8049 00001DA6 FEC0                    	INC	AL
  8050 00001DA8 30E4                    	XOR	AH,AH
  8051                                  LOG2LOOP:
  8052 00001DAA A801                    	test	AL,1
  8053 00001DAC 7506                    	JNZ	short SAVLOG
  8054 00001DAE FEC4                    	INC	AH
  8055 00001DB0 D0E8                    	SHR	AL,1
  8056 00001DB2 EBF6                    	JMP	SHORT LOG2LOOP
  8057                                  SAVLOG:
  8058 00001DB4 88E0                    	MOV	AL,AH
  8059 00001DB6 AA                      	STOSB				; dpb_cluster_shift
  8060 00001DB7 88C3                    	MOV	BL,AL
  8061 00001DB9 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8062 00001DBA AC                      	LODSB
  8063 00001DBB AA                      	STOSB				; dpb_FAT_count Number of FATs
  8064                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8065                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8066 00001DBC 88C7                    	MOV	BH,AL
  8067 00001DBE AD                      	LODSW
  8068 00001DBF AB                      	STOSW				; dpb_root_entries Number of directory entries
  8069 00001DC0 B105                    	MOV	CL,5
  8070 00001DC2 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8071 00001DC4 48                      	DEC	AX
  8072 00001DC5 01D0                    	ADD	AX,DX			; Cause Round Up
  8073 00001DC7 89D1                    	MOV	CX,DX
  8074 00001DC9 31D2                    	XOR	DX,DX
  8075 00001DCB F7F1                    	DIV	CX
  8076 00001DCD 89C1                    	MOV	CX,AX			; Number of directory sectors
  8077 00001DCF 47                      	INC	DI
  8078 00001DD0 47                      	INC	DI			; Skip dpb_first_sector
  8079 00001DD1 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8080 00001DD2 AC                      	LODSB
  8081                                  	;mov	[es:bp+16h],al
  8082 00001DD3 26884616                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8083 00001DD7 AD                      	LODSW				; Number of sectors in a FAT
  8084                                  	;;;
  8085                                  	;MSDOS 6.0
  8086                                  	;
  8087                                  	;STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8088                                  	;MOV	DL,BH			;AN000;;>32mb
  8089                                  	;XOR	DH,DH			;AN000;;>32mb
  8090                                  	;MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8091                                  	
  8092                                  	;MSDOS 3.3
  8093                                  	;
  8094 00001DD8 AA                      	STOSB		; DPB.FAT_SIZE
  8095 00001DD9 F6E7                    	MUL	BH
  8096                                  	;;;
  8097                                  	;add	ax,[es:bp+6]
  8098 00001DDB 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8099 00001DDF AB                      	STOSW				; dpb_dir_sector
  8100 00001DE0 01C8                    	ADD	AX,CX			; Add number of directory sectors
  8101                                  	;mov	[es:bp+0Bh],ax
  8102 00001DE2 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8103                                  	
  8104                                  	; MSDOS 6.0
  8105 00001DE6 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8106                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8107                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8108                                  	;XOR	CH,CH			;F.C. >32mb				;AN000;
  8109                                  	;MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8110                                  	;MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8111                                  	;SUB	BX,AX			;AN000;;F.C. >32mb
  8112                                  	;SBB	DX,0			;AN000;;F.C. >32mb
  8113                                  	;OR	CX,CX			;AN000;;F.C. >32mb
  8114                                  	;JZ	short norot		;AN000;;F.C. >32mb
  8115                                  ;rott:					;AN000;;F.C. >32mb
  8116                                  	;CLC				;AN000;;F.C. >32mb
  8117                                  	;RCR	DX,1			;AN000;;F.C. >32mb
  8118                                  	;RCR	BX,1			;AN000;;F.C. >32mb
  8119                                  	;LOOP	rott			;AN000;;F.C. >32mb
  8120                                  ;norot:					;AN000;
  8121                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8122                                  	;JMP	short setend		;AN000;;F.C. >32mb
  8123                                  normal_dpb:
  8124                                  	;sub	ax,[es:bp+0Dh]
  8125 00001DE8 262B460D                	SUB	AX,[ES:BP+DSKSIZ]
  8126 00001DEC F7D8                    	NEG	AX			; Sectors in data area
  8127                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8128 00001DEE D3E8                    	SHR	AX,CL			; Div by sectors/cluster
  8129                                  setend:
  8130                                  
  8131                                  ;	M008 - CAS
  8132                                  ;
  8133 00001DF0 40                      	INC	AX			; +2 (reserved), -1 (count -> max)
  8134                                  ;
  8135                                  ;	There has been a bug in our fatsize calculation for so long
  8136                                  ;	  that we can't correct it now without causing some user to
  8137                                  ;	  experience data loss. There are even cases where allowing
  8138                                  ;	  the number of clusters to exceed the fats is the optimal
  8139                                  ;	  case -- where adding 2 more fat sectors would make the
  8140                                  ;	  data field smaller so that there's nothing to use the extra
  8141                                  ;	  fat sectors for.
  8142                                  ;
  8143                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8144                                  ;	  still report that there was a cluster left when the disk was
  8145                                  ;	  actually full. Very graceful failure for a corrupt system
  8146                                  ;	  configuration. There may be worse cases that were never
  8147                                  ;	  properly traced back to this bug. The problem cases only
  8148                                  ;	  occurred when partition sizes were very near FAT sector
  8149                                  ;	  rounding boundaries, which were rare cases.
  8150                                  ;
  8151                                  ;	Also, it's possible that some third-party partition program might
  8152                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8153                                  ;	  scheme. In this hypothetical case, the number of allocation
  8154                                  ;	  clusters which don't actually have FAT entries to represent
  8155                                  ;	  them might be larger and might create a more catastrophic
  8156                                  ;	  failure. So we'll provide the safeguard of limiting the
  8157                                  ;	  max_cluster to the amount that will fit in the FATs.
  8158                                  ;
  8159                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8160                                  
  8161                                  ;	make sure the number of fat sectors is actually enough to
  8162                                  ;	  hold that many clusters. otherwise, back the number of
  8163                                  ;	  clusters down
  8164                                  
  8165                                  	; 19/07/2018 - Retro DOS v3.0
  8166                                  	; MSDOS 6.0
  8167 00001DF1 89C3                    	mov	bx,ax			; remember calculated # clusters
  8168                                  	;;mov	ax,[ES:BP+0Fh]
  8169                                  	;mov	ax,[ES:BP+DPB.FAT_SIZE]
  8170                                  	; 01/08/2018 (MSDOS 3.3)
  8171 00001DF3 268A460F                	mov	al,[ES:BP+DPB.FAT_SIZE]
  8172 00001DF7 30E4                    	xor	ah,ah 	
  8173 00001DF9 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8174 00001DFD 81FBF60F                	cmp	bx,4096-10		; test for 12 vs. 16 bit fat
  8175 00001E01 720D                    	jb	short setend_fat12
  8176 00001E03 D1EA                    	shr	dx,1
  8177                                  ;cs3 7/2/92
  8178 00001E05 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8179                                  ;					; than enough for the maximum FAT,
  8180                                  ;					; so go ahead and use the calculated
  8181                                  ;					; number of clusters.
  8182                                  ;cs3 7/2/92
  8183                                  
  8184 00001E07 D1D8                    	rcr	ax,1			; find number of entries
  8185 00001E09 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8186                                  ;					;  into 12-bit fatland?
  8187 00001E0C 7215                    	jb	short setend_faterr	; then go ahead and let the
  8188                                  ;					;  inconsistency pass through
  8189                                  ;					;  rather than lose data by
  8190                                  ;					;  correcting the fat type
  8191 00001E0E EB0E                    	jmp	short setend_fat16
  8192                                  
  8193                                  setend_fat12:
  8194 00001E10 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8195 00001E12 11D2                    	adc	dx,dx
  8196                                  ;cs3 7/2/92
  8197 00001E14 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8198 00001E17 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8199                                  ;					; here.  Check for it and use
  8200                                  ;					; the calcuated size in this case.
  8201                                  ;cs3 7/2/92
  8202 00001E19 2EF736[8A1D]            	div	word [cs:word3]
  8203                                  
  8204                                  setend_fat16:
  8205 00001E1E 48                      	dec	ax			; limit at 1
  8206 00001E1F 39D8                    	cmp	ax,bx			; is fat big enough?
  8207 00001E21 7602                    	jbe	short setend_fat	; use max value that'll fit
  8208                                  
  8209                                  setend_faterr:
  8210 00001E23 89D8                    	mov	ax,bx			; use calculated value
  8211                                  
  8212                                  setend_fat:
  8213                                  
  8214                                  ;	now ax = maximum legal cluster
  8215                                  
  8216                                  ;	end M008
  8217                                  
  8218                                  	;mov	[es:bp+0Dh], ax
  8219 00001E25 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8220                                  	;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8221 00001E29 26C7461C0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8222                                  					; Init so first ALLOC starts at
  8223                                  					; begining of FAT
  8224                                  	;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8225 00001E2F 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8226                                  
  8227 00001E35 C3                      	retn
  8228                                  
  8229                                  ;EndProc $SETDPB
  8230                                  
  8231                                  
  8232                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8233                                  
  8234                                  ;
  8235                                  ;----------------------------------------------------------------------------
  8236                                  ;
  8237                                  ;**	$Dup_PDB
  8238                                  ;
  8239                                  ; Inputs:   DX is new segment address of process
  8240                                  ;	    SI is end of new allocation block
  8241                                  ;
  8242                                  ;----------------------------------------------------------------------------
  8243                                  ;
  8244                                  
  8245                                  _$DUP_PDB:
  8246                                  
  8247                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8248                                  ;hkn;	Must set up ds in order to access CreatePDB. Also SS is 
  8249                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8250                                  
  8251 00001E36 2EC606[5003]FF          	MOV	byte [CS:CreatePDB],0FFH  ; indicate a new process
  8252 00001E3C 2E8E1E[DE02]            	MOV	DS,[CS:CurrentPDB]
  8253 00001E41 56                      	PUSH	SI
  8254 00001E42 EB0A                    	JMP	SHORT CreateCopy
  8255                                  
  8256                                  ;
  8257                                  ;----------------------------------------------------------------------------
  8258                                  ;
  8259                                  ; Inputs:
  8260                                  ;	DX = Segment number of new base
  8261                                  ; Function:
  8262                                  ;	Set up program base and copy term and ^C from int area
  8263                                  ; Returns:
  8264                                  ;	None
  8265                                  ; Called at DOS init
  8266                                  ;
  8267                                  ;----------------------------------------------------------------------------
  8268                                  ;
  8269                                  
  8270                                  _$CREATE_PROCESS_DATA_BLOCK:
  8271                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8272 00001E44 E8C4F7                  	CALL	Get_User_Stack
  8273                                  	;mov	ds,[si+14h]
  8274 00001E47 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8275                                  	;push	word [2]
  8276 00001E4A FF360200                	PUSH	word [PDB.BLOCK_LEN]
  8277                                  CreateCopy:
  8278 00001E4E 8EC2                    	MOV	ES,DX
  8279                                  
  8280 00001E50 31F6                    	XOR	SI,SI			; copy entire PDB
  8281 00001E52 89F7                    	MOV	DI,SI
  8282 00001E54 B98000                  	MOV	CX,80H
  8283 00001E57 F3A5                    	REP	MOVSW
  8284                                  
  8285                                  ; DOS 3.3 7/9/86
  8286                                  
  8287                                  	;mov	cx,20
  8288                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8289 00001E59 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8290                                  	;mov	di,18h
  8291 00001E5B BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8292 00001E5E 1E                      	PUSH	DS
  8293                                  	;lds	si,[34h]
  8294 00001E5F C5363400                	LDS	SI,[PDB.JFN_Pointer]
  8295 00001E63 F3A4                    	REP	MOVSB
  8296 00001E65 1F                      	POP	DS
  8297                                  
  8298                                  ; DOS 3.3 7/9/86
  8299                                  
  8300                                  	;test	byte [cs:CreatePDB],0FFh
  8301 00001E66 2E803E[5003]00          	cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8302 00001E6C 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8303                                  ;
  8304                                  ; Here we set up for a new process...
  8305                                  ;
  8306                                  
  8307 00001E6E 0E                      	PUSH    CS                      ; Called at DOSINIT time, NO SS
  8308 00001E6F 1F                      	POP     DS
  8309                                  
  8310 00001E70 31DB                    	XOR	BX,BX			; dup all jfns
  8311                                  	;mov	cx,20
  8312                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8313 00001E72 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8314                                  
  8315                                  Create_dup_jfn:
  8316 00001E74 06                      	PUSH	ES			; save new PDB
  8317 00001E75 E88849                  	call	SFFromHandle		; get sf pointer
  8318 00001E78 B0FF                    	MOV	AL,-1			; unassigned JFN
  8319 00001E7A 7225                    	JC	short CreateStash	; file was not really open
  8320                                  	;test	word [es:di+5],1000h
  8321 00001E7C 26F745050010            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8322 00001E82 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8323                                  ;
  8324                                  ; We do not inherit network file handles.
  8325                                  ;
  8326                                  	;mov	ah,[es:di+2]
  8327 00001E84 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8328                                  	;and	ah,0F0h
  8329 00001E88 80E4F0                  	AND	AH,SHARING_MASK
  8330                                  	;cmp	ah,70h
  8331 00001E8B 80FC70                  	CMP	AH,SHARING_NET_FCB
  8332 00001E8E 7411                    	jz	short CreateStash
  8333                                  ;
  8334                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8335                                  ; duplication operation.
  8336                                  ;
  8337 00001E90 893E[3605]              	MOV	[THISSFT],DI
  8338 00001E94 8C06[3805]              	MOV	[THISSFT+2],ES
  8339 00001E98 E84018                  	call	DOS_DUP 		; signal duplication
  8340                                  ;
  8341                                  ; get the old sfn for copy
  8342                                  ;
  8343 00001E9B E84A49                  	call	pJFNFromHandle		; ES:DI is jfn
  8344 00001E9E 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8345                                  ;
  8346                                  ; Take AL (old sfn or -1) and stash it into the new position
  8347                                  ;
  8348                                  CreateStash:
  8349 00001EA1 07                      	POP	ES
  8350                                  	;mov	[es:bx+18h],al
  8351 00001EA2 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8352 00001EA6 43                      	INC	BX			; next jfn...
  8353 00001EA7 E2CB                    	LOOP	Create_dup_jfn
  8354                                  
  8355 00001EA9 8B1E[DE02]              	MOV	BX,[CurrentPDB]		; get current process
  8356                                  	;mov	[es:bx+16h]
  8357 00001EAD 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8358 00001EB2 8C06[DE02]              	MOV	[CurrentPDB],ES
  8359 00001EB6 8EDB                    	MOV	DS,BX
  8360                                  ;
  8361                                  ; end of new process create
  8362                                  ;
  8363                                  Create_PDB_cont:
  8364 00001EB8 2EC606[5003]00          	MOV     BYTE [CS:CreatePDB],0	; reset flag
  8365 00001EBE 58                      	POP	AX
  8366                                  
  8367                                  	;entry	SETMEM
  8368                                  
  8369                                  ;---------------------------------------------------------------------------
  8370                                  ; Inputs:
  8371                                  ;	AX = Size of memory in paragraphs
  8372                                  ;	DX = Segment
  8373                                  ; Function:
  8374                                  ;	Completely prepares a program base at the
  8375                                  ;	specified segment.
  8376                                  ; Called at DOS init
  8377                                  ; Outputs:
  8378                                  ;	DS = DX
  8379                                  ;	ES = DX
  8380                                  ;	[0] has INT int_abort
  8381                                  ;	[2] = First unavailable segment
  8382                                  ;	[5] to [9] form a long call to the entry point
  8383                                  ;	[10] to [13] have exit address (from int_terminate)
  8384                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8385                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8386                                  ; DX,BP unchanged. All other registers destroyed.
  8387                                  ;---------------------------------------------------------------------------
  8388                                  
  8389                                  SETMEM:
  8390 00001EBF 31C9                    	XOR	CX,CX
  8391 00001EC1 8ED9                    	MOV	DS,CX
  8392 00001EC3 8EC2                    	MOV	ES,DX
  8393                                  	;mov	si,88h
  8394 00001EC5 BE8800                  	MOV	SI,addr_int_terminate
  8395                                  	;mov	di,10
  8396 00001EC8 BF0A00                  	MOV	DI,SAVEXIT
  8397                                  	;MOV	CX,6
  8398 00001ECB B106                    	mov	cl,6 ; 06/07/2019
  8399 00001ECD F3A5                    	REP	MOVSW
  8400 00001ECF 26A30200                	MOV	[ES:2],AX
  8401 00001ED3 29D0                    	SUB	AX,DX
  8402 00001ED5 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8403 00001ED8 7603                    	JBE	short HAVDIF
  8404 00001EDA B8FF0F                  	MOV	AX,MAXDIF
  8405                                  HAVDIF:
  8406 00001EDD 83E810                  	SUB	AX,10H			; Allow for 100h byte "stack"
  8407 00001EE0 BB0C00                  	MOV	BX,ENTRYPOINTSEG	;	in .COM files
  8408 00001EE3 29C3                    	SUB	BX,AX
  8409 00001EE5 B104                    	MOV	CL,4
  8410 00001EE7 D3E0                    	SHL	AX,CL
  8411 00001EE9 8EDA                    	MOV	DS,DX
  8412                                  
  8413                                  	; (MSDOS 6.0 note)
  8414                                  	;
  8415                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8416                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8417                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8418                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8419                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8420                                  	; making this equvalnce valid for this particular case. If however
  8421                                  	; there is less than 64K remaining the address in BX:AX will not 
  8422                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8423                                  	; into the PSP.
  8424                                  	;
  8425                                  	; Therefore for the case where there is less than 64K remaining in 
  8426                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8427                                  	; requirements will not work. Call 5, however will continue to work
  8428                                  	; for all cases.
  8429                                  	;
  8430                                  
  8431                                  	;mov	[6],ax
  8432                                  	;mov	[8],bx
  8433                                  
  8434 00001EEB A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8435 00001EEE 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8436                                  
  8437                                  	;cmp	ax,WRAPOFFSET		; Q: does the system have >= 64k of
  8438                                  	;				;    memory left
  8439                                  	;je	short addr_ok		; Y: the above calculated address is
  8440                                  	;				;    OK
  8441                                  	;				; N: 
  8442                                  
  8443                                  	;MOV	WORD [PDB.CPM_CALL+1],0c0h
  8444                                  	;MOV	WORD [PDB.CPM_CALL+3],0
  8445                                  
  8446                                  ;addr_ok:
  8447                                  
  8448                                  	;mov	word [0],20CDh
  8449 00001EF2 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8450                                  	;mov	byte [5],9Ah
  8451 00001EF8 C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8452                                  	;mov	word [50h],21CDh
  8453 00001EFD C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8454                                  	;mov	byte [52h],0CBh
  8455 00001F03 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8456                                  	;mov	word [34h],18h
  8457 00001F08 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8458                                  	;mov	word [36h],ds
  8459 00001F0E 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8460                                  	;mov	word [32h],20
  8461 00001F12 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8462                                  ;
  8463                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8464                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8465                                  ; particular SFT.  We perform this by requiring that the server link together
  8466                                  ; for us all sub-PDB's that he creates.  The requirement for us, now, is to
  8467                                  ; initialize this pointer.
  8468                                  ;
  8469                                   	;mov	word [38h],-1
  8470 00001F18 C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8471                                  	;mov	word [3Ah],-1
  8472 00001F1E C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8473                                  
  8474                                  			; Set the real version number in the PSP - 5.00
  8475                                  	;mov	[ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8476                                  
  8477 00001F24 C3                      	retn
  8478                                  
  8479                                  ;============================================================================
  8480                                  ; IBMDOS.COM (MSDOS 3.3 KERNEL), 1987 - Offset 1DE6h
  8481                                  ;============================================================================
  8482                                  ; 19/07/2018 - Retro DOS v3.0
  8483                                  
  8484                                  FETCHI_CHECK:
  8485 00001F25 9C                      	pushf
  8486 00001F26 2E813E[8F0F]7258        	cmp	word [cs:FETCHI_TAG], 5872h
  8487 00001F2D 7403                    	jz      short FETCHI_CHK_RETN
  8488 00001F2F E84F54                  	call    DOSINIT
  8489                                  FETCHI_CHK_RETN:
  8490 00001F32 9D                      	popf
  8491 00001F33 C3                      	retn
  8492                                  
  8493                                  ;============================================================================
  8494                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8495                                  ;============================================================================
  8496                                  ; 20/07/2018 - Retro DOS v3.0
  8497                                  
  8498                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8499                                  ;----------------------------------------------------------------------------
  8500                                  ;
  8501                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8502                                  ;		Strings of different lengths don't match.
  8503                                  ;   Inputs:	DS:SI - pointer to source string  ES:DI - pointer to dest string
  8504                                  ;   Outputs:	Z if strings same, NZ if different
  8505                                  ;   Registers modified: NONE
  8506                                  ;----------------------------------------------------------------------------
  8507                                  
  8508                                  StrCmp:
  8509 00001F34 56                      	push	si
  8510 00001F35 57                      	push	di
  8511 00001F36 50                      	push	ax
  8512                                  
  8513                                  Cmplp:
  8514 00001F37 AC                      	LODSB
  8515 00001F38 E8D536                  	call	UCase			; convert to upper case
  8516 00001F3B E80E37                  	call	PATHCHRCMP		; convert / to 	MOV	AH,AL
  8518 00001F3E 268A05                  	MOV	AL,[ES:DI]
  8519 00001F41 47                      	INC	DI
  8520 00001F42 E8CB36                  	call	UCase			; convert to upper case
  8521 00001F45 E80437                  	call	PATHCHRCMP		; convert / to 	CMP	AH,AL
  8523 00001F48 7504                    	JNZ	short PopRet		; Strings dif
  8524                                  Tend:
  8525 00001F4A 08C0                    	OR	AL,AL
  8526 00001F4C 75E9                    	JNZ	short Cmplp		; More string
  8527                                  PopRet:
  8528 00001F4E 58                      	pop	ax
  8529 00001F4F 5F                      	pop	di
  8530 00001F50 5E                      	pop	si
  8531 00001F51 C3                      	retn
  8532                                  
  8533                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8534                                  ;----------------------------------------------------------------------------
  8535                                  ;
  8536                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8537                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI.  no modification of
  8538                                  ;	characters.
  8539                                  ;
  8540                                  ;   Inputs:	DS:SI - pointer to source string
  8541                                  ;		ES:DI - pointer to destination string
  8542                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8543                                  ;		DS:SI point byte after nul byte at end of source string
  8544                                  ;   Registers modified: SI,DI
  8545                                  ;----------------------------------------------------------------------------
  8546                                  
  8547                                  StrCpy:
  8548 00001F52 50                      	push	ax
  8549                                  CPYLoop:
  8550 00001F53 AC                      	LODSB
  8551 00001F54 E8B936                  	call	UCase			; convert to upper case
  8552 00001F57 E8F236                  	call	PATHCHRCMP		; convert / to \ ;
  8553 00001F5A AA                      	STOSB
  8554                                  Tend2:
  8555 00001F5B 08C0                    	OR	AL,AL
  8556 00001F5D 75F4                    	JNZ	short CPYLoop
  8557 00001F5F 58                      	pop	ax
  8558 00001F60 C3                      	retn
  8559                                  
  8560                                  ;----------------------------------------------------------------------------
  8561                                  ; Procedure Name : FStrCpy
  8562                                  ;----------------------------------------------------------------------------
  8563                                  
  8564                                  FStrCpy:
  8565 00001F61 50                      	push	ax
  8566                                  FCPYLoop:
  8567 00001F62 AC                      	LODSB
  8568 00001F63 AA                      	STOSB
  8569 00001F64 08C0                    	OR	AL,AL
  8570 00001F66 75FA                    	JNZ	short FCPYLoop
  8571 00001F68 58                      	pop	ax
  8572 00001F69 C3                      	retn
  8573                                  
  8574                                  ; 20/07/2018 - Retro DOS v3.0
  8575                                  ;----------------------------------------------------------------------------
  8576                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8577                                  ;----------------------------------------------------------------------------
  8578                                  ;
  8579                                  ;UCase:	
  8580                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8581                                  ;	retn
  8582                                  
  8583                                  ;Break <StrLen - compute length of string ES:DI>
  8584                                  ;----------------------------------------------------------------------------
  8585                                  ;**	StrLen - Compute Length of String
  8586                                  ;
  8587                                  ;	StrLen computes the length of a string, including the trailing 00
  8588                                  ;
  8589                                  ;	ENTRY	(es:di) = address of string
  8590                                  ;	EXIT	(cx) = size of string
  8591                                  ;	USES	cx, flags
  8592                                  ;----------------------------------------------------------------------------
  8593                                  
  8594                                  StrLen:
  8595 00001F6A 57                      	push	di
  8596 00001F6B 50                      	push	ax
  8597                                  	;MOV	CX,-1
  8598 00001F6C B9FFFF                  	mov	cx,65535
  8599 00001F6F 30C0                    	XOR	AL,AL
  8600 00001F71 F2AE                    	REPNE	SCASB
  8601 00001F73 F7D1                    	NOT	CX
  8602 00001F75 58                      	pop	ax
  8603 00001F76 5F                      	pop	di
  8604 00001F77 C3                      	retn
  8605                                  
  8606                                  ;----------------------------------------------------------------------------
  8607                                  ;**	DStrLen - Compute Length of String
  8608                                  ;
  8609                                  ;	ENTRY	(ds:si) = address of string
  8610                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8611                                  ;	USES	cx, flags
  8612                                  ;----------------------------------------------------------------------------
  8613                                  
  8614                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8615 00001F78 E80700                  	CALL	XCHGP
  8616 00001F7B E8ECFF                  	CALL	StrLen
  8617 00001F7E E80100                  	CALL	XCHGP
  8618 00001F81 C3                      	retn
  8619                                  
  8620                                  ;----------------------------------------------------------------------------
  8621                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8622                                  ;
  8623                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8624                                  ;
  8625                                  ;	ENTRY	none
  8626                                  ;	EXIT	pairs exchanged
  8627                                  ;	USES	SI, DI, DS, ES
  8628                                  ;----------------------------------------------------------------------------
  8629                                  
  8630                                  XCHGP:
  8631 00001F82 1E                      	push	ds
  8632 00001F83 06                      	push	es
  8633 00001F84 1F                      	pop	ds
  8634 00001F85 07                      	pop	es
  8635 00001F86 87F7                    	XCHG	SI,DI
  8636                                  xchgp_retn:
  8637 00001F88 C3                      	retn
  8638                                  
  8639                                  ;Break	<Idle - wait for a specified amount of time>
  8640                                  ;----------------------------------------------------------------------------
  8641                                  ;
  8642                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  8643                                  ;   	   we spin until RetryLoop is exhausted.
  8644                                  ;
  8645                                  ;   Inputs:	RetryLoop is the number of times we spin
  8646                                  ;   Outputs:	Wait
  8647                                  ;   Registers modified: none
  8648                                  ;----------------------------------------------------------------------------
  8649                                  
  8650                                  Idle:
  8651                                  	;test	byte [SS:FSHARING],0FFh
  8652 00001F89 36803E[0D05]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  8653                                  	;retnz
  8654 00001F8F 75F7                    	jnz	short xchgp_retn
  8655                                  	;SAVE	<CX>
  8656 00001F91 51                      	push	cx
  8657 00001F92 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  8658 00001F97 E308                    	JCXZ	Idle3
  8659                                  Idle1:	
  8660 00001F99 51                      	PUSH	CX
  8661 00001F9A 31C9                    	XOR	CX,CX
  8662                                  Idle2:	
  8663 00001F9C E2FE                    	LOOP	Idle2
  8664 00001F9E 59                      	POP	CX
  8665 00001F9F E2F8                    	LOOP	Idle1
  8666                                  Idle3:	
  8667                                  	;RESTORE <CX>
  8668 00001FA1 59                      	pop	cx
  8669 00001FA2 C3                      	retn
  8670                                  
  8671                                  ;Break	<TableDispatch - dispatch to a table>
  8672                                  ;----------------------------------------------------------------------------
  8673                                  ;
  8674                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  8675                                  ;   routine.  Preserve all input registers to the routine.
  8676                                  ;
  8677                                  ;   Inputs:	Push	return address
  8678                                  ;		Push	Table address
  8679                                  ;		Push	index (byte)
  8680                                  ;   Outputs:	appropriate routine gets jumped to.
  8681                                  ;		return indicates invalid index
  8682                                  ;   Registers modified: none.
  8683                                  ;----------------------------------------------------------------------------
  8684                                  
  8685                                  struc TFrame	 ; TableFrame
  8686 00000000 ????                    .OldBP:	 resw 1  ; 0
  8687 00000002 ????                    .OldRet: resw 1  ; 2
  8688 00000004 ??                      .Index:	 resb 1  ; 4
  8689 00000005 ??                      .Pad:	 resb 1  ; 5  
  8690 00000006 ????                    .Tab:	 resw 1  ; 6
  8691 00000008 ????                    .NewRet: resw 1  ; 8
  8692                                  endstruc
  8693                                  
  8694                                  TableDispatch:
  8695 00001FA3 55                      	PUSH	BP
  8696 00001FA4 89E5                    	MOV	BP,SP
  8697 00001FA6 53                      	PUSH	BX			; save BX
  8698                                  	;mov	bx,[bp+6]
  8699 00001FA7 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  8700 00001FAA 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  8701                                  	;cmp	[bp+4],bl
  8702 00001FAD 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  8703 00001FB0 7317                    	JAE	short TableError	; yes
  8704                                  	;mov	bl,[bp+4]
  8705 00001FB2 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  8706 00001FB5 30FF                    	XOR	BH,BH			; convert to word
  8707 00001FB7 D1E3                    	SHL	BX,1			; convert to word pointer
  8708 00001FB9 43                      	INC	BX			; point past first length byte
  8709                                  	; 17/08/2018
  8710                                  	;add	bx,[bp+6]
  8711 00001FBA 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  8712 00001FBD 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  8713                                  	;mov	[bp+6],bx
  8714 00001FC0 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  8715 00001FC3 5B                      	POP	BX			; restore BX
  8716 00001FC4 5D                      	POP	BP			; restore BP
  8717 00001FC5 83C404                  	ADD	SP,4			; clean off Index and our return addr
  8718 00001FC8 C3                      	retn				; do operation
  8719                                  TableError:
  8720 00001FC9 5B                      	POP	BX			; restore BX
  8721 00001FCA 5D                      	POP	BP			; restore BP
  8722 00001FCB C20600                  	RETN	6			; clean off Index, Table and RetAddr
  8723                                  
  8724                                  
  8725                                  ;Break	<TestNet - determine if a CDS is for the network>
  8726                                  ;----------------------------------------------------------------------------
  8727                                  ;
  8728                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  8729                                  ;	network CDS.  This will handle NULL cds also.
  8730                                  ;
  8731                                  ;   Inputs:	ThisCDS points to CDS or NULL
  8732                                  ;   Outputs:	ES:DI = ThisCDS
  8733                                  ;		carry Set => network
  8734                                  ;		carry Clear => local
  8735                                  ;   Registers modified: none.
  8736                                  ;----------------------------------------------------------------------------
  8737                                  
  8738                                  TestNet:
  8739 00001FCE 2EC43E[3A05]            	LES	DI,[CS:THISCDS]
  8740 00001FD3 83FFFF                  	CMP	DI,-1
  8741 00001FD6 7409                    	JZ	short CMCRet		; UNC? carry is clear
  8742                                  	;test	word [es:di+43h],8000h
  8743 00001FD8 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
  8744 00001FDE 7501                    	JNZ	short CMCRet		; jump has carry clear
  8745 00001FE0 C3                      	retn				; carry is clear
  8746                                  CMCRet: 
  8747 00001FE1 F5                      	CMC
  8748 00001FE2 C3                      	retn
  8749                                  
  8750                                  ;Break	<IsSFTNet - see if an sft is for the network>
  8751                                  ;----------------------------------------------------------------------------
  8752                                  ;
  8753                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  8754                                  ;	network file.
  8755                                  ;
  8756                                  ;   Inputs:	ES:DI point to SFT
  8757                                  ;   Outputs:	Zero set if not network sft
  8758                                  ;		zero reset otherwise
  8759                                  ;		Carry CLEAR!!!
  8760                                  ;   Registers modified: none.
  8761                                  ;----------------------------------------------------------------------------
  8762                                  
  8763                                  IsSFTNet:
  8764                                  	;test	word [es:di+5],8000h
  8765 00001FE3 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  8766 00001FE9 C3                      	retn
  8767                                  
  8768                                  ;Break	<FastInit - Initialize FastTable entries >
  8769                                  ;----------------------------------------------------------------------------
  8770                                  ;   DOS 4.00   2/9/87
  8771                                  ;   FastInit  - initialize the FASTXXX routine entry
  8772                                  ;		  in the FastTable
  8773                                  ;
  8774                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  8775                                  ;		DS:SI = address of FASTXXX routine entry
  8776                                  ;		   SI = -1 for query only
  8777                                  ;   Outputs:	Carry flag clear, if success
  8778                                  ;		Carry flag set,   if failure
  8779                                  ;
  8780                                  ;
  8781                                  ;----------------------------------------------------------------------------
  8782                                  
  8783                                  ;Procedure FastInit,NEAR
  8784                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  8785                                  ;FastInit:
  8786                                  	; MSDOS 6.0
  8787                                  	;hkn; set up es to dosdataseg.
  8788                                  	;push	es
  8789                                  	;getdseg <es>			; es -> dosdata
  8790                                  
  8791                                  	;hkn; FastTable is in DOSDATA
  8792                                  	;MOV	DI,OFFSET DOSDATA:FastTable + 2 ;AN000;FO. points to fastxxx entry
  8793                                  	;DEC	BX				;AN000;FO.;; decrement index
  8794                                  	;MOV	DX,BX				;AN000;FO.;; save bx
  8795                                  	;SHL	BX,1				;AN000;FO.;; times 4 , each entry is DWORD
  8796                                  	;SHL	BX,1				;AN000;FO.
  8797                                  	;ADD	DI,BX				;AN000;FO. index to the entry
  8798                                  	;MOV	AX,WORD PTR ES:[DI+2]		;AN000;FO. get entry segment
  8799                                  ;fcheck: 					;AN000;
  8800                                  	;MOV	CX,CS				;AN000;FO.;; get DOS segment
  8801                                  	;CMP	AX,CX				;AN000;FO.;; first time installed ?
  8802                                  	;JZ	short ok_install			;AN000;FO.;; yes
  8803                                  	;OR	AX,AX				;AN000;FO.;
  8804                                  	;JZ	short ok_install		;AN000;FO.;
  8805                                  	;STC					;AN000;FO.;; already installed !
  8806                                  	;JMP	SHORT FSret			;AN000;FO. set carry
  8807                                  ;ok_install:					;AN000;
  8808                                  	;CMP	SI,-1				;AN000;FO.; Query only ?
  8809                                  	;JZ	short FSret			;AN000;FO.; yes
  8810                                  	;MOV	CX,DS				;AN000;FO.; get FASTXXX entry segment
  8811                                  	;MOV	WORD PTR ES:[DI+2],CX		;AN000;FO.; initialize routine entry
  8812                                  	;MOV	WORD PTR ES:[DI],SI		;AN000;FO.; initialize routine offset
  8813                                  
  8814                                  ;hkn; FastFlg moved to DOSDATA
  8815                                  	;MOV	DI,OFFSET DOSDATA:FastFlg	;AN000;FO.; get addr of FASTXXX flags
  8816                                  	;ADD	DI,DX				;AN000;FO.; index to a FASTXXX flag
  8817                                  	;OR	byte ptr ES:[DI],Fast_yes	;AN000;FO.; indicate installed
  8818                                  FSret:						;AN000;
  8819                                  	;pop	es
  8820                                  	;return					;AN000;FO.
  8821                                  ;EndProc FastInit				;AN000;FO.
  8822                                  
  8823                                  	; MSDOS 3.3
  8824                                  	; IBMDOS.COM (1987) - Offset 1EB3h
  8825                                  FastInit:
  8826 00001FEA BF[430F]                	mov	di,FastTable ; FastOpenTable
  8827 00001FED 2E8B4504                	mov	ax,[cs:di+4]		; Entry segment
  8828 00001FF1 8CCB                    	mov	bx,cs			; get DOS segment
  8829 00001FF3 39D8                    	cmp	ax,bx			; first time installed ?	
  8830 00001FF5 7402                    	je	short ok_install	; yes
  8831 00001FF7 F9                      	stc				; set carry
  8832 00001FF8 C3                      	retn				; (cf=1 means) already installed !
  8833                                  
  8834                                  ok_install:
  8835 00001FF9 BB[430F]                	mov	bx,FastTable ; FastOpenTable
  8836 00001FFC 8CD9                    	mov	cx,ds
  8837                                  	; set address of FASTXXX (FASTOPEN) routine entry
  8838 00001FFE 2E894F04                	mov	[cs:bx+4],cx
  8839 00002002 2E897702                	mov	[cs:bx+2],si
  8840 00002006 C3                      	retn
  8841                                  
  8842                                  ;Break	<FastRet - initial routine in FastOpenTable >
  8843                                  ;----------------------------------------------------------------------------
  8844                                  ;   DOS 3.3   6/10/86
  8845                                  ;   FastRet	- indicate FASTXXXX  not in memory
  8846                                  ;
  8847                                  ;   Inputs:	None
  8848                                  ;   Outputs:	AX = -1 and carry flag set
  8849                                  ;
  8850                                  ;   Registers modified: none.
  8851                                  ;----------------------------------------------------------------------------
  8852                                  
  8853                                  FastRet:
  8854                                  	;mov	ax,-1
  8855                                  	;stc
  8856                                  	;retf
  8857 00002007 F9                      	STC
  8858 00002008 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  8859 0000200A CB                      	RETF
  8860                                  
  8861                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  8862                                  ;----------------------------------------------------------------------------
  8863                                  ;   DOS 3.3   6/10/86
  8864                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  8865                                  ;
  8866                                  ;   Inputs:	Same input as $OPEN except CL = mode
  8867                                  ;   Outputs:	same output as $OPEN
  8868                                  ;
  8869                                  ;----------------------------------------------------------------------------
  8870                                  
  8871                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  8872                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  8873                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  8874                                  
  8875                                  NLS_OPEN:
  8876                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  8877                                  ;	MOV	BYTE [CPSWFLAG],0
  8878                                  ;	PUSH	BX		 ; save current state
  8879                                  
  8880 0000200B 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  8881 0000200D E82A50                  	call	_$OPEN
  8882                                  
  8883                                   ;	POP	BX		 ; restore current state
  8884                                   ;	MOV	[CPSWFLAG],BL
  8885 00002010 C3                      	RETN
  8886                                  
  8887                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  8888                                  ;----------------------------------------------------------------------------
  8889                                  ;   DOS 3.3   6/10/86
  8890                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  8891                                  ;
  8892                                  ;   Inputs:	BP = open mode
  8893                                  ;   Outputs:	same output as $LSEEK
  8894                                  ;
  8895                                  ;----------------------------------------------------------------------------
  8896                                  
  8897                                  NLS_LSEEK:
  8898                                  	;PUSH	word [SS:USER_SP] ; save user stack
  8899                                  	;PUSH	word [SS:USER_SS]
  8900 00002011 2EFF36[1E05]            	PUSH	word [CS:USER_SP] ; save user stack
  8901 00002016 2EFF36[2005]            	PUSH	word [CS:USER_SS]
  8902 0000201B E81000                  	CALL	Fake_User_Stack
  8903 0000201E 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  8904 00002020 E8164F                  	call	_$LSEEK
  8905                                  	;POP	word [SS:USER_SS] ; restore user stack
  8906                                  	;POP	word [SS:USER_SP]
  8907 00002023 2E8F06[2005]            	POP	word [cs:USER_SS] ; restore user stack
  8908 00002028 2E8F06[1E05]            	POP	word [cs:USER_SP]
  8909 0000202D C3                      	RETN
  8910                                  
  8911                                  ;Break	<Fake_User_Stack - save user stack>
  8912                                  ;----------------------------------------------------------------------------
  8913                                  ;   DOS 3.3   6/10/86
  8914                                  ;   Fake_User_Stack - save user stack pointer
  8915                                  ;
  8916                                  ;----------------------------------------------------------------------------
  8917                                  
  8918                                  Fake_User_Stack:
  8919                                  	;MOV	AX,[ss:USER_SP_2F] ; replace with INT 2F stack
  8920 0000202E 2EA1[710F]              	MOV	AX,[cs:USER_SP_2F]
  8921                                  	;MOV	[SS:USER_SP],AX
  8922 00002032 2EA3[1E05]              	MOV	[CS:USER_SP],AX
  8923 00002036 8CC8                    	MOV	AX,CS
  8924                                  	;mov	ax,ss
  8925                                  	;MOV	[SS:USER_SS],AX
  8926 00002038 2EA3[2005]              	MOV	[CS:USER_SS],AX
  8927 0000203C C3                      	RETN
  8928                                  
  8929                                  ;Break	<GetDevList - get device header list pointer>
  8930                                  ;----------------------------------------------------------------------------
  8931                                  ;   DOS 3.3   7/25/86
  8932                                  ;   GetDevList - get device header list pointer
  8933                                  ;
  8934                                  ;   Output: AX:BX points to the device header list
  8935                                  ;----------------------------------------------------------------------------
  8936                                  
  8937                                  GetDevList:
  8938 0000203D BE[3B0F]                	MOV	SI,SysInitTable
  8939                                  	;LDS	SI,[CS:SI+SYSINITVARS]
  8940 00002040 2EC534                  	LDS	SI,[CS:SI]
  8941                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  8942                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  8943 00002043 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  8944 00002046 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  8945 00002049 C3                      	RETN
  8946                                  
  8947                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC   >
  8948                                  ;----------------------------------------------------------------------------
  8949                                  ;   DOS 3.3   7/25/86
  8950                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  8951                                  ;
  8952                                  ;   Inputs:	BP = function code 0CH
  8953                                  ;   Outputs:	same output as generic $IOCTL
  8954                                  ;
  8955                                  ;----------------------------------------------------------------------------
  8956                                  
  8957                                  NLS_IOCTL:
  8958                                  	;PUSH	word [SS:USER_SP] ; save user stack
  8959                                  	;PUSH	word [SS:USER_SS]
  8960 0000204A 2EFF36[1E05]            	PUSH	word [CS:USER_SP] ; save user stack
  8961 0000204F 2EFF36[2005]            	PUSH	word [CS:USER_SS]
  8962 00002054 E8D7FF                  	CALL	Fake_User_Stack
  8963 00002057 89E8                    	MOV	AX,BP	     ; set up correct interface for $LSEEK
  8964 00002059 E85C0F                  	call	_$IOCTL
  8965                                  	;POP	word [SS:USER_SS] ; restore user stack
  8966                                  	;POP	word [SS:USER_SP]
  8967 0000205C 2E8F06[2005]            	POP	word [CS:USER_SS] ; restore user stack
  8968 00002061 2E8F06[1E05]            	POP	word [CS:USER_SP]
  8969 00002066 C3                      	RETN
  8970                                  
  8971                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  8972                                  ;----------------------------------------------------------------------------
  8973                                  ;   DOS 3.3   7/25/86
  8974                                  ;   NLS_GETEXT	-
  8975                                  ;
  8976                                  ;   Inputs:	none
  8977                                  ;   Outputs:	AX = extended error
  8978                                  ;
  8979                                  ;----------------------------------------------------------------------------
  8980                                  
  8981                                  NLS_GETEXT:
  8982                                  	;MOV	AX,[SS:EXTERR]	 ; return extended error
  8983 00002067 2EA1[D202]              	mov	AX,[CS:EXTERR]
  8984 0000206B C3                      	RETN
  8985                                  
  8986                                  ;============================================================================
  8987                                  ; EcritDisk, LcritDisk, EcritDevice, LCritDevice
  8988                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  8989                                  ;============================================================================
  8990                                  ; 20/07/2018 - Retro DOS v3.0
  8991                                  
  8992                                  	; MSDOS 3.3
  8993                                  	; 08/08/2018 - Retro DSOS v3.0
  8994                                  EcritMem:
  8995                                  EcritSFT:
  8996                                  	;
  8997                                  EcritDisk:
  8998                                  	;push	ax
  8999 0000206C C3                      	retn
  9000                                  	
  9001 0000206D B80180                  	mov	ax,8001h
  9002 00002070 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9003                                  			; AL = critical section number (00h-0Fh)
  9004 00002072 58                      	pop	ax
  9005 00002073 C3                      	retn
  9006                                  
  9007                                  	; MSDOS 3.3
  9008                                  	; 08/08/2018 - Retro DSOS v3.0
  9009                                  LcritMem:
  9010                                  LcritSFT:
  9011                                  	;
  9012                                  LcritDisk:
  9013                                  	;push	ax
  9014 00002074 C3                      	retn
  9015                                  	
  9016 00002075 B80181                  	mov	ax,8101h
  9017 00002078 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9018                                  			; AL = critical section number (00h-0Fh)
  9019 0000207A 58                      	pop	ax
  9020 0000207B C3                      	retn
  9021                                  
  9022                                  EcritDevice:
  9023                                  	;push	ax
  9024 0000207C C3                      	retn
  9025                                  	
  9026 0000207D B80280                  	mov	ax,8002h
  9027 00002080 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9028                                  			; AL = critical section number (00h-0Fh)
  9029 00002082 58                      	pop	ax
  9030 00002083 C3                      	retn
  9031                                  
  9032                                  LcritDevice:
  9033                                  	;push	ax
  9034 00002084 C3                      	retn
  9035                                  	
  9036 00002085 B80281                  	mov	ax,8102h
  9037 00002088 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9038                                  			; AL = critical section number (00h-0Fh)
  9039 0000208A 58                      	pop	ax
  9040 0000208B C3                      	retn
  9041                                  
  9042                                  ;============================================================================
  9043                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9044                                  ;============================================================================
  9045                                  ; 20/07/2018 - Retro DOS v3.0
  9046                                  
  9047                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9048                                  
  9049                                  ; Some old versions of the 80286 have a bug in the chip.  The popf
  9050                                  ; instruction will enable interrupts.  Therefore in a section of code with
  9051                                  ; interrupts disabled and you need a popf instruction use the 'popff'
  9052                                  ; macro instead.
  9053                                  ;
  9054                                  
  9055                                  ;%macro POPFF 0
  9056                                  ;	jmp	$+3
  9057                                  ;	iret
  9058                                  ;	push	cs
  9059                                  ;	call	$-2
  9060                                  ;%endmacro
  9061                                  
  9062                                  ;**	CRIT.ASM - Critical Section Routines
  9063                                  ;
  9064                                  ;	Critical section handlers
  9065                                  ;
  9066                                  ;	Modification history:
  9067                                  ;
  9068                                  ;	    Created: ARR 30 March 1983
  9069                                  
  9070                                  ;
  9071                                  ;SR; This variable is set when the redir installs itself
  9072                                  ;
  9073                                  	;I_need redir_patch,BYTE
  9074                                  
  9075                                  ; Break	<Critical section handlers>
  9076                                  
  9077                                  ;   Each handler must leave everything untouched; including flags!
  9078                                  ;
  9079                                  ;   Sleaze for time savings:  first instruction is a return.  This is patched
  9080                                  ;   by the sharer to be a PUSH AX to complete the correct routines.
  9081                                  
  9082                                  ;Procedure  EcritDisk,NEAR
  9083                                  	;public  EcritMem
  9084                                  	;public  EcritSFT
  9085                                  ;ECritMEM    LABEL   NEAR
  9086                                  ;ECritSFT    LABEL   NEAR
  9087                                  
  9088                                  ;
  9089                                  ;SR; Check if critical section is to be entered
  9090                                  ;
  9091                                  
  9092                                  ;	pushf
  9093                                  ;	cmp	ss:[redir_patch],0
  9094                                  ;	jz	@f
  9095                                  ;	popff
  9096                                  ;
  9097                                  ;       PUSH    AX
  9098                                  ;	MOV     AX,8000h+critDisk
  9099                                  ;	INT     int_ibm
  9100                                  ;	POP     AX
  9101                                  ;	return
  9102                                  ;@@:
  9103                                  ;	popff
  9104                                  ;	ret
  9105                                  ;EndProc EcritDisk
  9106                                  
  9107                                  ;Procedure   LcritDisk,NEAR
  9108                                  ;	public  LcritMem
  9109                                  ;	public  LcritSFT
  9110                                  ;LCritMEM    LABEL   NEAR
  9111                                  ;LCritSFT    LABEL   NEAR
  9112                                  
  9113                                  ;
  9114                                  ;SR; Check if critical section is to be entered
  9115                                  ;
  9116                                  
  9117                                  ;	pushf
  9118                                  ;	cmp	ss:[redir_patch],0
  9119                                  ;	jz	@f
  9120                                  ;	popff
  9121                                  
  9122                                  ;       PUSH    AX
  9123                                  ;	MOV     AX,8100h+critDisk
  9124                                  ;	INT     int_ibm
  9125                                  ;	POP     AX
  9126                                  ;	return
  9127                                  ;@@:
  9128                                  ;	popff
  9129                                  ;	ret
  9130                                  
  9131                                  ;EndProc LcritDisk
  9132                                  
  9133                                  ;Procedure   EcritDevice,NEAR
  9134                                  ;
  9135                                  ;SR; Check if critical section is to be entered
  9136                                  ;
  9137                                  
  9138                                  ;	pushf
  9139                                  ;	cmp	ss:[redir_patch],0
  9140                                  ;	jz	@f
  9141                                  ;	popff
  9142                                  
  9143                                  ;       PUSH    AX
  9144                                  ;	MOV     AX,8000h+critDevice
  9145                                  ;	INT     int_ibm
  9146                                  ;	POP     AX
  9147                                  ;	return
  9148                                  ;@@:
  9149                                  ;	popff
  9150                                  ;	ret
  9151                                  
  9152                                  ;EndProc EcritDevice
  9153                                  
  9154                                  ;Procedure   LcritDevice,NEAR
  9155                                  ;
  9156                                  ;SR; Check if critical section is to be entered
  9157                                  ;
  9158                                  
  9159                                  ;	pushf
  9160                                  ;	cmp	ss:[redir_patch],0
  9161                                  ;	jz	@f
  9162                                  ;	popff
  9163                                  
  9164                                  ;       PUSH    AX
  9165                                  ;	MOV     AX,8100h+critDevice
  9166                                  ;	INT     int_ibm
  9167                                  ;	POP     AX
  9168                                  ;	return
  9169                                  ;@@:
  9170                                  ;	popff
  9171                                  ;	ret
  9172                                  
  9173                                  ;EndProc LcritDevice
  9174                                  
  9175                                  
  9176                                  ;============================================================================
  9177                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9178                                  ;============================================================================
  9179                                  ; 20/07/2018 - Retro DOS v3.0
  9180                                  
  9181                                  ;============================================================================
  9182                                  ; STDIO.ASM - (MSDOS 2.0)
  9183                                  ;============================================================================
  9184                                  
  9185                                  ;
  9186                                  ; Standard device IO for MSDOS (first 12 function calls)
  9187                                  ;
  9188                                  
  9189                                  ;.xlist
  9190                                  ;.xcref
  9191                                  ;INCLUDE STDSW.ASM
  9192                                  ;INCLUDE DOSSEG.ASM
  9193                                  ;.cref
  9194                                  ;.list
  9195                                  
  9196                                  ;TITLE   STDIO - device IO for MSDOS
  9197                                  ;NAME    STDIO
  9198                                  
  9199                                  ;INCLUDE IO.ASM
  9200                                  
  9201                                  ; ---------------------------------------------------------------------------
  9202                                  ;
  9203                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9204                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9205                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9206                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9207                                  ;			    to restore MSDOS 2.0 device IO source code 
  9208                                  ;
  9209                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9210                                  	
  9211                                  ;============================================================================
  9212                                  ; STDIO.ASM - (MSDOS 2.0)
  9213                                  ;============================================================================
  9214                                  
  9215                                  ;
  9216                                  ; Standard device IO for MSDOS (first 12 function calls)
  9217                                  ;
  9218                                  
  9219                                  ;.xlist
  9220                                  ;.xcref
  9221                                  ;INCLUDE STDSW.ASM
  9222                                  ;INCLUDE DOSSEG.ASM
  9223                                  ;.cref
  9224                                  ;.list
  9225                                  
  9226                                  ;TITLE   STDIO - device IO for MSDOS
  9227                                  ;NAME    STDIO
  9228                                  
  9229                                  ;INCLUDE IO.ASM
  9230                                  
  9231                                  ; ---------------------------------------------------------------------------
  9232                                  ;
  9233                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9234                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9235                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9236                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9237                                  ;			    to restore MSDOS 2.0 device IO source code 
  9238                                  ;
  9239                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9240                                  ;
  9241                                  ;============================================================================
  9242                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9243                                  ;============================================================================
  9244                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9245                                  
  9246                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9247                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9248                                  
  9249                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9250                                  ;
  9251                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9252                                  ;	NAME	IBMCPMIO
  9253                                  
  9254                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9255                                  ;
  9256                                  ;	$Std_Con_Input_No_Echo
  9257                                  ;	$Std_Con_String_Output
  9258                                  ;	$Std_Con_String_Input
  9259                                  ;	$RawConIO
  9260                                  ;	$RawConInput
  9261                                  ;	RAWOUT
  9262                                  ;	RAWOUT2
  9263                                  ;
  9264                                  
  9265                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9266                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9267                                  ; references to be SS or CS relative which is desired.
  9268                                  
  9269                                  ; ---------------------------------------------------------------------------
  9270                                  
  9271                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9272                                  ;	NAME	CPMIO2
  9273                                  
  9274                                  ;
  9275                                  ;	Microsoft Confidential
  9276                                  ;	Copyright (C) Microsoft Corporation 1991
  9277                                  ;	All Rights Reserved.
  9278                                  ;
  9279                                  
  9280                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9281                                  ;
  9282                                  ;	$Std_Con_Input
  9283                                  ;	$Std_Con_Output
  9284                                  ;	OUTT
  9285                                  ;	TAB
  9286                                  ;	BUFOUT
  9287                                  ;	$Std_Aux_Input
  9288                                  ;	$Std_Aux_Output
  9289                                  ;	$Std_Printer_Output
  9290                                  ;	$Std_Con_Input_Status
  9291                                  ;	$Std_Con_Input_Flush
  9292                                  ;
  9293                                  ;	Revision History:
  9294                                  ;
  9295                                  ;	  AN000	 version 4.00 - Jan. 1988
  9296                                  
  9297                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9298                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9299                                  ; references to be SS or CS relative which is desired.
  9300                                  
  9301                                  ;DOSCODE SEGMENT
  9302                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9303                                  
  9304                                  
  9305                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9306                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9307                                  ;hkn;	not valid. 
  9308                                  
  9309                                  ;
  9310                                  ;----------------------------------------------------------------------------
  9311                                  ;
  9312                                  ; Procedure : $Std_Con_Input_No_Echo
  9313                                  ;
  9314                                  ;----------------------------------------------------------------------------
  9315                                  ;
  9316                                  
  9317                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9318                                  
  9319                                  ; Inputs:
  9320                                  ;	None
  9321                                  ; Function:
  9322                                  ;	Input character from console, no echo
  9323                                  ; Returns:
  9324                                  ;	AL = character
  9325                                  
  9326 0000208C 1E                      	push	ds
  9327 0000208D 56                      	push	si
  9328                                  INTEST:
  9329 0000208E E86336                  	call	STATCHK
  9330 00002091 754D                    	jnz	short GET ; 08/09/2018
  9331                                  ;*************************************************************************
  9332                                  ;hkn; SS override
  9333 00002093 36803E[060A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9334 00002099 7505                    	jnz	short no_sys_wait
  9335 0000209B B405                    	mov	ah,5			; get input status with system wait
  9336 0000209D E8B12C                  	call	IOFUNC
  9337                                  no_sys_wait:
  9338                                  ;**************************************************************************
  9339 000020A0 B484                    	MOV	AH,84h
  9340 000020A2 CD2A                    	INT	int_IBM	 ; int 2Ah
  9341                                  
  9342                                  ;;; 7/15/86  update the date in the idle loop
  9343                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9344                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9345                                  
  9346                                  ;hkn; SS override
  9347 000020A4 36803E[8D0F]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9348 000020AA 752D                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9349 000020AC 50                      	PUSH	AX
  9350 000020AD 53                      	PUSH	BX			; following is tricky,
  9351 000020AE 51                      	PUSH	CX			; it may be called by critical handler
  9352 000020AF 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9353                                  					; other's READ or WRITE
  9354 000020B0 1E                      	PUSH	DS			; save DS = SFT's sgement
  9355                                  
  9356                                  ;hkn; READTIME must use ds = DOSDATA
  9357                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9358                                  
  9359                                  	;push	ss
  9360 000020B1 0E                      	PUSH	CS
  9361 000020B2 1F                      	POP	DS
  9362                                  
  9363 000020B3 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9364 000020B6 E89F02                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9365                                  	;invoke	READTIME		; readtime
  9366 000020B9 E824F8                  	call	READTIME
  9367 000020BC B80100                  	MOV	AX,1
  9368 000020BF E89602                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9369                                  	;
  9370                                  	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9371                                  	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9372 000020C2 53                      	push	bx
  9373 000020C3 BB[8D0F]                	mov	bx,DATE_FLAG
  9374 000020C6 83C302                  	add	bx,2  ; mov bx,FETCHI_FLAG
  9375 000020C9 2E813F7258              	cmp	word [cs:bx],5872h
  9376 000020CE 7403                    	jz	short FETCHI_TAG_chk_ok
  9377 000020D0 E8AE52                  	call	DOSINIT
  9378                                  FETCHI_TAG_chk_ok:
  9379 000020D3 5B                      	pop	bx
  9380                                  	;
  9381 000020D4 1F                      	POP	DS			; restore DS
  9382 000020D5 5A                      	POP	DX
  9383 000020D6 59                      	POP	CX
  9384 000020D7 5B                      	POP	BX
  9385 000020D8 58                      	POP	AX
  9386                                  NoUpdate:
  9387                                  
  9388                                  ;hkn; SS override
  9389 000020D9 36FF06[8D0F]            	INC	word [SS:DATE_FLAG]
  9390                                  
  9391                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  9392 000020DE EBAE                    	JMP	short INTEST
  9393                                  GET:
  9394 000020E0 30E4                    	XOR	AH,AH
  9395 000020E2 E86C2C                  	call	IOFUNC
  9396 000020E5 5E                      	POP	SI
  9397 000020E6 1F                      	POP	DS
  9398                                  ;;; 7/15/86
  9399                                  
  9400                                  ;hkn; SS override
  9401                                  	; MSDOS 6.0
  9402 000020E7 36C606[8B0F]00          	MOV	BYTE [SS:SCAN_FLAG],0
  9403                                  	;
  9404 000020ED 3C00                    	CMP	AL,0	    ; extended code ( AL )
  9405 000020EF 7506                    	JNZ	short noscan
  9406                                  
  9407                                  ;hkn; SS override
  9408 000020F1 36C606[8B0F]01          	MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
  9409                                  
  9410                                  noscan:
  9411 000020F7 C3                      	retn
  9412                                  ;
  9413                                  ;----------------------------------------------------------------------------
  9414                                  ;
  9415                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
  9416                                  ;
  9417                                  ;
  9418                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
  9419                                  ;	EXIT	none
  9420                                  ;	USES	ALL
  9421                                  ;
  9422                                  ;----------------------------------------------------------------------------
  9423                                  ;
  9424                                  
  9425                                  _$STD_CON_STRING_OUTPUT:	;System call 9
  9426                                  
  9427 000020F8 89D6                    	mov	si,dx
  9428                                  STRING_OUT1:	
  9429 000020FA AC                      	lodsb
  9430 000020FB 3C24                    	cmp	al,'$'
  9431 000020FD 74F8                    	jz	short noscan
  9432                                  NEXT_STR1:
  9433 000020FF E88202                  	call	OUTT
  9434 00002102 EBF6                    	jmp	short STRING_OUT1
  9435                                  
  9436                                  ;----------------------------------------------------------------------------
  9437                                  ;
  9438                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
  9439                                  ;
  9440                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
  9441                                  ;
  9442                                  ;	ENTRY	(ds:dx) = input buffer
  9443                                  ;	EXIT	none
  9444                                  ;	USES	ALL
  9445                                  ;
  9446                                  ;----------------------------------------------------------------------------
  9447                                  
  9448                                  _$STD_CON_STRING_INPUT:		;System call 10
  9449                                  
  9450 00002104 8CD0                    	mov	ax,ss
  9451 00002106 8EC0                    	mov	es,ax
  9452 00002108 89D6                    	mov	si,dx
  9453 0000210A 30ED                    	xor	ch,ch
  9454 0000210C AD                      	lodsw
  9455                                  
  9456                                  ;	(AL) = the buffer length
  9457                                  ;	(AH) = the template length
  9458                                  
  9459 0000210D 08C0                            or	al,al
  9460 0000210F 74E6                            jz	short noscan	;Buffer is 0 length!!?
  9461 00002111 88E3                    	mov	bl,ah		;Init template counter
  9462 00002113 88EF                            mov	bh,ch		;Init template counter
  9463                                  
  9464                                  ;	(BL) = the number of bytes in the template
  9465                                  
  9466 00002115 38D8                            cmp	al,bl
  9467 00002117 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
  9468 00002119 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
  9469 0000211C 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
  9470                                  
  9471                                  ; The number of chars in the template is >= the number of chars in buffer or
  9472                                  ; there is no CR at the end of the template.  This is an inconsistant state
  9473                                  ; of affairs.  Pretend that the template was empty:
  9474                                  ;
  9475                                  
  9476                                  NOEDIT:	
  9477 0000211E 88EB                    	mov	bl,ch		;Reset buffer
  9478                                  EDITON: 
  9479 00002120 88C2                    	mov	dl,al
  9480 00002122 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
  9481                                  
  9482                                  ;	Top level.  We begin to read a line in.
  9483                                  
  9484                                  NEWLIN: 
  9485 00002123 36A0[A701]              	mov	al,[SS:CARPOS]
  9486 00002127 36A2[A801]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
  9487                                  
  9488 0000212B 56                      	push	si
  9489 0000212C BF[A901]                	mov	di,INBUF ;Build the new line here
  9490 0000212F 36882E[1405]            	mov	byte [SS:INSMODE],ch ;Insert mode off
  9491 00002134 88EF                    	mov	bh,ch		;No chars from template yet
  9492 00002136 88EE                    	mov	dh,ch		;No chars to new line yet
  9493 00002138 E851FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
  9494 0000213B 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
  9495 0000213D 7503                    	jnz	short GOTCH
  9496                                  
  9497                                  ;	This is the main loop of reading in a character and processing it.
  9498                                  ;
  9499                                  ;	(BH) = the index of the next byte in the template
  9500                                  ;	(BL) = the length of the template
  9501                                  ;	(DH) = the number of bytes in the buffer
  9502                                  ;	(DL) = the length of the buffer
  9503                                  
  9504                                  GETCH:
  9505 0000213F E84AFF                  	call	_$STD_CON_INPUT_NO_ECHO
  9506                                  GOTCH:
  9507                                  ;
  9508                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
  9509                                  ; input queue.
  9510                                  ;
  9511 00002142 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
  9512 00002144 74F9                    	jz	short GETCH
  9513                                  
  9514                                  ;	If the leading char is the function-key lead byte
  9515                                  
  9516 00002146 363A06[D212]                    cmp	al,[SS:ESCCHAR]
  9517 0000214B 7438                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
  9518                                  
  9519                                  ;	Rubout and ^H are both destructive backspaces.
  9520                                  
  9521 0000214D 3C7F                            cmp	al,c_DEL ; 7FH
  9522 0000214F 742B                            jz	short BACKSPJ
  9523 00002151 3C08                            cmp	al,c_BS  ; 8
  9524 00002153 7427                            jz	short BACKSPJ
  9525                                  
  9526                                  	; MSDOS 6.0
  9527                                  ;;	^W deletes backward once and then backs up until a letter is before the
  9528                                  ;;	cursor
  9529                                  ;
  9530                                  ;	CMP     AL,"W"-"@" ; 17h
  9531                                  ;
  9532                                  ;;	The removal of the comment characters before the jump statement will
  9533                                  ;;	cause ^W to backup a word.
  9534                                  ;
  9535                                  ;;***	JZ	short WordDel
  9536                                  ;	NOP
  9537                                  ;	NOP
  9538                                  ;	CMP     AL,"U"-"@" ; 15h
  9539                                  ;
  9540                                  ;;	The removal of the comment characters before the jump statement will
  9541                                  ;;	cause ^U to clear a line.
  9542                                  ;
  9543                                  ;;***	JZ	short LineDel
  9544                                  ;	NOP
  9545                                  ;	NOP
  9546                                  
  9547                                  ;	CR terminates the line.
  9548                                  
  9549 00002155 3C0D                            cmp	al,c_CR ; 0Dh
  9550 00002157 742F                            jz	short ENDLIN
  9551                                  
  9552                                  ;	LF goes to a new line and keeps on reading.
  9553                                  
  9554 00002159 3C0A                            cmp	al,c_LF ; 0Ah
  9555 0000215B 7441                    	jz	short PHYCRLF
  9556                                  
  9557                                  ;	^X (or ESC) deletes the line and starts over
  9558                                  
  9559                                  	; MSDOS 3.3
  9560                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
  9561                                  	;jz	short KILNEW
  9562                                  	;MSDOS 6.0
  9563 0000215D 3C1B                    	cmp	al,CANCEL ; 1Bh
  9564 0000215F 7442                    	jz	short KILNEW
  9565                                  
  9566                                  ; Otherwise, we save the input character.
  9567                                  
  9568                                  SAVCH:	
  9569 00002161 38D6                    	cmp	dh,dl
  9570 00002163 7319                    	jnb	short BUFFUL		; buffer is full.
  9571 00002165 AA                              stosb
  9572 00002166 FEC6                    	inc	dh                      ; increment count in buffer.
  9573 00002168 E8B302                  	call	BUFOUT			;Print control chars nicely
  9574                                  
  9575 0000216B 36803E[1405]00                  cmp	byte [SS:INSMODE], 0
  9576 00002171 75CC                    	jnz	short GETCH		; insertmode => don't advance template
  9577 00002173 38DF                            cmp	bh,bl
  9578 00002175 73C8                            jnb	short GETCH		; no more characters in template
  9579 00002177 46                              inc	si                      ; Skip to next char in template
  9580 00002178 FEC7                            inc	bh                      ; remember position in template
  9581 0000217A EBC3                            jmp	short GETCH
  9582                                  
  9583                                  BACKSPJ: 
  9584 0000217C EB38                    	jmp	short BACKSP
  9585                                  
  9586                                  BUFFUL: 
  9587 0000217E B007                    	mov	al, 7			; Bell to signal full buffer
  9588 00002180 E80102                  	call	OUTT
  9589 00002183 EBBA                    	jmp	short GETCH
  9590                                  
  9591                                  ESCAPE: 
  9592                                  	;transfer OEMFunctionKey
  9593 00002185 E988F6                  	JMP	OEMFunctionKey
  9594                                  
  9595                                  ENDLIN:
  9596 00002188 AA                              stosb				; Put the CR in the buffer
  9597 00002189 E8F801                  	call	OUTT                    ; Echo it
  9598 0000218C 5F                              pop	di                      ; Get start of user buffer
  9599 0000218D 8875FF                          mov	[di-1], dh		; Tell user how many bytes
  9600 00002190 FEC6                            inc	dh			; DH is length including CR
  9601                                  
  9602                                  COPYNEW:
  9603                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
  9604                                  	;mov	bp, es
  9605                                  	;mov	bx, ds
  9606                                  	;mov	es, bx
  9607                                  	;mov	ds, bp
  9608                                  	;mov	si, INBUF
  9609                                  	;mov	cl, dh
  9610                                  	;rep	movsb
  9611                                  	;retn
  9612                                  
  9613                                  	; CPMIO.ASM (MSDOS 6.0)
  9614                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
  9615                                  	;SAVE	<DS,ES>
  9616 00002192 1E                      	PUSH	DS
  9617 00002193 06                      	PUSH	ES
  9618                                  	;RESTORE <DS,ES>		; XCHG ES,DS
  9619 00002194 1F                      	POP	DS
  9620 00002195 07                      	POP	ES
  9621                                  
  9622                                  ;;hkn; INBUF is in DOSDATA
  9623 00002196 BE[A901]                        MOV     SI,INBUF
  9624 00002199 88F1                            MOV     CL,DH                   ; set up count
  9625 0000219B F3A4                            REP     MOVSB                   ; Copy final line to user buffer
  9626                                  OLDBAK_RETN:
  9627 0000219D C3                              RETN
  9628                                  
  9629                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
  9630                                  
  9631                                  PHYCRLF:
  9632 0000219E E82001                  	CALL	CRLF
  9633 000021A1 EB9C                            JMP	short GETCH
  9634                                  
  9635                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
  9636                                  
  9637                                  	; Note: Following routines were not used in IBMDOS.COM
  9638                                  	;	-CRTL+W, CRTL+U is not activated-
  9639                                  	;	but they were in the kernel code!?)
  9640                                  ;
  9641                                  ; Delete the previous line
  9642                                  ;
  9643                                  ;LineDel:
  9644                                  ;	OR      DH,DH
  9645                                  ;	JZ	short GetCh
  9646                                  ;	Call    BackSpace
  9647                                  ;	JMP	short LineDel
  9648                                  
  9649                                  ;
  9650                                  ; delete the previous word.
  9651                                  ;
  9652                                  ;WordDel:
  9653                                  ;WordLoop:
  9654                                  ;	Call    BackSpace               ; backspace the one spot
  9655                                  ;	OR      DH,DH
  9656                                  ;	JZ	short GetChJ
  9657                                  ;	MOV     AL,[ES:DI-1]
  9658                                  ;	cmp     al,'0'
  9659                                  ;	jb	short GetChj
  9660                                  ;	cmp     al,'9'
  9661                                  ;	jbe	short WordLoop
  9662                                  ;	OR      AL,20h
  9663                                  ;	CMP     AL,'a'
  9664                                  ;	JB	short GetChJ
  9665                                  ;	CMP     AL,'z'
  9666                                  ;	JBE	short WordLoop
  9667                                  ;getchj: 
  9668                                  ;	JMP	GetCh
  9669                                  
  9670                                  ; The user wants to throw away what he's typed in and wants to start over.
  9671                                  ; We print the backslash and then go to the next line and tab to the correct
  9672                                  ; spot to begin the buffered input.
  9673                                  
  9674                                  KILNEW:
  9675 000021A3 B05C                            mov	al,'\'
  9676 000021A5 E8DC01                          call	OUTT            ;Print the CANCEL indicator
  9677 000021A8 5E                              pop	si		;Remember start of edit buffer
  9678                                  PUTNEW:
  9679 000021A9 E81501                  	call	CRLF            ;Go to next line on screen
  9680 000021AC 36A0[A801]              	mov	al,[SS:STARTPOS]
  9681 000021B0 E84702                  	call	TAB             ;Tab over
  9682 000021B3 E96DFF                          JMP     NEWLIN		;Start over again
  9683                                  
  9684                                  ;	Destructively back up one character position
  9685                                  
  9686                                  BACKSP:
  9687                                  	; 09/09/2018
  9688 000021B6 E80200                  	Call    BackSpace
  9689 000021B9 EB84                    	JMP     GETCH
  9690                                  
  9691                                  BackSpace:
  9692 000021BB 08F6                    	or	dh,dh
  9693 000021BD 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
  9694 000021BF E85800                  	call	BACKUP          ;Do the backup
  9695 000021C2 268A05                  	mov	al,[es:di]	;Get the deleted char
  9696 000021C5 3C20                            cmp	al,20h	; ' '
  9697 000021C7 730F                    	jnb	short OLDBAK	;Was a normal char
  9698 000021C9 3C09                            cmp	al,c_HT ; 9
  9699 000021CB 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
  9700                                  ;; 9/27/86 fix for ctrl-U backspace
  9701 000021CD 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
  9702 000021CF 7407                    	JZ	short OLDBAK
  9703 000021D1 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
  9704 000021D3 7403                    	JZ	short OLDBAK
  9705                                  ;; 9/27/86 fix for ctrl-U backspace
  9706 000021D5 E84500                          call	BACKMES         ;Was a control char, zap the '^'
  9707                                  OLDBAK:
  9708 000021D8 36803E[1405]00                  cmp	byte [SS:INSMODE], 0
  9709 000021DE 75BD                    	jnz	short OLDBAK_RETN ;In insert mode, done
  9710 000021E0 08FF                    	or	bh,bh
  9711 000021E2 74B9                            jz	short OLDBAK_RETN 
  9712                                  				;Not advanced in template, stay where we are
  9713 000021E4 FECF                    	dec	bh		;Go back in template
  9714 000021E6 4E                              dec	si
  9715 000021E7 C3                      	retn
  9716                                  
  9717                                  BAKTAB:
  9718 000021E8 57                              push	di
  9719 000021E9 4F                              dec	di		;Back up one char
  9720 000021EA FD                              std			;Go backward
  9721 000021EB 88F1                            mov	cl,dh		;Number of chars currently in line
  9722 000021ED B020                            mov	al,20h	; ' '
  9723 000021EF 53                              push	bx
  9724 000021F0 B307                            mov	bl,7		;Max
  9725 000021F2 E30E                            jcxz	FIGTAB		;At start, do nothing
  9726                                  FNDPOS:
  9727 000021F4 AE                              scasb			;Look back
  9728 000021F5 7609                    	jbe	short CHKCNT
  9729 000021F7 26807D0109              	cmp	byte [es:di+1],9
  9730 000021FC 7409                    	jz	short HAVTAB	;Found a tab
  9731 000021FE FECB                    	dec	bl		;Back one char if non tab control char
  9732                                  CHKCNT:
  9733 00002200 E2F2                            loop	FNDPOS
  9734                                  FIGTAB:		
  9735 00002202 362A1E[A801]            	sub	bl,[SS:STARTPOS]
  9736                                  HAVTAB:
  9737 00002207 28F3                    	sub	bl,dh
  9738 00002209 00D9                    	add	cl,bl
  9739 0000220B 80E107                  	and	cl,7		;CX has correct number to erase
  9740 0000220E FC                      	cld			;Back to normal
  9741 0000220F 5B                      	pop	bx
  9742 00002210 5F                      	pop	di
  9743 00002211 74C5                    	jz	short OLDBAK	;Nothing to erase
  9744                                  TABBAK:
  9745 00002213 E80700                  	call	BACKMES
  9746 00002216 E2FB                    	loop	TABBAK		;Erase correct number of chars
  9747 00002218 EBBE                    	jmp	short OLDBAK
  9748                                  
  9749                                  BACKUP:
  9750 0000221A FECE                            dec	dh             ;Back up in line
  9751 0000221C 4F                              dec	di
  9752                                  BACKMES:
  9753 0000221D B008                            mov	al,c_BS ; 8	;Backspace
  9754 0000221F E86201                          call	OUTT
  9755 00002222 B020                            mov	al,20h ; ' '	;Erase
  9756 00002224 E85D01                          call	OUTT
  9757 00002227 B008                            mov	al,c_BS ; 8	;Backspace
  9758 00002229 E95801                  	jmp	OUTT		;Done
  9759                                  
  9760                                  ;User really wants an ESC character in his line
  9761                                  TWOESC:	
  9762 0000222C 36A0[D212]              	mov	al,[SS:ESCCHAR]
  9763 00002230 E92EFF                  	jmp	SAVCH
  9764                                  
  9765                                  ;Copy the rest of the template
  9766                                  COPYLIN:
  9767 00002233 88D9                            mov	cl,bl		;Total size of template
  9768 00002235 28F9                    	sub	cl,bh		;Minus position in template, is number to move
  9769 00002237 EB07                            jmp	short COPYEACH
  9770                                  
  9771                                  COPYSTR:
  9772 00002239 E83400                  	call	FINDOLD         ;Find the char
  9773 0000223C EB02                    	jmp	short COPYEACH  ;Copy up to it
  9774                                  
  9775                                  ;Copy one char from template to line
  9776                                  COPYONE:
  9777 0000223E B101                            mov	cl,1
  9778                                  ;Copy CX chars from template to line
  9779                                  COPYEACH:
  9780 00002240 36C606[1405]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
  9781 00002246 38D6                    	cmp	dh,dl
  9782 00002248 740F                            jz	short GETCH2		;At end of line, can't do anything
  9783 0000224A 38DF                            cmp	bh,bl
  9784 0000224C 740B                            jz	short GETCH2		;At end of template, can't do anything
  9785 0000224E AC                              lodsb
  9786 0000224F AA                              stosb
  9787 00002250 E8CB01                  	call	BUFOUT
  9788 00002253 FEC7                            inc	bh			;Ahead in template
  9789 00002255 FEC6                            inc	dh			;Ahead in line
  9790 00002257 E2E7                            loop	COPYEACH
  9791                                  GETCH2:
  9792 00002259 E9E3FE                          jmp	GETCH
  9793                                  
  9794                                  ;Skip one char in template
  9795                                  SKIPONE:
  9796 0000225C 38DF                    	cmp	bh,bl
  9797 0000225E 74F9                    	jz	short GETCH2		;At end of template
  9798 00002260 FEC7                    	inc	bh			;Ahead in templat
  9799 00002262 46                      	inc	si
  9800 00002263 E9D9FE                  	jmp	GETCH
  9801                                  
  9802                                  SKIPSTR:
  9803 00002266 E80700                  	call	FINDOLD                 ;Find out how far to go
  9804 00002269 01CE                            add	si,cx			;Go there
  9805 0000226B 00CF                            add	bh,cl
  9806 0000226D E9CFFE                          jmp	GETCH
  9807                                  
  9808                                  ;Get the next user char, and look ahead in template for a match
  9809                                  ;CX indicates how many chars to skip to get there on output
  9810                                  ;NOTE: WARNING: If the operation cannot be done, the return
  9811                                  ;       address is popped off and a jump to GETCH is taken.
  9812                                  ;       Make sure nothing extra on stack when this routine
  9813                                  ;       is called!!! (no PUSHes before calling it).
  9814                                  FINDOLD:
  9815 00002270 E819FE                          call	_$STD_CON_INPUT_NO_ECHO
  9816                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
  9817 00002273 363A06[D212]            	CMP     AL,[SS:ESCCHAR]	; did he type a function key?
  9818                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
  9819                                  	;CMP	AL,[CS:ESCCHAR]
  9820 00002278 7505                    	JNZ     SHORT FINDSETUP		; no, set up for scan
  9821 0000227A E80FFE                          CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
  9822 0000227D EB1D                            JMP     SHORT NOTFND		; go try again
  9823                                  FINDSETUP:
  9824 0000227F 88D9                    	mov	cl,bl
  9825 00002281 28F9                            sub	cl,bh		;CX is number of chars to end of template
  9826 00002283 7417                    	jz	short NOTFND	;At end of template
  9827 00002285 49                              dec	cx		;Cannot point past end, limit search
  9828 00002286 7414                            jz	short NOTFND	 ;If only one char in template, forget it
  9829 00002288 06                      	push	es
  9830 00002289 1E                      	push	ds
  9831 0000228A 07                      	pop	es
  9832 0000228B 57                      	push	di
  9833 0000228C 89F7                    	mov	di,si		;Template to ES:DI
  9834 0000228E 47                      	inc	di
  9835 0000228F F2AE                    	repne	scasb		;Look
  9836 00002291 5F                      	pop	di
  9837 00002292 07                      	pop	es
  9838 00002293 7507                    	jnz	short NOTFND	;Didn't find the char
  9839 00002295 F6D1                            not	cl		;Turn how far to go into how far we went
  9840 00002297 00D9                            add	cl,bl		;Add size of template
  9841 00002299 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
  9842                                  FINDOLD_RETN:
  9843 0000229B C3                      	retn
  9844                                  
  9845                                  NOTFND:
  9846 0000229C 5D                              pop	bp              ;Chuck return address
  9847 0000229D E99FFE                          jmp	GETCH
  9848                                  
  9849                                  REEDIT:
  9850 000022A0 B040                    	mov	al,'@'		;Output re-edit character
  9851 000022A2 E8DF00                  	call	OUTT
  9852 000022A5 5F                      	pop	di
  9853 000022A6 57                      	push	di
  9854 000022A7 06                      	push	es
  9855 000022A8 1E                      	push	ds
  9856 000022A9 E8E6FE                  	call	COPYNEW		;Copy current line into template
  9857 000022AC 1F                      	pop	ds
  9858 000022AD 07                      	pop	es
  9859 000022AE 5E                      	pop	si
  9860 000022AF 88F3                    	mov	bl,dh		;Size of line is new size template
  9861 000022B1 E9F5FE                  	jmp	PUTNEW		;Start over again
  9862                                  
  9863                                  EXITINS:
  9864                                  ENTERINS:
  9865 000022B4 36F616[1405]            	not	byte [SS:INSMODE]
  9866 000022B9 E983FE                  	jmp	GETCH
  9867                                  
  9868                                  ;Put a real live ^Z in the buffer (embedded)
  9869                                  CTRLZ:
  9870 000022BC B01A                    	mov	al,"Z"-"@" ; 1Ah
  9871 000022BE E9A0FE                          jmp	SAVCH
  9872                                  
  9873                                  ;Output a CRLF
  9874                                  CRLF:
  9875 000022C1 B00D                    	mov	al,c_CR ; 0Dh 
  9876 000022C3 E8BE00                  	call	OUTT
  9877 000022C6 B00A                    	mov	al,c_LF ; 0Ah
  9878 000022C8 E9B900                  	jmp	OUTT
  9879                                  
  9880                                  ;
  9881                                  ;----------------------------------------------------------------------------
  9882                                  ;
  9883                                  ;**	$RAW_CON_IO - Do Raw Console I/O
  9884                                  ;
  9885                                  ;	Input or output raw character from console, no echo
  9886                                  ;
  9887                                  ;	ENTRY	DL = -1 if input
  9888                                  ;		   =  output character if output
  9889                                  ;	EXIT	(AL) = input character if input
  9890                                  ;	USES	all
  9891                                  ;
  9892                                  ;----------------------------------------------------------------------------
  9893                                  ; 20/07/2018 - Retro DOS v3.0
  9894                                  
  9895                                  _$RAW_CON_IO:			; System call 6
  9896                                  
  9897 000022CB 88D0                            MOV     AL,DL
  9898 000022CD 3CFF                            CMP     AL,-1
  9899 000022CF 7542                            JNZ     SHORT RAWOUT
  9900                                          ;LES 	DI,[USER_SP]	; Get pointer to register save area
  9901 000022D1 36C43E[1E05]                    LES     DI,[SS:USER_SP] ; 12/03/2018
  9902 000022D6 31DB                    	XOR     BX,BX
  9903                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9904 000022D8 E8E31D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9905                                          ;JC	SHORT RET17
  9906 000022DB 72BE                            jc	short FINDOLD_RETN
  9907 000022DD B401                    	MOV     AH,1
  9908 000022DF E86F2A                          CALL	IOFUNC
  9909 000022E2 750B                            JNZ     SHORT RESFLG
  9910 000022E4 E8EE33                          CALL	SPOOLINT
  9911                                          ;OR	BYTE [ES:DI+16H],40H
  9912 000022E7 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
  9913 000022EC 30C0                            XOR     AL,AL
  9914                                  RET17:
  9915 000022EE C3                              RETN
  9916                                  
  9917                                  RESFLG:
  9918                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
  9919 000022EF 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
  9920                                  				; Reset user's zero flag
  9921                                  ;RILP:
  9922                                  rci0:
  9923 000022F4 E8DE33                       	CALL	SPOOLINT
  9924                                  
  9925                                  ;
  9926                                  ;----------------------------------------------------------------------------
  9927                                  ;
  9928                                  ;**	$Raw_CON_INPUT - Raw Console Input
  9929                                  ;
  9930                                  ;	Input raw character from console, no echo
  9931                                  ;
  9932                                  ;	ENTRY	none
  9933                                  ;	EXIT	(al) = character
  9934                                  ;	USES	all
  9935                                  ;
  9936                                  ;----------------------------------------------------------------------------
  9937                                  ;
  9938                                  
  9939                                  ;rci0:	invoke	SPOOLINT
  9940                                  
  9941                                  	;entry	$RAW_CON_INPUT
  9942                                  
  9943                                  _$RAW_CON_INPUT:		; System call 7
  9944 000022F7 53                      	push	bx
  9945 000022F8 31DB                            XOR     BX,BX
  9946                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9947 000022FA E8C11D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9948 000022FD 5B                              pop	bx
  9949 000022FE 72EE                    	JC	SHORT RET17
  9950 00002300 B401                            MOV     AH,1
  9951 00002302 E84C2A                          CALL	IOFUNC
  9952                                  	;JZ	SHORT RILP	; MSDOS 2.11
  9953                                  	;XOR     AH,AH
  9954                                          ;CALL	IOFUNC
  9955                                          ;RETN
  9956 00002305 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
  9957 00002307 B484                    	MOV	AH,84h
  9958 00002309 CD2A                    	INT	int_IBM  ; int 2Ah
  9959 0000230B EBE7                    	JMP	short rci0
  9960                                  rci5:	
  9961 0000230D 30E4                            XOR     AH,AH
  9962 0000230F E83F2A                          CALL	IOFUNC
  9963 00002312 C3                              RETN
  9964                                  
  9965                                  ;
  9966                                  ;       Output the character in AL to stdout
  9967                                  ;
  9968                                  	;entry   RAWOUT
  9969                                  
  9970                                  RAWOUT:
  9971 00002313 53                              PUSH    BX
  9972 00002314 BB0100                          MOV     BX,1
  9973                                  
  9974                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9975 00002317 E8A41D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9976 0000231A 721B                            JC      SHORT RAWRET1
  9977                                  	;
  9978                                  	; MSDOS 2.11
  9979                                          ;TEST	BYTE [SI+18H],080H	; output to file?
  9980                                          ;JZ	SHORT RAWNORM		; if so, do normally
  9981                                          ;PUSH	DS
  9982                                          ;PUSH	SI
  9983                                          ;LDS	SI,[SI+19H]		; output to special?
  9984                                  	;TEST	BYTE [SI+4],ISSPEC
  9985                                  	;POP	SI
  9986                                  	;
  9987                                          
  9988                                  	; MSDOS 3.3 & MSDOS 6.0
  9989                                  	;mov	bx,[si+5]
  9990 0000231C 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
  9991                                   ;
  9992                                   ; If we are a network handle OR if we are not a local device then go do the
  9993                                   ; output the hard way.
  9994                                   ;	
  9995                                  	;and	bx,8080h
  9996 0000231F 81E38080                	AND	BX,sf_isnet+devid_device
  9997                                  	;cmp	bx,80h
  9998 00002323 81FB8000                	CMP	BX,devid_device
  9999 00002327 7510                    	jnz     short RAWNORM
 10000 00002329 1E                      	push    ds
 10001                                  	;lds	bx,[si+7]
 10002 0000232A C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10003                                  	;test	byte [bx+4],10h
 10004 0000232D F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10005                                  	;
 10006                                  
 10007 00002331 1F                              POP     DS
 10008 00002332 7405                            JZ      SHORT RAWNORM		; if not, do normally
 10009 00002334 CD29                            INT     int_fastcon   ; int 29h	; quickly output the char
 10010                                  
 10011                                          ;JMP     SHORT RAWRET
 10012                                  ;RAWNORM:
 10013                                  ;	CALL    RAWOUT3
 10014                                  
 10015                                  RAWRET: 
 10016 00002336 F8                      	CLC
 10017                                  RAWRET1:
 10018 00002337 5B                              POP     BX
 10019                                  RAWRET2:
 10020 00002338 C3                      	RETN
 10021                                  
 10022                                  RAWNORM:
 10023 00002339 E80700                  	CALL    RAWOUT3
 10024 0000233C EBF8                    	jmp	short RAWRET
 10025                                  
 10026                                  ;
 10027                                  ;       Output the character in AL to handle in BX
 10028                                  ;
 10029                                  ;	entry   RAWOUT2
 10030                                  
 10031                                  RAWOUT2:
 10032                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10033                                  	;JC	SHORT RET18
 10034 0000233E E87D1D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10035 00002341 72F5                    	JC	SHORT RAWRET2
 10036                                  RAWOUT3:
 10037 00002343 50                              PUSH    AX
 10038 00002344 EB03                            JMP     SHORT RAWOSTRT
 10039                                  ROLP:
 10040 00002346 E88C33                          CALL	SPOOLINT
 10041                                  
 10042                                  	; MSDOS 6.0
 10043                                  	;OR	word [DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10044                                  				;AN002; set control break
 10045                                  	;;invoke DSKSTATCHK
 10046                                  	;call	DSKSTATCHK	;AN002; check control break
 10047                                  
 10048                                  RAWOSTRT:
 10049 00002349 B403                            MOV     AH,3
 10050 0000234B E8032A                          CALL    IOFUNC
 10051 0000234E 74F6                            JZ      SHORT ROLP
 10052                                  
 10053                                  	; MSDOS 6.0
 10054                                  ;SR;
 10055                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10056                                  ;the user failed. We do not send a char if this happens. We however return 
 10057                                  ;to the caller with carry clear because this DOS call does not return any
 10058                                  ;status. 
 10059                                  ;
 10060                                  	;inc	ax		;fail on I24 if ax = -1
 10061                                  	;POP	AX
 10062                                  	;jz	short nosend	;yes, do not send char
 10063                                  	;MOV	AH,2
 10064                                  	;call	IOFUNC
 10065                                  ;nosend:
 10066                                  	;CLC			; Clear carry indicating successful
 10067                                  	;retn
 10068                                  
 10069                                  	; MSDOS 3.3 & MSDOS 2.11
 10070 00002350 58                              POP     AX
 10071 00002351 B402                            MOV     AH,2
 10072 00002353 E8FB29                          CALL    IOFUNC
 10073 00002356 F8                              CLC                     ; Clear carry indicating successful
 10074                                  RET18:    
 10075 00002357 C3                      	RETN
 10076                                  
 10077                                  ;;10/08/2018
 10078                                  ; 20/07/2018 - Retro DOS v3.0
 10079                                  ; ---------------------------------------------------------------------------
 10080                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10081                                  ; ---------------------------------------------------------------------------
 10082                                  
 10083                                  ; This routine is called at DOS init
 10084                                  
 10085                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10086                                  ;;OUTMES:
 10087                                  ;;	;LODS	CS:BYTE PTR [SI]
 10088                                  ;;	CS	LODSB
 10089                                  ;;	CMP     AL,"$" ; 24h
 10090                                  ;;	JZ	SHORT RET18
 10091                                  ;;	CALL	OUTT
 10092                                  ;;	JMP     SHORT OUTMES
 10093                                  
 10094                                  ; ---------------------------------------------------------------------------
 10095                                  
 10096                                  ; 20/07/2018 - Retro DOS v3.0
 10097                                  
 10098                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10099                                  
 10100                                  ;
 10101                                  ;----------------------------------------------------------------------------
 10102                                  ;
 10103                                  ; Inputs:
 10104                                  ;	AX=0 save the DEVCALL request packet
 10105                                  ;	  =1 restore the DEVCALL request packet
 10106                                  ; Function:
 10107                                  ;	save or restore the DEVCALL packet
 10108                                  ; Returns:
 10109                                  ;	none
 10110                                  ;
 10111                                  ;----------------------------------------------------------------------------
 10112                                  ;
 10113                                  
 10114                                  Save_Restore_Packet:
 10115 00002358 1E                      	PUSH	DS
 10116 00002359 06                      	PUSH	ES
 10117 0000235A 56                      	PUSH	SI
 10118 0000235B 57                      	PUSH	DI
 10119                                  
 10120                                  	; 09/09/2018
 10121 0000235C BF[730F]                	mov	di,FAKE_STACK_2F 
 10122 0000235F BE[0603]                	mov	si,DEVCALL
 10123                                  	;
 10124 00002362 83F800                  	CMP	AX,0		; save packet
 10125                                  	;JZ	short save_packet
 10126 00002365 7402                    	je	short set_seg 
 10127                                  
 10128                                  	; MSDOS 6.0
 10129                                  restore_packet:
 10130                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	 ;sourec
 10131                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	 ;destination
 10132                                  	; MSDOS 3.3
 10133                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10134                                  	;mov	di,DEVCALL  ; 09/09/2018
 10135                                  	;
 10136                                  	;JMP	short set_seg
 10137                                  	
 10138                                  	; 09/09/2018
 10139 00002367 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10140                                  
 10141                                  	; MSDOS 6.0
 10142                                  save_packet:
 10143                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	 ;destination
 10144                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	 ;source
 10145                                  	; 09/09/2018
 10146                                  	; MSDOS 3.3
 10147                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10148                                  	;mov	si,DEVCALL ; 09/09/2018
 10149                                  
 10150                                  set_seg:
 10151                                  	; MSDOS 6.0
 10152                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 10153                                  	; MSDOS 3.3
 10154 00002369 8CC8                    	mov	ax,cs
 10155                                  	;
 10156 0000236B 8ED8                    	MOV	DS,AX
 10157 0000236D 8EC0                    	MOV	ES,AX
 10158 0000236F B90B00                  	MOV	CX,11		; 11 words to move
 10159 00002372 F3A5                    	REP	MOVSW
 10160                                  
 10161 00002374 5F                      	POP	DI
 10162 00002375 5E                      	POP	SI
 10163 00002376 07                      	POP	ES
 10164 00002377 1F                      	POP	DS
 10165 00002378 C3                      	retn
 10166                                  
 10167                                  ;============================================================================
 10168                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10169                                  ;============================================================================
 10170                                  ; 20/07/2018 - Retro DOS v3.0
 10171                                  
 10172                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10173                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10174                                  ;hkn;	not valid. 
 10175                                  
 10176                                  ;
 10177                                  ;----------------------------------------------------------------------------
 10178                                  ;
 10179                                  ;**	$STD_CON_INPUT - System Call 1
 10180                                  ;
 10181                                  ;	Input character from console, echo
 10182                                  ;
 10183                                  ;	ENTRY	none
 10184                                  ;	EXIT	(al) = character
 10185                                  ;	USES	ALL
 10186                                  ;
 10187                                  ;----------------------------------------------------------------------------
 10188                                  ;
 10189                                  
 10190                                  _$STD_CON_INPUT:	;System call 1
 10191                                  	
 10192 00002379 E810FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10193 0000237C 50                      	PUSH	AX
 10194 0000237D E80400                  	CALL	OUTT
 10195 00002380 58                      	POP	AX
 10196                                  CON_INPUT_RETN:	
 10197 00002381 C3                      	RETN
 10198                                  
 10199                                  ;
 10200                                  ;----------------------------------------------------------------------------
 10201                                  ;
 10202                                  ;**	$STD_CON_OUTPUT - System Call 2
 10203                                  ;
 10204                                  ;	Output character to console
 10205                                  ;
 10206                                  ;	ENTRY	(dl) = character
 10207                                  ;	EXIT	none
 10208                                  ;	USES	all
 10209                                  ;
 10210                                  ;----------------------------------------------------------------------------
 10211                                  ;
 10212                                  
 10213                                  _$STD_CON_OUTPUT:	;System call 2
 10214                                  
 10215 00002382 88D0                    	MOV	AL,DL
 10216                                  
 10217                                  OUTT:
 10218 00002384 3C20                    	CMP	AL,20H ; " "
 10219 00002386 725E                    	JB	SHORT CTRLOUT
 10220 00002388 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10221 0000238A 7405                    	JZ	SHORT OUTCH
 10222                                  OUTCHA:	
 10223                                  	;INC	BYTE PTR [CARPOS]
 10224 0000238C 36FE06[A701]            	INC	BYTE [SS:CARPOS]
 10225                                  OUTCH:
 10226 00002391 1E                      	PUSH	DS
 10227 00002392 56                      	PUSH	SI
 10228                                  	;INC	BYTE PTR [CHARCO]		;invoke  statchk...
 10229                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 10230 00002393 36FE06[AE02]            	INC	BYTE [SS:CHARCO]	
 10231                                  	;AND	BYTE [SS:CHARCO],00111111B
 10232                                  	; 14/03/2018
 10233 00002398 368026[AE02]03          	and	byte [SS:CHARCO],3  ; IBMDOS.COM, MSDOS 3.3, MSDOS 2.11
 10234 0000239E 7505                    	JNZ	SHORT OUTSKIP
 10235 000023A0 50                      	PUSH	AX
 10236 000023A1 E85033                  	CALL	STATCHK
 10237 000023A4 58                      	POP	AX
 10238                                  OUTSKIP:
 10239 000023A5 E86BFF                  	CALL	RAWOUT				;output the character
 10240 000023A8 5E                      	POP	SI
 10241 000023A9 1F                      	POP	DS
 10242                                  
 10243                                  	;TEST	BYTE PTR [PFLAG],-1
 10244                                  	;retz
 10245 000023AA 36F606[AC02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 10246 000023B0 74CF                    	JZ	SHORT CON_INPUT_RETN
 10247                                  
 10248 000023B2 53                      	PUSH	BX
 10249 000023B3 1E                      	PUSH	DS
 10250 000023B4 56                      	PUSH	SI
 10251 000023B5 BB0100                  	MOV	BX,1
 10252                                  	; 20/07/2018 - Retro DOS v3.0
 10253                                  	; MSDOS 3.3
 10254                                  	; MSDOS 6.0 (CPMIO2.ASM)
 10255 000023B8 E8031D                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI 
 10256                                  					;hkn; to sft entry
 10257 000023BB 7226                    	JC	SHORT TRIPOPJ
 10258                                  	;mov	bx,[si+5]
 10259 000023BD 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 10260                                  	;test	bx,8000h
 10261 000023C0 F7C30080                	TEST	BX,sf_isnet	; 8000H		; output to NET?
 10262 000023C4 751D                    	JNZ	short TRIPOPJ 			; if so, no echo
 10263                                  	;test	bx,80h
 10264 000023C6 F7C38000                	TEST	BX,devid_device ; 80H		; output to file?
 10265 000023CA 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 10266                                  	; 14/03/2018
 10267                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 10268                                  	;jc	short TRIPOPJ
 10269                                  	; MSDOS 2.11
 10270                                  	;test	byte [SI+18H], 80h
 10271                                  	;jz	short TRIPOPJ
 10272 000023CC BB0400                  	MOV	BX,4
 10273 000023CF E8EC1C                  	CALL	GET_IO_SFT
 10274 000023D2 720F                    	JC	SHORT TRIPOPJ
 10275                                  	;test	word [si+5], 800h
 10276 000023D4 F744050008              	TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H 
 10277                                  						; StdPrn redirected?
 10278                                  	;JZ	SHORT LISSTRT2J			; No, OK to echo
 10279 000023D9 0F848E00                	jz	LISSTRT2 ; 10/08/2018 
 10280                                  	;MOV	BYTE [PFLAG],0			
 10281 000023DD 36C606[AC02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 10282                                  	; MSDOS 2.11
 10283                                  	;mov	bx,4
 10284                                  	;jmp	short LISSTRT2
 10285                                  	
 10286                                  TRIPOPJ:
 10287                                  	; 20/07/2018
 10288 000023E3 E98800                  	JMP	TRIPOP
 10289                                  
 10290                                  ;LISSTRT2J:
 10291                                  ;	JMP	LISSTRT2
 10292                                  
 10293                                  CTRLOUT:
 10294 000023E6 3C0D                    	CMP	AL,c_CR ; 0Dh
 10295 000023E8 7420                    	JZ	SHORT ZERPOS
 10296 000023EA 3C08                    	CMP	AL,c_BS ; 8
 10297 000023EC 7428                    	JZ	SHORT BACKPOS
 10298 000023EE 3C09                    	CMP	AL,c_HT ; 9
 10299 000023F0 759F                    	JNZ	SHORT OUTCH
 10300                                  	;MOV	AL,[CARPOS]
 10301 000023F2 36A0[A701]              	MOV	AL,[SS:CARPOS]
 10302 000023F6 0CF8                    	OR	AL,0F8H
 10303 000023F8 F6D8                    	NEG	AL
 10304                                  
 10305                                  TAB:
 10306 000023FA 51                      	PUSH	CX
 10307 000023FB 88C1                    	MOV	CL,AL
 10308 000023FD B500                    	MOV	CH,0
 10309 000023FF E307                    	JCXZ	POPTAB
 10310                                  TABLP:
 10311 00002401 B020                    	MOV	AL," "
 10312 00002403 E87EFF                  	CALL	OUTT
 10313 00002406 E2F9                    	LOOP	TABLP
 10314                                  POPTAB:
 10315 00002408 59                      	POP	CX
 10316 00002409 C3                      	RETN
 10317                                  
 10318                                  ZERPOS:
 10319                                  	;MOV	BYTE PTR [CARPOS],0
 10320 0000240A 36C606[A701]00          	MOV	BYTE [SS:CARPOS],0
 10321                                  	; 10/08/2018
 10322 00002410 E97EFF                  	JMP	OUTCH
 10323                                  OUTJ:	
 10324 00002413 E96EFF                  	JMP	OUTT
 10325                                  
 10326                                  BACKPOS:
 10327                                  	;DEC	BYTE PTR [CARPOS]
 10328 00002416 36FE0E[A701]            	DEC	BYTE [SS:CARPOS]
 10329 0000241B E973FF                  	JMP	OUTCH
 10330                                  
 10331                                  BUFOUT:
 10332 0000241E 3C20                    	CMP	AL," "
 10333 00002420 73F1                    	JAE	SHORT OUTJ		;Normal char
 10334 00002422 3C09                    	CMP	AL,9
 10335 00002424 74ED                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 10336                                  	;DOS 3.3  7/14/86
 10337 00002426 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 10338 00002428 740D                    	JZ	short CTRLU
 10339 0000242A 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 10340 0000242C 7409                    	JZ	short CTRLU
 10341                                  NOT_CTRLU:
 10342                                  	;DOS 3.3  7/14/86
 10343 0000242E 50                      	PUSH	AX
 10344 0000242F B05E                    	MOV	AL,"^"
 10345 00002431 E850FF                  	CALL	OUTT		;Print '^' before control chars
 10346 00002434 58                      	POP	AX
 10347 00002435 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 10348                                  CTRLU:
 10349 00002437 E84AFF                  	CALL	OUTT
 10350                                  BUFOUT_RETN:
 10351 0000243A C3                      	RETN
 10352                                  
 10353                                  ;
 10354                                  ;----------------------------------------------------------------------------
 10355                                  ;
 10356                                  ;**	$STD_AUX_INPUT - System Call 3
 10357                                  ;
 10358                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 10359                                  ;
 10360                                  ;	ENTRY	none
 10361                                  ;	EXIT	(al) = character
 10362                                  ;	USES	all
 10363                                  ;
 10364                                  ;----------------------------------------------------------------------------
 10365                                  ;
 10366                                  
 10367                                  _$STD_AUX_INPUT:	;System call 3
 10368                                  
 10369 0000243B E8B632                  	CALL	STATCHK
 10370 0000243E BB0300                  	MOV	BX,3
 10371 00002441 E87A1C                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 10372                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 10373                                  	;retc
 10374 00002444 72F4                    	JC	SHORT BUFOUT_RETN
 10375 00002446 EB03                    	JMP	SHORT TAISTRT
 10376                                  AUXILP:
 10377 00002448 E88A32                  	CALL	SPOOLINT
 10378                                  TAISTRT:
 10379 0000244B B401                    	MOV	AH,1
 10380 0000244D E80129                  	CALL	IOFUNC
 10381 00002450 74F6                    	JZ	SHORT AUXILP
 10382 00002452 30E4                    	XOR	AH,AH
 10383 00002454 E8FA28                  	CALL	IOFUNC
 10384 00002457 C3                      	RETN
 10385                                  
 10386                                  ;
 10387                                  ;----------------------------------------------------------------------------
 10388                                  ;
 10389                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 10390                                  ;
 10391                                  ;	ENTRY	(dl) = character
 10392                                  ;	EXIT	none
 10393                                  ;	USES	all
 10394                                  ;
 10395                                  ;----------------------------------------------------------------------------
 10396                                  ;
 10397                                  
 10398                                  _$STD_AUX_OUTPUT:	;System call 4
 10399                                  
 10400 00002458 53                      	PUSH	BX
 10401 00002459 BB0300                  	MOV	BX,3
 10402 0000245C EB04                    	JMP	SHORT SENDOUT
 10403                                  
 10404                                  ;
 10405                                  ;----------------------------------------------------------------------------
 10406                                  ;
 10407                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 10408                                  ;
 10409                                  ;	ENTRY	(dl) = character
 10410                                  ;	EXIT	none
 10411                                  ;	USES	all
 10412                                  ;
 10413                                  ;----------------------------------------------------------------------------
 10414                                  ;
 10415                                  
 10416                                  _$STD_PRINTER_OUTPUT:	;System call 5
 10417                                  
 10418 0000245E 53                      	PUSH	BX
 10419 0000245F BB0400                  	MOV	BX,4
 10420                                  
 10421                                  SENDOUT:
 10422 00002462 88D0                    	MOV	AL,DL
 10423 00002464 50                      	PUSH	AX
 10424 00002465 E88C32                  	CALL	STATCHK
 10425 00002468 58                      	POP	AX
 10426 00002469 1E                      	PUSH	DS
 10427 0000246A 56                      	PUSH	SI
 10428                                  LISSTRT2:
 10429 0000246B E8D0FE                  	CALL	RAWOUT2
 10430                                  TRIPOP:
 10431 0000246E 5E                      	POP	SI
 10432 0000246F 1F                      	POP	DS
 10433 00002470 5B                      	POP	BX
 10434                                  SCIS_RETN:	; 20/07/2018
 10435 00002471 C3                      	RETN
 10436                                  ;
 10437                                  ;----------------------------------------------------------------------------
 10438                                  ;
 10439                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 10440                                  ;
 10441                                  ;	Check console input status
 10442                                  ;
 10443                                  ;	ENTRY	none
 10444                                  ;	EXIT	AL = -1 character available, = 0 no character
 10445                                  ;	USES	all
 10446                                  ;
 10447                                  ;----------------------------------------------------------------------------
 10448                                  ;
 10449                                  
 10450                                  _$STD_CON_INPUT_STATUS:		 ;System call 11
 10451                                  
 10452 00002472 E87F32                  	CALL	STATCHK
 10453 00002475 B000                    	MOV	AL,0			; no xor!!
 10454                                  	;retz
 10455 00002477 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 10456 00002479 0CFF                    	OR	AL,-1
 10457                                  ;SCIS_RETN:
 10458 0000247B C3                      	RETN
 10459                                  
 10460                                  ;
 10461                                  ;----------------------------------------------------------------------------
 10462                                  ;
 10463                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 10464                                  ;
 10465                                  ;	Flush console input buffer and perform call in AL
 10466                                  ;
 10467                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 10468                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 10469                                  ;		return arguments for the fcn supplied in (AL)
 10470                                  ;	USES	all
 10471                                  ;
 10472                                  ;----------------------------------------------------------------------------
 10473                                  ;
 10474                                  
 10475                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 10476                                  
 10477 0000247C 50                      	PUSH	AX
 10478 0000247D 52                      	PUSH	DX
 10479 0000247E 31DB                    	XOR	BX,BX
 10480 00002480 E83B1C                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 10481                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 10482 00002483 7205                    	JC	SHORT BADJFNCON
 10483 00002485 B404                    	MOV	AH,4
 10484 00002487 E8C728                  	CALL	IOFUNC
 10485                                  
 10486                                  BADJFNCON:
 10487 0000248A 5A                      	POP	DX
 10488 0000248B 58                      	POP	AX
 10489 0000248C 88C4                    	MOV	AH,AL
 10490 0000248E 3C01                    	CMP	AL,1
 10491 00002490 7413                    	JZ	SHORT REDISPJ
 10492 00002492 3C06                    	CMP	AL,6
 10493 00002494 740F                    	JZ	SHORT REDISPJ
 10494 00002496 3C07                    	CMP	AL,7
 10495 00002498 740B                    	JZ	SHORT REDISPJ
 10496 0000249A 3C08                    	CMP	AL,8
 10497 0000249C 7407                    	JZ	SHORT REDISPJ
 10498 0000249E 3C0A                    	CMP	AL,10
 10499 000024A0 7403                    	JZ	SHORT REDISPJ
 10500 000024A2 B000                    	MOV	AL,0
 10501 000024A4 C3                      	RETN
 10502                                  
 10503                                  REDISPJ:
 10504 000024A5 FA                      	CLI
 10505                                  	;transfer REDISP
 10506 000024A6 E99CF0                  	JMP	REDISP
 10507                                  
 10508                                  ;============================================================================
 10509                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 10510                                  ;============================================================================
 10511                                  ; 20/07/2018 - Retro DOS v3.0
 10512                                  
 10513                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 10514                                  ;
 10515                                  ;	$GET_FCB_POSITION
 10516                                  ;	$FCB_DELETE
 10517                                  ;	$GET_FCB_FILE_LENGTH
 10518                                  ;	$FCB_CLOSE
 10519                                  ;	$FCB_RENAME
 10520                                  ;	SaveFCBInfo
 10521                                  ;	ResetLRU
 10522                                  ;	SetOpenAge
 10523                                  ;	LRUFCB
 10524                                  ;	FCBRegen
 10525                                  ;	BlastSFT
 10526                                  ;	CheckFCB
 10527                                  ;	SFTFromFCB
 10528                                  ;	FCBHardErr
 10529                                  ;
 10530                                  ;	Revision history:
 10531                                  ;
 10532                                  ;		Created: ARR 4 April 1983"
 10533                                  ;			 MZ  6 June  1983 completion of functions
 10534                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 10535                                  ;					  times.  Change so successive closes work by
 10536                                  ;					  always returning OK.	Also, detect I/O to
 10537                                  ;					  already closed FCB and return EOF.
 10538                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 10539                                  ;					  out of sft into FCB for reconnection
 10540                                  ;
 10541                                  ;		A000	 version 4.00  Jan. 1988
 10542                                  
 10543                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 10544                                  ;----------------------------------------------------------------------------
 10545                                  ;
 10546                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 10547                                  ;	extent and next record field and set the random record field to point
 10548                                  ;	to that record
 10549                                  ;
 10550                                  ;   Inputs:	DS:DX point to a possible extended FCB
 10551                                  ;   Outputs:	The random record field of the FCB is set to the current record
 10552                                  ;   Registers modified: all
 10553                                  ;
 10554                                  ;----------------------------------------------------------------------------
 10555                                  ;
 10556                                  
 10557                                  _$GET_FCB_POSITION:
 10558 000024A9 E81D05                  	call	GetExtended		; point to FCB
 10559 000024AC E8ED04                  	call	GetExtent		; DX:AX is current record
 10560                                  	;mov	[si+21h],ax
 10561 000024AF 894421                  	MOV	[SI+SYS_FCB.RR],AX ; drop in low order piece
 10562                                  	;mov	[si+23h],dl
 10563 000024B2 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 10564                                  	;cmp	word [si+0Eh],64
 10565 000024B5 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 10566 000024B9 7303                    	JAE	short GetFCBBye
 10567                                  	;mov	[si+24h],dh
 10568 000024BB 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 10569                                  GetFCBBye:
 10570 000024BE E95BF2                  	jmp	FCB_RET_OK
 10571                                  
 10572                                  
 10573                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 10574                                  ;----------------------------------------------------------------------------
 10575                                  ;
 10576                                  ;**	$FCB_Delete - Delete from FCB Template
 10577                                  ;
 10578                                  ;	given an FCB, remove all directory entries in the current
 10579                                  ;	directory that have names that match the FCB's ?  marks.
 10580                                  ;
 10581                                  ;	ENTRY	(DS:DX) = address of FCB
 10582                                  ;	EXIT	entries matching the FCB are deleted
 10583                                  ;		(al) = ff iff no entries were deleted
 10584                                  ;	USES	all
 10585                                  ;
 10586                                  ;----------------------------------------------------------------------------
 10587                                  ;
 10588                                  
 10589                                  _$FCB_DELETE:		; System call 19
 10590                                  					; OpenBuf is in DOSDATA
 10591 000024C1 BF[6003]                	MOV	DI,OPENBUF 		; appropriate place 
 10592                                  
 10593 000024C4 E82545                  	call	TransFCB		; convert FCB to path
 10594 000024C7 720A                    	JC	short BadPath 		; signal no deletions
 10595                                  
 10596 000024C9 16                      	push	SS
 10597 000024CA 1F                      	pop	DS			; SS is DOSDATA
 10598                                  
 10599 000024CB E8A20D                  	call	DOS_DELETE		; wham
 10600 000024CE 7203                    	JC	short BadPath
 10601                                  GoodPath:
 10602 000024D0 E949F2                  	jmp	FCB_RET_OK		; do a good return
 10603                                  BadPath:
 10604                                  	; Error code is in AX
 10605                                  
 10606 000024D3 E949F2                  	jmp	FCB_RET_ERR		; let someone else signal the error
 10607                                  
 10608                                  
 10609                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 10610                                  ;----------------------------------------------------------------------------
 10611                                  ;
 10612                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 10613                                  ;	file in records (rounded up if partial).
 10614                                  ;
 10615                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 10616                                  ;   Outputs:	Random record field updated to reflect the number of records
 10617                                  ;   Registers modified: all
 10618                                  ;
 10619                                  ;----------------------------------------------------------------------------
 10620                                  ;
 10621                                  
 10622                                  _$GET_FCB_FILE_LENGTH:
 10623                                  
 10624 000024D6 E8F004                  	call	GetExtended		; get real FCB pointer
 10625                                  					; DX points to Input FCB
 10626                                  
 10627                                  					; OpenBuf is in DOSDATA
 10628 000024D9 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 10629                                  
 10630 000024DC 1E                      	push	ds			; save pointer to true FCB
 10631 000024DD 56                      	push	si
 10632 000024DE E80B45                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 10633 000024E1 5E                      	pop	si
 10634 000024E2 1F                      	pop	ds
 10635 000024E3 72EE                    	JC	short BadPath
 10636 000024E5 1E                      	push	ds			; save pointer
 10637 000024E6 56                      	push	si
 10638 000024E7 16                      	push	ss		
 10639 000024E8 1F                      	pop	ds
 10640 000024E9 E80711                  	call	GET_FILE_INFO		; grab the info
 10641 000024EC 5E                      	pop	si			; get pointer back
 10642 000024ED 1F                      	pop	ds
 10643 000024EE 72E3                    	JC	short BadPath 		; invalid something
 10644 000024F0 89DA                    	MOV	DX,BX			; get high order size
 10645 000024F2 89F8                    	MOV	AX,DI			; get low order size
 10646                                  	;mov	 bx,[si+0Eh]
 10647 000024F4 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 10648 000024F7 09DB                    	OR	BX,BX			; empty record => 0 size for file
 10649 000024F9 7503                    	JNZ	short GetSize 		; not empty
 10650 000024FB BB8000                  	MOV	BX,128
 10651                                  GetSize:
 10652 000024FE 89C7                    	MOV	DI,AX			; save low order word
 10653 00002500 89D0                    	MOV	AX,DX			; move high order for divide
 10654 00002502 31D2                    	XOR	DX,DX			; clear out high
 10655 00002504 F7F3                    	DIV	BX			; wham
 10656 00002506 50                      	PUSH	AX			; save dividend
 10657 00002507 89F8                    	MOV	AX,DI			; get low order piece
 10658 00002509 F7F3                    	DIV	BX			; wham
 10659 0000250B 89D1                    	MOV	CX,DX			; save remainder
 10660 0000250D 5A                      	POP	DX			; get high order dividend
 10661 0000250E E306                    	JCXZ	LengthStore		; no roundup
 10662 00002510 83C001                  	ADD	AX,1
 10663 00002513 83D200                  	ADC	DX,0			; 32-bit increment
 10664                                  LengthStore:
 10665                                  	;mov	[si+21h],ax
 10666 00002516 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 10667                                  	;mov	[si+23h],dl
 10668 00002519 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 10669 0000251C 08F6                    	OR	DH,DH
 10670 0000251E 74B0                    	JZ	short GoodPath		; not storing insignificant zero
 10671                                  	;mov	[si+24h],dh
 10672 00002520 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 10673                                  GoodRet:
 10674                                  	;jmp	FCB_RET_OK
 10675 00002523 EBAB                    	jmp	short GoodPath
 10676                                  
 10677                                  ;Break <$FCB_Close - close a file>
 10678                                  ;----------------------------------------------------------------------------
 10679                                  ;
 10680                                  ;   $FCB_Close - given an FCB, look up the SFN and close it.  Do not free it
 10681                                  ;	as the FCB may be used for further I/O
 10682                                  ;
 10683                                  ;   Inputs:	DS:DX point to FCB
 10684                                  ;   Outputs:	AL = FF if file was not found on disk
 10685                                  ;   Registers modified: all
 10686                                  ;
 10687                                  ;----------------------------------------------------------------------------
 10688                                  ;
 10689                                  
 10690                                  _$FCB_CLOSE:		; System call 16
 10691                                  
 10692 00002525 30C0                    	XOR	AL,AL			; default search attributes
 10693 00002527 E89F04                  	call	GetExtended		; DS:SI point to real FCB
 10694 0000252A 7403                    	JZ	short NoAttr		; not extended
 10695 0000252C 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 10696                                  NoAttr:
 10697                                  					; SS override
 10698 0000252F 36A2[0605]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 10699 00002533 E80804                  	call	SFTFromFCB
 10700 00002536 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 10701                                  
 10702                                  	;
 10703                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 10704                                  	; there is no need to set the SFT's attribute.
 10705                                  	;
 10706                                  
 10707                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 10708                                  	;;; done
 10709                                  
 10710                                  	;mov	al,[es:di+4]
 10711 00002538 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 10712 0000253C 30E4                    	XOR	AH,AH
 10713 0000253E 50                      	PUSH	AX
 10714                                  
 10715                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 10716                                  	;;; done
 10717                                  
 10718 0000253F E8E34D                  	call	CheckShare
 10719 00002542 7508                    	JNZ	short NoStash
 10720 00002544 36A0[0605]              	MOV	AL,[SS:ATTRIB]
 10721                                  	;mov	[es:di+4],al
 10722 00002548 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 10723                                  NoStash:
 10724                                  	;mov	ax,[si+14h]
 10725 0000254C 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 10726                                  	;mov	[es:di+0Fh],ax
 10727 0000254F 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 10728                                  	;mov	ax,[si+16h]
 10729 00002553 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 10730                                  	;mov	[es:di+0Dh],ax
 10731 00002556 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 10732                                  	;mov	ax,[si+10h]
 10733 0000255A 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 10734                                  	;mov	[es:di+11h],ax
 10735 0000255D 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 10736                                  	;mov	ax,[si+12h]
 10737 00002561 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 10738                                  	;mov	[es:di+13h],ax
 10739 00002564 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 10740                                  	;or	word [es:di+5],4000h
 10741 00002568 26814D050040            	OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 10742 0000256E 16                      	push	ss
 10743 0000256F 1F                      	pop	ds
 10744 00002570 E84F15                  	call	DOS_CLOSE	; wham
 10745 00002573 C43E[3605]              	LES	DI,[THISSFT]
 10746                                  
 10747                                  	;;; 9/8/86 F.C. restore SFT attribute
 10748 00002577 59                      	POP	CX
 10749                                  	;mov	[es:di+4],cl
 10750 00002578 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 10751                                  	;;; 9/8/86 F.C. restore SFT attribute
 10752                                  
 10753 0000257C 9C                      	PUSHF
 10754                                  	;test	word [es:di],0FFFFh
 10755                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 10756                                  				; zero ref count gets blasted
 10757 0000257D 26833D00                	cmp	word [ES:DI],0
 10758 00002581 7507                    	jnz     short CloseOK
 10759 00002583 50                      	PUSH	AX
 10760 00002584 B04D                    	MOV	AL,'M'
 10761 00002586 E8DA02                  	call	BlastSFT
 10762 00002589 58                      	POP	AX
 10763                                  CloseOK:
 10764 0000258A 9D                      	POPF
 10765 0000258B 7396                    	JNC	short GoodRet
 10766                                  	;cmp	al,6
 10767 0000258D 3C06                    	CMP	AL,error_invalid_handle
 10768 0000258F 7492                    	JZ	short GoodRet
 10769                                  	;mov	al,2
 10770 00002591 B002                    	MOV	AL,error_file_not_found
 10771                                  fcb_close_err:
 10772 00002593 E989F1                  	jmp	FCB_RET_ERR
 10773                                  
 10774                                  ;
 10775                                  ;----------------------------------------------------------------------------
 10776                                  ;
 10777                                  ;**	$FCB_Rename - Rename a File
 10778                                  ;
 10779                                  ;	$FCB_Rename - rename a file in place within a directory.  Renames
 10780                                  ;	multiple files copying from the meta characters.
 10781                                  ;
 10782                                  ;	ENTRY	DS:DX point to an FCB.	The normal name field is the source
 10783                                  ;		    name of the files to be renamed.  Starting at offset 11h
 10784                                  ;		    in the FCB is the destination name.
 10785                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 10786                                  ;		AL = FF -> some files may have been renamed but:
 10787                                  ;			rename to existing file or source file not found
 10788                                  ;	USES	ALL
 10789                                  ;
 10790                                  ;----------------------------------------------------------------------------
 10791                                  ;
 10792                                  
 10793                                  _$FCB_RENAME:		; System call 23
 10794                                  
 10795 00002596 E83004                  	call	GetExtended		; get pointer to real FCB
 10796 00002599 52                      	push	dx
 10797 0000259A 8A04                    	MOV	AL,[SI] 		; get drive byte
 10798 0000259C 83C610                  	ADD	SI,10h			; point to destination
 10799                                  
 10800                                  					; RenBuf is in DOSDATA
 10801 0000259F BF[E003]                	MOV	DI,RENBUF		; point to destination buffer
 10802 000025A2 FF34                    	push	word [SI]
 10803 000025A4 1E                      	push	ds
 10804                                  	;push	di			; save source pointer for TransFCB
 10805                                  	; 16/01/2024 - BugFix !
 10806 000025A5 56                      	push	si
 10807 000025A6 8804                    	MOV	[SI],AL			; drop in real drive
 10808 000025A8 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 10809 000025AA E83F44                  	call	TransFCB		; munch this pathname
 10810 000025AD 5E                      	pop	si
 10811 000025AE 1F                      	pop	ds	
 10812 000025AF 8F04                    	pop	WORD [SI]		; get path back
 10813 000025B1 5A                      	pop	dx			; Original FCB pointer
 10814 000025B2 721A                    	JC	short fren90		; bad path -> error
 10815                                  
 10816                                  					; SS override for WFP_Start & Ren_WFP
 10817 000025B4 368B36[4A05]            	MOV	SI,[ss:WFP_START]	; get pointer
 10818 000025B9 368936[4C05]            	MOV	[ss:REN_WFP],SI		; stash it
 10819                                  
 10820                                  					; OpenBuf is in DOSDATA
 10821 000025BE BF[6003]                	MOV	DI,OPENBUF		; appropriate spot
 10822 000025C1 E82844                  	call	TransFCB		; wham
 10823                                  					; NOTE that this call is pointing
 10824                                  					;  back to the ORIGINAL FCB so
 10825                                  					;  SATTRIB gets set correctly
 10826 000025C4 7208                    	JC	short fren90		; error
 10827 000025C6 E8520E                  	call	DOS_RENAME
 10828 000025C9 7203                    	JC	short fren90
 10829 000025CB E94EF1                  	jmp	FCB_RET_OK
 10830                                  
 10831                                  ;	Error -
 10832                                  ;
 10833                                  ;	(al) = error code
 10834                                  
 10835                                  fren90:	
 10836 000025CE E94EF1                  	jmp	FCB_RET_ERR
 10837                                  
 10838                                  
 10839                                  ;Break <Misbehavior fixers>
 10840                                  ;
 10841                                  ;   FCBs suffer from several problems.	First, they are maintained in the
 10842                                  ;   user's space so he may move them at will.  Second, they have a small
 10843                                  ;   reserved area that may be used for system information.  Third, there was
 10844                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 10845                                  ;   usage.
 10846                                  ;
 10847                                  ;   This results in the following misbehavior:
 10848                                  ;
 10849                                  ;	infinite opens of the same file:
 10850                                  ;
 10851                                  ;	While (TRUE) {			While (TRUE) {
 10852                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 10853                                  ;	    Read (FCB); 		    Write (FCB);
 10854                                  ;	    }				    }
 10855                                  ;
 10856                                  ;	infinite opens of different files:
 10857                                  ;
 10858                                  ;	While (TRUE) {			While (TRUE) {
 10859                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 10860                                  ;	    Read (FCB); 		    Write (FCB);
 10861                                  ;	    }				    }
 10862                                  ;
 10863                                  ;	multiple closes of the same file:
 10864                                  ;
 10865                                  ;	FCBOpen (FCB);
 10866                                  ;	while (TRUE)
 10867                                  ;	    FCBClose (FCB);
 10868                                  ;
 10869                                  ;	I/O after closing file:
 10870                                  ;
 10871                                  ;	FCBOpen (FCB);
 10872                                  ;	while (TRUE) {
 10873                                  ;	    FCBWrite (FCB);
 10874                                  ;	    FCBClose (FCB);
 10875                                  ;	    }
 10876                                  ;
 10877                                  ;   The following is am implementation of a methodology for emulating the
 10878                                  ;   above with the exception of I/O after close.  We are NOT attempting to
 10879                                  ;   resolve that particular misbehavior.  We will enforce correct behaviour in
 10880                                  ;   FCBs when they refer to a network file or when there is file sharing on
 10881                                  ;   the local machine.
 10882                                  ;
 10883                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 10884                                  ;   structures depending on the file itself and the state of operations of the
 10885                                  ;   OS.  The information contained in this reserved field is enough to
 10886                                  ;   regenerate the SFT for the local non-shared file.  It is assumed that this
 10887                                  ;   regeneration procedure may be expensive.  The SFT for the FCB is
 10888                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 10889                                  ;
 10890                                  ;   No regeneration of SFTs is attempted for network FCBs.
 10891                                  ;
 10892                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 10893                                  ;   file sharer is working.  If the file sharer is present then the SFT is not
 10894                                  ;   regenerated.
 10895                                  ;
 10896                                  ;   Finally, if there is no local sharing, the full name of the file is no
 10897                                  ;   longer available.  We can make up for this by using the following
 10898                                  ;   information:
 10899                                  ;
 10900                                  ;	The Drive number (from the DPB).
 10901                                  ;	The physical sector of the directory that contains the entry.
 10902                                  ;	The relative position of the entry in the sector.
 10903                                  ;	The first cluster field.
 10904                                  ;	The last used SFT.
 10905                                  ;      OR In the case of a device FCB
 10906                                  ;	The low 6 bits of sf_flags (indicating device type)
 10907                                  ;	The pointer to the device header
 10908                                  ;
 10909                                  ;
 10910                                  ;   We read in the particular directory sector and examine the indicated
 10911                                  ;   directory entry.  If it matches, then we are kosher; otherwise, we fail.
 10912                                  ;
 10913                                  ;   Some key items need to be remembered:
 10914                                  ;
 10915                                  ;	Even though we are caching SFTs, they may contain useful sharing
 10916                                  ;	information.  We enforce good behavior on the FCBs.
 10917                                  ;
 10918                                  ;	Network support must not treat FCBs as impacting the ref counts on
 10919                                  ;	open VCs.  The VCs may be closed only at process termination.
 10920                                  ;
 10921                                  ;	If this is not an installed version of the DOS, file sharing will
 10922                                  ;	always be present.
 10923                                  ;
 10924                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 10925                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 10926                                  ;
 10927                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 10928                                  ;	and open_for_both.  This is so the FCB code in the sharer can find the
 10929                                  ;	proper OI record.
 10930                                  ;
 10931                                  ;   The test bits are:
 10932                                  ;
 10933                                  ;	00 -> local file
 10934                                  ;	40 -> sharing local
 10935                                  ;	80 -> network
 10936                                  ;	C0 -> local device
 10937                                  
 10938                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 10939                                  ;----------------------------------------------------------------------------
 10940                                  ;
 10941                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 10942                                  ;	pieces of information into the FCB to allow for subsequent
 10943                                  ;	regeneration. Poke LRU also.
 10944                                  ;
 10945                                  ;   Inputs:	ThisSFT points to a complete SFT.
 10946                                  ;		DS:SI point to the FCB (not an extended one)
 10947                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 10948                                  ;		DS:SI preserved
 10949                                  ;		ES:DI point to sft
 10950                                  ;   Registers modified: All
 10951                                  ;
 10952                                  ;
 10953                                  ;----------------------------------------------------------------------------
 10954                                  ;
 10955                                  
 10956                                  SaveFCBInfo:
 10957                                  
 10958 000025D1 36C43E[3605]            	LES	DI,[SS:THISSFT]		; SS override
 10959 000025D6 E80AFA                  	call	IsSFTNet
 10960 000025D9 7419                    	JZ	short SaveLocal		; if not network then save local info
 10961                                  ;
 10962                                  ;----- In net support -----
 10963                                  ;
 10964                                  	; MSDOS 6.0
 10965                                  	;MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 10966                                  	;MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 10967                                  	; MSDOS 3.3
 10968                                  	;mov	ax,[es:di+1Dh]
 10969 000025DB 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 10970                                  	;mov	[si+1Ah],ax
 10971 000025DF 89441A                  	mov	[si+fcb_net_handle],ax
 10972                                  
 10973                                  	; MSDOS 3.3
 10974 000025E2 06                      	push	es
 10975 000025E3 57                      	push	di
 10976                                  	;les	di,[es:di+19h]
 10977 000025E4 26C47D19                	LES	DI,[ES:DI+sf_netid]
 10978                                  	;mov	[si+1Ch],di
 10979 000025E8 897C1C                  	MOV	[SI+fcb_netID],DI	; save net ID
 10980                                  	;mov 	[si+1Eh],es
 10981 000025EB 8C441E                  	MOV	[SI+fcb_netID+2],ES
 10982 000025EE 5F                      	pop	di
 10983 000025EF 07                      	pop	es
 10984                                  
 10985                                  	;mov	bl,80h
 10986 000025F0 B380                    	MOV	BL,FCBNETWORK
 10987                                  ;
 10988                                  ;----- END In net support -----
 10989                                  ;
 10990 000025F2 EB4C                    	jmp	SHORT SaveSFN
 10991                                  
 10992                                  SaveLocal:
 10993                                  	;IF	Installed
 10994 000025F4 E82E4D                  	call	CheckShare
 10995 000025F7 7402                    	JZ	short SaveNoShare	; no sharer
 10996 000025F9 EB40                    	JMP	short SaveShare		; sharer present
 10997                                  
 10998                                  SaveNoShare:
 10999                                  	;test 	word [es:di+5],80h
 11000 000025FB 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 11001 00002601 7526                    	JNZ	short SaveNoShareDev	; Device
 11002                                  	;
 11003                                  	; Save no sharing local file information
 11004                                  	;
 11005                                  	;mov	ax,[es:di+1Dh]
 11006 00002603 268B451D                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11007                                  	;mov	[si+1Dh],ax
 11008 00002607 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11009                                  
 11010                                  	; MSDOS 6.0
 11011                                  	;SR; Store high byte of directory sector
 11012                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11013                                  	;
 11014                                  	; SR;
 11015                                  	; We have to store the read-only and archive attributes of the file.
 11016                                  	; We extract it from the SFT and store it in the top two bits of the 
 11017                                  	; sector number ( sector number == 22 bits only )
 11018                                  	;
 11019                                  	;mov	bl,[es:di+SF_ENTRY.sf_attr]
 11020                                  	;mov	bh,bl
 11021                                  	;ror	bl,1
 11022                                  	;shl	bh,1
 11023                                  	;or	bl,bh
 11024                                  	;and	bl,0C0h
 11025                                  	;
 11026                                  	;or	al,bl
 11027                                  	;mov	[si+fcb_sfn],al	;sector number = 22-bits
 11028                                  
 11029                                  	; MSDOS 3.3 ($ MSDOS 6.0)
 11030                                  	;mov	al,[es:di+1Fh]
 11031 0000260A 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11032                                  	;mov	[si+1Fh],al
 11033 0000260E 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11034                                  	;mov	ax,[es:di+0Bh]
 11035 00002611 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11036                                  	;mov	[si+1Bh],ax
 11037 00002615 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11038 00002618 B300                    	MOV	BL,0
 11039                                  
 11040                                  	; Create the bits field from the dirty/device bits of the flags word 
 11041                                  	; and the mode byte
 11042                                  
 11043                                  SetFCBBits:
 11044                                  	;mov	ax,[es:di+5]
 11045 0000261A 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11046 0000261E 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11047                                  	;or	al,[es:di+2]
 11048 00002620 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11049                                  	;mov	[si+1Ah], al
 11050 00002624 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11051                                  
 11052                                  	; MSDOS 6.0
 11053                                  	; SR;
 11054                                  	; Check if we came here for local file or device. If for local file, 
 11055                                  	; skip setting of SFT index
 11056                                  	;
 11057                                  	;or	bl,bl
 11058                                  	;jz	short SaveNoSFN		; do not save SFN if local file
 11059                                  
 11060 00002627 EB17                    	JMP	short SaveSFN 		; go and save SFN
 11061                                  
 11062                                  	; Save no sharing local device information
 11063                                  
 11064                                  SaveNoShareDev:
 11065                                  	;mov	ax,[es:di+7]
 11066 00002629 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11067                                  	;mov	[si+1Ah],ax
 11068 0000262D 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11069                                  	;mov	ax,[es:di+9]
 11070 00002630 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11071 00002634 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11072                                  	;mov	bl,40h
 11073 00002637 B340                    	MOV	BL,FCBDEVICE
 11074 00002639 EBDF                    	JMP	SetFCBBits		; go and save SFN
 11075                                  
 11076                                  SaveShare:
 11077                                  	;ENDIF
 11078                                  ;
 11079                                  ;----- In share support -----
 11080                                  ;
 11081                                  	;call	far [ss:ShSave]
 11082 0000263B 36FF1E[8400]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11083                                  ;
 11084                                  ;----- end in share support -----
 11085                                  ;
 11086                                  SaveSFN:
 11087                                  	; MSDOS 3.3
 11088                                  	;mov	ax,[es:di+5]
 11089                                  	;and	al,3Fh
 11090                                  	;or	al,bl
 11091                                  	;mov	[si+19h],al
 11092                                  
 11093                                  	;lea	ax, [di-6]
 11094 00002640 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11095                                  	
 11096                                  	; Adjust for offset to table.
 11097                                  	
 11098 00002643 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11099                                  
 11100 00002648 53                      	push	bx			;bx = FCB type (net/Share or local)
 11101 00002649 B335                    	mov	bl,53
 11102 0000264B B335                    	MOV	BL,SF_ENTRY.size
 11103 0000264D F6F3                    	DIV	BL
 11104 0000264F 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11105 00002652 5B                      	pop	bx			;restore bx
 11106                                  
 11107                                  SaveNoSFN:
 11108                                  	;mov	ax,[es:di+5]
 11109 00002653 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11110 00002657 243F                    	AND	AL,3Fh			; get real drive
 11111 00002659 08D8                    	OR	AL,BL
 11112                                  	;mov	[si+19h],al
 11113 0000265B 884419                  	MOV	[SI+fcb_l_drive],AL
 11114                                  
 11115 0000265E 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11116 00002662 40                      	INC	AX
 11117                                  	;mov	[es:di+15h],ax
 11118 00002663 26894515                	MOV	[ES:DI+sf_LRU],AX
 11119 00002667 7506                    	JNZ	short SimpleStuff
 11120                                  	
 11121                                  	; lru flag overflowed.	Run through all FCB sfts and adjust:  
 11122                                  	; LRU < 8000H get set to 0.  Others -= 8000h.  This LRU = 8000h
 11123                                  	
 11124                                  	;mov	bx,15h
 11125 00002669 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11126 0000266C E80500                  	call	ResetLRU
 11127                                  
 11128                                  	;	Set new LRU to AX
 11129                                  SimpleStuff:
 11130 0000266F 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11131 00002673 C3                      	retn
 11132                                  
 11133                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11134                                  ;----------------------------------------------------------------------------
 11135                                  ;
 11136                                  ;   ResetLRU - during lru updates, we may wrap at 64K.	We must walk the
 11137                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11138                                  ;   at 0.
 11139                                  ;
 11140                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11141                                  ;		ES:DI point to SFT currently being updated
 11142                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11143                                  ;		AX has 8000h
 11144                                  ;   Registers modified: none
 11145                                  ;
 11146                                  ;----------------------------------------------------------------------------
 11147                                  ;
 11148                                  
 11149                                  ResetLRU:
 11150                                  
 11151                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11152                                  	; DOSDATA
 11153                                  
 11154 00002674 B80080                  	MOV	AX,8000h
 11155 00002677 06                      	push	es
 11156 00002678 57                      	push	di
 11157 00002679 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		; get pointer to head
 11158                                  	;mov	cx,[es:di+4]
 11159 0000267E 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11160                                  	;lea	di,[di+6]
 11161 00002682 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 11162                                  ovScan:
 11163 00002685 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 11164 00002688 7703                    	JA	short ovLoop
 11165 0000268A 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 11166                                  ovLoop:
 11167                                  	;add	di,53
 11168 0000268D 83C735                  	ADD	DI,SF_ENTRY.size	; advance to next
 11169 00002690 E2F3                    	LOOP	ovScan
 11170 00002692 5F                      	pop	di
 11171 00002693 07                      	pop	es
 11172 00002694 268901                  	MOV	[ES:DI+BX],AX
 11173 00002697 C3                      	retn
 11174                                  
 11175                                  ;IF  0  ; We dont need this routine any more.
 11176                                  
 11177                                  ;Break	<SetOpenAge - update the open age of a SFT>
 11178                                  ;----------------------------------------------------------------------------
 11179                                  ;
 11180                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 11181                                  ;   we keep the 'open age' or an LRU count based on opens.  We update the
 11182                                  ;   count here and fill in the appropriate field.
 11183                                  ;
 11184                                  ;   Inputs:	ES:DI point to SFT
 11185                                  ;   Outputs:	ES:DI has the open age field filled in.
 11186                                  ;		If open age has wraparound, we will have subtracted 8000h
 11187                                  ;		    from all open ages.
 11188                                  ;   Registers modified: AX
 11189                                  ;
 11190                                  ;----------------------------------------------------------------------------
 11191                                  ;
 11192                                  
 11193                                  SetOpenAge:
 11194                                  
 11195                                  	; 20/07/2018 - Retro DOS v3.0
 11196                                  	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 11197                                  	; (& MSDOS 6.0, FCBIO.ASM)
 11198                                  
 11199                                  	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 11200                                  
 11201 00002698 2EA1[1200]              	MOV	AX,[CS:OpenLRU]	; SS override
 11202 0000269C 40                      	INC	AX
 11203                                  	;mov	[es:di+17h],ax
 11204 0000269D 26894517                	MOV	[ES:DI+sf_OpenAge],AX
 11205 000026A1 7506                    	JNZ	short SetDone
 11206                                  	;mov	bx,17h
 11207 000026A3 BB1700                  	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 11208 000026A6 E8CBFF                  	call	ResetLRU
 11209                                  SetDone:
 11210 000026A9 2EA3[1200]              	MOV	[CS:OpenLRU],AX
 11211 000026AD C3                      	retn
 11212                                  
 11213                                  ;ENDIF	; SetOpenAge no longer needed
 11214                                  
 11215                                  
 11216                                  ; 21/07/2018 - Retro DOS v3.0
 11217                                  
 11218                                  ; LRUFCB for MSDOS 3.3 !
 11219                                  
 11220                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 11221                                  ;----------------------------------------------------------------------------
 11222                                  ;
 11223                                  ;   LRUFCB - find LRU fcb in cache.  Set ThisSFT and return it.  We preserve
 11224                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 11225                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 11226                                  ;
 11227                                  ;   Inputs:	none
 11228                                  ;   Outputs:	ES:DI point to SFT
 11229                                  ;		ThisSFT points to SFT
 11230                                  ;		SFT is zeroed
 11231                                  ;		Carry set of closes failed
 11232                                  ;   Registers modified: none
 11233                                  ;
 11234                                  ;----------------------------------------------------------------------------
 11235                                  ;
 11236                                  
 11237                                  ; MSDOS 6.0
 11238                                  ;IF 0	; rewritten this routine
 11239                                  
 11240                                  LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 11241 000026AE E847EF                  	call	save_world
 11242                                  	
 11243                                  ; Find nth oldest NET/SHARE FCB.  We want to find its age for the second scan
 11244                                  ; to find the lease recently used one that is younger than the open age.  We
 11245                                  ; operate be scanning the list n times finding the least age that is greater
 11246                                  ; or equal to the previous minimum age.
 11247                                  ;
 11248                                  ;   BP is the count of times we need to go through this loop.
 11249                                  ;   AX is the current acceptable minimum age to consider
 11250                                  ;
 11251 000026B1 2E8B2E[4400]            	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 11252 000026B6 31C0                    	XOR	AX,AX			; low = 0;
 11253                                  ;
 11254                                  ; If we've scanned the table n times, then we are done.
 11255                                  ;
 11256                                  lru1:
 11257 000026B8 83FD00                  	CMP	bp,0			; while (k--) {
 11258 000026BB 7451                    	JZ	short lru75
 11259 000026BD 4D                      	DEC	bp
 11260                                  ;
 11261                                  ; Set up for scan.
 11262                                  ;
 11263                                  ;   AX is the minimum age for consideration
 11264                                  ;   BX is the minimum age found during the scan
 11265                                  ;   SI is the position of the entry that corresponds to BX
 11266                                  ;
 11267 000026BE BBFFFF                  	MOV	BX,-1			;     min = 0xffff;
 11268 000026C1 89DE                    	MOV	si,BX			;     pos = 0xffff;
 11269 000026C3 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 11270                                  	;mov	cx,[es:di+4]
 11271 000026C8 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11272                                  	;lea	di,[di+6]
 11273 000026CC 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11274                                  ;
 11275                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 11276                                  ; current entry is busy (indicating a previous aborted allocation), then we
 11277                                  ; are done.  In both cases, we use the found entry.
 11278                                  ;
 11279                                  lru2:
 11280 000026CF 26833D00                	cmp	word [es:di],0
 11281                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 11282 000026D3 7406                    	jz	short lru25
 11283                                  	;cmp	word [es:di],-1
 11284                                  	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 11285 000026D5 26833DFF                	cmp	word [es:di],sf_busy
 11286 000026D9 7504                    	jnz	short lru3
 11287                                  ;
 11288                                  ; The entry is usable without further scan.  Go and use it.
 11289                                  ;
 11290                                  lru25:
 11291 000026DB 89FE                    	MOV	si,DI			;	      pos = i;
 11292 000026DD EB69                    	JMP	short lru11		;	      goto got;
 11293                                  ;
 11294                                  ; See if the entry is for the network or for the sharer.
 11295                                  ;
 11296                                  ;  If for the sharer or network then
 11297                                  ;	if the age < current minimum AND >= allowed minimum then
 11298                                  ;	    this entry becomes current minimum
 11299                                  ;
 11300                                  lru3:
 11301                                  	;test	word [es:di+5],8000h
 11302 000026DF 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 11303                                  					;	  if (!net[i]
 11304 000026E5 7505                    	JNZ	short lru35
 11305                                  ;if installed
 11306 000026E7 E83B4C                  	call	CheckShare		;		&& !sharing)
 11307 000026EA 7410                    	JZ	short lru5		;	  else
 11308                                  ;ENDIF
 11309                                  ;
 11310                                  ; This SFT is for the net or is for the sharer.  See if it less than the
 11311                                  ; current minimum.
 11312                                  ;
 11313                                  lru35:
 11314                                  	;mov	dx,[es:di+17h]
 11315 000026EC 268B5517                	MOV	DX,[ES:DI+sf_OpenAge]
 11316 000026F0 39C2                    	CMP	DX,AX			;	  if (age[i] >= low &&
 11317 000026F2 7208                    	JB	short lru5
 11318 000026F4 39DA                    	CMP	DX,BX
 11319 000026F6 7304                    	JAE	short lru5		;	      age[i] < min) {
 11320                                  ;
 11321                                  ; entry is new minimum.  Remember his age.
 11322                                  ;
 11323 000026F8 89D3                    	mov	bx,DX			;	      min = age[i];
 11324 000026FA 89FE                    	mov	si,di			;	      pos = i;
 11325                                  ;
 11326                                  ; End of loop.	gp back for more
 11327                                  ;
 11328                                  lru5:
 11329                                  	;add	di,53
 11330 000026FC 83C735                  	add	di,SF_ENTRY.size
 11331 000026FF E2CE                    	loop	lru2			;	      }
 11332                                  ;
 11333                                  ; The scan is complete.  If we have successfully found a new minimum (pos != -1)
 11334                                  ; set then threshold value to this new minimum + 1.  Otherwise, the scan is
 11335                                  ; complete.  Go find LRU.
 11336                                  ;
 11337                                  lru6:	
 11338 00002701 83FEFF                  	cmp	si,-1			; position not -1?
 11339 00002704 7408                    	jz	short lru75		; no, done with everything
 11340 00002706 8D4701                  	lea	ax,[bx+1]		; set new threshold age
 11341 00002709 EBAD                    	jmp	short lru1		; go and loop for more
 11342                                  lru65:	
 11343 0000270B F9                      	stc
 11344 0000270C EB70                    	jmp	short LRUDead		;	  return -1;
 11345                                  ;
 11346                                  ; Main loop is done.  We have AX being the age+1 of the nth oldest sharer or
 11347                                  ; network entry.  We now make a second pass through to find the LRU entry
 11348                                  ; that is local-no-share or has age >= AX
 11349                                  ;
 11350                                  lru75:
 11351 0000270E BBFFFF                  	mov	bx,-1			; min = 0xffff;
 11352 00002711 89DE                    	mov	si,bx			; pos = 0xffff;
 11353 00002713 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 11354                                  	;mov	cx,[es:di+4]
 11355 00002718 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11356                                  	;lea	di,[di+6]
 11357 0000271C 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11358                                  ;
 11359                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 11360                                  ; then check for lru.
 11361                                  ;
 11362                                  lru8:
 11363                                  	;test	word [es:di+5],8000h
 11364 0000271F 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 11365 00002725 7505                    	jnz	short lru85		; is for network, go check age
 11366 00002727 E8FB4B                  	call	CheckShare		; sharer here?
 11367 0000272A 7406                    	jz	short lru86		; no, go check lru
 11368                                  ;
 11369                                  ; Network or sharer.  Check age
 11370                                  ;
 11371                                  lru85:
 11372                                  	;cmp	[es:di+17h],ax
 11373 0000272C 26394517                	cmp	[es:di+sf_OpenAge],ax
 11374 00002730 720C                    	jb	short lru9		; age is before threshold, skip it
 11375                                  ;
 11376                                  ; Check LRU
 11377                                  ;
 11378                                  lru86:
 11379                                  	;cmp	[es:di+15h],bx
 11380 00002732 26395D15                	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 11381 00002736 7306                    	jae	short lru9		; no, skip this
 11382 00002738 89FE                    	mov	si,di			; remember position
 11383                                  	;mov	bx,[es:di+15h]
 11384 0000273A 268B5D15                	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 11385                                  ;
 11386                                  ; Done with this entry, go back for more.
 11387                                  ;
 11388                                  lru9:
 11389                                  	;add	di, 53
 11390 0000273E 83C735                  	add	di,SF_ENTRY.size
 11391 00002741 E2DC                    	loop	lru8
 11392                                  ;
 11393                                  ; Scan is complete.  If we found NOTHING that satisfied us then we bomb
 11394                                  ; out.	The conditions here are:
 11395                                  ;
 11396                                  ;   No local-no-shares AND all net/share entries are older than threshold
 11397                                  ;
 11398                                  lru10:
 11399 00002743 83FEFF                  	cmp	si,-1			; if no one f
 11400 00002746 74C3                    	jz	short lru65		;     return -1;
 11401                                  lru11:
 11402 00002748 89F7                    	mov	di,si
 11403 0000274A 2E893E[3605]            	MOV	[CS:THISSFT],DI		; set thissft
 11404 0000274F 2E8C06[3805]            	MOV	[CS:THISSFT+2],ES
 11405                                  ;
 11406                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 11407                                  ; is 0.
 11408                                  ;
 11409                                  	;test	word [es:di+5],8000h
 11410 00002754 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 11411 0000275A 7505                    	JNZ	short LRUClose
 11412                                  ;IF INSTALLED
 11413 0000275C E8C64B                  	call	CheckShare
 11414 0000275F 7418                    	JZ	short LRUDone
 11415                                  ;ENDIF
 11416                                  ;
 11417                                  ; Repeat close until ref count is 0
 11418                                  ;
 11419                                  LRUClose:
 11420 00002761 16                      	push	ss
 11421 00002762 1F                      	pop	ds
 11422 00002763 C43E[3605]              	LES	DI,[THISSFT]
 11423 00002767 26833D00                	cmp     word [es:di],0
 11424                                  	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 11425 0000276B 740C                    	JZ	short LRUDone 		; nope, all done
 11426 0000276D E85213                  	call	DOS_CLOSE
 11427 00002770 73EF                    	jnc	short LRUClose		; no error => clean up
 11428                                  	;cmp	al,6
 11429 00002772 3C06                    	cmp	al,error_invalid_handle
 11430 00002774 74EB                    	jz	short LRUClose
 11431 00002776 F9                      	stc
 11432 00002777 EB05                    	JMP	short LRUDead
 11433                                  LRUDone:
 11434 00002779 30C0                    	XOR	AL,AL
 11435 0000277B E8E500                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 11436                                  
 11437                                  LRUDead:
 11438 0000277E E864EE                  	call	restore_world
 11439 00002781 2EC43E[3605]             	LES     DI,[CS:THISSFT]
 11440 00002786 7302                    	jnc	short LRUFCB_retn
 11441                                  LRUFCB_err:
 11442                                  	; mov	al, 23h	
 11443 00002788 B023                    	MOV	AL,error_FCB_unavailable
 11444                                  LRUFCB_retn:	
 11445                                  	retn:
 11446                                  
 11447                                  ;ENDIF
 11448                                  
 11449                                  FCBRegen:
 11450                                  	; called from SFTFromFCB. SS already DOSDATA
 11451                                  
 11452                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 11453                                  	; we do not fill, size we do no fill, position we do not fill,
 11454                                  	; bit 14 of flags = TRUE, other bits = FALSE
 11455                                  
 11456                                  	;mov	al,[si+19h]
 11457 0000278A 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 11458                                  
 11459                                  	; We discriminate based on the first two bits in the reserved field.
 11460                                  	
 11461                                  	;test	al,80h
 11462 0000278D A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 11463 0000278F 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 11464                                  
 11465                                  	;
 11466                                  	; The FCB is for a network or a sharing based system.  At this point 
 11467                                  	; we have already closed the SFT for this guy and reconnection is 
 11468                                  	; impossible.
 11469                                  	;
 11470                                  	; Remember that he may have given us a FCB with bogus information in
 11471                                  	; it. Check to see if sharing is present or if the redir is present.
 11472                                  	; If either is around, presume that we have cycled out the FCB and 
 11473                                  	; give the hard error. Otherwise, just return with carry set.
 11474                                  	;
 11475                                  
 11476 00002791 E8914B                  	call	CheckShare		; test for sharer
 11477 00002794 7509                    	JNZ	short RegenFail		; yep, fail this.
 11478                                  	;mov	ax,1100h
 11479 00002796 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 11480 00002799 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 11481                                  			; Return: AL = 00h  not installed, OK to install
 11482                                  			; 01h  not installed, not OK to install
 11483                                  			; FFh  installed
 11484 0000279B 08C0                    	OR	AL,AL			; is it there?
 11485 0000279D 740C                    	JZ	short RegenDead		; no, just fail the operation
 11486                                  RegenFail:
 11487 0000279F 2EA1[E602]              	MOV     AX,[CS:USER_IN_AX]	; SS override
 11488                                  	;cmp	ah,10h
 11489 000027A3 80FC10                  	cmp	AH,FCB_CLOSE
 11490 000027A6 7403                    	jz	short RegenDead
 11491 000027A8 E8C701                  	call	FCBHardErr		; massive hard error.
 11492                                  RegenDead:
 11493 000027AB F9                      	STC				; carry set
 11494                                  FCBRegen_retn:
 11495 000027AC C3                      	retn
 11496                                  
 11497                                  	;
 11498                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 11499                                  	; so fail the operation.
 11500                                  	;
 11501                                  RegenNoSharing:
 11502 000027AD E8754B                  	call	CheckShare		; Sharing around?
 11503 000027B0 75ED                    	JNZ	short RegenFail
 11504                                  	
 11505                                  	; Find an SFT for this guy.
 11506                                  	
 11507                                  	; MSDOS 6.0
 11508                                  	;push	ax
 11509                                  	;mov	al,0			;indicate it is a regen operation
 11510                                  	;call	LRUFCB
 11511                                  	;pop	ax
 11512                                  	;jc	short FCBRegen_retn
 11513                                  
 11514                                  	; MSDOS 3.3
 11515 000027B2 E8F9FE                  	call	LRUFCB
 11516 000027B5 72F5                    	jc	short FCBRegen_retn
 11517                                  
 11518                                  	;mov	word [es:di+2],8002h
 11519 000027B7 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 11520 000027BD 243F                    	AND	AL,3Fh			; get drive number for flags
 11521 000027BF 98                      	CBW
 11522                                  	;or	ax,4000h
 11523 000027C0 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 11524                                  
 11525                                  	;
 11526                                  	; The bits field consists of the upper two bits (dirty and device) 
 11527                                  	; from the SFT and the low 4 bits from the open mode.
 11528                                  	;
 11529                                  
 11530                                  	;mov	cl,[si+1Ah]
 11531 000027C3 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 11532 000027C6 88CD                    	MOV	CH,CL
 11533 000027C8 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 11534 000027CB 08E8                    	OR	AL,CH
 11535                                  	;and	cl,0Fh
 11536 000027CD 80E10F                  	AND	CL,access_mask		; get the mode bits
 11537                                  	;mov	[es:di+2],cl
 11538 000027D0 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 11539                                  	;mov	[es:di+5],ax
 11540 000027D4 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 11541 000027D8 2EA1[E802]              	MOV     AX,[CS:PROC_ID]		; SS override
 11542                                  	;mov	[es:di+31h],ax
 11543 000027DC 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 11544 000027E0 1E                      	push	ds
 11545 000027E1 56                      	push	si
 11546 000027E2 06                      	push	es
 11547 000027E3 57                      	push	di
 11548 000027E4 16                      	push	ss
 11549 000027E5 07                      	pop	es
 11550 000027E6 BF[E604]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 11551                                  
 11552 000027E9 B90800                  	MOV	CX,8
 11553 000027EC 46                      	INC	SI			; Skip past drive byte to name in FCB
 11554                                  
 11555                                  	; MSDOS 6.0
 11556                                  	;call	RegenCopyName		;copy the name to NAME1
 11557                                  
 11558                                  	; MSDOS 3.3
 11559                                  RegenCopyName:
 11560 000027ED AC                      	lodsb
 11561 000027EE E81F2E                  	call	UCase
 11562 000027F1 AA                      	stosb
 11563 000027F2 E2F9                    	loop	RegenCopyName
 11564                                  
 11565 000027F4 16                      	push	ss	; SS is DOSDATA
 11566 000027F5 1F                      	pop	ds
 11567                                  
 11568                                  	;mov	byte [ATTRIB],16h
 11569 000027F6 C606[0605]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 11570                                  					; Must set this to something interesting
 11571                                  					; to call DEVNAME.
 11572 000027FB E8E622                  	call	DEVNAME 		; check for device
 11573 000027FE 5E                      	pop	si
 11574 000027FF 07                      	pop	es
 11575 00002800 5E                      	pop	si
 11576 00002801 1F                      	pop	ds
 11577 00002802 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 11578                                  
 11579                                  	;
 11580                                  	; Device found.  We can ignore disk-specific info
 11581                                  	;
 11582                                  
 11583                                  	;mov	[es:di+5],bh
 11584 00002804 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 11585                                  	;mov	byte [es:di+4],0
 11586 00002808 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 11587                                  					; SS override
 11588 0000280D 2EC536[3205]            	LDS	SI,[CS:DEVPT]		; get device driver
 11589                                  	;mov	[es:di+7],si
 11590 00002812 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 11591                                  	;mov	[es:di+9],ds
 11592 00002816 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 11593 0000281A C3                      	retn				; carry is clear
 11594                                  
 11595                                  RegenDeadJ:
 11596 0000281B EB8E                    	JMP	RegenDead
 11597                                  
 11598                                  	;
 11599                                  	; File found.  Just copy in the remaining pieces.
 11600                                  	;
 11601                                  
 11602                                  RegenFileNoSharing:
 11603                                  	;mov	ax,[es:di+5]
 11604 0000281D 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11605 00002821 83E03F                  	AND	AX,03Fh
 11606 00002824 1E                      	push	ds
 11607 00002825 56                      	push	si
 11608 00002826 E87D40                  	call	FIND_DPB
 11609                                  	;mov	[es:di+7],si
 11610 00002829 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 11611                                  	;mov	[es:di+9],ds
 11612 0000282D 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 11613 00002831 5E                      	pop	si
 11614 00002832 1F                      	pop	ds
 11615 00002833 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 11616                                  					; indicator was bogus
 11617                                  	;mov	ax,[si+1Dh]
 11618 00002835 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 11619                                  	;mov	[es:di+1Dh],ax
 11620 00002838 2689451D                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 11621                                  
 11622                                  	;MSDOS6.0
 11623                                  	; SR;
 11624                                  	; Update the higher word of the directory sector from the FCB
 11625                                  	;
 11626                                  
 11627                                  	;MOV	word [ES:DI+SF_ENTRY.sf_dirsec+2],0	;AN000;>32mb
 11628                                  
 11629                                  	; SR;
 11630                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 11631                                  	; number
 11632                                  	;
 11633                                  
 11634                                  	;mov	al,[si+fcb_sfn]
 11635                                  	;and	al,0C0h		;get the 2 attribute bits
 11636                                  	;mov	ah,al
 11637                                  	;rol	ah,1
 11638                                  	;shr	al,1
 11639                                  	;or	al,ah
 11640                                  	;and	al,03Fh		;mask off unused bits
 11641                                  	;mov	[es:di+SF_ENTRY.sf_attr],al
 11642                                  
 11643                                  	;mov	al,[si+fcb_sfn]
 11644                                  	;and	al,03Fh		;mask off top 2 bits -- attr bits
 11645                                  	;sub	ah,ah
 11646                                  	;mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 11647                                  
 11648                                  	; MSDOS 3.3(& MSDOS 6.0)
 11649                                  	;mov	ax,[si+1Bh]
 11650 0000283C 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 11651                                  	;mov	[es:di+0Bh],ax
 11652 0000283F 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 11653                                  	;mov	[es:di+1Bh],ax
 11654 00002843 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 11655                                  	;mov	al,[si+1Fh]
 11656 00002847 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 11657                                  	;mov  	[es:di+1Fh], al
 11658 0000284A 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 11659                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 11660 0000284E 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 11661                                  					; Existing FCB entries would be
 11662                                  					; flushed unnecessarily because of
 11663                                  					; check in CheckFCB of the ref_count.
 11664                                  					; July 22/85 - BAS
 11665                                  	;lea	si,[si+1]
 11666 00002851 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 11667                                  	;lea	di,[di+20h] ; MSDOS 3.3 
 11668 00002854 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 11669                                  	;mov	cx,11
 11670 00002857 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 11671                                  	
 11672                                  	; 17/05/2019
 11673                                  	; MSDOS 6.0
 11674                                  	;call	RegenCopyName	;copy name to SFT 
 11675                                  	;
 11676                                  	; MSDOS3.3
 11677                                  RegenCopyName2:
 11678 0000285A AC                      	lodsb
 11679 0000285B E8B22D                  	call    UCase
 11680 0000285E AA                      	stosb
 11681 0000285F E2F9                    	loop    RegenCopyName2
 11682                                  
 11683 00002861 F8                      	clc
 11684 00002862 C3                      	retn
 11685                                  
 11686                                  ;**	BlastSFT - FIll SFT with Garbage
 11687                                  ;
 11688                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 11689                                  ;	various garbage values to put into the SFT.  I don't know why,
 11690                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 11691                                  ;	necessary to show that the SFT is free after filling it.
 11692                                  ;
 11693                                  ;	ENTRY	(es:di) = address of SFT
 11694                                  ;		(al) = fill character
 11695                                  ;	EXIT	(ax) = -1
 11696                                  ;		'C' clear
 11697                                  ;	USES	AX, CX, Flags
 11698                                  
 11699                                  BlastSFT:
 11700 00002863 57                      	push	di
 11701                                  	;mov	cx,53
 11702 00002864 B93500                  	mov	cx,SF_ENTRY.size
 11703 00002867 F3AA                    	rep	stosb
 11704 00002869 5F                      	pop	di
 11705 0000286A 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 11706 0000286C 268905                  	mov	[es:di],ax
 11707                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 11708                                  	;mov	[es:di+15h],ax
 11709 0000286F 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 11710 00002873 48                      	dec	ax	; -1					    ;
 11711                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 11712 00002874 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 11713                                  BlastSFT_retn:
 11714 00002878 C3                      	retn				; return with 'C' clear     ;
 11715                                  
 11716                                  
 11717                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 11718                                  ;----------------------------------------------------------------------------
 11719                                  ;
 11720                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 11721                                  ;   regenerated.
 11722                                  ;
 11723                                  ;   Inputs:	DS:SI point to FCB (not extended)
 11724                                  ;		AL is SFT index
 11725                                  ;   Outputs:	Carry Set - FCB needs to be regened
 11726                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 11727                                  ;   Registers modified: AX and BX
 11728                                  ;
 11729                                  ;----------------------------------------------------------------------------
 11730                                  ;
 11731                                  
 11732                                  CheckFCB:
 11733                                  		
 11734                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 11735                                  
 11736                                  	; MSDOS6.0
 11737                                  	; SR;
 11738                                  	; We check if the given FCB is for a local file. If so, we return a 
 11739                                  	; bad SFT status forcing the caller to regenerate the SFT.
 11740                                  
 11741                                  	;test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 11742                                  	;jz	short BadSFT		;Local file, return bad SFT
 11743                                  
 11744                                  	; MSDOS 3.3 (& MSDOS6.0)
 11745 00002879 2EC43E[4000]            	LES     DI,[CS:SFTFCB]		; SS override
 11746                                  	;cmp	[es:di+4],al
 11747 0000287E 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 11748 00002882 7248                    	JC	short BadSFT
 11749 00002884 B335                    	MOV	BL,SF_ENTRY.size
 11750 00002886 F6E3                    	MUL	BL
 11751                                  	;lea	di,[di+6]
 11752 00002888 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11753 0000288B 01C7                    	ADD	DI,AX
 11754 0000288D 2EA1[E802]              	MOV     AX,[CS:PROC_ID]		; SS override
 11755                                  	;cmp	[es:di+31h],ax
 11756 00002891 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 11757 00002895 7535                    	JNZ	short BadSFT		; must match process
 11758 00002897 26833D00                	cmp	word [es:di],0
 11759                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11760 0000289B 742F                    	JZ	short BadSFT		; must also be in use
 11761                                  	;mov	al,[si+19h]
 11762 0000289D 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 11763                                  	;test	al,80h
 11764 000028A0 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 11765 000028A2 7443                    	JZ	short CheckNoShare	; No. try local or device
 11766                                  
 11767                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 11768                                  	; FCBSHARE is a superset of FCBNETWORK.
 11769                                  
 11770 000028A4 50                      	PUSH	AX
 11771                                  	;and	al,0C0h
 11772 000028A5 24C0                    	AND	AL,FCBMASK
 11773                                  	;cmp	al,0C0h
 11774 000028A7 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 11775 000028A9 58                      	POP	AX
 11776 000028AA 7522                    	JNZ	short CheckNet		; yes
 11777                                  ;
 11778                                  ;----- In share support -----
 11779                                  ;
 11780                                  	;call	far [cs:jShare+(11*4)]
 11781 000028AC 36FF1E[8800]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 11782 000028B1 7219                    	JC	short BadSFT
 11783 000028B3 EB0A                    	JMP	SHORT CheckD
 11784                                  ;
 11785                                  ;----- End in share support -----
 11786                                  ;
 11787                                  CheckFirClus:
 11788 000028B5 263B5D0B                	cmp     bx,[es:di+0Bh]
 11789 000028B9 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 11790 000028BD 750D                    	JNZ	short BadSFT
 11791                                  CheckD: 
 11792 000028BF 243F                    	AND	AL,3Fh
 11793                                  	;mov	ah,[es:di+5]
 11794 000028C1 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 11795 000028C5 80E43F                  	AND	AH,3Fh
 11796 000028C8 38C4                    	CMP	AH,AL
 11797 000028CA 74AC                    	jz	short BlastSFT_retn	; carry is clear
 11798                                  BadSFT: 
 11799 000028CC F9                      	STC
 11800 000028CD C3                      	retn				; carry is clear
 11801                                  CheckNet:
 11802                                  ;
 11803                                  ;----- In net support -----
 11804                                  ;
 11805                                  	; MSDOS 6.0
 11806                                  	;MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 11807                                  	;CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 11808                                  	;JNZ	short BadSFT
 11809                                  
 11810                                  	; MSDOS 3.3
 11811                                  	;mov	ax,[si+1Ah]
 11812 000028CE 8B441A                  	mov	ax,[si+fcb_net_handle]
 11813                                  	;cmp	ax,[es:di+1Dh]
 11814 000028D1 263B451D                	cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 11815 000028D5 75F5                    	jnz	short BadSFT
 11816                                  	;cmp	ax,[es:di+19h]
 11817 000028D7 263B4519                	cmp	ax,[ES:DI+sf_netid]
 11818 000028DB 75EF                    	jnz     short BadSFT
 11819                                  	;mov	ax,[si+1Eh]
 11820 000028DD 8B441E                  	mov	ax,[si+fcb_l_attr]
 11821                                  	;cmp	ax,[es:di+1Bh]
 11822 000028E0 263B451B                	cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 11823 000028E4 75E6                    	jnz     short BadSFT
 11824                                  ;
 11825                                  ;----- END In net support -----
 11826                                  ;
 11827                                  CheckNet_retn:
 11828 000028E6 C3                      	retn
 11829                                  
 11830                                  CheckNoShare:
 11831                                  	;test	al,40h
 11832 000028E7 A840                    	test	AL,FCBDEVICE		; Device?
 11833 000028E9 753F                    	JNZ	short CheckNoShareDev 	; Yes
 11834                                  
 11835                                  	; MSDOS6.0
 11836                                  	; SR;
 11837                                  	; The code below to match a local FCB with its SFT can no longer be
 11838                                  	; used. We just return a no-match status. This check is done right
 11839                                  	; at the top.
 11840                                  	;
 11841                                  
 11842                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 11843                                  	;mov	bx,[si+1Dh]
 11844 000028EB 8B5C1D                  	MOV	BX,[SI+fcb_nsl_dirsec]
 11845                                  	;cmp	bx,[es:di+1Dh]
 11846 000028EE 263B5D1D                	cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 11847 000028F2 75D8                    	jnz	short BadSFT
 11848                                  	;mov	bl,[si+1Fh]
 11849 000028F4 8A5C1F                  	MOV	bl,[SI+fcb_nsl_dirpos]
 11850                                  	;cmp	bl,[es:di+1Fh]
 11851 000028F7 263A5D1F                	cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 11852 000028FB 75CF                    	jnz     short BadSFT
 11853                                  	;mov	bl,[si+1Ah]
 11854 000028FD 8A5C1A                  	MOV	bl,[SI+fcb_nsl_bits]
 11855                                  	;mov	bh,[es:di+5]
 11856 00002900 268A7D05                	MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 11857 00002904 30DF                    	xor     bh,bl
 11858 00002906 80E7C0                  	and     bh,0C0h
 11859 00002909 75C1                    	jnz     short BadSFT
 11860                                  	;xor	bl,[es:di+2]
 11861 0000290B 26325D02                	xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 11862 0000290F 80E30F                  	and     bl,0Fh
 11863 00002912 75B8                    	jnz     short BadSFT
 11864 00002914 57                      	push    di
 11865 00002915 56                      	push    si
 11866                                  	;lea	di,[di+20h]  ; MSDOS 3.3
 11867 00002916 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 11868                                  	;lea	si,[si+1]
 11869 00002919 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 11870                                  	;mov	cx,11
 11871 0000291C B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 11872 0000291F F3A6                    	repe	cmpsb
 11873 00002921 5E                      	pop     si
 11874 00002922 5F                      	pop     di
 11875 00002923 75A7                    	jnz     short BadSFT
 11876                                  	;mov	bx,[si+1Bh]
 11877 00002925 8B5C1B                  	MOV	bX,[SI+fcb_nsl_firclus]
 11878 00002928 EB8B                    	jmp     short CheckFirClus
 11879                                  
 11880                                  CheckNoShareDev:
 11881                                  	;mov	bx,[si+1Ah]
 11882 0000292A 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 11883                                  	;cmp	bx,[es:di+7]
 11884 0000292D 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 11885 00002931 7599                    	JNZ	short BadSFT
 11886                                  	;mov	bx,[si+1Ch]
 11887 00002933 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 11888                                  	;cmp	bx,[es:di+9]
 11889 00002936 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11890 0000293A 7590                    	JNZ	short BadSFT
 11891 0000293C EB81                    	JMP	CheckD
 11892                                  
 11893                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 11894                                  ;----------------------------------------------------------------------------
 11895                                  ;
 11896                                  ;   SFTFromFCB - the workhorse of this compatability crap.  Check to see if
 11897                                  ;	the SFT for the FCB is Good.  If so, make ThisSFT point to it.	If not
 11898                                  ;	good, get one from the cache and regenerate it.  Overlay the LRU field
 11899                                  ;	with PID
 11900                                  ;
 11901                                  ;   Inputs:	DS:SI point to FCB
 11902                                  ;   Outputs:	ThisSFT point to appropriate SFT
 11903                                  ;		Carry clear -> OK ES:DI -> SFT
 11904                                  ;		Carry set -> error in ax
 11905                                  ;   Registers modified: ES,DI, AX
 11906                                  ;
 11907                                  ;----------------------------------------------------------------------------
 11908                                  
 11909                                  SFTFromFCB:
 11910                                  
 11911                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 11912                                  
 11913 0000293E 50                      	push	ax
 11914 0000293F 53                      	push	bx
 11915                                  	;mov	al,[si+18h]
 11916 00002940 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 11917 00002943 E833FF                  	call	CheckFCB
 11918 00002946 5B                      	pop	bx
 11919 00002947 58                      	pop	ax
 11920 00002948 2E893E[3605]            	MOV	[CS:THISSFT],DI		; SS override
 11921 0000294D 2E8C06[3805]            	MOV	[CS:THISSFT+2],ES
 11922 00002952 730F                    	JNC	short Set_SFT		; no problems, just set thissft
 11923 00002954 E8A1EC                  	call	save_world
 11924 00002957 E830FE                  	call	FCBRegen
 11925 0000295A E888EC                  	call	restore_world		; use macro restore world
 11926 0000295D 2EA1[D202]              	MOV     AX,[CS:EXTERR]		; SS override
 11927 00002961 7283                    	jc	short CheckNet_retn
 11928                                  
 11929                                  Set_SFT: 
 11930 00002963 2EC43E[3605]            	LES     DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 11931 00002968 2EFF36[E802]            	PUSH    word [CS:PROC_ID]	; set process id
 11932                                  	;pop	word [es:di+31h]
 11933 0000296D 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 11934 00002971 C3                      	retn				; carry is clear
 11935                                  
 11936                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 11937                                  ;----------------------------------------------------------------------------
 11938                                  ;
 11939                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 11940                                  ;	unavailable FCB.
 11941                                  ;
 11942                                  ;   Inputs:	none.
 11943                                  ;   Outputs:	none.
 11944                                  ;   Registers modified: all
 11945                                  ;
 11946                                  ;----------------------------------------------------------------------------
 11947                                  ;
 11948                                  
 11949                                  FCBHardErr:
 11950                                  	;mov	ax,23h
 11951 00002972 B82300                  	MOV	AX,error_FCB_unavailable
 11952                                  	;mov	byte [cs:ALLOWED],8
 11953 00002975 2EC606[F702]08          	MOV	byte [CS:ALLOWED],Allowed_FAIL
 11954 0000297B 2EC42E[2405]            	LES	BP,[CS:THISDPB]
 11955 00002980 BF0100                  	MOV	DI,1			; Fake some registers
 11956 00002983 89F9                    	MOV	CX,DI
 11957                                  	;mov	dx,[es:bp+0Bh]
 11958 00002985 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 11959 00002989 E8C02E                  	call	HARDERR
 11960 0000298C F9                      	STC
 11961 0000298D C3                      	retn
 11962                                  
 11963                                  ;============================================================================
 11964                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 11965                                  ;============================================================================
 11966                                  ; 21/07/2018 - Retro DOS v3.0
 11967                                  
 11968                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 11969                                  ;
 11970                                  ;	GetRR
 11971                                  ;	GetExtent
 11972                                  ;	SetExtent
 11973                                  ;	GetExtended
 11974                                  ;	GetRecSize
 11975                                  ;	FCBIO
 11976                                  ;	$FCB_OPEN
 11977                                  ;	$FCB_CREATE
 11978                                  ;	$FCB_RANDOM_WRITE_BLOCK
 11979                                  ;	$FCB_RANDOM_READ_BLOCK
 11980                                  ;	$FCB_SEQ_READ
 11981                                  ;	$FCB_SEQ_WRITE
 11982                                  ;	$FCB_RANDOM_READ
 11983                                  ;	$FCB_RANDOM_WRITE
 11984                                  ;
 11985                                  ;	Revision history:
 11986                                  ;
 11987                                  ;		Created: ARR 4 April 1983
 11988                                  ;			 MZ  6 June  1983 completion of functions
 11989                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11990                                  ;				  times.  Change so successive closes work by
 11991                                  ;				  always returning OK.	Also, detect I/O to
 11992                                  ;				  already closed FCB and return EOF.
 11993                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11994                                  ;				  out of sft into FCB for reconnection
 11995                                  ;
 11996                                  ;	    A000   version 4.00	Jan. 1988
 11997                                  
 11998                                  ; Defintions for FCBOp flags
 11999                                  
 12000                                  RANDOM	equ 2				; random operation
 12001                                  FCBREAD equ 4				; doing a read
 12002                                  BLOCK	equ 8				; doing a block I/O
 12003                                  
 12004                                  ;Break <GetRR - return the random record field in DX:AX>
 12005                                  ;---------------------------------------------------------------------------
 12006                                  ;
 12007                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 12008                                  ;	from the FCB pointed to by DS:SI
 12009                                  ;
 12010                                  ;   Inputs:	DS:SI point to an FCB
 12011                                  ;		BX has record size
 12012                                  ;   Outputs:	DX:AX contain the contents of the random record field
 12013                                  ;   Registers modified: none
 12014                                  ;---------------------------------------------------------------------------
 12015                                  
 12016                                  GetRR:
 12017                                  	;mov	ax,[si+21h]
 12018 0000298E 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 12019                                  	;mov	dx,[si+23h]
 12020 00002991 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 12021 00002994 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 12022 00002997 7202                    	JB	short GetRRBye
 12023 00002999 30F6                    	XOR	DH,DH
 12024                                  GetRRBye:
 12025 0000299B C3                      	retn
 12026                                  
 12027                                  ;Break <GetExtent - retrieve next location for sequential IO>
 12028                                  ;---------------------------------------------------------------------------
 12029                                  ;
 12030                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 12031                                  ;	NR fields in the FCB.
 12032                                  ;
 12033                                  ;   Inputs:	DS:SI - point to FCB
 12034                                  ;   Outputs:	DX:AX contain the contents of the random record field
 12035                                  ;   Registers modified: none
 12036                                  ;---------------------------------------------------------------------------
 12037                                  
 12038                                  GetExtent:
 12039                                  	;mov	al,[si+20h]
 12040 0000299C 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 12041                                  	;mov	dx,[si+0Ch]
 12042 0000299F 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 12043 000029A2 D0E0                    	SHL	AL,1
 12044 000029A4 D1EA                    	SHR	DX,1
 12045 000029A6 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 12046 000029A8 88D4                    	MOV	AH,DL
 12047 000029AA 88F2                    	MOV	DL,DH
 12048 000029AC 30F6                    	XOR	DH,DH
 12049 000029AE C3                      	retn
 12050                                  
 12051                                  ;Break <SetExtent - update the extent/NR field>
 12052                                  ;---------------------------------------------------------------------------
 12053                                  ;
 12054                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 12055                                  ;	fields
 12056                                  ;
 12057                                  ;   Inputs:	DS:SI point to FCB
 12058                                  ;		DX:AX is a record location in file
 12059                                  ;   Outputs:	Extent/NR fields are filled in
 12060                                  ;   Registers modified: CX
 12061                                  ;---------------------------------------------------------------------------
 12062                                  
 12063                                  SetExtent:
 12064 000029AF 50                      	push	ax
 12065 000029B0 52                      	push	dx
 12066 000029B1 89C1                    	MOV	CX,AX
 12067 000029B3 247F                    	AND	AL,7FH			; next rec field
 12068                                  	;mov	[si+20h],al
 12069 000029B5 884420                  	MOV	[SI+SYS_FCB.NR],AL
 12070 000029B8 80E180                  	AND	CL,80H			; save upper bit
 12071 000029BB D1E1                    	SHL	CX,1
 12072 000029BD D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 12073 000029BF 88E8                    	MOV	AL,CH
 12074 000029C1 88D4                    	MOV	AH,DL
 12075                                  	;mov	[si+0Ch], ax
 12076 000029C3 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 12077 000029C6 5A                      	pop	dx
 12078 000029C7 58                      	pop	ax
 12079 000029C8 C3                      	retn
 12080                                  
 12081                                  ;Break <GetExtended - find FCB in potential extended fcb>
 12082                                  ;---------------------------------------------------------------------------
 12083                                  ;
 12084                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 12085                                  ;
 12086                                  ;   Inputs:	DS:DX point to a possible extended FCB
 12087                                  ;   Outputs:	DS:SI point to the FCB part
 12088                                  ;		zeroflag set if not extended fcb
 12089                                  ;   Registers modified: SI
 12090                                  ;---------------------------------------------------------------------------
 12091                                  
 12092                                  GetExtended:
 12093 000029C9 89D6                    	MOV	SI,DX			; point to Something
 12094 000029CB 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 12095 000029CE 7503                    	JNZ	short GetBye		; not there
 12096 000029D0 83C607                  	ADD	SI,7			; point to FCB
 12097                                  GetBye:
 12098 000029D3 39D6                    	CMP	SI,DX			; set condition codes
 12099                                  getextd_retn:
 12100 000029D5 C3                      	retn
 12101                                  
 12102                                  ;Break <GetRecSize - return in BX the FCB record size>
 12103                                  ;---------------------------------------------------------------------------
 12104                                  ;
 12105                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 12106                                  ;
 12107                                  ;   Inputs:	DS:SI point to a non-extended FCB
 12108                                  ;   Outputs:	BX contains the record size
 12109                                  ;   Registers modified: None
 12110                                  ;---------------------------------------------------------------------------
 12111                                  
 12112                                  GetRecSize:
 12113 000029D6 8B5C0E                  	mov	bx,[si+0Eh]
 12114 000029D9 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 12115 000029DC 09DB                    	OR	BX,BX			; is it nul?
 12116 000029DE 74F5                    	jz	short getextd_retn
 12117 000029E0 BB8000                  	MOV	BX,128			; use default size
 12118                                  	;mov	[si+0Eh],bx
 12119 000029E3 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 12120 000029E6 C3                      	retn
 12121                                  
 12122                                  ;BREAK <FCBIO - do internal FCB I/O>
 12123                                  ;---------------------------------------------------------------------------
 12124                                  ;
 12125                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 12126                                  ;
 12127                                  ;   Inputs:	FCBOP flags which operations need to be performed
 12128                                  ;		DS:DX point to FCB
 12129                                  ;		CX may have count of number of records to xfer
 12130                                  ;   Outputs:	AL has error code
 12131                                  ;   Registers modified: all
 12132                                  ;---------------------------------------------------------------------------
 12133                                  
 12134                                  FCBIO:
 12135                                  
 12136                                  FEOF	EQU	1
 12137                                  FTRIM	EQU	2
 12138                                  
 12139                                  %define	FCBErr	byte [bp-1]  ; byte	
 12140                                  %define	cRec	word [bp-3]  ; word	
 12141                                  ;%define RecPos	word [bp-7]  ; dword
 12142                                  %define RecPosL	word [bp-7]  ; word
 12143                                  %define RecPosH	word [bp-5]  ; word
 12144                                  %define	RecSize	word [bp-9]  ; word
 12145                                  ;%define bPos	word [bp-13] ; dword
 12146                                  %define bPosL	word [bp-13] ; word
 12147                                  %define bPosH	word [bp-11] ; word
 12148                                  %define cByte	word [bp-15] ; word	
 12149                                  %define cResult word [bp-17] ; word	
 12150                                  %define	cRecRes	word [bp-19] ; word
 12151                                  %define	FCBOp	byte [bp-20] ; byte
 12152                                  
 12153                                  	;Enter
 12154                                  
 12155 000029E7 55                      	push	bp
 12156 000029E8 89E5                    	mov	bp,sp
 12157 000029EA 83EC14                  	sub	sp,20
 12158                                  	;mov	[bp-20],al
 12159 000029ED 8846EC                  	MOV	FCBOp,AL
 12160                                  	;mov	byte [bp-1],0
 12161 000029F0 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 12162 000029F4 E8D2FF                  	call	GetExtended		;   FCB = GetExtended ();
 12163                                  	;test	byte [bp-20],8
 12164 000029F7 F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 12165 000029FB 7503                    	JNZ	short GetPos
 12166 000029FD B90100                  	MOV	CX,1			;	cRec = 1;
 12167                                  GetPos:
 12168                                  	;mov	[bp-3],cx
 12169 00002A00 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 12170 00002A03 E896FF                  	call	GetExtent		;   RecPos = GetExtent ();
 12171 00002A06 E8CDFF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 12172                                  	;mov	[bp-9],bx
 12173 00002A09 895EF7                  	MOV	RecSize,BX
 12174                                  	;test	byte [bp-20],2
 12175 00002A0C F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 12176 00002A10 7403                    	JZ	short GetRec
 12177 00002A12 E879FF                  	call	GetRR			;	RecPos = GetRR ();
 12178                                  GetRec:
 12179                                  	;mov	[bp-7],ax
 12180 00002A15 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 12181                                  	;mov	[bp-5],dx
 12182 00002A18 8956FB                  	MOV	RecPosH,DX
 12183 00002A1B E891FF                  	call	SetExtent		;   SetExtent (RecPos);
 12184                                  	;mov	ax,[bp-5]
 12185 00002A1E 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 12186 00002A21 F7E3                    	MUL	BX
 12187 00002A23 89C7                    	MOV	DI,AX
 12188                                  	;mov	ax,[bp-7]
 12189 00002A25 8B46F9                  	MOV	AX,RecPosL
 12190 00002A28 F7E3                    	MUL	BX
 12191 00002A2A 01FA                    	ADD	DX,DI
 12192                                  	;mov	[bp-13],ax
 12193 00002A2C 8946F3                  	MOV	bPosL,AX
 12194                                  	;mov	[bp-11],dx
 12195 00002A2F 8956F5                  	MOV	bPosH,DX
 12196                                  	;mov	ax,[bp-3]
 12197 00002A32 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 12198 00002A35 F7E3                    	MUL	BX
 12199                                  	;mov	[bp-15],ax
 12200 00002A37 8946F1                  	MOV	cByte,AX
 12201                                  
 12202                                  ;hkn; 	SS override
 12203 00002A3A 360306[DA02]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 12204 00002A3F 83D200                  	ADC	DX,0
 12205 00002A42 7419                    	JZ	short DoOper
 12206                                  	;mov	byte [bp-1],2
 12207 00002A44 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 12208                                  
 12209                                  ;hkn; 	SS override
 12210 00002A48 36A1[DA02]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 12211 00002A4C F7D8                    	NEG	AX
 12212 00002A4E 7501                    	JNZ	short DoDiv
 12213 00002A50 48                      	DEC	AX
 12214                                  DoDiv:
 12215 00002A51 31D2                    	XOR	DX,DX
 12216 00002A53 F7F3                    	DIV	BX
 12217                                  	;mov	[bp-3],ax
 12218 00002A55 8946FD                  	MOV	cRec,AX
 12219 00002A58 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 12220                                  	;mov	[bp-15],ax
 12221 00002A5A 8946F1                  	MOV	cByte,AX		;	}
 12222                                  DoOper:
 12223 00002A5D 31DB                    	XOR	BX,BX
 12224                                  	;mov	[bp-17],bx
 12225 00002A5F 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 12226                                  	;cmp	[bp-15],bx
 12227 00002A62 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 12228 00002A65 7506                    	JNZ	short DoGetExt
 12229                                  	;test	byte [bp-1],2
 12230 00002A67 F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 12231                                  	;JZ	short DoGetExt
 12232                                  	;JMP	short SkipOp
 12233 00002A6B 7576                    	jnz	short SkipOp
 12234                                  DoGetExt:
 12235 00002A6D E8CEFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 12236 00002A70 730F                    	JNC	short ContinueOp
 12237                                  FCBDeath:
 12238 00002A72 E8AAEC                  	call	FCB_RET_ERR		; signal error, map for extended
 12239                                  	;mov	word [bp-19],0
 12240 00002A75 C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 12241                                  	;mov	byte [bp-1],1
 12242 00002A7A C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 12243 00002A7E E9F000                  	JMP	FCBSave 		; bam!
 12244                                  ContinueOp:
 12245                                  	;mov	di,offset DOS_READ
 12246                                  	;test	byte [bp-14h],4
 12247                                  	;jnz	short DoContext
 12248                                  	;mov	di,DOS_WRITE
 12249                                  
 12250                                  	;mov	ax,[si+10h]
 12251 00002A81 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 12252                                  	;mov	[es:di+11h],ax
 12253 00002A84 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 12254                                  	;mov	ax,[si+12h]
 12255 00002A88 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 12256                                  	;mov	[es:di+13h],ax
 12257 00002A8B 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 12258                                  	;mov	ax,[bp-13]
 12259 00002A8F 8B46F3                  	MOV	AX,bPosL
 12260                                  	;mov	dx,[bp-11]
 12261 00002A92 8B56F5                  	MOV	DX,bPosH
 12262                                  	;mov	[es:di+15h],ax
 12263 00002A95 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 12264                                  	;xchg	dx,[es:di+17h]
 12265 00002A99 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 12266 00002A9D 52                      	PUSH	DX			; save away Open age.
 12267                                  	;mov	cx,[bp-15]
 12268 00002A9E 8B4EF1                  	MOV	CX,cByte		;	cResult =
 12269                                  
 12270                                  ;hkn; DOS_Read is in DOSCODE
 12271 00002AA1 BF[043E]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 12272                                  	;test	byte [bp-20],4
 12273 00002AA4 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 12274 00002AA8 7503                    	JNZ	short DoContext
 12275                                  
 12276                                  ;hkn; DOS_Write is in DOSCODE
 12277 00002AAA BF[853F]                	MOV	DI,DOS_WRITE
 12278                                  DoContext:
 12279 00002AAD 55                      	push	bp
 12280 00002AAE 1E                      	push	ds
 12281 00002AAF 56                      	push	si
 12282                                  
 12283                                  ;hkn; SS is DOSDATA
 12284 00002AB0 16                      	push	ss
 12285 00002AB1 1F                      	pop	ds
 12286                                  
 12287                                  ;; Fix for disk full
 12288 00002AB2 FFD7                    	CALL	DI
 12289                                  	
 12290 00002AB4 5E                      	pop	si
 12291 00002AB5 1F                      	pop	ds
 12292 00002AB6 5D                      	pop	bp
 12293 00002AB7 72B9                    	JC	short FCBDeath
 12294                                  	
 12295 00002AB9 36803E[8C0F]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 12296 00002ABF 740A                    	JZ	short NODSKFULL
 12297 00002AC1 36C606[8C0F]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 12298                                  	;mov	byte [bp-1],1 
 12299 00002AC7 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 12300                                  NODSKFULL:
 12301                                  ;; Fix for disk full
 12302                                  	;mov	[bp-17],cx
 12303 00002ACB 894EEF                  	MOV	cResult,CX
 12304 00002ACE E800FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 12305                                  	;pop	word [es:di+17h]	
 12306 00002AD1 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 12307                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 12308                                  	;mov	ax,[es:di+11h]
 12309 00002AD5 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 12310                                  	;mov	[si+10h],ax
 12311 00002AD9 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 12312                                  	;mov	ax,[es:di+13h]
 12313 00002ADC 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 12314                                  	;mov	[si+12h],ax
 12315 00002AE0 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 12316                                  					;	}
 12317                                  SkipOp:
 12318                                  	;mov	ax,[bp-17]
 12319 00002AE3 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 12320 00002AE6 31D2                    	XOR	DX,DX
 12321                                  	;div	word [bp-9]
 12322 00002AE8 F776F7                  	DIV	RecSize
 12323                                  	;mov	[bp-19],ax
 12324 00002AEB 8946ED                  	MOV	cRecRes,AX
 12325                                  	;add	[bp-7],ax
 12326 00002AEE 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 12327                                  	;adc	word [bp-5],0
 12328 00002AF1 8356FB00                	ADC	RecPosH,0
 12329                                  ;
 12330                                  ; If we have not gotten the expected number of records, we signal an EOF
 12331                                  ; condition.  On input, this is EOF.  On output this is usually disk full.
 12332                                  ; BUT...  Under 2.0 and before, all device output IGNORED this condition.  So
 12333                                  ; do we.
 12334                                  ;
 12335                                  	;cmp	ax,[bp-3]
 12336 00002AF5 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 12337 00002AF8 7412                    	JZ	short TryBlank
 12338                                  	;test	byte [bp-20],4
 12339 00002AFA F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 12340 00002AFE 7508                    	JNZ	short SetEOF
 12341                                  	;test	word [es:di+5],80h
 12342 00002B00 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12343 00002B06 7504                    	JNZ	short TryBlank
 12344                                  SetEOF:
 12345                                  	;mov	byte [bp-1],1
 12346 00002B08 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 12347                                  TryBlank:				;
 12348 00002B0C 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 12349 00002B0E 7426                    	JZ	short SetExt
 12350                                  	;add	word [bp-7],1
 12351 00002B10 8346F901                	ADD	RecPosL,1		;	RecPos++;
 12352                                  	;adc	word [bp-5],0
 12353 00002B14 8356FB00                	ADC	RecPosH,0
 12354                                  	;test	byte [bp-20],4
 12355 00002B18 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 12356 00002B1C 7418                    	JZ	short SetExt
 12357                                  	;inc	word [bp-19]
 12358 00002B1E FF46ED                  	INC	cRecRes 		;	cRecRes++;
 12359                                  	;mov	byte [bp-1],3
 12360 00002B21 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 12361                                  	;mov	cx,[bp-9]
 12362 00002B25 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 12363 00002B28 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 12364 00002B2A 30C0                    	XOR	AL,AL
 12365                                  ;hkn; 	SS override
 12366 00002B2C 36C43E[DA02]            	les     di,[ss:DMAADD]
 12367                                  	;add	di,[bp-17]
 12368 00002B31 037EEF                  	ADD	DI,cResult
 12369 00002B34 F3AA                    	REP	STOSB			;   }	}
 12370                                  SetExt:
 12371                                  	;mov	dx,[bp-5]
 12372 00002B36 8B56FB                  	MOV	DX,RecPosH
 12373                                  	;mov	ax,[bp-7]
 12374 00002B39 8B46F9                  	MOV	AX,RecPosL
 12375                                  	;test	byte [bp-20],2
 12376 00002B3C F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 12377 00002B40 7406                    	JZ	short DoSetExt
 12378                                  	;test	byte [bp-20],8
 12379 00002B42 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 12380 00002B46 7403                    	JZ	short TrySetRR
 12381                                  DoSetExt:
 12382 00002B48 E864FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 12383                                  TrySetRR:
 12384                                  	;test	byte [bp-20],8
 12385 00002B4B F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 12386 00002B4F 740F                    	JZ	short TryReturn
 12387                                  	;mov	[si+21h],ax
 12388 00002B51 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 12389                                  	;mov	[si+23h],dl
 12390 00002B54 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 12391                                  	;cmp	word [si+0Eh],64
 12392 00002B57 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 12393 00002B5B 7303                    	JAE	short TryReturn
 12394                                  	;mov	[si+24h],dh
 12395 00002B5D 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 12396                                  TryReturn: 
 12397                                  	;test	byte [bp-20],4
 12398 00002B60 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 12399 00002B64 750B                    	JNZ	short FCBSave
 12400 00002B66 1E                      	push	ds			;	FCB->FDate = date;
 12401 00002B67 E84FED                  	call	DATE16			;	FCB->FTime = time;
 12402 00002B6A 1F                      	pop	ds
 12403                                  	;mov	[si+14h],ax
 12404 00002B6B 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 12405                                  	;mov	[si+16h],dx
 12406 00002B6E 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 12407                                  FCBSave: 
 12408                                  	;test	byte [bp-20],8
 12409 00002B71 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 12410 00002B75 7409                    	jz	short DoReturn
 12411                                  	;mov	cx,[bp-19]
 12412 00002B77 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 12413 00002B7A E88EEA                  	call    Get_User_Stack
 12414                                  	;mov	[si+4],cx
 12415 00002B7D 894C04                  	MOV	[SI+user_env.user_CX],CX
 12416                                  DoReturn:
 12417                                  	;mov	al,[bp-1]
 12418 00002B80 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 12419                                  	;Leave	
 12420 00002B83 89EC                    	mov     sp,bp
 12421 00002B85 5D                      	pop     bp
 12422 00002B86 C3                      	retn
 12423                                  
 12424                                  ; 22/07/2018 - Retro DOS v3.0
 12425                                  
 12426                                  ;Break <$FCB_Open - open an old-style FCB>
 12427                                  ;---------------------------------------------------------------------------
 12428                                  ;
 12429                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 12430                                  ;	for us and asked to have the rest filled in.
 12431                                  ;
 12432                                  ;   Inputs:	DS:DX point to an unopenned FCB
 12433                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 12434                                  ;		FCB has the following fields filled in:
 12435                                  ;		    Time/Date Extent/NR Size
 12436                                  ;---------------------------------------------------------------------------
 12437                                  
 12438                                  _$FCB_OPEN:			; System call 15
 12439                                  
 12440 00002B87 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 12441                                  
 12442                                  ;hkn; DOS_Open is in DOSCODE
 12443 00002B8A B9[8237]                	MOV	CX,DOS_OPEN
 12444                                  ;
 12445                                  ; The following is common code for Creation and openning of FCBs.  AX is
 12446                                  ; either attributes (for create) or open mode (for open)...  DS:DX points to
 12447                                  ; the FCB
 12448                                  ;
 12449                                  DoAccess:
 12450 00002B8D 3E                      	pushj	ds
 12451 00002B8E 52                      	push	dx
 12452 00002B8F 51                      	push	cx
 12453 00002B90 50                      	push	ax			; save FCB pointer away
 12454                                  
 12455                                  ;hkn; 	OpenBuf is in DOSDATA
 12456 00002B91 BF[6003]                	MOV	DI,OPENBUF
 12457 00002B94 E8553E                  	call	TransFCB		; crunch the fcb
 12458 00002B97 58                      	pop	ax
 12459 00002B98 59                      	pop	cx
 12460 00002B99 5A                      	pop	dx
 12461 00002B9A 1F                      	pop	ds			; get fcb
 12462 00002B9B 7303                    	JNC	short FindFCB		; everything seems ok
 12463                                  FCBOpenErr:
 12464                                  ;
 12465                                  ; AL has error code
 12466                                  ;
 12467 00002B9D E97FEB                  	jmp	FCB_RET_ERR
 12468                                  FindFCB:
 12469 00002BA0 E826FE                  	call	GetExtended		; DS:SI will point to FCB
 12470                                  
 12471                                  	; MSDOS 6.0
 12472                                  	;push	ax
 12473                                  	;mov	al,1			;indicate Open/Create operation
 12474                                  	;call	LRUFCB			; get a sft entry (no error)
 12475                                  	;pop	ax
 12476                                  	;jc	short HardMessage
 12477                                  	
 12478                                  	; MSDOS 3.3
 12479 00002BA3 E808FB                  	call	LRUFCB
 12480 00002BA6 722A                    	JC	short HardMessage
 12481                                  
 12482                                  	;mov	word [es:di+2],8000h
 12483 00002BA8 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 12484 00002BAE 1E                      	push	ds
 12485 00002BAF 56                      	push	si
 12486 00002BB0 53                      	push	bx			; save fcb pointer
 12487 00002BB1 89CE                    	MOV	SI,CX
 12488                                  
 12489                                  ;hkn; SS is DOSDATA
 12490 00002BB3 16                      	push	ss
 12491 00002BB4 1F                      	pop	ds			; let DOS_Open see variables
 12492 00002BB5 FFD6                    	CALL	SI			; go open the file
 12493 00002BB7 5B                      	pop	bx
 12494 00002BB8 5E                      	pop	si
 12495 00002BB9 1F                      	pop	ds			; get fcb
 12496                                  
 12497                                  ;hkn; SS override
 12498 00002BBA 36C43E[3605]            	LES	DI,[SS:THISSFT]		; get sf pointer
 12499 00002BBF 7319                    	JNC	short FCBOK		; operation succeeded
 12500                                  failopen:
 12501 00002BC1 50                      	PUSH	AX
 12502 00002BC2 B052                    	MOV	AL,"R"                  ; clear out field (free sft)
 12503 00002BC4 E89CFC                  	call	BlastSFT
 12504 00002BC7 58                      	POP	AX
 12505                                  	;cmp	ax,4
 12506 00002BC8 83F804                  	CMP	AX,error_too_many_open_files
 12507 00002BCB 7405                    	JZ	short HardMessage
 12508                                  	;cmp	ax,24h
 12509 00002BCD 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 12510 00002BD0 7505                    	jnz	short DeadFCB
 12511                                  HardMessage:
 12512 00002BD2 50                      	PUSH	AX
 12513 00002BD3 E89CFD                  	call	FCBHardErr
 12514 00002BD6 58                      	POP	AX
 12515                                  DeadFCB:
 12516 00002BD7 E945EB                  	jmp	FCB_RET_ERR
 12517                                  FCBOK:
 12518                                  	; MSDOS 6.0
 12519                                  	;call	IsSFTNet		       ;AN007;F.C. >32mb  Non Fat file?
 12520                                  	;JNZ	short FCBOK2		       ;AN007;F.C. >32mb  yes
 12521                                  	;call	CheckShare		       ;AN000;F.C. >32mb  share around?
 12522                                  	;JNZ	short FCBOK2		       ;AN000;F.C. >32mb  yes
 12523                                  ;SR;
 12524                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 12525                                  ; LocalSFT variable to reflect this.
 12526                                  ;
 12527                                  	;mov	[cs:LocalSFT],di	;
 12528                                  	;mov	[cs:LocalSFT+2],es; Store the SFT address
 12529                                  ;;SR;
 12530                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 12531                                  ;;
 12532                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 12533                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 12534                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 12535                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 12536                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 12537                                  
 12538                                  FCBOK2:
 12539                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12540 00002BDA 26FF05                  	inc	word [es:di]
 12541                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 12542 00002BDD E8F1F9                  	call	SaveFCBInfo
 12543                                  	; MSDOS 3.3
 12544 00002BE0 E8B5FA                  	call	SetOpenAge
 12545                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12546                                  	;test	word [es:di+5],80h
 12547 00002BE3 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12548 00002BE9 7509                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 12549 00002BEB 8A04                    	MOV	AL,[SI]			; get drive byte
 12550 00002BED E8853D                  	call	GETTHISDRV		; convert
 12551 00002BF0 FEC0                    	INC	AL
 12552 00002BF2 8804                    	MOV	[SI],AL			; stash in good drive letter
 12553                                  FCBNoDrive:
 12554                                  	;mov	word [si+0Eh],128
 12555 00002BF4 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 12556                                  
 12557                                  	;mov	ax,[es:di+0Dh]
 12558 00002BF9 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 12559                                  	;mov	[si+16h],ax
 12560 00002BFD 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 12561                                  	;mov	ax,[es:di+0Fh]
 12562 00002C00 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 12563                                  	;mov	[si+14h],ax
 12564 00002C04 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 12565                                  	;mov	ax,[es:di+11h]
 12566 00002C07 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 12567                                  	;mov	[si+10h],ax
 12568 00002C0B 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 12569                                  	;mov	ax,[es:di+13h]
 12570 00002C0E 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 12571                                  	;mov	[si+12h],ax
 12572 00002C12 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 12573 00002C15 31C0                    	XOR	AX,AX			; convenient zero
 12574                                  	;mov	[si+0Ch],ax
 12575 00002C17 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 12576                                  ;
 12577                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 12578                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 12579                                  ;
 12580                                  
 12581                                  ;hkn; 	SS override
 12582 00002C1A 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 12583                                  	;mov	ah,[es:di+4]
 12584 00002C1F 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 12585                                  OpenScan:
 12586                                  	;cmp	al,[si+18h]
 12587 00002C23 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 12588 00002C26 7407                    	JZ	short SkipCheck
 12589 00002C28 50                      	push	ax			; preserve count
 12590 00002C29 E84DFC                  	call	CheckFCB		; do they match
 12591 00002C2C 58                      	pop	ax			; get count back
 12592 00002C2D 7309                    	JNC	short OpenFound		; found a match!
 12593                                  SkipCheck:
 12594 00002C2F FEC0                    	INC	AL			; advance to next FCB
 12595 00002C31 38E0                    	CMP	AL,AH			; table full?
 12596 00002C33 75EE                    	JNZ	short OpenScan		; no, go for more
 12597                                  OpenDone:
 12598 00002C35 30C0                    	xor	al,al			; return success
 12599 00002C37 C3                      	retn
 12600                                  ;
 12601                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 12602                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 12603                                  ; Consider:
 12604                                  ;
 12605                                  ;   open (foo)	delete (foo) open (bar)
 12606                                  ;
 12607                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 12608                                  ; foo even though foo is no longer needed; this is due to the server closing
 12609                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 12610                                  ; If we were to CLOSE bar, the server would then close the only reference to
 12611                                  ; bar and subsequent I/O would be lost to the redirector.
 12612                                  ;
 12613                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 12614                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 12615                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 12616                                  ; around.  This will allow us to access the same file through multiple network
 12617                                  ; connections and NOT prematurely terminate when the ref count on one
 12618                                  ; connection goes to zero.
 12619                                  ;
 12620                                  OpenFound:
 12621                                  	;mov	[si+18h],al
 12622 00002C38 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 12623 00002C3B 26FF05                  	inc	word [es:di]
 12624                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] 
 12625                                  					; remember this new invocation
 12626 00002C3E 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 12627                                  	;mov	[es:di+15h],ax
 12628 00002C42 26894515                	MOV	[ES:DI+sf_LRU],AX
 12629                                  ;
 12630                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 12631                                  ; blast it to prevent other reuse.
 12632                                  ;
 12633 00002C46 16                      	push	ss
 12634 00002C47 1F                      	pop	ds
 12635 00002C48 C43E[3605]              	LES	DI,[THISSFT]
 12636 00002C4C 26FF0D                  	dec	word [es:di]
 12637                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12638                                  					; free the newly allocated SFT
 12639 00002C4F E80647                  	call	ShareEnd
 12640 00002C52 B043                    	MOV	AL,'C'
 12641 00002C54 E80CFC                  	call	BlastSFT
 12642 00002C57 EBDC                    	JMP	short OpenDone
 12643                                  
 12644                                  ;BREAK	<$FCB_Create - create a new directory entry>
 12645                                  ;----------------------------------------------------------------------------
 12646                                  ;
 12647                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 12648                                  ;	FCB for us and asked to have the rest filled in.
 12649                                  ;
 12650                                  ;   Inputs:	DS:DX point to an unopenned FCB
 12651                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 12652                                  ;		FCB has the following fields filled in:
 12653                                  ;		    Time/Date Extent/NR Size
 12654                                  ;----------------------------------------------------------------------------
 12655                                  
 12656                                  _$FCB_CREATE:		; System call 22
 12657                                  
 12658                                  ;hkn; DOS_Create is in DOSCODE
 12659 00002C59 B9[EC36]                	MOV	CX,DOS_CREATE		; routine to call
 12660 00002C5C 31C0                    	XOR	AX,AX			; attributes to create
 12661 00002C5E E868FD                  	call	GetExtended		; get extended FCB
 12662 00002C61 7403                    	JZ	short DoAccessJ		; not an extended FCB
 12663 00002C63 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 12664                                  DoAccessJ:
 12665 00002C66 E924FF                  	JMP	DoAccess		; do dirty work
 12666                                  
 12667                                  ; 22/07/2018 - Retro DOS v3.0
 12668                                  
 12669                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 12670                                  ;----------------------------------------------------------------------------
 12671                                  ;
 12672                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 12673                                  ;	and write a number of blocks from it.
 12674                                  ;
 12675                                  ;   Inputs:	DS:DX point to an FCB
 12676                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 12677                                  ;		AL <> 0 Not enough room on disk for the output
 12678                                  ;
 12679                                  ;----------------------------------------------------------------------------
 12680                                  
 12681                                  _$FCB_RANDOM_WRITE_BLOCK:
 12682                                  	;mov	AL,0Ah	
 12683 00002C69 B00A                    	MOV	AL,RANDOM+BLOCK
 12684 00002C6B E979FD                  	JMP	FCBIO
 12685                                  
 12686                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 12687                                  ;----------------------------------------------------------------------------
 12688                                  ;
 12689                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 12690                                  ;	and read a number of blocks from it.
 12691                                  ;
 12692                                  ;   Inputs:	DS:DX point to an FCB
 12693                                  ;   Outputs:	AL = error codes defined above
 12694                                  ;
 12695                                  ;----------------------------------------------------------------------------
 12696                                  
 12697                                  _$FCB_RANDOM_READ_BLOCK:
 12698                                  	;mov	AL,0Eh	
 12699 00002C6E B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 12700 00002C70 E974FD                  	JMP	FCBIO
 12701                                  
 12702                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 12703                                  ;----------------------------------------------------------------------------
 12704                                  ;
 12705                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 12706                                  ;	memory
 12707                                  ;
 12708                                  ;   Inputs:	DS:DX point to an FCB
 12709                                  ;   Outputs:	AL = error codes defined above
 12710                                  ;
 12711                                  ;----------------------------------------------------------------------------
 12712                                  
 12713                                  _$FCB_SEQ_READ:
 12714                                  	;mov	AL,4	
 12715 00002C73 B004                    	MOV	AL,FCBREAD
 12716 00002C75 E96FFD                  	JMP	FCBIO
 12717                                  
 12718                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 12719                                  ;----------------------------------------------------------------------------
 12720                                  ;
 12721                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 12722                                  ;	file
 12723                                  ;
 12724                                  ;   Inputs:	DS:DX point to an FCB
 12725                                  ;   Outputs:	AL = error codes defined above
 12726                                  ;
 12727                                  ;----------------------------------------------------------------------------
 12728                                  
 12729                                  _$FCB_SEQ_WRITE:
 12730 00002C78 B000                    	MOV	AL,0
 12731 00002C7A E96AFD                  	jmp	FCBIO
 12732                                  
 12733                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 12734                                  ;----------------------------------------------------------------------------
 12735                                  ;
 12736                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 12737                                  ;	record from it.
 12738                                  ;
 12739                                  ;   Inputs:	DS:DX point to an FCB
 12740                                  ;   Outputs:	AL = error codes defined above
 12741                                  ;
 12742                                  ;----------------------------------------------------------------------------
 12743                                  
 12744                                  _$FCB_RANDOM_READ:
 12745                                  	;mov	AL,6	
 12746 00002C7D B006                    	MOV	AL,RANDOM+FCBREAD
 12747 00002C7F E965FD                  	jmp	FCBIO			; single block
 12748                                  
 12749                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 12750                                  ;----------------------------------------------------------------------------
 12751                                  ;
 12752                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 12753                                  ;	a record to it.
 12754                                  ;
 12755                                  ;   Inputs:	DS:DX point to an FCB
 12756                                  ;   Outputs:	AL = error codes defined above
 12757                                  ;
 12758                                  ;----------------------------------------------------------------------------
 12759                                  
 12760                                  _$FCB_RANDOM_WRITE:
 12761                                  	;mov	AL,2	
 12762 00002C82 B002                    	MOV	AL,RANDOM
 12763 00002C84 E960FD                  	jmp	FCBIO
 12764                                  
 12765                                  ;============================================================================
 12766                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 12767                                  ;============================================================================
 12768                                  ; 22/07/2018 - Retro DOS v3.0
 12769                                  
 12770                                  ;**	Search.asm
 12771                                  ;
 12772                                  ;	Directory search system calls.
 12773                                  ;	These will be passed direct text of the pathname from the user. 
 12774                                  ;	They will need to be passed through the macro expander prior to
 12775                                  ;	being sent through the low-level stuff. 
 12776                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 12777                                  ;
 12778                                  ;	$Dir_Search_First	  written
 12779                                  ;	$Dir_Search_Next	  written
 12780                                  ;	$Find_First	  written
 12781                                  ;	$Find_Next		  written
 12782                                  ;	PackName		  written
 12783                                  ;
 12784                                  ;	Modification history:
 12785                                  ;
 12786                                  ;	  Created: ARR 4 April 1983
 12787                                  
 12788                                  ;----------------------------------------------------------------------------
 12789                                  ; Procedure Name : $DIR_SEARCH_FIRST
 12790                                  ;
 12791                                  ; Inputs:
 12792                                  ;	DS:DX Points to unopenned FCB
 12793                                  ; Function:
 12794                                  ;	Directory is searched for first matching entry and the directory
 12795                                  ;	entry is loaded at the disk transfer address
 12796                                  ; Returns:
 12797                                  ;	AL = -1 if no entries matched, otherwise 0
 12798                                  ;----------------------------------------------------------------------------
 12799                                  
 12800                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 12801                                  
 12802                                  _$DIR_SEARCH_FIRST:
 12803 00002C87 368916[3E05]            	MOV	[SS:THISFCB],DX
 12804 00002C8C 368C1E[4005]            	MOV	[SS:THISFCB+2],DS
 12805 00002C91 89D6                    	MOV	SI,DX
 12806 00002C93 803CFF                  	CMP	BYTE [SI],0FFH
 12807 00002C96 7503                    	JNZ	short NORMFCB4
 12808 00002C98 83C607                  	ADD	SI,7			; Point to drive select byte
 12809                                  NORMFCB4:
 12810 00002C9B FF34                    	push	word [SI]		; Save original drive byte for later
 12811                                  
 12812 00002C9D 16                      	push	ss
 12813 00002C9E 07                      	pop	es			; get es to address DOSGroup
 12814                                  
 12815 00002C9F BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 12816 00002CA2 E8473D                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 12817 00002CA5 7304                    	JNC	short SearchIt		; no error, go and look
 12818 00002CA7 5B                      	pop	bx			; Clean stack
 12819                                  ;
 12820                                  ; Error code is in AX
 12821                                  ;
 12822 00002CA8 E974EA                  	jmp	FCB_RET_ERR		; error
 12823                                  
 12824                                  SearchIt:
 12825 00002CAB 16                      	push	ss
 12826 00002CAC 1F                      	pop	ds			; get ready for search
 12827 00002CAD FF36[DA02]              	push	word [DMAADD]
 12828 00002CB1 FF36[DC02]              	push	word [DMAADD+2]
 12829 00002CB5 C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12830 00002CBB 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12831                                  	; MSDOS 6.0
 12832                                  	;call	GET_FAST_SEARCH 	; search
 12833                                  	; MSDOS 3.3
 12834 00002CBF E8560C                  	call	DOS_SEARCH_FIRST
 12835 00002CC2 8F06[DC02]              	pop	word [DMAADD+2]
 12836 00002CC6 8F06[DA02]              	pop	word [DMAADD]
 12837 00002CCA 7304                    	JNC	short SearchSet		; no error, transfer info
 12838 00002CCC 5B                      	pop	bx			; Clean stack
 12839                                  ;
 12840                                  ; Error code is in AX
 12841                                  ;
 12842 00002CCD E94FEA                  	jmp	FCB_RET_ERR
 12843                                  
 12844                                  ;
 12845                                  ; The search was successful (or the search-next).  We store the information
 12846                                  ; into the user's FCB for continuation.
 12847                                  ;
 12848                                  SearchSet:
 12849 00002CD0 BE[6004]                	MOV	SI,SEARCHBUF
 12850 00002CD3 C43E[3E05]              	LES	DI,[THISFCB]		; point to the FCB
 12851 00002CD7 F606[0705]FF            	TEST	byte [EXTFCB],0FFh		;
 12852 00002CDC 7403                    	JZ	short NORMFCB1
 12853 00002CDE 83C707                  	ADD	DI,7			; Point past the extension
 12854                                  NORMFCB1:
 12855 00002CE1 5B                      	pop	bx			; Get original drive byte
 12856 00002CE2 08DB                    	OR	BL,BL
 12857 00002CE4 7506                    	JNZ	short SearchDrv
 12858 00002CE6 8A1E[E402]              	MOV	BL,[CURDRV]
 12859 00002CEA FEC3                    	INC	BL
 12860                                  SearchDrv:
 12861 00002CEC AC                      	LODSB				; Get correct search contin drive byte
 12862 00002CED 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 12863 00002CEF 47                      	INC	DI
 12864                                  	;STOSB				; Store the correct "user" drive byte
 12865                                  					;  at the start of the search info
 12866 00002CF0 B90A00                  	MOV	CX,20/2
 12867 00002CF3 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 12868 00002CF5 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 12869                                  					;   byte to AL
 12870 00002CF7 AA                      	STOSB				; Search contin drive byte at end of
 12871                                  					;   contin info
 12872 00002CF8 C43E[DA02]              	LES	DI,[DMAADD]
 12873 00002CFC F606[0705]FF            	TEST	byte [EXTFCB],0FFh
 12874 00002D01 740E                    	JZ	short NORMFCB2
 12875 00002D03 B0FF                    	MOV	AL,0FFh
 12876 00002D05 AA                      	STOSB
 12877 00002D06 FEC0                    	INC	AL
 12878 00002D08 B90500                  	MOV	CX,5
 12879 00002D0B F3AA                    	REP	STOSB
 12880 00002D0D A0[0805]                	MOV	AL,[SATTRIB]
 12881 00002D10 AA                      	STOSB
 12882                                  NORMFCB2:
 12883 00002D11 88D8                    	MOV	AL,BL			; User Drive byte
 12884 00002D13 AA                      	STOSB
 12885 00002D14 B91000                  	MOV	CX,16			; 32 / 2 words of dir entry
 12886 00002D17 F3A5                    	REP	MOVSW
 12887 00002D19 E900EA                  	jmp	FCB_RET_OK
 12888                                  
 12889                                  ;----------------------------------------------------------------------------
 12890                                  ;
 12891                                  ; Procedure Name : $DIR_SEARCH_NEXT
 12892                                  ;
 12893                                  ; Inputs:
 12894                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 12895                                  ; Function:
 12896                                  ;	Directory is searched for the next matching entry and the directory
 12897                                  ;	entry is loaded at the disk transfer address
 12898                                  ; Returns:
 12899                                  ;	AL = -1 if no entries matched, otherwise 0
 12900                                  ;----------------------------------------------------------------------------
 12901                                  
 12902                                  _$DIR_SEARCH_NEXT:
 12903 00002D1C 368916[3E05]            	MOV	[SS:THISFCB],DX
 12904 00002D21 368C1E[4005]            	MOV	[SS:THISFCB+2],DS
 12905 00002D26 36C606[0805]00          	MOV	byte [SS:SATTRIB],0
 12906 00002D2C 36C606[0705]00          	MOV	byte [SS:EXTFCB],0
 12907                                  
 12908 00002D32 16                      	push	ss
 12909 00002D33 07                      	pop	es
 12910                                  
 12911 00002D34 BF[6004]                	MOV	DI,SEARCHBUF
 12912                                  
 12913 00002D37 89D6                    	MOV	SI,DX
 12914 00002D39 803CFF                  	CMP	BYTE [SI],0FFh
 12915 00002D3C 750D                    	JNZ	short NORMFCB6
 12916 00002D3E 83C606                  	ADD	SI,6
 12917 00002D41 AC                      	LODSB
 12918                                  
 12919 00002D42 36A2[0805]              	MOV	[SS:SATTRIB],AL
 12920 00002D46 36FE0E[0705]            	DEC	byte [SS:EXTFCB]
 12921                                  NORMFCB6:
 12922 00002D4B AC                      	LODSB				; Get original user drive byte
 12923 00002D4C 50                      	push	ax			; Put it on stack
 12924 00002D4D 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 12925 00002D50 AA                      	STOSB				; Put in correct place
 12926 00002D51 B90A00                  	MOV	CX,20/2
 12927 00002D54 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 12928                                  
 12929 00002D56 16                      	push	ss
 12930 00002D57 1F                      	pop	ds
 12931                                  
 12932 00002D58 FF36[DA02]              	push	word [DMAADD]
 12933 00002D5C FF36[DC02]              	push	word [DMAADD+2]
 12934 00002D60 C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12935 00002D66 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12936 00002D6A E8600C                  	call	DOS_SEARCH_NEXT 	; Find it
 12937 00002D6D 8F06[DC02]              	pop	word [DMAADD+2]
 12938 00002D71 8F06[DA02]              	pop	word [DMAADD]
 12939 00002D75 7203                    	JC	short SearchNoMore
 12940 00002D77 E956FF                  	JMP	SearchSet		; Ok set return
 12941                                  
 12942                                  SearchNoMore:
 12943 00002D7A C43E[3E05]              	LES	DI,[THISFCB]
 12944 00002D7E F606[0705]FF            	TEST	byte [EXTFCB],0FFh
 12945 00002D83 7403                    	JZ	short NORMFCB8
 12946 00002D85 83C707                  	ADD	DI,7			; Point past the extension
 12947                                  NORMFCB8:
 12948 00002D88 5B                      	pop	bx			; Get original drive byte
 12949 00002D89 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 12950                                  					;  at the right spot
 12951                                  ;
 12952                                  ; error code is in AX
 12953                                  ;
 12954 00002D8C E990E9                  	jmp	FCB_RET_ERR
 12955                                  
 12956                                  ;---------------------------------------------------------------------------
 12957                                  ;
 12958                                  ;   Procedure Name : $FIND_FIRST
 12959                                  ; 
 12960                                  ;   Assembler usage:
 12961                                  ;	    MOV AH, FindFirst
 12962                                  ;	    LDS DX, name
 12963                                  ;	    MOV CX, attr
 12964                                  ;	    INT 21h
 12965                                  ;	; DMA address has datablock
 12966                                  ;
 12967                                  ;   Error Returns:
 12968                                  ;	    AX = error_path_not_found
 12969                                  ;	       = error_no_more_files
 12970                                  ;---------------------------------------------------------------------------
 12971                                  
 12972                                  _$FIND_FIRST:
 12973 00002D8F 89D6                    	MOV	SI,DX			; get name in appropriate place
 12974 00002D91 36880E[0805]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 12975                                  
 12976 00002D96 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 12977                                  
 12978 00002D99 E8B83C                  	call	TransPathSet		; convert the path
 12979 00002D9C 7305                    	JNC	short Find_it 		; no error, go and look
 12980                                  FindError:
 12981                                  	;mov	al,3
 12982 00002D9E B003                    	mov	al, error_path_not_found ; error and map into one.
 12983 00002DA0 E966E9                  	jmp	SYS_RET_ERR
 12984                                  Find_it:
 12985 00002DA3 16                      	push	ss
 12986 00002DA4 1F                      	pop	ds
 12987                                  
 12988 00002DA5 FF36[DA02]              	push	word [DMAADD]
 12989 00002DA9 FF36[DC02]              	push	word [DMAADD+2]
 12990 00002DAD C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12991 00002DB3 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12992                                  	; MSDOS 6.0
 12993                                  	;call	GET_FAST_SEARCH 	; search
 12994                                  	; MSDOS 3.3
 12995 00002DB7 E85E0B                  	call	DOS_SEARCH_FIRST
 12996 00002DBA 8F06[DC02]              	pop	word [DMAADD+2]
 12997 00002DBE 8F06[DA02]              	pop	word [DMAADD]
 12998 00002DC2 7303                    	JNC	short FindSet 		; no error, transfer info
 12999 00002DC4 E942E9                  	jmp	SYS_RET_ERR
 13000                                  
 13001                                  FindSet:
 13002 00002DC7 BE[6004]                	MOV	SI,SEARCHBUF
 13003 00002DCA C43E[DA02]              	LES	DI,[DMAADD]
 13004 00002DCE B91500                  	MOV	CX,21
 13005 00002DD1 F3A4                    	REP	MOVSB
 13006 00002DD3 56                      	PUSH	SI			; Save pointer to start of entry
 13007                                  	;mov	al,[si+0Bh]
 13008 00002DD4 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 13009 00002DD7 AA                      	STOSB
 13010                                  	;add	si,16h
 13011 00002DD8 83C616                  	ADD	SI,dir_entry.dir_time
 13012 00002DDB A5                      	MOVSW				; dir_time
 13013 00002DDC A5                      	MOVSW				; dir_date
 13014 00002DDD 46                      	INC	SI
 13015 00002DDE 46                      	INC	SI			; Skip dir_first
 13016 00002DDF A5                      	MOVSW				; dir_size (2 words)
 13017 00002DE0 A5                      	MOVSW
 13018 00002DE1 5E                      	POP	SI			; Point back to dir_name
 13019 00002DE2 E83600                   	CALL	PackName
 13020 00002DE5 E915E9                  	jmp	SYS_RET_OK		; bye with no errors
 13021                                  
 13022                                  ;---------------------------------------------------------------------------
 13023                                  ;
 13024                                  ;   Procedure Name : $FIND_NEXT
 13025                                  ;
 13026                                  ;   Assembler usage:
 13027                                  ;	; dma points at area returned by find_first
 13028                                  ;	    MOV AH, findnext
 13029                                  ;	    INT 21h
 13030                                  ;	; next entry is at dma
 13031                                  ;
 13032                                  ;   Error Returns:
 13033                                  ;	    AX = error_no_more_files
 13034                                  ;---------------------------------------------------------------------------
 13035                                  
 13036                                  _$FIND_NEXT:
 13037 00002DE8 16                      	push	ss
 13038 00002DE9 07                      	pop	es
 13039                                  
 13040 00002DEA BF[6004]                	MOV	DI,SEARCHBUF
 13041                                  
 13042 00002DED 36C536[DA02]            	LDS	SI,[SS:DMAADD]
 13043                                  
 13044 00002DF2 B91500                  	MOV	CX,21
 13045 00002DF5 F3A4                    	REP	MOVSB			; Put the search continuation info
 13046                                  					;  in the right place
 13047 00002DF7 16                      	push	ss
 13048 00002DF8 1F                      	pop	ds			; get ready for search
 13049                                  	
 13050 00002DF9 FF36[DA02]              	push	word [DMAADD]
 13051 00002DFD FF36[DC02]              	push	word [DMAADD+2]
 13052 00002E01 C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 13053 00002E07 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 13054 00002E0B E8BF0B                  	call	DOS_SEARCH_NEXT 	; Find it
 13055 00002E0E 8F06[DC02]              	pop	word [DMAADD+2]
 13056 00002E12 8F06[DA02]              	pop	word [DMAADD]
 13057 00002E16 73AF                    	JNC	short FindSet 		; No error, set info
 13058 00002E18 E9EEE8                  	jmp	SYS_RET_ERR
 13059                                  
 13060                                  ;---------------------------------------------------------------------------
 13061                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 13062                                  ;
 13063                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 13064                                  ;	the ASCIZ format.
 13065                                  ;
 13066                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 13067                                  ;		(ES:DI) = destination area (13 bytes)
 13068                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 13069                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 13070                                  ;---------------------------------------------------------------------------
 13071                                  
 13072                                  PackName:
 13073                                  ;	Move over 8 characters to cover the name component, then trim it's
 13074                                  ;	trailing blanks.
 13075                                  
 13076 00002E1B B90800                  	MOV	CX,8			; Pack the name
 13077 00002E1E F3A4                    	REP	MOVSB			; Move all of it
 13078                                  main_kill_tail:
 13079 00002E20 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 13080 00002E25 7507                    	JNZ	short find_check_dot
 13081 00002E27 4F                      	DEC	DI			; Back up over trailing space
 13082 00002E28 41                      	INC	CX
 13083 00002E29 83F908                  	CMP	CX,8
 13084 00002E2C 72F2                    	JB	short main_kill_tail
 13085                                  find_check_dot:
 13086                                  	;CMP	WORD [SI],(" " << 8) | " "
 13087 00002E2E 813C2020                	cmp     word [si],2020h 
 13088 00002E32 7506                    	JNZ	short got_ext 		; Some chars in extension
 13089 00002E34 807C0220                	CMP	BYTE [SI+2]," "
 13090 00002E38 7412                    	JZ	short find_done		; No extension
 13091                                  got_ext:
 13092 00002E3A B02E                    	MOV	AL,"."
 13093 00002E3C AA                      	STOSB
 13094 00002E3D B90300                  	MOV	CX,3
 13095 00002E40 F3A4                    	REP	MOVSB
 13096                                  ext_kill_tail:
 13097 00002E42 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 13098 00002E47 7503                    	JNZ	short find_done
 13099 00002E49 4F                      	DEC	DI			; Back up over trailing space
 13100 00002E4A EBF6                    	JMP	short ext_kill_tail
 13101                                  find_done:
 13102 00002E4C 31C0                    	XOR	AX,AX
 13103 00002E4E AA                      	STOSB				; NUL terminate
 13104 00002E4F C3                      	retn
 13105                                  
 13106                                  ;GET_FAST_SEARCH:
 13107                                  ;	; 22/07/2018
 13108                                  ;	; MSDOS 6.0
 13109                                  ;	OR	word [DOS34_FLAG],SEARCH_FASTOPEN 
 13110                                  ;					;FO.trigger fastopen ;AN000;
 13111                                  ;	call	DOS_SEARCH_FIRST
 13112                                  ;	retn
 13113                                  
 13114                                  
 13115                                  ;============================================================================
 13116                                  ; PATH.ASM, MSDOS 6.0, 1991
 13117                                  ;============================================================================
 13118                                  ; 06/08/2018 - Retro DOS v3.0
 13119                                  
 13120                                  ;**	Directory related system calls. These will be passed direct text of the
 13121                                  ;	pathname from the user. They will need to be passed through the macro
 13122                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 13123                                  ;	defined in DISPATCH. The system calls are:
 13124                                  ;
 13125                                  ;	$CURRENT_DIR  Written
 13126                                  ;	$RMDIR	  Written
 13127                                  ;	$CHDIR	  Written
 13128                                  ;	$MKDIR	  Written
 13129                                  ;
 13130                                  ;
 13131                                  ;	Modification history:
 13132                                  ;
 13133                                  ;	    Created: ARR 4 April 1983
 13134                                  ;		 MZ 10 May 1983     CurrentDir implemented
 13135                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 13136                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 13137                                  ;				    current directory.
 13138                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 13139                                  
 13140                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 13141                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 13142                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 13143                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 13144                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 13145                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 13146                                  ;	I_Need	cMeta,BYTE
 13147                                  ;	I_Need	DrvErr,BYTE					;AN000;
 13148                                  
 13149                                  
 13150                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 13151                                  ;---------------------------------------------------------------------------
 13152                                  ;
 13153                                  ;   Procedure Name : $CURRENT_DIR
 13154                                  ;
 13155                                  ;   Assembler usage:
 13156                                  ;		LDS	SI,area
 13157                                  ;		MOV	DL,drive
 13158                                  ;		INT	21h
 13159                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 13160                                  ;	    ; current directory.
 13161                                  ;   Error returns:
 13162                                  ;	    AX = error_invalid_drive
 13163                                  ;
 13164                                  ;---------------------------------------------------------------------------
 13165                                  
 13166                                  _$CURRENT_DIR:
 13167                                  	;06/08/2018 - Retro DOS v3.0
 13168                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 13169 00002E50 E819F2                  	call	EcritDisk
 13170 00002E53 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 13171 00002E55 E8063B                  	call	GetVisDrv		; grab it
 13172 00002E58 7308                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 13173                                  CurdirErr:
 13174 00002E5A E817F2                  	call	LcritDisk
 13175                                  	
 13176                                  	; MSDOS 6.0
 13177                                  	;MOV	AL,[CS:DrvErr]		;IFS.			;AN000;
 13178                                  
 13179                                  	; MSDOS 3.3
 13180 00002E5D B00F                    	mov	al,0Fh
 13181                                  
 13182                                  curdir_errj:
 13183 00002E5F E9A7E8                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 13184                                  
 13185                                  CurrentValidate:
 13186 00002E62 1E                      	push	ds		; save destination
 13187 00002E63 56                      	push	si
 13188 00002E64 2EC536[3A05]            	LDS	SI,[CS:THISCDS]
 13189                                  	;TEST	word [SI+curdir.flags],curdir_isnet
 13190                                  	;JNZ	short DoCheck
 13191                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 13192                                  ; media check.
 13193                                  ;	CMP	word [SI+curdir.ID],0
 13194                                  ;	JZ	short GetDst
 13195                                  DoCheck:
 13196 00002E69 2EC606[F802]00          	MOV	byte [cs:NoSetDir],0	; interested only in contents
 13197                                  
 13198 00002E6F BF[6003]                	MOV	DI,OPENBUF
 13199                                  
 13200 00002E72 E8FD1C                  	call	ValidateCDS		; output is ES:DI -> CDS
 13201 00002E75 06                      	push	es	 		; swap source and destination
 13202 00002E76 57                      	push	di
 13203 00002E77 5E                      	pop	si
 13204 00002E78 1F                      	pop	ds
 13205                                  GetDst:
 13206 00002E79 5F                      	pop	di
 13207 00002E7A 07                      	pop	es			; get real destination
 13208 00002E7B 72DD                    	JC	short CurdirErr
 13209                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 13210 00002E7D 03744F                  	ADD	SI,[SI+curdir.end]
 13211 00002E80 803C5C                  	CMP	BYTE [SI],'\'		; root or subdirs present?
 13212 00002E83 7501                    	JNZ	short CurrentCopy
 13213 00002E85 46                      	INC	SI
 13214                                  CurrentCopy:
 13215                                  ;	call	FStrCpy
 13216                                  ;; 10/29/86 E5 char
 13217 00002E86 50                      	PUSH	AX
 13218 00002E87 AC                      	LODSB				; get char
 13219 00002E88 08C0                    	OR	AL,AL
 13220 00002E8A 7413                    	JZ	short FOK
 13221 00002E8C 3C05                    	CMP	AL,05
 13222 00002E8E 740D                    	JZ	short FCHANGE
 13223 00002E90 EB01                    	JMP	short FFF
 13224                                  FCPYNEXT:
 13225 00002E92 AC                      	LODSB				; get char
 13226                                  FFF:
 13227 00002E93 3C5C                    	CMP	AL,'\'			; beginning of directory
 13228 00002E95 7508                    	JNZ	short FOK		; no
 13229 00002E97 AA                      	STOSB				; put into user's buffer
 13230 00002E98 AC                      	LODSB				; 1st char of dir is 05?
 13231 00002E99 3C05                    	CMP	AL,05H
 13232 00002E9B 7502                    	JNZ	short FOK		; no
 13233                                  FCHANGE:
 13234 00002E9D B0E5                    	MOV	AL,0E5H			; make it E5
 13235                                  FOK:
 13236 00002E9F AA                      	STOSB				; put into user's buffer
 13237 00002EA0 08C0                    	OR	AL,AL			; final char
 13238 00002EA2 75EE                    	JNZ	short FCPYNEXT		; no
 13239 00002EA4 58                      	POP	AX
 13240                                  
 13241                                  ;; 10/29/86 E5 char
 13242 00002EA5 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 13243 00002EA7 E8CAF1                  	call	LcritDisk
 13244 00002EAA E950E8                  	jmp	SYS_RET_OK		; no more, bye!
 13245                                  
 13246                                  
 13247                                  ;BREAK <$RmDir -- Remove a directory>
 13248                                  ;---------------------------------------------------------------------------
 13249                                  ;
 13250                                  ; Procedure Name : $RmDir
 13251                                  ;
 13252                                  ; Inputs:
 13253                                  ;	DS:DX Points to asciz name
 13254                                  ; Function:
 13255                                  ;	Delete directory if empty
 13256                                  ; Returns:
 13257                                  ;	STD XENIX Return
 13258                                  ;	AX = error_path_not_found If path bad
 13259                                  ;	AX = error_access_denied If
 13260                                  ;		Directory not empty
 13261                                  ;		Path not directory
 13262                                  ;		Root directory specified
 13263                                  ;		Directory malformed (. and .. not first two entries)
 13264                                  ;		User tries to delete a current directory
 13265                                  ;	AX = error_current_directory
 13266                                  ;
 13267                                  ;----------------------------------------------------------------------------
 13268                                  
 13269                                  _$RMDIR:
 13270 00002EAD 52                      	push	dx			; Save ptr to name
 13271 00002EAE 1E                      	push	ds
 13272 00002EAF 89D6                    	mov	si,dx			; Load ptr into si
 13273 00002EB1 BF[6003]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 13274 00002EB4 57                      	push	di
 13275 00002EB5 E8A43B                  	call	TransPathNoSet		; Translate the name
 13276 00002EB8 5F                      	pop	di			; di = ptr to buf for trans name
 13277 00002EB9 7307                    	jnc	short rmlset		; If transpath succeeded, continue
 13278 00002EBB 1F                      	pop	ds
 13279 00002EBC 5A                      	pop	dx			; Restore the	 name
 13280 00002EBD B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 13281                                  	;jmp	short curdir_errj
 13282                                  rmdir_errj: ; 10/08/2018
 13283 00002EBF E947E8                  	jmp	SYS_RET_ERR
 13284                                  rmlset:
 13285 00002EC2 36803E[1505]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 13286 00002EC8 7512                    	Jnz	short rmerr		;	return (-1);
 13287 00002ECA 16                      	push	ss
 13288 00002ECB 07                      	pop	es
 13289 00002ECC 30C0                    	xor	al,al			; al = 0 , ie drive a:
 13290                                  rmloop: 
 13291 00002ECE E8F73A                  	call	GetCDSFromDrv		; Get curdir for drive in al
 13292 00002ED1 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 13293 00002ED3 E85EF0                  	call	StrCmp			; Are the 2 paths the same?
 13294 00002ED6 7404                    	jz	short rmerr		; Yes, report error.
 13295 00002ED8 FEC0                    	inc	al			; No, inc al to next drive number
 13296 00002EDA EBF2                    	jmp	short rmloop		; Go check next drive.
 13297                                  rmerr:
 13298 00002EDC 1F                      	pop	ds
 13299 00002EDD 5A                      	pop	dx			; Restore the name
 13300 00002EDE B010                    	mov	al,error_current_directory ;  error
 13301                                  	;jmp	short curdir_errj
 13302 00002EE0 EBDD                    	jmp	short rmdir_errj
 13303                                  rmcont:
 13304 00002EE2 1F                      	pop	ds
 13305 00002EE3 5A                      	pop	dx			; Restore the name
 13306 00002EE4 BE[233D]                	MOV	SI,DOS_RMDIR
 13307 00002EE7 EB75                    	JMP	short DoDirCall ; 07/09/2018
 13308                                  
 13309                                  ;BREAK <$ChDir -- Change current directory on a drive>
 13310                                  ;----------------------------------------------------------------------------
 13311                                  ;
 13312                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 13313                                  ; for setting up the CDS for the specified drive appropriately.  There are
 13314                                  ; several cases to consider:
 13315                                  ;
 13316                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 13317                                  ;	it into a WFP.	We verify the existance of this directory and then
 13318                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 13319                                  ;	directory cluster.
 13320                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 13321                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 13322                                  ;	WFP back into the CDS.
 13323                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 13324                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 13325                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 13326                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 13327                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 13328                                  ;	to process the path but to return the logical CDS and the logical
 13329                                  ;	path.  We then copy the logical path into the logical CDS.
 13330                                  ;
 13331                                  ; Inputs:
 13332                                  ;	DS:DX Points to asciz name
 13333                                  ; Returns:
 13334                                  ;	STD XENIX Return
 13335                                  ;	AX = chdir_path_not_found if error
 13336                                  ;
 13337                                  ;----------------------------------------------------------------------------
 13338                                  
 13339                                  _$CHDIR:
 13340 00002EE9 BF[6003]                	MOV	DI,OPENBUF		; spot for translated name
 13341 00002EEC 89D6                    	MOV	SI,DX			; get source
 13342 00002EEE E85F3B                  	call	TransPath		; go munge the path and get real CDS
 13343 00002EF1 7305                    	JNC	short ChDirCrack	; no errors, try path
 13344                                  ChDirErrP:
 13345 00002EF3 B003                    	MOV	AL,error_path_not_found
 13346                                  ChDirErr:
 13347 00002EF5 E911E8                  	jmp	SYS_RET_ERR 	; oops!
 13348                                  
 13349                                  ChDirCrack:
 13350 00002EF8 803E[1505]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 13351 00002EFD 75F4                    	JNZ	short ChDirErrP
 13352                                  ;
 13353                                  ; We cannot do a ChDir (yet) on a raw CDS.  This is treated as a path not
 13354                                  ; found.
 13355                                  ;
 13356 00002EFF C43E[3A05]              	LES	DI,[THISCDS]
 13357 00002F03 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 13358 00002F06 74EB                    	JZ	short ChDirErrP		;	error ();
 13359                                   ;
 13360                                   ; Find out if the directory exists.
 13361                                   ;
 13362 00002F08 E8E30D                  	call	DOS_CHDIR
 13363 00002F0B 72E8                    	Jc	short ChDirErr
 13364                                  ;
 13365                                  ; Get back CDS to see if a join as seen.  Set the currency pointer (only if
 13366                                  ; not network).  If one was seen, all we need to do is copy in the text
 13367                                  ;
 13368 00002F0D C43E[3A05]              	LES	DI,[THISCDS]
 13369 00002F11 26F745430020            	TEST	word [ES:DI+curdir.flags],curdir_splice
 13370 00002F17 7425                    	JZ	short GotCDS
 13371                                  ;
 13372                                  ; The CDS was joined.  Let's go back and grab the logical CDS.
 13373                                  ;
 13374 00002F19 06                      	push	es	
 13375 00002F1A 57                      	push	di
 13376 00002F1B 51                      	push	cx			; save CDS and cluster...
 13377 00002F1C E8ECE6                  	call	Get_User_Stack		; get original text
 13378 00002F1F 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 13379 00002F22 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 13380 00002F25 BE[6003]                	MOV	SI,OPENBUF		; spot for translated name
 13381 00002F28 87F7                    	XCHG	SI,DI
 13382 00002F2A 30C0                    	XOR	AL,AL			; do no splicing
 13383 00002F2C 57                      	push	di
 13384 00002F2D E82C3B                  	call	TransPathNoSet		; Munge path
 13385 00002F30 5E                      	pop	si
 13386                                  ;
 13387                                  ; There should NEVER be an error here.
 13388                                  ;
 13389                                  
 13390                                  ;IF FALSE
 13391                                  ;	JNC SKipErr
 13392                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 13393                                  ;SkipErr:
 13394                                  ;ENDIF
 13395 00002F31 C43E[3A05]              	LES	DI,[THISCDS]		; get new CDS
 13396 00002F35 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 13397                                  					; no valid cluster here...
 13398 00002F3B 59                      	pop	cx
 13399 00002F3C 5F                      	pop	di
 13400 00002F3D 07                      	pop	es
 13401                                  ;
 13402                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 13403                                  ;
 13404                                  GotCDS:
 13405                                  ;
 13406                                  ; wfp_start points to the text.  See if it is long enough
 13407                                  ;
 13408                                  	; MSDOS 3.3
 13409                                  	;push	ss
 13410                                  	;pop	ds
 13411                                  	;mov	si,[WFP_START]
 13412                                  	;push	cx
 13413                                  	;call	DStrLen
 13414                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 13415                                  	;pop	cx
 13416                                  	;ja	short ChDirErrP
 13417                                  
 13418                                  	; MSDOS 6.0
 13419 00002F3E E84800                  	CALL	Check_PathLen		;PTM.		;AN000;
 13420 00002F41 77B0                    	JA	short ChDirErrP
 13421                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13422 00002F43 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 13423 00002F49 7508                    	JNZ	short SkipRecency
 13424                                  	; MSDOS 6.0
 13425                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 13426                                  	;				;PTM. for Join and Subst ;AN000;
 13427                                  	;JZ	short setdirclus	;PTM.		;AN000;
 13428                                  	;MOV	CX,-1			;PTM.		;AN000;
 13429                                  ;setdirclus:
 13430 00002F4B 26894D49                	MOV	[ES:DI+curdir.ID],CX
 13431 00002F4F C43E[3A05]              	LES	DI,[THISCDS]		; get logical CDS
 13432                                  SkipRecency:
 13433 00002F53 E80BF0                  	call	FStrCpy
 13434 00002F56 30C0                    	XOR	AL,AL
 13435                                  mkdir_ok:
 13436 00002F58 E9A2E7                  	jmp	SYS_RET_OK
 13437                                  
 13438                                  
 13439                                  ;BREAK <$MkDir - Make a directory entry>
 13440                                  ;---------------------------------------------------------------------------
 13441                                  ;
 13442                                  ; Procedure Name : $MkDir
 13443                                  ; Inputs:
 13444                                  ;	DS:DX Points to asciz name
 13445                                  ; Function:
 13446                                  ;	Make a new directory
 13447                                  ; Returns:
 13448                                  ;	STD XENIX Return
 13449                                  ;	AX = mkdir_path_not_found if path bad
 13450                                  ;	AX = mkdir_access_denied  If
 13451                                  ;		Directory cannot be created
 13452                                  ;		Node already exists
 13453                                  ;		Device name given
 13454                                  ;		Disk or directory(root) full
 13455                                  ;---------------------------------------------------------------------------
 13456                                  
 13457                                  _$MKDIR:
 13458 00002F5B BE[0C3C]                	MOV	SI,DOS_MKDIR
 13459                                  DoDirCall:
 13460 00002F5E BF[6003]                	MOV	DI,OPENBUF		; spot for translated name
 13461                                  
 13462 00002F61 56                      	push	si
 13463 00002F62 89D6                    	MOV	SI,DX			; get source
 13464 00002F64 E8E93A                  	call	TransPath		; go munge the path
 13465 00002F67 5E                      	pop	si
 13466 00002F68 7305                    	JNC	short MkDirCrack	; no errors, try path
 13467                                  MkErrP:
 13468 00002F6A B003                    	MOV	AL,error_path_not_found	; oops!
 13469                                  MkErr:
 13470 00002F6C E99AE7                  	jmp	SYS_RET_ERR
 13471                                  MkDirCrack:
 13472 00002F6F 36803E[1505]FF          	CMP	byte [SS:CMETA],-1
 13473 00002F75 75F3                    	JNZ	short MkErrP
 13474                                  
 13475                                  	; MSDOS 3.3
 13476                                  	;push	ss
 13477                                  	;pop	ds
 13478                                  	;call	si
 13479                                  	;jb	short MkErr
 13480                                  	;;jmp	short mkdir_ok
 13481                                  	;jmp	SYS_RET_OK
 13482                                  
 13483                                  	; MSDOS 6.0
 13484 00002F77 56                      	PUSH	SI			;PTM.			;AN000;
 13485 00002F78 E80E00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 13486 00002F7B 5E                      	POP	SI			;PTM.			;AN000;
 13487 00002F7C 7604                    	JBE	short pathok		;PTM.			;AN000;
 13488 00002F7E B005                    	MOV	AL,error_access_denied	;PTM. ops!
 13489                                  	;jmp	SYS_RET_ERR		;PTM.
 13490 00002F80 EBEA                    	jmp	short MkErr
 13491                                  pathok:
 13492 00002F82 FFD6                    	CALL	SI			; go get file
 13493 00002F84 72E6                    	JC	short MkErr		; no errors
 13494                                  	;jmp	short mkdir_ok
 13495 00002F86 E974E7                  	jmp	SYS_RET_OK
 13496                                  
 13497                                  ;----------------------------------------------------------------------------
 13498                                  ;
 13499                                  ; Procedure Name : Check_PathLen
 13500                                  ;
 13501                                  ; Inputs:
 13502                                  ;	nothing
 13503                                  ; Function:
 13504                                  ;	check if final path length greater than 67
 13505                                  ; Returns:
 13506                                  ;	Above flag set if > 67
 13507                                  ;
 13508                                  ;---------------------------------------------------------------------------
 13509                                  
 13510                                  Check_PathLen:
 13511                                  	; 09/09/2018
 13512                                  	;;MOV	SI,[WFP_START]
 13513                                  	;MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 13514                                  ;check_PathLen2:
 13515 00002F89 16                      	push	ss
 13516 00002F8A 1F                      	pop	ds
 13517 00002F8B 8B36[4A05]              	mov	SI,[WFP_START] ; MSDOS 3.3
 13518 00002F8F 51                      	push	CX	
 13519 00002F90 E8E5EF                  	CALL	DStrLen
 13520 00002F93 83F943                  	CMP	CX,DIRSTRLEN
 13521 00002F96 59                      	POP	CX
 13522 00002F97 C3                      	retn
 13523                                  
 13524                                  ;============================================================================
 13525                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 13526                                  ;============================================================================
 13527                                  ; 07/08/2018 - Retro DOS v3.0
 13528                                  
 13529                                  ;**	IOCTL system call.
 13530                                  ;
 13531                                  ;	$IOCTL
 13532                                  ;
 13533                                  ;	  Revision history:
 13534                                  ;
 13535                                  ;		Created: ARR 4 April 1983
 13536                                  ;
 13537                                  ;		GenericIOCTL added:		KGS	22 April 1985
 13538                                  ;
 13539                                  ;		A000	version 4.00	Jan. 1988
 13540                                  ;
 13541                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 13542                                  ;
 13543                                  
 13544                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 13545                                  ;---------------------------------------------------------------------------
 13546                                  ;
 13547                                  ;   Assembler usage:
 13548                                  ;	    MOV     BX, Handle
 13549                                  ;	    MOV     DX, Data
 13550                                  ;
 13551                                  ;	(or LDS     DX,BUF
 13552                                  ;	    MOV     CX,COUNT)
 13553                                  ;
 13554                                  ;	    MOV     AH, Ioctl
 13555                                  ;	    MOV     AL, Request
 13556                                  ;	    INT     21h
 13557                                  ;
 13558                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 13559                                  ;	    attribute word in DX, handle in BX:
 13560                                  ;	    DH = high word of device driver attributes
 13561                                  ;	    DL = low byte of sf_flags
 13562                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 13563                                  ;	    in BX.
 13564                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 13565                                  ;	    into DS:DX.  Return number read in AX.
 13566                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 13567                                  ;	    DS:DX.  Return bytes written in AX.
 13568                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 13569                                  ;	    into DS:DX.  Return number read in AX.
 13570                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 13571                                  ;	    DS:DX.  Return bytes written in AX.
 13572                                  ;	 6  Return input status of handle in BX. If a read will go to the
 13573                                  ;	    device, AL = 0FFh, otherwise 0.
 13574                                  ;	 7  Return output status of handle in BX. If a write will go to the
 13575                                  ;	    device, AL = 0FFh, otherwise 0.
 13576                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 13577                                  ;	    removable media, 0 otherwise.
 13578                                  ;	 9  Return the contents of the device attribute word in DX for the
 13579                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 13580                                  ;	    network. 8000h is the bit for local use.
 13581                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 13582                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 13583                                  ;	    the count and CX is the delay.
 13584                                  ;
 13585                                  ;   Error returns:
 13586                                  ;	    AX = error_invalid_handle
 13587                                  ;	       = error_invalid_function
 13588                                  ;	       = error_invalid_data
 13589                                  ;
 13590                                  ;-------------------------------------------------------------------------------
 13591                                  ;
 13592                                  ;   This is the documentation copied from DOS 4.0 it is much better
 13593                                  ;   than the above
 13594                                  ;
 13595                                  ;	There are several basic forms of IOCTL calls:
 13596                                  ;
 13597                                  ;
 13598                                  ;	** Get/Set device information:	**
 13599                                  ;
 13600                                  ;	ENTRY	(AL) = function code
 13601                                  ;		  0 - Get device information
 13602                                  ;		  1 - Set device information
 13603                                  ;		(BX) = file handle
 13604                                  ;		(DX) = info for "Set Device Information"
 13605                                  ;	EXIT	'C' set if error
 13606                                  ;		  (AX) = error code
 13607                                  ;		'C' clear if OK
 13608                                  ;		  (DX) = info for "Get Device Information"
 13609                                  ;	USES	ALL
 13610                                  ;
 13611                                  ;
 13612                                  ;	**  Read/Write Control Data From/To Handle  **
 13613                                  ;
 13614                                  ;	ENTRY	(AL) = function code
 13615                                  ;		  2 - Read device control info
 13616                                  ;		  3 - Write device control info
 13617                                  ;		(BX) = file handle
 13618                                  ;		(CX) = transfer count
 13619                                  ;		(DS:DX) = address for data
 13620                                  ;	EXIT	'C' set if error
 13621                                  ;		  (AX) = error code
 13622                                  ;		'C' clear if OK
 13623                                  ;		  (AX) = count of bytes transfered
 13624                                  ;	USES	ALL
 13625                                  ;
 13626                                  ;
 13627                                  ;	**  Read/Write Control Data From/To Block Device  **
 13628                                  ;
 13629                                  ;	ENTRY	(AL) = function code
 13630                                  ;		  4 - Read device control info
 13631                                  ;		  5 - Write device control info
 13632                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 13633                                  ;		(CX) = transfer count
 13634                                  ;		(DS:DX) = address for data
 13635                                  ;	EXIT	'C' set if error
 13636                                  ;		  (AX) = error code
 13637                                  ;		'C' clear if OK
 13638                                  ;		  (AX) = count of bytes transfered
 13639                                  ;	USES	ALL
 13640                                  ;
 13641                                  ;
 13642                                  ;	**  Get Input/Output Status  **
 13643                                  ;
 13644                                  ;	ENTRY	(AL) = function code
 13645                                  ;		  6 - Get Input status
 13646                                  ;		  7 - Get Output Status
 13647                                  ;		(BX) = file handle
 13648                                  ;	EXIT	'C' set if error
 13649                                  ;		  (AX) = error code
 13650                                  ;		'C' clear if OK
 13651                                  ;		  (AL) = 00 if not ready
 13652                                  ;		  (AL) = FF if ready
 13653                                  ;	USES	ALL
 13654                                  ;
 13655                                  ;
 13656                                  ;	**  Get Drive Information  **
 13657                                  ;
 13658                                  ;	ENTRY	(AL) = function code
 13659                                  ;		  8 - Check for removable media
 13660                                  ;		  9 - Get device attributes
 13661                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 13662                                  ;	EXIT	'C' set if error
 13663                                  ;		  (AX) = error code
 13664                                  ;		'C' clear if OK
 13665                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 13666                                  ;		  (DX) = device attribute word (func. 9)
 13667                                  ;	USES	ALL
 13668                                  ;
 13669                                  ;
 13670                                  ;	**  Get Redirected bit	**
 13671                                  ;
 13672                                  ;	ENTRY	(AL) = function code
 13673                                  ;		  0Ah - Network stuff
 13674                                  ;		(BX) = file handle
 13675                                  ;	EXIT	'C' set if error
 13676                                  ;		  (AX) = error code
 13677                                  ;		'C' clear if OK
 13678                                  ;		  (DX) = SFT flags word, 8000h set if network file
 13679                                  ;	USES	ALL
 13680                                  ;
 13681                                  ;
 13682                                  ;	**  Change sharer retry parameters  **
 13683                                  ;
 13684                                  ;	ENTRY	(AL) = function code
 13685                                  ;		  0Bh - Set retry parameters
 13686                                  ;		(CX) = retry loop count
 13687                                  ;		(DX) = number of retries
 13688                                  ;	EXIT	'C' set if error
 13689                                  ;		  (AX) = error code
 13690                                  ;		'C' clear if OK
 13691                                  ;	USES	ALL
 13692                                  ;
 13693                                  ;
 13694                                  ;   =================================================================
 13695                                  ;
 13696                                  ;	**  New Standard Control  **
 13697                                  ;
 13698                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 13699                                  ;	FORMS ARE OBSOLETE.
 13700                                  ;
 13701                                  ;   =================================================================
 13702                                  ;
 13703                                  ;	ENTRY	(AL) = function code
 13704                                  ;		  0Ch - Control Function subcode
 13705                                  ;		(BX) = File Handle
 13706                                  ;		(CH) = Category Indicator
 13707                                  ;		(CL) = Function within category
 13708                                  ;		(DS:DX) = address for data, if any
 13709                                  ;		(SI) = Passed to device as argument, use depends upon function
 13710                                  ;		(DI) = Passed to device as argument, use depends upon function
 13711                                  ;	EXIT	'C' set if error
 13712                                  ;		  (AX) = error code
 13713                                  ;		'C' clear if OK
 13714                                  ;		  (SI) = Return value, meaning is function dependent
 13715                                  ;		  (DI) = Return value, meaning is function dependent
 13716                                  ;		  (DS:DX) = Return address, use is function dependent
 13717                                  ;	USES	ALL
 13718                                  ;
 13719                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 13720                                  ;     (See inc\ioctl.inc for more info)
 13721                                  ;
 13722                                  ;	ENTRY	(AL) = function code
 13723                                  ;		  0Dh - Control Function subcode
 13724                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 13725                                  ;		(CH) = Category Indicator
 13726                                  ;		(CL) = Function within category
 13727                                  ;		(DS:DX) = address for data, if any
 13728                                  ;		(SI) = Passed to device as argument, use depends upon function
 13729                                  ;		(DI) = Passed to device as argument, use depends upon function
 13730                                  ;
 13731                                  ;	EXIT	'C' set if error
 13732                                  ;		  (AX) = error code
 13733                                  ;		'C' clear if OK
 13734                                  ;		  (DS:DX) = Return address, use is function dependent
 13735                                  ;	USES	ALL
 13736                                  ;
 13737                                  ;---------------------------------------------------------------------------
 13738                                  	
 13739                                  	; MSDOS 6.0
 13740                                  IOCTLJMPTABLE:	;label	word
 13741                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13742 00002F98 [D02F]                  	dw	ioctl_getset_data	; 0
 13743 00002F9A [D02F]                  	dw	ioctl_getset_data   	; 1
 13744 00002F9C [1F30]                  	dw	ioctl_control_string	; 2
 13745 00002F9E [1F30]                  	dw	ioctl_control_string	; 3
 13746 00002FA0 [7731]                  	dw	ioctl_get_dev		; 4
 13747 00002FA2 [7731]                  	dw	ioctl_get_dev		; 5
 13748 00002FA4 [3A30]                  	dw	ioctl_status		; 6
 13749 00002FA6 [3A30]                  	dw	ioctl_status		; 7
 13750 00002FA8 [D030]                  	dw	ioctl_rem_media		; 8
 13751 00002FAA [0F31]                  	dw	Ioctl_Drive_attr	; 9
 13752 00002FAC [6631]                  	dw	IOCTL_Handle_Redir	; A
 13753 00002FAE [5930]                  	dw	Set_Retry_Parameters	; B
 13754 00002FB0 [6830]                  	dw	GENERICIOCTLHANDLE	; C
 13755 00002FB2 [8030]                  	dw	GENERICIOCTL		; D
 13756                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13757 00002FB4 [2A32]                  	dw	ioctl_drive_owner	; E
 13758 00002FB6 [2A32]                  	dw	ioctl_drive_owner	; F
 13759                                  	; MSDOS 6.0
 13760                                  	;dw	query_handle_support	; 10h
 13761                                  	;dw	query_device_support	; 11h
 13762                                  
 13763                                  _$IOCTL:
 13764 00002FB8 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 13765 00002FBA 16                      	push	ss
 13766 00002FBB 1F                      	pop	ds			;hkn; SS is DOSDATA
 13767                                  
 13768                                  	; MSDOS 3.3
 13769 00002FBC 3C0F                    	cmp	al,0Fh 
 13770                                  	; MSDOS 6.0
 13771                                  	;cmp	al,11h			; al must be between 0 & 11h
 13772 00002FBE 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 13773                                  
 13774                                  	; 09/09/2018
 13775                                  	;push	AX			; Need to save AL for generic IOCTL
 13776 00002FC0 89C7                    	mov	di,ax			; di NOT a PARM
 13777 00002FC2 81E7FF00                	and	di,0FFh			; di = al
 13778 00002FC6 D1E7                    	shl	di,1			; di = index into jmp table
 13779                                  	;pop	AX			; Restore AL for generic IOCTL
 13780                                  
 13781 00002FC8 2EFFA5[982F]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 13782                                  
 13783                                  
 13784                                  ioctl_bad_funj2:
 13785 00002FCD E9F800                  	JMP	ioctl_bad_fun  ; 10/08/2018
 13786                                  
 13787                                  ;--------------------------------------------------------------------------
 13788                                  ;
 13789                                  ; IOCTL: AL= 0,1
 13790                                  ;
 13791                                  ; ENTRY : DS = DOSDATA
 13792                                  ;
 13793                                  ;---------------------------------------------------------------------
 13794                                  
 13795                                  ioctl_getset_data:
 13796                                  	; MSDOS 6.0
 13797 00002FD0 E82D38                  	call	SFFromHandle		; ES:DI -> SFT
 13798 00002FD3 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 13799                                  ioctl_bad_handle:
 13800 00002FD5 B006                    	mov	al,error_invalid_handle
 13801                                  ioctl_error:
 13802 00002FD7 E92FE7                  	jmp	SYS_RET_ERR
 13803                                  
 13804                                  ioctl_check_permissions:
 13805 00002FDA 3C00                    	CMP	AL,0
 13806 00002FDC 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 13807 00002FE0 741B                    	JZ	short ioctl_read	; read the byte
 13808                                  
 13809 00002FE2 08F6                    	or	dh, dh
 13810 00002FE4 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 13811 00002FE6 B00D                    	mov	al,error_invalid_data	; no DH <> 0
 13812                                  	;jmp	SYS_RET_ERR
 13813 00002FE8 EBED                    	jmp	short ioctl_error
 13814                                  
 13815                                  ioctl_check_device:
 13816 00002FEA A880                    	test	AL,devid_device 	; can I set this handle?
 13817 00002FEC 74DF                    	jz	short ioctl_bad_funj2
 13818 00002FEE 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 13819                                  					;   device bit!! He can muck with the
 13820                                  					;   others at will.
 13821 00002FF1 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13822 00002FF6 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 13823                                  
 13824                                  ioctl_ok:
 13825 00002FFA E900E7                  	jmp	SYS_RET_OK
 13826                                  
 13827                                  ioctl_read:
 13828 00002FFD C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 13829 00003002 30E4                    	XOR	AH,AH
 13830 00003004 A880                    	test	AL,devid_device 	; Should I set high byte
 13831 00003006 740D                    	JZ	short ioctl_no_high	; no
 13832 00003008 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13833 0000300D 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 13834 00003011 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 13835                                  ioctl_no_high:
 13836 00003015 89C2                    	MOV	DX,AX
 13837 00003017 E8F1E5                  	call	Get_User_Stack
 13838 0000301A 895406                  	MOV	[SI+user_env.user_DX],DX
 13839                                  	;jmp	SYS_RET_OK
 13840 0000301D EBDB                    	jmp	short ioctl_ok
 13841                                  
 13842                                  ;--------------------------------------------------------------------------
 13843                                  ;
 13844                                  ; IOCTL: 2,3
 13845                                  ;
 13846                                  ; ENTRY : DS = DOSDATA
 13847                                  ;	  SI = user's DS
 13848                                  ;
 13849                                  ;--------------------------------------------------------------------------
 13850                                  
 13851                                  ioctl_control_string:
 13852                                  
 13853 0000301F E8DE37                  	call	SFFromHandle		; ES:DI -> SFT
 13854 00003022 72B1                    	JC	short ioctl_bad_handle	; invalid handle
 13855 00003024 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 13856 0000302A 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 13857 0000302C C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13858 00003031 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 13859 00003035 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 13860 00003037 E94201                  	JMP	ioctl_do_string
 13861                                  
 13862                                  ;--------------------------------------------------------------------------
 13863                                  ;
 13864                                  ; IOCTL: AL = 6,7
 13865                                  ;
 13866                                  ; ENTRY: DS = DOSDATA
 13867                                  ;
 13868                                  ;--------------------------------------------------------------------------
 13869                                  
 13870                                  ioctl_status:
 13871                                  
 13872 0000303A B401                    	MOV	AH,1
 13873 0000303C 2C06                    	SUB	AL,6			; 6=0,7=1
 13874 0000303E 7402                    	JZ	short ioctl_get_status
 13875 00003040 B403                    	MOV	AH,3
 13876                                  ioctl_get_status:
 13877 00003042 50                      	PUSH	AX
 13878 00003043 E87810                  	call	GET_IO_SFT
 13879 00003046 58                      	POP	AX
 13880 00003047 7302                    	JNC	short DO_IOFUNC
 13881 00003049 EB8A                    	JMP	short ioctl_bad_handle	; invalid SFT
 13882                                  
 13883                                  DO_IOFUNC:
 13884 0000304B E8031D                  	call	IOFUNC
 13885 0000304E 88C4                    	MOV	AH,AL
 13886 00003050 B0FF                    	MOV	AL,0FFH
 13887 00003052 7502                    	JNZ	short ioctl_status_ret
 13888 00003054 FEC0                    	INC	AL
 13889                                  ioctl_status_ret:
 13890 00003056 E9A4E6                  	jmp	SYS_RET_OK
 13891                                  
 13892                                  ;------------------------------------------------------------------------
 13893                                  ;
 13894                                  ; IOCTL: AL = B
 13895                                  ;
 13896                                  ; ENTRY: DS = DOSDATA
 13897                                  ;
 13898                                  ;-------------------------------------------------------------------------
 13899                                  
 13900                                  Set_Retry_Parameters:
 13901                                  	; 09/09/2018
 13902 00003059 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 13903 0000305D 09D2                    	OR	DX,DX			; zero retries not allowed
 13904 0000305F 7467                    	JZ	short ioctl_bad_fun
 13905 00003061 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 13906                                  doneok:
 13907 00003065 E995E6                  	jmp	SYS_RET_OK		; Done
 13908                                  
 13909                                  ;--------------------------------------------------------------------------
 13910                                  ;
 13911                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 13912                                  ;
 13913                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 13914                                  ;	SI:DX -> Users Device Parameter Table
 13915                                  ;	IOCALL -> IOCTL_Req structure
 13916                                  ;
 13917                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 13918                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 13919                                  ;	call.
 13920                                  ;
 13921                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 13922                                  ;         the call to Check_If_Net because Check_If_Net gets our
 13923                                  ;         return address off the stack if the drive is invalid.
 13924                                  ;
 13925                                  ;----------------------------------------------------------------------------
 13926                                  
 13927                                  query_handle_support:	; Entry point for handles
 13928                                  GENERICIOCTLHANDLE:
 13929                                  
 13930 00003068 E89537                  	call	SFFromHandle		; Get SFT for device.
 13931 0000306B 7260                    	jc	short ioctl_bad_handlej
 13932                                  
 13933 0000306D 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 13934 00003073 7553                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 13935                                  
 13936 00003075 C606[D102]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev
 13937 0000307A 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 13938 0000307E EB0F                    	jmp	short Do_GenIOCTL
 13939                                  
 13940                                  query_device_support:	; Entry point for devices:
 13941                                  GENERICIOCTL:
 13942                                  
 13943 00003080 C606[D102]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk
 13944 00003085 80FD08                  	cmp	ch,IOC_DC		; Only disk devices are allowed to use
 13945 00003088 753E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 13946                                  
 13947 0000308A E88001                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 13948 0000308D 7539                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 13949                                  
 13950                                  Do_GenIOCTL:
 13951                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 ; Can device handle Generic IOCTL funcs
 13952                                  	; 09/09/2018
 13953 0000308F 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 13954 00003094 7432                    	jz	short ioctl_bad_fun
 13955                                  
 13956                                  	; MSDOS 6.0
 13957                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ;Assume real Request
 13958                                  	;cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 13959                                  	;jl	short SetIOCtlBlock
 13960                                  	;
 13961                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 13962                                  	;jz	short ioctl_bad_fun	; No support for query 
 13963                                  	;
 13964                                  	;mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 13965                                  
 13966                                  ;SetIOCtlBlock:
 13967 00003096 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 13968 00003097 57                      	PUSH	DI			; in DS:SI
 13969                                  					; Setup Generic IOCTL Request Block
 13970 00003098 C606[2403]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 13971                                  	; 07/09/2018 (MSDOS 3.3)
 13972                                  	;mov	byte [IOCALL_REQFUNC],19
 13973 0000309D C606[2603]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 13974                                  	;
 13975 000030A2 881E[2503]              	MOV	byte [IOCALL_REQUNIT],BL
 13976 000030A6 882E[3103]              	MOV	byte [IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 13977 000030AA 880E[3203]              	MOV	byte [IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 13978 000030AE 8936[3303]              	MOV	word [IOCALL+IOCTL_REQ.REG_SI],SI
 13979 000030B2 893E[3503]              	MOV	word [IOCALL+IOCTL_REQ.REG_DI],DI
 13980 000030B6 8916[3703]              	MOV	word [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 13981 000030BA 8936[3903]              	MOV	word [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 13982                                  
 13983                                  ;hkn; IOCALL is in DOSDATA
 13984 000030BE BB[2403]                	MOV	BX,IOCALL
 13985                                  
 13986 000030C1 16                      	PUSH	SS
 13987 000030C2 07                      	POP	ES
 13988                                  					; DS:SI -> Device header.
 13989 000030C3 5E                      	POP	SI
 13990 000030C4 1F                      	POP	DS
 13991                                  	; 10/08/2018
 13992 000030C5 E9EE00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 13993                                  
 13994                                  ioctl_bad_fun:
 13995 000030C8 B001                    	mov	al, error_invalid_function
 13996 000030CA E93CE6                  	jmp	SYS_RET_ERR	
 13997                                  
 13998                                  ioctl_bad_handlej:
 13999 000030CD E905FF                  	jmp	ioctl_bad_handle
 14000                                  
 14001                                  ;---------------------------------------------------------------------------
 14002                                  ;
 14003                                  ; IOCTL AL = 8
 14004                                  ;
 14005                                  ; ENTRY:  DS = DOSDATA
 14006                                  ;
 14007                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 14008                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14009                                  ;         return address off the stack if the drive is invalid.
 14010                                  ;
 14011                                  ;-------------------------------------------------------------------------
 14012                                  
 14013                                  ioctl_rem_media:
 14014                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14015 000030D0 E83A01                  	CALL	Check_If_Net
 14016 000030D3 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 14017                                  					;   certainly don't know how to do this
 14018                                  					;   call.
 14019 000030D5 26F745040008            	TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 14020 000030DB 74EB                    	JZ	short ioctl_bad_fun		; NO
 14021                                  
 14022                                  ;hkn; SS override for IOCALL
 14023 000030DD 36C606[2603]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD
 14024 000030E3 B00D                    	MOV	AL,REMHL
 14025 000030E5 88DC                    	MOV	AH,BL			; Unit number
 14026 000030E7 36A3[2403]              	MOV	[SS:IOCALL_REQLEN],AX
 14027 000030EB 31C0                    	XOR	AX,AX
 14028 000030ED 36A3[2703]              	MOV	[SS:IOCALL_REQSTAT],AX
 14029 000030F1 06                      	PUSH	ES
 14030 000030F2 1F                      	POP	DS
 14031 000030F3 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14032 000030F5 16                      	PUSH	SS
 14033 000030F6 07                      	POP	ES
 14034                                  
 14035                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 14036 000030F7 BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14037 000030FA 1E                      	push	ds
 14038 000030FB 56                      	push	si
 14039 000030FC E8FF1D                  	call	DEVIOCALL2
 14040 000030FF 5E                      	pop	si
 14041 00003100 1F                      	pop	ds
 14042                                  
 14043                                  ;hkn; SS override
 14044 00003101 36A1[2703]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 14045 00003105 250002                  	AND	AX,STBUI		; Mask to busy bit
 14046 00003108 B109                    	MOV	CL,9
 14047 0000310A D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 14048 0000310C E9EEE5                  	jmp	SYS_RET_OK
 14049                                  
 14050                                  ;-------------------------------------------------------------------------
 14051                                  ;
 14052                                  ; IOCTL: AL = 9
 14053                                  ;
 14054                                  ; ENTRY: DS = DOSDATA
 14055                                  ;
 14056                                  ;-------------------------------------------------------------------------
 14057                                  
 14058                                  Ioctl_Drive_attr:
 14059                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14060 0000310F 88D8                    	mov	al, bl
 14061 00003111 E86138                  	call	GETTHISDRV
 14062 00003114 724B                    	jc	short ioctl_drv_err
 14063 00003116 E8C500                  	call	Get_Driver_BL
 14064                                  	; MSDOS 6.0
 14065 00003119 7246                    	JC	short ioctl_drv_err	; drive not valid
 14066                                  
 14067 0000311B 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 14068                                  					; get device attribute word
 14069 0000311F 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 14070                                  
 14071                                  ;hkn; SS override
 14072 00003121 36C43E[3A05]            	LES	DI,[SS:THISCDS]
 14073 00003126 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14074 0000312C 7403                    	JZ	short IOCTLShare
 14075                                  
 14076                                  	;or	dx,1000h ; msdos 3.3
 14077                                  
 14078                                  ;	Net devices don't return a device attribute word.
 14079                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 14080                                  
 14081 0000312E BA0010                  	MOV	DX,1000h ;  MSDOS 6.0
 14082                                  IOCTLShare:
 14083 00003131 16                      	push	ss
 14084 00003132 1F                      	pop	ds
 14085 00003133 BE[6003]                	MOV	SI,OPENBUF
 14086 00003136 80C341                  	ADD	BL,"A"
 14087 00003139 881C                    	MOV	[SI],BL
 14088 0000313B C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 14089 00003140 B80003                  	MOV	AX,0300h
 14090 00003143 F8                      	CLC
 14091                                  	;INT	int_IBM
 14092 00003144 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 14093                                  			; DS:SI -> ASCIZ disk device name (may be full path or only drive
 14094                                  			; specifier--must include the colon)
 14095                                  			; Return: CF clear if absolute disk access allowed
 14096 00003146 7304                    	JNC	short IOCTLLocal	; Not shared
 14097 00003148 81CA0002                	OR	DX,0200H		; Shared, bit 9
 14098                                  IOCTLLocal:
 14099 0000314C 26F745430010            	TEST	word [ES:DI+curdir.flags],curdir_local
 14100 00003152 7404                    	JZ	short ioctl_set_DX
 14101 00003154 81CA0080                	OR	DX,8000h
 14102                                  ioctl_set_DX:
 14103 00003158 E8B0E4                  	call	Get_User_Stack
 14104 0000315B 895406                  	MOV	[SI+user_env.user_DX],DX
 14105 0000315E E99CE5                  	jmp	SYS_RET_OK
 14106                                  
 14107                                  ioctl_drv_err:
 14108 00003161 B00F                    	mov	al, error_invalid_drive
 14109 00003163 E9A3E5                  	jmp	SYS_RET_ERR
 14110                                  
 14111                                  ;--------------------------------------------------------------------------
 14112                                  ; IOCTL: AL = A
 14113                                  ;
 14114                                  ; ENTRY: DS = DOSDATA
 14115                                  ;
 14116                                  ;--------------------------------------------------------------------------
 14117                                  
 14118                                  IOCTL_Handle_Redir:
 14119 00003166 E89736                  	call	SFFromHandle		; ES:DI -> SFT
 14120 00003169 7303                    	JNC	short ioctl_got_sft	; have valid handle
 14121 0000316B E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 14122                                  
 14123                                  ioctl_got_sft:
 14124 0000316E 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 14125 00003172 EBE4                    	JMP	short ioctl_set_DX	; pass dx to user and return
 14126                                  
 14127                                  ioctl_bad_funj:
 14128 00003174 E951FF                  	JMP	ioctl_bad_fun
 14129                                  
 14130                                  ;--------------------------------------------------------------------------
 14131                                  ;
 14132                                  ; IOCTL: AL= 4,5
 14133                                  ;
 14134                                  ; ENTRY: DS = DOSDATA
 14135                                  ;	 SI = user's DS
 14136                                  ;
 14137                                  ;
 14138                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 14139                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14140                                  ;         return address off the stack if the drive is invalid.
 14141                                  ;
 14142                                  ;-------------------------------------------------------------------------
 14143                                  
 14144                                  ioctl_get_dev:
 14145 00003177 E89300                  	CALL	Check_If_Net
 14146 0000317A 75F8                    	JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 14147                                  					;   certainly don't know how to do this
 14148                                  					;   call.
 14149                                  ioctl_do_string:
 14150 0000317C 26F745040040            	TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 14151 00003182 74F0                    	JZ	short ioctl_bad_funj		; NO
 14152                                  					; assume IOCTL read
 14153 00003184 C606[2603]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL
 14154                                  
 14155 00003189 A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 14156 0000318B 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 14157                                  
 14158                                  					; it is an IOCTL write
 14159 0000318D C606[2603]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL
 14160                                  
 14161                                  ioctl_control_call:
 14162 00003192 B016                    	MOV	AL,DRDWRHL
 14163                                  ioctl_setup_pkt:
 14164 00003194 88DC                    	MOV	AH,BL			; Unit number
 14165 00003196 A3[2403]                	MOV	[IOCALL_REQLEN],AX
 14166 00003199 31C0                    	XOR	AX,AX
 14167 0000319B A3[2703]                	MOV	[IOCALL_REQSTAT],AX
 14168 0000319E A2[3103]                	MOV	[IOMED],AL
 14169 000031A1 890E[3603]              	MOV	[IOSCNT],CX
 14170 000031A5 8916[3203]              	MOV	[IOXAD],DX
 14171 000031A9 8936[3403]              	MOV	[IOXAD+2],SI
 14172 000031AD 06                      	PUSH	ES
 14173 000031AE 1F                      	POP	DS
 14174 000031AF 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14175 000031B1 16                      	PUSH	SS
 14176 000031B2 07                      	POP	ES
 14177                                  
 14178 000031B3 BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14179                                  ioctl_do_IO:
 14180 000031B6 E8451D                  	call	DEVIOCALL2
 14181                                  
 14182                                  ;hkn; SS override for IOCALL
 14183 000031B9 36F706[2703]0080        	TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 14184 000031C0 7507                    	JNZ	short ioctl_string_err
 14185                                  
 14186                                  ;hkn; SS override
 14187 000031C2 36A1[3603]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 14188 000031C6 E934E5                  	jmp	SYS_RET_OK
 14189                                  
 14190                                  ioctl_string_err:
 14191 000031C9 368B3E[2703]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 14192                                  device_err:
 14193 000031CE 81E7FF00                	AND	DI,STECODE		; mask out irrelevant bits
 14194 000031D2 89F8                    	MOV	AX,DI
 14195 000031D4 E84128                  	call	SET_I24_EXTENDED_ERROR
 14196                                  
 14197                                  ;hkn; use SS override
 14198                                  ;hkn;	mov	ax,[CS:EXTERR]
 14199 000031D7 36A1[D202]              	mov	ax,[SS:EXTERR]
 14200 000031DB E92BE5                  	jmp	SYS_RET_ERR
 14201                                  
 14202                                  ;--------------------------------------------------------------------------
 14203                                  ; Proc name : Get_Driver_BL
 14204                                  ;
 14205                                  ;	DS is DOSDATA
 14206                                  ;	BL is drive number (0=default)
 14207                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 14208                                  ;	No regs modified
 14209                                  ;
 14210                                  ;---------------------------------------------------------------------------
 14211                                  
 14212                                  Get_Driver_BL:
 14213 000031DE 50                      	PUSH	AX
 14214 000031DF 88D8                    	MOV	AL,BL			; Drive
 14215 000031E1 E89137                  	call	GETTHISDRV
 14216 000031E4 7225                    	jc	short ioctl_bad_drv
 14217 000031E6 30DB                    	XOR	BL,BL			; Unit zero on Net device
 14218 000031E8 C606[D102]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net
 14219 000031ED C43E[3A05]              	LES	DI,[THISCDS]
 14220 000031F1 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14221 000031F7 26C47D45                	LES	DI,[ES:DI+curdir.devptr]; ES:DI -> Dpb or net dev
 14222 000031FB 750D                    	JNZ	short got_dev_ptr	; Is net
 14223 000031FD C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 14224 00003202 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 14225 00003206 26C47D12                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 14226                                  got_dev_ptr:
 14227 0000320A F8                      	CLC
 14228                                  ioctl_bad_drv:
 14229 0000320B 58                      	POP	AX
 14230 0000320C C3                      	retn
 14231                                  
 14232                                  ;-------------------------------------------------------------------------
 14233                                  ; Proc Name : Check_If_Net:
 14234                                  ;
 14235                                  ;
 14236                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 14237                                  ; If no device is found, the return address is popped off the stack, and a
 14238                                  ; jump is made to ioctl_drv_err.
 14239                                  ;
 14240                                  ; On Entry:
 14241                                  ; Registers same as those for Get_Driver_BL
 14242                                  ;
 14243                                  ; On Exit:
 14244                                  ; ZERO flag	- set if not a net device
 14245                                  ;		- reset if net device
 14246                                  ; ES:DI -> the device
 14247                                  ;
 14248                                  ;
 14249                                  ; BUGBUG: This function assumes the following stack setup on entry
 14250                                  ;
 14251                                  ;	  SP+2 -> Error return address
 14252                                  ;	  SP   -> Normal return address
 14253                                  ;
 14254                                  ;-------------------------------------------------------------------------
 14255                                  
 14256                                  Check_If_Net:
 14257                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14258 0000320D E8CEFF                  	CALL	Get_Driver_BL
 14259 00003210 720F                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 14260 00003212 06                      	PUSH	ES
 14261 00003213 57                      	PUSH	DI
 14262 00003214 C43E[3A05]              	LES	DI,[THISCDS]
 14263 00003218 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14264 0000321E 5F                      	POP	DI
 14265 0000321F 07                      	POP	ES
 14266 00003220 C3                      	retn
 14267                                  
 14268                                  ioctl_drv_err_pop:
 14269 00003221 58                      	pop	ax			; pop off return address
 14270 00003222 E93CFF                  	jmp	ioctl_drv_err
 14271                                  
 14272                                  ioctl_bad_funj3:
 14273 00003225 E9A0FE                  	jmp	ioctl_bad_fun
 14274                                  
 14275                                  ioctl_string_errj:
 14276 00003228 EB9F                    	jmp	ioctl_string_err
 14277                                  
 14278                                  ;--------------------------------------------------------------------------
 14279                                  ;
 14280                                  ; IOCTL: AL = E, F
 14281                                  ;
 14282                                  ; ENTRY: DS = DOSDATA
 14283                                  ;
 14284                                  ;
 14285                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 14286                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14287                                  ;         return address off the stack if the drive is invalid.
 14288                                  ;
 14289                                  ;--------------------------------------------------------------------------
 14290                                  
 14291                                  ioctl_drive_owner:
 14292                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14293 0000322A E8E0FF                  	Call	Check_If_Net
 14294 0000322D 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 14295                                  					;   certainly don't know how to do this
 14296                                  					;   call.
 14297                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 14298                                  	; 09/09/2018
 14299 0000322F 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 14300 00003234 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 14301 00003236 C606[2603]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 14302 0000323B 3C0E                    	cmp	al,0Eh			; Get Owner ?
 14303 0000323D 7405                    	jz	short GetOwner
 14304                                  SetOwner:
 14305 0000323F C606[2603]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN
 14306                                  GetOwner:
 14307 00003244 B00D                    	MOV	AL,OWNHL
 14308 00003246 88DC                    	MOV	AH,BL			; Unit number
 14309 00003248 A3[2403]                	MOV	[IOCALL_REQLEN],AX
 14310 0000324B 31C0                    	XOR	AX,AX
 14311 0000324D A3[2703]                	MOV	[IOCALL_REQSTAT],AX
 14312 00003250 06                      	PUSH	ES
 14313 00003251 1F                      	POP	DS
 14314 00003252 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14315 00003254 16                      	PUSH	SS
 14316 00003255 07                      	POP	ES
 14317 00003256 BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14318 00003259 1E                      	push	ds
 14319 0000325A 56                      	push	si
 14320 0000325B E8A01C                  	call	DEVIOCALL2
 14321 0000325E 5E                      	pop	si
 14322 0000325F 1F                      	pop	ds
 14323                                  ;hkn; SS override
 14324 00003260 36F706[2703]0080        	TEST	word [SS:IOCALL_REQSTAT],STERR
 14325 00003267 75BF                    	jnz	short ioctl_string_errj
 14326 00003269 36A0[2503]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 14327                                  					; owner returned is 1-based.
 14328 0000326D E98DE4                  	jmp	SYS_RET_OK
 14329                                  
 14330                                  
 14331                                  ;============================================================================
 14332                                  ; DELETE.ASM, MSDOS 6.0, 1991
 14333                                  ;============================================================================
 14334                                  ; 07/08/2018 - Retro DOS v3.0
 14335                                  
 14336                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 14337                                  ;	NAME	DOS_DELETE
 14338                                  
 14339                                  ;
 14340                                  ;	Microsoft Confidential
 14341                                  ;	Copyright (C) Microsoft Corporation 1991
 14342                                  ;	All Rights Reserved.
 14343                                  ;
 14344                                  
 14345                                  ;**	DELETE.ASM - Low level routine for deleting files
 14346                                  ;
 14347                                  ;		DOS_DELETE
 14348                                  ;		REN_DEL_Check
 14349                                  ;		FastOpen_Delete	       ; DOS 3.3
 14350                                  ;		FastOpen_Update	       ; DOS 3.3
 14351                                  
 14352                                  
 14353                                  ;   Revision history:
 14354                                  ;
 14355                                  ;   A000  version 4.00	Jan. 1988
 14356                                  ;   A001  Fastopen Rename fix	April 1989
 14357                                  
 14358                                  
 14359                                  ;Installed = TRUE
 14360                                  
 14361                                  ;	i_need	NoSetDir,BYTE
 14362                                  ;	i_need	Creating,BYTE
 14363                                  ;	i_need	DELALL,BYTE
 14364                                  ;	i_need	THISDPB,DWORD
 14365                                  ;	i_need	THISSFT,DWORD
 14366                                  ;	i_need	THISCDS,DWORD
 14367                                  ;	i_need	CURBUF,DWORD
 14368                                  ;	i_need	ATTRIB,BYTE
 14369                                  ;	i_need	SATTRIB,BYTE
 14370                                  ;	i_need	WFP_START,WORD
 14371                                  ;	i_need	REN_WFP,WORD			 ;BN001
 14372                                  ;	i_need	NAME1,BYTE			 ;BN001
 14373                                  ;	i_need	FoundDel,BYTE
 14374                                  ;	i_need	AUXSTACK,BYTE
 14375                                  ;	i_need	VOLCHNG_FLAG,BYTE
 14376                                  ;	i_need	JShare,DWORD
 14377                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 14378                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 14379                                  ;
 14380                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 14381                                  ;
 14382                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 14383                                  ;	i_need	DMAADD,DWORD
 14384                                  ;	i_need	RENAMEDMA,BYTE
 14385                                  
 14386                                  ;---------------------------------------------------------------------------
 14387                                  ;
 14388                                  ; Procedure Name : DOS_DELETE
 14389                                  ;
 14390                                  ; Inputs:
 14391                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 14392                                  ;		terminated)
 14393                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 14394                                  ;		( = -1 if current dir not involved, else
 14395                                  ;		 Points to first char after last "/" of current dir part)
 14396                                  ;	[THISCDS] Points to CDS being used
 14397                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 14398                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 14399                                  ; Function:
 14400                                  ;	Delete the specified file(s)
 14401                                  ; Outputs:
 14402                                  ;	CARRY CLEAR
 14403                                  ;		OK
 14404                                  ;	CARRY SET
 14405                                  ;	    AX is error code
 14406                                  ;		error_file_not_found
 14407                                  ;			Last element of path not found
 14408                                  ;		error_path_not_found
 14409                                  ;			Bad path (not in curr dir part if present)
 14410                                  ;		error_bad_curr_dir
 14411                                  ;			Bad path in current directory part of path
 14412                                  ;		error_access_denied
 14413                                  ;			Attempt to delete device or directory
 14414                                  ;		***error_sharing_violation***
 14415                                  ;			Deny both access required, generates an INT 24.
 14416                                  ;			This error is NOT returned. The INT 24H is generated,
 14417                                  ;			  and the file is ignored (not deleted). Delete will
 14418                                  ;			  simply continue on looking for more files.
 14419                                  ;			  Carry will NOT be set in this case.
 14420                                  ; DS preserved, others destroyed
 14421                                  ;
 14422                                  ;---------------------------------------------------------------------------
 14423                                  
 14424                                  FILEFOUND   equ 01h
 14425                                  FILEDELETED equ 10h
 14426                                  
 14427                                  DOS_DELETE:
 14428                                  
 14429                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 14430                                  ;hkn; appropriately at this point.
 14431                                  
 14432 00003270 E85BED                  	call	TestNet
 14433 00003273 7306                    	JNC	short LOCAL_DELETE
 14434                                  
 14435                                  ;IF NOT Installed
 14436                                  ;	transfer NET_DELETE
 14437                                  ;ELSE
 14438                                  	;MOV	AX,(MultNET SHL 8) | 19
 14439                                  	;INT	2FH
 14440                                  	;return
 14441                                  
 14442 00003275 B81311                  	mov	ax,1113h
 14443 00003278 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 14444                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 14445                                  			;		fully-qualified filename in DOS CS
 14446                                  			; SDA CDS pointer -> current directory structure for drive with file
 14447                                  			; Return: CF set on error
 14448 0000327A C3                      	retn
 14449                                  
 14450                                  ;ENDIF
 14451                                  
 14452                                  LOCAL_DELETE:
 14453 0000327B C606[0A05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 14454 00003280 E8E9ED                  	call	EcritDisk
 14455 00003283 C706[1805]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 14456 00003289 8B36[4A05]              	MOV	SI,[WFP_START]
 14457                                  SKPNUL:
 14458 0000328D AC                      	LODSB
 14459 0000328E 08C0                    	OR	AL,AL
 14460 00003290 75FB                    	JNZ	short SKPNUL		; go to end
 14461 00003292 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 14462 00003295 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 14463 00003299 7506                    	JNZ	short TEST_QUEST
 14464 0000329B 807C022A                	CMP	BYTE [SI+2],"*"
 14465 0000329F 741F                    	JZ	short CHECK_ATTS
 14466                                  TEST_QUEST:
 14467 000032A1 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 14468 000032A4 87FE                    	XCHG	DI,SI
 14469                                  
 14470 000032A6 16                      	push	ss
 14471                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 14472 000032A7 07                      	pop	es ; 17/05/2019 (BugFix)
 14473                                  
 14474 000032A8 B83F3F                  	MOV	AX,"??"
 14475 000032AB B90400                  	MOV	CX,4		; four sets of "??"
 14476 000032AE F3AF                    	REPE	SCASW
 14477 000032B0 751C                    	JNZ	short NOT_ALL
 14478 000032B2 87FE                    	XCHG	DI,SI
 14479 000032B4 AD                      	LODSW
 14480 000032B5 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 14481 000032B8 7514                    	JNZ	short NOT_ALL
 14482 000032BA AD                      	LODSW
 14483 000032BB 3D3F3F                  	CMP	AX,"??"
 14484 000032BE 750E                    	JNZ	short NOT_ALL
 14485                                  CHECK_ATTS:
 14486 000032C0 A0[0805]                	MOV	AL,[SATTRIB]
 14487 000032C3 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 14488                                  					; Look only at hidden bits
 14489 000032C5 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 14490                                  					; All must be set
 14491 000032C7 7505                    	JNZ	short NOT_ALL
 14492                                  
 14493                                  ; NOTE WARNING DANGER-----
 14494                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 14495                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 14496                                  
 14497 000032C9 C606[1905]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 14498                                  NOT_ALL:
 14499 000032CE C606[F802]01            	MOV	byte [NoSetDir],1
 14500 000032D3 E86915                  	call	GetPathNoSet
 14501 000032D6 7313                    	JNC	short Del_found
 14502 000032D8 750C                    	JNZ	short _bad_path
 14503 000032DA 08C9                    	OR	CL,CL
 14504 000032DC 7408                    	JZ	short _bad_path
 14505                                  No_file:
 14506 000032DE B80200                  	MOV	AX,error_file_not_found
 14507                                  ErrorReturn:
 14508 000032E1 F9                      	STC
 14509 000032E2 E88FED                  	call	LcritDisk
 14510 000032E5 C3                      	retn
 14511                                  
 14512                                  _bad_path:
 14513 000032E6 B80300                  	MOV	AX,error_path_not_found
 14514 000032E9 EBF6                    	JMP	short ErrorReturn
 14515                                  
 14516                                  Del_found:
 14517 000032EB 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 14518 000032ED 803E[1905]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 14519 000032F2 7405                    	JZ	short NOT_DIR
 14520                                  Del_access_err:
 14521 000032F4 B80500                  	MOV	AX,error_access_denied
 14522 000032F7 EBE8                    	JMP	short ErrorReturn
 14523                                  
 14524                                  NOT_DIR:
 14525 000032F9 08E4                    	OR	AH,AH			; Check if device name
 14526 000032FB 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 14527                                  
 14528                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 14529                                  
 14530                                  DELFILE:
 14531 000032FD 800E[0A05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 14532                                  
 14533                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 14534                                  ; DOS issue a build BPB call the next time this drive is accessed.
 14535                                  
 14536 00003302 1E                      	PUSH	DS
 14537 00003303 8A26[1905]              	MOV	AH,[DELALL]
 14538 00003307 C53E[7405]              	LDS	DI,[CURBUF]
 14539                                  	
 14540                                  ;hkn; SS override
 14541 0000330B 36F606[0605]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 14542 00003311 7509                    	JNZ	short DoDelete		; yes
 14543                                  
 14544 00003313 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 14545 00003317 7403                    	JZ	short DoDelete		; not read only
 14546                                  
 14547 00003319 1F                      	POP	DS
 14548 0000331A EB29                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 14549                                  
 14550                                  DoDelete:
 14551 0000331C E87700                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 14552 0000331F 7303                    	JNC	short DEL_SHARE_OK
 14553 00003321 1F                      	POP	DS
 14554 00003322 EB21                    	JMP	SHORT DELNXT		; Skip it
 14555                                  
 14556                                  DEL_SHARE_OK:
 14557                                  	; MSDOS 6.0
 14558                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 14559                                  	;				;LB. if already dirty		  ;AN000;
 14560                                  	;JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 14561                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 14562 00003324 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 14563                                  ;yesdirty:
 14564                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 14565 00003328 8827                    	mov	[bx],ah ; 05/07/2019	
 14566 0000332A 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 14567 0000332C 1F                      	POP	DS
 14568 0000332D 800E[0A05]10            	OR	byte [FOUNDDEL],FILEDELETED ; Deleted file
 14569                                  
 14570 00003332 83FB02                  	CMP	BX,2
 14571 00003335 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 14572 00003337 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 14573 0000333B 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 14574                                  
 14575 0000333D E8AD21                  	call	RELEASE 		; Free file data
 14576 00003340 724E                    	JC	short No_fileJ
 14577                                  
 14578                                  ; DOS 3.3  FastOpen
 14579                                  
 14580 00003342 E8BA00                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 14581                                  
 14582                                  ; DOS 3.3  FastOpen
 14583                                  
 14584                                  DELNXT:
 14585 00003345 C42E[2405]              	LES	BP,[THISDPB]		; Possible to get here without this set
 14586 00003349 E86714                  	call	GETENTRY		; Registers need to be reset
 14587 0000334C 7242                    	JC	short No_fileJ
 14588 0000334E E8A913                  	call	NEXTENT
 14589 00003351 73AA                    	JNC	short DELFILE
 14590 00003353 C42E[2405]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 14591                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 14592 00003357 268A4600                	MOV	AL,[ES:BP]
 14593 0000335B E8D32B                  	call	FLUSHBUF
 14594 0000335E 7230                    	JC	short No_fileJ
 14595                                  ;
 14596                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 14597                                  ;
 14598                                  ;   not found not deleted		file not found
 14599                                  ;   not found	  deleted		*** impossible ***
 14600                                  ;	found not deleted		access denied (read-only)
 14601                                  ;	found	  deleted		no error
 14602                                  ;
 14603 00003360 F606[0A05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 14604 00003365 7422                    	JZ	short DelError		; no, figure out what's wrong.
 14605                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 14606                                  ; and to force the DOS to issue a media check.
 14607 00003367 F606[0605]08            	TEST	byte [ATTRIB],attr_volume_id
 14608 0000336C 7417                    	jz	short No_Set_Flag
 14609 0000336E 50                      	PUSH	AX
 14610 0000336F 06                      	PUSH	ES
 14611 00003370 57                      	PUSH	DI
 14612 00003371 C43E[3A05]              	LES	DI,[THISCDS]
 14613 00003375 268A25                  	MOV	AH,[ES:DI]		; Get drive
 14614 00003378 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 14615 0000337B 8826[070A]              	mov	[VOLCHNG_FLAG],AH
 14616                                  	
 14617                                  	; MSDOS 6.0
 14618                                  	;XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 14619                                  	;call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 14620                                  	 
 14621 0000337F E83D28                  	call	FATREAD_CDS		; force media check
 14622 00003382 5F                      	POP	DI
 14623 00003383 07                      	POP	ES
 14624 00003384 58                      	POP	AX
 14625                                  No_Set_Flag:
 14626 00003385 E8ECEC                  	call	LcritDisk		; carry is clear
 14627 00003388 C3                      	retn
 14628                                  DelError:
 14629 00003389 F606[0A05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 14630 0000338E 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 14631                                  No_fileJ:
 14632 00003390 E94BFF                  	JMP	No_file ; 10/08/2018 		; Nope
 14633                                  Del_access_errJ:
 14634 00003393 E95EFF                  	JMP	Del_access_err ; 10/08/2018
 14635                                  
 14636                                  ; 08/08/2018 - Retro DOS v3.0
 14637                                  
 14638                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 14639                                  ;---------------------------------------------------------------------------
 14640                                  ; Procedure Name : REN_DEL_Check
 14641                                  ;
 14642                                  ; Inputs:
 14643                                  ;	[THISDPB] set
 14644                                  ;	[CURBUF+2]:BX points to entry
 14645                                  ;	[CURBUF+2]:SI points to firclus field of entry
 14646                                  ;	[WFP_Start] points to name
 14647                                  ; Function:
 14648                                  ;	Check for Exclusive access on given file.
 14649                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 14650                                  ; Outputs:
 14651                                  ;	ES:BP = [THISDPB]
 14652                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 14653                                  ;		last element will be loaded from the directory entry.  This is
 14654                                  ;		so the name given to the sharer doesn't have any meta chars in
 14655                                  ;		it.
 14656                                  ;	Carry set if sharing violation, INT 24H generated
 14657                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 14658                                  ;		This is because input AX is preserved.
 14659                                  ;		Caller must set the error if needed.
 14660                                  ;	Carry clear
 14661                                  ;		OK
 14662                                  ; AX,DS,BX,SI,DI preserved
 14663                                  ;---------------------------------------------------------------------------
 14664                                  
 14665                                  REN_DEL_Check:
 14666                                  
 14667 00003396 1E                      	PUSH	DS
 14668 00003397 57                      	PUSH	DI
 14669 00003398 50                      	PUSH	AX
 14670 00003399 53                      	PUSH	BX
 14671 0000339A 56                      	PUSH	SI		; Save CURBUF pointers
 14672                                  	
 14673 0000339B 16                      	push	ss
 14674 0000339C 07                      	pop	es
 14675                                  
 14676                                  ;hkn; context ES will assume ES to DOSDATA
 14677                                  ;hkn; ASSUME	ES:DOSGROUP
 14678                                  
 14679                                  ;hkn; SS override
 14680 0000339D 368B3E[4A05]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 14681 000033A2 89DE                    	MOV	SI,BX
 14682                                  
 14683                                  ;hkn; SS override
 14684 000033A4 368E1E[7605]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 14685 000033A9 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 14686 000033AB 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 14687 000033AE E8B9EB                  	call	StrLen		; CX is length of ES:DI including NUL
 14688 000033B1 49                      	DEC	CX		; Don't include nul in count
 14689 000033B2 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 14690 000033B4 E88138                  	call	SkipBack	; Back up one element
 14691 000033B7 47                      	INC	DI		; Point to start of last element
 14692                                  
 14693                                  ;hkn; SS override
 14694                                  	; MSDOS 6.0
 14695                                  	;MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 14696                                  	;
 14697 000033B8 E860FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 14698 000033BB 5E                      	POP	SI		; Get back entry pointers
 14699 000033BC 5B                      	POP	BX
 14700 000033BD 53                      	PUSH	BX
 14701 000033BE 56                      	PUSH	SI		; Back on stack
 14702                                  	
 14703 000033BF 16                      	push	ss
 14704 000033C0 1F                      	pop	ds
 14705                                  
 14706                                  ;hkn; context DS will assume ES to DOSDATA
 14707                                  ;hkn; ASSUME	DS:DOSGROUP
 14708                                  
 14709                                  ;
 14710                                  ; Close the file if possible by us.
 14711                                  ;
 14712                                  ;if installed
 14713 000033C1 FF1E[9000]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 14714                                  ;else
 14715                                  ;	Call	ShCloseFile
 14716                                  ;endif
 14717 000033C5 8C1E[3805]              	MOV	[THISSFT+2],DS
 14718                                  
 14719                                  ;hkn; AUXSTACK is in DOSDATA
 14720 000033C9 C706[3605][D106]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size
 14721                                  				; Scratch space
 14722 000033CF 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 14723 000033D1 E8F01D                  	call	DOOPEN		; Fill in SFT for share check
 14724 000033D4 C43E[3605]              	LES	DI,[THISSFT]
 14725 000033D8 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH
 14726                                  				; requires exclusive access
 14727                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 14728 000033DE 26C7050100              	mov	word [ES:DI],1
 14729 000033E3 E8783F                  	call	ShareEnter
 14730 000033E6 720D                    	jc	short CheckDone
 14731 000033E8 C43E[3605]              	LES	DI,[THISSFT]
 14732                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 14733 000033EC 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 14734                                  	
 14735 000033F1 E8643F                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 14736 000033F4 F8                      	CLC
 14737                                  CheckDone:
 14738 000033F5 C42E[2405]              	LES	BP,[THISDPB]
 14739 000033F9 5E                      	POP	SI
 14740 000033FA 5B                      	POP	BX
 14741 000033FB 58                      	POP	AX
 14742 000033FC 5F                      	POP	DI
 14743 000033FD 1F                      	POP	DS
 14744 000033FE C3                      	retn
 14745                                  
 14746                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 14747                                  ;---------------------------------------------------------------------------
 14748                                  ; Procedure Name : FastOpen_Delete
 14749                                  ; Inputs:
 14750                                  ;	None
 14751                                  ; Function:
 14752                                  ;	Call FastOpen to delete the dir info.
 14753                                  ; Outputs:
 14754                                  ;	None
 14755                                  ;---------------------------------------------------------------------------
 14756                                  
 14757                                  FastOpen_Delete:
 14758 000033FF 9C                      	PUSHF			; save flag
 14759 00003400 56                      	PUSH	SI		; save registers
 14760 00003401 53                      	PUSH	BX
 14761 00003402 50                      	PUSH	AX
 14762                                  ;hkn; SS override
 14763 00003403 8B36[4A05]              	MOV	SI,[WFP_START]	; ds:si points to path name
 14764 00003407 B003                    	MOV	AL,FONC_delete	; al = 3
 14765                                  fastinvoke:
 14766                                  ;hkn; FastTable is in DOSDATA
 14767 00003409 BB[450F]                	MOV	BX,FastTable+2
 14768 0000340C FF1F                    	CALL	far [BX]	; call fastopen
 14769 0000340E 58                      	POP	AX		; restore registers
 14770 0000340F 5B                      	POP	BX
 14771 00003410 5E                      	POP	SI
 14772 00003411 9D                      	POPF			; restore flag
 14773 00003412 C3                      	retn
 14774                                  
 14775                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 14776                                  ;---------------------------------------------------------------------------
 14777                                  ; Procedure Name : FastOpen_Update
 14778                                  ;
 14779                                  ; Inputs:
 14780                                  ;	DL     drive number (A=0,B=1,,,)
 14781                                  ;	CX     first cluster #
 14782                                  ;	AH     0 updates dir entry
 14783                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 14784                                  ;	ES:DI  directory entry
 14785                                  ; Function:
 14786                                  ;	Call FastOpen to update the dir info.
 14787                                  ; Outputs:
 14788                                  ;	None
 14789                                  ;---------------------------------------------------------------------------
 14790                                  
 14791                                  FastOpen_Update:
 14792 00003413 9C                      	PUSHF			; save flag
 14793 00003414 56                      	PUSH	SI
 14794 00003415 53                      	PUSH	BX		; save regs
 14795 00003416 50                      	PUSH	AX
 14796 00003417 B004                    	MOV	AL,FONC_update	; al = 4
 14797 00003419 EBEE                    	JMP	short fastinvoke
 14798                                  
 14799                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 14800                                  ;---------------------------------------------------------------------------
 14801                                  ; PROCEDURE Name : FastOpen_Rename
 14802                                  ;
 14803                                  ; Inputs:
 14804                                  ;	 REN_WFP   = Path Name
 14805                                  ;	 NAME1	   = New Name
 14806                                  ; Function:
 14807                                  ;	Call FastOpen to rename the dir entry in the cache
 14808                                  ; Outputs:
 14809                                  ;	None
 14810                                  ;---------------------------------------------------------------------------
 14811                                  
 14812                                  FastOpen_Rename:
 14813                                  	; 08/08/2018 - Retro DOS v3.0
 14814                                  	; MSDOS 6.0
 14815                                  	;PUSHF			;AN001 save flag
 14816                                  	;PUSH	SI		;AN001 save registers
 14817                                  	;PUSH	DI		;AN001
 14818                                  	;PUSH	BX		;AN001
 14819                                  	;PUSH	AX		;AN001
 14820                                  	;
 14821                                  ;hkn; SS override
 14822                                  	;;MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 14823                                  	;
 14824                                  	; ? - 08/08/2018 - Retro DOS v3.0
 14825                                  	;push	ss
 14826                                  	;pop	ds
 14827                                  	;mov	si,[REN_WFP]
 14828                                  	;
 14829                                  ;hkn; NAME1 is in DOSDATA
 14830                                  	;MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 14831                                  	;MOV	AL,FONC_Rename	;;AN001  al = 6
 14832                                  	;
 14833                                  ;hkn; FastTable is in DOSDATA
 14834                                  	;MOV	BX,FastTable+2
 14835                                  	;CALL	far [BX]	;;AN001  call fastopen
 14836                                  	;
 14837                                  	;POP	AX		; restore registers  ;AN001
 14838                                  	;POP	BX				     ;AN001
 14839                                  	;POP	DI				     ;AN001
 14840                                  	;POP	SI				     ;AN001
 14841                                  	;POPF			; restore flag	     ;AN001
 14842                                  	;retn					     ;AN001
 14843                                  
 14844                                  	; MSDOS 6.0
 14845                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 14846                                  Fast_Dispatch:
 14847                                  ;hkn; FastTable is in DOSDATA
 14848                                  	;MOV	SI,FastTable+2	; index to the	     ;AN000;
 14849                                  ;hkn; use SS override
 14850                                  	;CALL	far [SS:SI]	; RMFD call fastopen
 14851                                  	;retn
 14852                                  
 14853                                  ;============================================================================
 14854                                  ; RENAME.ASM, MSDOS 6.0, 1991
 14855                                  ;============================================================================
 14856                                  ; 08/08/2018 - Retro DOS v3.0
 14857                                  
 14858                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 14859                                  ;	NAME	DOS_RENAME
 14860                                  
 14861                                  ;**	Low level routine for renaming files
 14862                                  ;
 14863                                  ;	DOS_RENAME
 14864                                  ;
 14865                                  ;	Modification history:
 14866                                  ;
 14867                                  ;	    Created: ARR 30 March 1983
 14868                                  
 14869                                  ;----------------------------------------------------------------------------
 14870                                  ;
 14871                                  ; Procedure Name : DOS_RENAME
 14872                                  ;
 14873                                  ; Inputs:
 14874                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 14875                                  ;		chars, NUL terminated)
 14876                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 14877                                  ;		( = -1 if current dir not involved, else
 14878                                  ;		 Points to first char after last "/" of current dir part)
 14879                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 14880                                  ;		chars, NUL terminated)
 14881                                  ;	[THISCDS] Points to CDS being used
 14882                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 14883                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 14884                                  ; Function:
 14885                                  ;	Rename the specified file(s)
 14886                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 14887                                  ; Outputs:
 14888                                  ;	CARRY CLEAR
 14889                                  ;	    OK
 14890                                  ;	CARRY SET
 14891                                  ;	    AX is error code
 14892                                  ;		error_file_not_found
 14893                                  ;			No match for source, or dest path invalid
 14894                                  ;		error_not_same_device
 14895                                  ;			Source and dest are on different devices
 14896                                  ;		error_access_denied
 14897                                  ;			Directory specified (not simple rename),
 14898                                  ;			Device name given, Destination exists.
 14899                                  ;			NOTE: In third case some renames may have
 14900                                  ;			 been done if metas.
 14901                                  ;		error_path_not_found
 14902                                  ;			Bad path (not in curr dir part if present)
 14903                                  ;			SOURCE ONLY
 14904                                  ;		error_bad_curr_dir
 14905                                  ;			Bad path in current directory part of path
 14906                                  ;			SOURCE ONLY
 14907                                  ;		error_sharing_violation
 14908                                  ;			Deny both access required, generates an INT 24.
 14909                                  ; DS preserved, others destroyed
 14910                                  ;
 14911                                  ;----------------------------------------------------------------------------
 14912                                  
 14913                                  DOS_RENAME:
 14914                                  
 14915                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 14916                                  ;hkn; at this point to DOSDATA.
 14917                                  
 14918 0000341B E8B0EB                  	call	TestNet
 14919 0000341E 7306                    	JNC	short LOCAL_RENAME
 14920                                  
 14921                                  ;IF NOT Installed
 14922                                  ;	transfer NET_RENAME
 14923                                  ;ELSE
 14924                                  	;MOV	AX,(MultNET SHL 8) OR 17
 14925                                  	;INT	2FH
 14926                                  	;return
 14927                                  
 14928 00003420 B81111                  	mov     ax, 1111h
 14929 00003423 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 14930                                  			; SS = DS = DOS CS, 
 14931                                  			; SDA first filename pointer = offset of fully-qualified old name
 14932                                  			; SDA CDS pointer -> current directory
 14933                                  			; Return: CF set on error
 14934 00003425 C3                      	retn
 14935                                  ;ENDIF
 14936                                  
 14937                                  LOCAL_RENAME:
 14938 00003426 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 14939 0000342B 8B36[4A05]              	MOV	SI,[WFP_START]
 14940 0000342F 8B3E[4C05]              	MOV	DI,[REN_WFP]
 14941 00003433 8A04                    	MOV	AL,[SI]
 14942 00003435 8A25                    	MOV	AH,[DI]
 14943 00003437 0D2020                  	OR	AX,2020H		; Lower case
 14944 0000343A 38E0                    	CMP	AL,AH
 14945 0000343C 7405                    	JZ	short SAMEDRV
 14946 0000343E B81100                  	MOV	AX,error_not_same_device
 14947 00003441 F9                      	STC
 14948 00003442 C3                      	retn
 14949                                  
 14950                                  SAMEDRV:
 14951 00003443 FF36[DC02]              	PUSH	WORD [DMAADD+2]
 14952 00003447 FF36[DA02]              	PUSH	WORD [DMAADD]
 14953 0000344B 8C1E[DC02]              	MOV	[DMAADD+2],DS
 14954                                  
 14955                                  ;hkn; RENAMEDMA is in DOSDATA
 14956 0000344F C706[DA02][8605]        	MOV	WORD [DMAADD],RENAMEDMA
 14957 00003455 C606[0B05]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 14958 0000345A E80FEC                  	call	EcritDisk
 14959 0000345D E8B804                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 14960                                  					;    points to entry
 14961 00003460 7315                    	JNC	short Check_Dev
 14962 00003462 83F812                  	CMP	AX,error_no_more_files
 14963 00003465 7503                    	JNZ	short GOTERR
 14964 00003467 B80200                  	MOV	AX,error_file_not_found
 14965                                  GOTERR:
 14966 0000346A F9                      	STC
 14967                                  RENAME_POP:
 14968 0000346B 8F06[DA02]              	POP	WORD [DMAADD]
 14969 0000346F 8F06[DC02]              	POP	WORD [DMAADD+2]
 14970 00003473 E8FEEB                  	call	LcritDisk
 14971 00003476 C3                      	retn
 14972                                  
 14973                                  Check_Dev:
 14974 00003477 B80500                  	MOV	AX,error_access_denied	; Assume error
 14975                                  	;
 14976                                  	; MSDOS 6.0
 14977                                  	;PUSH	DS			      ;PTM.			    ;AN000;
 14978                                  	;LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 14979                                  	;!?;ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 14980                                  	;!?;TEST byte [SI+dir_entry.dir_attr],attr_directory  ;PTM.	    ;AN000;
 14981                                  	;JZ	short notdir		      ;PTM.			    ;AN000;
 14982                                  	;MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 14983                                  	;call	Check_Pathlen2		      ;PTM.   length < 67	    ;AN000;
 14984                                  ;notdir:
 14985                                  	;POP	DS			      ;PTM.			    ;AN000;
 14986                                  	;JA	short GOTERR		      ;PTM.			    ;AN000;
 14987                                  	;
 14988                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14989 0000347A 803E[0B05]00            	CMP	byte [FOUND_DEV],0
 14990 0000347F 75E9                    	JNZ	short GOTERR
 14991                                  ; At this point a source has been found. There is search continuation info (a
 14992                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 14993                                  ; directory entry found.
 14994                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 14995                                  ; throughout the RENAME since it is known at this point that the source and
 14996                                  ; destination are both on the same device.
 14997                                  ; [SATTRIB] is also set.
 14998 00003481 89DE                    	MOV	SI,BX
 14999 00003483 83C61A                  	ADD	SI,dir_entry.dir_first
 15000 00003486 E80DFF                  	call	REN_DEL_Check
 15001 00003489 7305                    	JNC	short REN_OK1
 15002 0000348B B82000                  	MOV	AX,error_sharing_violation
 15003 0000348E EBDB                    	JMP	short RENAME_POP
 15004                                  
 15005                                  ;------------------------------------------------------------------------------
 15006                                  ; Check if the source is a file or directory. If file, delete the entry
 15007                                  ; from the Fastopen cache. If directory, rename it later
 15008                                  ;------------------------------------------------------------------------------
 15009                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 15010                                  	; MSDOS 6.0
 15011                                  	;PUSH	SI
 15012                                  	;LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 15013                                  	;!?;ADD	SI,find_buf.attr	;;BN00XPTM.P5520		   ;AN000;
 15014                                  	;!?;TEST byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.   ;AN000;
 15015                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			   ;AN000;
 15016                                  	;POP	SI			;BN00X
 15017                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 15018                                  	;
 15019                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 15020                                  	;POP	SI
 15021                                  	;
 15022                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 15023 00003490 E86CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 15024                                  
 15025                                  ;SWAP_SOURCE:
 15026                                  	; MSDOS 3.3
 15027                                  	;MOV	SI,[REN_WFP]
 15028                                  	;MOV	[WFP_START],SI
 15029                                  	; MSDOS 6.0
 15030 00003493 A1[4A05]                	MOV	AX,[WFP_START]		; Swap source and destination
 15031 00003496 8B36[4C05]              	MOV	SI,[REN_WFP]		; Swap source and destination
 15032 0000349A 8936[4A05]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 15033 0000349E A3[4C05]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 15034                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15035 000034A1 C706[4E05]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 15036 000034A7 C706[1805]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 15037                                  					; A rename is like a CREATE_NEW as far
 15038                                  					; as the destination is concerned.
 15039 000034AD E88F13                  	call	GetPathNoSet
 15040                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 15041                                  ;   since no files match the destination name. If it fails for any other
 15042                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 15043                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 15044                                  ;   if the rename should fail because we haven't built an explicit name by
 15045                                  ;   substituting for the meta chars in it. In this case the destination file
 15046                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 15047                                  ;   in the directory entry part.
 15048 000034B0 7223                    	JC	short NODEST
 15049                                  	;; MSDOS 6.0
 15050                                  	;; JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 15051                                  	; !! MSDOS 3.3 !!
 15052 000034B2 7404                    	JZ	short BAD_ACC ; !!	; Dest string is a directory
 15053                                  	;
 15054 000034B4 08E4                    	OR	AH,AH			; Device?
 15055 000034B6 7930                    	JNS	short SAVEDEST		; No, continue
 15056                                  BAD_ACC:
 15057 000034B8 B80500                  	MOV	AX,error_access_denied
 15058 000034BB F9                      	STC
 15059                                  RENAME_CLEAN:
 15060 000034BC 9C                      	PUSHF				; Save carry state
 15061 000034BD 50                      	PUSH	AX			; and error code (if carry set)
 15062 000034BE A0[1105]                	MOV	AL,[THISDRV]
 15063 000034C1 E86D2A                  	call	FLUSHBUF
 15064 000034C4 58                      	POP	AX
 15065 000034C5 803E[F602]00            	CMP	byte [FAILERR],0
 15066 000034CA 7503                    	JNZ	short BAD_ERR		; User FAILed to I 24
 15067 000034CC 9D                      	POPF
 15068 000034CD EB9C                    	JMP	short RENAME_POP
 15069                                  
 15070                                  BAD_ERR:
 15071 000034CF 58                      	POP	AX			; Saved flags
 15072 000034D0 B80300                  	MOV	AX,error_path_not_found
 15073 000034D3 EB95                    	JMP	short GOTERR
 15074                                  
 15075                                  NODEST:
 15076 000034D5 750B                    	JNZ	short BAD_PATH
 15077 000034D7 803E[F602]00            	CMP	byte [FAILERR],0
 15078 000034DC 7504                    	JNZ	short BAD_PATH	; Search for dest failed because user FAILed on
 15079                                  				;	I 24
 15080 000034DE 08C9                    	OR	CL,CL
 15081 000034E0 7506                    	JNZ	short SAVEDEST
 15082                                  BAD_PATH:
 15083 000034E2 B80300                  	MOV	AX,error_path_not_found
 15084 000034E5 F9                      	STC
 15085 000034E6 EB83                    	JMP	short RENAME_POP
 15086                                  
 15087                                  SAVEDEST:
 15088 000034E8 16                      	push	ss
 15089 000034E9 07                      	pop	es
 15090                                  
 15091                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 15092 000034EA BF[F204]                	MOV	DI,NAME2
 15093 000034ED BE[E604]                	MOV	SI,NAME1
 15094                                  
 15095 000034F0 B90B00                  	MOV	CX,11
 15096 000034F3 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 15097 000034F5 A1[5805]                	MOV	AX,[DIRSTART]
 15098 000034F8 A3[FF04]                	MOV	[DESTSTART],AX
 15099                                  BUILDDEST:
 15100 000034FB 16                      	push	ss
 15101 000034FC 07                      	pop	es			; needed due to JMP BUILDDEST below
 15102                                  
 15103                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 15104 000034FD BB[9B05]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 15105 00003500 BF[E604]                	MOV	DI,NAME1		; Real dest name goes here
 15106 00003503 BE[F204]                	MOV	SI,NAME2		; Raw dest
 15107                                  
 15108 00003506 B90B00                  	MOV	CX,11
 15109                                  	
 15110                                  	; MSDOS 6.0
 15111                                  	;CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 15112                                  
 15113                                  	; MSDOS 3.3
 15114                                  
 15115                                  ; 08/08/2018 - Retro DOS v3.0
 15116                                  ; MSDOS 6.0 
 15117                                  ;---------------------------------------------------------------------------
 15118                                  ;Procedure: NEW_RENAME
 15119                                  ;
 15120                                  ;Input: DS:SI -> raw string with ?
 15121                                  ;	ES:DI -> destination string
 15122                                  ;	DS:BX -> source string
 15123                                  ;Function: replace ? chars of raw string with chars in source string and
 15124                                  ;	   put in destination string
 15125                                  ;Output: ES:DI-> new string
 15126                                  ;---------------------------------------------------------------------------
 15127                                  
 15128                                  NEW_RENAME:
 15129                                  NEWNAM:
 15130                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 15131 00003509 AC                      	LODSB
 15132 0000350A 3C3F                    	CMP	AL,"?"
 15133 0000350C 7502                    	JNZ	short NOCHG
 15134 0000350E 8A07                    	MOV	AL,[BX] 		; Get replace char
 15135                                  NOCHG:
 15136 00003510 AA                      	STOSB
 15137 00003511 43                      	INC	BX			; Next replace char
 15138 00003512 E2F5                    	LOOP	NEWNAM
 15139                                  	; MSSOS 6.0
 15140                                  	;retn
 15141                                  
 15142                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15143 00003514 C606[0605]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 15144 00003519 C606[1805]FF            	MOV	byte [CREATING],0FFH
 15145 0000351E E8C315                  	call	DEVNAME 		; Check if we built a device name
 15146 00003521 7395                    	JNC	short BAD_ACC
 15147 00003523 8B1E[FF04]              	MOV	BX,[DESTSTART]
 15148 00003527 C42E[2405]              	LES	BP,[THISDPB]
 15149 0000352B E8B612                  	call	SETDIRSRCH		; Reset search to start of dir
 15150 0000352E 7288                    	JC	short BAD_ACC 		; Screw up
 15151 00003530 E87611                  	call	FINDENTRY		; See if new name already exists
 15152 00003533 7383                    	JNC	short BAD_ACC 		; Error if found
 15153 00003535 803E[F602]00            	CMP	byte [FAILERR],0
 15154 0000353A 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 15155 0000353C A1[FF04]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 15156 0000353F 3B06[9505]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 15157 00003543 7453                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 15158                                  
 15159 00003545 A0[A605]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 15160 00003548 A810                    	TEST	AL,attr_directory
 15161 0000354A 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 15162                                  					; otherwise the . and .. entries get
 15163                                  					; wiped.
 15164 0000354C A2[0605]                	MOV	[ATTRIB],AL
 15165 0000354F 8C1E[3805]              	MOV	[THISSFT+2],DS
 15166                                  
 15167                                  ;hkn; AUXSTACK is in DOSDATA
 15168 00003553 BE[D106]                	MOV	SI,AUXSTACK-SF_ENTRY.size
 15169 00003556 8936[3605]              	MOV	[THISSFT],SI
 15170 0000355A C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 15171 0000355F 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 15172 00003561 E8F21A                  	call	RENAME_MAKE		; This is in mknode
 15173 00003564 7303                    	JNC	short GOT_DEST
 15174                                  BAD_ACCJ:
 15175 00003566 E94FFF                  	JMP	BAD_ACC
 15176                                  
 15177                                  GOT_DEST:
 15178 00003569 53                      	push	bx
 15179 0000356A C43E[3605]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 15180 0000356E E8E73D                  	call	ShareEnd		; we need to remove it.
 15181 00003571 5B                      	pop	bx
 15182                                  ; A zero length entry with the correct new name has now been made at
 15183                                  ;   [CURBUF+2]:BX.
 15184 00003572 C43E[7405]              	LES	DI,[CURBUF]
 15185                                  
 15186                                  	; MSDOS 6.0
 15187                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15188                                  	;				;LB. if already dirty		  ;AN000;
 15189                                  	;JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 15190                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15191                                  	
 15192 00003576 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15193                                  ;yesdirty:
 15194 0000357B 89DF                    	MOV	DI,BX
 15195 0000357D 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 15196                                  
 15197                                  ;hkn; RENAMEDMA is in DOSDATA
 15198 00003580 BE[A605]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 15199 00003583 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr ; mov cx,21
 15200 00003586 F3A4                    	REP	MOVSB
 15201 00003588 E85100                  	CALL	GET_SOURCE
 15202 0000358B 724B                    	JC	short RENAME_OVER
 15203 0000358D 89DF                    	MOV	DI,BX
 15204 0000358F 8E06[7605]              	MOV	ES,[CURBUF+2]
 15205 00003593 B0E5                    	MOV	AL,DIRFREE
 15206 00003595 AA                      	STOSB				; "free" the source
 15207 00003596 EB13                    	JMP	SHORT DIRTY_IT
 15208                                  
 15209                                  SIMPLE_RENAME:
 15210 00003598 E84100                  	CALL	GET_SOURCE		; Get the source back
 15211 0000359B 723B                    	JC	short RENAME_OVER
 15212 0000359D 89DF                    	MOV	DI,BX
 15213 0000359F 8E06[7605]              	MOV	ES,[CURBUF+2]
 15214                                  
 15215                                  ;hkn; NAME1 is in DOSDATA
 15216 000035A3 BE[E604]                	MOV	SI,NAME1		; New Name
 15217 000035A6 B90B00                  	MOV	CX,11
 15218 000035A9 F3A4                    	REP	MOVSB
 15219                                  DIRTY_IT:
 15220 000035AB 8B3E[7405]              	MOV	DI,[CURBUF]
 15221                                  
 15222                                  	; MSDOS 6.0
 15223                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15224                                  	;				;LB. if already dirty		  ;AN000;
 15225                                  	;JNZ	short Yesdirty2		;LB.  don't increment dirty count ;AN000;
 15226                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15227                                  	
 15228 000035AF 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15229                                  ;------------------------------------------------------------------------------
 15230                                  ; Check if the source is a directory of file. If directory rename it to the
 15231                                  ; the new name in the Fastopen cache buffer.  If file name it has been
 15232                                  ; previously deleted.
 15233                                  ;------------------------------------------------------------------------------
 15234                                  ;Yesdirty2:
 15235                                  	; MSDOS 6.0
 15236                                  	;PUSH	SI
 15237                                  	;LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 15238                                  	;ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 15239                                  	;TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 15240                                  	;JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 15241                                  	;call	FASTOPEN_RENAME		;;BN00X rename dir entry in fastopen
 15242                                  	;POP	SI
 15243                                  	;JMP	SHORT NOT_DIRTY1
 15244                                  ;NOT_DIR2:				;;BN00X it is a file, delete the entry
 15245                                  	;POP	SI
 15246                                  ;NOT_DIRTY1:				;;BN00X
 15247                                  NEXT_SOURCE:
 15248                                  ;hkn; RENAMEDMA is in DOSDATA
 15249 000035B4 BE[8705]                	MOV	SI,RENAMEDMA+1		;Name
 15250                                  ;
 15251                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 15252                                  ; to enter it before going to RENAME_Next.
 15253                                  ;
 15254 000035B7 E8B2EA                  	call	EcritDisk
 15255 000035BA C606[1805]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 15256                                  				  ;  to FF when we made the prev new file).
 15257 000035BF E85704                  	call	RENAME_NEXT
 15258                                  ;
 15259                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 15260                                  ; we were before.
 15261                                  ;
 15262 000035C2 7214                    	JC	short RENAME_OVER
 15263 000035C4 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 15264 000035C7 E8CCFD                  	call	REN_DEL_Check
 15265 000035CA 7306                    	JNC	short REN_OK2
 15266 000035CC B82000                  	MOV	AX,error_sharing_violation
 15267 000035CF E9EAFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 15268                                  
 15269                                  ;------------------------------------------------------------------------------
 15270                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 15271                                  ; if directory, rename directory name in the Fastopen cache.
 15272                                  ;-----------------------------------------------------------------------------
 15273                                  REN_OK2:
 15274                                  	; MSDOS 6.0
 15275                                  	;MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 15276                                  	;TEST	AL,attr_directory	;;BN00X directory
 15277                                  	;JZ	short Ren_Directory	;;BN00X no - file, delete it
 15278                                  	
 15279                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15280 000035D2 E82AFE                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 15281 000035D5 E923FF                  	JMP	BUILDDEST		;;BN00X
 15282                                  
 15283                                  	; MSDOS 6.0
 15284                                  ;Ren_Directory:
 15285                                  	;call	FASTOPEN_RENAME 	;;BN00X delete dir info in fastopen DOS 3.3
 15286                                  	;JMP	BUILDDEST
 15287                                  
 15288                                  RENAME_OVER:
 15289 000035D8 F8                      	CLC
 15290 000035D9 E9E0FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 15291                                  
 15292                                  ;----------------------------------------------------------------------------
 15293                                  ; Procedure: GET_SOURCE
 15294                                  ;
 15295                                  ; Inputs:
 15296                                  ;	RENAMEDMA has source info
 15297                                  ; Function:
 15298                                  ;	Re-find the source
 15299                                  ; Output:
 15300                                  ;	[CURBUF] set
 15301                                  ;	[CURBUF+2]:BX points to entry
 15302                                  ;	Carry set if error (currently user FAILed to I 24)
 15303                                  ; DS preserved, others destroyed
 15304                                  ;----------------------------------------------------------------------------
 15305                                  
 15306                                  GET_SOURCE:
 15307 000035DC 8B1E[9505]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 15308 000035E0 C42E[2405]              	LES	BP,[THISDPB]
 15309 000035E4 E8FD11                  	call	SETDIRSRCH
 15310 000035E7 7209                    	JC	short gs_ret_label	; retc
 15311 000035E9 E8D714                  	call	STARTSRCH
 15312 000035EC A1[9305]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 15313 000035EF E8C411                  	call	GETENT
 15314                                  
 15315                                  gs_ret_label:
 15316 000035F2 C3                      	retn
 15317                                  
 15318                                  ;============================================================================
 15319                                  ; FINFO.ASM, MSDOS 6.0, 1991
 15320                                  ;============================================================================
 15321                                  ; 08/08/2018 - Retro DOS v3.0
 15322                                  
 15323                                  ;**	Low level routines for returning file information and setting file
 15324                                  ;	attributes
 15325                                  ;
 15326                                  ;	GET_FILE_INFO
 15327                                  ;	SET_FILE_ATTRIBUTE
 15328                                  ;
 15329                                  ;	Modification history:
 15330                                  ;
 15331                                  ;	    Created: ARR 30 March 1983
 15332                                  ;
 15333                                  ;	M025: Return access_denied if attempting to set
 15334                                  ;	      attribute of root directory.
 15335                                  ;
 15336                                  
 15337                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 15338                                  
 15339                                  ;---------------------------------------------------------------------------
 15340                                  ; Procedure Name : GET_FILE_INFO
 15341                                  ;
 15342                                  ; Inputs:
 15343                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15344                                  ;		terminated)
 15345                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15346                                  ;		( = -1 if current dir not involved, else
 15347                                  ;		 Points to first char after last "/" of current dir part)
 15348                                  ;	[THISCDS] Points to CDS being used
 15349                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15350                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15351                                  ; Function:
 15352                                  ;	Get Information about a file
 15353                                  ; Returns:
 15354                                  ;	CARRY CLEAR
 15355                                  ;	    AX = Attribute of file
 15356                                  ;	    CX = Time stamp of file
 15357                                  ;	    DX = Date stamp of file
 15358                                  ;	    BX:DI = Size of file (32 bit)
 15359                                  ;	CARRY SET
 15360                                  ;	    AX is error code
 15361                                  ;		error_file_not_found
 15362                                  ;			Last element of path not found
 15363                                  ;		error_path_not_found
 15364                                  ;			Bad path (not in curr dir part if present)
 15365                                  ;		error_bad_curr_dir
 15366                                  ;			Bad path in current directory part of path
 15367                                  ; DS preserved, others destroyed
 15368                                  ;---------------------------------------------------------------------------
 15369                                  
 15370                                  GET_FILE_INFO:
 15371                                  
 15372                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 15373                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 15374                                  
 15375 000035F3 E8D8E9                  	call	TestNet
 15376 000035F6 7306                    	JNC	short LOCAL_INFO
 15377                                  
 15378                                  ;IF NOT Installed
 15379                                  ;	transfer NET_GET_FILE_INFO
 15380                                  ;ELSE
 15381                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 15382                                  ;	INT	2FH
 15383                                  ;	return
 15384                                  
 15385 000035F8 B80F11                  	mov     ax, 110Fh
 15386 000035FB CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 15387                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 15388                                  			; SDA CDS pointer -> current directory
 15389                                  			; Return: CF set on error, AX = file attributes
 15390 000035FD C3                      	retn
 15391                                  ;ENDIF
 15392                                  
 15393                                  LOCAL_INFO:
 15394 000035FE E86BEA                  	call	EcritDisk
 15395 00003601 C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 15396                                  	; MSDOS 6.0
 15397                                  	;call	Get_FAST_PATH
 15398                                  	; MSDOS 3.3
 15399 00003606 E83012                  	call	GETPATH
 15400                                  info_check:
 15401 00003609 7313                    	JNC	short info_check_dev
 15402                                  NO_PATH:
 15403 0000360B 750C                    	JNZ	short bad_path1
 15404 0000360D 08C9                    	OR	CL,CL
 15405 0000360F 7408                    	JZ	short bad_path1
 15406                                  info_no_file:
 15407 00003611 B80200                  	MOV	AX,error_file_not_found
 15408                                  BadRet:
 15409 00003614 F9                      	STC
 15410                                  JustRet:
 15411 00003615 E85CEA                  	call	LcritDisk
 15412 00003618 C3                      	retn
 15413                                  
 15414                                  bad_path1:
 15415 00003619 B80300                  	MOV	AX,error_path_not_found
 15416 0000361C EBF6                    	jmp	short BadRet
 15417                                  
 15418                                  info_check_dev:
 15419 0000361E 08E4                    	OR	AH,AH
 15420 00003620 78EF                    	JS	short info_no_file	; device
 15421                                  
 15422                                  	; MSDOS 6.0
 15423                                  ;SR;
 15424                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 15425                                  ;for a root dir
 15426                                  ;
 15427 00003622 833E[7405]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 15428 00003627 7507                    	jne	short not_root		;no, CurBuf ptr is valid
 15429                                  
 15430 00003629 30E4                    	xor	ah,ah
 15431 0000362B B010                    	mov	al,attr_directory
 15432 0000362D F8                      	clc
 15433 0000362E EBE5                    	jmp	short JustRet
 15434                                  
 15435                                  not_root:
 15436                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15437 00003630 1E                      	PUSH	DS
 15438 00003631 8E1E[7605]              	MOV	DS,[CURBUF+2]
 15439 00003635 89DE                    	MOV	SI,BX
 15440 00003637 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 15441 00003639 89DF                    	MOV	DI,BX
 15442 0000363B 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 15443 0000363E 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 15444 00003641 30E4                    	XOR	AH,AH
 15445 00003643 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 15446 00003646 A810                    	TEST	AL,attr_directory
 15447 00003648 7506                    	JNZ	short NO_SIZE
 15448 0000364A 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 15449 0000364D 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 15450                                  NO_SIZE:
 15451 00003650 1F                      	POP	DS
 15452 00003651 F8                      	CLC
 15453 00003652 EBC1                    	jmp	short JustRet
 15454                                  
 15455                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 15456                                  ;-------------------------------------------------------------------------------
 15457                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 15458                                  ; Inputs:
 15459                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15460                                  ;		terminated)
 15461                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15462                                  ;		( = -1 if current dir not involved, else
 15463                                  ;		 Points to first char after last "/" of current dir part)
 15464                                  ;	[THISCDS] Points to CDS being used
 15465                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15466                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 15467                                  ;	AX is new attributes to give to file
 15468                                  ; Function:
 15469                                  ;	Set File Attributes
 15470                                  ; Returns:
 15471                                  ;	CARRY CLEAR
 15472                                  ;	    No error
 15473                                  ;	CARRY SET
 15474                                  ;	    AX is error code
 15475                                  ;		error_file_not_found
 15476                                  ;			Last element of path not found
 15477                                  ;		error_path_not_found
 15478                                  ;			Bad path (not in curr dir part if present)
 15479                                  ;		error_bad_curr_dir
 15480                                  ;			Bad path in current directory part of path
 15481                                  ;		error_access_denied
 15482                                  ;			Attempt to set an attribute which cannot be set
 15483                                  ;			(attr_directory, attr_volume_ID)
 15484                                  ;		error_sharing_violation
 15485                                  ;			Sharing mode of file did not allow the change
 15486                                  ;			(this request requires exclusive write/read access)
 15487                                  ;			(INT 24H generated)
 15488                                  ; DS preserved, others destroyed
 15489                                  ;----------------------------------------------------------------------------
 15490                                  
 15491                                  SET_FILE_ATTRIBUTE:
 15492                                  
 15493                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 15494                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 15495                                  
 15496 00003654 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 15497 00003657 7414                    	JZ	short set_look
 15498                                  _BAD_ACC:
 15499 00003659 C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk
 15500 0000365E C606[D502]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr
 15501 00003663 C606[D402]04            	MOV	byte [EXTERR_ACTION],errACT_Abort
 15502 00003668 B80500                  	MOV	AX,error_access_denied
 15503 0000366B F9                      	STC
 15504 0000366C C3                      	retn
 15505                                  
 15506                                  set_look:
 15507 0000366D E85EE9                  	call	TestNet
 15508 00003670 7308                    	JNC	short LOCAL_SET
 15509                                  
 15510                                  ;IF NOT Installed
 15511                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 15512                                  ;ELSE
 15513 00003672 50                      	PUSH	AX
 15514                                  	
 15515                                  	;MOV	AX,(MultNET SHL 8) OR 14
 15516                                  	;INT	2FH
 15517                                  
 15518 00003673 B80E11                  	mov     ax, 110Eh
 15519 00003676 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 15520                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 15521                                  			; SDA CDS pointer -> current directory
 15522                                  			; STACK: WORD new file attributes
 15523                                  			; Return: CF set on error
 15524                                  
 15525 00003678 5B                      	POP	BX			; clean stack
 15526 00003679 C3                      	retn
 15527                                  ;ENDIF
 15528                                  
 15529                                  LOCAL_SET:
 15530 0000367A E8EFE9                  	call	EcritDisk
 15531 0000367D 50                      	PUSH	AX			; Save new attributes
 15532 0000367E C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 15533 00003683 E8B311                  	call	GETPATH 		; get path through fastopen if there	 ;AC000;
 15534 00003686 7303                    	JNC	short set_check_device
 15535 00003688 5B                      	POP	BX			; Clean stack (don't zap AX)
 15536 00003689 EB80                    	JMP	short NO_PATH
 15537                                  
 15538                                  set_check_device:
 15539 0000368B 08E4                    	OR	AH,AH
 15540 0000368D 7906                    	JNS	short set_check_share
 15541 0000368F 58                      	POP	AX
 15542 00003690 E8E1E9                  	call	LcritDisk
 15543 00003693 EBC4                    	JMP	short _BAD_ACC 		; device
 15544                                  
 15545                                  set_check_share:
 15546 00003695 58                      	POP	AX			; Get new attributes
 15547                                  
 15548                                  	; MSDOS 6.0
 15549 00003696 833E[7405]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 15550 0000369B 740A                    	je	short cannot_set_root	; M025: Y: return error
 15551                                  
 15552                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15553 0000369D E8F6FC                  	call	REN_DEL_Check
 15554 000036A0 730B                    	JNC	short set_do
 15555 000036A2 B82000                  	MOV	AX,error_sharing_violation
 15556 000036A5 EB30                    	jmp	short OK_BYE
 15557                                  
 15558                                  	; MSDOS 6.0
 15559                                  cannot_set_root:			; M025:
 15560 000036A7 B80500                  	mov	ax, error_access_denied	; M025: return error is attempting
 15561 000036AA F9                      	stc				; M025: to set attr. of root
 15562 000036AB EB2A                    	jmp	short OK_BYE		; M025:
 15563                                  
 15564                                  set_do:
 15565                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15566 000036AD C43E[7405]              	LES	DI,[CURBUF]
 15567 000036B1 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 15568 000036B6 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 15569                                  
 15570                                  	; MSDOS 6.0
 15571                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15572                                  	;				;LB. if already dirty		  ;AN000;
 15573                                  	;JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 15574                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15575                                  	
 15576 000036BA 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15577                                  ;yesdirty3:
 15578 000036BF A0[1105]                	MOV	AL,[THISDRV]
 15579                                  ;;;; 10/1/86 F.C update fastopen cache
 15580 000036C2 52                      	PUSH	DX
 15581 000036C3 57                      	PUSH	DI
 15582 000036C4 B400                    	MOV	AH,0		  ; dir entry update
 15583 000036C6 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 15584 000036C8 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 15585 000036CA E846FD                  	call	FastOpen_Update
 15586 000036CD 5F                      	POP	DI
 15587 000036CE 5A                      	POP	DX
 15588                                  ;;;; 9/11/86 F.C update fastopen cache
 15589 000036CF E85F28                  	call	FLUSHBUF
 15590 000036D2 7303                    	JNC	short OK_BYE
 15591 000036D4 B80200                  	MOV	AX,error_file_not_found
 15592                                  OK_BYE:
 15593 000036D7 E89AE9                  	call	LcritDisk
 15594 000036DA C3                      	retn
 15595                                  
 15596                                  	; MSDOS 6.0
 15597                                  ;GET_FAST_PATH:
 15598                                  ;hkn; use SS override for FastOpenFlg
 15599                                  	;OR	byte [FastOpenFlg],FastOpen_Set
 15600                                  	;				;FO. trigger fastopen	;AN000;
 15601                                  	;call	GETPATH
 15602                                  	;PUSHF			 	;FO.			;AN000;
 15603                                  	;AND	byte [FastOpenFlg],Fast_yes 
 15604                                  	;				;FO. clear all fastopen flags ;AN000;
 15605                                  	;POPF				;FO.			;AN000;
 15606                                  	;retn
 15607                                  
 15608                                  ;============================================================================
 15609                                  ; DUP.ASM, MSDOS 6.0, 1991
 15610                                  ;============================================================================
 15611                                  ; 08/08/2018 - Retro DOS v3.0
 15612                                  
 15613                                  ;**	Low level DUP routine for use by EXEC when creating a new process. Exports
 15614                                  ;	  the DUP to the server machine and increments the SFT ref count
 15615                                  ;
 15616                                  ;	DOS_DUP
 15617                                  ;
 15618                                  ;	Modification history:
 15619                                  ;
 15620                                  ;	  Created: ARR 30 March 1983
 15621                                  
 15622                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 15623                                  ;---------------------------------------------------------------------------
 15624                                  ; Procedure Name : DOS_DUP
 15625                                  ;
 15626                                  ; Inputs:
 15627                                  ;	[THISSFT] set to the SFT for the file being DUPed
 15628                                  ;		(a non net SFT is OK, in this case the ref
 15629                                  ;		 count is simply incremented)
 15630                                  ; Function:
 15631                                  ;	Signal to the devices that a logical open is occurring
 15632                                  ; Returns:
 15633                                  ;	ES:DI point to SFT
 15634                                  ;    Carry clear
 15635                                  ;	SFT ref_count is incremented
 15636                                  ; Registers modified: None.
 15637                                  ; NOTE:
 15638                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 15639                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 15640                                  ;	that time.
 15641                                  ;---------------------------------------------------------------------------
 15642                                  
 15643                                  DOS_DUP:
 15644 000036DB 2EC43E[3605]            	LES	DI,[CS:THISSFT]
 15645                                  
 15646                                  	;Entry	Dos_Dup_Direct
 15647                                  DOS_Dup_Direct:
 15648 000036E0 E800E9                  	call	IsSFTNet
 15649 000036E3 7503                    	JNZ	short DO_INC
 15650 000036E5 E89117                  	call	DEV_OPEN_SFT
 15651                                  DO_INC:
 15652                                  
 15653                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 15654 000036E8 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 15655                                  					;   we're in big trouble anyway)
 15656 000036EB C3                      	retn
 15657                                  
 15658                                  ;============================================================================
 15659                                  ; CREATE.ASM, MSDOS 6.0, 1991
 15660                                  ;============================================================================
 15661                                  ; 08/08/2018 - Retro DOS v3.0
 15662                                  
 15663                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 15664                                  ;NAME	DOS_CREATE
 15665                                  
 15666                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 15667                                  ;
 15668                                  ;	DOS_CREATE
 15669                                  ;	DOS_CREATE_NEW
 15670                                  ;	SET_MKND_ERR
 15671                                  ;	SET_Media_ID
 15672                                  ;	SET_EXT_Mode
 15673                                  ;
 15674                                  ;	Revision history:
 15675                                  ;
 15676                                  ;	    A000 version 4.00	  Jan. 1988
 15677                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 15678                                  
 15679                                  ;Installed = TRUE
 15680                                  
 15681                                  ;	i_need	THISSFT,DWORD
 15682                                  ;	i_need	THISCDS,DWORD
 15683                                  ;	I_need	EXTERR,WORD
 15684                                  ;	I_Need	ExtErr_locus,BYTE
 15685                                  ;	I_need	JShare,DWORD
 15686                                  ;	I_need	VOLCHNG_FLAG,BYTE
 15687                                  ;	I_need	SATTRIB,BYTE
 15688                                  ;	I_need	CALLVIDM,DWORD
 15689                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 15690                                  ;	I_need	NAME1,BYTE			  ;AN000;
 15691                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 15692                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 15693                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 15694                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 15695                                  
 15696                                  ;***	DOS_CREATE - Create a File
 15697                                  ;----------------------------------------------------------------------------
 15698                                  ;	DOS_Create is called to create the specified file, truncating
 15699                                  ;	the old one if it exists.
 15700                                  ;
 15701                                  ;
 15702                                  ;	ENTRY	AX is Attribute to create
 15703                                  ;		(ds) = DOSDATA
 15704                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15705                                  ;			terminated)
 15706                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 15707                                  ;			( = -1 if current dir not involved, else
 15708                                  ;			 Points to first char after last "/" of current dir part)
 15709                                  ;		[THISCDS] Points to CDS being used
 15710                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 15711                                  ;		[THISSFT] Points to SFT to fill in if file created
 15712                                  ;			(sf_mode field set so that FCB may be detected)
 15713                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 15714                                  ;
 15715                                  ;	EXIT	sf_ref_count is NOT altered
 15716                                  ;		CARRY CLEAR
 15717                                  ;		    THISSFT filled in.
 15718                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 15719                                  ;		CARRY SET
 15720                                  ;		    AX is error code
 15721                                  ;			error_path_not_found
 15722                                  ;				Bad path (not in curr dir part if present)
 15723                                  ;			error_bad_curr_dir
 15724                                  ;				Bad path in current directory part of path
 15725                                  ;			error_access_denied
 15726                                  ;				Attempt to re-create read only file , or
 15727                                  ;				create a second volume id or create a dir
 15728                                  ;			error_sharing_violation
 15729                                  ;				The sharing mode was correct but not allowed
 15730                                  ;				generates an INT 24
 15731                                  ;	USES	all but DS
 15732                                  ;----------------------------------------------------------------------------
 15733                                  
 15734                                  DOS_CREATE:
 15735                                  
 15736                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 15737                                  ;hkn; this point.
 15738                                  
 15739 000036EC 30E4                    	XOR	AH,AH		; Truncate is OK
 15740                                  
 15741                                  ;	Enter here from Dos_Create_New
 15742                                  ;
 15743                                  ;	(ah) = 0 iff truncate OK
 15744                                  
 15745                                  Create_inter:
 15746 000036EE A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 15747                                  				; Mask out any meaningless bits
 15748 000036F0 750C                    	JNZ	short AttErr
 15749 000036F2 A808                    	TEST	AL,attr_volume_id
 15750 000036F4 7402                    	JZ	short NoReset
 15751                                  	;
 15752                                  	; MSDOS 6.0
 15753                                  	;OR	[DOS34_FLAG],DBCS_VOLID      ;AN000;FOR dbcs volid
 15754                                  	;
 15755 000036F6 B008                    	MOV	AL,attr_volume_id
 15756                                  NoReset:
 15757 000036F8 0C20                    	OR	AL,attr_archive ; File changed
 15758 000036FA A850                    	TEST	AL,attr_directory+attr_device
 15759 000036FC 740A                    	JZ	short ATT_OK
 15760                                  AttErr:
 15761 000036FE B80500                  	MOV	AX,5		; Attribute problem
 15762 00003701 C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk
 15763 00003706 EB3D                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 15764                                  				   ;	attr_device to be set.
 15765                                  ATT_OK:
 15766 00003708 C43E[3605]              	LES	DI,[THISSFT]
 15767 0000370C 06                      	PUSH	ES
 15768 0000370D C436[3A05]              	LES	SI,[THISCDS]
 15769 00003711 83FEFF                  	CMP	SI,-1
 15770 00003714 7509                    	JNE	short TEST_RE_NET
 15771                                  
 15772                                  ;	No CDS, it must be redirected.
 15773                                  
 15774 00003716 07                      	POP	ES
 15775                                  
 15776                                  	; MSDOS 6.0
 15777                                  ;Extended open hooks
 15778                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;AN000;EO. from extended open
 15779                                  	;JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 15780                                  ;IFS_extopen:				    ;AN000;EO.
 15781                                  	;PUSH	AX			    ;AN000;EO. pass create attr
 15782                                  	;;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 15783                                  	;mov	ax,112Eh
 15784                                  	;INT	2FH			    ;AN000;EO.
 15785                                  	;POP	BX			    ;AN000;EO. trash bx
 15786                                  	;MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 15787                                  	;retn				    ;AN000;EO.
 15788                                  ;NOEXTOP:				    ;AN000;
 15789                                  ;Extended open hooks
 15790                                  
 15791                                  ;IF NOT Installed
 15792                                  ;	transfer NET_SEQ_CREATE
 15793                                  ;ELSE
 15794 00003717 50                      	PUSH	AX
 15795                                  
 15796                                  	;MOV	AX,(MultNET SHL 8) OR 24
 15797                                  	;INT	2FH
 15798                                  
 15799 00003718 B81811                  	mov     ax,1118h
 15800 0000371B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 15801                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 15802                                  			; SDA first filename pointer -> fully-qualified name of file
 15803                                  			; STACK: WORD file creation mode???
 15804                                  
 15805 0000371D 5B                      	POP	BX			; BX is trashed anyway
 15806 0000371E C3                      	retn
 15807                                  ;ENDIF
 15808                                  
 15809                                  ;	We have a CDS. See if it's network
 15810                                  
 15811                                  TEST_RE_NET:
 15812 0000371F 26F744430080            	TEST	word [ES:SI+curdir.flags],curdir_isnet
 15813 00003725 07                      	POP	ES
 15814 00003726 7408                    	JZ	short LOCAL_CREATE
 15815                                  
 15816                                  	; MSDOS 6.0
 15817                                  	;CALL	Set_EXT_mode		    ;AN000;EO.
 15818                                  	;JC	SHORT dochk		    ;AN000;EO.
 15819                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 15820                                  
 15821                                  ;Extended open hooks
 15822                                  ;dochk:
 15823                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;AN000;EO. from extended open
 15824                                  	;JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 15825                                  ;Extended open hooks
 15826                                  
 15827                                  ;IF NOT Installed
 15828                                  ;	transfer NET_CREATE
 15829                                  ;ELSE
 15830 00003728 50                      	PUSH	AX
 15831                                  	
 15832                                  	;MOV	AX,(MultNET SHL 8) OR 23
 15833                                  	;INT	2FH
 15834                                  	
 15835 00003729 B81711                  	mov     ax, 1117h
 15836 0000372C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 15837                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 15838                                  			; SDA first filename pointer -> fully-qualified name of file to open
 15839                                  			; SDA CDS pointer -> current directory
 15840                                  			; Return: CF set on error
 15841                                  
 15842 0000372E 5B                      	POP	BX			; BX is trashed anyway
 15843                                  ;nomore:
 15844 0000372F C3                      	retn
 15845                                  ;ENDIF
 15846                                  
 15847                                  
 15848                                  ;**	It's a local create.  We have a local CDS for it.
 15849                                  
 15850                                  LOCAL_CREATE:
 15851                                  	; MSDOS 6.0
 15852                                  	;CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 15853                                  	;JC	short setdone	;AN000;EO.
 15854                                  	
 15855                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15856 00003730 26834D0202              	OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 15857                                  ;setdone:
 15858 00003735 E834E9                  	call	EcritDisk
 15859 00003738 E8F518                  	call	MakeNode
 15860 0000373B 730E                    	JNC	short Create_ok
 15861 0000373D C606[070A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 15862 00003742 E82FE9                  	call	LcritDisk
 15863                                  
 15864                                  	;entry	SET_MKND_ERR
 15865                                  SET_MKND_ERR:
 15866                                  
 15867                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 15868                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 15869                                  
 15870                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 15871 00003745 BB[FD12]                	MOV     BX,CRTERRTAB
 15872 00003748 D7                      	XLAT
 15873                                  	;XLAT	byte [CS:BX]
 15874                                  CreatBadRet:
 15875 00003749 F9                      	STC
 15876 0000374A C3                      	retn
 15877                                  
 15878                                  ; We have just created a new file. This results in the truncation of old
 15879                                  ; files. We must inform the sharer to slash all the open SFT's for this
 15880                                  ; file to the current size.
 15881                                  
 15882                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 15883                                  ; drive number to force a Build BPB after Media Check.
 15884                                  
 15885                                  ;;; FASTOPEN 8/29/86
 15886                                  Create_ok:
 15887 0000374B E8B1FC                  	call	FastOpen_Delete
 15888                                  ;;; FASTOPEN 8/29/86
 15889 0000374E A0[0805]                	mov	al,[SATTRIB]
 15890 00003751 A808                    	test	al,attr_volume_id
 15891 00003753 7417                    	jz	short NoVolLabel
 15892 00003755 C43E[3A05]              	LES	DI,[THISCDS]
 15893                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 15894 00003759 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 15895 0000375C 80EC41                  	sub	ah,'A'                  ; convert to drive letter
 15896 0000375F 8826[070A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 15897                                  	
 15898                                  	; MSDOS 6.0
 15899                                  	;MOV	BH,1			;AN000;>32mb set volume id to boot record
 15900                                  	;CALL	Set_Media_ID		;AN000;>32mb
 15901                                  	
 15902 00003763 E806E9                  	call	EcritDisk
 15903 00003766 E85624                  	call	FATREAD_CDS		; force a media check
 15904 00003769 E808E9                  	call	LcritDisk
 15905                                  
 15906                                  NoVolLabel:
 15907 0000376C B80200                  	MOV	ax,2
 15908 0000376F C43E[3605]              	LES	DI,[THISSFT]
 15909                                  ;if installed
 15910                                  	;call	JShare + 14 * 4
 15911 00003773 FF1E[9400]              	call	far [JShare+(14*4)] ; 14 = ShSU
 15912                                  ;else
 15913                                  ;	Call	ShSU
 15914                                  ;endif
 15915 00003777 E8FAE8                  	call	LcritDisk
 15916 0000377A E9D800                  	jmp	SET_SFT_MODE
 15917                                  
 15918                                  ;---------------------------------------------------------------------------
 15919                                  ; Procedure Name : Dos_Create_New
 15920                                  ;
 15921                                  ; Inputs:
 15922                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15923                                  ;		terminated)
 15924                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15925                                  ;		( = -1 if current dir not involved, else
 15926                                  ;		 Points to first char after last "/" of current dir part)
 15927                                  ;	[THISCDS] Points to CDS being used
 15928                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15929                                  ;	[THISSFT] Points to SFT to fill in if file created
 15930                                  ;		(sf_mode field set so that FCB may be detected)
 15931                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15932                                  ;	AX is Attribute to create
 15933                                  ; Function:
 15934                                  ;	Try to create the specified file truncating an old one that exists
 15935                                  ; Outputs:
 15936                                  ;	sf_ref_count is NOT altered
 15937                                  ;	CARRY CLEAR
 15938                                  ;	    THISSFT filled in.
 15939                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 15940                                  ;	CARRY SET
 15941                                  ;	    AX is error code
 15942                                  ;		error_path_not_found
 15943                                  ;			Bad path (not in curr dir part if present)
 15944                                  ;		error_bad_curr_dir
 15945                                  ;			Bad path in current directory part of path
 15946                                  ;		error_access_denied
 15947                                  ;			Create a second volume id or create a dir
 15948                                  ;		error_file_exists
 15949                                  ;			Already a file by this name
 15950                                  ; DS preserved, others destroyed
 15951                                  ;---------------------------------------------------------------------------
 15952                                  
 15953                                  DOS_Create_New:
 15954 0000377D B401                    	MOV	AH,1		; Truncate is NOT OK
 15955 0000377F E96CFF                  	JMP	Create_inter
 15956                                  
 15957                                  ; MSDOS 6.0
 15958                                  ;---------------------------------------------------------------------------
 15959                                  ; Procedure Name : Set_Media_ID
 15960                                  ;
 15961                                  ; Inputs:
 15962                                  ;	NAME1= Volume ID
 15963                                  ;	BH= 0, delete volume id
 15964                                  ;	    1, set new volume id
 15965                                  ;	DS= DOSGROUP
 15966                                  ; Function:
 15967                                  ;	Set Volume ID to DOS 4.00 Boot record.
 15968                                  ; Outputs:
 15969                                  ;	CARRY CLEAR
 15970                                  ;	    volume id set
 15971                                  ;	CARRY SET
 15972                                  ;	    AX is error code
 15973                                  ;---------------------------------------------------------------------------
 15974                                  ;
 15975                                  ;procedure   Set_Media_ID,NEAR
 15976                                  ;	DOSAssume   <DS>,"SetMedID"
 15977                                  ;
 15978                                  ;	PUSH	AX		;AN000;;>32mb
 15979                                  ;	PUSH	ES		;AN000;;>32mb
 15980                                  ;	PUSH	DI		;AN000;;>32mb
 15981                                  ;
 15982                                  ;	INC	AH		;AN000;;>32mb  bl=drive #
 15983                                  ;	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 15984                                  ;	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 15985                                  ;	MOV	CX,0866H	;AN001;;>32mb  get media id
 15986                                  ;
 15987                                  ;hkn; PACKET_TEMP is in DOSDATA
 15988                                  ;	MOV	DX,OFFSET DOSDATA:PACKET_TEMP	;AN000;>32mb
 15989                                  ;
 15990                                  ;	PUSH	BX		;AN000;;>32mb
 15991                                  ;	PUSH	DX		;AN000;;>32mb
 15992                                  ;	XOR	BH,BH		;AN000;;>32mb
 15993                                  ;
 15994                                  ;	invoke	$IOCTL		;AN000;;>32mb
 15995                                  ;	POP	DX		;AN000;;>32mb
 15996                                  ;	POP	BX		;AN000;;>32mb
 15997                                  ;	JC	geterr		;AN000;;>32mb
 15998                                  ;
 15999                                  ;	OR	BH,BH		;AN000;;>32mb delete volume id
 16000                                  ;	JZ	NoName		;AN000;>32mb yes
 16001                                  ;
 16002                                  ;hkn; NAME1 is in DOSDATA
 16003                                  ;	MOV	SI,OFFSET DOSDATA:NAME1   ;AN000;>32mb
 16004                                  ;
 16005                                  ;	JMP	SHORT doset	;AN000;>32mb yes
 16006                                  ;Noname: 			;AN000;
 16007                                  ;
 16008                                  ;hkn; NO_NAME_ID is in DOSDATA
 16009                                  ;	MOV	SI,OFFSET DOSDATA:NO_NAME_ID  ;AN000;>32mb
 16010                                  ;
 16011                                  ;doset:					       ;AN000;
 16012                                  ;	MOV	DI,DX		;AN000;;>32mb
 16013                                  ;	ADD	DI,MEDIA_LABEL	;AN000;;>32mb
 16014                                  ;
 16015                                  ;hkn; ES & DS must point to SS
 16016                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 16017                                  ;	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 16018                                  ;
 16019                                  ;	POP	DS		;AN000;;>32mb
 16020                                  ;
 16021                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 16022                                  ;	PUSH	SS		;AN000;;>32mb
 16023                                  ;
 16024                                  ;	POP	ES		;AN000;;>32mb
 16025                                  ;	MOV	CX,11		;AN000;;>32mb
 16026                                  ;	REP	MOVSB		;AN000;;>32mb
 16027                                  ;	MOV	CX,0846H	;AN001;;>32mb
 16028                                  ;	MOV	AL,0DH		;AN000;;>32mb
 16029                                  ;	XOR	BH,BH		;AN000;;>32mb
 16030                                  ;	invoke	$IOCTL		;AN000;;>32mb  set volume id
 16031                                  ;geterr: 			;AN000;
 16032                                  ;
 16033                                  ;hkn;	PUSH	CS		;AN000;>32mb
 16034                                  ;	PUSH	SS		;AN000;>32mb
 16035                                  ;
 16036                                  ;	POP	DS		;AN000;>32mb   ds= dosgroup
 16037                                  ;
 16038                                  ;	POP	DI		;AN000;;>32mb
 16039                                  ;	POP	ES		;AN000;;>32mb
 16040                                  ;	POP	AX		;AN000;;>32mb
 16041                                  ;	return			;AN000;>32mb
 16042                                  ;
 16043                                  ;EndProc Set_Media_ID		;AN000;
 16044                                  
 16045                                  ; MSDOS 6.0
 16046                                  ;---------------------------------------------------------------------------
 16047                                  ; Procedure Name : Set_EXT_mode
 16048                                  ;
 16049                                  ; Inputs:
 16050                                  ;	[EXTOPEN_ON]= flag for extended open
 16051                                  ;	SAVE_BX= mode specified in Extended Open
 16052                                  ; Function:
 16053                                  ;	Set mode in ThisSFT
 16054                                  ; Outputs:
 16055                                  ;	carry set,mode is set if from Extended Open
 16056                                  ;	carry clear, mode not set yet
 16057                                  ;---------------------------------------------------------------------------
 16058                                  ;
 16059                                  ;procedure   Set_EXT_mode,NEAR
 16060                                  ;
 16061                                  ;hkn; SS override
 16062                                  ;	TEST	[EXTOPEN_ON],ext_open_on    ;AN000;EO. from extended open
 16063                                  ;	JZ	NOTEX			    ;AN000;EO. no, do normal
 16064                                  ;	PUSH	AX			    ;AN000;EO.
 16065                                  ;
 16066                                  ;hkn; SS override
 16067                                  ;	MOV	AX,[SAVE_BX]		    ;AN000;EO.
 16068                                  ;	OR	ES:[DI.sf_mode],AX	    ;AN000;EO.
 16069                                  ;	POP	AX			    ;AN000;EO.
 16070                                  ;	STC				    ;AN000;EO.
 16071                                  ;NOTEX:					    ;AN000;
 16072                                  ;	return				    ;AN000;EO.
 16073                                  ;
 16074                                  ;EndProc Set_EXT_mode			    ;AN000;
 16075                                  
 16076                                  ;============================================================================
 16077                                  ; OPEN.ASM, MSDOS 6.0, 1991
 16078                                  ;============================================================================
 16079                                  ; 08/08/2018 - Retro DOS v3.0
 16080                                  
 16081                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 16082                                  ;	NAME	DOS_OPEN
 16083                                  
 16084                                  ;**	OPEN.ASM - File Open
 16085                                  ;----------------------------------------------------------------------------
 16086                                  ;	Low level routines for openning a file from a file spec.
 16087                                  ;	Also misc routines for sharing errors
 16088                                  ;
 16089                                  ;	DOS_Open
 16090                                  ;	Check_Access_AX
 16091                                  ;	SHARE_ERROR
 16092                                  ;	SET_SFT_MODE
 16093                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 16094                                  ;
 16095                                  ;	Revision history:
 16096                                  ;
 16097                                  ;	    Created: ARR 30 March 1983
 16098                                  ;	    A000	version 4.00   Jan. 1988
 16099                                  ;
 16100                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 16101                                  ; 	       remote extended opens and not save_cx.
 16102                                  ;
 16103                                  ;	M035 - if open made from exec then we must set the appropriate bits
 16104                                  ;	       on the stack before calling off to the redir.
 16105                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 16106                                  ;	       to handle open from exec. In this case set the appropriate bit
 16107                                  ;	       else do not.
 16108                                  ;----------------------------------------------------------------------------	
 16109                                  
 16110                                  ;Installed = TRUE
 16111                                  
 16112                                  ;	i_need	NoSetDir,BYTE
 16113                                  ;	i_need	THISSFT,DWORD
 16114                                  ;	i_need	THISCDS,DWORD
 16115                                  ;	i_need	CURBUF,DWORD
 16116                                  ;	i_need	CurrentPDB,WORD
 16117                                  ;	i_need	CURR_DIR_END,WORD
 16118                                  ;	I_need	RetryCount,WORD
 16119                                  ;	I_need	Open_Access,BYTE
 16120                                  ;	I_need	fSharing,BYTE
 16121                                  ;	i_need	JShare,DWORD
 16122                                  ;	I_need	FastOpenFlg,byte
 16123                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 16124                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 16125                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 16126                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 16127                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 16128                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 16129                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 16130                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 16131                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 16132                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 16133                                  ;	I_need	SAVE_BX,WORD			  ;M034
 16134                                  ;
 16135                                  ;	I_need	DOS_FLAG,BYTE
 16136                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 16137                                  
 16138                                  ;Break	<DOS_Open - internal file access>
 16139                                  ;---------------------------------------------------------------------------
 16140                                  ; Procedure Name : DOS_Open
 16141                                  ;
 16142                                  ; Inputs:
 16143                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16144                                  ;		terminated)
 16145                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16146                                  ;		( = -1 if current dir not involved, else
 16147                                  ;		 Points to first char after last "/" of current dir part)
 16148                                  ;	[THISCDS] Points to CDS being used
 16149                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16150                                  ;	[THISSFT] Points to SFT to fill in if file found
 16151                                  ;		(sf_mode field set so that FCB may be detected)
 16152                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16153                                  ;	AX is Access and Sharing mode
 16154                                  ;	  High NIBBLE of AL (Sharing Mode)
 16155                                  ;		sharing_compat	   file is opened in compatibility mode
 16156                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 16157                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 16158                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 16159                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 16160                                  ;	  Low NIBBLE of AL (Access Mode)
 16161                                  ;		open_for_read	file is opened for reading
 16162                                  ;		open_for_write	file is opened for writing
 16163                                  ;		open_for_both	file is opened for both reading and writing.
 16164                                  ;
 16165                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 16166                                  ;		(not checked)
 16167                                  ; Function:
 16168                                  ;	Try to open the specified file
 16169                                  ; Outputs:
 16170                                  ;	sf_ref_count is NOT altered
 16171                                  ;	CARRY CLEAR
 16172                                  ;	    THISSFT filled in.
 16173                                  ;	CARRY SET
 16174                                  ;	    AX is error code
 16175                                  ;		error_file_not_found
 16176                                  ;			Last element of path not found
 16177                                  ;		error_path_not_found
 16178                                  ;			Bad path (not in curr dir part if present)
 16179                                  ;		error_bad_curr_dir
 16180                                  ;			Bad path in current directory part of path
 16181                                  ;		error_invalid_access
 16182                                  ;			Bad sharing mode or bad access mode or bad combination
 16183                                  ;		error_access_denied
 16184                                  ;			Attempt to open read only file for writting, or
 16185                                  ;			open a directory
 16186                                  ;		error_sharing_violation
 16187                                  ;			The sharing mode was correct but not allowed
 16188                                  ;			generates an INT 24 on compatibility mode SFTs
 16189                                  ; DS preserved, others destroyed
 16190                                  ;----------------------------------------------------------------------------
 16191                                  
 16192                                  DOS_OPEN:
 16193                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 16194                                  
 16195 00003782 C606[F802]00            	MOV	byte [NoSetDir],0
 16196 00003787 E80001                  	CALL	Check_Access_AX
 16197 0000378A 721C                    	JC	short do_ret_label		    ; retc
 16198                                  
 16199 0000378C C43E[3605]              	LES	DI,[THISSFT]
 16200 00003790 30E4                    	XOR	AH,AH
 16201                                  
 16202                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 16203                                  
 16204 00003792 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 16205 00003796 06                      	PUSH	ES
 16206 00003797 C436[3A05]              	LES	SI,[THISCDS]
 16207                                  	; 18/08/2018
 16208 0000379B 83FEFF                  	CMP	SI,-1
 16209 0000379E 7509                    	JNZ	short TEST_RE_NET1
 16210 000037A0 07                      	POP	ES
 16211                                  
 16212                                  	; MSDOS 6.0
 16213                                  ;Extended open hooks
 16214                                  	;TEST	byte [EXTOPEN_ON],ext_open_on	;FT. from extnded open		;AN000;
 16215                                  	;JZ	short NOEXTOP 		    ;FT. no, do normal			;AN000;
 16216                                  IFS_extopen:									;AN000;
 16217                                  	;MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 16218                                  	;				    ; with which call was made. This
 16219                                  	;				    ; has the open access bits. 
 16220                                  	;;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 16221                                  	;
 16222                                  	;PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 16223                                  	;;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 16224                                  	;mov	ax,(MultNET*256)+46 
 16225                                  	;INT	2FH			    ;FT.				;AN000;
 16226                                  	;POP	BX			    ;FT. trash bx			;AN000;
 16227                                  	;MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 16228                                  
 16229                                  ;do_ret_label:
 16230                                  	;retn				    ;FT.				;AN000;
 16231                                  ;NOEXTOP:
 16232                                  ;Extended open hooks
 16233                                  	;
 16234                                  ;IF NOT Installed
 16235                                  	;transfer NET_SEQ_OPEN
 16236                                  ;ELSE
 16237                                  	;
 16238                                  do_net_int2f:
 16239                                  	;
 16240                                  	;test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 16241                                  	;jz	short not_exec_open	; N: just do net open
 16242                                  	;				; Y: check to see if redir is aware
 16243                                  	;				;    of this 
 16244                                  	;
 16245                                  	;				; M042 - start
 16246                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR
 16247                                  	;				; Q: does this redir know how to 
 16248                                  	;				;    this
 16249                                  	;jz	short not_exec_open	; N: just do net open
 16250                                  	;				; Y: set bit 3 of access byte and 
 16251                                  	;				;    set sharing mode to DENY_WRITE
 16252                                  	;				; M042 - end
 16253                                  	;
 16254                                  	; NOTE: This specific mode has not been set for the code assembled
 16255                                  	; under the "NOT Installed" conditional. Currently Installed is 
 16256                                  	; always one.
 16257                                  	;				; M035 - set the bits on the stack
 16258                                  	;mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 16259                                  	;
 16260                                  ;not_exec_open:
 16261                                  
 16262                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16263 000037A1 50                      	PUSH	AX
 16264                                  
 16265                                  	;MOV	AX,(MultNET SHL 8) OR 22
 16266                                  	;INT	2FH
 16267                                  
 16268 000037A2 B81611                  	mov     ax,1116h
 16269 000037A5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 16270                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 16271                                  			; SDA first filename pointer -> fully-qualified name of file to open
 16272                                  			; STACK: WORD file open mode
 16273                                  			; Return: CF set on error
 16274                                  
 16275 000037A7 5B                      	POP	BX			; clean stack
 16276                                  do_ret_label: ; 09/08/2018
 16277 000037A8 C3                      	retn
 16278                                  ;ENDIF
 16279                                  
 16280                                  TEST_RE_NET1:
 16281 000037A9 26F744430080            	TEST	word [ES:SI+curdir.flags],curdir_isnet
 16282                                  	; 18/08/2018
 16283 000037AF 07                      	POP	ES
 16284                                  	;JZ	short LOCAL_OPEN
 16285                                  
 16286 000037B0 75EF                    	jnz	short do_net_int2f ; (*)
 16287                                  
 16288                                  ;Extended open hooks
 16289                                  	; MSDOS 6.0
 16290                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;FT. from extended open	;AN000;
 16291                                  	;JNZ	short IFS_extopen	      ;FT. isuue extended open	;AN000;
 16292                                  ;Extended open hooks
 16293                                  
 16294                                  ;IF NOT Installed
 16295                                  ;	transfer NET_OPEN
 16296                                  ;ELSE
 16297                                  	;jmp	short do_net_int2f (*)
 16298                                  ;ENDIF
 16299                                  
 16300                                  LOCAL_OPEN:
 16301                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16302 000037B2 E8B7E8                  	call	EcritDisk
 16303                                  
 16304                                  ; DOS 3.3 FastOPen 6/16/86
 16305                                  
 16306 000037B5 800E[6E0F]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 16307                                  
 16308 000037BA E87C10                  	call	GETPATH
 16309                                  
 16310                                  ; DOS 3.3 FastOPen 6/16/86
 16311                                  
 16312 000037BD 731E                    	JNC	short Open_found
 16313 000037BF 7512                    	JNZ	short bad_path2
 16314 000037C1 08C9                    	OR	CL,CL
 16315 000037C3 740E                    	JZ	short bad_path2
 16316                                  
 16317                                  OpenFNF:
 16318 000037C5 B80200                  	MOV	AX,error_file_not_found
 16319                                  
 16320                                  OpenBadRet:
 16321                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 16322                                  	; 12/08/2018
 16323                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 16324                                  	; MSDOS 6.0
 16325 000037C8 368026[6E0F]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 16326 000037CE F9                      	STC
 16327 000037CF E8A2E8                  	call	LcritDisk
 16328                                  	;JMP	Clear_FastOpen ; 10/08/2018
 16329 000037D2 C3                      	retn 	; 08/09/2018
 16330                                  
 16331                                  bad_path2:
 16332 000037D3 B80300                  	MOV	AX,error_path_not_found
 16333 000037D6 EBF0                    	JMP	short OpenBadRet
 16334                                  
 16335                                  Open_Bad_Access:
 16336 000037D8 B80500                  	MOV	AX,error_access_denied
 16337 000037DB EBEB                    	JMP	short OpenBadRet
 16338                                  
 16339                                  Open_found:
 16340 000037DD 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 16341 000037DF 08E4                    	OR	AH,AH
 16342 000037E1 783F                    	JS	short open_ok		; Devices don't have attributes
 16343 000037E3 8E06[7605]              	MOV	ES,[CURBUF+2]		; get buffer location
 16344 000037E7 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 16345 000037EB A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 16346 000037ED 75E9                    	JNZ	short Open_Bad_Access
 16347 000037EF A801                    	TEST	AL,attr_read_only	; check write on read only
 16348 000037F1 742F                    	JZ	short open_ok
 16349                                  ;
 16350                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 16351                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 16352                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 16353                                  ; processing until the actual write operation:
 16354                                  ;
 16355                                  ; If FCB, then we change the mode to be read_only.
 16356                                  ; If net_FCB, then we change the mode to be read_only.
 16357                                  ; If not open for read then error.
 16358                                  ;
 16359 000037F3 1E                      	push	ds
 16360 000037F4 56                      	push	si
 16361 000037F5 C536[3605]              	LDS	SI,[THISSFT]
 16362 000037F9 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 16363 000037FC F7C10080                	TEST	CX,sf_isFCB		; is it FCB?
 16364 00003800 750A                    	JNZ	short ResetAccess	; yes, reset the access
 16365 00003802 88CA                    	MOV	DL,CL
 16366 00003804 80E2F0                  	AND	DL,SHARING_MASK
 16367 00003807 80FA70                  	CMP	DL,SHARING_NET_FCB	; is it net FCB?
 16368 0000380A 7508                    	JNZ	short NormalOpen	; no
 16369                                  ResetAccess:
 16370 0000380C 83E1F0                  	AND	CX,~access_mask	;0FFF0h	; clear access
 16371                                  ;	OR	CX,open_for_read	; stick in open_for_read
 16372 0000380F 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 16373 00003812 EB0C                    	JMP	SHORT FillSFT
 16374                                  ;
 16375                                  ; The SFT is normal.  See if the requested access is open_for_read
 16376                                  ;
 16377                                  NormalOpen:
 16378 00003814 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 16379 00003817 80F900                  	CMP	CL,open_for_read	; is it open for read?
 16380 0000381A 7404                    	JZ	short FillSFT
 16381 0000381C 5E                      	pop	si
 16382 0000381D 1F                      	pop	ds
 16383 0000381E EBB8                    	JMP	short Open_Bad_Access
 16384                                  ;
 16385                                  ; All done, restore registers and fill the SFT.
 16386                                  ;
 16387                                  FillSFT:
 16388 00003820 5E                      	pop	si
 16389 00003821 1F                      	pop	ds
 16390                                  open_ok:
 16391 00003822 E89F19                  	call	DOOPEN			; Fill in SFT
 16392                                  
 16393                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 16394                                  	;12/08/2018
 16395                                  	;AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 16396 00003825 8026[6E0F]80            	and	byte [FastOpenFlg],Fast_yes	
 16397                                  
 16398                                  	; MSDOS 6.0
 16399                                  	;CALL	DO_SHARE_CHECK
 16400                                  	;JNC	short SHARE_OK
 16401                                  	;call	LcritDisk
 16402                                  	;JMP	short Clear_FastOpen	
 16403                                  
 16404                                  	; MSDOS 3.3
 16405                                  DO_SHARE_CHECK:
 16406 0000382A 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 16407                                  OpenShareRetry:
 16408 0000382E 51                      	push	cx			; Save number left to do
 16409 0000382F E8FA3A                  	call	SHARE_CHECK		; Final Check
 16410 00003832 59                      	pop	cx			; CX = # left
 16411 00003833 7312                    	JNC	short SHARE_OK		; No problem with access
 16412 00003835 E851E7                  	call	Idle
 16413 00003838 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 16414                                  OpenShareFail:
 16415 0000383A C43E[3605]              	LES	DI,[THISSFT]
 16416 0000383E E82B00                  	call	SHARE_ERROR
 16417 00003841 73E7                    	JNC	short DO_SHARE_CHECK	; User wants more retry
 16418                                  	
 16419                                  	;12/08/2018
 16420                                  	;mov	byte [ss:FastOpenFlg],0
 16421                                  	;08/09/2018
 16422                                  	;mov	byte [FastOpenFlg],0
 16423 00003843 E82EE8                  	call	LcritDisk
 16424                                  	;JMP	short Clear_FastOpen
 16425 00003846 C3                      	retn
 16426                                  
 16427                                  SHARE_OK:
 16428                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16429 00003847 B80300                  	MOV	AX,3
 16430 0000384A C43E[3605]              	LES	DI,[THISSFT]
 16431                                  ;if installed
 16432                                  	;call	JShare + 14 * 4
 16433 0000384E FF1E[9400]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 16434                                  ;else
 16435                                  ;	Call	ShSU
 16436                                  ;endif
 16437 00003852 E81FE8                  	call	LcritDisk
 16438                                  	
 16439                                  	;FallThru Set_SFT_Mode
 16440                                  
 16441                                  ;----------------------------------------------------------------------------
 16442                                  ; Procedure Name : SET_SFT_MODE
 16443                                  ;
 16444                                  ; Finish SFT initialization for new reference. Set the correct mode.
 16445                                  ;
 16446                                  ;   Inputs:
 16447                                  ;	ThisSFT points to SFT
 16448                                  ;
 16449                                  ;   Outputs:
 16450                                  ;	Carry clear
 16451                                  ;   Registers modified: AX.
 16452                                  ;---------------------------------------------------------------------------
 16453                                  
 16454                                  ;hkn; called from create. DS already set up to DOSDATA.
 16455                                  
 16456                                  SET_SFT_MODE:
 16457 00003855 C43E[3605]              	LES	DI,[THISSFT]
 16458 00003859 E81D16                  	call	DEV_OPEN_SFT
 16459 0000385C 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 16460 00003862 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 16461 00003864 A1[DE02]                	MOV	AX,[CurrentPDB]
 16462 00003867 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 16463                                  
 16464                                  Clear_FastOpen:
 16465 0000386B C3                      	retn			       ;;;;; DOS 3.3
 16466                                  
 16467                                  ;----------------------------------------------------------------------------
 16468                                  ; Procedure Name : SHARE_ERROR
 16469                                  ;
 16470                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 16471                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 16472                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 16473                                  ; really ignore).  Carry clear
 16474                                  ; if user wants a retry. ES, DI, DS preserved
 16475                                  ;---------------------------------------------------------------------------
 16476                                  
 16477                                  SHARE_ERROR:
 16478 0000386C 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 16479 00003872 750C                    	JNZ	short _HARD_ERR
 16480 00003874 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 16481 00003878 80E1F0                  	AND	CL,SHARING_MASK
 16482 0000387B 80F900                  	CMP	CL,SHARING_COMPAT
 16483 0000387E 7505                    	JNE	short _NO_HARD_ERR
 16484                                  _HARD_ERR:
 16485 00003880 E8AF3A                  	call	SHARE_VIOLATION
 16486                                  	;retnc				; User wants retry
 16487 00003883 73E6                    	jnc	short Clear_FastOpen
 16488                                  _NO_HARD_ERR:
 16489 00003885 B82000                  	MOV	AX,error_sharing_violation
 16490 00003888 F9                      	STC
 16491 00003889 C3                      	retn
 16492                                  
 16493                                  ; MSDOS 6.0
 16494                                  ;----------------------------------------------------------------------------
 16495                                  ; Procedure Name : DO_SHARE_CHECK
 16496                                  ;
 16497                                  ; Input: THISDPB, WFP_Start, THISSFT set
 16498                                  ; Functions: check file sharing mode is valid
 16499                                  ; Output: carry set, error
 16500                                  ;	  carry clear, share ok
 16501                                  ;----------------------------------------------------------------------------
 16502                                  ;
 16503                                  ;DO_SHARE_CHECK:
 16504                                  ;	call	EcritDisk		; enter critical section
 16505                                  ;OPN_RETRY:
 16506                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 16507                                  ;OpenShareRetry:
 16508                                  ;	push	cx			; Save number left to do
 16509                                  ;	call	SHARE_CHECK		; Final Check
 16510                                  ;	pop	cx			; CX = # left
 16511                                  ;	JNC	short Share_Ok2		; No problem with access
 16512                                  ;	call	Idle
 16513                                  ;	LOOP	OpenShareRetry		; One more retry used up
 16514                                  ;OpenShareFail:
 16515                                  ;	LES	DI,[THISSFT]
 16516                                  ;	call	SHARE_ERROR
 16517                                  ;	JNC	short OPN_RETRY		; User wants more retry
 16518                                  ;Share_Ok2:
 16519                                  ;	call	LcritDisk		; leave critical section
 16520                                  ;	retn
 16521                                  
 16522                                  ;-----------------------------------------------------------------------------
 16523                                  ; Procedure Name : Check_Access
 16524                                  ;
 16525                                  ; Inputs:
 16526                                  ;	AX is mode
 16527                                  ;	  High NIBBLE of AL (Sharing Mode)
 16528                                  ;		sharing_compat	   file is opened in compatibility mode
 16529                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 16530                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 16531                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 16532                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 16533                                  ;	  Low NIBBLE of AL (Access Mode)
 16534                                  ;		open_for_read	file is opened for reading
 16535                                  ;		open_for_write	file is opened for writing
 16536                                  ;		open_for_both	file is opened for both reading and writing.
 16537                                  ; Function:
 16538                                  ;	Check this access mode for correctness
 16539                                  ; Outputs:
 16540                                  ;	[open_access] = AL input
 16541                                  ;	Carry Clear
 16542                                  ;		Mode is correct
 16543                                  ;		AX unchanged
 16544                                  ;	Carry Set
 16545                                  ;		Mode is bad
 16546                                  ;		AX = error_invalid_access
 16547                                  ; No other registers effected
 16548                                  ;----------------------------------------------------------------------------
 16549                                  
 16550                                  Check_Access_AX:
 16551                                  
 16552 0000388A A2[0905]                	MOV	[OPEN_ACCESS],AL
 16553 0000388D 53                      	PUSH	BX
 16554                                  
 16555                                  ;	If sharing, then test for special sharing mode for FCBs
 16556                                  
 16557 0000388E 88C3                    	MOV	BL,AL
 16558 00003890 80E3F0                  	AND	BL,SHARING_MASK
 16559 00003893 803E[0D05]FF            	CMP	byte [FSHARING],-1
 16560 00003898 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 16561 0000389A 80FB70                  	CMP	BL,SHARING_NET_FCB
 16562 0000389D 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 16563                                  CheckShareMode:
 16564 0000389F 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 16565 000038A2 770D                    	JA	short Make_Bad_Access
 16566                                  CheckAccessMode:
 16567 000038A4 88C3                    	MOV	BL,AL
 16568 000038A6 80E30F                  	AND	BL,access_mask
 16569 000038A9 80FB02                  	CMP	BL,2
 16570 000038AC 7703                    	JA	short Make_Bad_Access
 16571 000038AE 5B                      	POP	BX
 16572 000038AF F8                      	CLC
 16573 000038B0 C3                      	retn
 16574                                  
 16575                                  Make_Bad_Access:
 16576 000038B1 B80C00                  	MOV	AX,error_invalid_access
 16577 000038B4 5B                      	POP	BX
 16578 000038B5 F9                      	STC
 16579 000038B6 C3                      	retn
 16580                                  
 16581                                  ;============================================================================
 16582                                  ; DINFO.ASM, MSDOS 6.0, 1991
 16583                                  ;============================================================================
 16584                                  ; 08/08/2018 - Retro DOS v3.0
 16585                                  
 16586                                  ;**	Low level routine for returning disk drive information from a local
 16587                                  ;	  or NET device
 16588                                  ;
 16589                                  ;	DISK_INFO
 16590                                  ;
 16591                                  ;	  Modification history:
 16592                                  ;
 16593                                  ;		Created: ARR 30 March 1983
 16594                                  
 16595                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 16596                                  ;---------------------------------------------------------------------------
 16597                                  ; Procedure Name : DISK_INFO
 16598                                  ;
 16599                                  ; Inputs:
 16600                                  ;	[THISCDS] Points to the Macro List Structure of interest
 16601                                  ;		(It MAY NOT be NUL, error not detected)
 16602                                  ; Function:
 16603                                  ;	Get Interesting Drive Information
 16604                                  ; Returns:
 16605                                  ;	DX = Number of free allocation units
 16606                                  ;	BX = Total Number of allocation units on disk
 16607                                  ;	CX = Sector size
 16608                                  ;	AL = Sectors per allocation unit
 16609                                  ;	AH = FAT ID BYTE
 16610                                  ;	Carry set if error (currently user FAILed to I 24)
 16611                                  ; Segs except ES preserved, others destroyed
 16612                                  ;----------------------------------------------------------------------------
 16613                                  
 16614                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 16615                                  ;hkn; DOSDATA. 
 16616                                  
 16617                                  DISK_INFO:
 16618                                  	; 08/08/2018 - Retro DOS v3.0
 16619                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 16620                                  
 16621 000038B7 E814E7                  	call	TestNet
 16622 000038BA 7306                    	JNC	short LOCAL_DSK_INFO
 16623                                  
 16624                                  ;IF NOT Installed
 16625                                  ;	transfer NET_DISK_INFO
 16626                                  ;ELSE
 16627                                  	;MOV	AX,(MultNET SHL 8) OR 12
 16628                                  	;INT	2FH
 16629                                  	;return
 16630                                  
 16631 000038BC B80C11                  	mov     ax,110Ch
 16632 000038BF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 16633                                  			; ES:DI -> current directory
 16634                                  			; Return: AL = sectors per cluster, BX = total clusters
 16635                                  			; CX = bytes per sector, DX = number of available clusters
 16636 000038C1 C3                      	retn
 16637                                  ;ENDIF
 16638                                  
 16639                                  LOCAL_DSK_INFO:
 16640 000038C2 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 16641 000038C7 E8A2E7                  	call	EcritDisk
 16642 000038CA E8F222                  	call	FATREAD_CDS		; perform media check.
 16643 000038CD 7241                    	JC	short CRIT_LEAVE
 16644 000038CF BB0200                  	MOV	BX,2
 16645 000038D2 E87C21                  	call	UNPACK			; Get first FAT sector into CURBUF
 16646 000038D5 7239                    	JC	short CRIT_LEAVE
 16647 000038D7 C536[7405]              	LDS	SI,[CURBUF]
 16648 000038DB 8A6410                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 16649                                  
 16650                                  ;hkn; SS is DOSDATA
 16651 000038DE 16                      	push	ss
 16652 000038DF 1F                      	pop	ds
 16653 000038E0 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 16654                                  ;
 16655                                  ; Examine the current free count.  If it indicates that we have an invalid
 16656                                  ; count, do the expensive calculation.
 16657                                  ;
 16658 000038E4 268B561E                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 16659 000038E8 83FAFF                  	CMP	DX,-1			; is it valid?
 16660 000038EB 7404                    	JZ	short DoScan
 16661                                  ;
 16662                                  ; Check to see if it is in a reasonalbe range.	If so, trust it and return.
 16663                                  ; Otherwise, we need to blast out an internal error message and then recompute
 16664                                  ; the count.
 16665                                  ;
 16666 000038ED 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 16667 000038EF 7223                    	JB	short GotVal		; yes, trust it.
 16668                                  DoScan:
 16669 000038F1 31D2                    	XOR	DX,DX
 16670 000038F3 49                      	DEC	CX
 16671                                  SCANFREE:
 16672 000038F4 E85A21                  	call	UNPACK
 16673 000038F7 7217                    	JC	short CRIT_LEAVE
 16674 000038F9 7501                    	JNZ	short NOTFREECLUS
 16675 000038FB 42                      	INC	DX			; A free one
 16676                                  NOTFREECLUS:
 16677 000038FC 43                      	INC	BX			; Next cluster
 16678 000038FD E2F5                    	LOOP	SCANFREE
 16679 000038FF 4B                      	DEC	BX			; BX was next cluster.	Convert to
 16680                                  ReturnVals:
 16681 00003900 4B                      	DEC	BX			; count
 16682 00003901 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK] 
 16683 00003905 FEC0                    	INC	AL			; Sectors/cluster
 16684 00003907 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 16685 0000390B 2689561E                	MOV	[ES:BP+DPB.FREE_CNT],DX
 16686 0000390F F8                      	CLC
 16687                                  CRIT_LEAVE:
 16688 00003910 E861E7                  	call	LcritDisk
 16689 00003913 C3                      	retn
 16690                                  ;
 16691                                  ; We have correctly computed everything previously. Load up registers for
 16692                                  ; return.
 16693                                  ;
 16694                                  GotVal: 
 16695 00003914 89CB                    	MOV	BX,CX			; get cluster count
 16696 00003916 EBE8                    	JMP	short ReturnVals
 16697                                  
 16698                                  ;============================================================================
 16699                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 16700                                  ;============================================================================
 16701                                  ; 22/07/2018 - Retro DOS v3.0
 16702                                  
 16703                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 16704                                  ;	NAME	DOS_SEARCH
 16705                                  
 16706                                  ;**	Low level routines for doing local and NET directory searches
 16707                                  ;
 16708                                  ;	DOS_SEARCH_FIRST
 16709                                  ;	DOS_SEARCH_NEXT
 16710                                  ;	RENAME_NEXT
 16711                                  ;
 16712                                  ;	Revision history:
 16713                                  ;
 16714                                  ;	    Created: ARR 30 March 1983
 16715                                  ;	    A000	version 4.00  Jan. 1988
 16716                                  ;	    A001	PTM 3564 -- search for fastopen
 16717                                  
 16718                                  ;Installed = TRUE
 16719                                  
 16720                                  ;--------------------------------------------------------------------------
 16721                                  ;
 16722                                  ; Procedure Name : DOS_SEARCH_FIRST
 16723                                  ;
 16724                                  ; Inputs:
 16725                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16726                                  ;		terminated)
 16727                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16728                                  ;		( = -1 if current dir not involved, else
 16729                                  ;		 Points to first char after last "/" of current dir part)
 16730                                  ;	[THISCDS] Points to CDS being used
 16731                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16732                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16733                                  ;	[DMAADD] Points to 53 byte buffer
 16734                                  ; Function:
 16735                                  ;	Initiate a search for the given file spec
 16736                                  ; Outputs:
 16737                                  ;	CARRY CLEAR
 16738                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 16739                                  ;
 16740                                  ;	LOCAL
 16741                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 16742                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 16743                                  ;	    11 byte search name with Meta chars in it
 16744                                  ;	    Search Attribute Byte, attribute of search
 16745                                  ;	    WORD LastEnt value
 16746                                  ;	    WORD DirStart
 16747                                  ;	    4 byte pad
 16748                                  ;	    32 bytes of the directory entry found
 16749                                  ;	NET
 16750                                  ;	    21 bytes First byte has high bit set
 16751                                  ;	    32 bytes of the directory entry found
 16752                                  ;
 16753                                  ;	CARRY SET
 16754                                  ;	    AX = error code
 16755                                  ;		error_no_more_files
 16756                                  ;			No match for this file
 16757                                  ;		error_path_not_found
 16758                                  ;			Bad path (not in curr dir part if present)
 16759                                  ;		error_bad_curr_dir
 16760                                  ;			Bad path in current directory part of path
 16761                                  ; DS preserved, others destroyed
 16762                                  ;---------------------------------------------------------------------------
 16763                                  
 16764                                  DOS_SEARCH_FIRST:
 16765                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 16766                                  
 16767 00003918 C43E[3A05]              	LES	DI,[THISCDS]
 16768 0000391C 83FFFF                  	CMP	DI,-1
 16769 0000391F 7506                    	JNZ	short TEST_RE_NET2
 16770                                  
 16771                                  ;IF NOT Installed
 16772                                  ;	transfer NET_SEQ_SEARCH_FIRST
 16773                                  ;ELSE
 16774                                  	;mov	ax,1119h
 16775 00003921 B81911                  	MOV	AX,(MultNET<<8)|25
 16776 00003924 CD2F                    	INT	2Fh
 16777 00003926 C3                      	retn
 16778                                  ;ENDIF
 16779                                  
 16780                                  TEST_RE_NET2:
 16781                                  	;test	word [es:di+43h],8000h
 16782 00003927 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 16783 0000392D 7406                    	JZ	short LOCAL_SEARCH_FIRST
 16784                                  
 16785                                  ;IF NOT Installed
 16786                                  ;	transfer NET_SEARCH_FIRST
 16787                                  ;ELSE
 16788                                  	;mov	ax,111Bh
 16789 0000392F B81B11                  	MOV	AX,(MultNET<<8)|27
 16790 00003932 CD2F                    	INT	2FH
 16791 00003934 C3                      	retn
 16792                                  ;ENDIF
 16793                                  
 16794                                  LOCAL_SEARCH_FIRST:
 16795 00003935 E834E7                  	call	EcritDisk
 16796                                  	; MSDOS 6.0
 16797                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 16798                                  	;JZ	short NOFN			;AN000;
 16799                                  	;OR	byte [FastOpenflg],Fastopen_Set	;AN000;
 16800                                  ;NOFN:						;AN000;
 16801 00003938 C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16802                                  	; MSDOS 6.0
 16803                                  	;CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 16804                                  	;JNC	short norm_GETPATH	;AN000;;FO. no
 16805                                  	;AND	byte [FastOpenflg],Fast_yes ;AN000;;FO. reset fastopen
 16806                                  ;norm_GETPATH:
 16807 0000393D E8F90E                  	call	GETPATH
 16808                                  	; BX = offset NAME1
 16809                                  ;_getdone:
 16810 00003940 7313                    	JNC	short find_check_dev
 16811 00003942 750C                    	JNZ	short bad_path3
 16812 00003944 08C9                    	OR	CL,CL
 16813 00003946 7408                    	JZ	short bad_path3
 16814                                  find_no_more:
 16815                                  	;mov	ax,12h
 16816 00003948 B81200                  	MOV	AX,error_no_more_files
 16817                                  BadBye:
 16818                                  	; MSDOS 6.0
 16819                                  	;AND	[SS:FastOpenflg],Fast_yes  ;AN000;;FO. reset fastopen
 16820                                  
 16821 0000394B F9                      	STC
 16822 0000394C E825E7                  	call	LcritDisk
 16823 0000394F C3                      	retn
 16824                                  
 16825                                  bad_path3:
 16826                                  	;mov	ax,3
 16827 00003950 B80300                  	MOV	AX,error_path_not_found
 16828 00003953 EBF6                    	JMP	short BadBye
 16829                                  
 16830                                  find_check_dev:
 16831 00003955 08E4                    	OR	AH,AH
 16832 00003957 790A                    	JNS	short found_entry
 16833 00003959 C706[F402]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 16834 0000395F FE06[0B05]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 16835                                  found_entry:
 16836                                  ;
 16837                                  ; We set the physical drive byte here Instead of after found_it; Doing
 16838                                  ; a search-next may not have wfp_start set correctly
 16839                                  ;
 16840 00003963 C43E[DA02]              	LES	DI,[DMAADD]
 16841 00003967 8B36[4A05]              	MOV	SI,[WFP_START]		; get pointer to beginning
 16842 0000396B AC                      	LODSB
 16843 0000396C 2C40                    	SUB	AL,'A'-1                ; logical drive
 16844 0000396E AA                      	STOSB				; High bit not set (local)
 16845                                  found_it:
 16846 0000396F C43E[DA02]              	LES	DI,[DMAADD]
 16847 00003973 47                      	INC	DI
 16848                                  
 16849                                  	; MSDOS 6.0
 16850                                  	;PUSH	DS				  ;FO.;AN001; save ds
 16851                                  	;TEST	byte [Fastopenflg],Set_For_Search ;FO.;AN001; from fastopen
 16852                                  	;JZ	short notfast 			  ;FO.;AN001;
 16853                                  	;MOV	SI,BX				  ;FO.;AN001;
 16854                                  	;MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 16855                                  	;JMP	SHORT movmov			  ;FO.;AN001;
 16856                                  
 16857                                  notfast:
 16858 00003974 BE[E604]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 16859                                  movmov:
 16860                                  ; Special E5 code
 16861 00003977 A4                      	MOVSB
 16862 00003978 26807DFF05              	CMP	BYTE [ES:DI-1],5
 16863 0000397D 7505                    	JNZ	short NOTKANJB
 16864 0000397F 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 16865                                  NOTKANJB:
 16866 00003984 B90A00                  	MOV	CX,10
 16867 00003987 F3A4                    	REP	MOVSB
 16868                                  
 16869                                  	; 08/09/2018
 16870                                  	;POP	DS			;FO.;AN001; restore ds
 16871                                  
 16872 00003989 A0[0605]                	MOV	AL,[ATTRIB]
 16873 0000398C AA                      	STOSB
 16874 0000398D 50                      	PUSH	AX			; Save AH device info
 16875 0000398E A1[F402]                	MOV	AX,[LASTENT]
 16876 00003991 AB                      	STOSW
 16877 00003992 A1[5805]                	MOV	AX,[DIRSTART]
 16878 00003995 AB                      	STOSW
 16879                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 16880 00003996 83C704                  	ADD	DI,4
 16881 00003999 58                      	POP	AX			; Recover AH device info
 16882 0000399A 08E4                    	OR	AH,AH
 16883 0000399C 7813                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 16884 0000399E 833E[7405]FF            	CMP	WORD [CURBUF],-1
 16885 000039A3 7508                    	JNZ	short OKSTORE
 16886                                  
 16887                                  	; MSDOS 6.0
 16888                                  	;TEST	byte [FastOPenFlg],Set_For_Search
 16889                                  					;AN000;;FO. from fastopen and is good
 16890                                  	;JNZ	short OKSTORE		;AN000;;FO.
 16891                                  
 16892                                  	; The user has specified the root directory itself, rather than some
 16893                                  	; contents of it. We can't "find" that.
 16894 000039A5 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 16895                                  					;   stuffing a -1 at Lastent
 16896 000039AB EB9B                    	JMP	short find_no_more
 16897                                  
 16898                                  OKSTORE:
 16899 000039AD 8E1E[7605]              	MOV	DS,[CURBUF+2]
 16900                                  DOSREL:
 16901                                  	; BX = offset NAME1 (from GETPATH)
 16902 000039B1 89DE                    	MOV	SI,BX			; SI-> start of entry
 16903                                  
 16904                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 16905                                  
 16906                                  	;mov	cx,32
 16907 000039B3 B92000                  	MOV	CX,dir_entry.size
 16908                                  ;;;;; 7/29/86
 16909 000039B6 89F8                    	MOV	AX,DI			; save the 1st byte addr
 16910 000039B8 F3A4                    	REP	MOVSB
 16911 000039BA 89C7                    	MOV	DI,AX			; restore 1st byte addr
 16912 000039BC 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 16913 000039C0 7504                    	JNZ	short NO05
 16914 000039C2 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 16915                                  NO05:
 16916                                  
 16917                                  ;;;;; 7/29/86
 16918                                  
 16919                                  ;hkn; FastOpenflg is in DOSDATA use SS
 16920                                  	; MSDOS 6.0
 16921                                  	;AND	byte [SS:FastOpenflg],Fast_yes ;AN000;;FO. reset fastopen
 16922                                  	;push	ss
 16923                                  	;pop	ds
 16924                                  	;AND	byte [FastOpenflg],Fast_yes
 16925                                  
 16926                                  ;hkn; SS is DOSDATA
 16927 000039C6 16                      	push	ss
 16928 000039C7 1F                      	pop	ds
 16929 000039C8 F8                      	CLC
 16930 000039C9 E8A8E6                  	call	LcritDisk
 16931 000039CC C3                      	retn
 16932                                  
 16933                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 16934                                  ;----------------------------------------------------------------------------
 16935                                  ;
 16936                                  ; Procedure Name : DOS_SEARCH_NEXT
 16937                                  ;
 16938                                  ; Inputs:
 16939                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 16940                                  ;	    (only first 21 bytes must have valid information)
 16941                                  ; Function:
 16942                                  ;	Look for subsequent matches
 16943                                  ; Outputs:
 16944                                  ;	CARRY CLEAR
 16945                                  ;	    The 53 bytes at DMAADD are updated for next call
 16946                                  ;		(see DOS_SEARCH_FIRST)
 16947                                  ;	CARRY SET
 16948                                  ;	    AX = error code
 16949                                  ;		error_no_more_files
 16950                                  ;			No more files to find
 16951                                  ; DS preserved, others destroyed
 16952                                  ;---------------------------------------------------------------------------
 16953                                  
 16954                                  ;hkn; called from search.asm. DS already set up at this point.
 16955                                  
 16956                                  DOS_SEARCH_NEXT:
 16957 000039CD C43E[DA02]              	LES	DI,[DMAADD]
 16958 000039D1 268A05                  	MOV	AL,[ES:DI]
 16959 000039D4 A880                    	TEST	AL,80H			; Test for NET
 16960 000039D6 7406                    	JZ	short LOCAL_SEARCH_NEXT
 16961                                  ;IF NOT Installed
 16962                                  ;	transfer NET_SEARCH_NEXT
 16963                                  ;ELSE
 16964                                  	;mov	ax,111Ch
 16965 000039D8 B81C11                  	MOV	AX,(MultNET<<8)|28
 16966 000039DB CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 16967                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 16968                                  		     ; Return: CF set on error, AX = DOS error code
 16969                                  		     ; CF clear if successful
 16970 000039DD C3                      	retn
 16971                                  ;ENDIF
 16972                                  
 16973                                  LOCAL_SEARCH_NEXT:
 16974                                  	;AL is drive A=1
 16975                                  	;mov	byte [EXTERR_LOCUS],2
 16976 000039DE C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 16977 000039E3 E886E6                  	call	EcritDisk
 16978                                  
 16979                                  ;hkn; DummyCDS is in DOSDATA
 16980 000039E6 C706[3A05][9504]        	MOV     word [THISCDS],DUMMYCDS
 16981                                  ;hkn; Segment address is DOSDATA - use ds
 16982                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 16983 000039EC 8C1E[3C05]              	mov	[THISCDS+2],DS
 16984                                  
 16985 000039F0 0440                    	ADD	AL,'A'-1
 16986 000039F2 E8C62E                  	call	InitCDS
 16987                                  
 16988                                  ;	call	GETTHISDRV		; Set CDS pointer
 16989                                  
 16990 000039F5 7236                    	JC	short No_files		; Bogus drive letter
 16991 000039F7 C43E[3A05]              	LES	DI,[THISCDS]		; Get CDS pointer
 16992                                  	;les	bp,[es:di+45h]
 16993 000039FB 26C46D45                	LES	BP,[ES:DI+curdir.devptr]; Get DPB pointer
 16994 000039FF E8F2DC                  	call	GOTDPB			; [THISDPB] = ES:BP
 16995                                  
 16996 00003A02 268A4600                	mov	al,[ES:BP]
 16997                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 16998 00003A06 A2[1105]                	mov	[THISDRV],AL
 16999                                  	;mov	word [CREATING], 0E500h
 17000 00003A09 C706[1805]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 17001 00003A0F C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17002 00003A14 C536[DA02]              	LDS	SI,[DMAADD]
 17003 00003A18 AC                      	LODSB				; Drive Byte
 17004                                  
 17005                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 17006                                  RENAME_NEXT:
 17007                                  	;context ES
 17008 00003A19 16                      	push	ss
 17009 00003A1A 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 17010                                  
 17011                                  ;hkn; NAME1 is in DOSDATA
 17012 00003A1B BF[E604]                	MOV	DI,NAME1
 17013                                  
 17014 00003A1E B90B00                  	MOV	CX,11
 17015 00003A21 F3A4                    	REP	MOVSB			; Search name
 17016 00003A23 AC                      	LODSB				; Attribute
 17017                                  
 17018                                  ;hkn; SS override
 17019 00003A24 36A2[0605]              	MOV	[SS:ATTRIB],AL
 17020 00003A28 AD                      	LODSW				; LastEnt
 17021 00003A29 09C0                    	OR	AX,AX
 17022 00003A2B 7903                    	JNS	short cont_load
 17023                                  No_files:
 17024 00003A2D E918FF                  	JMP	find_no_more
 17025                                  
 17026                                  cont_load:
 17027 00003A30 50                      	PUSH	AX			; Save LastEnt
 17028 00003A31 AD                      	LODSW				; DirStart
 17029 00003A32 89C3                    	MOV	BX,AX
 17030                                  
 17031                                  ;hkn; SS is DOSDATA
 17032                                  	;context DS
 17033 00003A34 16                      	push	ss
 17034 00003A35 1F                      	pop	ds
 17035 00003A36 C42E[2405]              	LES	BP,[THISDPB]		; Recover ES:BP
 17036                                  	;invoke	SetDirSrch
 17037 00003A3A E8A70D                  	call	SETDIRSRCH
 17038 00003A3D 7303                    	JNC	short SEARCH_GOON
 17039 00003A3F 58                      	POP	AX			; Clean stack
 17040 00003A40 EBEB                    	JMP	short No_files
 17041                                  
 17042                                  SEARCH_GOON:
 17043 00003A42 E87E10                  	call	STARTSRCH
 17044 00003A45 58                      	POP	AX
 17045 00003A46 E86D0D                  	call	GETENT
 17046 00003A49 72E2                    	JC	short No_files
 17047 00003A4B E8AC0C                  	call	NEXTENT
 17048 00003A4E 72DD                    	JC	short No_files
 17049 00003A50 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 17050 00003A52 E91AFF                  	JMP	found_it ; 10/08/2018
 17051                                  
 17052                                  ; MSDOS6.0
 17053                                  ;---------------------------------------------------------------------------
 17054                                  ;
 17055                                  ; Procedure Name : CHECK_QUESTION
 17056                                  ;
 17057                                  ; Input: [WFP_START]= pointer to final path
 17058                                  ; Function: check '?' char
 17059                                  ; Output: carry clear, if no '?'
 17060                                  ;	 carry set, if '?' exists
 17061                                  ;---------------------------------------------------------------------------
 17062                                  
 17063                                  ;CHECK_QUESTION:
 17064                                  ;;hkn;	wfp_start is in DOSDATA;hkn;	MOV     WORD PTR ThisCDS+2,CS
 17065                                  ;;hkn;	PUSH	CS			;AN000;;FO.
 17066                                  ;	push	ss
 17067                                  ;
 17068                                  ;	POP	DS			;AN000;;FO. ds:si -> final path
 17069                                  ;	MOV	SI,[WFP_START]		;AN000;;FO.
 17070                                  ;getnext:				;AN000;
 17071                                  ;	LODSB				;AN000;;FO. get char
 17072                                  ;	OR	AL,AL			;AN000;;FO. is it null
 17073                                  ;	JZ	short NO_Question	;AN000;;FO. yes
 17074                                  ;	CMP	AL,'?'                  ;AN000;;FO. is '?'
 17075                                  ;	JNZ	short getnext 		;AN000;;FO. no
 17076                                  ;	STC				;AN000;;FO.
 17077                                  ;NO_Question:				;AN000;
 17078                                  ;	retn				;AN000;;FO.
 17079                                  
 17080                                  ;============================================================================
 17081                                  ; ABORT.ASM, MSDOS 6.0, 1991
 17082                                  ;============================================================================
 17083                                  ; 23/07/2018 - Retro DOS v3.0
 17084                                  
 17085                                  ;**
 17086                                  ;
 17087                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 17088                                  ;  If process has NET resources a close all is sent out over the net.
 17089                                  ;
 17090                                  ;   DOS_ABORT
 17091                                  ;
 17092                                  ;   Modification history:
 17093                                  ;
 17094                                  ;       Created: ARR 30 March 1983
 17095                                  ;
 17096                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 17097                                  ;				being terminated only if it is busy.
 17098                                  ;
 17099                                  
 17100                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 17101                                  ;--------------------------------------------------------------------------
 17102                                  ;
 17103                                  ; Procedure Name : DOS_ABORT
 17104                                  ;
 17105                                  ; Inputs:
 17106                                  ;       [CurrentPDB] set to PID of process aborting
 17107                                  ; Function:
 17108                                  ;       Close all files and free all SFTs for this PID
 17109                                  ; Returns:
 17110                                  ;       None
 17111                                  ; All destroyed except stack
 17112                                  ;---------------------------------------------------------------------------
 17113                                  
 17114                                  DOS_ABORT:
 17115 00003A55 368E06[DE02]            	MOV     ES,[SS:CurrentPDB]	; SS override
 17116 00003A5A 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 17117                                  reset_free_jfn:
 17118 00003A5F 89CB                    	MOV     BX,CX
 17119 00003A61 51                      	PUSH    CX
 17120 00003A62 4B                      	DEC     BX                      ; get jfn (start with last one)
 17121                                  
 17122 00003A63 E86133                  	CALL	_$CLOSE
 17123 00003A66 59                      	POP     CX
 17124 00003A67 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 17125                                  ;
 17126                                  ; Note:  We do need to explicitly close FCBs. Reasons are as follows: If we
 17127                                  ; are running in the no-sharing no-network environment, we are simulating the
 17128                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 17129                                  ; BUT...  the cache remains in a state with garbage that may be reused by the
 17130                                  ; next process.  We scan the set and blast the ref counts of the FCBs we own.
 17131                                  ;
 17132                                  ; If sharing is loaded, then the following call to close process will
 17133                                  ; correctly close all FCBs.  We will then need to walk the list AFTER here.
 17134                                  ;
 17135                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 17136                                  ; known network resources.  These resources are then responsible for cleaning
 17137                                  ; up after this process.
 17138                                  ;
 17139                                  ; Sleazy, eh?
 17140                                  ;
 17141                                  	;context DS			; SS is DOSDATA
 17142 00003A69 16                      	push	ss
 17143 00003A6A 1F                      	pop	ds  ; 09/09/2018
 17144                                  
 17145                                  	;CallInstall Net_Abort, MultNET, 29
 17146 00003A6B B81D11                  	mov	ax, 111Dh
 17147 00003A6E CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 17148                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 17149                                  			; DS???, SS = DOS CS
 17150                                  ;if installed
 17151 00003A70 FF1E[6C00]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 17152                                  ;else
 17153                                  ;	call 	mftCloseP
 17154                                  ;endif
 17155                                  
 17156                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 17157                                  ; counts.
 17158                                  					; SS override
 17159 00003A74 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 17160                                  	;mov	cx,[es:di+4]
 17161 00003A79 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 17162 00003A7D E317                    	jcxz    FCBScanDone
 17163                                  	;lea	di,[di+6]
 17164 00003A7F 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 17165 00003A82 36A1[E802]              	mov     ax,[SS:PROC_ID]		; SS override
 17166                                  FCBTest:
 17167                                  	;cmp	[es:di+31h],ax
 17168 00003A86 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 17169 00003A8A 7505                    	jnz	short FCBNext		; no, skip it
 17170 00003A8C 26C7050000              	mov	word [es:di],0
 17171                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 17172                                  FCBNext:
 17173 00003A91 83C735                  	add     di,SF_ENTRY.size
 17174 00003A94 E2F0                    	loop    FCBTest
 17175                                  FCBScanDone:
 17176                                  
 17177                                  ;
 17178                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 17179                                  ;
 17180 00003A96 31DB                    	XOR     BX,BX
 17181                                  Scan:
 17182 00003A98 53                      	push    bx
 17183 00003A99 E87A2D                  	call	SFFromSFN
 17184 00003A9C 5B                      	pop     bx
 17185 00003A9D 7301                    	jnc     short Scan1
 17186 00003A9F C3                      	retn
 17187                                  
 17188                                  ;M038
 17189                                  ; Do what the comment above says, check for busy state
 17190                                  ;
 17191                                  Scan1:
 17192                                  	;cmp	word [es:di],0
 17193                                  	;jz	short scan_next  ; MSDOS 3.3
 17194                                  	; MSDOS6.0
 17195 00003AA0 26833DFF                	cmp	word [es:di],sf_busy ; -1
 17196                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 17197                                  				; Is Sft busy? ;M038
 17198 00003AA4 7519                    	jnz	short scan_next
 17199                                  ;
 17200                                  ; we have a SFT that is busy. See if it is for the current process
 17201                                  ;
 17202 00003AA6 36A1[E802]              	mov     ax,[SS:PROC_ID]		; SS override
 17203                                  	;cmp	[es:di+31h],ax
 17204 00003AAA 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 17205 00003AAE 750F                    	jnz	short scan_next
 17206 00003AB0 36A1[EA02]              	mov     ax,[SS:USER_ID]		; SS override
 17207                                  	;cmp	[es:di+2Fh],ax
 17208 00003AB4 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 17209 00003AB8 7505                    	jnz	short scan_next
 17210                                  ;
 17211                                  ; This SFT is labelled as ours.
 17212                                  ;
 17213 00003ABA 26C7050000              	mov	word [es:di],0
 17214                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 17215                                  scan_next:
 17216 00003ABF 43                      	inc     bx
 17217 00003AC0 EBD6                    	jmp     short Scan
 17218                                  
 17219                                  
 17220                                  ;============================================================================
 17221                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 17222                                  ;============================================================================
 17223                                  ; 23/07/2018 - Retro DOS v3.0
 17224                                  
 17225                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 17226                                  ;
 17227                                  ;	DOS_CLOSE
 17228                                  ;	DOS_COMMIT
 17229                                  ;	FREE_SFT
 17230                                  ;	SetSFTTimes
 17231                                  ;
 17232                                  ;	Revision history:
 17233                                  ;
 17234                                  ;	   AN000  version 4.00	Jan. 1988
 17235                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 17236                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 17237                                  
 17238                                  ;Installed = TRUE
 17239                                  
 17240                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 17241                                  ;---------------------------------------------------------------------------
 17242                                  ;
 17243                                  ; Procedure Name : DOS_CLOSE
 17244                                  ;
 17245                                  ; Inputs:
 17246                                  ;	[THISSFT] set to the SFT for the file being used
 17247                                  ; Function:
 17248                                  ;	Close the indicated file via the SFT
 17249                                  ; Returns:
 17250                                  ;	sf_ref_count decremented otherwise
 17251                                  ;	ES:DI point to SFT
 17252                                  ;	Carry set if error
 17253                                  ;	    AX has error code
 17254                                  ; DS preserved, others destroyed
 17255                                  ;---------------------------------------------------------------------------
 17256                                  
 17257                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 17258                                  
 17259                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 17260                                  
 17261                                  DOS_CLOSE:
 17262 00003AC2 C43E[3605]              	LES	DI,[THISSFT]
 17263                                  	;mov	bx,[ES:DI+5]
 17264 00003AC6 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 17265                                  
 17266                                  ;	Network closes are handled entirely by the net code.
 17267                                  
 17268                                  	;test	bx,8000h
 17269 00003ACA F7C30080                	TEST	BX,sf_isnet
 17270 00003ACE 7406                    	JZ	short LocalClose
 17271                                  
 17272                                  	;CallInstall Net_Close,MultNET,6
 17273 00003AD0 B80611                  	mov     ax, 1106h
 17274 00003AD3 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 17275                                  			; ES:DI -> SFT
 17276                                  			; SFT DPB field -> DPB of drive containing file
 17277                                  			; Return: CF set on error, AX = DOS error code
 17278                                  			; CF clear if successful
 17279 00003AD5 C3                      	retn
 17280                                  
 17281                                  ;
 17282                                  ; All closes release the sharing information.
 17283                                  ; No commit releases sharing information
 17284                                  ;
 17285                                  ; All closes decrement the ref count.
 17286                                  ; No commit decrements the ref count.
 17287                                  ;
 17288                                  LocalClose:
 17289 00003AD6 E893E5                  	call	EcritDisk
 17290 00003AD9 E80E01                  	CALL	SetSFTTimes
 17291 00003ADC E89D00                  	CALL	FREE_SFT		; dec ref count or mark as busy
 17292                                  
 17293                                  ;hkn; SS is DOSDATA
 17294                                  	;Context DS
 17295 00003ADF 16                      	push	ss
 17296 00003AE0 1F                      	pop	ds
 17297                                  
 17298 00003AE1 50                      	push	ax
 17299 00003AE2 53                      	push	bx
 17300 00003AE3 E87238                  	call	ShareEnd
 17301 00003AE6 5B                      	pop	bx
 17302 00003AE7 58                      	pop	ax
 17303                                  ;
 17304                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 17305                                  ;
 17306                                  CloseEntry:
 17307 00003AE8 50                      	PUSH	AX
 17308                                  ;
 17309                                  ; File clean or device does not get stamped nor disk looked at.
 17310                                  ;
 17311                                  	;test	bx,0C0h
 17312 00003AE9 F7C3C000                	TEST	BX,devid_file_clean+devid_device
 17313                                  	;JZ	short rdir
 17314                                  	;JMP	FREE_SFT_OK		; either clean or device
 17315 00003AED 757A                    	jnz	short FREE_SFT_OK
 17316                                  ;
 17317                                  ; Retrieve the directory entry for the file
 17318                                  ;
 17319                                  rdir:
 17320 00003AEF E89700                  	CALL	DirFromSFT
 17321                                  	;mov	al,5
 17322 00003AF2 B005                    	MOV	AL,error_access_denied
 17323                                  	;JNC	short clook
 17324                                  	;JMP	CloseFinish		; pretend the close worked.
 17325 00003AF4 7274                    	jc	short CloseFinish
 17326                                  clook:
 17327                                  ;
 17328                                  ; ES:DI points to entry
 17329                                  ; DS:SI points to SFT
 17330                                  ; ES:BX points to buffer header
 17331                                  ;
 17332 00003AF6 57                      	push	di
 17333 00003AF7 56                      	push	si
 17334                                  	;lea	si,[si+20h] ; MSDOS 3.3
 17335 00003AF8 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 17336                                  ;
 17337                                  ; ES:DI point to directory entry
 17338                                  ; DS:SI point to unpacked name
 17339                                  ;
 17340 00003AFB E884E4                  	call	XCHGP
 17341                                  ;
 17342                                  ; ES:DI point to unpacked name
 17343                                  ; DS:SI point to directory entry
 17344                                  ;
 17345 00003AFE E8570C                  	call	MetaCompare
 17346 00003B01 E87EE4                  	call	XCHGP
 17347 00003B04 5E                      	pop	si
 17348 00003B05 5F                      	pop	di
 17349 00003B06 740B                    	JZ	short CLOSE_GO		; Name OK
 17350                                  Bye:	
 17351 00003B08 89F7                    	MOV	DI,SI
 17352 00003B0A 1E                      	PUSH	DS
 17353 00003B0B 07                      	POP	ES			; ES:DI points to SFT
 17354 00003B0C 16                      	PUSH	SS
 17355 00003B0D 1F                      	POP	DS
 17356 00003B0E F9                      	STC
 17357                                  	;mov	al,2
 17358 00003B0F B002                    	MOV	AL,error_file_not_found
 17359 00003B11 EB57                    	JMP	short CloseFinish
 17360                                  
 17361                                  CLOSE_GO:
 17362                                  	; MSDOS 6.0
 17363                                  	;TEST	[SI+SF_ENTRY.sf_mode],sf_isFCB	; FCB ?
 17364                                  	;JZ	short nofcb		; no, set dir attr, sf_attr
 17365                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17366                                  	;mov	ch,[es:di+0Bh]
 17367 00003B13 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 17368                                  	;mov	al,[si+4]
 17369 00003B17 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 17370                                  
 17371                                  ;hkn; SS override
 17372 00003B1A 36A2[0605]              	MOV	[SS:ATTRIB],AL
 17373                                  	; MSDOS 3.3
 17374 00003B1E E8B60F                  	call	MatchAttributes
 17375 00003B21 75E5                    	JNZ	short Bye		; attributes do not match
 17376                                  	;JMP	SHORT setattr		;FT.
 17377                                  	; MSDOS 6.0
 17378                                  ;nofcb:
 17379                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 17380                                  	;MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 17381                                  setattr:
 17382                                  	; MSDOS 3.3 (& MSDOS6.0)
 17383                                  	;or	byte [es:di+0Bh],20h
 17384 00003B23 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 17385                                  	; MSDOS6.0
 17386                                  	;MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 17387                                  					;F.O. save old first cluster
 17388                                  ;hkn; SS override
 17389                                  	;MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 17390                                  
 17391                                  	;mov	ax,[si+0Bh]
 17392 00003B28 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 17393                                  	;mov	[es:di+1Ah],ax
 17394 00003B2B 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 17395                                  	;mov	ax,[si+11h]
 17396 00003B2F 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 17397                                  	;mov	[es:di+1Ch],ax
 17398 00003B32 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 17399                                  	;mov	ax,[si+13h]
 17400 00003B36 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 17401                                  	;mov	[es:di+1Eh],ax
 17402 00003B39 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 17403                                  	;mov	ax,[si+0Fh]
 17404 00003B3D 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 17405                                  	;mov	[es:di+18h],ax
 17406 00003B40 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 17407                                  	;mov	ax,[si+0Dh]
 17408 00003B44 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 17409                                  	;mov	[es:di+16h],ax
 17410 00003B47 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 17411                                  
 17412                                  	; MSDOS 6.0
 17413                                  ;; File Tagging
 17414                                  	;TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 17415                                  	;			  ;LB. if already dirty		    ;AN000;
 17416                                  	;JNZ	short yesdirty	  ;LB.  don't increment dirty count ;AN000;
 17417                                  	;call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 17418                                  	; MSDOS 3.3 (& MSDOS6.0)
 17419                                  	;or	byte [es:bx+5],40h
 17420 00003B4B 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 17421                                  yesdirty:
 17422 00003B50 1E                      	push	ds
 17423 00003B51 56                      	push	si
 17424                                  	; MSDOS 6.0
 17425                                  	;MOV	CX,[SI.sf_firclus]	; do this for Fastopen
 17426                                  
 17427                                  ;hkn; SS override
 17428                                  	;MOV	AL,[SS:THISDRV]
 17429                                  	; MSDOS3.3 
 17430 00003B52 16                      	push	ss
 17431 00003B53 1F                      	pop	ds
 17432 00003B54 A0[1105]                	MOV	AL,[THISDRV]
 17433                                  ;;; 10/1/86  update fastopen cache
 17434                                  	; MSDOS 3.3 (& MSDOS6.0)
 17435 00003B57 52                      	PUSH	DX
 17436 00003B58 B400                    	MOV	AH,0			; dir entry update
 17437 00003B5A 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 17438                                  	; MSDOS 6.0
 17439                                  	;OR	CX,CX			;AN005; first cluster 0; may be truncated
 17440                                  	;JNZ	short do_update2	;AN005; no, do update
 17441                                  	;MOV	AH,3			;AN005; do a delete cache entry
 17442                                  	;MOV	DI,[SI+SF_ENTRY.sf_dirsec]   ;AN005; cx:di = dir sector
 17443                                  	;MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 17444                                  	;MOV	DH,[SI+SF_ENTRY.sf_dirpos]   ;AN005; dh= dir pos
 17445                                  	;JMP	SHORT do_update 	;AN011;F.O.
 17446                                  ;do_update2:				;AN011;F.O.
 17447                                  ;hkn; SS override fort OLD_FIRSTCLUS
 17448                                  	;CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 17449                                  	;JZ	short do_update		;AN011;F.O. yes
 17450                                  	;MOV	AH,2			;AN011;F.O. delete the old entry
 17451                                  	;MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 17452                                  do_update:				;AN005;
 17453                                  ;hkn; SS is DOSDATA
 17454                                  	;Context DS
 17455                                  	;push	ss
 17456                                  	;pop	ds	
 17457                                  	; MSDOS 3.3 (& MSDOS6.0)
 17458 00003B5C E8B4F8                  	call	FastOpen_Update 	; invoke fastopen
 17459 00003B5F 5A                      	POP	DX
 17460                                  
 17461                                  ;;; 10/1/86  update fastopen cache
 17462 00003B60 E8CE23                  	call	FLUSHBUF		; flush all relevant buffers
 17463 00003B63 5F                      	pop	di
 17464 00003B64 07                      	pop	es
 17465                                  	;mov	al,5
 17466 00003B65 B005                    	MOV	AL,error_access_denied
 17467 00003B67 7201                    	JC	short CloseFinish
 17468                                  FREE_SFT_OK:
 17469 00003B69 F8                      	CLC				; signal no error.
 17470                                  CloseFinish:
 17471                                  ;
 17472                                  ; Indicate to the device that the SFT is being closed.
 17473                                  ;
 17474                                  ;;;; 7/21/86
 17475 00003B6A 9C                      	PUSHF				; save flag from DirFromSFT
 17476 00003B6B E81213                  	call	DEV_CLOSE_SFT
 17477 00003B6E 9D                      	POPF
 17478                                  ;;;; 7/21/86
 17479                                  ;
 17480                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 17481                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 17482                                  ; going to be moving from busy to free.
 17483                                  ;
 17484 00003B6F 59                      	POP	CX			; get old ref count
 17485 00003B70 9C                      	PUSHF
 17486 00003B71 49                      	DEC	CX			; if cx != 1
 17487 00003B72 7503                    	JNZ	short NoFree		; then do NOT free SFT
 17488 00003B74 26890D                  	mov	[es:di],cx
 17489                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 17490                                  NoFree:
 17491 00003B77 E8FAE4                  	call	LcritDisk
 17492 00003B7A 9D                      	POPF
 17493 00003B7B C3                      	retn
 17494                                  
 17495                                  ;---------------------------------------------------------------------------
 17496                                  ;
 17497                                  ; Procedure Name : FREE_SFT
 17498                                  ;
 17499                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 17500                                  ; Flags preserved. Return old ref count in AX
 17501                                  ;
 17502                                  ; Note that busy is indicated by the SFT ref count being -1.
 17503                                  ;
 17504                                  ;---------------------------------------------------------------------------
 17505                                  
 17506                                  FREE_SFT:
 17507 00003B7C 9C                      	PUSHF		; Save carry state
 17508 00003B7D 268B05                  	mov	ax,[es:di]
 17509                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 17510 00003B80 48                      	DEC	AX
 17511 00003B81 7501                    	JNZ	short SetCount
 17512 00003B83 48                      	DEC	AX
 17513                                  SetCount:
 17514 00003B84 268705                  	xchg	ax,[es:di]
 17515                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 17516 00003B87 9D                      	POPF
 17517 00003B88 C3                      	retn
 17518                                  
 17519                                  ;----------------------------------------------------------------------------
 17520                                  ;
 17521                                  ; Procedure Name : DirFromSFT
 17522                                  ;
 17523                                  ;   DirFromSFT - locate a directory entry given an SFT.
 17524                                  ;
 17525                                  ;   Inputs:	ES:DI point to SFT
 17526                                  ;		DS = DOSDATA
 17527                                  ;   Outputs:
 17528                                  ;		EXTERR_LOCUS = errLOC_Disk
 17529                                  ;		CurBuf points to buffer
 17530                                  ;		Carry Clear -> operation OK
 17531                                  ;		    ES:DI point to entry
 17532                                  ;		    ES:BX point to buffer
 17533                                  ;		    DS:SI point to SFT
 17534                                  ;		Carry SET   -> operation failed
 17535                                  ;		    registers trashified
 17536                                  ;   Registers modified: ALL
 17537                                  ;----------------------------------------------------------------------------
 17538                                  
 17539                                  DirFromSFT:
 17540                                  	;mov	byte [EXTERR_LOCUS],2
 17541 00003B89 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 17542 00003B8E 06                      	push	es
 17543 00003B8F 57                      	push	di
 17544                                  	; MSDOS 3.3
 17545                                  	;mov	dx,[es:di+1Dh]
 17546 00003B90 268B551D                	MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 17547                                  	; MSDOS 6.0
 17548                                  	;MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 17549                                  	;MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 17550                                  	;MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 17551                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 17552                                  	; MSDOS 3.3 (& MSDOS6.0)
 17553 00003B94 52                      	PUSH	DX
 17554 00003B95 E81520                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 17555                                  					; [THISDPB] set
 17556 00003B98 5A                      	POP	DX
 17557                                  	;POP	word [HIGH_SECTOR]	;F.C. >32mb
 17558 00003B99 7225                    	JC	short PopDone
 17559 00003B9B 30C0                    	XOR	AL,AL			; Pre read
 17560                                  	;mov	byte [ALLOWED],18h
 17561 00003B9D C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17562 00003BA2 E8E422                  	call	GETBUFFR
 17563 00003BA5 7219                    	JC	short PopDone
 17564 00003BA7 5E                      	pop	si
 17565 00003BA8 1F                      	pop	ds			; Get back SFT pointer
 17566                                  
 17567                                  ;hkn; SS override
 17568 00003BA9 36C43E[7405]            	LES	DI,[SS:CURBUF]
 17569                                  	;or	byte [es:di+5],4
 17570 00003BAE 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 17571 00003BB3 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 17572                                  	;lea	di,[di+10h]
 17573 00003BB5 8D7D10                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 17574                                  	;mov	al,32
 17575 00003BB8 B020                    	MOV	AL,dir_entry.size
 17576 00003BBA F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 17577 00003BBD 01C7                    	ADD	DI,AX			; Point at the entry
 17578 00003BBF C3                      	retn				; carry is clear
 17579                                  
 17580                                  PopDone:
 17581 00003BC0 5F                      	pop	di
 17582 00003BC1 07                      	pop	es
 17583                                  PopDone_retn:
 17584 00003BC2 C3                      	retn
 17585                                  
 17586                                  ;----------------------------------------------------------------------------
 17587                                  ;
 17588                                  ;**	DOS_Commit - UPdate Directory Entries
 17589                                  ;
 17590                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 17591                                  ;		(DS) = DOSGROUP
 17592                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 17593                                  ;	USES	all but DS
 17594                                  ;
 17595                                  ;----------------------------------------------------------------------------
 17596                                  ;
 17597                                  
 17598                                  DOS_COMMIT:
 17599                                  	;hkn; called from srvcall. DS already set up.
 17600 00003BC3 C43E[3605]              	LES	DI,[THISSFT]
 17601                                  	;mov	bx,[es:di+5]
 17602 00003BC7 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 17603                                  	;test	bx,0C0h
 17604 00003BCB F7C3C000                	TEST	BX,devid_file_clean+devid_device ;Clears carry
 17605 00003BCF 75F1                    	jnz	short PopDone_retn
 17606                                  	;test	bx,8000h
 17607 00003BD1 F7C30080                	TEST	BX,sf_isnet
 17608 00003BD5 7406                    	JZ	short LOCAL_COMMIT
 17609                                  
 17610                                  ;IF NOT Installed
 17611                                  ;	transfer NET_COMMIT
 17612                                  ;ELSE
 17613                                  	;mov	ax,1107h
 17614 00003BD7 B80711                  	MOV	AX,(MultNET<<8)|7
 17615 00003BDA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 17616                                  			; ES:DI -> SFT
 17617                                  			; SFT DPB field -> DPB of drive containing file
 17618                                  			; Return: CF set on error, AX = DOS error code
 17619                                  			; CF clear if successful
 17620 00003BDC C3                      	retn
 17621                                  ;ENDIF
 17622                                  
 17623                                  ;
 17624                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 17625                                  ; There are three ways we can do this.	One is to enter a critical section to
 17626                                  ; protect a potential free.  The second is to increment the ref count to mask
 17627                                  ; the close decrementing.
 17628                                  ;
 17629                                  ; The proper way is to let the caller's of close decide if a decrement should
 17630                                  ; be done.  We do this by providing another entry into close after the
 17631                                  ; decrement and after the share information release.
 17632                                  ;
 17633                                  LOCAL_COMMIT:
 17634 00003BDD E88CE4                  	call	EcritDisk
 17635                                  	; MSDOS6.0
 17636                                  	;call	EcritDisk	;PTM.
 17637 00003BE0 E80700                  	call	SetSFTTimes
 17638 00003BE3 B8FFFF                  	MOV	AX,-1
 17639 00003BE6 E8FFFE                  	call	CloseEntry
 17640                                  	; MSDOS 6.0
 17641                                  	;PUSHF			;PTM.				;AN000;
 17642                                  	;call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 17643                                  	;POPF			;PTM.				;AN000;
 17644                                  	;call	LcritDisk	;PTM.				;AN000;
 17645                                  localcommit_retn:
 17646 00003BE9 C3                      	retn
 17647                                  
 17648                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 17649                                  ;----------------------------------------------------------------------------
 17650                                  ;
 17651                                  ; Procedure Name : SetSFTTimes
 17652                                  ;
 17653                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 17654                                  ;   Reflect these times in other SFT's for the same file.
 17655                                  ;
 17656                                  ;   Inputs:	ES:DI point to SFT
 17657                                  ;		BX = sf_flags set apprpriately
 17658                                  ;   Outputs:	Set sft times to current time iff File & dirty & !nodate
 17659                                  ;   Registers modified: All except ES:DI, BX, AX
 17660                                  ;
 17661                                  ;----------------------------------------------------------------------------
 17662                                  
 17663                                  SetSFTTimes:
 17664                                  ;	File clean or device does not get stamped nor disk looked at.
 17665                                  	
 17666                                  	;test	bx,0C0h
 17667 00003BEA F7C3C000                	TEST	BX,devid_file_clean+devid_device
 17668                                  	;retnz				; clean or device => no timestamp
 17669 00003BEE 75F9                    	jnz	short localcommit_retn
 17670                                  
 17671                                  ;	file and dirty. See if date is good
 17672                                  
 17673                                  	;test	bx,4000h
 17674 00003BF0 F7C30040                	TEST	BX,sf_close_nodate
 17675                                  	;retnz				; nodate => no timestamp
 17676 00003BF4 75F3                    	jnz	short localcommit_retn
 17677                                  
 17678 00003BF6 50                      	push	ax
 17679 00003BF7 53                      	push	bx
 17680 00003BF8 E8BEDC                  	call	DATE16			; Date/Time to AX/DX
 17681                                  	;mov	[es:di+0Fh],ax
 17682 00003BFB 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 17683                                  	;mov	[es:di+0Dh],dx
 17684 00003BFF 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 17685 00003C03 31C0                    	XOR	AX,AX
 17686                                  ;if installed
 17687                                  	;call	JShare + 14 * 4
 17688 00003C05 FF1E[9400]              	call	far [JShare+(14*4)]	; 14 = ShSU
 17689                                  ;else
 17690                                  ;	call	ShSU
 17691                                  ;endif
 17692 00003C09 5B                      	pop	bx
 17693 00003C0A 58                      	pop	ax
 17694 00003C0B C3                      	retn
 17695                                  
 17696                                  ;============================================================================
 17697                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 17698                                  ;============================================================================
 17699                                  ; 23/07/2018 - Retro DOS v3.0
 17700                                  
 17701                                  ;TITLE DIRCALL - Directory manipulation internal calls
 17702                                  ;NAME  DIRCALL
 17703                                  
 17704                                  ;**	Low level directory manipulation routines for making removing and
 17705                                  ;	  verifying local or NET directories
 17706                                  ;
 17707                                  ;	DOS_MKDIR
 17708                                  ;	DOS_CHDIR
 17709                                  ;	DOS_RMDIR
 17710                                  ;
 17711                                  ;	Modification history:
 17712                                  ;
 17713                                  ;		Created: ARR 30 March 1983
 17714                                  
 17715                                  ;BREAK <DOS_MkDir - Make a directory entry>
 17716                                  ;---------------------------------------------------------------------------
 17717                                  ;
 17718                                  ; Procedure Name : DOS_MkDir
 17719                                  ;
 17720                                  ; Inputs:
 17721                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17722                                  ;		terminated)
 17723                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17724                                  ;		( = -1 if current dir not involved, else
 17725                                  ;		 Points to first char after last "/" of current dir part)
 17726                                  ;	[THISCDS] Points to CDS being used
 17727                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17728                                  ; Function:
 17729                                  ;	Make a new directory
 17730                                  ; Returns:
 17731                                  ;	Carry Clear
 17732                                  ;		No error
 17733                                  ;	Carry Set
 17734                                  ;	    AX is error code
 17735                                  ;		error_path_not_found
 17736                                  ;			Bad path (not in curr dir part if present)
 17737                                  ;		error_bad_curr_dir
 17738                                  ;			Bad path in current directory part of path
 17739                                  ;		error_access_denied
 17740                                  ;			Already exists, device name
 17741                                  ; DS preserved, Others destroyed
 17742                                  ;---------------------------------------------------------------------------
 17743                                  
 17744                                  ;hkn; called from path.asm. DS already set up.
 17745                                  
 17746                                  DOS_MKDIR:
 17747 00003C0C E8BFE3                  	call	TestNet
 17748 00003C0F 7314                    	JNC	short LOCAL_MKDIR
 17749                                  
 17750                                  ;IF NOT Installed
 17751                                  ;	transfer NET_MKDIR
 17752                                  ;ELSE
 17753                                  	;mov	ax,1103h
 17754 00003C11 B80311                  	MOV	AX,(MultNET<<8)|3
 17755 00003C14 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 17756                                  			; SS = DOS CS
 17757                                  			; SDA first filename pointer -> fully-qualified directory name
 17758                                  			; SDA CDS pointer -> current directory
 17759                                  			; Return: CF set on error, AX = DOS error code
 17760                                  			; CF clear if successful
 17761 00003C16 C3                      	retn
 17762                                  ;ENDIF
 17763                                  
 17764                                  NODEACCERRJ:
 17765                                  	;mov	ax,5
 17766 00003C17 B80500                  	MOV	AX,error_access_denied
 17767                                  _BadRet:
 17768 00003C1A F9                      	STC
 17769 00003C1B E856E4                  	call	LcritDisk
 17770 00003C1E C3                      	retn
 17771                                  
 17772                                  PATHNFJ:
 17773 00003C1F E852E4                  	call	LcritDisk
 17774 00003C22 E920FB                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 17775                                  
 17776                                  LOCAL_MKDIR:
 17777 00003C25 E844E4                  	call	EcritDisk
 17778                                  ;
 17779                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 17780                                  ;
 17781 00003C28 8C16[3805]              	MOV	[THISSFT+2],SS
 17782                                  
 17783                                  ;hkn; DOSDATA
 17784 00003C2C C706[3605][E003]        	MOV	WORD [THISSFT],RENBUF
 17785                                  ;
 17786                                  ;  NOTE: Need WORD PTR because MASM takes type of
 17787                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 17788                                  ;
 17789 00003C32 C706[1304]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 17790                                  				; make sure SHARER won't complain.
 17791                                  	;mov	al,10h
 17792 00003C38 B010                    	MOV	AL,attr_directory
 17793 00003C3A E8F313                  	call	MakeNode
 17794 00003C3D 72E0                    	JC	short PATHNFJ
 17795 00003C3F 83F803                  	CMP	AX,3
 17796 00003C42 74D3                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 17797 00003C44 C42E[2405]              	LES	BP,[THISDPB]	; Makenode zaps this
 17798 00003C48 C53E[7405]              	LDS	DI,[CURBUF]
 17799 00003C4C 29FE                    	SUB	SI,DI
 17800 00003C4E 56                      	PUSH	SI		; Pointer to dir_first
 17801                                  	; MSDOS 6.0
 17802                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 17803                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17804                                  	;push	word [di+6]
 17805 00003C4F FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 17806 00003C52 16                      	push	ss
 17807 00003C53 1F                      	pop	ds
 17808 00003C54 FF36[5805]              	PUSH	word [DIRSTART]	; Parent for .. entry
 17809 00003C58 31C0                    	XOR	AX,AX
 17810 00003C5A A3[5805]                	MOV	[DIRSTART],AX	; Null directory
 17811 00003C5D E81413                  	call	NEWDIR
 17812 00003C60 7260                    	JC	short NODEEXISTSPOPDEL ; No room
 17813 00003C62 E8510B                  	call	GETENT		; First entry
 17814 00003C65 725B                    	JC	short NODEEXISTSPOPDEL ; Screw up
 17815 00003C67 C43E[7405]              	LES	DI,[CURBUF]
 17816                                  
 17817                                  	; MSDOS 6.0
 17818                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17819                                  	;			 ;LB. if already dirty		    ;AN000;
 17820                                  	;JNZ	short yesdirty_	 ;LB.   don't increment dirty count ;AN000;
 17821                                  	;call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 17822                                  	
 17823                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17824                                  	;or	byte [es:di+5],40h
 17825 00003C6B 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17826                                  ;yesdirty_:
 17827                                  	;add	di,16
 17828 00003C70 83C710                  	ADD	DI,BUFINSIZ	; Point at buffer
 17829 00003C73 B82E20                  	MOV	AX,202EH	; ". "
 17830 00003C76 8B16[5805]              	MOV	DX,[DIRSTART]	; Point at itself
 17831 00003C7A E88F13                  	call	SETDOTENT
 17832 00003C7D B82E2E                  	MOV	AX,2E2EH	; ".."
 17833 00003C80 5A                      	POP	DX		; Parent
 17834 00003C81 E88813                  	call	SETDOTENT
 17835 00003C84 C42E[2405]              	LES	BP,[THISDPB]
 17836                                  	;mov	byte [ALLOWED],18h
 17837 00003C88 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17838 00003C8D 5A                      	POP	DX		; Entry sector
 17839                                  	; MSDOS 6.0
 17840                                  	;POP	word [HIGH_SECTOR] ;F.C. >32mb
 17841                                  
 17842 00003C8E 30C0                    	XOR	AL,AL		; Pre read
 17843 00003C90 E8F621                  	call	GETBUFFR
 17844 00003C93 7256                    	JC	short NODEEXISTSP
 17845 00003C95 8B16[5805]              	MOV	DX,[DIRSTART]
 17846 00003C99 C53E[7405]              	LDS	DI,[CURBUF]
 17847                                  	;or	byte [di+5],4
 17848 00003C9D 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 17849 00003CA1 5E                      	POP	SI		; dir_first pointer
 17850 00003CA2 01FE                    	ADD	SI,DI
 17851 00003CA4 8914                    	MOV	[SI],DX
 17852 00003CA6 31D2                    	XOR	DX,DX
 17853 00003CA8 895402                  	MOV	[SI+2],DX	; Zero size
 17854 00003CAB 895404                  	MOV	[SI+4],DX
 17855                                  DIRUP:
 17856                                  	; MSDOS 6.0
 17857                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 17858                                  	;			 ;LB. if already dirty 		   ;AN000;
 17859                                  	;JNZ	short yesdirty2	 ;LB.  don't increment dirty count ;AN000;
 17860                                  	;call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 17861                                  	
 17862                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17863                                  	;or	byte [di+5],40h
 17864 00003CAE 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 17865                                  ;yesdirty2:
 17866 00003CB2 16                      	push	ss
 17867 00003CB3 1F                      	pop	ds
 17868 00003CB4 268A4600                	mov	al,[es:bp]
 17869                                  	; 18/05/2019
 17870                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 17871 00003CB8 E87622                  	call	FLUSHBUF
 17872                                  	;mov	ax,5
 17873 00003CBB B80500                  	MOV	AX,error_access_denied
 17874 00003CBE E8B3E3                  	call	LcritDisk
 17875 00003CC1 C3                      	retn
 17876                                  
 17877                                  NODEEXISTSPOPDEL:
 17878 00003CC2 5A                      	POP	DX		; Parent
 17879 00003CC3 5A                      	POP	DX		; Entry sector
 17880                                  	; MSDOS 6.0 
 17881                                  	;POP	word [HIGH_SECTOR] ; F.C. >32mb
 17882 00003CC4 C42E[2405]              	LES	BP,[THISDPB]
 17883                                  	;mov	byte [ALLOWED],18h
 17884 00003CC8 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17885 00003CCD 30C0                    	XOR	AL,AL		; Pre read
 17886 00003CCF E8B721                  	call	GETBUFFR
 17887 00003CD2 7217                    	JC	short NODEEXISTSP
 17888 00003CD4 C53E[7405]              	LDS	DI,[CURBUF]
 17889                                  	;or	byte [di+5],4
 17890 00003CD8 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 17891 00003CDC 5E                      	POP	SI		; dir_first pointer
 17892 00003CDD 01FE                    	ADD	SI,DI
 17893                                  	;sub	si,1Ah ; 26
 17894 00003CDF 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 17895 00003CE2 C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 17896 00003CE5 E8C6FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 17897                                  NODEEXISTS:
 17898 00003CE8 E92CFF                  	JMP	NODEACCERRJ ; 10/08/2018
 17899                                  
 17900                                  NODEEXISTSP:
 17901 00003CEB 5E                      	POP	SI		; Clean stack
 17902 00003CEC EBFA                    	JMP	short NODEEXISTS
 17903                                  
 17904                                  ;BREAK <DOS_ChDir -- Verify a directory>
 17905                                  ;----------------------------------------------------------------------------
 17906                                  ;
 17907                                  ; Procedure Name : DOS_ChDir
 17908                                  ;
 17909                                  ; Inputs:
 17910                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17911                                  ;		terminated)
 17912                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17913                                  ;		( = -1 if current dir not involved, else
 17914                                  ;		 Points to first char after last "/" of current dir part)
 17915                                  ;	[THISCDS] Points to CDS being used May not be NUL
 17916                                  ; Function:
 17917                                  ;	Validate the path for potential new current directory
 17918                                  ; Returns:
 17919                                  ;	NOTE:
 17920                                  ;	    [SATTRIB] is modified by this call
 17921                                  ;	Carry Clear
 17922                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 17923                                  ;		Caller must NOT set ID fields on a NET CDS.
 17924                                  ;	Carry Set
 17925                                  ;	    AX is error code
 17926                                  ;		error_path_not_found
 17927                                  ;			Bad path
 17928                                  ;		error_access_denied
 17929                                  ;			device or file name
 17930                                  ; DS preserved, Others destroyed
 17931                                  ;----------------------------------------------------------------------------
 17932                                  
 17933                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 17934                                  
 17935                                  DOS_CHDIR:
 17936 00003CEE E8DDE2                  	call	TestNet
 17937 00003CF1 7306                    	JNC	short LOCAL_CHDIR
 17938                                  
 17939                                  ;IF NOT Installed
 17940                                  ;	transfer NET_CHDIR
 17941                                  ;ELSE
 17942                                  	;mov	ax,1105h
 17943 00003CF3 B80511                  	MOV	AX,(MultNET<<8)|5
 17944 00003CF6 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 17945                                  			; SS = DOS CS
 17946                                  			; SDA first filename pointer -> fully-qualified directory name
 17947                                  			; SDA CDS pointer -> current directory
 17948                                  			; Return: CF set on error, AX = DOS error code
 17949                                  			; CF clear if successful
 17950 00003CF8 C3                      	retn
 17951                                  ;ENDIF
 17952                                  
 17953                                  LOCAL_CHDIR:
 17954 00003CF9 E870E3                  	call	EcritDisk
 17955                                  	; MSDOS 6.0
 17956                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 17957                                  	;JZ	short nojoin			   ;PTM.
 17958                                  	;MOV	word [ES:DI+curdir.ID],0FFFFH	   ;PTM.
 17959                                  ;nojoin:
 17960                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17961 00003CFC C606[F802]00            	MOV	byte [NoSetDir],0 ; FALSE
 17962                                  	;mov	byte [SATTRIB],16h
 17963 00003D01 C606[0805]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 17964                                  				; Dir calls can find these
 17965                                  ; DOS 3.3  6/24/86 FastOpen
 17966 00003D06 800E[6E0F]01            	OR	byte [FastOpenFlg],FastOpen_Set	   ; set fastopen flag
 17967 00003D0B E82B0B                  	call	GETPATH
 17968                                  	;PUSHF							;AN000;
 17969                                  	;AND	byte [FastOpenFlg],Fast_yes	   ; clear it all ;AC000;
 17970                                  	;POPF							;AN000;
 17971                                  ; DOS 3.3  6/24/86 FastOpen
 17972                                  
 17973                                  	; MSDOS 3.3
 17974 00003D0E C606[6E0F]00            	mov	byte [FastOpenFlg],0
 17975                                  	;mov	ax,3
 17976 00003D13 B80300                  	MOV	AX,error_path_not_found
 17977 00003D16 7207                    	JC	short ChDirDone
 17978 00003D18 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 17979 00003D1A 8B0E[5805]              	MOV	CX,[DIRSTART]		; Get cluster number
 17980 00003D1E F8                      	CLC
 17981                                  ChDirDone:
 17982 00003D1F E852E3                  	call	LcritDisk
 17983 00003D22 C3                      	retn
 17984                                  
 17985                                  ;BREAK <DOS_RmDir -- Remove a directory>
 17986                                  ;----------------------------------------------------------------------------
 17987                                  ;
 17988                                  ; Procedure Name : DOS_RmDir
 17989                                  ;
 17990                                  ; Inputs:
 17991                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17992                                  ;		terminated)
 17993                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17994                                  ;		( = -1 if current dir not involved, else
 17995                                  ;		 Points to first char after last "/" of current dir part)
 17996                                  ;	[THISCDS] Points to CDS being used
 17997                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17998                                  ; Function:
 17999                                  ;	Remove a directory
 18000                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 18001                                  ; Returns:
 18002                                  ;	NOTE:
 18003                                  ;	    [SATTRIB] is modified by this call
 18004                                  ;	Carry Clear
 18005                                  ;		No error
 18006                                  ;	Carry Set
 18007                                  ;	    AX is error code
 18008                                  ;		error_path_not_found
 18009                                  ;			Bad path (not in curr dir part if present)
 18010                                  ;		error_bad_curr_dir
 18011                                  ;			Bad path in current directory part of path
 18012                                  ;		error_access_denied
 18013                                  ;			device or file name, root directory
 18014                                  ;			Bad directory ('.' '..' messed up)
 18015                                  ; DS preserved, Others destroyed
 18016                                  ;----------------------------------------------------------------------------
 18017                                  
 18018                                  ;hkn; called from path.asm. DS already set up.
 18019                                  
 18020                                  DOS_RMDIR:
 18021 00003D23 E8A8E2                  	call	TestNet
 18022 00003D26 7306                    	JNC	short LOCAL_RMDIR
 18023                                  
 18024                                  ;IF NOT Installed
 18025                                  ;	transfer NET_RMDIR
 18026                                  ;ELSE
 18027                                  	;mov	ax,1101h
 18028 00003D28 B80111                  	MOV	AX,(MultNET<<8)|1
 18029 00003D2B CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 18030                                  			; SS = DOS CS
 18031                                  			; SDA first filename pointer -> fully-qualified directory name
 18032                                  			; SDA CDS pointer -> current directory
 18033                                  			; Return: CF set on error, AX = DOS error code
 18034                                  			; CF clear if successful
 18035 00003D2D C3                      	retn
 18036                                  ;ENDIF
 18037                                  
 18038                                  LOCAL_RMDIR:
 18039 00003D2E E83BE3                  	call	EcritDisk
 18040 00003D31 C606[F802]00            	MOV	byte [NoSetDir],0
 18041                                  	;mov	byte [SATTRIB],16h
 18042 00003D36 C606[0805]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 18043                                  					; Dir calls can find these
 18044 00003D3B E8FB0A                  	call	GETPATH
 18045 00003D3E 720C                    	JC	short NOPATH		; Path not found
 18046 00003D40 7512                    	JNZ	short NOTDIRPATH	; Path not a DIR
 18047 00003D42 8B3E[5805]              	MOV	DI,[DIRSTART]
 18048 00003D46 09FF                    	OR	DI,DI			; Root ?
 18049 00003D48 750D                    	JNZ	short rmdir_get_buf	; No
 18050 00003D4A EB08                    	JMP	SHORT NOTDIRPATH
 18051                                  
 18052                                  NOPATH:
 18053                                  	;mov	ax,3
 18054 00003D4C B80300                  	MOV	AX,error_path_not_found
 18055 00003D4F E9C8FE                  	JMP	_BadRet
 18056                                  
 18057                                  NOTDIRPATHPOP:
 18058                                  	; MSDOS 6.0
 18059                                  	;POP	AX			  ;F.C. >32mb
 18060 00003D52 58                      	POP	AX
 18061                                  NOTDIRPATHPOP2:
 18062 00003D53 58                      	POP	AX
 18063                                  NOTDIRPATH:
 18064 00003D54 E9C0FE                  	JMP	NODEACCERRJ
 18065                                  
 18066                                  rmdir_get_buf:
 18067 00003D57 C53E[7405]              	LDS	DI,[CURBUF]
 18068 00003D5B 29FB                    	SUB	BX,DI		; Compute true offset
 18069 00003D5D 53                      	PUSH	BX		; Save entry pointer
 18070                                  	
 18071                                  	; MSDOS 6.0
 18072                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 18073                                  	
 18074                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18075                                  	;push	word [di+6]
 18076 00003D5E FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 18077                                  
 18078                                  ;hkn; SS is DOSDATA
 18079                                  	;context DS
 18080 00003D61 16                      	push	ss
 18081 00003D62 1F                      	pop	ds
 18082                                  	;context ES
 18083 00003D63 16                      	push	ss
 18084 00003D64 07                      	pop	es
 18085                                  
 18086                                  ;hkn; NAME1 is in DOSDATA
 18087 00003D65 BF[E604]                	MOV	DI,NAME1
 18088 00003D68 B03F                    	MOV	AL,'?'
 18089 00003D6A B90B00                  	MOV	CX,11
 18090 00003D6D F3AA                    	REP	STOSB
 18091 00003D6F 30C0                    	XOR	AL,AL
 18092 00003D71 AA                      	STOSB				; Nul terminate it
 18093 00003D72 E84E0D                  	call	STARTSRCH		; Set search
 18094 00003D75 E83B0A                  	call	GETENTRY		; Get start of directory
 18095 00003D78 72D8                    	JC	short NOTDIRPATHPOP	; Screw up
 18096 00003D7A 8E1E[7605]              	MOV	DS,[CURBUF+2]
 18097 00003D7E 89DE                    	MOV	SI,BX
 18098 00003D80 AD                      	LODSW
 18099                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 18100 00003D81 3D2E20                  	cmp	ax,202Eh ; ". "
 18101 00003D84 75CC                    	JNZ	short NOTDIRPATHPOP	; Nope
 18102                                  	;add     si,30
 18103 00003D86 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 18104 00003D89 AD                      	LODSW
 18105                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 18106                                  	;cmp	ax, '..'
 18107 00003D8A 3D2E2E                  	cmp	ax,2E2Eh
 18108 00003D8D 75C3                    	JNZ	short NOTDIRPATHPOP	; Nope
 18109                                  
 18110                                  ;hkn; SS is DOSDATA
 18111                                  	;context DS
 18112 00003D8F 16                      	push	ss
 18113 00003D90 1F                      	pop	ds
 18114 00003D91 C706[F402]0200          	MOV	word [LASTENT],2	; Skip . and ..
 18115 00003D97 E8190A                  	call	GETENTRY		; Get next entry
 18116 00003D9A 72B6                    	JC	short NOTDIRPATHPOP	; Screw up
 18117                                  	;mov	byte [ATTRIB],16h
 18118 00003D9C C606[0605]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 18119 00003DA1 E81C09                  	call	SRCH			; Do a search
 18120 00003DA4 73AC                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 18121 00003DA6 803E[F602]00            	CMP	byte [FAILERR],0
 18122 00003DAB 75A5                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 18123 00003DAD C42E[2405]              	LES	BP,[THISDPB]
 18124 00003DB1 8B1E[5805]              	MOV	BX,[DIRSTART]
 18125 00003DB5 E83517                  	call	RELEASE 		; Release data in sub dir
 18126 00003DB8 7298                    	JC	short NOTDIRPATHPOP	; Screw up
 18127 00003DBA 5A                      	POP	DX			; Sector # of entry
 18128                                  	;POP	word [HIGH_SECTOR]	; F.C. >32mb
 18129                                  	;mov	byte [ALLOWED],18h
 18130 00003DBB C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 18131 00003DC0 30C0                    	XOR	AL,AL			; Pre read
 18132 00003DC2 E8C420                  	call	GETBUFFR		; Get sector back
 18133 00003DC5 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 18134 00003DC7 C53E[7405]              	LDS	DI,[CURBUF]
 18135                                  	;or	byte [di+5],4
 18136 00003DCB 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 18137 00003DCF 5B                      	POP	BX			; Pointer to start of entry
 18138 00003DD0 01FB                    	ADD	BX,DI			; Corrected
 18139 00003DD2 C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 18140                                  
 18141                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 18142 00003DD5 1E                      	PUSH	DS
 18143                                  
 18144                                  ;hkn; SS is DOSDATA
 18145                                  	;context DS
 18146 00003DD6 16                      	push	ss
 18147 00003DD7 1F                      	pop	ds
 18148                                  
 18149                                  	; MSDOS 6.0
 18150                                  	;call	FastOpen_Delete 	; call fastopen to delete an entry
 18151                                  
 18152                                  	; MSDOS 3.3
 18153                                  _FastOpen_Delete:
 18154 00003DD8 50                      	push	ax
 18155 00003DD9 8B36[4A05]              	mov	si,[WFP_START]
 18156 00003DDD BB[430F]                	mov	bx,FastTable
 18157                                  	;mov	al,3  ; FONC_delete
 18158 00003DE0 B003                    	mov	al,FONC_delete
 18159 00003DE2 FF5F02                  	call	far [BX+2]  ; FastTable+2
 18160 00003DE5 58                      	pop	ax
 18161                                  
 18162 00003DE6 1F                      	POP	DS
 18163                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 18164                                  
 18165 00003DE7 E9C4FE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 18166                                  
 18167                                  ;============================================================================
 18168                                  ; DISK.ASM, MSDOS 6.0, 1991
 18169                                  ;============================================================================
 18170                                  ; 23/07/2018 - Retro DOS v3.0 
 18171                                  
 18172                                  ;	TITLE	DISK - Disk utility routines
 18173                                  ;	NAME	Disk
 18174                                  
 18175                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 18176                                  ;
 18177                                  ;	SWAPCON
 18178                                  ;	SWAPBACK
 18179                                  ;	DOS_READ
 18180                                  ;	DOS_WRITE
 18181                                  ;	get_io_sft
 18182                                  ;	DirRead
 18183                                  ;	FIRSTCLUSTER
 18184                                  ;	SET_BUF_AS_DIR
 18185                                  ;	FATSecRd
 18186                                  ;	DREAD
 18187                                  ;	CHECK_WRITE_LOCK
 18188                                  ;	CHECK_READ_LOCK
 18189                                  ;
 18190                                  ;	Revision history:
 18191                                  ;
 18192                                  ;		A000   version 4.00  Jan. 1988
 18193                                  ;
 18194                                  ;----------------------------------------------------------------------------
 18195                                  ;
 18196                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 18197                                  ;		error happens, DOS retries the entire block assuming that
 18198                                  ;		zero characters were transferred. Modified the code to take
 18199                                  ;		into account the number of characters transfered before
 18200                                  ;		retrying the operation.
 18201                                  ;
 18202                                  ;----------------------------------------------------------------------------
 18203                                  ;
 18204                                  
 18205                                  ;Installed = TRUE
 18206                                  
 18207                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 18208                                  
 18209                                  ; **** Drivers for file input from devices ****
 18210                                  ;----------------------------------------------------------------------------
 18211                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 18212                                  ;   of handles 0 and 1
 18213                                  ;
 18214                                  ;   Inputs:	DS is DOSDATA
 18215                                  ;   Outputs:	CONSWAP is set to false.
 18216                                  ;   Registers modified: none
 18217                                  ;----------------------------------------------------------------------------
 18218                                  
 18219                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 18220                                  
 18221                                  SWAPBACK:
 18222 00003DEA C606[0303]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 18223 00003DEF C3                      	retn
 18224                                  
 18225                                  ;----------------------------------------------------------------------------
 18226                                  ;
 18227                                  ; Procedure Name : SWAPCON
 18228                                  ;
 18229                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 18230                                  ;
 18231                                  ;   Inputs:	ThisSFT as the sft of the desired file
 18232                                  ;		DS is DOSDATA
 18233                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 18234                                  ;   Registers modified: none
 18235                                  ;--------------------------------------------------------------------------
 18236                                  
 18237                                  SWAPCON:
 18238                                  	; MSDOS 3.3
 18239                                  	;push	es
 18240                                  	;push	di
 18241                                  	;mov	byte [CONSWAP],1
 18242                                  	;les	di,[THISSFT]
 18243                                  	;mov	word [CONSFT],di
 18244                                  	;mov	word [CONSFT+2],es
 18245                                  	;pop	di
 18246                                  	;pop	es
 18247                                  	;retn
 18248                                  
 18249                                  	; MSDOS 6.0
 18250 00003DF0 C606[0303]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 18251 00003DF5 50                      	push	ax
 18252 00003DF6 A1[3605]                	mov	ax,[THISSFT]
 18253 00003DF9 A3[7805]                	mov	[CONSFT],ax
 18254 00003DFC A1[3805]                	mov	ax,[THISSFT+2]
 18255 00003DFF A3[7A05]                	mov	[CONSFT+2],ax
 18256 00003E02 58                      	pop	ax
 18257 00003E03 C3                      	retn
 18258                                  
 18259                                  
 18260                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 18261                                  ;-----------------------------------------------------------------------------
 18262                                  ;
 18263                                  ; Inputs:
 18264                                  ;	ThisSFT set to the SFT for the file being used
 18265                                  ;	[DMAADD] contains transfer address
 18266                                  ;	CX = No. of bytes to read
 18267                                  ;	DS = DOSDATA
 18268                                  ; Function:
 18269                                  ;	Perform read operation
 18270                                  ; Outputs:
 18271                                  ;    Carry clear
 18272                                  ;	SFT Position and cluster pointers updated
 18273                                  ;	CX = No. of bytes read
 18274                                  ;	ES:DI point to SFT
 18275                                  ;    Carry set
 18276                                  ;	AX is error code
 18277                                  ;	CX = 0
 18278                                  ;	ES:DI point to SFT
 18279                                  ; DS preserved, all other registers destroyed
 18280                                  ;
 18281                                  ;-----------------------------------------------------------------------------
 18282                                  
 18283                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 18284                                  
 18285                                  DOS_READ:
 18286 00003E04 C43E[3605]              	LES	DI,[THISSFT]
 18287                                  
 18288                                  ; Verify that the sft has been opened in a mode that allows reading.
 18289                                  
 18290                                  	;mov	al,[es:di+2]
 18291 00003E08 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 18292                                  	;and	al,0Fh
 18293 00003E0C 240F                    	AND	AL,access_mask
 18294                                  	;cmp	al,1
 18295 00003E0E 3C01                    	CMP	AL,open_for_write
 18296 00003E10 7503                    	JNE	short READ_NO_MODE		;Is read or both
 18297 00003E12 E94205                  	jmp	SET_ACC_ERR
 18298                                  
 18299                                  READ_NO_MODE:
 18300 00003E15 E81904                  	call	SETUP
 18301 00003E18 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 18302 00003E1A E8C6E1                  	call	IsSFTNet
 18303 00003E1D 7408                    	JZ	short LOCAL_READ
 18304                                  
 18305                                  ;IF NOT Installed
 18306                                  ;	transfer NET_READ
 18307                                  ;ELSE
 18308                                  	;mov	ax,1108h
 18309 00003E1F B80811                  	MOV	AX,(MultNET<<8)|8
 18310 00003E22 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 18311                                  			; ES:DI -> SFT
 18312                                  			; SFT DPB field -> DPB of drive containing file
 18313                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 18314                                  			; Return: CF set on error, CX = bytes read
 18315 00003E24 C3                      	retn
 18316                                  ;ENDIF
 18317                                  
 18318                                  ; The user ended up requesting 0 bytes of input.  We do nothing for this case
 18319                                  ; except return immediately.
 18320                                  
 18321                                  NoIORet:
 18322 00003E25 F8                      	CLC
 18323 00003E26 C3                      	retn
 18324                                  
 18325                                  LOCAL_READ:
 18326                                  	;test	word [es:di+5],80h
 18327 00003E27 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 18328 00003E2D 750F                    	JNZ	short READDEV
 18329                                  	;mov	byte [EXTERR_LOCUS],2
 18330 00003E2F C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18331 00003E34 E835E2                  	call	EcritDisk
 18332 00003E37 E8D804                  	call	DISKREAD
 18333                                  
 18334                                  critexit:
 18335 00003E3A E837E2                  	call	LcritDisk
 18336 00003E3D C3                      	retn
 18337                                  
 18338                                  ; We are reading from a device. Examine the status of the device to see if we
 18339                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 18340                                  ; null device, we can safely indicate no transfer.
 18341                                  
 18342                                  READDEV:
 18343                                  	;mov	byte [EXTERR_LOCUS],4
 18344 00003E3E C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 18345                                  	;mov	bl,[es:di+5]
 18346 00003E43 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 18347 00003E47 C43E[DA02]              	LES	DI,[DMAADD]
 18348                                  	;test	bl,40h
 18349 00003E4B F6C340                  	test	BL,devid_device_EOF	; End of file?
 18350 00003E4E 7407                    	JZ	short ENDRDDEVJ3
 18351                                  	;test	bl,4
 18352 00003E50 F6C304                  	test	BL,devid_device_null	; NUL device?
 18353 00003E53 7405                    	JZ	short TESTRAW 		; NO
 18354 00003E55 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 18355                                  ENDRDDEVJ3:
 18356 00003E57 E9BC00                  	JMP	ENDRDDEVJ2
 18357                                  
 18358                                  ;
 18359                                  ; We need to hit the device.  Figure out if we do a raw read or we do the
 18360                                  ; bizarre std_con_string_input.
 18361                                  ;
 18362                                  TESTRAW:
 18363                                  	;test	bl,20h
 18364 00003E5A F6C320                  	test	BL,devid_device_raw	; Raw mode?
 18365 00003E5D 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 18366                                  	;test	bl,1
 18367 00003E5F F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 18368 00003E62 7447                    	JZ	short NOTRDCON
 18369 00003E64 E9E500                  	JMP	READCON
 18370                                  
 18371                                  DVRDRAW:
 18372 00003E67 06                      	PUSH	ES
 18373 00003E68 1F                      	POP	DS			; Xaddr to DS:DI
 18374                                  
 18375                                  	; MSDOS 6.0
 18376                                  ;SR;
 18377                                  ;Check for win386 presence -- if present, do polled read of characters
 18378                                  ;
 18379                                  	;test	byte [ss:IsWIN386],1
 18380                                  	;jz	short ReadRawRetry	;not present
 18381                                  	;test	bl,devid_device_con_in	;is it console device
 18382                                  	;jz	short ReadRawRetry	;no, do normal read
 18383                                  	;jmp	do_polling		;yes, do win386 polling loop
 18384                                  
 18385                                  ReadRawRetry:
 18386 00003E69 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 18387 00003E6B 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 18388 00003E6D 89C2                    	MOV	DX,AX			; Start at 0
 18389 00003E6F E8B010                  	call	SETREAD
 18390 00003E72 1E                      	PUSH	DS			; Save Seg part of Xaddr
 18391                                  
 18392                                  ;hkn; SS override
 18393 00003E73 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18394 00003E78 E88010                  	call	DEVIOCALL
 18395 00003E7B 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 18396 00003E7D B486                    	MOV	AH,86H			; Read error
 18397                                  
 18398                                  ;hkn; SS override
 18399 00003E7F 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18400                                  	; MSDOS 3.3
 18401                                  	;test	di,8000h
 18402                                  	;jz	short CRDROK
 18403                                  	; MSDOS 6.0
 18404 00003E84 09FF                    	or	di,di
 18405 00003E86 7919                    	jns	short CRDROK		; no errors
 18406                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18407 00003E88 E8A319                  	call	CHARHARD
 18408 00003E8B 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 18409                                  
 18410                                  	; MSDOS 6.0
 18411                                  	;add	di,[ss:callscnt]	; update ptr and count to reflect the	M065
 18412                                  	;sub	cx,[ss:callscnt]	; number of chars xferred		M065
 18413                                  
 18414                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18415 00003E8D 08C0                    	OR	AL,AL
 18416 00003E8F 7410                    	JZ	short CRDROK		; Ignore
 18417 00003E91 3C03                    	CMP	AL,3
 18418 00003E93 7403                    	JZ	short CRDFERR 		; fail.
 18419 00003E95 1F                      	POP	DS			; Recover saved seg part of Xaddr
 18420                                  	; 19/05/2019
 18421 00003E96 EBD1                    	JMP	short ReadRawRetry	; Retry
 18422                                  
 18423                                  ;
 18424                                  ; We have encountered a device-driver error.  We have informed the user of it
 18425                                  ; and he has said for us to fail the system call.
 18426                                  ;
 18427                                  CRDFERR:
 18428 00003E98 5F                      	POP	DI			; Clean stack
 18429                                  DEVIOFERR:
 18430                                  
 18431                                  ;hkn; SS override
 18432 00003E99 36C43E[3605]            	LES	DI,[SS:THISSFT]
 18433 00003E9E E9B404                  	jmp	SET_ACC_ERR_DS
 18434                                  
 18435                                  CRDROK:
 18436 00003EA1 5F                      	POP	DI			; Chuck saved seg of Xaddr
 18437 00003EA2 89D7                    	MOV	DI,DX
 18438                                  
 18439                                  ;hkn; SS override
 18440 00003EA4 36033E[1803]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 18441 00003EA9 EBAC                    	JMP	SHORT ENDRDDEVJ3
 18442                                  
 18443                                  ; We are going to do a cooked read on some character device. There is a
 18444                                  ; problem here, what does the data look like? Is it a terminal device, line
 18445                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 18446                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 18447                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 18448                                  ; included in data). this "simulates" the way con works in cooked mode
 18449                                  ; reading one line at a time. With file data, however, the lines will look
 18450                                  ; like, LF line CR. This is a little weird.
 18451                                  
 18452                                  NOTRDCON:
 18453 00003EAB 8CC0                    	MOV	AX,ES
 18454 00003EAD 8ED8                    	MOV	DS,AX
 18455 00003EAF 89FB                    	MOV	BX,DI
 18456 00003EB1 31D2                    	XOR	DX,DX
 18457 00003EB3 89D0                    	MOV	AX,DX
 18458 00003EB5 51                      	PUSH	CX
 18459 00003EB6 B90100                  	MOV	CX,1
 18460 00003EB9 E86610                  	call	SETREAD
 18461 00003EBC 59                      	POP	CX
 18462                                  
 18463                                  ;hkn; SS override
 18464 00003EBD 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18465                                  	;lds	si,[si+7]
 18466 00003EC2 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 18467                                  DVRDLP:
 18468 00003EC5 E89117                  	call	DSKSTATCHK
 18469 00003EC8 E83310                  	call	DEVIOCALL2
 18470 00003ECB 57                      	PUSH	DI		; Save "count" done
 18471 00003ECC B486                    	MOV	AH,86H
 18472                                  
 18473                                  ;hkn; SS override
 18474 00003ECE 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18475                                  	
 18476                                  	; MSDOS 3.3
 18477                                  	;test	di, 8000h
 18478                                  	;jz	short CRDOK
 18479                                  	; MSDOS 6.0
 18480 00003ED3 09FF                    	or	di,di
 18481 00003ED5 7917                    	jns	short CRDOK
 18482                                  	
 18483 00003ED7 E85419                  	call	CHARHARD
 18484 00003EDA 5F                      	POP	DI
 18485                                  
 18486                                  ;hkn; SS override
 18487 00003EDB 36C706[1803]0100        	MOV	word [SS:CALLSCNT],1
 18488 00003EE2 3C01                    	CMP	AL,1
 18489 00003EE4 74DF                    	JZ	short DVRDLP		;Retry
 18490 00003EE6 3C03                    	CMP	AL,3
 18491 00003EE8 74AF                    	JZ	short DEVIOFERR		; FAIL
 18492 00003EEA 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 18493 00003EEC EB12                    	JMP	SHORT DVRDIGN
 18494                                  
 18495                                  CRDOK:
 18496 00003EEE 5F                      	POP	DI
 18497                                  
 18498                                  ;hkn; SS override
 18499 00003EEF 36833E[1803]01          	CMP	word [SS:CALLSCNT],1
 18500 00003EF5 751F                    	JNZ	short ENDRDDEVJ2
 18501 00003EF7 1E                      	PUSH	DS
 18502                                  
 18503                                  ;hkn; SS override
 18504 00003EF8 368E1E[1603]            	MOV	DS,[SS:CALLXAD+2]
 18505 00003EFD 8A05                    	MOV	AL,[DI]			; Get the character we just read
 18506 00003EFF 1F                      	POP	DS
 18507                                  DVRDIGN:
 18508                                  
 18509                                  ;hkn; SS override
 18510 00003F00 36FF06[1403]            	INC	WORD [SS:CALLXAD]	; Next character
 18511 00003F05 36C706[0903]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 18512 00003F0C 47                      	INC	DI			; Next character
 18513 00003F0D 3C1A                    	CMP	AL,1AH			; ^Z?
 18514 00003F0F 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 18515 00003F11 3C0D                    	CMP	AL,c_CR 		; CR?
 18516 00003F13 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 18517 00003F15 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 18518                                  					;  AX=FFFF which is not likely
 18519                                  ENDRDDEVJ2:
 18520 00003F16 EB1F                    	JMP	short ENDRDDEV		;changed short to long for win386
 18521                                  
 18522                                  	;  MSDOS 6.0
 18523                                  ;;SR;
 18524                                  ;;Polling code for raw read on CON when WIN386 is present
 18525                                  ;;
 18526                                  ;;At this point -- ds:di is transfer address
 18527                                  ;;		  cx is count
 18528                                  ;;
 18529                                  ;
 18530                                  ;do_polling:
 18531                                  ;	mov	bx,di			;ds:bx is Xfer address
 18532                                  ;	xor	ax,ax
 18533                                  ;	mov	dx,ax
 18534                                  ;	call	setread			;prepare device packet
 18535                                  ;
 18536                                  ;do_io:
 18537                                  ;;
 18538                                  ;;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 18539                                  ;;
 18540                                  ;	mov	byte ptr es:[bx+2],DEVRDND	;Change command code
 18541                                  ;	push	ds
 18542                                  ;	lds	si,[THISSFT]		;get device header
 18543                                  ;	call	deviocall		;call device driver
 18544                                  ;	pop	ds
 18545                                  ;	
 18546                                  ;	test	es:[bx.REQSTAT],STERR	;check if error
 18547                                  ;	jz	check_busy		;no
 18548                                  ;
 18549                                  ;	push	ds
 18550                                  ;	mov	dx,di
 18551                                  ;	invoke 	charhard		;invoke int 24h handler
 18552                                  ;	mov	di,dx
 18553                                  ;	or	al,al
 18554                                  ;	jz	pop_done_read		;ignore by user, assume read done
 18555                                  ;	cmp	al,3
 18556                                  ;	jz	devrderr		;user asked to fail
 18557                                  ;	pop	ds
 18558                                  ;	jmp	do_io			;user asked to retry
 18559                                  ;
 18560                                  ;check_busy:
 18561                                  ;	test	es:[bx.REQSTAT],0200h	;see if busy bit set
 18562                                  ;	jnz	no_char			;yes, no character available
 18563                                  ;;
 18564                                  ;;Character is available. Read in 1 character at a time until all characters
 18565                                  ;;are read in or no character is available
 18566                                  ;;
 18567                                  ;	mov	byte ptr es:[bx+2],DEVRD	;command code is READ now
 18568                                  ;	mov	word ptr es:[bx+18],1		;change count to 1 character
 18569                                  ;	push	ds
 18570                                  ;	lds	si,[THISSFT]
 18571                                  ;	call	deviocall
 18572                                  ;
 18573                                  ;	mov	dx,di
 18574                                  ;	mov	ah,86h
 18575                                  ;	mov	di,es:[bx.REQSTAT]	;get returned status
 18576                                  ;	test	di,STERR		;was there an error during read?
 18577                                  ;	jz	next_char		;no,read next character
 18578                                  ;
 18579                                  ;	invoke	charhard		;invoke int 24h handler
 18580                                  ;	mov	di,dx			;restore di
 18581                                  ;	or	al,al			;
 18582                                  ;	jz	pop_done_read		;ignore by user,assume read is done
 18583                                  ;	cmp	al,3
 18584                                  ;	jz	devrderr		;user issued a 'fail',indicate error
 18585                                  ;	pop	ds
 18586                                  ;	jmp	do_io			;user issued a retry
 18587                                  ;
 18588                                  ;next_char:
 18589                                  ;	pop	ds
 18590                                  ;	mov	di,dx
 18591                                  ;	dec	cx			;decrement count
 18592                                  ;	jcxz	done_read		;all characters read in
 18593                                  ;	inc	word ptr es:[bx+14]	;update transfer address
 18594                                  ;	jmp	do_io			;read next character in
 18595                                  ;
 18596                                  ;devrderr:
 18597                                  ;	pop	di			;discard segment address
 18598                                  ;	les	di,[THISSFT]
 18599                                  ;	transfer SET_ACC_ERR_DS		;indicate error
 18600                                  ;
 18601                                  ;no_char:
 18602                                  ;;
 18603                                  ;;Since no character is available, we let win386 switch the VM out
 18604                                  ;;
 18605                                  ;	push	ax
 18606                                  ;	mov	ah,84h
 18607                                  ;	int	2ah			;indicate idle to WIN386
 18608                                  ;;
 18609                                  ;;When control returns from WIN386, we continue the raw read
 18610                                  ;;
 18611                                  ;	pop	ax
 18612                                  ;	jmp	do_io
 18613                                  ;
 18614                                  ;pop_done_read:
 18615                                  ;	pop	ds
 18616                                  ;done_read:
 18617                                  ;	add	di,[CALLSCNT]
 18618                                  ;	jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 18619                                  
 18620                                  TRANBUF:
 18621 00003F18 AC                      	LODSB
 18622 00003F19 AA                      	STOSB
 18623 00003F1A 3C0D                    	CMP	AL,c_CR 	; Check for carriage return
 18624 00003F1C 7503                    	JNZ	short NORMCH
 18625 00003F1E C6040A                  	MOV	BYTE [SI],c_LF
 18626                                  NORMCH:
 18627 00003F21 3C0A                    	CMP	AL,c_LF
 18628 00003F23 E0F3                    	LOOPNZ	TRANBUF
 18629 00003F25 7507                    	JNZ	short ENDRDCON
 18630 00003F27 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 18631 00003F29 E858E4                  	call	OUTT		; Transmit linefeed
 18632 00003F2C 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 18633                                  ENDRDCON:
 18634                                  
 18635                                  ;hkn; SS is DOSDATA
 18636 00003F2E 16                      	push	ss
 18637 00003F2F 1F                      	pop	ds
 18638 00003F30 E8B7FE                  	CALL	SWAPBACK
 18639 00003F33 8936[2200]              	MOV	[CONTPOS],SI
 18640                                  ENDRDDEV:
 18641                                  
 18642                                  ;hkn; SS is DOSDATA
 18643 00003F37 16                      	push	ss
 18644 00003F38 1F                      	pop	ds
 18645                                  
 18646 00003F39 893E[5005]              	MOV	[NEXTADD],DI
 18647 00003F3D 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 18648 00003F3F C43E[3605]              	LES	DI,[THISSFT]
 18649                                  	;and	byte [es:di+5],0BFh
 18650 00003F43 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 18651                                  					; Mark as no more data available
 18652                                  SETSFTC:
 18653 00003F48 E8EA04                  	call	SETSFT
 18654 00003F4B C3                      	retn
 18655                                  
 18656                                  READCON:
 18657 00003F4C E8A1FE                  	CALL	SWAPCON
 18658 00003F4F 8B36[2200]              	MOV	SI,[CONTPOS]
 18659 00003F53 09F6                    	OR	SI,SI
 18660 00003F55 75C1                    	JNZ	short TRANBUF
 18661 00003F57 803E[2902]80            	CMP	BYTE [CONBUF],128
 18662 00003F5C 7406                    	JZ	short GETBUF
 18663 00003F5E C706[2902]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 18664                                  GETBUF:
 18665 00003F64 51                      	PUSH	CX
 18666 00003F65 06                      	PUSH	ES
 18667 00003F66 57                      	PUSH	DI
 18668                                  
 18669                                  ;hkn; CONBUF is in DOSDATA
 18670 00003F67 BA[2902]                	MOV	DX,CONBUF
 18671                                  
 18672 00003F6A E897E1                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 18673 00003F6D 5F                      	POP	DI
 18674 00003F6E 07                      	POP	ES
 18675 00003F6F 59                      	POP	CX
 18676                                  
 18677                                  ;hkn; CONBUF is in DOSDATA
 18678 00003F70 BE[2B02]                	MOV	SI,CONBUF+2
 18679                                  
 18680 00003F73 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 18681 00003F76 75A0                    	JNZ	short TRANBUF
 18682 00003F78 B01A                    	MOV	AL,1AH
 18683 00003F7A AA                      	STOSB
 18684 00003F7B 4F                      	DEC	DI
 18685 00003F7C B00A                    	MOV	AL,c_LF
 18686 00003F7E E803E4                  	call	OUTT		; Send linefeed
 18687 00003F81 31F6                    	XOR	SI,SI
 18688 00003F83 EBA9                    	JMP	ENDRDCON
 18689                                  
 18690                                  ; 24/07/2018 - Retro DOS v3.0
 18691                                  
 18692                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 18693                                  ;---------------------------------------------------------------------------
 18694                                  ;
 18695                                  ; Procedure Name : DOS_WRITE
 18696                                  ;
 18697                                  ; Inputs:
 18698                                  ;	ThisSFT set to the SFT for the file being used
 18699                                  ;	[DMAADD] contains transfer address
 18700                                  ;	CX = No. of bytes to write
 18701                                  ; Function:
 18702                                  ;	Perform write operation
 18703                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 18704                                  ;		to current sf_position
 18705                                  ; Outputs:
 18706                                  ;    Carry clear
 18707                                  ;	SFT Position and cluster pointers updated
 18708                                  ;	CX = No. of bytes written
 18709                                  ;	ES:DI point to SFT
 18710                                  ;    Carry set
 18711                                  ;	AX is error code
 18712                                  ;	CX = 0
 18713                                  ;	ES:DI point to SFT
 18714                                  ; DS preserved, all other registers destroyed
 18715                                  ;---------------------------------------------------------------------------
 18716                                  
 18717                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 18718                                  ;hkn; point to DOSDATA.
 18719                                  
 18720                                  DOS_WRITE:
 18721 00003F85 C43E[3605]              	LES	DI,[THISSFT]
 18722                                  	;mov	al,[ES:DI+2]
 18723 00003F89 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 18724                                  	;and	al,0Fh
 18725 00003F8D 240F                    	AND	AL,access_mask
 18726                                  	;cmp	al,0
 18727 00003F8F 3C00                    	CMP	AL,open_for_read
 18728 00003F91 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 18729                                  BadMode:
 18730 00003F93 E9C103                  	jmp	SET_ACC_ERR
 18731                                  
 18732                                  ;
 18733                                  ; NOTE: The following check for writting to a Read Only File is performed
 18734                                  ;	    ONLY on FCBs!!!!
 18735                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 18736                                  ;	    of a read only file which can then be written to.
 18737                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 18738                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 18739                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 18740                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 18741                                  ;	    to a read-only file.
 18742                                  ;
 18743                                  Check_FCB_RO:
 18744                                  	;test	word [es:di+2],8000h
 18745 00003F96 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 18746 00003F9C 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 18747                                  	;test	byte [es:di+4],1
 18748 00003F9E 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 18749 00003FA3 75EE                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 18750                                  WRITE_NO_MODE:
 18751 00003FA5 E88902                  	call	SETUP
 18752 00003FA8 E838E0                  	call	IsSFTNet
 18753 00003FAB 7406                    	JZ	short LOCAL_WRITE
 18754                                  
 18755                                  ;IF NOT Installed
 18756                                  ;	transfer NET_WRITE
 18757                                  ;ELSE
 18758                                  	;mov	ax,1109h
 18759 00003FAD B80911                  	MOV	AX,(MultNET<<8)|9
 18760 00003FB0 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 18761                                  			; ES:DI -> SFT
 18762                                  			; SFT DPB field -> DPB of drive containing file
 18763                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 18764                                  			; Return: CF set on error, CX = bytes written
 18765 00003FB2 C3                      	retn
 18766                                  ;ENDIF
 18767                                  
 18768                                  LOCAL_WRITE:
 18769                                  	;test	word [es:di+5],80h
 18770 00003FB3 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 18771 00003FB9 7552                    	jnz	short WRTDEV
 18772                                  	;mov	byte [EXTERR_LOCUS],2
 18773 00003FBB C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18774 00003FC0 E8A9E0                  	call	EcritDisk
 18775                                  
 18776 00003FC3 E89E04                  	call	DISKWRITE
 18777                                  
 18778                                  	; MSDOS 6.0
 18779                                  ;; Extended Open
 18780                                  	;JC	short nocommit
 18781                                  	;LES	DI,[THISSFT]
 18782                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],auto_commit_write
 18783                                  	;JZ	short nocommit
 18784                                  	;PUSH	CX
 18785                                  	;call	DOS_COMMIT
 18786                                  	;POP	CX
 18787                                  ;nocommit:
 18788                                  ;; Extended Open
 18789 00003FC6 E8ABE0                  	call	LcritDisk
 18790 00003FC9 C3                      	retn
 18791                                  
 18792                                  DVWRTRAW:
 18793 00003FCA 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 18794 00003FCC E8860F                  	call	SETWRITE
 18795 00003FCF 1E                      	PUSH	DS			; Save seg of transfer
 18796                                  
 18797                                  ;hkn; SS override
 18798 00003FD0 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18799 00003FD5 E8230F                  	call	DEVIOCALL		; DS:SI -> DEVICE
 18800                                  
 18801 00003FD8 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 18802 00003FDA B487                    	MOV	AH,87H
 18803                                  
 18804                                  ;hkn; SS override
 18805 00003FDC 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18806                                  
 18807                                  	; MSDOS 3.3
 18808                                  	;test	di,8000h
 18809                                  	;jz	short CWRTROK
 18810                                  
 18811                                  	; MSDOS 6.0
 18812 00003FE1 09FF                    	or	di,di
 18813 00003FE3 7914                    	jns	short CWRTROK
 18814                                  	
 18815                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18816 00003FE5 E84618                  	call	CHARHARD
 18817                                  
 18818                                  	; MSDOS 6.0
 18819                                  	;sub	cx,[ss:callscnt]	; update ptr & count to reflect	M065
 18820                                  	;mov	bx,dx			; number of chars xferred	M065
 18821                                  	;add	bx,[ss:callscnt]		;				M065
 18822                                  	;mov	di,bx			;				M065
 18823                                  	
 18824                                  	; MSDOS 3.3
 18825 00003FE8 89D3                    	MOV	BX,DX			; Recall transfer addr		M065
 18826                                  
 18827                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18828 00003FEA 08C0                    	OR	AL,AL
 18829 00003FEC 740B                    	JZ	short CWRTROK 		; Ignore
 18830 00003FEE 3C03                    	CMP	AL,3
 18831 00003FF0 7403                    	JZ	short CWRFERR
 18832 00003FF2 1F                      	POP	DS			; Recover saved seg of transfer
 18833 00003FF3 EBD5                    	JMP	short DVWRTRAW		; Try again
 18834                                  
 18835                                  CWRFERR:
 18836 00003FF5 58                      	POP	AX			; Chuck saved seg of transfer
 18837 00003FF6 E99FFE                  	JMP	CRDFERR 		; Will pop one more stack element
 18838                                  
 18839                                  CWRTROK:
 18840 00003FF9 58                      	POP	AX			; Chuck saved seg of transfer
 18841 00003FFA 1F                      	POP	DS
 18842 00003FFB A1[1803]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 18843                                  ENDWRDEV:
 18844 00003FFE C43E[3605]              	LES	DI,[THISSFT]
 18845 00004002 89C1                    	MOV	CX,AX
 18846 00004004 E85004                  	call	ADDREC
 18847 00004007 C3                      	retn
 18848                                  
 18849                                  WRTNUL:
 18850 00004008 89CA                    	MOV	DX,CX			;Entire transfer done
 18851                                  WRTCOOKJ:
 18852 0000400A E98D00                  	JMP	WRTCOOKDONE
 18853                                  
 18854                                  WRTDEV:
 18855                                  	;mov	byte [EXTERR_LOCUS],4
 18856 0000400D C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 18857                                  	;or	byte [es:di+5],40h
 18858 00004012 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 18859                                  					; Reset EOF for input
 18860                                  	;mov	bl,[es:di+5]
 18861 00004017 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 18862 0000401B 31C0                    	XOR	AX,AX
 18863 0000401D E3DF                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 18864 0000401F 1E                      	PUSH	DS
 18865 00004020 88D8                    	MOV	AL,BL
 18866 00004022 C51E[DA02]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 18867 00004026 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 18868 00004028 31D2                    	XOR	DX,DX			; Set starting point
 18869                                  	;test	al,20h
 18870 0000402A A820                    	test	AL,devid_device_raw	; Raw?
 18871                                  	;JZ	short TEST_DEV_CON
 18872                                  	;JMP	DVWRTRAW
 18873 0000402C 759C                    	jnz	short DVWRTRAW
 18874                                  
 18875                                  TEST_DEV_CON:
 18876                                  	;test	al,2
 18877 0000402E A802                    	test	AL,devid_device_con_out ; Console output device?
 18878 00004030 756E                    	jnz	short WRITECON
 18879                                  	;test	al,4
 18880 00004032 A804                    	test	AL,devid_device_null
 18881 00004034 75D2                    	JNZ	short WRTNUL
 18882 00004036 89D0                    	MOV	AX,DX
 18883 00004038 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 18884 0000403B 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 18885 0000403D 51                      	PUSH	CX
 18886 0000403E B90100                  	MOV	CX,1
 18887 00004041 E8110F                  	call	SETWRITE
 18888 00004044 59                      	POP	CX
 18889                                  
 18890                                  ;hkn; SS override
 18891 00004045 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18892                                  ;
 18893                                  ;SR; Removed X25 support from here
 18894                                  ;
 18895                                  	;lds	si,[si+7]
 18896 0000404A C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 18897                                  DVWRTLP:
 18898 0000404D E80916                  	call	DSKSTATCHK
 18899 00004050 E8AB0E                  	call	DEVIOCALL2
 18900 00004053 57                      	PUSH	DI
 18901 00004054 B487                    	MOV	AH,87H
 18902                                  
 18903                                  ;hkn; SS override
 18904 00004056 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18905                                  	
 18906                                  	; MSDOS 3.3
 18907                                  	;test	di,8000h
 18908                                  	;jz	short CWROK
 18909                                  
 18910                                  	; MSDOS 6.0
 18911 0000405B 09FF                    	or	di,di
 18912 0000405D 7916                    	jns	short CWROK
 18913                                  	
 18914                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18915 0000405F E8CC17                  	call	CHARHARD
 18916 00004062 5F                      	POP	DI
 18917                                  
 18918                                  ;hkn; SS override
 18919 00004063 36C706[1803]0100        	MOV	word [SS:CALLSCNT],1
 18920 0000406A 3C01                    	CMP	AL,1
 18921 0000406C 74DF                    	JZ	short DVWRTLP 	; Retry
 18922 0000406E 08C0                    	OR	AL,AL
 18923 00004070 740C                    	JZ	short DVWRTIGN	; Ignore
 18924                                  	; 10/08/2018
 18925 00004072 E923FE                  	JMP	CRDFERR 	; Fail, pops one stack element
 18926                                  
 18927                                  CWROK:
 18928 00004075 5F                      	POP	DI
 18929                                  
 18930                                  ;hkn; SS override
 18931 00004076 36833E[1803]00          	CMP	word [SS:CALLSCNT],0
 18932 0000407C 741C                    	JZ	short WRTCOOKDONE
 18933                                  DVWRTIGN:
 18934 0000407E 42                      	INC	DX
 18935                                  
 18936                                  ;hkn; SS override for CALLXAD
 18937 0000407F 36FF06[1403]            	INC	WORD [SS:CALLXAD]
 18938 00004084 47                      	INC	DI
 18939 00004085 1E                      	PUSH	DS
 18940 00004086 368E1E[1603]            	MOV	DS,[SS:CALLXAD+2]
 18941 0000408B 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 18942 0000408E 1F                      	POP	DS
 18943 0000408F 7409                    	JZ	short WRTCOOKDONE
 18944                                  
 18945                                  ;hkn; SS override
 18946 00004091 36C706[0903]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 18947 00004098 E2B3                    	LOOP	DVWRTLP
 18948                                  WRTCOOKDONE:
 18949 0000409A 89D0                    	MOV	AX,DX
 18950 0000409C 1F                      	POP	DS
 18951 0000409D E95EFF                  	JMP	ENDWRDEV ; 10/08/2018
 18952                                  
 18953                                  WRITECON:
 18954 000040A0 1E                      	PUSH	DS
 18955                                  
 18956                                  ;hkn; SS is DOSDATA
 18957 000040A1 16                      	push	ss
 18958 000040A2 1F                      	pop	ds
 18959 000040A3 E84AFD                  	CALL	SWAPCON
 18960 000040A6 1F                      	POP	DS
 18961 000040A7 89DE                    	MOV	SI,BX
 18962 000040A9 51                      	PUSH	CX
 18963                                  WRCONLP:
 18964 000040AA AC                      	LODSB
 18965 000040AB 3C1A                    	CMP	AL,1Ah		; ^Z?
 18966 000040AD 7405                    	JZ	short CONEOF
 18967 000040AF E8D2E2                  	call	OUTT
 18968 000040B2 E2F6                    	LOOP	WRCONLP
 18969                                  CONEOF:
 18970 000040B4 58                      	POP	AX			; Count
 18971 000040B5 29C8                    	SUB	AX,CX			; Amount actually written
 18972 000040B7 1F                      	POP	DS
 18973 000040B8 E82FFD                  	CALL	SWAPBACK
 18974 000040BB E940FF                  	JMP	ENDWRDEV
 18975                                  
 18976                                  ;---------------------------------------------------------------------------
 18977                                  ;
 18978                                  ; Procedure Name : get_io_sft
 18979                                  ;
 18980                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 18981                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more.  Otherwise, we
 18982                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 18983                                  ;
 18984                                  ;---------------------------------------------------------------------------
 18985                                  
 18986                                  GET_IO_SFT:
 18987                                  	;test	byte [SS:CONSWAP],0FFh
 18988 000040BE 36803E[0303]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 18989 000040C4 7512                    	JNZ	short GetRedir
 18990                                  GetNormal:
 18991 000040C6 16                      	push	ss
 18992 000040C7 1F                      	pop	ds
 18993 000040C8 06                      	PUSH	ES
 18994 000040C9 57                      	PUSH	DI
 18995 000040CA E83327                  	call	SFFromHandle
 18996 000040CD 7206                    	JC	short RET44P
 18997 000040CF 8CC6                    	MOV	SI,ES
 18998 000040D1 8EDE                    	MOV	DS,SI
 18999 000040D3 89FE                    	MOV	SI,DI
 19000                                  RET44P:
 19001 000040D5 5F                      	POP	DI
 19002 000040D6 07                      	POP	ES
 19003 000040D7 C3                      	retn
 19004                                  GetRedir:
 19005 000040D8 83FB01                  	CMP	BX,1
 19006 000040DB 77E9                    	JA	short GetNormal
 19007 000040DD 36C536[7805]            	LDS	SI,[SS:CONSFT]
 19008 000040E2 F8                      	CLC
 19009                                  get_io_sft_retn:
 19010 000040E3 C3                      	retn
 19011                                  
 19012                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 19013                                  ;---------------------------------------------------------------------------
 19014                                  ;
 19015                                  ; Procedure Name : DIRREAD
 19016                                  ;
 19017                                  ; Inputs:
 19018                                  ;	AX = Directory block number (relative to first block of directory)
 19019                                  ;	ES:BP = Base of drive parameters
 19020                                  ;	[DIRSEC] = First sector of first cluster of directory
 19021                                  ;	[CLUSNUM] = Next cluster
 19022                                  ;	[CLUSFAC] = Sectors/Cluster
 19023                                  ; Function:
 19024                                  ;	Read the directory block into [CURBUF].
 19025                                  ; Outputs:
 19026                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 19027                                  ;	[SECCLUSPOS] Set
 19028                                  ;	ES:BP unchanged
 19029                                  ;	[CURBUF] Points to Buffer with dir sector
 19030                                  ;	Carry set if error (user said FAIL to I 24)
 19031                                  ; DS preserved, all other registers destroyed.
 19032                                  ;---------------------------------------------------------------------------
 19033                                  
 19034                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 19035                                  
 19036                                  DIRREAD:
 19037                                  
 19038                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 19039                                  ; the same as what is in the DPB! In the case of the root directory, we have
 19040                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 19041                                  ; by DIRStart = 0.
 19042                                  
 19043 000040E4 31D2                    	XOR	DX,DX
 19044 000040E6 833E[5805]00            	CMP	word [DIRSTART],0
 19045 000040EB 7503                    	jnz	short SubDir
 19046 000040ED 92                      	XCHG	AX,DX
 19047 000040EE EB0C                    	JMP	short DoRead
 19048                                  
 19049                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 19050                                  
 19051                                  SubDir:
 19052 000040F0 88C2                    	MOV	DL,AL
 19053                                  	;and	dl,[es:bp+4]
 19054 000040F2 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 19055                                  
 19056                                  ;	(DX) = sector-in-cluster
 19057                                  
 19058                                  	;mov	cl,[es:bp+5]
 19059 000040F6 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 19060 000040FA D3E8                    	SHR	AX,CL
 19061                                  
 19062                                  ;	(DX) = position in cluster
 19063                                  ;	(AX) = number of clusters to skip
 19064                                  
 19065                                  DoRead:
 19066 000040FC 8816[0E05]              	MOV	[SECCLUSPOS],DL
 19067 00004100 89C1                    	MOV	CX,AX
 19068 00004102 88D4                    	MOV	AH,DL
 19069                                  
 19070                                  ;	(CX) = number of clusters to skip.
 19071                                  ;	(AH) = remainder
 19072                                  
 19073                                  	; MSDOS 6.0
 19074                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 19075                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 19076 00004104 8B16[5605]              	MOV	DX,[DIRSEC]
 19077 00004108 00E2                    	ADD	DL,AH
 19078 0000410A 80D600                  	ADC	DH,0
 19079                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 19080                                  
 19081 0000410D 8B1E[5405]              	MOV	BX,[CLUSNUM]
 19082 00004111 891E[6E05]              	MOV	[NXTCLUSNUM],BX
 19083 00004115 E319                    	JCXZ	FIRSTCLUSTER
 19084                                  SKPCLLP:
 19085 00004117 E83719                  	call	UNPACK
 19086 0000411A 72C7                    	jc	short get_io_sft_retn
 19087 0000411C 87DF                    	XCHG	BX,DI
 19088 0000411E E81919                  	call	IsEOF			; test for eof based on fat size
 19089 00004121 7302                    	JAE	short HAVESKIPPED
 19090 00004123 E2F2                    	LOOP	SKPCLLP
 19091                                  HAVESKIPPED:
 19092 00004125 891E[6E05]              	MOV	[NXTCLUSNUM],BX
 19093 00004129 89FA                    	MOV	DX,DI
 19094 0000412B 88E3                    	MOV	BL,AH
 19095 0000412D E80513                  	call	FIGREC
 19096                                  
 19097                                  	;entry	FIRSTCLUSTER
 19098                                  
 19099                                  FIRSTCLUSTER:
 19100                                  	;mov	byte [ALLOWED],18h
 19101 00004130 C606[F702]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 19102 00004135 30C0                    	XOR	AL,AL		; Indicate pre-read
 19103 00004137 E84F1D                  	call	GETBUFFR
 19104 0000413A 72A7                    	jc	short get_io_sft_retn
 19105                                  
 19106                                  	;entry	SET_BUF_AS_DIR
 19107                                  
 19108                                  SET_BUF_AS_DIR:
 19109                                  
 19110                                  ;	Set the type of CURBUF to be a directory sector.
 19111                                  ;	Only flags are modified.
 19112                                  
 19113 0000413C 1E                      	PUSH	DS
 19114 0000413D 56                      	PUSH	SI
 19115 0000413E C536[7405]              	LDS	SI,[CURBUF]
 19116                                  	;or	byte [si+5],4
 19117 00004142 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 19118 00004146 5E                      	POP	SI
 19119 00004147 1F                      	POP	DS
 19120                                  dirread_retn:
 19121 00004148 C3                      	retn
 19122                                  
 19123                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 19124                                  ;----------------------------------------------------------------------------
 19125                                  ;
 19126                                  ; Procedure Name : FATSECRD
 19127                                  ; Inputs:
 19128                                  ;	Same as DREAD
 19129                                  ;	DS:BX = Transfer address
 19130                                  ;	CX = Number of sectors
 19131                                  ;	DX = Absolute record number
 19132                                  ;	ES:BP = Base of drive parameters
 19133                                  ; Function:
 19134                                  ;	Calls BIOS to perform FAT read.
 19135                                  ; Outputs:
 19136                                  ;	Same as DREAD
 19137                                  ;---------------------------------------------------------------------------
 19138                                  
 19139                                  FATSECRD:
 19140                                  ;hkn; SS override
 19141                                  	;mov	byte [ss:ALLOWED],18h
 19142 00004149 36C606[F702]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 19143 0000414F 89CF                    	MOV	DI,CX
 19144                                  	;mov	cl,[es:bp+8]
 19145 00004151 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 19146                                  	; MSDOS 6.0
 19147                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE] 	;>32mb
 19148                                  	; MSDOS 3.3
 19149                                  	;mov	al,[es:bp+0Fh]
 19150 00004155 268A460F                	MOV	AL,[ES:BP+DPB.FAT_SIZE] 
 19151 00004159 30E4                    	XOR	AH,AH
 19152 0000415B 30ED                    	XOR	CH,CH				;>32mb
 19153 0000415D 52                      	PUSH	DX
 19154                                  NXTFAT:
 19155                                  	; MSDOS 6.0
 19156                                  ;hkn; SS override
 19157                                  	;MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 19158 0000415E 51                      	PUSH	CX			;32mb
 19159 0000415F 50                      	PUSH	AX
 19160 00004160 89F9                    	MOV	CX,DI
 19161 00004162 E85A00                  	call	DSKREAD
 19162 00004165 58                      	POP	AX
 19163 00004166 59                      	POP	CX
 19164 00004167 7420                    	JZ	short RET41P		; Carry clear
 19165 00004169 01C2                    	ADD	DX,AX
 19166 0000416B E2F1                    	LOOP	NXTFAT
 19167 0000416D 5A                      	POP	DX
 19168 0000416E 89F9                    	MOV	CX,DI
 19169                                  
 19170                                  ; NOTE FALL THROUGH
 19171                                  
 19172                                  ;Break	<DREAD -- DO A DISK READ>
 19173                                  ;---------------------------------------------------------------------------
 19174                                  ;
 19175                                  ; Procedure Name : DREAD
 19176                                  ;
 19177                                  ; Inputs:
 19178                                  ;	DS:BX = Transfer address
 19179                                  ;	CX = Number of sectors
 19180                                  ;	DX = Absolute record number	      (LOW)
 19181                                  ;	[HIGH_SECTOR]= Absolute record number (HIGH)
 19182                                  ;	ES:BP = Base of drive parameters
 19183                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 19184                                  ; Function:
 19185                                  ;	Calls BIOS to perform disk read. If BIOS reports
 19186                                  ;	errors, will call HARDERRRW for further action.
 19187                                  ; Outputs:
 19188                                  ;	Carry set if error (currently user FAILED to INT 24)
 19189                                  ; DS,ES:BP preserved. All other registers destroyed.
 19190                                  ;---------------------------------------------------------------------------
 19191                                  
 19192                                  	;entry	DREAD
 19193                                  DREAD:
 19194 00004170 E84C00                  	call	DSKREAD
 19195 00004173 74D3                    	jz	short dirread_retn	; Carry clear
 19196                                  ;hkn; SS override
 19197 00004175 36C606[1005]00          	MOV	BYTE [SS:READOP],0
 19198 0000417B E89900                  	call	HARDERRRW
 19199 0000417E 3C01                    	CMP	AL,1		; Check for retry
 19200 00004180 74EE                    	JZ	short DREAD
 19201 00004182 3C03                    	CMP	AL,3		; Check for FAIL
 19202 00004184 F8                      	CLC
 19203 00004185 7501                    	JNZ	short NO_CAR		; Ignore
 19204 00004187 F9                      	STC
 19205                                  NO_CAR:
 19206 00004188 C3                      	retn
 19207                                  RET41P: 
 19208 00004189 5A                      	POP	DX
 19209 0000418A C3                      	retn
 19210                                  
 19211                                  ; 24/07/2018 - Retro DOS v3.0
 19212                                  
 19213                                  ;Break	<CHECK_WRITE_LOCK>
 19214                                  ;---------------------------------------------------------------------------
 19215                                  ;
 19216                                  ; Procedure Name : CHECK_WRITE_LOCK
 19217                                  ;
 19218                                  ; Inputs:
 19219                                  ;	output of SETUP
 19220                                  ;	ES:DI -> SFT
 19221                                  ; Function:
 19222                                  ;	check write lock
 19223                                  ; Outputs:
 19224                                  ;	Carry set if error
 19225                                  ;	Carry clear if ok
 19226                                  ;
 19227                                  ;----------------------------------------------------------------------------
 19228                                  
 19229                                  CHECK_WRITE_LOCK:
 19230                                  	; MSDOS 6.0
 19231                                  	;test	byte [es:di+4],8
 19232 0000418B 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 19233                                  	;JZ	short write_cont			     ;no
 19234                                  	;call	SET_ACC_ERR_DS		;
 19235                                  	;retn
 19236                                  	;jnz	SET_ACC_ERR_DS
 19237                                  	; 19/08/2018
 19238 00004190 7403                    	jz	short write_cont
 19239 00004192 E9C001                  	jmp	SET_ACC_ERR_DS
 19240                                  write_cont:				;
 19241 00004195 51                      	PUSH	CX			;save reg
 19242 00004196 09C9                    	OR	CX,CX			;
 19243 00004198 7501                    	JNZ	short Not_Truncate	;
 19244 0000419A 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 19245                                  Not_Truncate:				;
 19246 0000419B B080                    	MOV	AL,80H			;check write access
 19247 0000419D E84A31                  	call	LOCK_CHECK		;check lock
 19248 000041A0 59                      	POP	CX			;restore reg
 19249 000041A1 7305                    	JNC	short WRITE_OK		;lock ok
 19250 000041A3 E86501                  	call	WRITE_LOCK_VIOLATION	;issue I24
 19251 000041A6 73ED                    	JNC	short write_cont	;retry
 19252                                  WRITE_OK:				;
 19253 000041A8 C3                      	retn				;
 19254                                  
 19255                                  ;Break	<CHECK_READ_LOCK>
 19256                                  ;---------------------------------------------------------------------------
 19257                                  ;
 19258                                  ; Procedure Name : CHECK_READ_LOC
 19259                                  ;
 19260                                  ; Inputs:
 19261                                  ;	ES:DI -> SFT
 19262                                  ;	output of SETUP
 19263                                  ; Function:
 19264                                  ;	check read lock
 19265                                  ; Outputs:
 19266                                  ;	Carry set if error
 19267                                  ;	Carry clear if ok
 19268                                  ;----------------------------------------------------------------------------
 19269                                  
 19270                                  CHECK_READ_LOCK:
 19271                                  	; MSDOS 6.0
 19272                                  	;test	byte [es:di+4],8
 19273 000041A9 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 19274                                  	;JZ	short do_retry			   	     ; no
 19275                                  	;call	SET_ACC_ERR		;
 19276                                  	;retn
 19277 000041AE 0F85A501                	jnz	SET_ACC_ERR		;
 19278                                  do_retry:				;
 19279 000041B2 30C0                    	xor	al,al			;check read access
 19280 000041B4 E83331                  	call	LOCK_CHECK		;check lock
 19281 000041B7 7305                    	JNC	short READLOCK_OK 	;lock ok
 19282 000041B9 E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 19283 000041BC 73F4                    	JNC	short do_retry		;retry
 19284                                  READLOCK_OK:				;
 19285 000041BE C3                      	retn				;
 19286                                  
 19287                                  ;============================================================================
 19288                                  ; DISK2.ASM, MSDOS 6.0, 1991
 19289                                  ;============================================================================
 19290                                  ; 24/07/2018 - Retro DOS v3.0 
 19291                                  
 19292                                  ;	TITLE	DISK2 - Disk utility routines
 19293                                  ;	NAME	Disk2
 19294                                  
 19295                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 19296                                  ;
 19297                                  ;	DskRead
 19298                                  ;	DWRITE
 19299                                  ;	DSKWRITE
 19300                                  ;	HarderrRW
 19301                                  ;	SETUP
 19302                                  ;	BREAKDOWN
 19303                                  ;	READ_LOCK_VIOLATION
 19304                                  ;	WRITE_LOCK_VIOLATION
 19305                                  ;	DISKREAD
 19306                                  ;	SET_ACC_ERR_DS
 19307                                  ;	SET_ACC_ERR
 19308                                  ;	SETSFT
 19309                                  ;	SETCLUS
 19310                                  ;	AddRec
 19311                                  ;
 19312                                  ;	Revision history:
 19313                                  ;
 19314                                  ;		AN000 version 4.00 Jan. 1988
 19315                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 19316                                  
 19317                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 19318                                  ;---------------------------------------------------------------------------
 19319                                  ;
 19320                                  ; Procedure Name : DSKREAD
 19321                                  ;
 19322                                  ; Inputs:
 19323                                  ;	DS:BX = Transfer addr
 19324                                  ;	CX = Number of sectors
 19325                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19326                                  ;	DX = Absolute record number	       (LOW)
 19327                                  ;	ES:BP = Base of drive parameters
 19328                                  ; Function:
 19329                                  ;	Call BIOS to perform disk read
 19330                                  ; Outputs:
 19331                                  ;	DI = CX on entry
 19332                                  ;	CX = Number of sectors unsuccessfully transfered
 19333                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 19334                                  ;	Zero set if OK (from BIOS) (carry clear)
 19335                                  ;	Zero clear if error (carry clear)
 19336                                  ; SI Destroyed, others preserved
 19337                                  ;---------------------------------------------------------------------------
 19338                                  
 19339                                  DSKREAD:
 19340 000041BF 51                      	PUSH	CX
 19341                                  	;mov	ah,[es:bp+16h]
 19342 000041C0 268A6616                	MOV	AH,[ES:BP+DPB.MEDIA]
 19343                                  	;mov	al,[es:bp+1]
 19344 000041C4 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 19345 000041C8 53                      	PUSH	BX
 19346 000041C9 06                      	PUSH	ES
 19347 000041CA E8550D                  	call	SETREAD
 19348 000041CD EB27                    	JMP	short DODSKOP
 19349                                  
 19350                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 19351                                  ;--------------------------------------------------------------------------
 19352                                  ;
 19353                                  ; Procedure Name : DWRITE
 19354                                  ;
 19355                                  ; Inputs:
 19356                                  ;	DS:BX = Transfer address
 19357                                  ;	CX = Number of sectors
 19358                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19359                                  ;	DX = Absolute record number	       (LOW)
 19360                                  ;	ES:BP = Base of drive parameters
 19361                                  ;	[ALLOWED] must be set in case HARDERR called
 19362                                  ; Function:
 19363                                  ;	Calls BIOS to perform disk write. If BIOS reports
 19364                                  ;	errors, will call HARDERRRW for further action.
 19365                                  ; Output:
 19366                                  ;	Carry set if error (currently, user FAILed to I 24)
 19367                                  ; BP preserved. All other registers destroyed.
 19368                                  ;----------------------------------------------------------------------------
 19369                                  
 19370                                  
 19371                                  	;entry	DWRITE
 19372                                  DWRITE:
 19373 000041CF E81600                  	CALL	DSKWRITE
 19374 000041D2 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 19375                                  
 19376                                  ;hkn; SS override
 19377 000041D4 36C606[1005]01          	MOV	BYTE [SS:READOP],1
 19378 000041DA E83A00                  	call	HARDERRRW
 19379 000041DD 3C01                    	CMP	AL,1		; Check for retry
 19380 000041DF 74EE                    	JZ	short DWRITE
 19381 000041E1 3C03                    	CMP	AL,3		; Check for FAIL
 19382 000041E3 F8                      	CLC
 19383 000041E4 7501                    	JNZ	short NO_CAR2 	; Ignore
 19384 000041E6 F9                      	STC
 19385                                  NO_CAR2:
 19386                                  dw_ret_label:
 19387 000041E7 C3                      	retn
 19388                                  
 19389                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 19390                                  ;---------------------------------------------------------------------------
 19391                                  ;
 19392                                  ; Procedure Name : DSKWRITE
 19393                                  ;
 19394                                  ; Inputs:
 19395                                  ;	DS:BX = Transfer addr
 19396                                  ;	CX = Number of sectors
 19397                                  ;	DX = Absolute record number	       (LOW)
 19398                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19399                                  ;	ES:BP = Base of drive parameters
 19400                                  ; Function:
 19401                                  ;	Call BIOS to perform disk read
 19402                                  ; Outputs:
 19403                                  ;	DI = CX on entry
 19404                                  ;	CX = Number of sectors unsuccessfully transfered
 19405                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 19406                                  ;	Zero set if OK (from BIOS) (carry clear)
 19407                                  ;	Zero clear if error (carry clear)
 19408                                  ; SI Destroyed, others preserved
 19409                                  ;
 19410                                  ;----------------------------------------------------------------------------
 19411                                  
 19412                                  	;entry	DSKWRITE
 19413                                  DSKWRITE:
 19414 000041E8 51                      	PUSH	CX
 19415                                  	;mov	ah,[es:bp+16h]
 19416 000041E9 268A6616                	MOV	AH,[ES:BP+DPB.MEDIA]
 19417                                  	;mov	al,[es:bp+1]
 19418 000041ED 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 19419 000041F1 53                      	PUSH	BX
 19420 000041F2 06                      	PUSH	ES
 19421 000041F3 E85F0D                  	call	SETWRITE
 19422                                  DODSKOP:
 19423 000041F6 8CD9                    	MOV	CX,DS		; Save DS
 19424 000041F8 1F                      	POP	DS		; DS:BP points to DPB
 19425 000041F9 1E                      	PUSH	DS
 19426                                  	;lds	si,[ds:bp+12h]
 19427 000041FA 3EC57612                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 19428 000041FE E8FD0C                  	call	DEVIOCALL2
 19429 00004201 8ED9                    	MOV	DS,CX		; Restore DS
 19430 00004203 07                      	POP	ES		; Restore ES
 19431 00004204 5B                      	POP	BX
 19432                                  
 19433                                  ;hkn; SS override
 19434 00004205 368B0E[1803]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 19435 0000420A 5F                      	POP	DI
 19436 0000420B 29F9                    	SUB	CX,DI
 19437 0000420D F7D9                    	NEG	CX		; Number of sectors not transferred
 19438                                  
 19439                                  ;hkn; SS override
 19440 0000420F 36A1[0903]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 19441                                  	;test	ax,8000h
 19442 00004213 A90080                  	test	AX,STERR
 19443 00004216 C3                      	retn
 19444                                  
 19445                                  ;Break	<HardErrRW - map extended errors and call harderr>
 19446                                  ;---------------------------------------------------------------------------
 19447                                  ;
 19448                                  ; Procedure Name : HardErrRW
 19449                                  ;
 19450                                  ; Inputs:
 19451                                  ;	AX is error code from read or write
 19452                                  ;	Other registers set as per HARDERR
 19453                                  ; Function:
 19454                                  ;	Checks the error code for special extended
 19455                                  ;	errors and maps them if needed. Then invokes
 19456                                  ;	Harderr
 19457                                  ; Outputs:
 19458                                  ;	Of HARDERR
 19459                                  ; AX may be modified prior to call to HARDERR.
 19460                                  ; No other registers altered.
 19461                                  ;
 19462                                  ;---------------------------------------------------------------------------
 19463                                  
 19464                                  HARDERRRW:
 19465                                  	;cmp	al,0Fh
 19466 00004217 3C0F                    	CMP	AL,error_I24_wrong_disk
 19467 00004219 7512                    	JNZ	short DO_ERR				; Nothing to do
 19468                                  
 19469                                  	; MSDOS 3.3
 19470                                  	;push	ds
 19471                                  	;push	si
 19472                                  	;lds	si,[ss:CALLVIDRW]
 19473                                  	;mov	[ss:EXTERRPT+2], ds
 19474                                  	;mov	[ss:EXTERRPT], si
 19475                                  	;pop	si
 19476                                  	;pop	ds
 19477                                  
 19478                                  	; MSDOS 6.0
 19479 0000421B 50                      	push	ax
 19480 0000421C 36A1[1C03]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 19481 00004220 36A3[D602]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 19482 00004224 36A1[1E03]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 19483 00004228 36A3[D802]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 19484 0000422C 58                      	pop	ax
 19485                                  DO_ERR:
 19486 0000422D E81C16                  	call	HARDERR
 19487 00004230 C3                      	retn
 19488                                  
 19489                                  ; 24/07/2018 - Retro DOS v3.0
 19490                                  
 19491                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 19492                                  ;----------------------------------------------------------------------------
 19493                                  ;
 19494                                  ; Procedure Name : SETUP
 19495                                  ;
 19496                                  ; Inputs:
 19497                                  ;	ES:DI point to SFT (value also in THISSFT)
 19498                                  ;	DMAAdd contains transfer address
 19499                                  ;	CX = Byte count
 19500                                  ;	DS = DOSDATA
 19501                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 19502                                  ;		2nd of caller of caller.
 19503                                  ; Outputs:
 19504                                  ;	    CX = byte count
 19505                                  ;	    [THISDPB] = Base of drive parameters if file
 19506                                  ;		      = Pointer to device header if device or NET
 19507                                  ;	    ES:DI Points to SFT
 19508                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 19509                                  ;	    [TRANS] = 0 (No transfers yet)
 19510                                  ;	    BytPos = Byte position in file
 19511                                  ;
 19512                                  ;	The following fields are relevant to local files (not devices) only:
 19513                                  ;
 19514                                  ;	    SecPos = Position of first sector (local files only)
 19515                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 19516                                  ;	    [CLUSNUM] = First cluster (local files only)
 19517                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 19518                                  ;	    [THISDRV] = Physical unit number (local files only)
 19519                                  ;
 19520                                  ;      RETURNS ONE LEVEL UP WITH:
 19521                                  ;	   CX = 0
 19522                                  ;	   CARRY = Clear
 19523                                  ;	IF AN ERROR IS DETECTED
 19524                                  ; All other registers destroyed
 19525                                  ;----------------------------------------------------------------------------
 19526                                  
 19527                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 19528                                  
 19529                                  SETUP:
 19530                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 19531                                  
 19532                                  	;lds 	si,[es:di+7]
 19533 00004231 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 19534                                  
 19535                                  ;hkn; SS override
 19536 00004235 368C1E[2605]            	MOV	[SS:THISDPB+2],DS
 19537                                  
 19538                                  ;hkn; SS is DOSDATA
 19539 0000423A 16                      	push	ss
 19540 0000423B 1F                      	pop	ds
 19541                                  
 19542 0000423C 8936[2405]              	MOV	[THISDPB],SI
 19543                                  
 19544 00004240 8B1E[DA02]              	MOV	BX,[DMAADD]
 19545 00004244 891E[5005]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 19546 00004248 C606[0F05]00            	MOV	BYTE [TRANS],0		;No transferes
 19547                                  	;mov	ax,[es:di+15h]
 19548 0000424D 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 19549                                  	;mov	dx,[es:di+17h]
 19550 00004251 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 19551 00004255 8916[6205]              	MOV	[BYTPOS+2],DX	;Set it
 19552 00004259 A3[6005]                	MOV	[BYTPOS],AX
 19553                                  	;test	word [es:di+5],8080h
 19554 0000425C 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 19555 00004262 7536                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 19556 00004264 06                      	PUSH	ES
 19557 00004265 C42E[2405]              	LES	BP,[THISDPB]		;Point at the DPB
 19558                                  	;mov	bl,[es:bp+0]
 19559                                  	;MOV	BL,[ES:BP+DPB.drive]
 19560 00004269 268A5E00                	mov	bl,[es:bp]
 19561 0000426D 881E[1105]              	MOV	[THISDRV],BL		;Set THISDRV
 19562                                  	;mov	bx,[es:bp+2]
 19563 00004271 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 19564                                  
 19565                                  	; MSDOS 3.3
 19566 00004275 39DA                    	cmp	dx, bx
 19567 00004277 7336                    	jnb	short EOFERR
 19568 00004279 F7F3                    	div	bx
 19569 0000427B A3[5A05]                	mov	[SECPOS],ax
 19570 0000427E 8916[5E05]              	mov	[BYTSECPOS],dx
 19571 00004282 89C2                    	mov	dx,ax
 19572                                  	;and	al,[es:bp+4]
 19573 00004284 26224604                	AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 19574 00004288 A2[0E05]                	mov	[SECCLUSPOS],al
 19575 0000428B 89C8                    	mov	ax,cx
 19576                                  	;mov	cl,[es:bp+5]
 19577 0000428D 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 19578 00004291 D3EA                    	shr	dx,cl
 19579 00004293 8916[5405]              	mov	[CLUSNUM],dx
 19580 00004297 07                      	pop	es
 19581 00004298 89C1                    	mov	cx,ax
 19582                                  
 19583                                  	; MSDOS 6.0
 19584                                  ;M039: Optimized this section.
 19585                                          ;PUSH    CX                            ;SHR32 and DIV32 use CX.
 19586                                  	;call	DIV32			      ;DX:AX/BX = CX:AX + DX (rem)
 19587                                  	;MOV	[BYTSECPOS],DX
 19588                                  	;MOV	[SecPos],AX
 19589                                  	;MOV	[SecPos+2],CX
 19590                                  	;MOV	DX,CX
 19591                                  
 19592                                  	;MOV	BX,AX
 19593                                  	;;and	bl,[es:bp+4]
 19594                                  	;AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 19595                                  	;MOV	[SECCLUSPOS],BL
 19596                                  
 19597                                  	;call	SHR32			     ;(DX:AX SHR dpb_cluster_shift)
 19598                                  	;POP	CX			     ;CX = byte count.
 19599                                  	;JNZ	short EOFERR		     ;cluster number above 64k
 19600                                  	;CMP	AX,[ES:BP+DPB.MAX_CLUSTER]   ;>32mb    if > disk size ;AN000;
 19601                                  	;JA	short EOFERR		     ;>32mb    then EOF       ;AN000;
 19602                                  
 19603                                  	;MOV	[CLUSNUM],AX
 19604                                  	;POP	ES			     ; ES:DI point to SFT
 19605                                  ;M039
 19606                                  
 19607                                  NOSETSTUFF:
 19608 0000429A 89C8                    	MOV	AX,CX		; AX = Byte count.
 19609 0000429C 0306[DA02]              	ADD	AX,[DMAADD]	 ; See if it will fit in one segment
 19610 000042A0 730C                    	JNC	short setup_OK		; Must be less than 64K
 19611 000042A2 A1[DA02]                	MOV	AX,[DMAADD]
 19612 000042A5 F7D8                    	NEG	AX		; Amount of room left in segment (know
 19613                                  				;    less than 64K since max value of CX
 19614                                  				;    is FFFF).
 19615 000042A7 7501                    	JNZ	short NoDec
 19616 000042A9 48                      	DEC	AX
 19617                                  NoDec:
 19618 000042AA 89C1                    	MOV	CX,AX		; Can do this much
 19619 000042AC E309                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 19620                                  setup_OK:
 19621 000042AE C3                      	retn
 19622                                  
 19623                                  EOFERR:
 19624 000042AF 07                      	POP	ES		; ES:DI point to SFT
 19625 000042B0 31C9                    	XOR	CX,CX		; No bytes read
 19626                                  ;;;;;;;;;;; 7/18/86
 19627                                  	; MSDOS 3.3
 19628 000042B2 C606[8C0F]01            	MOV	BYTE [DISK_FULL],1 ; set disk full flag
 19629                                  ;;;;;;;;;;;
 19630                                  NOROOM:
 19631 000042B7 5B                      	POP	BX		; Kill return address
 19632 000042B8 F8                      	CLC
 19633 000042B9 C3                      	retn			; RETURN TO CALLER OF CALLER
 19634                                  
 19635                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 19636                                  ;---------------------------------------------------------------------------
 19637                                  ;
 19638                                  ; Procedure Name : BREAKDOWN
 19639                                  ;
 19640                                  ; Inputs:
 19641                                  ;	CX = Length of disk transfer in bytes
 19642                                  ;	ES:BP = Base of drive parameters
 19643                                  ;	[BYTSECPOS] = Byte position within first sector
 19644                                  ;	DS = DOSDATA
 19645                                  ; Outputs:
 19646                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 19647                                  ;	[SECCNT] = No. of whole sectors to transfer
 19648                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 19649                                  ; AX, BX, DX destroyed. No other registers affected.
 19650                                  ;---------------------------------------------------------------------------
 19651                                  
 19652                                  BREAKDOWN:
 19653 000042BA A1[5E05]                	MOV	AX,[BYTSECPOS]
 19654 000042BD 89CB                    	MOV	BX,CX
 19655 000042BF 09C0                    	OR	AX,AX
 19656 000042C1 740E                    	JZ	short SAVFIR	; Partial first sector?
 19657                                  	;sub	ax,[es:bp+2]
 19658 000042C3 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 19659 000042C7 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 19660 000042C9 29C3                    	SUB	BX,AX		; Subtract from total length
 19661 000042CB 7304                    	JAE	short SAVFIR
 19662 000042CD 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 19663 000042CF 31DB                    	XOR	BX,BX		; And no bytes are left
 19664                                  SAVFIR:
 19665 000042D1 A3[6405]                	MOV	[BYTCNT1],AX
 19666 000042D4 89D8                    	MOV	AX,BX
 19667 000042D6 31D2                    	XOR	DX,DX
 19668                                  	;div	word [ES:BP+2]
 19669 000042D8 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 19670 000042DC A3[6805]                	MOV	[SECCNT],AX
 19671 000042DF 8916[6605]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 19672                                  	; MSDOS 3.3
 19673                                  ;	OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 19674                                  ;	retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 19675                                  ;	CMP	AX,1
 19676                                  ;	retnz
 19677                                  ;	MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 19678                                  ;	MOV	[BYTCNT2],AX
 19679                                  ;	MOV	[SECCNT],DX	; DX = 0
 19680                                  _RET45:
 19681 000042E3 C3                      	retn
 19682                                  
 19683                                  ;----------------------------------------------------------------------------
 19684                                  ;
 19685                                  ; Procedure Name : READ_LOCK_VIOLATION
 19686                                  ;
 19687                                  ; ES:DI points to SFT. This entry used by NET_READ
 19688                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 19689                                  ; Else do retrys.
 19690                                  ; ES:DI,DS,CX preserved
 19691                                  ;
 19692                                  ;----------------------------------------------------------------------------
 19693                                  
 19694                                  READ_LOCK_VIOLATION:
 19695 000042E4 C606[1005]00            	MOV	byte [READOP],0
 19696                                  ERR_ON_CHECK:
 19697                                  	;test	word [es:di+2],8000h
 19698 000042E9 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 19699 000042EF 750E                    	JNZ	short HARD_ERR
 19700 000042F1 51                      	PUSH	CX
 19701 000042F2 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 19702                                  	;and	cl,0F0h
 19703 000042F6 80E1F0                  	AND	CL,SHARING_MASK
 19704                                  	;cmp	cl,0
 19705 000042F9 80F900                  	CMP	CL,SHARING_COMPAT
 19706 000042FC 59                      	POP	CX
 19707 000042FD 7505                    	JNE	short NO_HARD_ERR
 19708                                  HARD_ERR:
 19709 000042FF E8FD2F                  	call	LOCK_VIOLATION
 19710 00004302 73DF                    	jnc	short _RET45		; User wants Retrys
 19711                                  NO_HARD_ERR:
 19712 00004304 31C9                    	XOR	CX,CX			;No bytes transferred
 19713                                  	;mov	ax, 21h
 19714 00004306 B82100                  	MOV	AX,error_lock_violation
 19715 00004309 F9                      	STC
 19716 0000430A C3                      	retn
 19717                                  
 19718                                  ;----------------------------------------------------------------------------
 19719                                  ;
 19720                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 19721                                  ;
 19722                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 19723                                  ; This entry used by NET_WRITE
 19724                                  ;
 19725                                  ;----------------------------------------------------------------------------
 19726                                  
 19727                                  WRITE_LOCK_VIOLATION:
 19728 0000430B C606[1005]01            	MOV	byte [READOP],1
 19729 00004310 EBD7                    	JMP	short ERR_ON_CHECK
 19730                                  
 19731                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 19732                                  ;----------------------------------------------------------------------------
 19733                                  ;
 19734                                  ; Procedure Name : DISKREAD
 19735                                  ;
 19736                                  ; Inputs:
 19737                                  ;	Outputs of SETUP
 19738                                  ; Function:
 19739                                  ;	Perform disk read
 19740                                  ; Outputs:
 19741                                  ;    Carry clear
 19742                                  ;	CX = No. of bytes read
 19743                                  ;	ES:DI point to SFT
 19744                                  ;	SFT offset and cluster pointers updated
 19745                                  ;    Carry set
 19746                                  ;	CX = 0
 19747                                  ;	ES:DI point to SFT
 19748                                  ;	AX has error code
 19749                                  ;----------------------------------------------------------------------------
 19750                                  
 19751                                  ;hkn; called from disk.asm. DS already set up.
 19752                                  
 19753                                  DISKREAD:
 19754                                  	;mov	ax,[es:di+11h]
 19755 00004312 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 19756                                  	;mov	bx,[es:di+13h]
 19757 00004316 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 19758 0000431A 2B06[6005]              	SUB	AX,[BYTPOS]
 19759 0000431E 1B1E[6205]              	SBB	BX,[BYTPOS+2]
 19760 00004322 7226                    	JB	short RDERR		;Read starts past EOF
 19761 00004324 750A                    	JNZ	short ENUF		;More than 64k to EOF
 19762 00004326 09C0                    	OR	AX,AX
 19763 00004328 7420                    	JZ	short RDERR		;Read starts at EOF
 19764 0000432A 39C8                    	CMP	AX,CX
 19765 0000432C 7302                    	JAE	short ENUF		;I/O fits
 19766 0000432E 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 19767                                  ENUF:
 19768                                  	; MSDOS 3.3
 19769                                  	;test	byte [es:di+4],8
 19770                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 19771                                  	;jnz	short SET_ACC_ERR
 19772                                  	;call	LOCK_CHECK
 19773                                  	;jnb	short _READ_OK
 19774                                  	;call	READ_LOCK_VIOLATION
 19775                                  	;jnb	short ENUF
 19776                                  	;retn
 19777                                  
 19778                                  	; MSDOS 6.0
 19779 00004330 E876FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 19780 00004333 7301                    	JNC	short _READ_OK 		; There are no locks
 19781 00004335 C3                      	retn
 19782                                  
 19783                                  _READ_OK:
 19784 00004336 C42E[2405]              	LES	BP,[THISDPB]
 19785 0000433A E87DFF                  	CALL	BREAKDOWN
 19786 0000433D 8B0E[5405]              	MOV	CX,[CLUSNUM]
 19787 00004341 E86E0F                  	call	FNDCLUS
 19788                                       	; MSDOS 6.0			;M022 conditional removed here
 19789 00004344 720F                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 19790                                  					; migrated from 330a - HKN
 19791 00004346 09C9                    	OR	CX,CX
 19792 00004348 7414                    	JZ	short SKIPERR
 19793                                  RDERR:
 19794 0000434A B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 19795 0000434C E99E01                  	jmp	WRTERR22
 19796                                  
 19797                                  ;RDLASTJ: 
 19798                                  	;JMP	RDLAST                  ;M039
 19799                                  
 19800                                  SETSFTJ2: 
 19801 0000434F E9E300                  	JMP	SETSFT
 19802                                  
 19803                                  CANOT_READ:
 19804                                  	; MSDOS 3.3
 19805 00004352 59                      	POP	CX		;M039.
 19806                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19807 00004353 59                      	POP	CX              ;Clean stack.
 19808 00004354 5B                      	POP	BX
 19809                                  
 19810                                  	;entry	SET_ACC_ERR_DS
 19811                                  SET_ACC_ERR_DS:
 19812                                  ;hkn; SS is DOSDATA
 19813                                  	;Context DS
 19814 00004355 16                      	push	ss
 19815 00004356 1F                      	pop	ds
 19816                                  
 19817                                  	;entry	SET_ACC_ERR
 19818                                  SET_ACC_ERR:
 19819 00004357 31C9                    	XOR	CX,CX
 19820                                  	;mov	ax,5
 19821 00004359 B80500                  	MOV	AX,error_access_denied
 19822 0000435C F9                      	STC
 19823 0000435D C3                      	retn
 19824                                  
 19825                                  SKIPERR:
 19826 0000435E 8916[5205]              	MOV	[LASTPOS],DX
 19827 00004362 891E[5405]              	MOV	[CLUSNUM],BX
 19828 00004366 833E[6405]00            	CMP	word [BYTCNT1],0
 19829 0000436B 7405                    	JZ	short RDMID
 19830 0000436D E8B80F                  	call	BUFRD
 19831 00004370 72E3                    	JC	short SET_ACC_ERR_DS
 19832                                  RDMID:
 19833 00004372 833E[6805]00            	CMP	word [SECCNT],0
 19834 00004377 0F849D00                	JZ	RDLAST ; 10/08/2018
 19835 0000437B E82610                  	call	NEXTSEC
 19836 0000437E 72CF                    	JC	short SETSFTJ2
 19837 00004380 C606[0F05]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 19838                                  ONSEC:
 19839 00004385 8A16[0E05]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 19840 00004389 8B0E[6805]              	MOV	CX,[SECCNT]
 19841 0000438D 8B1E[5405]              	MOV	BX,[CLUSNUM]
 19842                                  RDLP:
 19843 00004391 E84110                  	call	OPTIMIZE
 19844 00004394 72BF                    	JC	short SET_ACC_ERR_DS
 19845 00004396 57                      	PUSH	DI                      ;DI = Next physical cluster.
 19846 00004397 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 19847 00004398 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 19848                                  	;mov	byte [ALLOWED],38h
 19849 00004399 C606[F702]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 19850 0000439E 8E1E[DC02]              	MOV	DS,[DMAADD+2]
 19851                                  
 19852 000043A2 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 19853 000043A3 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 19854                                  
 19855                                  	; MSDOS 6.0
 19856                                  	;call	SET_RQ_SC_PARMS 	 ;LB. do this for SC ;AN000;
 19857                                  
 19858                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19859 000043A4 E8C9FD                  	call	DREAD
 19860                                  
 19861                                  	; MSDOS 3.3 
 19862 000043A7 5B                      	pop	bx
 19863 000043A8 5A                      	pop	dx
 19864 000043A9 72A7                    	jc	short CANOT_READ
 19865 000043AB 01D3                    	add	bx,dx	; (bx = Extent end)
 19866 000043AD 268A4600                	mov	al,[es:bp] ; mov al,[es:bp+0]
 19867                                  	;mov	al,[ES:BP+DPB.DRIVE] 
 19868 000043B1 E8F119                  	call	SETVISIT
 19869                                  	; ->***
 19870                                  
 19871                                  ;M039
 19872                                  	; MSDOS 6.0 
 19873                                  	;pop	cx
 19874                                  	;pop	dx
 19875                                  	;pop	WORD [TEMP_VAR]
 19876                                  	;jc	short CANOT_READ
 19877                                  
 19878                                  	;mov	[TEMP_VAR2],ds
 19879                                  
 19880                                  ;       CX = # of contiguous sectors read.  (These constitute a block of
 19881                                  ;            sectors, also termed an "Extent".)
 19882                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 19883                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 19884                                  ;       ES:BP -> Drive Parameter Block (DPB).
 19885                                  ;
 19886                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 19887                                  ;	buffers must be "read" into the transfer memory block, so that the
 19888                                  ;       transfer memory reflects the most recent data.
 19889                                  
 19890                                  	;call    DskRdBufScan
 19891                                  
 19892                                  	;;Context DS
 19893                                  	;push	ss
 19894                                  	;pop	ds
 19895                                          
 19896                                  	;pop	cx
 19897                                          ;pop	bx
 19898                                  
 19899                                  ;       CX = # of sector remaining.
 19900                                  ;       BX = Next physical cluster.
 19901                                  ;M039
 19902                                  	; 25/07/2018 - Retro DOS v3.0
 19903                                  	; ***->
 19904                                  	; MSDOS 3.3
 19905                                  	; IBMDOS.COM (1987) - Offset 42BDh
 19906                                  bufq:
 19907                                  ;	DX = Extent start.
 19908                                  ;	BX = Extent end.
 19909                                  ;	 AL = Drive #.
 19910                                  ;     DS:DI-> 1st buffer in queue.
 19911                                  
 19912                                  	;or	byte [di+5],20h
 19913 000043B4 804D0520                	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 19914                                  	;cmp	al,[di+4]	
 19915 000043B8 3A4504                  	cmp	al,[DI+BUFFINFO.buf_ID]
 19916 000043BB 7541                    	jnz	short bufq3
 19917                                  	;cmp	[di+6],dx
 19918 000043BD 395506                  	cmp	[DI+BUFFINFO.buf_sector],dx
 19919 000043C0 723C                    	jb	short bufq3	; Jump if Extent start > buffer sector.
 19920                                  	;cmp	[di+6],bx
 19921 000043C2 395D06                  	cmp	[DI+BUFFINFO.buf_sector],bx
 19922 000043C5 7337                    	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 19923                                  	
 19924                                  	; Buffer sector is in the Extent (contiguous sectors to read)
 19925                                  
 19926                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 19927                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 19928                                  ;       as MRU (Most Recently Used).
 19929                                  
 19930                                  	;test	byte [di+5],40h
 19931 000043C7 F6450540                	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 19932 000043CB 742E                    	jz	short bufq2	; clear buffer, check the next buff sec
 19933 000043CD 58                      	pop	ax ; transfer address
 19934 000043CE 50                      	push	ax
 19935 000043CF 57                      	push	di
 19936 000043D0 52                      	push	dx
 19937                                  	;sub	dx,[di+6]
 19938 000043D1 2B5506                  	sub	dx,[DI+BUFFINFO.buf_sector]
 19939 000043D4 F7DA                    	neg	dx
 19940                                  
 19941                                  ;       DX = offset (in sectors) of buffer sector within Transfer memory
 19942                                  ;            block.
 19943                                  
 19944 000043D6 89FE                    	mov	si,di
 19945 000043D8 89C7                    	mov	di,ax
 19946 000043DA 89D0                    	mov	ax,dx
 19947                                  	;mov	cx,[es:bp+6]	
 19948 000043DC 268B4E02                	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 19949 000043E0 F7E1                    	mul	cx
 19950 000043E2 01C7                    	add	di,ax
 19951                                  
 19952                                  	; 06/07/2019
 19953                                  	;lea	si,[si+16]
 19954 000043E4 8D7410                  	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 19955 000043E7 D1E9                           	shr	cx,1
 19956 000043E9 06                      	push	es
 19957 000043EA 368E06[DC02]            	mov	es,[SS:DMAADD+2]
 19958                                  
 19959                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 19960                                  ;       DS:SI-> Buffer sector data.
 19961                                  ;       ES:DI-> Destination within Transfer memory block.
 19962                                  
 19963 000043EF F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 19964                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 19965                                  	;rep	movsb                   ;Copy last byte.
 19966 000043F1 7301                    	jnc	short bufq1
 19967 000043F3 A4                      	movsb
 19968                                  bufq1:
 19969 000043F4 07                      	pop	es
 19970 000043F5 5A                      	pop	dx
 19971 000043F6 5F                      	pop	di
 19972 000043F7 268A4600                	mov	al,[es:bp]  ; mov al,[es:bp+0]
 19973                                  	;mov	al,[ES:BP+DPB.DRIVE]
 19974                                  bufq2:
 19975 000043FB E8D419                  	call	SCANPLACE
 19976                                  bufq3:
 19977 000043FE E8BD19                  	call	SKIPVISIT
 19978 00004401 75B1                    	jnz	short bufq
 19979                                  	
 19980 00004403 16                      	push	ss
 19981 00004404 1F                      	pop	ds
 19982 00004405 59                      	pop	cx
 19983 00004406 59                      	pop	cx
 19984 00004407 5B                      	pop	bx	
 19985                                  bufq4:
 19986 00004408 E30E                    	JCXZ	RDLAST
 19987 0000440A E82D16                  	call	IsEOF			; test for eof on fat size
 19988 0000440D 7326                    	JAE	short SETSFT
 19989 0000440F B200                    	MOV	DL,0
 19990 00004411 FF06[5205]              	INC	word [LASTPOS]		; We'll be using next cluster
 19991 00004415 E979FF                  	JMP	RDLP
 19992                                  
 19993                                  RDLAST:
 19994 00004418 A1[6605]                	MOV	AX,[BYTCNT2]
 19995 0000441B 09C0                    	OR	AX,AX
 19996 0000441D 7416                    	JZ	short SETSFT
 19997 0000441F A3[6405]                	MOV	[BYTCNT1],AX
 19998 00004422 E87F0F                  	call	NEXTSEC
 19999 00004425 720E                    	JC	short SETSFT
 20000 00004427 C706[5E05]0000          	MOV	word [BYTSECPOS],0
 20001 0000442D E8F80E                  	call	BUFRD
 20002                                  	; 10/08/2018
 20003 00004430 7303                    	JNC	short SETSFT
 20004 00004432 E920FF                  	JMP	SET_ACC_ERR_DS
 20005                                  
 20006                                  ;------------------------------------------------------------------------------
 20007                                  ;
 20008                                  ; Procedure Name : SETSFT
 20009                                  ; Inputs:
 20010                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 20011                                  ;		and set cluster fields
 20012                                  ; Function:
 20013                                  ;	Update [THISSFT] based on the transfer
 20014                                  ; Outputs:
 20015                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 20016                                  ;	ES:DI points to [THISSFT]
 20017                                  ;	CX No. of bytes transferred
 20018                                  ;	Carry clear
 20019                                  ;
 20020                                  ;----------------------------------------------------------------------------
 20021                                  
 20022                                  	;entry	SETSFT
 20023                                  
 20024                                  ; 26/07/2018 - Retro DOS v3.0
 20025                                  SETSFT:
 20026 00004435 C43E[3605]              	LES	DI,[THISSFT]
 20027                                  
 20028                                  ; Same as SETSFT except ES:DI already points to SFT
 20029                                  	;entry	SETCLUS
 20030                                  SETCLUS:	
 20031 00004439 8B0E[5005]              	MOV	CX,[NEXTADD]
 20032 0000443D 2B0E[DA02]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 20033                                  	;test	word [es:di+5],80h
 20034 00004441 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20035 00004447 750E                    	JNZ	short ADDREC		; don't set clusters if device
 20036 00004449 A1[5405]                	MOV	AX,[CLUSNUM]
 20037                                  	;mov	[es:di+1Bh],ax
 20038 0000444C 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 20039 00004450 A1[5205]                	MOV	AX,[LASTPOS]
 20040                                  	;mov	[es:di+19h],ax
 20041 00004453 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 20042                                  
 20043                                  ;----------------------------------------------------------------------------
 20044                                  ;
 20045                                  ; Procedure : AddRec
 20046                                  ; Inputs:
 20047                                  ;	ES:DI points to SFT
 20048                                  ;	CX is No. Bytes transferred
 20049                                  ; Function:
 20050                                  ;	Update the SFT offset based on the transfer
 20051                                  ; Outputs:
 20052                                  ;	sf_position updated to point to first byte after transfer
 20053                                  ;	ES:DI points to SFT
 20054                                  ;	CX No. of bytes transferred
 20055                                  ;	Carry clear
 20056                                  ;----------------------------------------------------------------------------
 20057                                  
 20058                                  	;entry	AddRec
 20059                                  ADDREC:
 20060 00004457 E309                    	JCXZ	RET28		; If no records read,  don't change position
 20061                                  	;add	[es:di+15h],cx
 20062 00004459 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 20063                                  	;adc	word [es:di+17h], 0
 20064 0000445D 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 20065                                  RET28:	
 20066 00004462 F8                      	CLC
 20067 00004463 C3                      	retn
 20068                                  
 20069                                  ; 25/07/2018
 20070                                  ; MSDOS 6.0
 20071                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 20072                                  ;----------------------------------------------------------------------------
 20073                                  ;
 20074                                  ; Procedure Name : DskRdBufScan
 20075                                  ;
 20076                                  ; Inputs:
 20077                                  ;       CX = # of contiguous sectors read.  (These constitute a block of
 20078                                  ;            sectors, also termed an "Extent".)
 20079                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20080                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 20081                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20082                                  ;
 20083                                  ; Function:
 20084                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 20085                                  ;	"read" into the transfer memory block, so that the transfer memory
 20086                                  ;	reflects the most recent data.
 20087                                  ;
 20088                                  ; Outputs:
 20089                                  ;       Transfer memory updated as required.
 20090                                  ;
 20091                                  ; Uses:
 20092                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 20093                                  ;       SS override for all global variables.
 20094                                  ;
 20095                                  ; Notes:
 20096                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 20097                                  ;	than the FIRST.
 20098                                  ;----------------------------------------------------------------------------
 20099                                  ;M039: Created
 20100                                  
 20101                                  ;procedure   DskRdBufScan,NEAR
 20102                                  ;
 20103                                  ;ASSUME  DS:NOTHING
 20104                                  ;
 20105                                  ;	cmp	[DirtyBufferCount],0	;Any dirty buffers?
 20106                                  ;	je	bufx			; -no, skip all work.
 20107                                  ;
 20108                                  ;       mov     bx,[HIGH_SECTOR]
 20109                                  ;       mov     si,bx
 20110                                  ;       add     cx,dx
 20111                                  ;       adc     si,0
 20112                                  ;
 20113                                  ;	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 20114                                  ;       mov     ax,[di].buf_prev
 20115                                  ;       mov     [FIRST_BUFF_ADDR],ax
 20116                                  ;
 20117                                  ;       Assert  ISDPB,<ES,BP>,"DISKREAD/bufchk"
 20118                                  ;	mov	al,es:[bp].dpb_drive
 20119                                  ;
 20120                                  ;;            BX:DX = Extent start.
 20121                                  ;;            SI:CX = Extent end + 1.
 20122                                  ;;               AL = Drive #.
 20123                                  ;;            DS:DI-> 1st buffer in queue.
 20124                                  ;;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 20125                                  ;
 20126                                  ;bufq:	cmp     al,BYTE PTR [di.buf_ID] ;Same drive?
 20127                                  ;	jne     bufq1        		;  -no, jump.
 20128                                  ;
 20129                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20130                                  ;       ja	bufq1			;Jump if Extent start > buffer sector.
 20131                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20132                                  ;       ja	bufq2                   ;Jump if Extent end >= buffer sector.
 20133                                  ;
 20134                                  ;bufq1:	cmp     di,[FIRST_BUFF_ADDR]    ;Scanned entire buffer queue?
 20135                                  ;       mov     di,[di].buf_next        ; Set-up for next buffer.
 20136                                  ;       jne     bufq                    ; -no, do next buffer
 20137                                  ;
 20138                                  ;bufx:   return                          ;Exit.
 20139                                  ;
 20140                                  ;;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 20141                                  ;;	transfer memory; otherwise, just re-position it in the buffer queue
 20142                                  ;;       as MRU (Most Recently Used).
 20143                                  ;
 20144                                  ;bufq2:	SaveReg <ax>
 20145                                  ;	testb   [di.buf_flags],buf_dirty ;Buffer dirty?
 20146                                  ;	jz      bufq3                    ; -no, jump.
 20147                                  ;
 20148                                  ;        SaveReg <cx,dx,si,di,es>
 20149                                  ;
 20150                                  ;	mov     ax,dx
 20151                                  ;	sub	ax, word ptr [di].buf_sector
 20152                                  ;	neg	ax
 20153                                  ;
 20154                                  ;;       AX = offset (in sectors) of buffer sector within Transfer memory
 20155                                  ;;            block.  (Note: the upper word of the sector # may be ignored
 20156                                  ;;	     since no more than 64k bytes will ever be read.  This 64k limit
 20157                                  ;;            is imposed by the input parameters of the disk read operation.)
 20158                                  ;
 20159                                  ;	lea	si,[di].BUFINSIZ	;DS:SI -> buffer data.
 20160                                  ;	mov     cx,es:[bp].dpb_sector_size ;CX = sector size (in bytes).
 20161                                  ;	mul     cx			;AX = offset (in bytes) of buf. sector
 20162                                  ;	mov     di,WORD PTR [TEMP_VAR]
 20163                                  ;	add	di,ax
 20164                                  ;	mov	es,WORD PTR [TEMP_VAR2]
 20165                                  ;	shr	cx,1
 20166                                  ;
 20167                                  ;;	   CX = sector size (in WORDs); CF=1 if odd # of bytes.
 20168                                  ;;       DS:SI-> Buffer sector data.
 20169                                  ;;       ES:DI-> Destination within Transfer memory block.
 20170                                  ;
 20171                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 20172                                  ;	adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 20173                                  ;	rep	movsb                   ;Copy last byte.
 20174                                  ;	RestoreReg <es,di,si,dx,cx>
 20175                                  ;
 20176                                  ;       DS:DI -> current buffer.
 20177                                  ;
 20178                                  ;bufq3:	mov     ax,di			;DS:AX -> Current buffer.
 20179                                  ;       invoke  SCANPLACE
 20180                                  ;       cmp	ax,[FIRST_BUFF_ADDR]    ;Last buffer?
 20181                                  ;       RestoreReg <ax>
 20182                                  ;       jnz    	bufq                   	; -no, jump.
 20183                                  ;       jmp     short bufx              ; -yes, exit.
 20184                                  ;
 20185                                  ;EndProc DskRdBufScan
 20186                                  
 20187                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 20188                                  ;----------------------------------------------------------------------------
 20189                                  ;
 20190                                  ; Procedure Name : DISKWRITE
 20191                                  ;
 20192                                  ; Inputs:
 20193                                  ;       Outputs of SETUP
 20194                                  ; Function:
 20195                                  ;       Perform disk write
 20196                                  ; Outputs:
 20197                                  ;    Carry clear
 20198                                  ;       CX = No. of bytes read
 20199                                  ;       ES:DI point to SFT
 20200                                  ;       SFT offset and cluster pointers updated
 20201                                  ;    Carry set
 20202                                  ;       CX = 0
 20203                                  ;       ES:DI point to SFT
 20204                                  ;       AX has error code
 20205                                  ;----------------------------------------------------------------------------
 20206                                  
 20207                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 20208                                  
 20209                                  DISKWRITE:
 20210                                  	; MSDOS 3.3
 20211                                  	; IBMDOS.COM - Offset 436Dh
 20212                                  	;;test	byte [es:di+4],8
 20213                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 20214                                  	;jz	short write_cont
 20215                                  	;jmp	SET_ACC_ERR_DS
 20216                                  ;write_cont:
 20217                                  	;push	cx
 20218                                  	;or	cx, cx
 20219                                  	;jnz	short Not_Truncate
 20220                                  	;;mov	cx,-1
 20221                                  	;dec	cx
 20222                                  ;Not_Truncate:
 20223                                  	;call	LOCK_CHECK
 20224                                  	;pop	cx
 20225                                  	;jnb	short _WRITE_OK
 20226                                  	;call	WRITE_LOCK_VIOLATION
 20227                                  	;jnb	short DISKWRITE
 20228                                  	;retn
 20229                                  
 20230                                  	; MSDOS 6.0
 20231 00004464 E824FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 20232                                  	; 19/08/2018
 20233 00004467 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 20234 00004469 C3                      	retn
 20235                                  
 20236                                  WRTEOFJ:
 20237 0000446A E99501                  	JMP     WRTEOF
 20238                                  
 20239                                  _WRITE_OK:
 20240                                   	; 27/07/2018
 20241                                  	; IBMDOS.COM - Offset 438Eh
 20242                                  	
 20243                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20244                                  	;and	word [es:di+5],0BFBFh
 20245 0000446D 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 20246                                  				; Mark file as dirty, clear no date on close
 20247                                  	; MSDOS 6.0
 20248                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 20249                                          ;MOV	[TEMP_VAR],AX                           ;M039
 20250                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 20251                                          ;MOV	[TEMP_VAR2],AX                          ;M039
 20252                                  
 20253                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 20254                                  
 20255                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20256 00004473 C42E[2405]              	LES     BP,[THISDPB]
 20257                                  
 20258 00004477 E840FE                  	call	BREAKDOWN
 20259                                  
 20260 0000447A A1[6005]                	MOV     AX,[BYTPOS]
 20261 0000447D 8B16[6205]              	MOV     DX,[BYTPOS+2]
 20262 00004481 E3E7                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 20263 00004483 01C8                    	ADD     AX,CX
 20264 00004485 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 20265                                  
 20266                                  	;mov	bx,[es:bp+2]
 20267 00004488 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 20268                                  
 20269                                  	; MSDOS 6.0
 20270                                  	;CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 20271                                  	;MOV	SI,AX
 20272                                          ;MOV	[HIGH_SECTOR],CX
 20273                                  
 20274                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 20275                                  
 20276                                  	;OR	DX,DX
 20277                                  	;PUSH	DX			;M039: Free DX for use by SHR32
 20278                                  	;MOV	DX,CX			;M039
 20279                                  	;JNZ	short CALCLUS
 20280                                  	;SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 20281                                  	;SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 20282                                  
 20283                                  	; MSDOS 3.3
 20284 0000448C 39DA                    	cmp	dx,bx
 20285 0000448E 7360                    	jnb	short WRTERR33
 20286 00004490 F7F3                    	div	bx
 20287 00004492 89C3                    	mov	bx,ax
 20288 00004494 09D2                    	OR	DX,DX
 20289 00004496 7501                    	JNZ	short CALCLUS
 20290 00004498 48                      	dec	ax
 20291                                  
 20292                                  CALCLUS:
 20293                                  	; MSDOS 3.3
 20294                                  	;mov	cl,[es:bp+5]
 20295 00004499 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 20296 0000449D D3E8                    	shr	ax,cl
 20297 0000449F 50                      	push	ax
 20298 000044A0 52                      	push	dx
 20299 000044A1 06                      	push	es
 20300 000044A2 C43E[3605]              	les	di,[THISSFT]
 20301                                  	;mov	ax,[es:di+11h]
 20302                                  	;mov	dx,[es:di+13h]
 20303 000044A6 268B4511                	mov	ax,[ES:DI+SF_ENTRY.sf_size]
 20304 000044AA 268B5513                	mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 20305 000044AE 07                      	pop	es
 20306                                  	;DX:AX = current file size (in bytes).
 20307                                  	;div	word [es:bp+2]
 20308 000044AF 26F77602                	div	word [ES:BP+DPB.SECTOR_SIZE]
 20309 000044B3 89C1                    	mov	cx,ax
 20310 000044B5 09D2                    	or	dx,dx
 20311 000044B7 7401                    	jz	short NORND
 20312 000044B9 40                      	inc	ax
 20313                                  
 20314                                  	; MSDOS 6.0
 20315                                  	;CALL	SHR32                   ;F.C. >32mb			;AN000;
 20316                                  	;POP	DX
 20317                                  
 20318                                  ;       AX = Last cluster to write.
 20319                                  ;       DX = # of bytes in last sector to write (the "tail").
 20320                                  ;       BX = ES:[BP.dpb_sector_size]
 20321                                  
 20322                                  	;PUSH	AX
 20323                                  	;PUSH	DX
 20324                                  ;M039
 20325                                  	;mov	dx,[TEMP_VAR2]
 20326                                  	;mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 20327                                  	;call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 20328                                  	;mov	[TEMP_VAR2],cx
 20329                                  	;mov	[VALSEC+2],cx
 20330                                  	;mov	cx,ax
 20331                                  	;mov	bx,si
 20332                                  
 20333                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 20334                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 20335                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 20336                                  ;                     DX = # of bytes in last sector of current file.
 20337                                  ;M039
 20338                                  	;OR	DX,DX
 20339                                  	;JZ	short NORND
 20340                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 20341                                  	;ADC	word [VALSEC+2],0
 20342                                  NORND:	
 20343                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20344 000044BA A3[5C05]                	MOV     [VALSEC],AX
 20345                                  
 20346                                  ;       [VALSEC] = Last sector of current file.
 20347                                  
 20348 000044BD 31C0                    	XOR     AX,AX
 20349 000044BF A3[7005]                	MOV     [GROWCNT],AX
 20350 000044C2 A3[7205]                	MOV     [GROWCNT+2],AX
 20351 000044C5 58                      	POP     AX
 20352                                  
 20353                                  	; MSDOS 6.0
 20354                                  	;MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 20355                                  	;CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb			;AN000;
 20356                                  	;JB	short NOGROW		;F.C. >32mb                             ;AN000;
 20357                                  	;JZ	short lowsec		;F.C. >32mb                             ;AN000;
 20358                                  	;SUB	BX,CX                   ;F.C. >32mb                             ;AN000;
 20359                                  	;SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors	;AN000;
 20360                                  	;JMP	short yesgrow           ;F.C. >32mb                             ;AN000;
 20361                                  ;lowsec:
 20362                                  	;MOV	DI,0			;F.C. >32mb
 20363                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20364 000044C6 29CB                    	SUB	BX,CX			; Number of full sectors
 20365 000044C8 723D                    	JB	short NOGROW
 20366 000044CA 742E                    	JZ	short TESTTAIL
 20367                                  ;yesgrow:
 20368                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20369 000044CC 89D1                    	MOV     CX,DX
 20370 000044CE 93                      	XCHG    AX,BX
 20371                                  	;mul	word [es:bp+2]
 20372 000044CF 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 20373                                  	
 20374                                  	; MSDOS 6.0
 20375                                  	;MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 20376                                  	;MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 20377                                  	;MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 20378                                  	;;mul	word [es:bp+2]
 20379                                  	;MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 20380                                  	
 20381                                  	;ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 20382                                  	;MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 20383                                  	;MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 20384                                  
 20385                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20386 000044D3 29C8                    	SUB     AX,CX           ; Take off current "tail"
 20387 000044D5 83DA00                  	SBB     DX,0            ; 32-bit extension
 20388 000044D8 01D8                    	ADD     AX,BX           ; Add on new "tail"
 20389 000044DA 83D200                  	ADC     DX,0            ; ripple tim's head off
 20390 000044DD EB21                    	JMP     SHORT SETGRW
 20391                                  
 20392                                  HAVSTART:
 20393                                  	;int 3
 20394 000044DF 89C1                    	MOV     CX,AX
 20395 000044E1 E8EE0D                  	call	SKPCLP
 20396                                  	;JCXZ	DOWRTJ
 20397 000044E4 E357                    	jcxz	DOWRT
 20398                                  
 20399 000044E6 E85D0F                  	call	ALLOCATE
 20400                                  	;JNC	short DOWRTJ
 20401 000044E9 7352                    	jnc	short DOWRT
 20402                                  
 20403                                  	;entry   WRTERR
 20404                                  WRTERR:
 20405 000044EB B40F                    	MOV     AH,0FH                          ;MS. write/data/fail/abort      ;AN000;
 20406                                  
 20407                                  	;entry WRTERR22
 20408                                  WRTERR22:
 20409 000044ED A0[1105]                	MOV     AL,[THISDRV]                    ;MS.                            ;AN000;
 20410                                  
 20411                                  	; 27/07/2018
 20412                                  WRTERR33:
 20413                                  	;MOV	CX,0                    	;No bytes transferred
 20414 000044F0 31C9                    	XOR     CX,CX
 20415                                  					
 20416 000044F2 C43E[3605]              	LES     DI,[THISSFT]
 20417                                  	;CLC	; 19/05/2019
 20418 000044F6 C3                      	retn
 20419                                  
 20420                                  ;DOWRTJ: 
 20421                                  ;	JMP     short DOWRT
 20422                                  
 20423                                  ACC_ERRWJ:
 20424                                  	; 10/08/2018
 20425                                  	;JMP	SET_ACC_ERRW
 20426 000044F7 E95BFE                  	jmp	SET_ACC_ERR_DS
 20427                                  
 20428                                  TESTTAIL:
 20429 000044FA 29D0                    	SUB     AX,DX
 20430 000044FC 7609                    	JBE	short NOGROW
 20431 000044FE 31D2                    	XOR     DX,DX
 20432                                  SETGRW:
 20433 00004500 A3[7005]                	MOV	[GROWCNT],AX
 20434 00004503 8916[7205]              	MOV	[GROWCNT+2],DX
 20435                                  NOGROW:
 20436 00004507 58                      	POP     AX
 20437 00004508 8B0E[5405]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 20438 0000450C E8A30D                  	call	FNDCLUS
 20439 0000450F 72E6                    	JC	short ACC_ERRWJ
 20440 00004511 891E[5405]              	MOV     [CLUSNUM],BX
 20441 00004515 8916[5205]              	MOV     [LASTPOS],DX
 20442                                  
 20443 00004519 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 20444 0000451B 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 20445 0000451D E3C0                    	JCXZ    HAVSTART        ; See if no more data
 20446 0000451F 51                      	PUSH    CX              ; No. of clusters short of first
 20447 00004520 89C1                    	MOV     CX,AX
 20448 00004522 E8210F                  	call	ALLOCATE
 20449 00004525 59                      	POP     CX
 20450 00004526 72C3                    	JC	short WRTERR
 20451 00004528 8B16[5205]              	MOV     DX,[LASTPOS]
 20452 0000452C 42                      	INC     DX
 20453 0000452D 49                      	DEC     CX
 20454 0000452E 7405                    	JZ	short NOSKIP
 20455 00004530 E89F0D                  	call	SKPCLP
 20456 00004533 72C2                    	JC	short ACC_ERRWJ
 20457                                  NOSKIP:
 20458 00004535 891E[5405]              	MOV     [CLUSNUM],BX
 20459 00004539 8916[5205]              	MOV     [LASTPOS],DX
 20460                                  DOWRT:
 20461 0000453D 833E[6405]00            	CMP     word [BYTCNT1],0
 20462 00004542 7409                    	JZ	short WRTMID
 20463 00004544 8B1E[5405]              	MOV     BX,[CLUSNUM]
 20464 00004548 E8140E                  	call	BUFWRT
 20465 0000454B 72AA                    	JC	short ACC_ERRWJ
 20466                                  	;JC	short SET_ACC_ERRW
 20467                                  WRTMID:
 20468 0000454D A1[6805]                	MOV     AX,[SECCNT]
 20469 00004550 09C0                    	OR      AX,AX
 20470 00004552 7471                    	JZ	short WRTLAST		;M039
 20471 00004554 0106[5A05]              	ADD     [SECPOS],AX
 20472                                  	; MSDOS 6.0
 20473                                  	;ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 20474 00004558 E8490E                  	call	NEXTSEC
 20475 0000455B 729A                    	JC	short ACC_ERRWJ
 20476                                  	;JC	short SET_ACC_ERRW	;M039
 20477 0000455D C606[0F05]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 20478 00004562 8A16[0E05]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 20479 00004566 8B1E[5405]              	MOV     BX,[CLUSNUM]
 20480 0000456A 8B0E[6805]              	MOV     CX,[SECCNT]
 20481                                  WRTLP:
 20482 0000456E E8640E                  	call	OPTIMIZE
 20483 00004571 7284                    	JC	short ACC_ERRWJ
 20484                                  	;JC	short SET_ACC_ERRW
 20485                                  
 20486                                  ;M039
 20487                                  ;       DI = Next physical cluster.
 20488                                  ;       AX = # sectors remaining.
 20489                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 20490                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 20491                                  ;	     sectors, also termed an "Extent".)
 20492                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20493                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20494                                  ;
 20495                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 20496                                  ;	are in Extent; they are being over-written.
 20497                                  
 20498 00004573 57                      	push    di
 20499 00004574 50                      	push    ax
 20500                                  
 20501                                          ; MSDOS 6.0
 20502                                  	;call	DskWrtBufPurge          ;DS trashed.
 20503                                  ;ASSUME DS:NOTHING
 20504                                  ;M039
 20505                                  	; MSDOS 3.3
 20506                                  	; IBMDOS.COM (1987) - Offset 4497h
 20507 00004575 52                      	push	dx
 20508 00004576 53                      	push	bx
 20509 00004577 268A4600                	mov	al,[es:bp]
 20510                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 20511 0000457B 89CB                    	mov	bx,cx
 20512 0000457D 01D3                    	add	bx,dx	; (bx = Extent end)
 20513                                  
 20514                                  ;	DX = Extent start.
 20515                                  ;	BX = Extent end.
 20516                                  ;	 AL = Drive #.
 20517                                  
 20518 0000457F E82318                  	call	SETVISIT
 20519                                  
 20520                                  wbufq1:
 20521                                  	;or	byte [di+5],20h
 20522 00004582 804D0520                	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 20523                                  	;cmp	al,[di+4]	
 20524 00004586 3A4504                  	cmp	al,[DI+BUFFINFO.buf_ID]
 20525 00004589 7512                    	jnz	short wbufq2	; Jump if Extent start > buffer sector.
 20526                                  	;cmp	[di+6],dx
 20527 0000458B 395506                  	cmp	[DI+BUFFINFO.buf_sector],dx
 20528 0000458E 720D                    	jb	short wbufq2
 20529                                  	;cmp	[di+6],bx
 20530 00004590 395D06                  	cmp	[DI+BUFFINFO.buf_sector],bx
 20531 00004593 7308                    	jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 20532                                  
 20533                                  	; Buffer sector is in the Extent
 20534                                  
 20535                                  	;mov	word [di+4],20FFh
 20536 00004595 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],20FFh
 20537                                  					; .buf_ID,    AL = FFh (Free buffer)
 20538                                  					; .buf_flags, AH = 0, reset/clear
 20539 0000459A E83518                  	call	SCANPLACE
 20540                                  wbufq2:
 20541 0000459D E81E18                  	call	SKIPVISIT
 20542 000045A0 75E0                    	jnz	short wbufq1
 20543 000045A2 5B                      	pop	bx
 20544 000045A3 5A                      	pop	dx
 20545                                  	
 20546                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20547                                  ;hkn; SS override for DMAADD and ALLOWED
 20548 000045A4 368E1E[DC02]            	MOV     DS,[SS:DMAADD+2]
 20549                                  	;mov	byte [ss:ALLOWED],38h
 20550 000045A9 36C606[F702]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 20551                                  
 20552                                  ;	put logic from DWRITE in-line here so we can modify it
 20553                                  ;	for DISK FULL conditions.
 20554                                  
 20555                                  DWRITE_LUP:
 20556                                  	; MSDOS 6.0
 20557                                  	;call	DSKWRITE
 20558                                  	;jz	short DWRITE_OKAY
 20559                                  
 20560                                  ;;	int	3
 20561                                  	;cmp	al,error_handle_Disk_Full	; compressed volume full?
 20562                                  	;jz	short DWRITE_DISK_FULL
 20563                                  
 20564                                  ;;hkn; SS override
 20565                                  	;MOV	BYTE [SS:READOP],1
 20566                                  	;call	HARDERRRW
 20567                                  	;CMP	AL,1		; Check for retry
 20568                                  	;JZ	short DWRITE_LUP
 20569                                  	;CMP	AL,3		; Check for FAIL
 20570                                  	;CLC
 20571                                  	;JNZ	short DWRITE_OKAY ; Ignore
 20572                                  	;STC
 20573                                  
 20574                                  	; MSDOS 3.3
 20575 000045AF E81DFC                  	call	DWRITE
 20576                                  
 20577                                  DWRITE_OKAY:
 20578                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20579                                  
 20580 000045B2 59                      	POP     CX
 20581 000045B3 5B                      	POP     BX
 20582                                  
 20583                                  ;       CX = # sectors remaining.
 20584                                  ;       BX = Next physical cluster.
 20585                                  
 20586                                  ;hkn; SS override
 20587                                          ;Context DS
 20588 000045B4 16                      	push	ss
 20589 000045B5 1F                      	pop	ds
 20590                                  
 20591 000045B6 720A                    	JC      SET_ACC_ERRW
 20592 000045B8 E30B                    	JCXZ    WRTLAST
 20593 000045BA B200                    	MOV     DL,0
 20594 000045BC FF06[5205]              	INC     word [LASTPOS]	; We'll be using next cluster
 20595 000045C0 EBAC                    	JMP     short WRTLP
 20596                                  
 20597                                  	; 09/08/2018
 20598                                  	; MSDOS 6.0
 20599                                  ;DWRITE_DISK_FULL:
 20600                                  	;;Context DS		;SQ 3-5-93 DS must be setup on return!
 20601                                  	;push	ss
 20602                                  	;pop	ds
 20603                                  	;pop	cx		; unjunk stack
 20604                                  	;pop	bx
 20605                                  	;mov	byte [DISK_FULL],1
 20606                                  	;stc
 20607                                  	;jmp	short WRTERR	; go to disk full exit
 20608                                  
 20609                                  SET_ACC_ERRW:
 20610 000045C2 E990FD                  	jmp	SET_ACC_ERR_DS
 20611                                  
 20612                                  WRTLAST:
 20613 000045C5 A1[6605]                	MOV     AX,[BYTCNT2]
 20614 000045C8 09C0                    	OR      AX,AX
 20615 000045CA 7413                    	JZ	short FINWRT
 20616 000045CC A3[6405]                	MOV     [BYTCNT1],AX
 20617 000045CF E8D20D                  	call	NEXTSEC
 20618 000045D2 72EE                    	JC	short SET_ACC_ERRW
 20619 000045D4 C706[5E05]0000          	MOV     word [BYTSECPOS],0
 20620 000045DA E8820D                  	call	BUFWRT
 20621 000045DD 72E3                    	JC	short SET_ACC_ERRW
 20622                                  FINWRT:
 20623 000045DF C43E[3605]              	LES     DI,[THISSFT]
 20624 000045E3 A1[7005]                	MOV     AX,[GROWCNT]
 20625 000045E6 8B0E[7205]              	MOV     CX,[GROWCNT+2]
 20626 000045EA 09C0                    	OR      AX,AX
 20627 000045EC 7502                    	JNZ	short UPDATE_size
 20628 000045EE E30F                    	JCXZ    SAMSIZ
 20629                                  UPDATE_size:
 20630                                  	;add	[es:di+11h],ax
 20631 000045F0 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 20632                                  	;adc	[es:di+13h],cx
 20633 000045F4 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 20634                                  ;
 20635                                  ; Make sure that all other SFT's see this growth also.
 20636                                  ;
 20637 000045F8 B80100                  	MOV     AX,1
 20638                                  ;if installed
 20639                                  	;Call	JShare + 14 * 4
 20640 000045FB FF1E[9400]              	call    far [JShare+(14*4)]	; 14 = ShSU
 20641                                  ;else
 20642                                  ;	Call    ShSU
 20643                                  ;endif
 20644                                  
 20645                                  SAMSIZ:
 20646 000045FF E937FE                  	jmp	SETCLUS	; ES:DI already points to SFT
 20647                                  
 20648                                  WRTEOF:
 20649 00004602 89C1                    	MOV     CX,AX
 20650 00004604 09D1                    	OR      CX,DX
 20651 00004606 7464                    	JZ	short KILLFIL
 20652 00004608 83E801                  	SUB     AX,1
 20653 0000460B 83DA00                  	SBB     DX,0
 20654                                  
 20655                                  	; MSDOS 3.3
 20656                                  	;div	word [es:bp+2]
 20657 0000460E 26F77602                	div	word [ES:BP+DPB.SECTOR_SIZE]
 20658                                  	;mov	cl,[es:bp+5]
 20659 00004612 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 20660 00004616 D3E8                    	shr     ax,cl
 20661                                  
 20662                                  	; MSDOS 6.0
 20663                                  	;PUSH	BX
 20664                                  	;MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 20665                                  	;CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 20666                                  	;POP	BX			      ;F.C. >32mb			;AN000;
 20667                                  	;MOV	DX,CX			      ;M039
 20668                                          ;MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 20669                                  	;CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 20670                                  
 20671 00004618 89C1                    	MOV     CX,AX
 20672 0000461A E8950C                  	call	FNDCLUS
 20673                                  SET_ACC_ERRWJ2:
 20674 0000461D 72A3                    	JC	short SET_ACC_ERRW
 20675                                  
 20676 0000461F E326                    	JCXZ    RELFILE
 20677 00004621 E8220E                  	call	ALLOCATE
 20678 00004624 721E                    	JC	short WRTERRJ              ;;;;;;;;; disk full
 20679                                  
 20680                                  UPDATE:
 20681 00004626 C43E[3605]              	LES	DI,[THISSFT]
 20682 0000462A A1[6005]                	MOV	AX,[BYTPOS]
 20683                                  	;mov	[es:di+11h],ax
 20684 0000462D 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 20685 00004631 A1[6205]                	MOV	AX,[BYTPOS+2]
 20686                                  	;mov	[es:di+13h],ax
 20687 00004634 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 20688                                  ;
 20689                                  ; Make sure that all other SFT's see this growth also.
 20690                                  ;
 20691 00004638 B80200                  	MOV     AX,2
 20692                                  ;if installed
 20693                                  	;Call	JShare + 14 * 4
 20694 0000463B FF1E[9400]              	call    far [JShare+(14*4)]	; 14 = ShSU
 20695                                  ;else
 20696                                  ;	Call    ShSU
 20697                                  ;endif
 20698 0000463F 31C9                    	XOR     CX,CX
 20699 00004641 E913FE                  	jmp	ADDREC
 20700                                  
 20701                                  WRTERRJ: 
 20702 00004644 E9A4FE                  	JMP     WRTERR
 20703                                  
 20704                                  ;;;;;;;;;;;;;;;; 7/18/86
 20705                                  ;;;;;;;;;;;;;;;;
 20706                                  
 20707                                  RELFILE:
 20708                                  	; MSDOS 6.0
 20709 00004647 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 20710 00004648 C43E[3605]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 20711 0000464C 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 20712 00004650 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 20713 00004652 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 20714 00004658 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 20715 0000465C 2689551B                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 20716                                  SKIPRESET:                            		;AN002; BL
 20717 00004660 07                      	POP     ES                    		;AN002; BL
 20718                                  ;
 20719 00004661 BAFFFF                  	MOV     DX,0FFFFH
 20720 00004664 E8880E                  	call	RELBLKS
 20721 00004667 73BD                    	jnc	short UPDATE
 20722                                  SET_ACC_ERRWJJ:
 20723                                  	;JC	short SET_ACC_ERRWJ2
 20724                                  	;JMP	SHORT UPDATE
 20725 00004669 E9E9FC                  	jmp	SET_ACC_ERR_DS
 20726                                  
 20727                                  KILLFIL:
 20728 0000466C 31DB                    	XOR     BX,BX
 20729 0000466E 06                      	PUSH    ES
 20730 0000466F C43E[3605]              	LES     DI,[THISSFT]
 20731 00004673 26895D19                	mov	[es:di+19h],bx
 20732 00004677 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 20733                                  	;mov	[es:di+1Bh],bx
 20734 0000467B 26895D1B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 20735                                  	;xchg	bx,[es:di+0Bh]
 20736 0000467F 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 20737 00004683 07                      	POP	ES
 20738                                  
 20739 00004684 09DB                    	OR	BX,BX
 20740                                  	;JZ	short UPDATEJ
 20741 00004686 749E                    	jz	short UPDATE
 20742                                  ;; 10/23/86 FastOpen update
 20743 00004688 06                      	PUSH	ES              ; since first cluster # is 0
 20744 00004689 55                      	PUSH	BP              ; we must delete the old cache entry
 20745 0000468A 50                      	PUSH	AX
 20746 0000468B 51                      	PUSH	CX
 20747 0000468C 52                      	PUSH	DX
 20748 0000468D C42E[2405]              	LES	BP,[THISDPB]             ; get current DPB
 20749 00004691 268A5600                	mov	dl,[ES:BP] ; mov al,[es:bp+0]
 20750                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 20751 00004695 89D9                    	MOV	CX,BX                    ; first cluster #
 20752 00004697 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 20753 00004699 E877ED                  	call	FastOpen_Update          ; call fastopen
 20754 0000469C 5A                      	POP	DX
 20755 0000469D 59                      	POP	CX
 20756 0000469E 58                      	POP	AX
 20757 0000469F 5D                      	POP	BP
 20758 000046A0 07                      	POP	ES
 20759                                  ;; 10/23/86 FastOpen update
 20760                                  
 20761 000046A1 E8490E                  	call	RELEASE
 20762 000046A4 72C3                    	JC	short SET_ACC_ERRWJJ
 20763                                  UpDateJ:
 20764 000046A6 E97DFF                  	JMP	UPDATE ; 10/08/2018
 20765                                  
 20766                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 20767                                  ;----------------------------------------------------------------------------
 20768                                  ;
 20769                                  ; Procedure Name : DskWrtBufPurge
 20770                                  ;
 20771                                  ; Inputs:
 20772                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 20773                                  ;	     sectors, also termed an "Extent".)
 20774                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20775                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20776                                  ;
 20777                                  ; Function:
 20778                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 20779                                  ;	are in Extent; they are being over-written.
 20780                                  ;
 20781                                  ; Outputs:
 20782                                  ;       (Same as Input.)
 20783                                  ; Uses:
 20784                                  ;       All registers except DS,AX,SI,DI preserved.
 20785                                  ;       SS override for all global variables.
 20786                                  ;----------------------------------------------------------------------------
 20787                                  ;M039: Created
 20788                                  
 20789                                  ;procedure   DskWrtBufPurge,NEAR
 20790                                  ;
 20791                                  ;ASSUME  DS:NOTHING
 20792                                  ;
 20793                                  ;       SaveReg <bx,cx>
 20794                                  ;       mov	bx,[HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 20795                                  ;       mov     si,bx
 20796                                  ;       add     cx,dx
 20797                                  ;       adc     si,0                    ;SI:CX = Extent end + 1.
 20798                                  ;
 20799                                  ;	Assert  ISDPB,<ES,BP>,"DskWrtBufPurge"
 20800                                  ;	mov     al,es:[bp.dpb_drive]
 20801                                  ;
 20802                                  ;;      BX:DX = Extent start.
 20803                                  ;;      SI:CX = Extent end + 1.
 20804                                  ;;      AL = Drive #
 20805                                  ;
 20806                                  ;	cmp     [SC_CACHE_COUNT],0      ;Secondary cache in-use?
 20807                                  ;	je      nosc                    ; -no, jump.
 20808                                  ;
 20809                                  ;;      If any of the sectors to be written are in the secondary cache (SC),
 20810                                  ;;      invalidate the entire SC. (This is an optimization; we really only
 20811                                  ;;	need to invalidate those sectors which intersect, but that's slower.)
 20812                                  ;
 20813                                  ;       cmp     al,[CURSC_DRIVE]        ;Same drive?
 20814                                  ;       jne     nosc                    ; -no, jump.
 20815                                  ;
 20816                                  ;       push    ax
 20817                                  ;       mov     ax,[CURSC_SECTOR]
 20818                                  ;       mov     di,[CURSC_SECTOR+2]     ;DI:AX = SC start.
 20819                                  ;       Cmp32   si,cx,di,ax             ;Extent end < SC start?
 20820                                  ;       jbe     sc5                     ; -yes, jump.
 20821                                  ;       add     ax,[SC_CACHE_COUNT]
 20822                                  ;       adc     di,0                    ;DI:AX = SC end + 1.
 20823                                  ;       Cmp32   bx,dx,di,ax             ;Extent start > SC end?
 20824                                  ;       jae     sc5                     ; -yes, jump.
 20825                                  ;       mov     [SC_STATUS],0           ;Extent intersects SC: invalidate SC.
 20826                                  ;sc5:	pop     ax
 20827                                  ;
 20828                                  ;;	Free any buffered sectors which are in Extent; they are being over-
 20829                                  ;;	written.
 20830                                  ;
 20831                                  ;nosc:	invoke  GETCURHEAD              ;DS:DI -> first buffer in queue.
 20832                                  ;
 20833                                  ;bufq:	cmp     al,BYTE PTR [di.buf_ID] ;Same drive?
 20834                                  ;	jne     bufq5                   ; -no, jump.
 20835                                  ;
 20836                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20837                                  ;       ja	bufq5			;Jump if Extent start > buffer sector.
 20838                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20839                                  ;       jbe	bufq5                   ;Jump if Extent end < buffer sector.
 20840                                  ;
 20841                                  ;;      Buffer's sector is in Extent, so free it; it is being over-written.
 20842                                  ;
 20843                                  ;       testb   [di.buf_flags],buf_dirty ;Buffer dirty?
 20844                                  ;       jz      bufq2                    ; -no, jump.
 20845                                  ;       invoke  DEC_DIRTY_COUNT          ; -yes, decrement dirty count.
 20846                                  ;bufq2: mov     WORD PTR [di.buf_ID],((buf_visit SHL 8) OR 0FFh)
 20847                                  ;
 20848                                  ;       invoke  SCANPLACE
 20849                                  ;       jmp     short bufq6
 20850                                  ;
 20851                                  ;bufq5: mov     di,[di.buf_next]
 20852                                  ;bufq6: cmp     di,[FIRST_BUFF_ADDR]    ;Scanned entire buffer queue?
 20853                                  ;       jne     bufq	                ; --no, go do next buffer.
 20854                                  ;
 20855                                  ;       RestoreReg <cx,bx>
 20856                                  ;       return
 20857                                  ;
 20858                                  ;EndProc DskWrtBufPurge
 20859                                  
 20860                                  
 20861                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 20862                                  ;----------------------------------------------------------------------------
 20863                                  ;
 20864                                  ; Procedure Name : DIV32
 20865                                  ;
 20866                                  ; Inputs:
 20867                                  ;       DX:AX = 32 bit dividend   BX= divisor
 20868                                  ; Function:
 20869                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 20870                                  ; Outputs:
 20871                                  ;       CX:AX = quotient , DX= remainder
 20872                                  ; Uses:
 20873                                  ;       All registers except AX,CX,DX preserved.
 20874                                  ;----------------------------------------------------------------------------
 20875                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 20876                                  
 20877                                  ;DIV32:
 20878                                  ;
 20879                                  ;       cmp     bx,512
 20880                                  ;       jne    	short div5
 20881                                  ;
 20882                                  ;	mov     cx,dx
 20883                                  ;       mov     dx,ax           ; CX:AX = Dividend
 20884                                  ;       and     dx,(512-1)      ; DX = Remainder
 20885                                  ;       mov     al,ah
 20886                                  ;       mov     ah,cl
 20887                                  ;       mov     cl,ch
 20888                                  ;       xor     ch,ch
 20889                                  ;       shr     cx,1
 20890                                  ;       rcr     ax,1
 20891                                  ;       retn
 20892                                  ;
 20893                                  ;div5:	mov     cx,ax
 20894                                  ;       mov     ax,dx
 20895                                  ;       xor     dx,dx
 20896                                  ;       div     bx              ; 0:AX/BX
 20897                                  ;       xchg    cx,ax
 20898                                  ;       div     bx              ; DX:AX/BX
 20899                                  ;       retn
 20900                                  
 20901                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 20902                                  ;----------------------------------------------------------------------------
 20903                                  ;
 20904                                  ; Procedure Name : SHR32
 20905                                  ;
 20906                                  ; Inputs:
 20907                                  ;	DX:AX = 32 bit sector number
 20908                                  ; Function:
 20909                                  ;       Perform 32 bit shift right
 20910                                  ; Outputs:
 20911                                  ;	AX = cluster number
 20912                                  ;	ZF = 1 if no error
 20913                                  ;	   = 0 if error (cluster number > 64k)
 20914                                  ; Uses:
 20915                                  ;       DX,CX
 20916                                  ;---------------------------------------------------------------------------
 20917                                  ; M017	- SHR32 rewritten for better performance
 20918                                  ; M039	- Additional optimization
 20919                                  
 20920                                  ;SHR32:
 20921                                  ;
 20922                                  ;	mov     cl,[ES:BP+DPB.CLUSTER_SHIFT]
 20923                                  ;	xor	ch,ch	    ;ZF=1
 20924                                  ;	jcxz	norota
 20925                                  ;
 20926                                  ;rotashft2:
 20927                                  ;	shr	dx,1	    ;ZF reflects state of DX.
 20928                                  ;	rcr	ax,1	    ;ZF not affected.
 20929                                  ;	loop	rotashft2
 20930                                  ;
 20931                                  ;norota:
 20932                                  ;	retn
 20933                                  
 20934                                  ;============================================================================
 20935                                  ; DIR.ASM, MSDOS 6.0, 1991
 20936                                  ;============================================================================
 20937                                  ; 27/07/2018 - Retro DOS v3.0 
 20938                                  
 20939                                  ;	TITLE	DIR - Directory and path cracking
 20940                                  ;	NAME	Dir
 20941                                  
 20942                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 20943                                  ;---------------------------------------------------------------------------
 20944                                  ;
 20945                                  ; Procedure Name : FINDENTRY,SEARCH
 20946                                  ;
 20947                                  ; Inputs:
 20948                                  ;	[THISDPB] set
 20949                                  ;	[SECCLUSPOS] = 0
 20950                                  ;	[DIRSEC] = Starting directory sector number
 20951                                  ;	[CLUSNUM] = Next cluster of directory
 20952                                  ;	[CLUSFAC] = Sectors/Cluster
 20953                                  ;	[NAME1] = Name to look for
 20954                                  ; Function:
 20955                                  ;	Find file name in disk directory.
 20956                                  ;	"?" matches any character.
 20957                                  ; Outputs:
 20958                                  ;	Carry set if name not found
 20959                                  ;	ELSE
 20960                                  ;	Zero set if attributes match (always except when creating)
 20961                                  ;	AH = Device ID (bit 7 set if not disk)
 20962                                  ;	[THISDPB] = Base of drive parameters
 20963                                  ;	DS = DOSGROUP
 20964                                  ;	ES = DOSGROUP
 20965                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 20966                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 20967                                  ;	[CURBUF] has directory record with match
 20968                                  ;	[NAME1] has file name
 20969                                  ;	[LASTENT] is entry number of the entry
 20970                                  ; All other registers destroyed.
 20971                                  ;----------------------------------------------------------------------------
 20972                                  
 20973                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 20974                                  ;hkn; this point.
 20975                                  
 20976                                  SEARCH:
 20977                                  	; 27/07/2018 - Retro DOS v3.0
 20978                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 20979                                  	; 15/03/2018 - Retro DOS v2.0
 20980                                  
 20981                                  	;entry	FindEntry
 20982                                  FINDENTRY:
 20983 000046A9 E81704                  	call	STARTSRCH
 20984 000046AC A0[0605]                	MOV	AL,[ATTRIB]
 20985                                  	;and	al,9Eh
 20986 000046AF 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 20987                                  	;cmp	al,8
 20988 000046B1 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 20989 000046B3 7503                    	JNZ	short NOTVOLSRCH	; No
 20990 000046B5 E86201                  	CALL	SETROOTSRCH		; Yes force search of root
 20991                                  NOTVOLSRCH:
 20992 000046B8 E8F800                  	CALL	GETENTRY
 20993 000046BB 7303                    	JNC	short SRCH
 20994 000046BD E99500                  	JMP	SETESRET
 20995                                  
 20996                                  	;entry	Srch
 20997                                  SRCH:
 20998 000046C0 1E                      	PUSH	DS
 20999 000046C1 8E1E[7605]              	MOV	DS,[CURBUF+2]
 21000                                  
 21001                                  ;	(DS:BX) = directory entry address
 21002                                  
 21003 000046C5 8A27                    	mov	ah,[BX]
 21004                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 21005 000046C7 08E4                    	OR	AH,AH			; End of directory?
 21006 000046C9 743A                    	JZ	short FREE
 21007                                  
 21008                                  ;hkn; SS override
 21009 000046CB 363A26[1905]            	CMP	AH,[SS:DELALL]		; Free entry?
 21010 000046D0 7433                    	JZ	short FREE
 21011                                  	;test	byte [bx+0Bh],8
 21012 000046D2 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 21013                                  					; Volume ID file?
 21014 000046D6 7405                    	JZ	short CHKFNAM 		; NO
 21015                                  
 21016                                  ;hkn; SS override
 21017 000046D8 36FE06[1605]            	INC	BYTE [SS:VOLID]
 21018                                  CHKFNAM:
 21019                                  ;	Context ES
 21020 000046DD 8CD6                    	MOV	SI,SS
 21021 000046DF 8EC6                    	MOV	ES,SI
 21022 000046E1 89DE                    	MOV	SI,BX
 21023                                  
 21024                                  ;hkn; NAME1 is in DOSDATA
 21025 000046E3 BF[E604]                	MOV	DI,NAME1
 21026                                  ;;;;; 7/29/86
 21027                                  
 21028                                  ;hkn; SS override for NAME1
 21029 000046E6 36803E[E604]E5          	CMP	BYTE [SS:NAME1],0E5H	; special char check
 21030 000046EC 7506                    	JNZ	short NO_E5
 21031 000046EE 36C606[E604]05          	MOV	BYTE [SS:NAME1],05H
 21032                                  NO_E5:
 21033                                  ;;;;; 7/29/86
 21034 000046F4 E86100                  	CALL	MetaCompare
 21035 000046F7 7428                    	JZ	short FOUND
 21036 000046F9 1F                      	POP	DS
 21037                                  
 21038                                  	;entry	NEXTENT
 21039                                  NEXTENT:
 21040 000046FA C42E[2405]              	LES	BP,[THISDPB]
 21041 000046FE E86600                  	CALL	NEXTENTRY
 21042 00004701 73BD                    	JNC	short SRCH
 21043 00004703 EB50                    	JMP	SHORT SETESRET
 21044                                  
 21045                                  FREE:
 21046 00004705 1F                      	POP	DS
 21047 00004706 8B0E[F402]              	MOV	CX,[LASTENT]
 21048 0000470A 3B0E[6A05]              	CMP	CX,[ENTFREE]
 21049 0000470E 7304                    	JAE	short TSTALL
 21050 00004710 890E[6A05]              	MOV	[ENTFREE],CX
 21051                                  TSTALL:
 21052 00004714 3A26[1905]              	CMP	AH,[DELALL]		; At end of directory?
 21053                                  NEXTENTJ:
 21054 00004718 74E0                    	je	short NEXTENT 		; No - continue search
 21055 0000471A 890E[6C05]              	MOV	[ENTLAST],CX
 21056 0000471E F9                      	STC
 21057 0000471F EB34                    	JMP	SHORT SETESRET
 21058                                  
 21059                                  FOUND:
 21060                                  ;
 21061                                  ; We have a file with a matching name.	We must now consider the attributes:
 21062                                  ; ATTRIB	Action
 21063                                  ; ------	------
 21064                                  ; Volume_ID	Is Volume_ID in test?
 21065                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 21066                                  ;		If create then Is ATTRIB equal to test?
 21067                                  ;
 21068 00004721 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 21069 00004723 1F                      	POP	DS
 21070 00004724 8A26[0605]              	MOV	AH,[ATTRIB]		; Attributes of search
 21071                                  	;and	ah,9Eh
 21072 00004728 80E4DE                  	AND	AH,~attr_ignore
 21073                                  	;lea	si,[si+15]
 21074 0000472B 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 21075                                  					; point to first cluster field
 21076                                  	;test	ch,8
 21077 0000472E F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 21078 00004731 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 21079                                  	;test	ah,8
 21080 00004733 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 21081                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 21082 00004736 74C2                    	jz	short NEXTENT ; 19/05/2019
 21083 00004738 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 21084 0000473A EB11                    	JMP	SHORT RETFF		; Found Volume ID
 21085                                  check_one_volume_id:
 21086                                  	;CMP	ah,8
 21087 0000473C 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 21088                                  	;JZ	short NEXTENTJ		; Yes, continue search
 21089 0000473F 74B9                    	je	short NEXTENT ; 19/05/2019
 21090 00004741 E89303                  	CALL	MatchAttributes
 21091 00004744 7407                    	JZ	SHORT RETFF
 21092 00004746 F606[1805]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 21093                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 21094 0000474B 74AD                    	jz	short NEXTENT ; 19/05/2019
 21095                                  RETFF:
 21096 0000474D C42E[2405]              	LES	BP,[THISDPB]
 21097 00004751 268A6600                	MOV	AH,[ES:BP]
 21098                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 21099                                  SETESRET:
 21100 00004755 16                      	PUSH	SS
 21101 00004756 07                      	POP	ES
 21102 00004757 C3                      	retn
 21103                                  
 21104                                  ;----------------------------------------------------------------------------
 21105                                  ;
 21106                                  ; Procedure Name : MetaCompare
 21107                                  ;
 21108                                  ; Inputs:
 21109                                  ;	DS:SI -> 11 character FCB style name NO '?'
 21110                                  ;	    Typically this is a directory entry.  It MUST be in upper case
 21111                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 21112                                  ;	    Typically this is a FCB or SFT.  It MUST be in upper case
 21113                                  ; Function:
 21114                                  ;	Compare FCB style names allowing for ? match to any char
 21115                                  ; Outputs:
 21116                                  ;	Zero if match else NZ
 21117                                  ; Destroys CX,SI,DI all others preserved
 21118                                  ;----------------------------------------------------------------------------
 21119                                  
 21120                                  MetaCompare:
 21121 00004758 B90B00                  	MOV	CX,11
 21122                                  WILDCRD:
 21123 0000475B F3A6                    	REPE	CMPSB
 21124 0000475D 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 21125                                  CHECK_META:
 21126 0000475F 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 21127 00004764 74F5                    	JZ	short WILDCRD
 21128                                  MetaRet:
 21129 00004766 C3                       	retn				; Zero set, Match
 21130                                  
 21131                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 21132                                  ;----------------------------------------------------------------------------
 21133                                  ;
 21134                                  ; Procedure Name : NEXTENTRY
 21135                                  ;
 21136                                  ; Inputs:
 21137                                  ;	Same as outputs of GETENTRY, above
 21138                                  ; Function:
 21139                                  ;	Update BX, and [LASTENT] for next directory entry.
 21140                                  ;	Carry set if no more.
 21141                                  ;----------------------------------------------------------------------------
 21142                                  
 21143                                  NEXTENTRY:
 21144                                  	; 27/07/2018 - Retro DOS v3.0
 21145                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 21146                                  	; 15/03/2018 - Retro DOS v2.0
 21147                                  
 21148 00004767 A1[F402]                	MOV	AX,[LASTENT]
 21149 0000476A 3B06[6C05]              	CMP	AX,[ENTLAST]
 21150 0000476E 7424                    	JZ	short NONE
 21151 00004770 40                      	INC	AX
 21152                                  	;ADD	BX,32
 21153 00004771 8D5F20                  	LEA	BX,[BX+32]
 21154 00004774 39D3                    	CMP	BX,DX
 21155 00004776 721E                    	JB	short HAVIT
 21156 00004778 8A1E[0E05]              	MOV	BL,[SECCLUSPOS]
 21157 0000477C FEC3                    	INC	BL
 21158 0000477E 3A1E[1205]              	CMP	BL,[CLUSFAC]
 21159 00004782 7217                    	JB	short SAMECLUS
 21160 00004784 8B1E[6E05]              	MOV	BX,[NXTCLUSNUM]
 21161 00004788 E8AF12                  	call	IsEOF
 21162 0000478B 7307                    	JAE	short NONE
 21163 0000478D 83FB02                  	CMP	BX,2
 21164 00004790 7202                    	JB	short NONE
 21165 00004792 EB22                    	JMP	short GETENT
 21166                                  NONE:
 21167 00004794 F9                      	STC
 21168 00004795 C3                      	retn
 21169                                  HAVIT:
 21170 00004796 A3[F402]                	MOV	[LASTENT],AX
 21171 00004799 F8                      	CLC
 21172                                  nextentry_retn:
 21173 0000479A C3                      	retn
 21174                                  SAMECLUS:
 21175 0000479B 881E[0E05]              	MOV	[SECCLUSPOS],BL
 21176 0000479F A3[F402]                	MOV	[LASTENT],AX
 21177 000047A2 1E                      	PUSH	DS
 21178 000047A3 C53E[7405]              	LDS	DI,[CURBUF]
 21179                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 21180                                  ;hkn; SS override
 21181                                  	;MOV	[HIGH_SECTOR],DX		;AN000; >32mb
 21182                                  	;mov	dx,[di+6]
 21183 000047A7 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 21184                                  	;ADD	DX,1				;AN000; >32mb
 21185                                  	;ADC	word [HIGH_SECTOR],0 		;AN000; >32mb
 21186 000047AA 42                      	inc	dx
 21187 000047AB 1F                      	POP	DS
 21188 000047AC E881F9                  	call	FIRSTCLUSTER
 21189 000047AF 31DB                    	XOR	BX,BX
 21190 000047B1 EB23                    	JMP	short SETENTRY
 21191                                  
 21192                                  ;----------------------------------------------------------------------------
 21193                                  ;
 21194                                  ; Procedure Name : GETENTRY
 21195                                  ;
 21196                                  ; Inputs:
 21197                                  ;	[LASTENT] has directory entry
 21198                                  ;	ES:BP points to drive parameters
 21199                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 21200                                  ; Function:
 21201                                  ;	Locates directory entry in preparation for search
 21202                                  ;	GETENT provides entry for passing desired entry in AX
 21203                                  ; Outputs:
 21204                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 21205                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 21206                                  ;	[LASTENT] = New directory entry number
 21207                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 21208                                  ;	Carry set if error (currently user FAILed to I 24)
 21209                                  ;----------------------------------------------------------------------------
 21210                                  
 21211                                  GETENTRY:
 21212                                  	; 27/07/2018 - Retro DOS v3.0
 21213 000047B3 A1[F402]                	MOV	AX,[LASTENT]
 21214                                  
 21215                                  	;entry	GETENT
 21216                                  GETENT:
 21217 000047B6 A3[F402]                	MOV	[LASTENT],AX
 21218                                  ;
 21219                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 21220                                  ; directory.
 21221                                  ;
 21222 000047B9 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 21223 000047BB D3C0                    	rol	ax,cl			; keep hight order bits
 21224 000047BD 89C2                    	mov	dx,ax
 21225                                  	;and	ax,0FFE0h
 21226                                  	;;and	ax,~(32-1)		; mask off high order bits
 21227 000047BF 24E0                    	and	al,0E0h ; ~31 ; 19/05/2019
 21228 000047C1 83E21F                  	and	dx,1Fh
 21229                                  	;and	dx,32-1			; mask off low order bits
 21230                                  ;
 21231                                  ; DX:AX contain the byte offset of the required directory entry from the
 21232                                  ; beginning of the directory. Convert this to a sector number. Round the
 21233                                  ; sector size down to a multiple of 32.
 21234                                  ;
 21235                                  	;mov	bx,[es:bp+2]
 21236 000047C4 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21237 000047C8 80E3E0                  	and	bl,0E0h
 21238                                  	;AND	BL,255-31		; Must be multiple of 32
 21239 000047CB F7F3                    	DIV	BX
 21240 000047CD 89D3                    	MOV	BX,DX			; Position within sector
 21241 000047CF 53                      	PUSH	BX
 21242 000047D0 E811F9                  	call	DIRREAD
 21243 000047D3 5B                      	POP	BX
 21244                                  	;retc
 21245 000047D4 72C4                    	jc	short nextentry_retn	
 21246                                  SETENTRY:
 21247 000047D6 8B16[7405]              	MOV	DX,[CURBUF]
 21248                                  	;add	dx,16
 21249 000047DA 83C210                  	ADD	DX,BUFINSIZ
 21250 000047DD 01D3                    	ADD	BX,DX
 21251                                  	;add	dx,[es:bp+2]
 21252 000047DF 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 21253 000047E3 C3                      	retn
 21254                                  
 21255                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 21256                                  ;----------------------------------------------------------------------------
 21257                                  ;
 21258                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 21259                                  ;
 21260                                  ; Inputs:
 21261                                  ;	BX cluster number of start of directory
 21262                                  ;	ES:BP Points to DPB
 21263                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 21264                                  ; Function:
 21265                                  ;	Set up a directory search
 21266                                  ; Outputs:
 21267                                  ;	[DIRSTART] = BX
 21268                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 21269                                  ;	Carry set if error (currently user FAILed to I 24)
 21270                                  ; destroys AX,DX,BX
 21271                                  ;----------------------------------------------------------------------------
 21272                                  
 21273                                  SETDIRSRCH:
 21274 000047E4 09DB                    	OR	BX,BX
 21275 000047E6 7432                    	JZ	short SETROOTSRCH
 21276 000047E8 891E[5805]              	MOV	[DIRSTART],BX
 21277                                  	;mov	al,[es:bp+4]
 21278 000047EC 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 21279 000047F0 FEC0                    	INC	AL
 21280 000047F2 A2[1205]                	MOV	[CLUSFAC],AL
 21281                                  
 21282                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 21283                                  	;SAVE	<SI>
 21284 000047F5 56                      	push	si
 21285                                  	;test	byte [FastOpenFlg],2
 21286 000047F6 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21287 000047FB 7507                    	JNZ	short UNP_OK
 21288                                  
 21289                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 21290                                  	;invoke	UNPACK
 21291 000047FD E85112                  	call	UNPACK
 21292 00004800 7302                    	JNC	short UNP_OK
 21293                                  	;RESTORE <SI>
 21294 00004802 5E                      	pop	si
 21295                                  	;return
 21296 00004803 C3                      	retn
 21297                                  
 21298                                  UNP_OK:
 21299 00004804 893E[5405]              	MOV	[CLUSNUM],DI
 21300 00004808 89DA                    	MOV	DX,BX
 21301 0000480A 30DB                    	XOR	BL,BL
 21302 0000480C 881E[0E05]              	MOV	[SECCLUSPOS],BL
 21303                                  	;invoke	FIGREC
 21304 00004810 E8220C                  	call	FIGREC
 21305                                  	;RESTORE <SI>
 21306 00004813 5E                      	pop	si
 21307                                  	
 21308                                  	; MSDOS 6.0
 21309                                  	;PUSH	DX			   ;AN000; >32mb
 21310                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 21311                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 21312                                  	;POP	DX			   ;AN000; >32mb
 21313                                  	
 21314 00004814 8916[5605]              	MOV	[DIRSEC],DX
 21315 00004818 F8                      	CLC
 21316 00004819 C3                      	retn
 21317                                  
 21318                                  	;entry	SETROOTSRCH
 21319                                  SETROOTSRCH:
 21320 0000481A 31C0                    	XOR	AX,AX
 21321 0000481C A3[5805]                	MOV	[DIRSTART],AX
 21322 0000481F A2[0E05]                	MOV	[SECCLUSPOS],AL
 21323 00004822 48                      	DEC	AX
 21324 00004823 A3[5405]                	MOV	[CLUSNUM],AX
 21325                                  	;mov	ax,[es:bp+0Bh]
 21326 00004826 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 21327                                  	;mov	dx,[es:bp+10h]
 21328 0000482A 268B5610                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 21329 0000482E 29D0                    	SUB	AX,DX
 21330 00004830 A2[1205]                	MOV	[CLUSFAC],AL
 21331 00004833 8916[5605]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 21332                                  	; MSDOS 6.0
 21333                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 21334 00004837 F8                      	CLC
 21335 00004838 C3                      	retn
 21336                                  
 21337                                  ;============================================================================
 21338                                  ; DIR2.ASM, MSDOS 6.0, 1991
 21339                                  ;============================================================================
 21340                                  ; 27/07/2018 - Retro DOS v3.0 
 21341                                  
 21342                                  ;	TITLE	DIR2 - Directory and path cracking
 21343                                  ;	NAME	Dir2
 21344                                  
 21345                                  ;Break	<GETPATH -- PARSE A WFP>
 21346                                  ;----------------------------------------------------------------------------
 21347                                  ;
 21348                                  ; Procedure Name : GETPATH
 21349                                  ;
 21350                                  ; Inputs:
 21351                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 21352                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 21353                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 21354                                  ;		( = -1 if current dir not involved, else
 21355                                  ;		 Points to first char after last "/" of current dir part)
 21356                                  ;	[THISCDS] Points to CDS being used
 21357                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 21358                                  ;	[NoSetDir] set
 21359                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 21360                                  ; Function:
 21361                                  ;	Crack the path
 21362                                  ; Outputs:
 21363                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 21364                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 21365                                  ;	ID1 field of [THISCDS] updated appropriately
 21366                                  ;	[ATTRIB] = [SATTRIB]
 21367                                  ;	ES:BP Points to DPB
 21368                                  ;	Carry set if bad path
 21369                                  ;	   SI Points to path element causing failure
 21370                                  ;	   Zero set
 21371                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 21372                                  ;	      start a search on the last directory
 21373                                  ;	      CL is zero if there is a bad name in the path
 21374                                  ;	      CL is non-zero if the name was simply not found
 21375                                  ;		 [ENTFREE] may have free spot in directory
 21376                                  ;		 [NAME1] is the name.
 21377                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 21378                                  ;	   Zero reset
 21379                                  ;	      File in middle of path or bad name in path or attribute mismatch
 21380                                  ;		or path too long or malformed path
 21381                                  ;	ELSE
 21382                                  ;	   [CurBuf] = -1 if root directory
 21383                                  ;	   [CURBUF] contains directory record with match
 21384                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 21385                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 21386                                  ;	   AH = device ID
 21387                                  ;	      bit 7 of AH set if device SI and BX
 21388                                  ;	      will point DOSGROUP relative The firclus
 21389                                  ;	      field of the device entry contains the device pointer
 21390                                  ;	   [NAME1] Has name looked for
 21391                                  ;	   If last element is a directory zero is set and:
 21392                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 21393                                  ;	      are set up to start a search on it.
 21394                                  ;	      unless [NoSetDir] is non zero in which case the return is
 21395                                  ;	      like that for a file (except for zero flag)
 21396                                  ;	   If last element is a file zero is reset
 21397                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 21398                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 21399                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 21400                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 21401                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 21402                                  ; DS preserved, Others destroyed
 21403                                  ;---------------------------------------------------------------------------
 21404                                  
 21405                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 21406                                  ;hkn; DS already set up at this point.
 21407                                  
 21408                                  GETPATH:
 21409                                  	;mov	word [CREATING],0E500h
 21410 00004839 C706[1805]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 21411                                  
 21412                                  ; Same as GetPath only CREATING and DELALL already set
 21413                                  
 21414                                  	;entry	GetPathNoSet
 21415                                  GetPathNoSet:
 21416                                  	;mov	byte [EXTERR_LOCUS],2	
 21417 0000483F C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21418 00004844 C706[7405]FFFF          	MOV	word [CURBUF],-1	; initial setting
 21419                                  
 21420                                  ; See if the input indicates a device that has already been detected. If so,
 21421                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 21422                                  
 21423 0000484A 8B3E[4A05]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 21424                                  	;cmp	word [DI+1],5C3Ah
 21425                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 21426 0000484E 817D013A5C              	cmp	word [DI+1],':\'
 21427 00004853 7438                    	JZ	short CrackIt
 21428                                  
 21429                                  ; Let ChkDev find it in the device list
 21430                                  
 21431 00004855 83C703                  	ADD	DI,3
 21432                                  	; 18/08/2018
 21433                                  	;MOV	SI,DI			; let CHKDEV see the original name
 21434 00004858 E8B000                  	CALL	CHKDEV
 21435 0000485B 722E                    	JC	short InternalError
 21436                                  Build_devJ:
 21437                                  
 21438 0000485D A0[0805]                	MOV	AL,[SATTRIB]
 21439 00004860 A2[0605]                	MOV	[ATTRIB],AL
 21440                                  	;mov	byte [EXTERR_LOCUS],1
 21441 00004863 C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 21442                                  					; "finding" a char device
 21443                                  					; set LOCUS to Unknown. This makes
 21444                                  					; certain idiotic problems reported
 21445                                  					; by a certain 3 letter OEM go away.
 21446                                  
 21447                                  ; Take name in name1 and pack it back into where wfp_start points. This
 21448                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 21449                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 21450                                  ; wfp into the share set.
 21451                                  ;
 21452                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 21453                                  ; non-space seen +1.  This position is kept in DX.
 21454                                  
 21455                                  ;hkn; SS is DOSDATA
 21456 00004868 16                      	push	ss
 21457 00004869 07                      	pop	es
 21458                                  
 21459                                  ;hkn; NAME1 is in DOSDATA
 21460 0000486A BE[E604]                	mov	si,NAME1
 21461 0000486D 8B3E[4A05]              	mov	di,[WFP_START]
 21462 00004871 89FA                    	mov	dx,di
 21463 00004873 B90800                  	mov	cx,8			; 8 chars in device name
 21464                                  MoveLoop:
 21465 00004876 AC                      	lodsb
 21466 00004877 AA                      	stosb
 21467 00004878 3C20                    	cmp	al," "
 21468 0000487A 7402                    	jz	short NoSave
 21469                                  
 21470 0000487C 89FA                    	mov	dx,di
 21471                                  NoSave:
 21472 0000487E E2F6                    	loop	MoveLoop
 21473                                  ;
 21474                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 21475                                  ; at this point.
 21476                                  ;
 21477 00004880 89D7                    	mov	di,dx
 21478 00004882 C60500                  	mov	byte [di],0		; end of string
 21479 00004885 E8BC02                  	call	Build_device_ent	; Clears carry sets zero
 21480 00004888 FEC0                    	INC	AL			; reset zero
 21481 0000488A C3                      	retn
 21482                                  
 21483                                  InternalError:
 21484                                  InternalError_loop:
 21485 0000488B EBFE                    	JMP	short InternalError_loop	; freeze
 21486                                  
 21487                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 21488                                  
 21489                                  CrackIt:
 21490 0000488D 8B36[4E05]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 21491 00004891 83FEFF                  	CMP	SI,-1			; valid?
 21492 00004894 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 21493 00004896 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 21494                                  LOOK_SING:
 21495                                  	;mov	byte [ATTRIB],16h
 21496 00004899 C606[0605]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 21497                                  					; Attributes to search through Dirs
 21498 0000489E C43E[3A05]              	LES	DI,[THISCDS]
 21499 000048A2 B8FFFF                  	MOV	AX,-1
 21500                                  	;mov	bx,[es:di+73]
 21501 000048A5 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 21502 000048A9 8B36[4E05]              	MOV	SI,[CURR_DIR_END]
 21503                                  
 21504                                  ; AX = -1
 21505                                  ; BX = cluster number of current directory.  THis number is -1 if the media
 21506                                  ;      has been uncertainly changed.
 21507                                  ; SI = offset in DOSGroup into path to end of current directory text.  This
 21508                                  ;      may be -1 if no current directory part has been used.
 21509                                  
 21510 000048AD 39C6                    	CMP	SI,AX			; if Current directory is not part
 21511 000048AF 7440                    	JZ	short NO_CURR_D		; then we must crack from root
 21512 000048B1 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 21513                                  
 21514                                  ; DOS 3.3  6/25/86
 21515 000048B3 743C                    	JZ	short NO_CURR_D		; no, crack form the root
 21516                                  	;test	byte [FastOpenFlg],1
 21517 000048B5 F606[6E0F]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 21518 000048BA 7442                    	JZ	short GOT_SEARCH_CLUSTER	; no
 21519 000048BC 06                      	PUSH	ES			; save registers
 21520 000048BD 57                      	PUSH	DI
 21521 000048BE 51                      	PUSH	CX
 21522 000048BF FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 21523 000048C2 56                      	PUSH	SI
 21524 000048C3 53                      	PUSH	BX
 21525                                  
 21526 000048C4 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 21527 000048C8 8B36[4A05]              	MOV	SI,[WFP_START]
 21528                                  
 21529                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 21530 000048CC BB[430F]                	MOV	BX,FastOpenTable
 21531 000048CF BF[4E0F]                	MOV	DI,Dir_Info_Buff
 21532 000048D2 B9[490F]                	MOV	CX,FastOpen_Ext_Info
 21533                                  	;mov	al,1
 21534 000048D5 B001                    	MOV	AL,FONC_Look_up
 21535 000048D7 1E                      	PUSH	DS
 21536 000048D8 07                      	POP	ES
 21537                                  	;call	far [BX+2]
 21538 000048D9 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 21539 000048DC 7208                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 21540                                  					; Go to Got_Srch_cluster
 21541 000048DE 803C00                  	CMP	BYTE [SI],0		;fastopen has current dir info?
 21542 000048E1 7404                    	JE	short GO_Chk_end	;yes. Go to got_search_cluster
 21543 000048E3 F9                      	stc
 21544 000048E4 EB01                    	jmp	short GO_Chk_end	;Go to No_Curr_D
 21545                                  GO_Chk_end1:
 21546 000048E6 F8                      	clc
 21547                                  GO_Chk_end:				; restore registers
 21548 000048E7 5B                      	POP	BX
 21549 000048E8 5E                      	POP	SI
 21550 000048E9 8F44FF                  	POP	word [SI-1]
 21551 000048EC 59                      	POP	CX
 21552 000048ED 5F                      	POP	DI
 21553 000048EE 07                      	POP	ES
 21554 000048EF 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 21555                                  
 21556                                  ; DOS 3.3  6/25/86
 21557                                  ;
 21558                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 21559                                  ; of path and go crack from root.
 21560                                  
 21561                                  NO_CURR_D:
 21562 000048F1 8B36[4A05]              	MOV	SI,[WFP_START]
 21563 000048F5 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 21564 000048F8 C42E[2405]              	LES	BP,[THISDPB]		; Get ES:BP
 21565 000048FC EB3D                    	JMP	short ROOTPATH
 21566                                  
 21567                                  ; We are able to crack from the current directory part. Go set up for search
 21568                                  ; of specified cluster.
 21569                                  
 21570                                  GOT_SEARCH_CLUSTER:
 21571 000048FE C42E[2405]              	LES	BP,[THISDPB]		; Get ES:BP
 21572 00004902 E8DFFE                  	call	SETDIRSRCH
 21573                                  	;JC	short SETFERR
 21574                                  	;JMP	short FINDPATH
 21575 00004905 7345                    	jnc	short FINDPATH ; 17/08/2018
 21576                                  SETFERR:
 21577 00004907 30C9                    	XOR	CL,CL			; set zero
 21578 00004909 F9                      	STC
 21579 0000490A C3                      	retn
 21580                                  
 21581                                  ;---------------------------------------------------------------------------
 21582                                  ;
 21583                                  ; Procedure Name : ChkDev
 21584                                  ;
 21585                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 21586                                  ;   device.
 21587                                  ; Blasts CX,SI,DI,AX,BX
 21588                                  ;---------------------------------------------------------------------------
 21589                                  
 21590                                  CHKDEV:
 21591 0000490B 89FE                    	MOV	SI,DI
 21592 0000490D 8CD7                    	MOV	DI,SS
 21593 0000490F 8EC7                    	MOV	ES,DI
 21594                                  
 21595 00004911 BF[E604]                	MOV	DI,NAME1
 21596 00004914 B90900                  	MOV	CX,9
 21597                                  TESTLOOP:
 21598 00004917 E8F50C                  	call	GETLET
 21599                                  
 21600 0000491A 3C2E                    	CMP	AL,'.'
 21601 0000491C 740E                    	JZ	short TESTDEVICE
 21602 0000491E E82B0D                  	call	PATHCHRCMP
 21603 00004921 7407                    	JZ	short NOTDEV
 21604 00004923 08C0                    	OR	AL,AL
 21605 00004925 7405                    	JZ	short TESTDEVICE
 21606                                  
 21607 00004927 AA                      	STOSB
 21608 00004928 E2ED                    	LOOP	TESTLOOP
 21609                                  NOTDEV:
 21610 0000492A F9                      	STC
 21611 0000492B C3                      	retn
 21612                                  
 21613                                  TESTDEVICE:
 21614 0000492C 83C102                  	ADD	CX,2
 21615 0000492F B020                    	MOV	AL,' '
 21616 00004931 F3AA                    	REP	STOSB
 21617 00004933 8CD0                    	MOV	AX,SS
 21618 00004935 8ED8                    	MOV	DS,AX
 21619 00004937 E8AA01                  	call	DEVNAME
 21620 0000493A C3                      	retn
 21621                                  
 21622                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 21623                                  ;----------------------------------------------------------------------------
 21624                                  ;
 21625                                  ; Procedure Name : ROOTPATH,FINDPATH
 21626                                  ;
 21627                                  ; Inputs:
 21628                                  ;	Same as FINDPATH but,
 21629                                  ;	SI Points to asciz string of path which is assumed to start at
 21630                                  ;		the root (no leading '/').
 21631                                  ; Function:
 21632                                  ;	Search from root for path
 21633                                  ; Outputs:
 21634                                  ;	Same as FINDPATH but:
 21635                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 21636                                  ;	[NoSetDir] is ignored.
 21637                                  ;----------------------------------------------------------------------------
 21638                                  
 21639                                  ROOTPATH:
 21640 0000493B E8DCFE                  	call	SETROOTSRCH
 21641 0000493E 803C00                  	CMP	BYTE [SI],0
 21642 00004941 7509                    	JNZ	short FINDPATH
 21643                                  
 21644                                  ; Root dir specified
 21645 00004943 A0[0805]                	MOV	AL,[SATTRIB]
 21646 00004946 A2[0605]                	MOV	[ATTRIB],AL
 21647 00004949 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 21648                                  					; (dir), clears carry.
 21649 0000494B C3                      	retn
 21650                                  
 21651                                  ; Inputs:
 21652                                  ;	[ATTRIB] Set to get through directories
 21653                                  ;	[SATTRIB] Set to find last element
 21654                                  ;	ES:BP Points to DPB
 21655                                  ;	SI Points to asciz string of path (no leading '/').
 21656                                  ;	[SECCLUSPOS] = 0
 21657                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 21658                                  ;	[CLUSNUM] = Cluster # of next cluster
 21659                                  ;	[CLUSFAC] = Sectors per cluster
 21660                                  ;	[NoSetDir] set
 21661                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 21662                                  ;		( = -1 if current dir not involved, else
 21663                                  ;		 Points to first char after last "/" of current dir part)
 21664                                  ;	[THISCDS] Points to CDS being used
 21665                                  ;	[CREATING] and [DELALL] set
 21666                                  ; Function:
 21667                                  ;	Parse path name
 21668                                  ; Outputs:
 21669                                  ;	ID1 field of [THISCDS] updated appropriately
 21670                                  ;	[ATTRIB] = [SATTRIB]
 21671                                  ;	ES:BP Points to DPB
 21672                                  ;	[THISDPB] = ES:BP
 21673                                  ;	Carry set if bad path
 21674                                  ;	   SI Points to path element causing failure
 21675                                  ;	   Zero set
 21676                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 21677                                  ;	      start a search on the last directory
 21678                                  ;	      CL is zero if there is a bad name in the path
 21679                                  ;	      CL is non-zero if the name was simply not found
 21680                                  ;		 [ENTFREE] may have free spot in directory
 21681                                  ;		 [NAME1] is the name.
 21682                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 21683                                  ;	   Zero reset
 21684                                  ;	      File in middle of path or bad name in path
 21685                                  ;		or path too long or malformed path
 21686                                  ;	ELSE
 21687                                  ;	   [CURBUF] contains directory record with match
 21688                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 21689                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 21690                                  ;	   [NAME1] Has name looked for
 21691                                  ;	   AH = device ID
 21692                                  ;	      bit 7 of AH set if device SI and BX
 21693                                  ;	      will point DOSGROUP relative The firclus
 21694                                  ;	      field of the device entry contains the device pointer
 21695                                  ;	   If last element is a directory zero is set and:
 21696                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 21697                                  ;	      are set up to start a search on it,
 21698                                  ;	      unless [NoSetDir] is non zero in which case the return is
 21699                                  ;	      like that for a file (except for zero flag)
 21700                                  ;	   If last element is a file zero is reset
 21701                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 21702                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 21703                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 21704                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 21705                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 21706                                  ; Destroys all other registers
 21707                                  
 21708                                      	;entry	FINDPATH
 21709                                  FINDPATH:
 21710 0000494C 06                      	PUSH	ES			; Save ES:BP
 21711 0000494D 56                      	PUSH	SI
 21712 0000494E 89F7                    	MOV	DI,SI
 21713 00004950 8B0E[5805]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 21714 00004954 833E[4E05]FF            	CMP	word [CURR_DIR_END],-1
 21715 00004959 740E                    	JZ	short NOIDS		; No current dir part
 21716 0000495B 3B3E[4E05]              	CMP	DI,[CURR_DIR_END]
 21717 0000495F 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 21718 00004961 C43E[3A05]              	LES	DI,[THISCDS]
 21719                                  	;mov	[es:di+73],cx
 21720 00004965 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 21721                                  NOIDS:
 21722                                  
 21723                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 21724                                  ; character in the string. CX,DI may be destroyed.
 21725                                  ;
 21726                                  ;	invoke	NAMETRANS
 21727                                  ;	MOV	CL,AL
 21728                                  ;
 21729                                  ; The above is the slow method. The name has *already* been munged by
 21730                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 21731                                  ; the name until ., \ or 0 is hit.
 21732                                  
 21733 00004969 8CD0                    	MOV	AX,SS
 21734 0000496B 8EC0                    	MOV	ES,AX
 21735                                  
 21736                                  ;hkn; Name1 is in DOSDATA
 21737 0000496D BF[E604]                	MOV	DI,NAME1
 21738 00004970 B82020                  	MOV	AX,'  ' ; 2020h
 21739 00004973 AA                      	STOSB
 21740 00004974 AB                      	STOSW
 21741 00004975 AB                      	STOSW
 21742 00004976 AB                      	STOSW
 21743 00004977 AB                      	STOSW
 21744 00004978 AB                      	STOSW
 21745                                  
 21746                                  ;hkn; Name1 is in DOSDATA
 21747 00004979 BF[E604]                	MOV	DI,NAME1
 21748 0000497C 30E4                    	XOR	AH,AH			; bits for CL
 21749                                  GetNam:
 21750                                  	;INC	CL			;AN000; KK incrment volid count
 21751 0000497E AC                      	LODSB
 21752 0000497F 3C2E                    	CMP	AL,'.'
 21753 00004981 7412                    	JZ	short _SetExt
 21754 00004983 08C0                    	OR	AL,AL
 21755 00004985 7424                    	JZ	short _GetDone
 21756 00004987 3C5C                    	CMP	AL,'\'
 21757 00004989 7420                    	JZ	short _GetDone
 21758 0000498B 3C3F                    	CMP	AL,'?'
 21759 0000498D 7503                    	JNZ	short StoNam
 21760 0000498F 80CC01                  	OR	AH,1
 21761                                  StoNam: 
 21762 00004992 AA                      	STOSB
 21763 00004993 EBE9                    	JMP	short GetNam
 21764                                  _SetExt:
 21765 00004995 BF[EE04]                	MOV	DI,NAME1+8
 21766                                  GetExt:
 21767 00004998 AC                      	LODSB
 21768 00004999 08C0                    	OR	AL,AL
 21769 0000499B 740E                    	JZ	short _GetDone
 21770 0000499D 3C5C                    	CMP	AL,'\'
 21771 0000499F 740A                    	JZ	short _GetDone
 21772 000049A1 3C3F                    	CMP	AL,'?'
 21773 000049A3 7503                    	JNZ	short StoExt
 21774 000049A5 80CC01                  	OR	AH,1
 21775                                  StoExt: 
 21776 000049A8 AA                      	STOSB
 21777 000049A9 EBED                    	JMP	short GetExt
 21778                                  _GetDone:
 21779 000049AB 4E                      	DEC	SI
 21780 000049AC 88E1                    	MOV	CL,AH
 21781 000049AE 80C980                  	OR	CL,80H
 21782 000049B1 5F                      	POP	DI			; Start of this element
 21783 000049B2 07                      	POP	ES			; Restore ES:BP
 21784 000049B3 39FE                    	CMP	SI,DI
 21785 000049B5 7503                    	JNZ	short check_device
 21786 000049B7 E9D100                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 21787                                  check_device:
 21788 000049BA 56                      	PUSH	SI			; Start of next element
 21789 000049BB 8A04                    	MOV	AL,[SI]
 21790 000049BD 08C0                    	OR	AL,AL
 21791 000049BF 7508                    	JNZ	short NOT_LAST
 21792                                  
 21793                                  ; for last element of the path switch to the correct search attributes
 21794                                  
 21795 000049C1 8A3E[0805]              	MOV	BH,[SATTRIB]
 21796 000049C5 883E[0605]              	MOV	[ATTRIB],BH
 21797                                  
 21798                                  NOT_LAST:
 21799                                  
 21800                                  ; check name1 to see if we have a device...
 21801                                  
 21802 000049C9 06                      	PUSH	ES			; Save ES:BP
 21803                                  
 21804                                  ;hkn; SS is DOSDATA
 21805                                  	;context ES
 21806 000049CA 16                      	push	ss
 21807 000049CB 07                      	pop	es
 21808 000049CC E81501                  	call	DEVNAME 		; blast BX
 21809 000049CF 07                      	POP	ES			; Restore ES:BP
 21810 000049D0 720B                    	JC	short FindFile		; Not a device
 21811 000049D2 08C0                    	OR	AL,AL			; Test next char again
 21812 000049D4 7403                    	JZ	short GO_BDEV
 21813 000049D6 E9B600                  	JMP	FILEINPATH		; Device name in middle of path
 21814                                  
 21815                                  GO_BDEV:
 21816 000049D9 5E                      	POP	SI			; Points to NUL at end of path
 21817 000049DA E980FE                  	JMP	Build_devJ
 21818                                  
 21819                                  FindFile:
 21820                                  ;;;; 7/28/86
 21821 000049DD 803E[E604]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 21822 000049E2 7505                    	JNZ	short NOE5		; no
 21823 000049E4 C606[E604]05            	MOV	BYTE [NAME1],05H	; change it to 05
 21824                                  NOE5:
 21825                                  ;;;; 7/28/86
 21826 000049E9 57                      	PUSH	DI			; Start of this element
 21827 000049EA 06                      	PUSH	ES			; Save ES:BP
 21828 000049EB 51                      	PUSH	CX			; CL return from NameTrans
 21829                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21830                                  
 21831 000049EC E87C02                  	CALL	LookupPath		; call fastopen to get dir entry
 21832 000049EF 7303                    	JNC	short DIR_FOUND		; found dir entry
 21833                                  
 21834                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21835 000049F1 E8B5FC                  	call	FINDENTRY
 21836                                  DIR_FOUND:
 21837 000049F4 59                      	POP	CX
 21838 000049F5 07                      	POP	ES
 21839 000049F6 5F                      	POP	DI
 21840 000049F7 7303                    	JNC	short LOAD_BUF
 21841 000049F9 E9B800                  	JMP	BADPATHPOP
 21842                                  
 21843                                  LOAD_BUF:
 21844 000049FC C53E[7405]              	LDS	DI,[CURBUF]
 21845                                  	;test	byte [bx+0Bh],10h
 21846 00004A00 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 21847 00004A04 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 21848 00004A06 E98600                  	JMP	FILEINPATH		; Error or end of path
 21849                                  
 21850                                  ; if we are not setting the directory, then check for end of string
 21851                                  
 21852                                  GO_NEXT:
 21853                                  ;hkn; SS override
 21854 00004A09 36803E[F802]00          	CMP	BYTE [SS:NoSetDir],0
 21855 00004A0F 7412                    	JZ	short SetDir
 21856 00004A11 89FA                    	MOV	DX,DI			; Save pointer to entry
 21857 00004A13 8CD9                    	MOV	CX,DS
 21858                                  
 21859                                  ;hkn; SS is DOSDATA
 21860                                  	;context DS
 21861 00004A15 16                      	push	ss
 21862 00004A16 1F                      	pop	ds
 21863 00004A17 5F                      	POP	DI			; Start of next element
 21864                                  	; MSDOS 6.0
 21865                                  	;TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 21866                                  	;JZ	short nofast			; the FastOpen
 21867                                  	;TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 21868                                  	;JZ	short nofast			; no
 21869                                  	;MOV	DI,[Next_Element_Start]	; no need to insert it again
 21870                                  ;nofast:
 21871 00004A18 803D00                  	CMP	BYTE [DI],0
 21872 00004A1B 7501                    	JNZ	short NEXT_ONE		; DOS 3.3
 21873                                  	;JMP	_SETRET			; Got it
 21874 00004A1D C3                      	retn	; 05/09/2018
 21875                                  NEXT_ONE:
 21876 00004A1E 57                      	PUSH	DI			; Put start of next element back on stack
 21877 00004A1F 89D7                    	MOV	DI,DX
 21878 00004A21 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 21879                                  SetDir:
 21880 00004A23 8B14                    	MOV	DX,[SI] 		; Dir_first
 21881                                  
 21882                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21883 00004A25 1E                      	PUSH	DS		      ; save [curbuf+2]
 21884                                  ;hkn; SS is DOSDATA
 21885 00004A26 16                      	push	ss
 21886 00004A27 1F                      	pop	ds		      ; set DS Dosgroup
 21887                                  	;test	byte [FastOpenFlg],2
 21888 00004A28 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21889 00004A2D 7410                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 21890 00004A2F 89D3                    	MOV	BX,DX		      ; not found
 21891 00004A31 8B3E[5405]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 21892 00004A35 50                      	PUSH	AX		      ; save device id (AH)
 21893 00004A36 E8ABFD                  	call	SETDIRSRCH
 21894 00004A39 58                      	POP	AX		      ; restore device id (AH)
 21895 00004A3A 83C402                  	ADD	SP,2		      ; pop ds in stack
 21896 00004A3D EB36                    	JMP	short FAST_OPEN_SKIP
 21897                                  
 21898                                  DO_NORMAL:
 21899 00004A3F 1F                      	POP	DS			; DS = [curbuf + 2]
 21900                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21901                                  
 21902 00004A40 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 21903 00004A42 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 21904 00004A44 53                      	PUSH	BX
 21905 00004A45 50                      	PUSH	AX
 21906 00004A46 56                      	PUSH	SI
 21907 00004A47 51                      	PUSH	CX
 21908                                  	;push	word [di+6]
 21909 00004A48 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 21910                                  	; MSDOS 6.0
 21911                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 21912 00004A4B 89D3                    	MOV	BX,DX
 21913                                  
 21914                                  ;hkn; SS is DOSDATA
 21915                                  	;context DS
 21916 00004A4D 16                      	push	ss
 21917 00004A4E 1F                      	pop	ds
 21918                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 21919 00004A4F E892FD                  	call	SETDIRSRCH		; the entry sector buffer
 21920                                  	; MSDOS 6.0
 21921                                  	;POP	word [HIGH_SECTOR]
 21922 00004A52 5A                      	POP	DX
 21923 00004A53 720A                    	JC	short SKIP_GETB
 21924                                  	;mov	byte [ALLOWED],18h
 21925 00004A55 C606[F702]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 21926 00004A5A 30C0                    	XOR	AL,AL
 21927                                  	;invoke	GETBUFFR		; Get the entry buffer back
 21928 00004A5C E82A14                  	call	GETBUFFR
 21929                                  SKIP_GETB:
 21930 00004A5F 59                      	POP	CX
 21931 00004A60 5E                      	POP	SI
 21932 00004A61 58                      	POP	AX
 21933 00004A62 5B                      	POP	BX
 21934 00004A63 7305                    	JNC	short SET_THE_BUF ; 19/05/2019
 21935 00004A65 5F                      	POP	DI			; Start of next element
 21936 00004A66 89FE                    	MOV	SI,DI			; Point with SI
 21937 00004A68 EB21                    	JMP	SHORT _BADPATH
 21938                                  
 21939                                  SET_THE_BUF:
 21940 00004A6A E8CFF6                  	call	SET_BUF_AS_DIR
 21941 00004A6D 8B3E[7405]              	MOV	DI,[CURBUF]
 21942 00004A71 01FE                    	ADD	SI,DI			; Get the offsets back
 21943 00004A73 01FB                    	ADD	BX,DI
 21944                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 21945                                  FAST_OPEN_SKIP:
 21946 00004A75 5F                      	POP	DI			; Start of next element
 21947 00004A76 E86802                  	CALL	InsertPath		; insert dir entry info
 21948                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 21949 00004A79 8A05                    	MOV	AL,[DI]
 21950 00004A7B 08C0                    	OR	AL,AL
 21951 00004A7D 7434                    	JZ	short _SETRET		; At end
 21952 00004A7F 47                      	INC	DI			; Skip over "/"
 21953 00004A80 89FE                    	MOV	SI,DI			; Point with SI
 21954 00004A82 E8C70B                  	call	PATHCHRCMP
 21955 00004A85 7503                    	JNZ	short find_bad_name	; oops
 21956 00004A87 E9C2FE                  	JMP	FINDPATH		; Next element
 21957                                  
 21958                                  find_bad_name:
 21959 00004A8A 4E                      	DEC	SI			; Undo above INC to get failure point
 21960                                  _BADPATH:
 21961 00004A8B 30C9                    	XOR	CL,CL			; Set zero
 21962 00004A8D EB2C                    	JMP	SHORT BADPRET
 21963                                  
 21964                                  FILEINPATH:
 21965 00004A8F 5F                      	POP	DI			; Start of next element
 21966                                  
 21967                                  ;hkn; SS is DOSDATA
 21968                                  	;context DS			; Got to from one place with DS gone
 21969 00004A90 16                      	push	ss
 21970 00004A91 1F                      	pop	ds
 21971                                  
 21972                                  ; DOS 3.3 FastOpen
 21973                                  	;test	byte [FastOpenFlg],1
 21974 00004A92 F606[6E0F]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 21975 00004A97 740B                    	JZ	short NO_FAST		; device info to fastopen
 21976                                  	;test	byte [FastOpenFlg],2
 21977 00004A99 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21978 00004A9E 7404                    	JZ	short NO_FAST
 21979 00004AA0 8B3E[6F0F]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 21980                                  					 ; success
 21981                                  NO_FAST:
 21982                                  ; DOS 3.3 FastOpen
 21983                                  
 21984 00004AA4 8A05                    	MOV	AL,[DI]
 21985 00004AA6 08C0                    	OR	AL,AL
 21986 00004AA8 7404                    	JZ	short INCRET
 21987 00004AAA 89FE                    	MOV	SI,DI			; Path too long
 21988 00004AAC EB0D                    	JMP	SHORT BADPRET
 21989                                  
 21990                                  INCRET:
 21991                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 21992                                  
 21993 00004AAE E83002                  	CALL   InsertPath		; insert dir entry info
 21994                                  
 21995                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 21996 00004AB1 FEC0                    	INC	AL			; Reset zero
 21997                                  _SETRET:
 21998 00004AB3 C3                      	retn
 21999                                  
 22000                                  BADPATHPOP:
 22001 00004AB4 5E                      	POP	SI			; Start of next element
 22002 00004AB5 8A04                    	MOV	AL,[SI]
 22003 00004AB7 89FE                    	MOV	SI,DI			; Start of bad element
 22004 00004AB9 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 22005                                  BADPRET:
 22006 00004ABB A0[0805]                	MOV	AL,[SATTRIB]
 22007 00004ABE A2[0605]                	MOV	[ATTRIB],AL		; Make sure return correct
 22008 00004AC1 F9                      	STC
 22009 00004AC2 C3                      	retn
 22010                                  
 22011                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 22012                                  ;---------------------------------------------------------------------------
 22013                                  ;
 22014                                  ; Procedure Name : STARTSRCH
 22015                                  ;
 22016                                  ; Inputs:
 22017                                  ;	[THISDPB] Set
 22018                                  ; Function:
 22019                                  ;	Set up a search for GETENTRY and NEXTENTRY
 22020                                  ; Outputs:
 22021                                  ;	ES:BP = Drive parameters
 22022                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 22023                                  ; Destroys ES,BP,AX
 22024                                  ;--------------------------------------------------------------------------
 22025                                  
 22026                                  STARTSRCH:
 22027 00004AC3 C42E[2405]              	LES	BP,[THISDPB]
 22028 00004AC7 31C0                    	XOR	AX,AX
 22029 00004AC9 A3[F402]                	MOV	[LASTENT],AX
 22030 00004ACC A2[1605]                	MOV	[VOLID],AL		; No volume ID found
 22031 00004ACF 48                      	DEC	AX
 22032 00004AD0 A3[6A05]                	MOV	[ENTFREE],AX
 22033 00004AD3 A3[6C05]                	MOV	[ENTLAST],AX
 22034 00004AD6 C3                      	retn
 22035                                  
 22036                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 22037                                  ;----------------------------------------------------------------------------
 22038                                  ; Procedure Name : MatchAttributes
 22039                                  ;
 22040                                  ; Input:    [Attrib] = attribute to search for
 22041                                  ;	    CH = found attribute
 22042                                  ; Output:   JZ <match>
 22043                                  ;	    JNZ <nomatch>
 22044                                  ; Registers modified: noneski
 22045                                  ;----------------------------------------------------------------------------
 22046                                  
 22047                                  MatchAttributes:
 22048 00004AD7 50                      	PUSH	AX
 22049                                  
 22050                                  ;hkn; SS override
 22051 00004AD8 36A0[0605]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 22052 00004ADC F6D0                    	NOT	AL			; AL <- SearchSet'
 22053 00004ADE 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 22054                                  	;and	al,16h
 22055 00004AE0 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 22056                                  ;
 22057                                  ; the result is non-zero if an attribute is not in the search set
 22058                                  ; and in the found set and in the important set. This means that we do not
 22059                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 22060                                  ;
 22061 00004AE2 58                      	POP	AX
 22062 00004AE3 C3                      	retn
 22063                                  
 22064                                  ;Break <DevName - Look for name of device>
 22065                                  ;---------------------------------------------------------------------------
 22066                                  ;
 22067                                  ; Procedure Name : DevName
 22068                                  ;
 22069                                  ; Inputs:
 22070                                  ;	DS,ES:DOSDATA
 22071                                  ;	Filename in NAME1
 22072                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 22073                                  ; Function:
 22074                                  ;	Determine if file is in list of I/O drivers
 22075                                  ; Outputs:
 22076                                  ;	Carry set if not a device
 22077                                  ;	ELSE
 22078                                  ;	Zero flag set
 22079                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 22080                                  ;	     bits 0-4 set from low byte of attribute word
 22081                                  ;	DEVPT = DWORD pointer to Device header of device
 22082                                  ; BX destroyed, others preserved
 22083                                  ;---------------------------------------------------------------------------
 22084                                  
 22085                                  DEVNAME:
 22086                                  	; 28/07/2018 - Retro DOS v3.0
 22087                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 22088                                  
 22089 00004AE4 56                      	PUSH	SI
 22090 00004AE5 57                      	PUSH	DI
 22091 00004AE6 51                      	PUSH	CX
 22092 00004AE7 50                      	PUSH	AX
 22093                                  
 22094                                  ; E5 special code
 22095 00004AE8 FF36[E604]              	PUSH	WORD [NAME1]
 22096 00004AEC 803E[E604]05            	CMP	byte [NAME1],5
 22097 00004AF1 7505                    	JNZ	short NOKTR
 22098 00004AF3 C606[E604]E5            	MOV	byte [NAME1],0E5h
 22099                                  NOKTR:
 22100                                  	;test	byte [ATTRIB],8
 22101 00004AF8 F606[0605]08            	TEST	byte [ATTRIB],attr_volume_id
 22102                                  					; If looking for VOL id don't find devs
 22103 00004AFD 7522                    	JNZ	short RET31
 22104                                  
 22105                                  ;hkn; NULDEV is in DOSDATA
 22106 00004AFF BE[4800]                	MOV	SI,NULDEV
 22107                                  LOOKIO:
 22108                                  	;test	word [si+4],8000h
 22109 00004B02 F744040080              	TEST	word [SI+SYSDEV.ATT],DEVTYP
 22110 00004B07 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 22111 00004B09 89F0                    	MOV	AX,SI
 22112                                  	;add	si,10
 22113 00004B0B 83C60A                  	ADD	SI,SYSDEV.NAME
 22114                                  
 22115                                  ;hkn; NAME1 is in DOSDATA
 22116 00004B0E BF[E604]                	MOV	DI,NAME1
 22117 00004B11 B90400                  	MOV	CX,4			; All devices are 8 letters
 22118 00004B14 F3A7                    	REPE	CMPSW			; Check for name in list
 22119 00004B16 89C6                    	MOV	SI,AX
 22120 00004B18 7415                    	JZ	short IOCHK		; Found it?
 22121                                  SKIPDEV:
 22122 00004B1A C534                    	LDS	SI,[SI]			; Get address of next device
 22123 00004B1C 83FEFF                  	CMP	SI,-1			; At end of list?
 22124 00004B1F 75E1                    	JNZ	short LOOKIO
 22125                                  RET31:	
 22126 00004B21 F9                      	STC				; Not found
 22127                                  RETNV:	
 22128 00004B22 8CD1                    	MOV	CX,SS
 22129 00004B24 8ED9                    	MOV	DS,CX
 22130                                  
 22131 00004B26 8F06[E604]              	POP	WORD [NAME1]
 22132 00004B2A 58                      	POP	AX
 22133 00004B2B 59                      	POP	CX
 22134 00004B2C 5F                      	POP	DI
 22135 00004B2D 5E                      	POP	SI
 22136 00004B2E C3                      	RETN
 22137                                  
 22138                                  IOCHK:
 22139                                  ;hkn; SS override for DEVPT
 22140 00004B2F 368C1E[3405]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 22141                                  	;mov	bh,[si+4]
 22142 00004B34 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 22143 00004B37 80CFC0                  	OR	BH,0C0h
 22144 00004B3A 80E7DF                  	and	bh,0DFh
 22145                                  	;AND	BH,~(020h)		; Clears Carry
 22146 00004B3D 368936[3205]            	MOV	[SS:DEVPT],SI
 22147 00004B42 EBDE                    	JMP	short RETNV
 22148                                  
 22149                                  ;BREAK <Build_device_ent - Make a Directory entry>
 22150                                  ;---------------------------------------------------------------------------
 22151                                  ; Procedure Name : Build_device_ent
 22152                                  ;
 22153                                  ; Inputs:
 22154                                  ;	[NAME1] has name
 22155                                  ;	BH is attribute field (supplied by DEVNAME)
 22156                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 22157                                  ; Function:
 22158                                  ;	Build a directory entry for a device at DEVFCB
 22159                                  ; Outputs:
 22160                                  ;	BX points to DEVFCB
 22161                                  ;	SI points to dir_first field
 22162                                  ;	AH = input BH
 22163                                  ;	AL = 0
 22164                                  ;	dir_first = DEVPT
 22165                                  ;	Zero Set, Carry Clear
 22166                                  ; DS,ES,BP preserved, others destroyed
 22167                                  ;--------------------------------------------------------------------------
 22168                                  
 22169                                  Build_device_ent:
 22170 00004B44 B82020                  	MOV	AX,"  " ; 2020h
 22171                                  
 22172                                  ;hkn; DEVFCB is in DOSDATA
 22173 00004B47 BF[EE04]                	MOV	DI,DEVFCB+8		; Point to extent field
 22174                                  
 22175                                  ;	Fill dir_ext	BUGBUG - use ERRNZs for this stuff!
 22176                                  
 22177 00004B4A AB                      	STOSW
 22178 00004B4B AA                      	STOSB				; Blank out extent field
 22179                                  	;mov	al,40h
 22180 00004B4C B040                    	MOV	AL,attr_device
 22181                                  
 22182                                  ;	Fill Dir_attr
 22183                                  
 22184 00004B4E AA                      	STOSB				; Set attribute field
 22185 00004B4F 31C0                    	XOR	AX,AX
 22186 00004B51 B90A00                  	MOV	CX,10
 22187                                  
 22188                                  ; Fill dir_pad
 22189                                  
 22190 00004B54 F3AB                    	REP	STOSW			; Fill rest with zeros
 22191 00004B56 E860CD                  	call	DATE16
 22192                                  
 22193                                  ;hkn; DEVFCB is in DOSDATA
 22194 00004B59 BF[FC04]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 22195 00004B5C 92                      	XCHG	AX,DX
 22196                                  
 22197                                  ; Fill dir_time
 22198                                  
 22199 00004B5D AB                      	STOSW
 22200 00004B5E 92                      	XCHG	AX,DX
 22201                                  
 22202                                  ; Fill dir_date
 22203                                  
 22204 00004B5F AB                      	STOSW
 22205 00004B60 89FE                    	MOV	SI,DI			; SI points to dir_first field
 22206 00004B62 A1[3205]                	MOV	AX,[DEVPT]
 22207                                  
 22208                                  ; Fill dir_first
 22209                                  
 22210 00004B65 AB                      	STOSW				; Dir_first points to device
 22211 00004B66 A1[3405]                	MOV	AX,[DEVPT+2]
 22212                                  ;
 22213                                  ; Fill dir_size_l
 22214                                  ;
 22215 00004B69 AB                      	STOSW
 22216 00004B6A 88FC                    	MOV	AH,BH			; Put device atts in AH
 22217                                  
 22218                                  ;hkn; DEVFCB is in DOSDATA
 22219 00004B6C BB[E604]                	MOV	BX,DEVFCB
 22220 00004B6F 30C0                    	XOR	AL,AL			; Set zero, clear carry
 22221 00004B71 C3                      	retn
 22222                                  
 22223                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 22224                                  ;----------------------------------------------------------------------------
 22225                                  ;
 22226                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 22227                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 22228                                  ;   If invalid, reset original CDS to root.
 22229                                  ;
 22230                                  ;   Inputs:	ThisCDS points to CDS of interest
 22231                                  ;		SS:DI points to temp buffer
 22232                                  ;   Outputs:	The current directory string is validated on the appropriate
 22233                                  ;		    drive
 22234                                  ;		ThisDPB changed
 22235                                  ;		ES:DI point to CDS
 22236                                  ;		Carry set if error (currently user FAILed to I 24)
 22237                                  ;   Registers modified: all
 22238                                  ;----------------------------------------------------------------------------
 22239                                  
 22240                                  ValidateCDS:
 22241                                  	; 28/07/2018 - Retro DOS v3.0
 22242                                  
 22243                                     %define  Temp	[bp-2]	; word
 22244                                     %define  SaveCDS	[bp-6]	; dword
 22245                                     %define  SaveCDSL	[bp-6]	; word
 22246                                     %define  SaveCDSH	[bp-4]	; word
 22247                                  
 22248                                  	;Enter
 22249 00004B72 55                      	push	bp
 22250 00004B73 89E5                    	mov	bp,sp
 22251 00004B75 83EC06                  	sub	sp,6
 22252                                  
 22253 00004B78 897EFE                  	MOV	Temp,DI
 22254                                  
 22255                                  ;hkn; SS override
 22256 00004B7B 36C536[3A05]            	LDS	SI,[SS:THISCDS]
 22257 00004B80 8976FA                  	MOV	SaveCDSL,SI
 22258 00004B83 8C5EFC                  	MOV	SaveCDSH,DS
 22259                                  	;EnterCrit critDisk
 22260 00004B86 E8E3D4                  	call	EcritDisk
 22261                                  	;test	word [si+67],8000h
 22262 00004B89 F744430080              	TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 22263 00004B8E 7403                    	JZ	short _DoSplice
 22264 00004B90 E98900                  	JMP	FatFail
 22265                                  _DoSplice:
 22266 00004B93 30D2                    	XOR	DL,DL
 22267 00004B95 368616[F802]            	XCHG	DL,[SS:NoSetDir]
 22268                                  
 22269                                  ;hkn; SS is DOSDATA
 22270                                  	;Context ES
 22271 00004B9A 16                      	push	ss
 22272 00004B9B 07                      	pop	es
 22273                                  	;Invoke	FStrcpy
 22274 00004B9C E8C2D3                  	call	FStrCpy
 22275 00004B9F 8B76FE                  	MOV	SI,Temp
 22276                                  
 22277                                  ;hkn; SS is DOSDATA
 22278                                  	;Context DS
 22279 00004BA2 16                      	push	ss
 22280 00004BA3 1F                      	pop	ds	
 22281                                  	;Invoke	Splice
 22282 00004BA4 E83221                  	call	Splice
 22283                                  
 22284                                   ;hkn; SS is DOSDATA
 22285                                  	;Context DS			;   FatReadCDS (ThisCDS);
 22286 00004BA7 16                      	push	ss
 22287 00004BA8 1F                      	pop	ds
 22288 00004BA9 8816[F802]              	MOV	[NoSetDir],DL
 22289 00004BAD C43E[3A05]              	LES	DI,[THISCDS]
 22290                                  	;SAVE	<BP>
 22291 00004BB1 55                      	push	bp
 22292                                  	;Invoke	FATREAD_CDS
 22293 00004BB2 E80A10                  	call	FATREAD_CDS	
 22294                                  	;RESTORE <BP>
 22295 00004BB5 5D                      	pop	bp
 22296 00004BB6 7264                    	JC	short FatFail
 22297                                  
 22298 00004BB8 C536[3A05]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 22299                                  	;cmp	word [si+73], -1
 22300 00004BBC 837C49FF                	CMP	word [SI+curdir.ID],-1
 22301 00004BC0 754C                    	JNZ	short RestoreCDS
 22302                                  
 22303                                  ;hkn; SS is DOSDATA
 22304                                  	;Context ES
 22305 00004BC2 16                      	push	ss
 22306 00004BC3 07                      	pop	es
 22307                                  
 22308                                  ;hkn; SS override
 22309                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 22310 00004BC4 36FF36[4A05]            	push	word [SS:WFP_START]
 22311                                  	;cmp	si,[bp-6]
 22312 00004BC9 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 22313 00004BCC 750B                    	JNZ	short DoChdir
 22314                                  	;mov	di,[bp-2]
 22315 00004BCE 8B7EFE                  	MOV	DI,Temp
 22316                                  
 22317                                  ;hkn; SS override
 22318 00004BD1 36893E[4A05]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 22319                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 22320 00004BD6 E888D3                  	call	FStrCpy
 22321                                  DoChdir:
 22322                                  ;hkn; SS is DOSDATA
 22323                                  	;Context DS
 22324 00004BD9 16                      	push	ss
 22325 00004BDA 1F                      	pop	ds
 22326                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 22327 00004BDB FF36[0805]              	push	word [SATTRIB]
 22328 00004BDF 55                      	push	bp
 22329                                  	;Invoke	DOS_ChDir
 22330 00004BE0 E80BF1                  	call	DOS_CHDIR
 22331                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 22332 00004BE3 5D                      	pop	bp
 22333 00004BE4 5B                      	pop	bx
 22334 00004BE5 8F06[4A05]              	pop	word [WFP_START]
 22335 00004BE9 881E[0805]              	MOV	[SATTRIB],BL
 22336 00004BED C576FA                  	LDS	SI,SaveCDS
 22337 00004BF0 730F                    	JNC	short SetCluster	;	if (c == -1) {
 22338                                  
 22339                                  ;hkn; SS override for THISCDS
 22340 00004BF2 368936[3A05]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 22341 00004BF7 368C1E[3C05]            	MOV	[SS:THISCDS+2],DS
 22342 00004BFC 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 22343 00004BFE 884C03                  	MOV	[SI+3],CL		;	    }
 22344                                  SetCluster:
 22345                                  	;mov	word [si+73],0FFFFh
 22346 00004C01 C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 22347 00004C06 36C536[3A05]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 22348                                  	; MSDOS 6.0
 22349                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 22350                                  	;JZ	short setdirclus		     ;AN000;;MS.
 22351                                  	;MOV	CX,-1				     ;AN000;;MS.
 22352                                  setdirclus:
 22353                                  	;mov	[si+73],cx
 22354 00004C0B 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 22355                                  RestoreCDS:
 22356 00004C0E C47EFA                  	LES	DI,SaveCDS
 22357 00004C11 36893E[3A05]            	MOV	[SS:THISCDS],DI
 22358 00004C16 368C06[3C05]            	MOV	[SS:THISCDS+2],ES
 22359 00004C1B F8                      	CLC
 22360                                  FatFail:
 22361                                  	;LeaveCrit critDisk
 22362 00004C1C E855D4                  	call	LcritDisk
 22363                                  
 22364                                  	;les	di,[bp-6]
 22365 00004C1F C47EFA                  	LES	DI,SaveCDS
 22366                                  	;Leave
 22367 00004C22 89EC                    	mov	sp,bp
 22368 00004C24 5D                      	pop	bp
 22369 00004C25 C3                      	retn
 22370                                  
 22371                                  ; 28/07/2018 - Retro DOS v3.0
 22372                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 22373                                  
 22374                                  ;Break	<CheckThisDevice - Check for being a device>
 22375                                  ;---------------------------------------------------------------------------
 22376                                  ;
 22377                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 22378                                  ;   device specified. We will return carry if there is a device present. 
 22379                                  ;   The forms of devices we will recognize are:
 22380                                  ;
 22381                                  ;	[path]device
 22382                                  ;
 22383                                  ;   Note that the drive letter has *already* been removed. All other forms
 22384                                  ;   are not considered to be devices. If such a device is found we change
 22385                                  ;   the source pointer to point to the device component.
 22386                                  ;
 22387                                  ;   Inputs:	ES is DOSDATA
 22388                                  ;		DS:SI contains name
 22389                                  ;   Outputs:	ES is DOSDATA
 22390                                  ;		DS:SI point to name or device
 22391                                  ;		Carry flag set if device was found
 22392                                  ;		Carry flag reset otherwise
 22393                                  ;   Registers Modified: all except ES:DI, DS
 22394                                  ;----------------------------------------------------------------------------
 22395                                  
 22396                                  CheckThisDevice:
 22397 00004C26 57                      	push	di
 22398 00004C27 56                      	push	si
 22399 00004C28 89F7                    	MOV	DI,SI
 22400                                  ;
 22401                                  ; Check for presence of \dev\ (Dam multiplan!)
 22402                                  ;
 22403 00004C2A 8A04                    	MOV	AL,[SI]
 22404 00004C2C E81D0A                  	call	PATHCHRCMP		; is it a path char?
 22405 00004C2F 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 22406 00004C31 46                      	INC	SI			; simulate LODSB
 22407                                  ;
 22408                                  ; We have the leading path separator. Look for DEV part.
 22409                                  ;
 22410 00004C32 AD                      	LODSW
 22411 00004C33 0D2020                  	OR	AX,2020h
 22412 00004C36 3D6465                  	cmp	ax,"de"
 22413                                  	;CMP	AX,"e"<< 8 + "d"
 22414 00004C39 752D                    	JNZ	short NotDevice		; not "de", assume not device
 22415 00004C3B AC                      	LODSB
 22416 00004C3C 0C20                    	OR	AL,20h
 22417 00004C3E 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 22418 00004C40 7526                    	JNZ	short NotDevice
 22419 00004C42 AC                      	LODSB
 22420 00004C43 E8060A                  	call	PATHCHRCMP		; do we have the last path separator?
 22421 00004C46 7520                    	JNZ	short NotDevice		; no. go for it.
 22422                                  ;
 22423                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 22424                                  ; SI and DevName may destroy DS.
 22425                                  ;
 22426                                  ParseDev:
 22427 00004C48 1E                      	push	ds
 22428 00004C49 56                      	push	si			; preserve the source pointer
 22429 00004C4A E89509                  	call	NameTrans		; advance DS:SI
 22430 00004C4D 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 22431 00004C50 F9                      	STC				; simulate a Carry return from DevName
 22432 00004C51 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 22433                                  
 22434                                  ;hkn; SS is DOSDATA
 22435 00004C53 16                      	push	ss
 22436 00004C54 1F                      	pop	ds
 22437                                  
 22438                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 22439                                  ;
 22440                                  ; SR;
 22441                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 22442                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 22443                                  ; old call set the volume attribute bit.
 22444                                  ;
 22445 00004C55 A0[0805]                	mov	al,[SATTRIB]
 22446 00004C58 A2[0605]                	mov	[ATTRIB],al		;set Attrib for DevName
 22447                                  
 22448                                  ; M026 - end
 22449                                  
 22450 00004C5B E886FE                  	call	DEVNAME
 22451                                  
 22452                                  SkipSearch:
 22453 00004C5E 5E                      	pop	si
 22454 00004C5F 1F                      	pop	ds
 22455                                  ;
 22456                                  ; SI points to the beginning of the potential device. If we have a device
 22457                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 22458                                  ; original value. At this point Carry set indicates FILE.
 22459                                  ;
 22460                                  CheckReturn:
 22461 00004C60 5F                      	pop	di			; get original SI
 22462 00004C61 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 22463 00004C63 89FE                    	MOV	SI,DI
 22464                                  Check_Done:
 22465 00004C65 5F                      	pop	di
 22466 00004C66 F5                      	CMC				; invert carry. Carry => device
 22467 00004C67 C3                      	retn
 22468                                  NotDevice:
 22469 00004C68 F9                      	STC
 22470 00004C69 EBF5                    	JMP	short CheckReturn
 22471                                  
 22472                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 22473                                  ;-----------------------------------------------------------------------------
 22474                                  ;
 22475                                  ; Procedure Name : LookupPath
 22476                                  ;
 22477                                  ; Output  DS:SI -> path name,
 22478                                  ;	  ES:DI -> dir entry info buffer
 22479                                  ;	  ES:CX -> extended dir info buffer
 22480                                  ;
 22481                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 22482                                  ;			     FastOpen, DS:SI points to char just one after
 22483                                  ;			     the last char of path name which is fully or
 22484                                  ;			     partially found in FastOPen
 22485                                  ;	  carry flag set : FastOpen not in memory or path name not found
 22486                                  ;
 22487                                  ;----------------------------------------------------------------------------
 22488                                  
 22489                                  LookupPath:
 22490                                  ;	PUSH	AX
 22491                                  
 22492                                  ;hkn; SS override
 22493                                  	;test	byte [ss:FastOpenFlg],1
 22494 00004C6B 36F606[6E0F]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSPEN
 22495 00004C71 7502                    	JNZ	short FASTINST			    ; and this routine is
 22496                                  NOLOOK:
 22497 00004C73 EB6A                    	JMP	NOLOOKUP			    ; executed once
 22498                                  
 22499                                  FASTINST:
 22500                                  ;hkn; SS override
 22501                                  	;test	byte [ss:FastOpenFlg],8
 22502 00004C75 36F606[6E0F]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 22503 00004C7B 75F6                    	JNZ	short NOLOOK			    ; yes
 22504                                  
 22505 00004C7D BB[430F]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 22506                                  
 22507                                  ;hkn; SS override
 22508 00004C80 368B36[4A05]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 22509 00004C85 BF[4E0F]                	MOV	DI,Dir_Info_Buff
 22510 00004C88 B9[490F]                	MOV	CX,FastOpen_Ext_Info
 22511 00004C8B B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 22512 00004C8D 1E                      	PUSH	DS
 22513 00004C8E 07                      	POP	ES
 22514                                  
 22515                                  ;hkn; SS override
 22516                                  	;call	far [bx+2]
 22517 00004C8F FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 22518 00004C92 723A                    	JC	short NOTFOUND			    ; fastopen not in memory
 22519                                  
 22520 00004C94 8D5CFE                  	LEA	BX,[SI-2]
 22521                                  
 22522                                  ;hkn; SS override
 22523 00004C97 363B1E[4A05]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 22524 00004C9C 7430                    	JZ	short NOTFOUND			    ; no
 22525                                  
 22526                                  	; MSDOSD 6.0				    ; fully or partially found
 22527                                  	;CMP	BYTE [SI],0			    ;AN000;FO.
 22528                                  	;JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 22529                                  	;PUSH	CX				    ;AN000;FO.; is attribute matched ?
 22530                                  
 22531                                  ;hkn; SS override for attrib/sattrib
 22532                                  	;MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 22533                                  	;MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 22534                                  	;MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 22535                                  	;MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 22536                                  	;call	Matchattributes 		    ;AN000;FO.;
 22537                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 22538                                  	;POP	CX				    ;AN000;FO.;
 22539                                  	;JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 22540                                  ;parfnd:
 22541                                  
 22542                                  ;hkn; SS override
 22543 00004C9E 368936[6F0F]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 22544 00004CA3 89CB                    	MOV	BX,CX
 22545                                  	; MSDOS 6.0
 22546                                  	;MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 22547                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 22548                                  	;MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 22549                                  	;MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 22550                                  	;MOV	[SS:DIRSTART],AX			    ;AN001;;FO.
 22551                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22552                                  	;mov	ax,[bx+3] ; MSDOS 3.3
 22553 00004CA5 8B4703                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 22554 00004CA8 36A3[5405]              	MOV	[SS:CLUSNUM],AX			    ;
 22555                                  
 22556 00004CAC 06                      	PUSH	ES				    ; save ES
 22557                                  ;hkn; SS override
 22558 00004CAD 36C41E[2405]            	LES	BX,[SS:THISDPB]			    ; put drive id
 22559 00004CB2 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 22560                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 22561 00004CB5 07                      	POP	ES				    ; pop ES
 22562                                  ;SR;
 22563                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 22564                                  ;indicate it is not a root dir
 22565                                  ;
 22566 00004CB6 36C706[7405]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 22567                                  
 22568 00004CBD 368C06[7605]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 22569 00004CC2 89FB                    	MOV	BX,DI				    ; start of entry
 22570                                  	;lea	si,[di+1Ah]
 22571 00004CC4 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 22572                                  						    ; dir_first field in the
 22573                                  						    ; dir entry
 22574                                  ;hkn; SS override for FastOpenFlg
 22575                                  	;or	byte [ss:FastOpenFlg],2
 22576 00004CC7 36800E[6E0F]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 22577                                  ;	POP	AX
 22578 00004CCD C3                      	RETN
 22579                                  NOTFOUND:
 22580 00004CCE 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 22581 00004CD1 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 22582 00004CD3 36C606[6E0F]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 22583                                  Partial_Success:
 22584                                  	;and	byte [SS:FastOpenFlg],0FBh
 22585 00004CD9 368026[6E0F]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 22586                                  NOLOOKUP:
 22587                                  ;	POP	AX
 22588 00004CDF F9                      	STC
 22589 00004CE0 C3                      	RETN
 22590                                  
 22591                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 22592                                  ;-----------------------------------------------------------------------------
 22593                                  ;
 22594                                  ; Procedure Name : InsertPath
 22595                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 22596                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 22597                                  ;	  DS = DOSDATA
 22598                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 22599                                  ;
 22600                                  ;-----------------------------------------------------------------------------
 22601                                  
 22602                                  InsertPath:
 22603 00004CE1 9C                      	PUSHF
 22604                                  ;hkn; SS override for FastOpenFlag
 22605                                  	;test	byte [SS:FastOpenFlg], 1
 22606 00004CE2 36F606[6E0F]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 22607 00004CE8 7465                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 22608                                  	;test	byte [ss:FastOpenFlg],2
 22609 00004CEA 36F606[6E0F]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 22610 00004CF0 740D                    	JZ	short INSERT_DIR_INFO		; no
 22611                                  	;and	byte [ss:FastOpenFlg],0FDh
 22612 00004CF2 368026[6E0F]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 22613 00004CF8 368B3E[6F0F]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 22614 00004CFD EB4A                    	JMP	short GET_NEXT2
 22615                                  INSERT_DIR_INFO:				; save registers
 22616 00004CFF 1E                      	PUSH	DS
 22617 00004D00 06                      	PUSH	ES
 22618 00004D01 53                      	PUSH	BX
 22619 00004D02 56                      	PUSH	SI
 22620 00004D03 57                      	PUSH	DI
 22621 00004D04 51                      	PUSH	CX
 22622 00004D05 50                      	PUSH	AX
 22623                                  
 22624                                  ;hkn; SS override
 22625 00004D06 36C53E[7405]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 22626 00004D0B BE[490F]                	MOV	SI,FastOpen_Ext_Info
 22627                                  	;mov	ax,[di+6]
 22628 00004D0E 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 22629                                  	; 22/07/2019
 22630                                  	; MSDOS 6.0
 22631                                  	;MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 22632                                  	;MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 22633                                  
 22634                                  ;hkn; SS is DOSDATA
 22635 00004D11 16                      	push	ss
 22636 00004D12 1F                      	pop	ds
 22637                                  	; MSDOS 6.0
 22638                                  	;MOV	[SI+FEI.dirsec+2],AX  ;AN000;>32mb save high dir sector
 22639                                  	; MSDOS 3.3	
 22640                                  	;mov	[si+1],ax	
 22641 00004D13 894401                  	MOV	[SI+FEI.dirsec],AX
 22642                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22643 00004D16 A1[5405]                	MOV	AX,[CLUSNUM]		; save next cluster number
 22644                                  	;;mov	[si+5],ax ; MSDOS 6.0
 22645                                  	;mov	[si+3],ax ; MSDOS 3.3
 22646 00004D19 894403                  	MOV	[SI+FEI.clusnum],AX
 22647                                  	; MSDOS 6.0
 22648                                  	;MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 22649                                  	;MOV	[SI+FEI.lastent],AX	;AN000;FO.
 22650                                  	;MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 22651                                  	;MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 22652                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22653 00004D1C 89D8                    	MOV	AX,BX
 22654                                  	;add	di,16
 22655 00004D1E 83C710                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 22656 00004D21 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 22657                                  	;mov	cl,32
 22658 00004D23 B120                    	MOV	CL,dir_entry.size
 22659 00004D25 F6F1                    	DIV	CL
 22660                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 22661 00004D27 8804                    	mov	[si],al
 22662                                  
 22663 00004D29 1E                      	PUSH	DS
 22664 00004D2A 07                      	POP	ES
 22665                                  
 22666 00004D2B 8E1E[7605]              	MOV	DS,[CURBUF+2]
 22667 00004D2F 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 22668                                  	;cmp	word [di+1Ah],0
 22669 00004D31 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 22670                                  					; never insert info when file is empty
 22671 00004D35 740B                    	JZ	short SKIP_INSERT	; e.g. newly created file
 22672                                  
 22673 00004D37 56                      	PUSH	SI			; ES:BX -> extended info
 22674 00004D38 5B                      	POP	BX
 22675                                  
 22676                                  	;mov	al,2
 22677 00004D39 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 22678 00004D3B BE[430F]                	MOV	SI,FastOpenTable
 22679                                  	;call	far [es:si+2]
 22680 00004D3E FF5C02                  	CALL	far [SI+fastopen_entry.name_caching]
 22681                                  
 22682 00004D41 F8                      	CLC
 22683                                  SKIP_INSERT:
 22684 00004D42 58                      	POP	AX
 22685 00004D43 59                      	POP	CX			; restore registers
 22686 00004D44 5F                      	POP	DI
 22687 00004D45 5E                      	POP	SI
 22688 00004D46 5B                      	POP	BX
 22689 00004D47 07                      	POP	ES
 22690 00004D48 1F                      	POP	DS
 22691                                  GET_NEXT2:
 22692                                  	;or	[ss:FastOpenFlg],8
 22693 00004D49 36800E[6E0F]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 22694                                  					; we got dir info from fastopen so
 22695                                  GET_NEXT_ELEMENT:
 22696 00004D4F 9D                      	POPF
 22697 00004D50 C3                      	RETN
 22698                                  
 22699                                  ;============================================================================
 22700                                  ; DEV.ASM, MSDOS 6.0, 1991
 22701                                  ;============================================================================
 22702                                  ; 28/07/2018 - Retro DOS v3.0
 22703                                  
 22704                                  ; DEV.ASM: Retro DOS v2.0 - 14/03/2018
 22705                                  
 22706                                  ;TITLE   DEV - Device call routines
 22707                                  ;NAME    Dev
 22708                                  
 22709                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 22710                                  ;----------------------------------------------------------------------------
 22711                                  ;
 22712                                  ; Procedure Name : IOFUNC
 22713                                  ;
 22714                                  ; Inputs:
 22715                                  ;	DS:SI Points to SFT
 22716                                  ;	AH is function code
 22717                                  ;		= 0 Input
 22718                                  ;		= 1 Input Status
 22719                                  ;		= 2 Output
 22720                                  ;		= 3 Output Status
 22721                                  ;		= 4 Flush
 22722                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 22723                                  ;				   present.
 22724                                  ;	AL = character if output
 22725                                  ; Function:
 22726                                  ;	Perform indicated I/O to device or file
 22727                                  ; Outputs:
 22728                                  ;	AL is character if input
 22729                                  ;	If a status call
 22730                                  ;		zero set if not ready
 22731                                  ;		zero reset if ready (character in AL for input status)
 22732                                  ; For regular files:
 22733                                  ;	Input Status
 22734                                  ;		Gets character but restores position
 22735                                  ;		Zero set on EOF
 22736                                  ;	Input
 22737                                  ;		Gets character advances position
 22738                                  ;		Returns ^Z on EOF
 22739                                  ;	Output Status
 22740                                  ;		Always ready
 22741                                  ; AX altered, all other registers preserved
 22742                                  ;----------------------------------------------------------------------------
 22743                                  
 22744                                  IOFUNC:
 22745 00004D51 368C16[3403]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 22746                                  					; DEVIOBUF
 22747 00004D56 36C706[3203][5E03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 22748 00004D5D 36C706[3603]0100        	MOV	WORD [SS:IOSCNT],1
 22749 00004D64 36A3[5E03]              	MOV	WORD [SS:DEVIOBUF],AX
 22750                                  	;test	word [si+5],8000h
 22751 00004D68 F744050080              	TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet
 22752 00004D6D 7403                    	JZ	short IOTO22		;AN000;
 22753 00004D6F E98500                  	JMP	IOTOFILE		;AN000;
 22754                                  IOTO22:
 22755                                  	;test	word [si+5],80h ; 17/05/2019
 22756 00004D72 F744058000              	TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 22757 00004D77 7502                    	JNZ	short IOTO33		;AN000;
 22758 00004D79 EB7C                    	JMP	IOTOFILE		;AN000;
 22759                                  IOTO33:
 22760 00004D7B E87AC8                  	call	save_world
 22761 00004D7E 8CDA                    	MOV	DX,DS
 22762 00004D80 8CD3                    	MOV	BX,SS
 22763 00004D82 8EDB                    	MOV	DS,BX
 22764 00004D84 8EC3                    	MOV	ES,BX
 22765 00004D86 31DB                    	XOR	BX,BX
 22766 00004D88 80FC05                  	cmp	ah,5		    ; system wait enabled?
 22767 00004D8B 7504                    	jnz	short _no_sys_wait
 22768 00004D8D 81CB0004                	or	bx,0400H	    ; Set bit 10 in status word for driver
 22769                                  				    ; It is up to device driver to carry out
 22770                                  				    ; appropriate action.
 22771                                  _no_sys_wait:
 22772 00004D91 891E[2703]              	MOV	[IOCALL_REQSTAT],BX
 22773 00004D95 31DB                    	XOR	BX,BX
 22774 00004D97 881E[3103]              	MOV	[IOMED],BL
 22775                                  
 22776 00004D9B 88E3                    	MOV	BL,AH		 	; get function
 22777 00004D9D 8AA7[0413]              	MOV	AH,[BX+LenTab]
 22778 00004DA1 D1E3                    	SHL	BX,1
 22779 00004DA3 8B8F[0A13]              	MOV	CX,[BX+CmdTab]
 22780 00004DA7 BB[2403]                	MOV	BX,IOCALL
 22781 00004DAA 8826[2403]              	MOV	[IOCALL_REQLEN],AH
 22782 00004DAE 882E[2603]              	MOV	[IOCALL_REQFUNC],CH
 22783                                  
 22784 00004DB2 8EDA                    	MOV	DS,DX
 22785 00004DB4 E84401                  	CALL	DEVIOCALL
 22786 00004DB7 368B3E[2703]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 22787                                  	;test	di,8000h
 22788                                  	;jnz	short DevErr
 22789 00004DBC 21FF                    	and	di,di
 22790 00004DBE 7820                    	js	short DevErr
 22791                                  
 22792                                  OKDevIO:
 22793 00004DC0 8CD0                    	MOV	AX,SS
 22794 00004DC2 8ED8                    	MOV	DS,AX
 22795                                  
 22796                                  	;cmp	ch, 5
 22797 00004DC4 80FD05                  	CMP	CH,DEVRDND
 22798 00004DC7 7506                    	JNZ	short DNODRD
 22799 00004DC9 A0[3103]                	MOV	AL,[IORCHR]
 22800 00004DCC A2[5E03]                	MOV	[DEVIOBUF],AL
 22801                                  
 22802                                  DNODRD: 
 22803 00004DCF 8A26[2803]              	MOV	AH,[IOCALL_REQSTAT+1]
 22804 00004DD3 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 22805                                  	;and	ah,2
 22806 00004DD5 80E402                  	AND	AH,STBUI>>8
 22807                                  
 22808                                  QuickReturn:				;AN000; 2/13/KK
 22809 00004DD8 E80AC8                  	call	restore_world
 22810                                  
 22811                                  	; SR;
 22812                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 22813                                  	; IoStatFail = -1 (set after return from the I24)
 22814                                  	;
 22815                                  
 22816                                  	; MSDOS 6.0
 22817                                  	;pushf
 22818                                  	;mov	al,[ss:IoStatFail]	;assume fail error
 22819                                  	;cbw				;sign extend to word
 22820                                  	;cmp	ax,-1
 22821                                  	;jne	short not_fail_ret
 22822                                  	;inc	byte [ss:IoStatFail]
 22823                                  	;popf
 22824                                  	;retn
 22825                                  
 22826                                  ;not_fail_ret:
 22827 00004DDB 36A1[5E03]              	MOV	AX,[SS:DEVIOBUF]	;ss override
 22828                                  	;popf
 22829 00004DDF C3                      	retn
 22830                                  
 22831                                  ;IOTOFILEJ:
 22832                                  ;	JMP	SHORT IOTOFILE
 22833                                  
 22834                                  DevErr:
 22835 00004DE0 88CC                    	MOV	AH,CL
 22836 00004DE2 E8490A                  	call	CHARHARD
 22837 00004DE5 3C01                    	CMP	AL,1
 22838 00004DE7 7506                    	JNZ	short NO_RETRY
 22839 00004DE9 E8F9C7                  	call	restore_world		
 22840 00004DEC E962FF                  	JMP	IOFUNC	; 10/08/2018
 22841                                  
 22842                                  NO_RETRY:
 22843                                  
 22844                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 22845                                  	; ready so that DOS doesn't get caught in a status loop when user 
 22846                                  	; simply wants to ignore the error.
 22847                                  	;
 22848                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 22849                                  	; should be checked by the caller on return
 22850                                  	;
 22851                                  
 22852                                  					; SS override
 22853 00004DEF 368026[2803]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 22854                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI >> 8)
 22855                                  
 22856                                  	; SR;
 22857                                  	; Check if user failed
 22858                                  	;
 22859                                  
 22860                                  	; MSDOS 6.0
 22861                                  	;cmp	al,3
 22862                                  	;jnz	short not_fail
 22863                                  	;dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 22864                                  ;not_fail:
 22865 00004DF5 EBC9                    	JMP	short OKDevIO
 22866                                  
 22867                                  IOTOFILE:
 22868 00004DF7 08E4                    	OR	AH,AH
 22869 00004DF9 7423                    	JZ	short IOIN
 22870 00004DFB FECC                    	DEC	AH
 22871 00004DFD 7405                    	JZ	short IOIST
 22872 00004DFF FECC                    	DEC	AH
 22873 00004E01 7411                    	JZ	short IOUT
 22874 00004E03 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 22875                                  
 22876                                  IOIST:
 22877                                  	;push	word [si+15h]
 22878 00004E04 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 22879                                  	;push	word [si+17h]
 22880 00004E07 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 22881 00004E0A E81100                  	CALL	IOIN
 22882                                  	;pop	word [si+17h]
 22883 00004E0D 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 22884                                  	;pop	word [si+15h]
 22885 00004E10 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 22886 00004E13 C3                      	retn
 22887                                  
 22888                                  IOUT:
 22889 00004E14 E81B00                  	CALL	SETXADDR
 22890 00004E17 E86BF1                  	call	DOS_WRITE
 22891 00004E1A E84800                  	CALL	RESTXADDR	; If you change this into a jmp don't
 22892                                  IOUT_retn:
 22893 00004E1D C3                      	retn			; come crying to me when things don't
 22894                                  				; work ARR
 22895                                  IOIN:
 22896 00004E1E E81100                  	CALL	SETXADDR
 22897                                  					; SS override for DOS34_FLAG
 22898                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 22899 00004E21 E8E0EF                  	CALL	DOS_READ
 22900                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 22901 00004E24 09C9                    	OR	CX,CX			; Check EOF
 22902 00004E26 E83C00                  	CALL	RESTXADDR
 22903                                  					; SS override
 22904 00004E29 36A0[5E03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 22905 00004E2D 75EE                    	jnz	short IOUT_retn	
 22906 00004E2F B01A                    	MOV	AL,1AH			; ^Z if no bytes
 22907 00004E31 C3                      	retn
 22908                                  
 22909                                  SETXADDR:
 22910                                  					; SS override
 22911 00004E32 368F06[1803]            	POP	WORD [SS:CALLSCNT]	; Return address
 22912                                  
 22913 00004E37 E8BEC7                  	call	save_world
 22914                                  
 22915                                  					; SS override for DMAADD and THISSFT
 22916 00004E3A 36FF36[DA02]            	PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 22917 00004E3F 36FF36[DC02]            	PUSH	WORD [SS:DMAADD+2]
 22918 00004E44 368C1E[3805]            	MOV	[SS:THISSFT+2],DS
 22919                                  
 22920 00004E49 16                      	push	ss
 22921 00004E4A 1F                      	pop	ds
 22922                                  
 22923 00004E4B 8936[3605]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 22924 00004E4F 8B0E[3403]              	MOV	CX,[IOXAD+2]
 22925 00004E53 890E[DC02]              	MOV	[DMAADD+2],CX
 22926 00004E57 8B0E[3203]              	MOV	CX,[IOXAD]
 22927 00004E5B 890E[DA02]              	MOV	[DMAADD],CX		; Set byte trans addr
 22928 00004E5F 8B0E[3603]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 22929 00004E63 EB0F                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 22930                                  
 22931                                  RESTXADDR:
 22932 00004E65 8F06[1803]              	POP	WORD [CALLSCNT]		; Return address
 22933 00004E69 8F06[DC02]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 22934 00004E6D 8F06[DA02]              	POP	WORD [DMAADD]
 22935                                  
 22936 00004E71 E871C7                  	call	restore_world
 22937                                  					; SS override
 22938                                  RESTRET:
 22939 00004E74 36FF26[1803]            	JMP	WORD [SS:CALLSCNT]	; Return address
 22940                                  
 22941                                  
 22942                                  ; 29/07/2018 - Retro DOS v3.0
 22943                                  ; IBMDOS.COM (1987) - Offset 4D82h
 22944                                  
 22945                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 22946                                  
 22947                                  ;----------------------------------------------------------------------------
 22948                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 22949                                  ;
 22950                                  ;	Dev_Open_SFT issues an open call to the device associated with
 22951                                  ;	the SFT.
 22952                                  ;
 22953                                  ;	ENTRY	(ES:DI) = SFT
 22954                                  ;	EXIT	none
 22955                                  ;	USES	all
 22956                                  ;----------------------------------------------------------------------------
 22957                                  
 22958                                  DEV_OPEN_SFT:
 22959 00004E79 E87CC7                  	call	save_world
 22960                                  	;mov	al,0Dh	
 22961 00004E7C B00D                    	MOV	AL,DEVOPN
 22962 00004E7E EB05                    	JMP	SHORT DO_OPCLS
 22963                                  
 22964                                  ;----------------------------------------------------------------------------
 22965                                  ; Procedure Name : DEV_CLOSE_SFT
 22966                                  ;
 22967                                  ; Inputs:
 22968                                  ;	ES:DI Points to SFT
 22969                                  ; Function:
 22970                                  ;	Issue a CLOSE call to the correct device
 22971                                  ; Outputs:
 22972                                  ;	None
 22973                                  ; ALL preserved
 22974                                  ;----------------------------------------------------------------------------
 22975                                  
 22976                                  DEV_CLOSE_SFT:
 22977 00004E80 E875C7                  	call	save_world
 22978                                  	;mov	al,0Eh	
 22979 00004E83 B00E                    	MOV	AL,DEVCLS
 22980                                  
 22981                                  	; Main entry for device open and close. AL contains the function 
 22982                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 22983                                  	; open/close to block devices. This allows networks to function but 
 22984                                  	; does NOT hang up with bogus change-line code.
 22985                                  
 22986                                  	;entry	DO_OPCLS
 22987                                  DO_OPCLS:
 22988                                  	; Is the SFT for the net?  If so, no action necessary.
 22989                                  
 22990                                  	; MSDOS 3.3
 22991                                  	;call	IsSFTNet
 22992                                  	;jnz	short OPCLS_DONE
 22993                                  
 22994                                  	; MSDOS 6.0
 22995                                  	;test	word [es:di+5],8000h
 22996 00004E85 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 22997 00004E8B 756A                    	JNZ	short OPCLS_DONE	; NOP on net SFTs
 22998 00004E8D 30E4                    	XOR	AH,AH			; Unit
 22999                                  	;test	word [es:di+5],80h
 23000 00004E8F 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 23001                                  	;les	di,[es:di+7]
 23002 00004E95 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 23003 00004E99 7513                    	JNZ	short GOT_DEV_ADDR
 23004                                  
 23005                                  	; We are about to call device open/close on a block driver. If no 
 23006                                  	; sharing then just short circuit to done.
 23007                                  	
 23008                                  ;;;;;	invoke	CheckShare
 23009                                  
 23010                                  	; MSDOS 3.3
 23011                                  	;call	CheckShare	; cmp byte [cs:fShare],0
 23012                                  	;jz	short OPCLS_DONE
 23013                                  
 23014                                  	; MSDOS 6.0
 23015                                  					; SS override
 23016 00004E9B 36803E[B102]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 23017 00004EA1 7654                    	JBE	short OPCLS_DONE	;AN010; yes
 23018                                  
 23019                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23020                                  	;mov	ah,[es:di+1]
 23021 00004EA3 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 23022 00004EA7 268A0D                  	mov	cl,[es:di]
 23023                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 23024                                  	;les	di,[es:di+12h]
 23025 00004EAA 26C47D12                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 23026                                  GOT_DEV_ADDR:				; ES:DI -> device
 23027                                  	;test	word [es:di+4],800h
 23028 00004EAE 26F745040008            	TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 23029 00004EB4 7441                    	JZ	short OPCLS_DONE	; Device can't
 23030 00004EB6 06                      	PUSH	ES
 23031 00004EB7 1F                      	POP	DS
 23032 00004EB8 89FE                    	MOV	SI,DI			; DS:SI -> device
 23033                                  OPCLS_RETRY:
 23034                                  	;Context ES
 23035 00004EBA 16                      	push	ss
 23036 00004EBB 07                      	pop	es
 23037                                  					; DEVCALL is in DOSDATA
 23038 00004EBC BF[0603]                	MOV	DI,DEVCALL
 23039                                  
 23040 00004EBF 89FB                    	MOV	BX,DI
 23041 00004EC1 50                      	PUSH	AX
 23042                                  	;mov	al,13
 23043 00004EC2 B00D                    	MOV	AL,DOPCLHL
 23044 00004EC4 AA                      	STOSB				; Length
 23045 00004EC5 58                      	POP	AX
 23046 00004EC6 86E0                    	XCHG	AH,AL
 23047 00004EC8 AA                      	STOSB				; Unit
 23048 00004EC9 86E0                    	XCHG	AH,AL
 23049 00004ECB AA                      	STOSB				; Command
 23050 00004ECC 26C7050000              	MOV	WORD [ES:DI],0		; Status
 23051 00004ED1 50                      	PUSH	AX			; Save Unit,Command
 23052                                  	;invoke	DEVIOCALL2
 23053 00004ED2 E82900                  	call	DEVIOCALL2
 23054                                  
 23055                                  	;mov	di,[es:bx+3]
 23056 00004ED5 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 23057                                  	;test	di,8000h
 23058                                  	;jz	short OPCLS_DONEP	
 23059 00004ED9 21FF                    	and	di,di
 23060 00004EDB 7919                    	jns	short OPCLS_DONEP	; No error
 23061                                  	;test	word [si+4],8000h
 23062                                  	; 22/11/2022 (!BugFix!)
 23063 00004EDD F744040080              	TEST	word [SI+SYSDEV.ATT],DEVTYP
 23064 00004EE2 7404                    	JZ	short BLKDEV
 23065 00004EE4 B486                    	MOV	AH,86H			; Read error in data, Char dev
 23066 00004EE6 EB04                    	JMP	SHORT HRDERR
 23067                                  
 23068                                  BLKDEV:
 23069 00004EE8 88C8                    	MOV	AL,CL			; Drive # in AL
 23070 00004EEA B406                    	MOV	AH,6			; Read error in data, Blk dev
 23071                                  HRDERR:
 23072                                  	;invoke	CHARHARD
 23073 00004EEC E83F09                  	call	CHARHARD
 23074 00004EEF 3C01                    	CMP	AL,1
 23075 00004EF1 7503                    	JNZ	short OPCLS_DONEP	; IGNORE or FAIL
 23076                                  					;  Note that FAIL is essentually IGNORED
 23077 00004EF3 58                      	POP	AX			; Get back Unit, Command
 23078 00004EF4 EBC4                    	JMP	short OPCLS_RETRY
 23079                                  
 23080                                  OPCLS_DONEP:
 23081 00004EF6 58                      	POP	AX			; Clean stack
 23082                                  OPCLS_DONE:
 23083 00004EF7 E8EBC6                  	call	restore_world
 23084 00004EFA C3                      	retn
 23085                                  
 23086                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 23087                                  ;----------------------------------------------------------------------------
 23088                                  ;**	DevIoCall  - Call Device
 23089                                  ;
 23090                                  ;	ENTRY	DS:SI Points to device SFT
 23091                                  ;		ES:BX Points to request data
 23092                                  ;	EXIT	DS:SI -> Device driver
 23093                                  ;	USES	DS:SI,AX
 23094                                  ;----------------------------------------------------------------------------
 23095                                  ;**	DevIoCall2 - Call Device
 23096                                  ;
 23097                                  ;	ENTRY	DS:SI Points to DPB
 23098                                  ;		ES:BX Points to request data
 23099                                  ;	EXIT	DS:SI -> Device driver
 23100                                  ;	USES	DS:SI,AX
 23101                                  ;----------------------------------------------------------------------------
 23102                                  
 23103                                  DEVIOCALL:
 23104                                  					; SS override for CALLSSEC, 
 23105                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 23106 00004EFB C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 23107                                  
 23108                                  	;entry	DEVIOCALL2
 23109                                  DEVIOCALL2:
 23110                                  	;EnterCrit critDevice
 23111 00004EFE E87BD1                  	call	EcritDevice
 23112                                  
 23113                                  	; MSDOS 6.0
 23114                                  	;TEST	word [SI+SYSDEV.ATT],DevTyp ;AN000; >32mb   block device ?
 23115                                  	;JNZ	short chardev2		;AN000; >32mb   no
 23116                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb   read ?
 23117                                  	;JZ	short chkext		;AN000; >32mb   yes
 23118                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb   write ?
 23119                                  	;JZ	short chkex		;AN000; >32mb   yes
 23120                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 23121                                  	;				;AN000; >32mb   write/verify ?
 23122                                  	;JNZ	short chardev2		;AN000; >32mb   no
 23123                                  ;chkext:
 23124                                  	;CALL	RW_SC			;AN000;LB. use secondary cache if there
 23125                                  	;JC	short dev_exit		;AN000;LB. done
 23126                                  	;
 23127                                  	;TEST	word [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb   extended driver?
 23128                                  	;JZ	short chksector		;AN000;>32mb   no
 23129                                  	;ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 23130                                  	;MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 23131                                  	;MOV	[SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 23132                                  	;MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 23133                                  	;MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 23134                                  	;MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 23135                                  	;JMP	short chardev2		;AN000; >32mb
 23136                                  ;chksector:				;AN000; >32mb
 23137                                  	;CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 23138                                  	;JZ	short chardev2		;AN000; >32mb   then fake error
 23139                                  	;MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+ERROR_I24_NOT_DOS_DISK 
 23140                                  	;				;AN000; >32mb
 23141                                  	;JMP	SHORT dev_exit		;AN000; >32mb
 23142                                  
 23143                                  ;chardev2:				;AN000;
 23144                                  
 23145                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 23146                                  	; preserved
 23147                                  
 23148                                  	;mov	ax,[si+6]
 23149 00004F01 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 23150 00004F04 36A3[2003]              	MOV	[SS:CALLDEVAD],AX
 23151 00004F08 368C1E[2203]            	MOV	[SS:CALLDEVAD+2],DS
 23152 00004F0D 36FF1E[2003]            	CALL	far [SS:CALLDEVAD]
 23153                                  	;mov	ax,[si+8]
 23154 00004F12 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 23155 00004F15 36A3[2003]              	MOV	[SS:CALLDEVAD],AX
 23156 00004F19 36FF1E[2003]            	CALL	far [SS:CALLDEVAD]
 23157                                  	; MSDOS 6.0
 23158                                  	;CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 23159                                  	;JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 23160                                  dev_exit:
 23161                                  	;LeaveCrit critDevice
 23162 00004F1E E863D1                  	call	LcritDevice
 23163 00004F21 C3                      	retn
 23164                                  
 23165                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 23166                                  ;---------------------------------------------------------------------------
 23167                                  ;
 23168                                  ; Procedure Name : SETREAD, SETWRITE
 23169                                  ;
 23170                                  ; Inputs:
 23171                                  ;	DS:BX = Transfer Address
 23172                                  ;	CX = Record Count
 23173                                  ;	DX = Starting Record
 23174                                  ;	AH = Media Byte
 23175                                  ;	AL = Unit Code
 23176                                  ; Function:
 23177                                  ;	Set up the device call header at DEVCALL
 23178                                  ; Output:
 23179                                  ;	ES:BX Points to DEVCALL
 23180                                  ; No other registers effected
 23181                                  ;
 23182                                  ;---------------------------------------------------------------------------
 23183                                  
 23184                                  SETREAD:
 23185 00004F22 57                      	PUSH	DI
 23186 00004F23 51                      	PUSH	CX
 23187 00004F24 50                      	PUSH	AX
 23188 00004F25 B104                    	MOV	CL,DEVRD ; mov cl,4
 23189                                  SETCALLHEAD:
 23190 00004F27 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 23191 00004F29 16                      	PUSH	SS
 23192 00004F2A 07                      	POP	ES
 23193                                  					; DEVCALL is in DOSDATA
 23194 00004F2B BF[0603]                	MOV	DI,DEVCALL
 23195                                  
 23196 00004F2E AA                      	STOSB				; length
 23197 00004F2F 58                      	POP	AX
 23198 00004F30 AA                      	STOSB				; Unit
 23199 00004F31 50                      	PUSH	AX
 23200 00004F32 88C8                    	MOV	AL,CL
 23201 00004F34 AA                      	STOSB				; Command code
 23202 00004F35 31C0                    	XOR	AX,AX
 23203 00004F37 AB                      	STOSW				; Status
 23204 00004F38 83C708                  	ADD	DI,8			; Skip link fields
 23205 00004F3B 58                      	POP	AX
 23206 00004F3C 86E0                    	XCHG	AH,AL
 23207 00004F3E AA                      	STOSB				; Media byte
 23208 00004F3F 86C4                    	XCHG	AL,AH
 23209 00004F41 50                      	PUSH	AX
 23210 00004F42 89D8                    	MOV	AX,BX
 23211 00004F44 AB                      	STOSW
 23212 00004F45 8CD8                    	MOV	AX,DS
 23213 00004F47 AB                      	STOSW				; Transfer addr
 23214 00004F48 59                      	POP	CX			; Real AX
 23215 00004F49 58                      	POP	AX			; Real CX
 23216 00004F4A AB                      	STOSW				; Count
 23217 00004F4B 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 23218 00004F4C AB                      	STOSW				; Start
 23219 00004F4D 91                      	XCHG	AX,CX
 23220 00004F4E 87D1                    	XCHG	DX,CX
 23221 00004F50 5F                      	POP	DI
 23222                                  					; DEVCALL is in DOSDATA
 23223 00004F51 BB[0603]                	MOV	BX,DEVCALL
 23224 00004F54 C3                      	retn
 23225                                  
 23226                                  	;entry	SETWRITE
 23227                                  SETWRITE:
 23228                                  
 23229                                  ; Inputs:
 23230                                  ;	DS:BX = Transfer Address
 23231                                  ;	CX = Record Count
 23232                                  ;	DX = Starting Record
 23233                                  ;	AH = Media Byte
 23234                                  ;	AL = Unit Code
 23235                                  ; Function:
 23236                                  ;	Set up the device call header at DEVCALL
 23237                                  ; Output:
 23238                                  ;	ES:BX Points to DEVCALL
 23239                                  ; No other registers effected
 23240                                  
 23241 00004F55 57                      	PUSH	DI
 23242 00004F56 51                      	PUSH	CX
 23243 00004F57 50                      	PUSH	AX
 23244 00004F58 B108                    	MOV	CL,DEVWRT ; mov cl,8
 23245 00004F5A 36020E[AD02]            	ADD	CL,[SS:VERFLG]		; SS override
 23246 00004F5F EBC6                    	JMP	SHORT SETCALLHEAD
 23247                                  
 23248                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 23249                                  ;---------------------------------------------------------------------------
 23250                                  ;
 23251                                  ; Procedure Name : RW_SC
 23252                                  ;
 23253                                  ; Inputs:
 23254                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 23255                                  ;	 [SC_STATUS]= SC validity status
 23256                                  ;	 [SEQ_SECTOR]= last sector read
 23257                                  ; Function:
 23258                                  ;	Read from or write through secondary cache
 23259                                  ; Output:
 23260                                  ;	ES:BX Points to DEVCALL
 23261                                  ;	carry clear, I/O is not done
 23262                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 23263                                  ;	carry set, I/O is done
 23264                                  ;
 23265                                  ;----------------------------------------------------------------------------
 23266                                  
 23267                                  ;procedure   RW_SC,NEAR		;AN000;
 23268                                  ;
 23269                                  ;	; SS override for all variables used.
 23270                                  ;
 23271                                  ;	CMP	[SC_CACHE_COUNT],0	;AN000;LB. secondary cache exists?
 23272                                  ;	JZ	scexit4 		;AN000;LB. no, do nothing
 23273                                  ;	CMP	[CALLSCNT],1		;AN000;LB. sector count = 1 (buffer I/O)
 23274                                  ;	JNZ	scexit4 		;AN000;LB. no, do nothing
 23275                                  ;	PUSH	CX			    ;AN000;;LB.
 23276                                  ;	PUSH	DX			    ;AN000;;LB. yes
 23277                                  ;	PUSH	DS			    ;AN000;;LB. save registers
 23278                                  ;	PUSH	SI			    ;AN000;;LB.
 23279                                  ;	PUSH	ES			    ;AN000;;LB.
 23280                                  ;	PUSH	DI			    ;AN000;;LB.
 23281                                  ;	MOV	DX,WORD PTR [CALLSSEC]	    ;AN000;;LB.  starting sector
 23282                                  ;	CMP	BYTE PTR [DEVCALL.REQFUNC],DEVRD ;AN000;LB. read ?
 23283                                  ;	JZ	doread			    ;AN000;LB. yes
 23284                                  ;	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 23285                                  ;	JMP	scexit2 		    ;AN000;LB. back to normal
 23286                                  ;scexit4:				    ;AN000;
 23287                                  ;	CLC				    ;AN000;LB. I/O not done yet
 23288                                  ;	return				    ;AN000;LB.
 23289                                  ;doread: 				    ;AN000;
 23290                                  ;	CALL	SC2BUF			    ;AN000;LB. check if in SC
 23291                                  ;	JC	readSC			    ;AN000;LB.
 23292                                  ;	MOV	[DEVCALL.REQSTAT],STDON     ;AN000;LB. fake done and ok
 23293                                  ;	STC				    ;AN000;LB. set carry
 23294                                  ;	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 23295                                  ;readSC: 				    ;AN000;
 23296                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB. subtract sector num from
 23297                                  ;	MOV	CX,WORD PTR [CALLSSEC]	    ;AN000;;LB. saved sequential sector
 23298                                  ;	SUB	CX,WORD PTR [SEQ_SECTOR]    ;AN000;;LB. number
 23299                                  ;	SBB	AX,WORD PTR [SEQ_SECTOR+2]  ;AN000;;LB.
 23300                                  ;	CMP	AX,0			    ;AN000;;LB. greater than 64K
 23301                                  ;	JNZ	saveseq2		    ;AN000;;LB. yes,save seq. sector #
 23302                                  ;chklow: 						
 23303                                  ;	CMP	CX,1			    ;AN000;;LB. <= 1
 23304                                  ;	JA	saveseq2		    ;AN000;;LB. no, not sequential
 23305                                  ;	MOV	[SC_STATUS],-1		    ;AN000;;LB. prsume all SC valid
 23306                                  ;	MOV	AX,[SC_CACHE_COUNT]	    ;AN000;;LB. yes, sequential
 23307                                  ;	MOV	[CALLSCNT],AX		    ;AN000;;LB. read continuous sectors
 23308                                  ;readsr:
 23309                                  ;	MOV	AX,WORD PTR [CALLXAD+2]     ;AN000;;LB. save buffer addr
 23310                                  ;	MOV	[TEMP_VAR2],AX		    ;AN000;;LB. in temp vars
 23311                                  ;	MOV	AX,WORD PTR [CALLXAD]	    ;AN000;;LB.
 23312                                  ;	MOV	[TEMP_VAR],AX		    ;AN000;;LB.
 23313                                  ;						
 23314                                  ;	MOV	AX,WORD PTR [SC_CACHE_PTR]  ;AN000;LB. use SC cache addr as
 23315                                  ;	MOV	WORD PTR [CALLXAD],AX	    ;AN000;LB. transfer addr
 23316                                  ;	MOV	AX,WORD PTR [SC_CACHE_PTR+2] ;AN000;LB.
 23317                                  ;	MOV	WORD PTR [CALLXAD+2],AX     ;AN000;LB.
 23318                                  ;	MOV	[SC_FLAG],1		    ;AN000;LB. flag it for later;
 23319                                  ;	MOV	AL,[SC_DRIVE]		    ;AN000;;LB. current drive
 23320                                  ;	MOV	[CURSC_DRIVE],AL	    ;AN000;;LB. set current drive
 23321                                  ;	MOV	AX,WORD PTR [CALLSSEC]	    ;AN000;;LB. current sector
 23322                                  ;	MOV	[CURSC_SECTOR],AX	    ;AN000;;LB. set current sector
 23323                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB.
 23324                                  ;	MOV	[CURSC_SECTOR+2],AX	    ;AN000;;LB.
 23325                                  ;saveseq2:				    ;AN000;
 23326                                  ;	CLC				    ;AN000;LB. clear carry
 23327                                  ;saveseq:				    ;AN000;	
 23328                                  ;	MOV	AX,[HIGH_SECTOR]	    ;AN000;LB. save current sector #
 23329                                  ;	MOV	WORD PTR [SEQ_SECTOR+2],AX  ;AN000;LB. for access mode ref.
 23330                                  ;	MOV	AX,[CALLSSEC]		    ;AN000;LB.	
 23331                                  ;	MOV	WORD PTR [SEQ_SECTOR],AX    ;AN000;LB.	
 23332                                  ;	JMP	short scexit 		    ;AN000;LB.	
 23333                                  ;						
 23334                                  ;scexit2:				    ;AN000;LB.
 23335                                  ;	CLC				    ;AN000;LB.	clear carry
 23336                                  ;scexit: 				    ;AN000;		
 23337                                  ;	POP	DI			    ;AN000;;LB.
 23338                                  ;	POP	ES			    ;AN000;;LB. restore registers
 23339                                  ;	POP	SI			    ;AN000;;LB.
 23340                                  ;	POP	DS			    ;AN000;;LB.
 23341                                  ;	POP	DX			    ;AN000;;LB.
 23342                                  ;	POP	CX			    ;AN000;;LB.
 23343                                  ;	return				    ;AN000;;LB.
 23344                                  ;							
 23345                                  ;EndProc RW_SC				    ;AN000;
 23346                                  
 23347                                  ;Break	<IN_SC -- check if in secondary cache>
 23348                                  ;--------------------------------------------------------------------------
 23349                                  ;
 23350                                  ; Procedure Name : IN_SC
 23351                                  ;
 23352                                  ; Inputs:  [SC_DRIVE]= requesting drive
 23353                                  ;	   [CURSC_DRIVE]= current SC drive
 23354                                  ;	   [CURSC_SECTOR] = starting scetor # of SC
 23355                                  ;	   [SC_CACHE_COUNT] = SC count
 23356                                  ;	   [HIGH_SECTOR]:DX= sector number
 23357                                  ; Function:
 23358                                  ;	Check if the sector is in secondary cache
 23359                                  ; Output:
 23360                                  ;	carry clear, in SC
 23361                                  ;	   CX= the index in the secondary cache
 23362                                  ;	carry set, not in SC
 23363                                  ;
 23364                                  ;---------------------------------------------------------------------------
 23365                                  
 23366                                  ;procedure   IN_SC,NEAR		    ;AN000;
 23367                                  ;
 23368                                  ;	; SS override for all variables used
 23369                                  ;
 23370                                  ;	MOV	AL,[SC_DRIVE]		    ;AN000;;LB. current drive
 23371                                  ;	CMP	AL,[CURSC_DRIVE]	    ;AN000;;LB. same as SC drive
 23372                                  ;	JNZ	outrange2		    ;AN000;;LB. no
 23373                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB. subtract sector num from
 23374                                  ;	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 23375                                  ;	SUB	CX,WORD PTR [CURSC_SECTOR]    ;AN000;;LB. number
 23376                                  ;	SBB	AX,WORD PTR [CURSC_SECTOR+2]  ;AN000;;LB.
 23377                                  ;	CMP	AX,0			    ;AN000;;LB. greater than 64K
 23378                                  ;	JNZ	outrange2		    ;AN000;;LB. yes
 23379                                  ;	CMP	CX,[SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 23380                                  ;	JAE	outrange2		    ;AN000;;LB. yes
 23381                                  ;	CLC				    ;AN000;;LB. clear carry
 23382                                  ;	JMP	short inexit		    ;AN000;;LB. in SC
 23383                                  ;outrange2:				    ;AN000;;LB. set carry
 23384                                  ;	STC				    ;AN000;;LB.
 23385                                  ;inexit: 				    ;AN000;;LB.
 23386                                  ;	return				    ;AN000;;LB.
 23387                                  ;
 23388                                  ;EndProc IN_SC				    ;AN000;
 23389                                  
 23390                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 23391                                  ;---------------------------------------------------------------------------
 23392                                  ;
 23393                                  ; Procedure Name : Invalidate_Sc
 23394                                  ;
 23395                                  ; Inputs:  [SC_DRIVE]= requesting drive
 23396                                  ;	   [CURSC_DRIVE]= current SC drive
 23397                                  ;	   [CURSC_SECTOR] = starting scetor # of SC
 23398                                  ;	   [SC_CACHE_COUNT] = SC count
 23399                                  ;	   [SC_STAUS] = SC status word
 23400                                  ;	   [HIGH_SECTOR]:DX= sector number
 23401                                  ;
 23402                                  ; Function:
 23403                                  ;	invalidate secondary cache if in there
 23404                                  ; Output:
 23405                                  ;	[SC_STATUS] is updated
 23406                                  ;---------------------------------------------------------------------------
 23407                                  
 23408                                  ;procedure   INVALIDATE_SC,NEAR	    ;AN000;
 23409                                  ;
 23410                                  ;	; SS override for all variables used
 23411                                  ;
 23412                                  ;	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 23413                                  ;	JC	outrange		    ;AN000;;LB. no
 23414                                  ;	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 23415                                  ;	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 23416                                  ;	NOT	AX			    ;AN000;;LB.
 23417                                  ;	AND	[SC_STATUS],AX		    ;AN000;;LB. save the status
 23418                                  ;outrange:				    ;AN000;;LB.
 23419                                  ;	return				    ;AN000;;LB.
 23420                                  ;
 23421                                  ;EndProc INVALIDATE_SC			    ;AN000;
 23422                                  
 23423                                  
 23424                                  ;Break	<VIRREAD- virtually read data into buffer>
 23425                                  ;--------------------------------------------------------------------------
 23426                                  ;
 23427                                  ; Procedure Name : SC_FLAG
 23428                                  ;
 23429                                  ; Inputs:  SC_FLAG = 0 , no sectors were read into SC
 23430                                  ;		     1, continous sectors were read into SC
 23431                                  ; Function:
 23432                                  ;	   Move data from SC to buffer
 23433                                  ; Output:
 23434                                  ;	 carry clear, data is moved to buffer
 23435                                  ;	 carry set, bad sector or exceeds maximum sector
 23436                                  ;	   SC_FLAG =0
 23437                                  ;	   CALLSCNT=1
 23438                                  ;	   SC_STATUS= -1 if succeeded
 23439                                  ;     
 23440                                  ;		       0 if failed
 23441                                  ;--------------------------------------------------------------------------
 23442                                  
 23443                                  ;procedure   VIRREAD,NEAR	    ;AN000;
 23444                                  ;
 23445                                  ;	; SS override for all variables used
 23446                                  ;
 23447                                  ;	CMP	[SC_FLAG],0		    ;AN000;;LB.  from SC fill
 23448                                  ;	JZ	sc2end			    ;AN000;;LB.  no
 23449                                  ;	MOV	AX,[TEMP_VAR2]		    ;AN000;;LB. restore buffer addr
 23450                                  ;	MOV	WORD PTR [CALLXAD+2],AX     ;AN000;;LB.
 23451                                  ;	MOV	AX,[TEMP_VAR]		    ;AN000;;LB.
 23452                                  ;	MOV	WORD PTR [CALLXAD],AX	    ;AN000;;LB.
 23453                                  ;	MOV	[SC_FLAG],0		    ;AN000;;LB.  reset sc_flag
 23454                                  ;	MOV	[CALLSCNT],1		    ;AN000;;LB.  one sector transferred
 23455                                  ;
 23456                                  ;	TESTB	[DEVCALL.REQSTAT],STERR     ;AN000;;LB.  error?
 23457                                  ;	JNZ	scerror 		    ;AN000;;LB. yes
 23458                                  ;	PUSH	DS			    ;AN000;;LB.
 23459                                  ;	PUSH	SI			    ;AN000;;LB.
 23460                                  ;	PUSH	ES			    ;AN000;;LB.
 23461                                  ;	PUSH	DI			    ;AN000;;LB.
 23462                                  ;	PUSH	DX			    ;AN000;;LB.
 23463                                  ;	PUSH	CX			    ;AN000;;LB.
 23464                                  ;	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 23465                                  ;	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buffer
 23466                                  ;	POP	CX			    ;AN000;;LB.
 23467                                  ;	POP	DX			    ;AN000;;LB.
 23468                                  ;	POP	DI			    ;AN000;;LB.
 23469                                  ;	POP	ES			    ;AN000;;LB.
 23470                                  ;	POP	SI			    ;AN000;;LB.
 23471                                  ;	POP	DS			    ;AN000;;LB.
 23472                                  ;	JMP	SHORT sc2end		    ;AN000;;LB. return
 23473                                  ;
 23474                                  ;scerror:				    ;AN000;
 23475                                  ;	MOV	[CALLSCNT],1		    ;AN000;;LB. reset sector count to 1
 23476                                  ;	MOV	[SC_STATUS],0		    ;AN000;;LB. invalidate all SC sectors
 23477                                  ;	MOV	[CURSC_DRIVE],-1	    ;AN000;;LB. invalidate drive
 23478                                  ;	STC				    ;AN000;;LB. carry set
 23479                                  ;	return				    ;AN000;;LB.
 23480                                  ;
 23481                                  ;sc2end: 				    ;AN000;
 23482                                  ;	CLC				    ;AN000;;LB. carry clear
 23483                                  ;	return				    ;AN000;;LB.
 23484                                  ;
 23485                                  ;EndProc VIRREAD 			    ;AN000;
 23486                                  
 23487                                  ;Break	<SC2BUF- move data from SC to buffer>
 23488                                  ;----------------------------------------------------------------------------
 23489                                  ;
 23490                                  ; Procedure Name : SC2BUF
 23491                                  ;
 23492                                  ; Inputs:  [SC_STATUS] = SC validity status
 23493                                  ;	   [SC_SECTOR_SIZE] = request sector size
 23494                                  ;	   [SC_CACHE_PTR] = pointer to SC
 23495                                  ; Function:
 23496                                  ;	   Move data from SC to buffer
 23497                                  ; Output:
 23498                                  ;	   carry clear, in SC  and data is moved
 23499                                  ;	   carry set, not in SC and data is not moved
 23500                                  ;---------------------------------------------------------------------------
 23501                                  
 23502                                  ;procedure   SC2BUF,NEAR 	    ;AN000;
 23503                                  ;
 23504                                  ;	; SS override for all variables used
 23505                                  ;
 23506                                  ;	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 23507                                  ;	JC	noSC			    ;AN000;;LB. no
 23508                                  ;	MOV	AX,1			    ;AN000;;LB. check if valid sector
 23509                                  ;	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 23510                                  ;	TEST	[SC_STATUS],AX		    ;AN000;;LB.
 23511                                  ;	JZ	noSC			    ;AN000;;LB. invalid
 23512                                  ;entry SC2BUF2				    ;AN000;
 23513                                  ;	MOV	AX,CX			    ;AN000;;LB. times index with
 23514                                  ;	MUL	[SC_SECTOR_SIZE]	    ;AN000;;LB. sector size
 23515                                  ;	ADD	AX,WORD PTR [SC_CACHE_PTR]  ;AN000;;LB. add SC starting addr
 23516                                  ;	ADC	DX,WORD PTR [SC_CACHE_PTR+2];AN000;;LB.
 23517                                  ;	MOV	DS,DX			    ;AN000;    ;LB. DS:SI-> SC sector addr
 23518                                  ;	MOV	SI,AX			    ;AN000;    ;LB.
 23519                                  ;	MOV	ES,WORD PTR [CALLXAD+2]     ;AN000;    ;LB. ES:DI-> buffer addr
 23520                                  ;	MOV	DI,WORD PTR [CALLXAD]	    ;AN000;    ;LB.
 23521                                  ;	MOV	CX,[SC_SECTOR_SIZE]	    ;AN000;    ;LB. count= sector size
 23522                                  ;	SHR	CX,1			    ;AN000;    ;LB. may use DWORD move for 386
 23523                                  ;entry MOVWORDS				    ;AN000;
 23524                                  ;	CMP	[DDMOVE],0		    ;AN000;    ;LB. 386 ?
 23525                                  ;	JZ	nodd			    ;AN000;    ;LB. no
 23526                                  ;	SHR	CX,1			    ;AN000;    ;LB. words/2
 23527                                  ;	DB	66H			    ;AN000;    ;LB. use double word move
 23528                                  ;nodd:
 23529                                  ;	REP	MOVSW			    ;AN000;    ;LB. move to buffer
 23530                                  ;	CLC				    ;AN000;    ;LB. clear carry
 23531                                  ;	return				    ;AN000;    ;LB. exit
 23532                                  ;noSC:					    ;AN000;
 23533                                  ;	STC				    ;AN000;    ;LB. set carry
 23534                                  ;sexit:					    ;AN000;
 23535                                  ;	return				    ;AN000;    ;LB.
 23536                                  ;
 23537                                  ;EndProc SC2BUF
 23538                                  
 23539                                  
 23540                                  ;============================================================================
 23541                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 23542                                  ;============================================================================
 23543                                  ; 29/07/2018 - Retro DOS v3.0
 23544                                  
 23545                                  ;	TITLE	MKNODE - Node maker
 23546                                  ;	NAME	MKNODE
 23547                                  
 23548                                  ;**	MKNODE.ASM
 23549                                  ;
 23550                                  ;	Low level routines for making a new local file system node
 23551                                  ;	and filling in an SFT from a directory entry
 23552                                  ;
 23553                                  ;	BUILDDIR
 23554                                  ;	SETDOTENT
 23555                                  ;	MakeNode
 23556                                  ;	NEWENTRY
 23557                                  ;	FREEENT
 23558                                  ;	NEWDIR
 23559                                  ;	DOOPEN
 23560                                  ;	RENAME_MAKE
 23561                                  ;	CHECK_VIRT_OPEN
 23562                                  ;
 23563                                  ;	Revision history:
 23564                                  ;
 23565                                  ;	 AN000	version 4.0  Jan. 1988
 23566                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 23567                                  
 23568                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 23569                                  ;----------------------------------------------------------------------------
 23570                                  ;
 23571                                  ; Procedure Name : BUILDDIR,NEWDIR
 23572                                  ;
 23573                                  ; Inputs:
 23574                                  ;       ES:BP Points to DPB
 23575                                  ;       [THISSFT] Set if using NEWDIR entry point
 23576                                  ;               (used by ALLOCATE)
 23577                                  ;       [LASTENT] current last valid entry number in directory if no free
 23578                                  ;               entries
 23579                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 23580                                  ; Function:
 23581                                  ;       Grow directory if no free entries and not root
 23582                                  ; Outputs:
 23583                                  ;       CARRY SET IF FAILURE
 23584                                  ;       ELSE
 23585                                  ;          AX entry number of new entry
 23586                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 23587                                  ;               AX = first entry of new dir
 23588                                  ;       GETENT should be called to set [LASTENT]
 23589                                  ;
 23590                                  ;----------------------------------------------------------------------------
 23591                                  
 23592                                  BUILDDIR:
 23593                                  	; 29/07/2018 - Retro DOS v3.0
 23594                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 23595                                  
 23596 00004F61 A1[6A05]                        MOV     AX,[ENTFREE]
 23597 00004F64 83F8FF                          CMP     AX,-1
 23598 00004F67 7402                            JZ	short CHECK_IF_ROOT
 23599 00004F69 F8                              CLC
 23600 00004F6A C3                              retn
 23601                                  
 23602                                  CHECK_IF_ROOT:
 23603 00004F6B 833E[5805]00                    CMP     word [DIRSTART],0
 23604 00004F70 7502                            JNZ	short NEWDIR
 23605 00004F72 F9                              STC
 23606                                  builddir_retn:
 23607 00004F73 C3                              retn				; Can't grow root
 23608                                  
 23609                                  	;entry   NEWDIR
 23610                                  NEWDIR:        
 23611 00004F74 8B1E[5805]              	MOV     BX,[DIRSTART]
 23612 00004F78 09DB                            OR      BX,BX
 23613 00004F7A 7405                            JZ	short NULLDIR
 23614 00004F7C E89A05                  	call	GETEOF
 23615 00004F7F 72F2                            jc	short builddir_retn	; Screw up
 23616                                  NULLDIR:
 23617 00004F81 B90100                          MOV     CX,1
 23618 00004F84 E8BF04                  	call	ALLOCATE
 23619 00004F87 72EA                            jc	short  builddir_retn
 23620 00004F89 8B16[5805]                      MOV     DX,[DIRSTART]
 23621 00004F8D 09D2                            OR      DX,DX
 23622 00004F8F 750D                            JNZ	short ADDINGDIR
 23623 00004F91 E850F8                  	call	SETDIRSRCH
 23624 00004F94 72DD                            jc	short  builddir_retn
 23625 00004F96 C706[F402]FFFF                  MOV     word [LASTENT],-1
 23626 00004F9C EB2B                            JMP     SHORT GOTDIRREC
 23627                                  ADDINGDIR:
 23628 00004F9E 53                              PUSH    BX
 23629 00004F9F 8B1E[5405]                      MOV     BX,[CLUSNUM]
 23630 00004FA3 E8940A                          call	IsEOF
 23631 00004FA6 5B                              POP     BX
 23632 00004FA7 7219                            JB	short NOTFIRSTGROW
 23633                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 23634 00004FA9 891E[5405]                      MOV     [CLUSNUM],BX
 23635 00004FAD 51                              PUSH    CX
 23636 00004FAE 50                              PUSH    AX
 23637 00004FAF 55                              PUSH    BP
 23638 00004FB0 B401                            MOV     AH,1			; CLUSNUM update
 23639                                  	;mov	dl,[es:bp+0]
 23640 00004FB2 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 23641                                          ;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 23642 00004FB6 8B0E[5805]                      MOV     CX,[DIRSTART]		; first cluster #
 23643 00004FBA 89DD                            MOV     BP,BX 			; CLUSNUM
 23644 00004FBC E854E4                  	call	FastOpen_Update
 23645 00004FBF 5D                              POP     BP
 23646 00004FC0 58                              POP     AX
 23647 00004FC1 59                              POP     CX
 23648                                  
 23649                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 23650                                  NOTFIRSTGROW:
 23651 00004FC2 89DA                            MOV     DX,BX
 23652 00004FC4 30DB                            XOR     BL,BL
 23653 00004FC6 E86C04                  	call	FIGREC
 23654                                  GOTDIRREC:
 23655                                  	;mov	cl,[es:bp+4]
 23656 00004FC9 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 23657 00004FCD FEC1                            INC     CL
 23658 00004FCF 30ED                            XOR     CH,CH
 23659                                  ZERODIR:
 23660 00004FD1 51                              PUSH    CX
 23661                                  	;mov	byte [ALLOWED],18h
 23662 00004FD2 C606[F702]18                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 23663 00004FD7 B0FF                            MOV     AL,0FFH
 23664 00004FD9 E8AD0E                          call	GETBUFFR
 23665 00004FDC 7302                            JNC	short GET_SSIZE
 23666 00004FDE 59                              POP     CX
 23667 00004FDF C3                              retn
 23668                                  
 23669                                  GET_SSIZE:
 23670                                  	;mov	cx,[es:bp+2]
 23671 00004FE0 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 23672 00004FE4 06                              PUSH    ES
 23673 00004FE5 C43E[7405]                      LES     DI,[CURBUF]
 23674                                  	;or	byte [es:di+5],4
 23675 00004FE9 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 23676 00004FEE 57                              PUSH    DI
 23677                                  	;add	di,16
 23678 00004FEF 83C710                          ADD     DI,BUFINSIZ
 23679 00004FF2 31C0                            XOR     AX,AX
 23680 00004FF4 D1E9                            SHR     CX,1
 23681 00004FF6 F3AB                            REP     STOSW
 23682 00004FF8 7301                            JNC	short EVENZ
 23683 00004FFA AA                              STOSB
 23684                                  EVENZ:
 23685 00004FFB 5F                              POP     DI
 23686                                  
 23687                                  	; MSDOS 6.0
 23688                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 23689                                  	;				;LB. if already dirty		  ;AN000;
 23690                                          ;JNZ	short _yesdirty_	;LB.  don't increment dirty count ;AN000;
 23691                                          ;call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 23692                                          
 23693                                  	;or	byte [es:di+5],40h
 23694 00004FFC 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 23695                                  ;_yesdirty_:
 23696 00005001 07                              POP	ES
 23697 00005002 59                              POP	CX
 23698                                  
 23699                                  	; MSDOS 6.0
 23700                                  	;add	dx, 1
 23701                                  	;adc	word [HIGH_SECTOR],0
 23702                                  
 23703 00005003 42                      	INC	DX
 23704 00005004 E2CB                            LOOP    ZERODIR
 23705                                  
 23706 00005006 A1[F402]                        MOV     AX,[LASTENT]
 23707 00005009 40                              INC     AX
 23708 0000500A F8                              CLC
 23709 0000500B C3                              retn
 23710                                  
 23711                                  ;--------------------------------------------------------------------------
 23712                                  ;
 23713                                  ; Procedure Name : SETDOTENT
 23714                                  ;
 23715                                  ; set up a . or .. directory entry for a directory.
 23716                                  ;
 23717                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 23718                                  ;               AX contains ". " or ".."
 23719                                  ;               DX contains first cluster of entry
 23720                                  ;
 23721                                  ;----------------------------------------------------------------------------
 23722                                  
 23723                                  SETDOTENT:
 23724                                  ;	Fill in name field
 23725 0000500C AB                              STOSW
 23726 0000500D B90400                          MOV     CX,4
 23727 00005010 B82020                          MOV     AX,"  " ; 2020h
 23728 00005013 F3AB                            REP     STOSW
 23729 00005015 AA                              STOSB
 23730                                  
 23731                                  ;	Set up attribute
 23732                                  	;mov	al, 10h
 23733 00005016 B010                            MOV     AL,attr_directory
 23734 00005018 AA                              STOSB
 23735                                  
 23736                                  ;	Initialize time and date of creation
 23737 00005019 83C70A                          ADD     DI,10
 23738 0000501C 8B36[3605]                      MOV     SI,[THISSFT]
 23739                                  	;mov	ax,[si+0Dh]
 23740 00005020 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 23741 00005023 AB                              STOSW
 23742                                  	;mov	ax,[si+0Fh]
 23743 00005024 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 23744 00005027 AB                      	STOSW
 23745                                  
 23746                                  ;	Set up first cluster field
 23747 00005028 89D0                            MOV     AX,DX
 23748 0000502A AB                              STOSW
 23749                                  
 23750                                  ;	0 file size
 23751 0000502B 31C0                            XOR     AX,AX
 23752 0000502D AB                              STOSW
 23753 0000502E AB                              STOSW
 23754 0000502F C3                              retn
 23755                                  
 23756                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 23757                                  ;---------------------------------------------------------------------------
 23758                                  ;
 23759                                  ; Procedure Name : MakeNode
 23760                                  ;
 23761                                  ; Inputs:
 23762                                  ;       AL - attribute to create
 23763                                  ;       AH = 0 if it is ok to truncate a file already by this name
 23764                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 23765                                  ;               (AH ignored on dirs and devices)
 23766                                  ;
 23767                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 23768                                  ;               a name already existant is ALWAYS an error in these cases.
 23769                                  ;
 23770                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 23771                                  ;               terminated)
 23772                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 23773                                  ;               ( = -1 if current dir not involved, else
 23774                                  ;                Points to first char after last "/" of current dir part)
 23775                                  ;       [THISCDS] Points to CDS being used
 23776                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 23777                                  ; Function:
 23778                                  ;       Make a new node
 23779                                  ; Outputs:
 23780                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 23781                                  ;       CARRY SET IF ERROR
 23782                                  ;          AX = 1 A node by this name exists and is a directory
 23783                                  ;          AX = 2 A new node could not be created
 23784                                  ;          AX = 3 A node by this name exists and is a disk file
 23785                                  ;               (AH was NZ on input)
 23786                                  ;          AX = 4 Bad Path
 23787                                  ;               SI return from GetPath maintained
 23788                                  ;          AX = 5 Attribute mismatch
 23789                                  ;          AX = 6 Sharing Violation
 23790                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 23791                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 23792                                  ;       ELSE
 23793                                  ;          AX = 0       Disk Node
 23794                                  ;          AX = 3       Device Node (error in some cases)
 23795                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 23796                                  ;               containing new node.
 23797                                  ;          [CURBUF+2]:BX Points to entry
 23798                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 23799                                  ;          [THISSFT] is filled in
 23800                                  ;               sf_mode = unchanged.
 23801                                  ;          Attribute byte in entry is input AL
 23802                                  ; DS preserved, others destroyed
 23803                                  ;
 23804                                  ;-------------------------------------------------------------------------
 23805                                  
 23806                                  MakeNode:
 23807                                  	;mov	word [CREATING],0E5FFh
 23808 00005030 C706[1805]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 23809 00005036 50                              PUSH    AX              ; Save AH value
 23810 00005037 C606[F802]00            	MOV	byte [NoSetDir],0
 23811 0000503C A2[0805]                	MOV	[SATTRIB],AL
 23812 0000503F E8FDF7                  	call	GetPathNoSet
 23813 00005042 88CA                            MOV     DL,CL           ; Save CL info
 23814 00005044 89C1                            MOV     CX,AX           ; Device ID to CH
 23815 00005046 58                              POP     AX              ; Get back AH
 23816 00005047 7316                            JNC	short make_exists ; File existed
 23817 00005049 7505                            JNZ	short make_err_4 ; Path bad
 23818 0000504B 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 23819 0000504E 7406                            JZ	short make_type	; Name simply not found, and no metas
 23820                                  make_err_4:
 23821 00005050 B004                            MOV     AL,4            ; case 1 bad path
 23822                                  make_err_ret:
 23823 00005052 30E4                            XOR     AH,AH
 23824 00005054 F9                              STC
 23825                                  make_retn:
 23826 00005055 C3                              retn
 23827                                  
 23828                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 23829                                  RENAME_MAKE:
 23830                                  make_type:
 23831                                  ;Extended Open hooks
 23832                                  	; MSDOS 6.0
 23833                                  	;TESTB	EXTOPEN_ON,ext_open_on	;FT. from extended open		;AN000;
 23834                                  	;JZ	make_type2		;FT. no				;AN000;
 23835                                  	;OR	EXTOPEN_ON,ext_file_not_exists ;FT. set for extended open ;AN000;
 23836                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 23837                                  	;JNZ    make_type2		;FT. no				;AN000;
 23838                                  	;STC				;FT. set carry			;AN000;
 23839                                  	;MOV    AX,7			;FT. file not found		;AN000;
 23840                                  	;return				;FT.				;AN000;
 23841                                  ;	Extended Open hooks
 23842                                  
 23843                                  make_type2:
 23844 00005056 C43E[3605]                      LES     DI,[THISSFT]
 23845 0000505A 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 23846 0000505C F9                              STC                     ; Not found
 23847 0000505D EB5A                            JMP     short make_new
 23848                                  
 23849                                  ; The node exists.  It may be either a device, directory or file:
 23850                                  ;   Zero set => directory
 23851                                  ;   High bit of CH on => device
 23852                                  ;   else => file
 23853                                  make_exists:
 23854 0000505F 7448                            JZ	short make_exists_dir
 23855 00005061 B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 23856                                  	;test	byte [ATTRIB],18h
 23857 00005063 F606[0605]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 23858 00005068 753B                            JNZ	short make_err_ret_5
 23859                                  				; Cannot already exist as Disk or Device Node
 23860                                                                  ;       if making DIR or Volume ID
 23861 0000506A 08ED                            OR      CH,CH
 23862 0000506C 781A                            JS	short make_share ; No further checks on attributes if device
 23863 0000506E 08E4                            OR      AH,AH
 23864 00005070 75E0                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 23865 00005072 51                              PUSH    CX              ; Save device ID
 23866 00005073 8E06[7605]                      MOV     ES,[CURBUF+2]
 23867                                  	;mov	ch,[es:bx+0Bh]
 23868 00005077 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 23869                                  	;test	ch,1
 23870 0000507B F6C501                  	test	CH,attr_read_only
 23871 0000507E 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 23872 00005080 E854FA                  	call	MatchAttributes
 23873 00005083 59                              POP     CX              ; Devid back in CH
 23874 00005084 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 23875 00005086 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 23876                                  make_share:
 23877 00005088 30E4                            XOR     AH,AH
 23878 0000508A 50                              PUSH    AX              ; Save Disk or Device node
 23879 0000508B 51                              PUSH    CX              ; Save Device ID
 23880 0000508C 88EC                            MOV     AH,CH           ; Device ID to AH
 23881 0000508E E83301                          CALL    DOOPEN          ; Fill in SFT for share check
 23882 00005091 C43E[3605]                      LES     DI,[THISSFT]
 23883 00005095 56                      	push	si
 23884 00005096 53                      	push	bx		; Save CURBUF pointers
 23885 00005097 E8C422                  	call	ShareEnter
 23886 0000509A 7350                            jnc	short MakeEndShare
 23887                                  
 23888                                  ; User failed request.
 23889 0000509C 5B                      	pop	bx
 23890 0000509D 5E                      	pop	si
 23891 0000509E 59                      	pop	cx
 23892 0000509F 58                      	pop	ax
 23893                                  
 23894                                  Make_Share_ret:
 23895 000050A0 B006                            MOV     AL,6
 23896 000050A2 EBAE                            JMP	short make_err_ret
 23897                                  
 23898                                  make_err_ret_5P:
 23899 000050A4 59                              POP     CX              ; Get back device ID
 23900                                  make_err_ret_5:
 23901 000050A5 B005                            MOV     AL,5            ; Attribute mismatch
 23902 000050A7 EBA9                            JMP     make_err_ret
 23903                                  
 23904                                  make_exists_dir:
 23905 000050A9 B001                            MOV     AL,1            ; exists as directory, always an error
 23906 000050AB EBA5                            JMP     make_err_ret
 23907                                  
 23908                                  make_save:
 23909 000050AD 50                              PUSH    AX              ; Save whether Disk or File
 23910 000050AE 89C8                            MOV     AX,CX           ; Device ID to AH
 23911 000050B0 E86A00                          CALL    NEWENTRY
 23912 000050B3 58                              POP     AX              ; 0 if Disk, 3 if File
 23913 000050B4 739F                            jnc	short make_retn
 23914 000050B6 B002                            MOV     AL,2            ; create failed case 2
 23915                                  make_save_retn:
 23916 000050B8 C3                              retn
 23917                                  
 23918                                  make_new:
 23919 000050B9 E8F1FF                          call    make_save
 23920 000050BC 72FA                            jc	short make_save_retn	; case 2 fail
 23921 000050BE F606[0605]10            	test	BYTE [ATTRIB],attr_directory
 23922 000050C3 75F3                            jnz	short make_save_retn	; Don't "open" directories, so don't
 23923                                                                  ;   tell the sharer about them
 23924 000050C5 50                      	push	ax
 23925 000050C6 53                      	push	bx
 23926 000050C7 56                      	push	si		
 23927 000050C8 E89322                          call	ShareEnter
 23928 000050CB 5E                      	pop	si
 23929 000050CC 5B                      	pop	bx
 23930 000050CD 58                      	pop	ax
 23931 000050CE 73E8                    	jnc	short make_save_retn
 23932                                  ;
 23933                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 23934                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 23935                                  ; possible: delete the newly created directory entry and return share_error.
 23936                                  ;
 23937 000050D0 50                              PUSH    AX
 23938 000050D1 C43E[7405]                      LES     DI,[CURBUF]
 23939                                  	;mov	byte [es:bx],0E5h
 23940 000050D5 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 23941                                  	
 23942                                  	; MSDOS 6.0
 23943                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 23944                                  	;				;LB. if already dirty		  ;AN000;
 23945                                          ;JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 23946                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 23947                                  	;or	byte [es:di+5],40h
 23948 000050D9 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 23949                                  ;yesdirty3:
 23950 000050DE C42E[2405]                      LES     BP,[THISDPB]
 23951 000050E2 268A4600                        mov	al,[ES:BP]
 23952                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 23953 000050E6 E8480E                          call	FLUSHBUF		; write out buffer.
 23954 000050E9 58                              POP     AX
 23955 000050EA EBB4                            jmp	short Make_Share_ret
 23956                                  ;
 23957                                  ; We have found an existing file. We have also entered it into the share set.
 23958                                  ; At this point we need to call newentry to correctly address the problem of
 23959                                  ; getting rid of old data (create an existing file) or creating a new
 23960                                  ; directory entry (create a new file). Unfortunately, this operation may
 23961                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 23962                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 23963                                  ; the share set now, do the operation and then reassert the share access.
 23964                                  ;
 23965                                  ; We are allowed to do this! There is no window! After all, we are in
 23966                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 23967                                  ;
 23968                                  MakeEndShare:
 23969 000050EC C43E[3605]                      LES     DI,[THISSFT]		; grab SFT
 23970 000050F0 31C0                            XOR     AX,AX
 23971 000050F2 E877CF                  	call	EcritSFT
 23972 000050F5 268705                  	xchg	AX,[ES:DI]
 23973                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 23974 000050F8 50                      	push	ax
 23975 000050F9 57                      	push	di
 23976 000050FA 06                      	push	es
 23977 000050FB 9C                              PUSHF
 23978 000050FC E85922                          call	ShareEnd                ; remove sharing
 23979 000050FF 9D                              POPF
 23980 00005100 07                      	pop	es
 23981 00005101 5F                      	pop	di
 23982 00005102 268F05                          pop	word [ES:DI]	
 23983                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 23984 00005105 E86CCF                  	call	LcritSFT
 23985 00005108 5B                      	pop	bx
 23986 00005109 5E                      	pop	si
 23987 0000510A 59                      	pop	cx
 23988 0000510B 58                      	pop	ax
 23989 0000510C E89EFF                          CALL    make_save
 23990                                  
 23991                                  ; If the user failed, we do not reenter into the sharing set.
 23992                                  
 23993 0000510F 72A7                            jc	short make_save_retn	; bye if error
 23994 00005111 50                      	push	ax
 23995 00005112 53                      	push	bx
 23996 00005113 56                      	push	si
 23997 00005114 9C                              PUSHF
 23998 00005115 E84622                          call	ShareEnter
 23999 00005118 9D                              POPF
 24000 00005119 5E                      	pop	si
 24001 0000511A 5B                      	pop	bx
 24002 0000511B 58                      	pop	ax
 24003                                  
 24004                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 24005                                  
 24006                                  makeendshare_retn:
 24007 0000511C C3                              retn
 24008                                  
 24009                                  ;---------------------------------------------------------------------------
 24010                                  ;
 24011                                  ; Procedure Name : NEWENTRY
 24012                                  ;
 24013                                  ; Inputs:
 24014                                  ;       [THISSFT] set
 24015                                  ;       [THISDPB] set
 24016                                  ;       [LASTENT] current last valid entry number in directory if no free
 24017                                  ;               entries
 24018                                  ;       [VOLID] set if a volume ID was found during search
 24019                                  ;	Attrib Contains attributes for new file
 24020                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 24021                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 24022                                  ;               NC means file existed (device)
 24023                                  ;               C  means file did not exist
 24024                                  ;       AH = Device ID byte
 24025                                  ;       If FILE
 24026                                  ;           [CURBUF+2]:BX points to start of directory entry
 24027                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 24028                                  ;       If device
 24029                                  ;           DS:BX points to start of "fake" directory entry
 24030                                  ;           DS:SI points to dir_first of "fake" directory entry
 24031                                  ;               (has DWORD pointer to device header)
 24032                                  ; Function:
 24033                                  ;       Make a new directory entry
 24034                                  ;       If an old one existed it is truncated first
 24035                                  ; Outputs:
 24036                                  ;       Carry set if error
 24037                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 24038                                  ;               vol ID, user FAILed to I 24
 24039                                  ;       else
 24040                                  ;               outputs of DOOPEN
 24041                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 24042                                  ;
 24043                                  ;----------------------------------------------------------------------------
 24044                                  
 24045                                  NEWENTRY:
 24046 0000511D C42E[2405]                      LES     BP,[THISDPB]
 24047 00005121 7316                            JNC	short EXISTENT	
 24048 00005123 803E[F602]00                    CMP     byte [FAILERR],0
 24049 00005128 F9                              STC
 24050 00005129 75F1                            jnz	short makeendshare_retn	; User FAILed, node might exist
 24051 0000512B E833FE                          CALL    BUILDDIR        ; Try to build dir
 24052 0000512E 72EC                            jc	short makeendshare_retn	; Failed
 24053 00005130 E883F6                          call	GETENT          ; Point at that free entry
 24054 00005133 72E7                            jc	short makeendshare_retn	; Failed
 24055 00005135 EB0E                            JMP     SHORT FREESPOT
 24056                                  
 24057                                  ERRRET3:
 24058 00005137 F9                              STC
 24059                                  newentry_retn:
 24060 00005138 C3                              retn
 24061                                  
 24062                                  EXISTENT:
 24063 00005139 08E4                            OR      AH,AH           ; Check if file is I/O device
 24064 0000513B 7903                            JNS	short NOT_DEV1
 24065 0000513D E98400                          JMP     DOOPEN          ; If so, proceed with open
 24066                                  
 24067                                  NOT_DEV1:
 24068 00005140 E81401                          call	FREEENT		; Free cluster chain
 24069 00005143 72F3                            jc	short newentry_retn ; Failed
 24070                                  FREESPOT:
 24071                                  	;test	byte [ATTRIB],8
 24072 00005145 F606[0605]08            	test	BYTE [ATTRIB],attr_volume_id
 24073 0000514A 7407                            JZ	short NOTVOLID
 24074 0000514C 803E[1605]00                    CMP     BYTE [VOLID],0
 24075 00005151 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 24076                                  NOTVOLID:
 24077 00005153 8E06[7605]                      MOV     ES,[CURBUF+2]
 24078 00005157 89DF                            MOV     DI,BX
 24079                                  
 24080 00005159 BE[E604]                        MOV     SI,NAME1
 24081                                  
 24082 0000515C B90500                          MOV     CX,5
 24083 0000515F F3A5                            REP     MOVSW
 24084 00005161 A4                              MOVSB                   ; Move name into dir entry
 24085 00005162 A0[0605]                	MOV	AL,[ATTRIB]
 24086 00005165 AA                      	STOSB                   ; Attributes
 24087                                  
 24088                                  ;; File Tagging for Create DOS 4.00
 24089 00005166 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 24090                                  ;; File Tagging for Create DOS 4.00
 24091                                  
 24092 00005168 31C0                            XOR     AX,AX
 24093 0000516A F3AB                            REP     STOSW           ; Zero pad
 24094 0000516C E84AC7                          call	DATE16
 24095 0000516F 92                              XCHG    AX,DX
 24096 00005170 AB                              STOSW                   ; dir_time
 24097 00005171 92                              XCHG    AX,DX
 24098 00005172 AB                              STOSW                   ; dir_date
 24099 00005173 31C0                            XOR     AX,AX
 24100 00005175 57                              PUSH    DI              ; Correct SI input value
 24101                                  				; 	(recomputed for new buffer)
 24102 00005176 AB                              STOSW                   ; Zero dir_first and size
 24103 00005177 AB                              STOSW
 24104 00005178 AB                              STOSW
 24105                                  updnxt:
 24106 00005179 8B36[7405]              	MOV	SI,[CURBUF]
 24107                                  
 24108                                  	; MSDOS 6.0
 24109                                  	;TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 24110                                  	;			;LB. if already dirty		  ;AN000;
 24111                                          ;JNZ	short yesdirty4	;LB.  don't increment dirty count ;AN000;
 24112                                          ;call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 24113                                          
 24114                                  	;or	byte [es:si+5],40h
 24115 0000517D 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 24116                                  ;yesdirty4:
 24117 00005182 C42E[2405]                      LES     BP,[THISDPB]
 24118 00005186 268A4600                	MOV	AL,[ES:BP]	; mov al,[es:bp+0] 
 24119                                          ;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 24120 0000518A 50                              PUSH    AX
 24121 0000518B 53                              PUSH    BX
 24122                                  ; If we have a file, we need to increment the open ref. count so that
 24123                                  ; we have some protection against invalid media changes if an Int 24
 24124                                  ; error occurs.
 24125                                  ; Do nothing for a device.
 24126 0000518C 06                      	push	es
 24127 0000518D 57                      	push	di
 24128 0000518E C43E[3605]                      LES     DI,[THISSFT]
 24129                                  	;test	word [es:di+5],80h
 24130 00005192 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 24131 00005198 751A                            jnz	short GotADevice
 24132 0000519A 1E                      	push	ds
 24133 0000519B 53                      	push	bx
 24134 0000519C C51E[2405]                      LDS     BX,[THISDPB]
 24135                                  	;mov	[es:di+7],bx
 24136 000051A0 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 24137 000051A4 8CDB                            MOV     BX,DS
 24138                                  	;mov	[es:di+9],bx
 24139 000051A6 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 24140 000051AA 5B                      	pop	bx
 24141 000051AB 1F                      	pop	ds ; need to use DS for segment later on
 24142 000051AC E8CAFC                  	call	DEV_OPEN_SFT    ; increment ref. count
 24143 000051AF C606[080A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 24144                                  GotADevice:
 24145 000051B4 5F                      	pop	di
 24146 000051B5 07                      	pop	es
 24147                                  
 24148 000051B6 E8780D                          call	FLUSHBUF
 24149 000051B9 E8DA00                          Call    CHECK_VIRT_OPEN ; decrement ref. count                          ;AN000;
 24150 000051BC 5B                              POP     BX
 24151 000051BD 58                              POP     AX
 24152 000051BE 5E                              POP     SI              ; Get SI input back
 24153 000051BF 88C4                            MOV     AH,AL           ; Get I/O driver number back
 24154 000051C1 7301                            jnc	short DOOPEN    ; Failed
 24155 000051C3 C3                      	retn
 24156                                  
 24157                                  ;NOTE FALL THROUGH
 24158                                  
 24159                                  ; Inputs:
 24160                                  ;       [THISDPB] points to DPB if file
 24161                                  ;       [THISSFT] points to SFT being used
 24162                                  ;       AH = Device ID byte
 24163                                  ;       If FILE
 24164                                  ;           [CURBUF+2]:BX points to start of directory entry
 24165                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 24166                                  ;       If device
 24167                                  ;           DS:BX points to start of "fake" directory entry
 24168                                  ;           DS:SI points to dir_first of "fake" directory entry
 24169                                  ;               (has DWORD pointer to device header)
 24170                                  ; Function:
 24171                                  ;       Fill in SFT from dir entry
 24172                                  ; Outputs:
 24173                                  ;       CARRY CLEAR
 24174                                  ;       sf_ref_count and sf_mode fields not altered
 24175                                  ;       sf_flags high byte = 0
 24176                                  ;       sf_flags low byte = AH except
 24177                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 24178                                  ;       sf_attr sf_date sf_time sf_name set from entry
 24179                                  ;       sf_position = 0
 24180                                  ;       If device
 24181                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 24182                                  ;           sf_size = 0
 24183                                  ;       If file
 24184                                  ;           sf_firclus sf_size set from entry
 24185                                  ;           sf_devptr = [THISDPB]
 24186                                  ;           sf_cluspos = 0
 24187                                  ;           sf_lstclus = sf_firclus
 24188                                  ;           sf_dirsec sf_dirpos set
 24189                                  ; DS,SI,BX preserved, others destroyed
 24190                                  
 24191                                  	;entry	DOOPEN
 24192                                  DOOPEN:
 24193                                  ;	Generate and store attribute
 24194                                  
 24195 000051C4 88E6                            MOV     DH,AH           ; AH to different place
 24196 000051C6 C43E[3605]                      LES     DI,[THISSFT]
 24197                                  	;add	di,4
 24198 000051CA 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 24199 000051CD 30C0                            XOR     AL,AL           ; Assume it's a device, devices have an
 24200                                                                  ;   attribute of 0 (for R/O testing etc).
 24201 000051CF 08F6                            OR      DH,DH           ; See if our assumption good.
 24202 000051D1 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 24203 000051D3 8E1E[7605]                      MOV     DS,[CURBUF+2]
 24204                                  	;mov	al,[BX+0Bh]
 24205 000051D7 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 24206                                  				; If file, get attrib from dir entry
 24207                                  DEV_SFT1:
 24208 000051DA AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 24209                                  
 24210                                  ;	Generate and store flags word
 24211                                  
 24212 000051DB 31C0                            XOR     AX,AX
 24213 000051DD 88F0                            MOV     AL,DH
 24214                                  	;or	al,40h
 24215 000051DF 0C40                            OR      AL,devid_file_clean
 24216 000051E1 AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 24217                                  
 24218                                  ;	Generate and store device pointer
 24219                                  
 24220 000051E2 1E                              PUSH    DS
 24221                                  	;lds	ax,[bx+1Ah]
 24222 000051E3 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 24223 000051E6 08F6                            OR      DH,DH
 24224 000051E8 7805                            JS	short DEV_SFT2
 24225                                  
 24226                                  ;hkn; SS override
 24227 000051EA 36C506[2405]                    LDS     AX,[SS:THISDPB]	; Was file
 24228                                  DEV_SFT2:
 24229 000051EF AB                              STOSW 			; store offset
 24230 000051F0 8CD8                            MOV     AX,DS
 24231 000051F2 1F                              POP     DS
 24232 000051F3 AB                      	STOSW			; store segment
 24233                                  				; ES:DI -> sf_firclus
 24234                                  
 24235                                  ;	Generate pointer to, generate and store first cluster 
 24236                                  ;	(irrelevant for devices)
 24237                                  
 24238 000051F4 56                              PUSH    SI              ; Save pointer to dir_first
 24239 000051F5 A5                              MOVSW                   ; dir_first -> sf_firclus
 24240                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 24241                                  
 24242                                  ;	Copy time/date of last modification
 24243                                  
 24244                                  	;sub	si,6
 24245 000051F6 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 24246                                  				; DS:SI->dir_time
 24247 000051F9 A5                              MOVSW                   ; dir_time -> sf_time
 24248                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 24249 000051FA A5                              MOVSW                   ; dir_date -> sf_date
 24250                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 24251                                  
 24252                                  ;	Generate and store file size (0 for devices)
 24253                                  
 24254 000051FB AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 24255 000051FC AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 24256 000051FD 89C1                            MOV     CX,AX           ; dir_size_l in CX
 24257 000051FF AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 24258 00005200 08F6                            OR      DH,DH
 24259 00005202 7904                            JNS	short FILE_SFT1
 24260 00005204 31C0                            XOR     AX,AX
 24261 00005206 89C1                            MOV     CX,AX           ; Devices are open ended
 24262                                  FILE_SFT1:
 24263 00005208 91                              XCHG    AX,CX
 24264 00005209 AB                              STOSW                   ; Low word of sf_size
 24265 0000520A 91                              XCHG    AX,CX
 24266 0000520B AB                              STOSW                   ; High word of sf_size
 24267                                                                  ; ES:DI -> sf_position
 24268                                  ; Initialize position to 0
 24269                                  
 24270 0000520C 31C0                            XOR     AX,AX
 24271 0000520E AB                              STOSW
 24272 0000520F AB                              STOSW                   ; sf_position
 24273                                                                  ; ES:DI -> sf_cluspos
 24274                                  
 24275                                  ; Generate cluster optimizations for files
 24276                                  
 24277 00005210 08F6                            OR      DH,DH
 24278 00005212 7834                            JS	short DEV_SFT3
 24279 00005214 AB                              STOSW                   ; sf_cluspos
 24280                                  	;mov	ax,[bx+1Ah]
 24281 00005215 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 24282                                  	; MSDOS 3.3
 24283 00005218 AB                      	STOSW                   ; sf_lstclus
 24284                                  	; MSDOS 6.0
 24285                                          ;PUSH	DI              ;AN004; save dirsec offset
 24286                                          ;SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 24287                                          ;MOV	[ES:DI.sf_lstclus],AX	;AN004; save it
 24288                                          ;POP	DI              ;AN004; restore dirsec offset
 24289                                  
 24290                                  ; DOS 3.3  FastOpen  6/13/86
 24291                                  
 24292 00005219 1E                      	PUSH	DS
 24293                                  
 24294                                  ;hkn; SS is DOSDATA
 24295 0000521A 16                      	push	ss
 24296 0000521B 1F                      	pop	ds
 24297                                  	;test	byte [FastOpenFlg],4
 24298 0000521C F606[6E0F]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 24299 00005221 740D                    	JZ	short Not_FastOpen
 24300                                  
 24301                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 24302 00005223 BE[490F]                        MOV     SI,FastOpen_Ext_Info
 24303                                  
 24304 00005226 8B4401                          MOV     AX,[SI+FEI.dirsec]
 24305 00005229 AB                              STOSW                   ; sf_dirsec
 24306                                  	; MSDOS 6.0
 24307                                          ;MOV	AX,[SI+FEI.dirsec+2]
 24308                                  				;;; changed for >32mb
 24309                                          ;STOSW                   ; sf_dirsec
 24310                                  	; 19/08//2018
 24311 0000522A 8A04                    	mov	al,[SI]
 24312                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 24313 0000522C AA                              STOSB                   ; sf_dirpos
 24314 0000522D 1F                              POP	DS
 24315 0000522E EB16                            JMP     short Next_Name
 24316                                  
 24317                                  ; DOS 3.3  FastOpen  6/13/86
 24318                                  
 24319                                  Not_FastOpen:
 24320 00005230 1F                              POP     DS		; normal path
 24321                                  
 24322                                  ;hkn; SS override
 24323 00005231 368B36[7405]                    MOV     SI,[SS:CURBUF]	; DS:SI->buffer header
 24324                                  
 24325 00005236 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 24326 00005239 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 24327                                          ; MSDOS 6.0
 24328                                  	;MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 24329                                          ;STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 24330                                          
 24331 0000523A 89D8                    	MOV     AX,BX
 24332                                  	;add	si,16
 24333 0000523C 83C610                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 24334 0000523F 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 24335                                          ;mov	cl,32
 24336 00005241 B120                    	MOV     CL,dir_entry.size
 24337 00005243 F6F1                            DIV     CL
 24338 00005245 AA                              STOSB                   ; sf_dirpos
 24339                                  
 24340                                  Next_Name:
 24341 00005246 EB03                            JMP     SHORT FILE_SFT2
 24342                                  
 24343                                  DEV_SFT3:
 24344                                  	;add	di,7
 24345 00005248 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 24346                                  FILE_SFT2:
 24347                                  ;
 24348                                  ; Copy in the object's name
 24349                                  ;
 24350 0000524B 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 24351 0000524D B90B00                          MOV     CX,11
 24352 00005250 F3A4                            REP     MOVSB           ; sf_name
 24353 00005252 5E                              POP     SI              ; recover DS:SI -> dir_first
 24354                                  
 24355                                  ;hkn; SS is DOSDATA
 24356 00005253 16                              push	ss
 24357 00005254 1F                      	pop	ds
 24358 00005255 F8                              CLC
 24359 00005256 C3                              retn
 24360                                  
 24361                                  ;---------------------------------------------------------------------------
 24362                                  ;
 24363                                  ; Procedure Name : FREEENT
 24364                                  ;
 24365                                  ; Inputs:
 24366                                  ;       ES:BP -> DPB
 24367                                  ;       [CURBUF] Set
 24368                                  ;       [CURBUF+2]:BX points to directory entry
 24369                                  ;       [CURBUF+2]:SI points to above dir_first
 24370                                  ; Function:
 24371                                  ;       Free the cluster chain for the entry if present
 24372                                  ; Outputs:
 24373                                  ;       Carry set if error (currently user FAILed to I 24)
 24374                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 24375                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 24376                                  ;---------------------------------------------------------------------------
 24377                                  
 24378                                  FREEENT:
 24379 00005257 1E                              PUSH    DS
 24380 00005258 C53E[7405]                      LDS     DI,[CURBUF]
 24381 0000525C 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 24382                                  	; 19/05/2019
 24383                                  	; MSDOS 6.0
 24384                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 24385                                  ;hkn; SS override
 24386                                          ;MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 24387 0000525E 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 24388 00005261 1F                              POP     DS
 24389 00005262 83F902                  	CMP	CX,2
 24390 00005265 722D                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 24391                                  	;cmp	cx,[es:bp+0Dh]
 24392 00005267 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 24393 0000526B 7727                            JA	short RET1	; Treat like zero length file (firclus mucked)
 24394 0000526D 29FB                            SUB     BX,DI
 24395 0000526F 53                              PUSH    BX              ; Save offset
 24396                                  	;PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 24397 00005270 52                              PUSH    DX              ; Save sector number
 24398 00005271 89CB                            MOV     BX,CX
 24399 00005273 E87702                          call	RELEASE         ; Free any data allocated
 24400 00005276 5A                              POP     DX
 24401                                          ;POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 24402 00005277 7302                            JNC	short GET_BUF_BACK
 24403 00005279 5B                              POP     BX
 24404                                  freeent_retn:
 24405 0000527A C3                              retn			; Screw up
 24406                                  
 24407                                  GET_BUF_BACK:
 24408                                  	;mov	byte [ALLOWED],18h
 24409 0000527B C606[F702]18                    MOV     byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 24410 00005280 30C0                            XOR     AL,AL
 24411 00005282 E8040C                  	call	GETBUFFR        ; Get sector back
 24412 00005285 5B                              POP     BX              ; Get offset back
 24413 00005286 72F2                            jc	short freeent_retn
 24414 00005288 E8B1EE                  	call	SET_BUF_AS_DIR
 24415 0000528B 031E[7405]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 24416 0000528F 89DE                            MOV     SI,BX
 24417                                  	;add	si,1Ah
 24418 00005291 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 24419                                  RET1:
 24420 00005294 F8                              CLC
 24421 00005295 C3                              retn
 24422                                  
 24423                                  ;---------------------------------------------------------------------------
 24424                                  ;
 24425                                  ; Procedure Name : CHECK_VIRT_OPEN
 24426                                  ;
 24427                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 24428                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 24429                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 24430                                  ; flag [VIRTUAL_OPEN].
 24431                                  ; No registers affected (including flags).
 24432                                  ; On input, [THISSFT] points to current SFT.
 24433                                  ;
 24434                                  ;---------------------------------------------------------------------------
 24435                                  
 24436                                  CHECK_VIRT_OPEN:
 24437 00005296 50                      	        PUSH    AX
 24438 00005297 9F                              lahf                    ; preserve flags
 24439 00005298 803E[080A]00                    CMP     byte [VIRTUAL_OPEN],0
 24440 0000529D 7410                            JZ	short ALL_CLOSED
 24441 0000529F C606[080A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 24442 000052A4 06                      	push	es
 24443 000052A5 57                      	push	di
 24444 000052A6 C43E[3605]                      LES     DI,[THISSFT]
 24445 000052AA E8D3FB                          call	DEV_CLOSE_SFT
 24446 000052AD 5F                      	pop	di
 24447 000052AE 07                      	pop	es
 24448                                  
 24449                                  ALL_CLOSED:
 24450 000052AF 9E                              sahf                    ; restore flags
 24451 000052B0 58                              POP     AX
 24452 000052B1 C3                              retn
 24453                                  
 24454                                  ;============================================================================
 24455                                  ; ROM.ASM, MSDOS 6.0, 1991
 24456                                  ;============================================================================
 24457                                  ; 29/07/2018 - Retro DOS v3.0
 24458                                  
 24459                                  ;	TITLE	ROM - Miscellaneous routines
 24460                                  ;	NAME	ROM
 24461                                  
 24462                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 24463                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 24464                                  ;
 24465                                  ;	SKPCLP
 24466                                  ;	FNDCLUS
 24467                                  ;	BUFSEC
 24468                                  ;	BUFRD
 24469                                  ;	BUFWRT
 24470                                  ;	NEXTSEC
 24471                                  ;	OPTIMIZE
 24472                                  ;	FIGREC
 24473                                  ;	ALLOCATE
 24474                                  ;	RESTFATBYT
 24475                                  ;	RELEASE
 24476                                  ;	RELBLKS
 24477                                  ;	GETEOF
 24478                                  ;
 24479                                  ;	Modification history:
 24480                                  ;
 24481                                  ;		Created: ARR 30 March 1983
 24482                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 24483                                  
 24484                                  ;Break   <FNDCLUS -- Skip over allocation units>
 24485                                  ;--------------------------------------------------------------------------
 24486                                  ;
 24487                                  ; Procedure Name : FNDCLUS
 24488                                  ;
 24489                                  ; Inputs:
 24490                                  ;       CX = No. of clusters to skip
 24491                                  ;       ES:BP = Base of drive parameters
 24492                                  ;       [THISSFT] point to SFT
 24493                                  ; Outputs:
 24494                                  ;       BX = Last cluster skipped to
 24495                                  ;       CX = No. of clusters remaining (0 unless EOF)
 24496                                  ;       DX = Position of last cluster
 24497                                  ;       Carry set if error (currently user FAILed to I 24)
 24498                                  ; DI destroyed. No other registers affected.
 24499                                  ;--------------------------------------------------------------------------
 24500                                  
 24501                                  FNDCLUS:
 24502 000052B2 06                      	PUSH	ES
 24503 000052B3 C43E[3605]                      LES     DI,[THISSFT]		; setup addressability to SFT
 24504                                  	;mov	bx,[es:di+1Bh]
 24505 000052B7 268B5D1B                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 24506                                  	;mov	dx,[es:di+19h]
 24507 000052BB 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 24508 000052BF 09DB                    	OR	BX,BX
 24509 000052C1 7424                    	JZ	short NOCLUS
 24510                                  
 24511 000052C3 29D1                            SUB     CX,DX
 24512 000052C5 7308                            JNB	short FINDIT
 24513                                  
 24514 000052C7 01D1                            ADD     CX,DX
 24515 000052C9 31D2                            XOR     DX,DX
 24516                                  	;mov	bx,[es:di+0Bh]
 24517 000052CB 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 24518                                  FINDIT:
 24519 000052CF 07                              POP	ES
 24520 000052D0 E313                    	JCXZ	RET9
 24521                                  
 24522                                  	;entry	SKPCLP
 24523                                  SKPCLP:
 24524 000052D2 E87C07                  	call	UNPACK
 24525 000052D5 7214                            jc	short fndclus_retn	; retc
 24526                                  	
 24527                                  	; 09/09/2018
 24528                                  
 24529                                  	; MSDOS 6.0
 24530                                  	;xchg	bx,di
 24531                                  	;call	IsEOF
 24532                                  	;pop	bx
 24533                                  	;xchg	bx,di
 24534                                  	;jae	short RET9
 24535                                  
 24536                                  	; MSDOS 3.3
 24537 000052D7 53                      	push	bx
 24538 000052D8 89FB                    	mov	bx,di
 24539 000052DA E85D07                  	call	IsEOF
 24540 000052DD 5B                      	pop	bx	
 24541 000052DE 7305                    	jae	short RET9
 24542                                  
 24543 000052E0 87DF                            XCHG    BX,DI
 24544 000052E2 42                              INC     DX
 24545 000052E3 E2ED                    	LOOP	SKPCLP			; RMFS
 24546                                  RET9:	
 24547 000052E5 F8                      	CLC
 24548 000052E6 C3                              retn
 24549                                  NOCLUS:
 24550 000052E7 07                              POP	ES
 24551 000052E8 41                              INC	CX
 24552 000052E9 4A                              DEC	DX
 24553 000052EA F8                              CLC
 24554                                  
 24555                                  fndclus_retn:
 24556 000052EB C3                              retn
 24557                                  
 24558                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 24559                                  ;--------------------------------------------------------------------------
 24560                                  ;
 24561                                  ; Procedure Name : BUFSEC
 24562                                  ;
 24563                                  ; Inputs:
 24564                                  ;       AH = priority of buffer
 24565                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 24566                                  ;       ES:BP = Base of drive parameters
 24567                                  ;       [CLUSNUM] = Physical cluster number
 24568                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 24569                                  ;       [BYTCNT1] = Size of transfer
 24570                                  ; Function:
 24571                                  ;       Insure specified sector is in buffer, flushing buffer before
 24572                                  ;       read if necessary.
 24573                                  ; Outputs:
 24574                                  ;       ES:DI = Pointer to buffer
 24575                                  ;       SI = Pointer to transfer address
 24576                                  ;       CX = Number of bytes
 24577                                  ;       [NEXTADD] updated
 24578                                  ;       [TRANS] set to indicate a transfer will occur
 24579                                  ;       Carry set if error (user FAILed to I 24)
 24580                                  ;--------------------------------------------------------------------------
 24581                                  
 24582                                  BUFSEC:
 24583 000052EC 8B16[5405]                      MOV     DX,[CLUSNUM]
 24584 000052F0 8A1E[0E05]                      MOV     BL,[SECCLUSPOS]
 24585                                  	;mov	byte [ALLOWED],38h
 24586 000052F4 C606[F702]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 24587 000052F9 E83901                          CALL    FIGREC
 24588 000052FC E88A0B                  	call	GETBUFFR
 24589 000052FF 72EA                            jc	short fndclus_retn
 24590                                  
 24591 00005301 C606[0F05]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 24592 00005306 8B36[5005]                      MOV     SI,[NEXTADD]
 24593 0000530A 89F7                            MOV     DI,SI
 24594 0000530C 8B0E[6405]                      MOV     CX,[BYTCNT1]
 24595 00005310 01CF                            ADD     DI,CX
 24596 00005312 893E[5005]                      MOV     [NEXTADD],DI
 24597 00005316 C43E[7405]                      LES     DI,[CURBUF]
 24598                                  	;or	byte [es:di+5],8
 24599 0000531A 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 24600                                  	;lea	di,[di+16]
 24601 0000531F 8D7D10                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 24602 00005322 033E[5E05]                      ADD     DI,[BYTSECPOS]
 24603 00005326 F8                              CLC
 24604 00005327 C3                              retn
 24605                                  
 24606                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 24607                                  
 24608                                  ;---------------------------------------------------------------------------
 24609                                  ;
 24610                                  ; Procedure Name : BUFRD
 24611                                  ;
 24612                                  ; Do a partial sector read via one of the system buffers
 24613                                  ; ES:BP Points to DPB
 24614                                  ; Carry set if error (currently user FAILed to I 24)
 24615                                  ;
 24616                                  ; DS - set to DOSDATA
 24617                                  ;
 24618                                  ;----------------------------------------------------------------------------
 24619                                  
 24620                                  BUFRD:
 24621 00005328 06                              PUSH	ES
 24622 00005329 31C0                            xor	ax, ax			; pre-read sector
 24623 0000532B E8BEFF                          CALL    BUFSEC
 24624 0000532E 7303                            JNC	short BUF_OK
 24625                                  
 24626                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 24627 00005330 07                              POP	ES
 24628 00005331 EB29                            JMP     SHORT RBUFPLACED
 24629                                  
 24630                                  BUF_OK:
 24631 00005333 8CC3                            MOV     BX,ES
 24632 00005335 8E06[DC02]                      MOV     ES,[DMAADD+2]
 24633 00005339 8EDB                            MOV     DS,BX
 24634 0000533B 87FE                    	XCHG    DI,SI
 24635 0000533D D1E9                            SHR     CX,1
 24636                                  ;M039
 24637                                  	; MSDOS 3.3
 24638 0000533F 7301                    	JNC	short EVENRD
 24639 00005341 A4                      	MOVSB
 24640                                  EVENRD:
 24641 00005342 F3A5                    	REP     MOVSW
 24642                                  
 24643                                  ;	   CX = # of whole WORDs; CF=1 if odd # of bytes.
 24644                                  ;       DS:SI-> Source within Buffer.
 24645                                  ;       ES:DI-> Destination within Transfer memory block.
 24646                                  
 24647                                  	; MSDOS 6.0
 24648                                  ;	rep	movsw			;Copy Buffer to Transfer memory.
 24649                                  ;	adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 24650                                  ;	rep	movsb                   ;Copy last byte.
 24651                                  ;M039
 24652                                  
 24653 00005344 07                              POP	ES
 24654                                  ;hkn; SS override
 24655 00005345 36C53E[7405]                    LDS     DI,[SS:CURBUF]
 24656                                  	;lea	bx,[di+16]
 24657 0000534A 8D5D10                  	LEA     BX,[DI+BUFINSIZ]
 24658 0000534D 29DE                            SUB     SI,BX                   ; Position in buffer
 24659 0000534F E88C0A                          call	PLACEBUF
 24660                                  	;cmp	si,[es:bp+2]
 24661 00005352 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 24662 00005356 7203                            JB	short RBUFPLACEDC	; No, leave buf where it is
 24663                                  
 24664                                  ;M039
 24665                                  	; MSDOS 3.3
 24666 00005358 E8E50A                  	call	PLACEHEAD               ; Make it prime candidate for chucking
 24667                                                                          ;  even though it is MRU.
 24668                                          ; MSDOS 6.0
 24669                                  	;MOV	[BufferQueue],DI	; Make it prime candidate for
 24670                                  ;M039					; chucking even though it is MRU.
 24671                                  
 24672                                  RBUFPLACEDC:
 24673 0000535B F8                              CLC
 24674                                  RBUFPLACED:
 24675 0000535C 16                      	push	ss
 24676 0000535D 1F                      	pop	ds
 24677 0000535E C3                              retn
 24678                                  
 24679                                  ;----------------------------------------------------------------------------
 24680                                  ;
 24681                                  ; Procedure : BUFWRT
 24682                                  ;
 24683                                  ; Do a partial sector write via one of the system buffers
 24684                                  ; ES:BP Points to DPB
 24685                                  ; Carry set if error (currently user FAILed to I 24)
 24686                                  ;
 24687                                  ; DS - set to DOSDATA
 24688                                  ;
 24689                                  ;----------------------------------------------------------------------------
 24690                                  
 24691                                  BUFWRT:
 24692 0000535F A1[5A05]                        MOV     AX,[SECPOS]
 24693                                          ; MSDOS 6.0
 24694                                  	;ADD	AX,1            	; Set for next sector
 24695                                          ;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 24696                                          ;ADC	[SECPOS+2],0		;F.C. >32mb	;AN000;
 24697                                          ;MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 24698                                          ;CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 24699                                          ;MOV	AL,1			;F.C. >32mb	;AN000;
 24700                                          ;JA	short NOREAD		;F.C. >32mb	;AN000;
 24701                                          ;JB	short doread		;F.C. >32mb	;AN000;
 24702                                          ;MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 24703                                  	; MSDOS 3.3
 24704 00005362 40                      	INC	AX
 24705 00005363 A3[5A05]                	MOV	[SECPOS],AX ; 09/09/2018
 24706                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24707 00005366 3B06[5C05]                      CMP     AX,[VALSEC]		; Has sector been written before?
 24708 0000536A B001                            MOV     AL,1
 24709 0000536C 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 24710                                  ;doread:
 24711 0000536E 30C0                            XOR     AL,AL
 24712                                  NOREAD:
 24713 00005370 06                              PUSH	ES
 24714 00005371 E878FF                          CALL    BUFSEC
 24715 00005374 72BA                    	JC	short BUF_IO_FAIL
 24716 00005376 8E1E[DC02]                      MOV     DS,[DMAADD+2]
 24717 0000537A D1E9                            SHR     CX,1
 24718                                  
 24719                                  ;M039
 24720                                  	; MSDOS 3.3
 24721 0000537C 7301                    	JNC     short EVENWRT ; 09/09/2018
 24722 0000537E A4                      	MOVSB
 24723                                  EVENWRT:
 24724 0000537F F3A5                    	REP     MOVSW
 24725                                  
 24726                                  ;	   CX = # of whole WORDs; CF=1 if odd # of bytes.
 24727                                  ;       DS:SI-> Source within Transfer memory block.
 24728                                  ;       ES:DI-> Destination within Buffer.
 24729                                  
 24730                                  	; MSDOS 6.0
 24731                                  	;rep	movsw			;Copy Transfer memory to Buffer.
 24732                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 24733                                  	;rep	movsb                   ;Copy last byte.
 24734                                  ;M039
 24735 00005381 07                              POP	ES
 24736                                  
 24737                                  ;hkn; SS override
 24738 00005382 36C51E[7405]                    LDS     BX,[SS:CURBUF]
 24739                                  
 24740                                  	; MSDOS 6.0
 24741                                          ;TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 24742                                  	;				;LB. if already dirty		  ;AN000;
 24743                                          ;JNZ	short yesdirty5		;LB.  don't increment dirty count ;AN000;
 24744                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 24745                                  	
 24746                                  	;or	byte [bx+5],40h
 24747 00005387 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 24748                                  ;yesdirty5:
 24749                                  	;lea	si,[bx+16]
 24750 0000538B 8D7710                          LEA     SI,[BX+BUFINSIZ]
 24751 0000538E 29F7                            SUB     DI,SI                   ; Position in buffer
 24752                                  ;M039
 24753                                  	; MSDOS 3.3
 24754 00005390 89FE                    	MOV     SI,DI
 24755 00005392 89DF                    	MOV     DI,BX
 24756 00005394 E8470A                  	call	PLACEBUF
 24757                                  	;cmp	si,[es:bp+2]
 24758 00005397 263B7602                	CMP     SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 24759 0000539B 7203                    	JB	short WBUFPLACED	; No, leave buf where it is
 24760 0000539D E8A00A                  	call	PLACEHEAD               ; Make it prime candidate for chucking
 24761                                                                          ;  even though it is MRU.
 24762                                  	; MSDOS 6.0
 24763                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 24764                                          ;JB	short WBUFPLACED	; No, leave buf where it is
 24765                                          ;MOV	[BufferQueue],BX	; Make it prime candidate for
 24766                                  					; chucking even though it is MRU.
 24767                                  ;M039
 24768                                  
 24769                                  WBUFPLACED:
 24770 000053A0 F8                              CLC
 24771 000053A1 16                      	push	ss
 24772 000053A2 1F                      	pop	ds
 24773 000053A3 C3                              retn
 24774                                  
 24775                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 24776                                  ;---------------------------------------------------------------------------
 24777                                  ;
 24778                                  ; Procedure Name : NEXTSEC
 24779                                  ;
 24780                                  ; Compute the next sector to read or write
 24781                                  ; ES:BP Points to DPB
 24782                                  ;
 24783                                  ;---------------------------------------------------------------------------
 24784                                  
 24785                                  NEXTSEC:
 24786 000053A4 F606[0F05]FF            	test	byte [TRANS],0FFh ; -1 
 24787 000053A9 7426                            JZ	short CLRET
 24788                                  
 24789 000053AB A0[0E05]                        MOV     AL,[SECCLUSPOS]
 24790 000053AE FEC0                            INC     AL
 24791                                  	;cmp	al,[es:bp+4]
 24792 000053B0 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 24793 000053B4 7618                            JBE	short SAVPOS
 24794                                  
 24795 000053B6 8B1E[5405]                      MOV     BX,[CLUSNUM]
 24796 000053BA E87D06                          call	IsEOF
 24797 000053BD 7314                            JAE	short NONEXT
 24798                                  
 24799 000053BF E88F06                          call	UNPACK
 24800 000053C2 720F                            JC	short NONEXT
 24801                                  clusgot:
 24802 000053C4 893E[5405]                      MOV     [CLUSNUM],DI
 24803 000053C8 FF06[5205]                      INC     word [LASTPOS]
 24804 000053CC B000                            MOV     AL,0
 24805                                  SAVPOS:
 24806 000053CE A2[0E05]                        MOV     [SECCLUSPOS],AL
 24807                                  CLRET:
 24808 000053D1 F8                              CLC
 24809 000053D2 C3                              retn
 24810                                  NONEXT:
 24811 000053D3 F9                              STC
 24812 000053D4 C3                              retn
 24813                                  
 24814                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 24815                                  ;----------------------------------------------------------------------------
 24816                                  ;
 24817                                  ; Procedure Name : OPTIMIZE
 24818                                  ;
 24819                                  ; Inputs:
 24820                                  ;       BX = Physical cluster
 24821                                  ;       CX = No. of records
 24822                                  ;       DL = sector within cluster
 24823                                  ;       ES:BP = Base of drives parameters
 24824                                  ;       [NEXTADD] = transfer address
 24825                                  ; Outputs:
 24826                                  ;       AX = No. of records remaining
 24827                                  ;       BX = Transfer address
 24828                                  ;       CX = No. or records to be transferred
 24829                                  ;       DX = Physical sector address            (LOW)
 24830                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 24831                                  ;       DI = Next cluster
 24832                                  ;       [CLUSNUM] = Last cluster accessed
 24833                                  ;       [NEXTADD] updated
 24834                                  ;       Carry set if error (currently user FAILed to I 24)
 24835                                  ; ES:BP unchanged. Note that segment of transfer not set.
 24836                                  ;
 24837                                  ;---------------------------------------------------------------------------
 24838                                  
 24839                                  OPTIMIZE:
 24840 000053D5 52                      	PUSH    DX
 24841 000053D6 53                              PUSH    BX
 24842                                  	;mov	al,[es:bp+4]
 24843 000053D7 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 24844 000053DB FEC0                            INC     AL              ; Number of sectors per cluster
 24845 000053DD 88C4                            MOV     AH,AL
 24846 000053DF 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 24847 000053E1 89CA                            MOV     DX,CX
 24848 000053E3 B90000                          MOV     CX,0
 24849                                  OPTCLUS:
 24850                                  ; AL has number of sectors available in current cluster
 24851                                  ; AH has number of sectors available in next cluster
 24852                                  ; BX has current physical cluster
 24853                                  ; CX has number of sequential sectors found so far
 24854                                  ; DX has number of sectors left to transfer
 24855                                  ; ES:BP Points to DPB
 24856                                  ; ES:SI has FAT pointer
 24857                                  
 24858                                  do_norm3:
 24859 000053E6 E86806                          call	UNPACK
 24860 000053E9 7237                            JC	short OP_ERR
 24861                                  clusgot2:
 24862 000053EB 00C1                    	ADD	CL,AL
 24863 000053ED 80D500                          ADC     CH,0
 24864 000053F0 39D1                            CMP     CX,DX
 24865 000053F2 7333                            JAE	short BLKDON
 24866 000053F4 88E0                            MOV     AL,AH
 24867 000053F6 43                              INC     BX
 24868 000053F7 39DF                            CMP     DI,BX
 24869 000053F9 74EB                            JZ	short OPTCLUS
 24870 000053FB 4B                              DEC     BX
 24871                                  FINCLUS:
 24872 000053FC 891E[5405]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 24873 00005400 29CA                            SUB     DX,CX           ; Number of sectors still needed
 24874 00005402 52                              PUSH    DX
 24875 00005403 89C8                            MOV     AX,CX
 24876                                  	;mul	word[ES:BP+2]
 24877 00005405 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 24878                                  				; Number of sectors times sector size
 24879 00005409 8B36[5005]                      MOV     SI,[NEXTADD]
 24880 0000540D 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 24881 0000540F A3[5005]                        MOV     [NEXTADD],AX
 24882 00005412 58                              POP     AX              ; Number of sectors still needed
 24883 00005413 5A                              POP     DX              ; Starting cluster
 24884 00005414 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 24885 00005416 011E[5205]                      ADD     [LASTPOS],BX
 24886 0000541A 5B                              POP     BX              ; BL = sector postion within cluster
 24887 0000541B E81700                  	call	FIGREC
 24888 0000541E 89F3                            MOV     BX,SI
 24889 00005420 F8                      	CLC
 24890 00005421 C3                              retn
 24891                                  
 24892                                  OP_ERR:
 24893 00005422 83C404                          ADD     SP,4
 24894 00005425 F9                      	STC
 24895 00005426 C3                              retn
 24896                                  
 24897                                  BLKDON:
 24898 00005427 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 24899 00005429 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 24900 0000542B FECC                            DEC     AH              ; Adjust to mean position within cluster
 24901 0000542D 8826[0E05]                      MOV     [SECCLUSPOS],AH
 24902 00005431 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 24903 00005433 EBC7                            JMP     SHORT FINCLUS
 24904                                  
 24905                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 24906                                  ;---------------------------------------------------------------------------
 24907                                  ;
 24908                                  ; Procedure Name : FIGREC
 24909                                  ;
 24910                                  ; Inputs:
 24911                                  ;       DX = Physical cluster number
 24912                                  ;       BL = Sector position within cluster
 24913                                  ;       ES:BP = Base of drive parameters
 24914                                  ; Outputs:
 24915                                  ;       DX = physical sector number           (LOW)
 24916                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 24917                                  ; No other registers affected.
 24918                                  ;
 24919                                  ;---------------------------------------------------------------------------
 24920                                  
 24921                                  FIGREC:
 24922 00005435 51                              PUSH    CX
 24923                                  	;mov	cl,[es:bp+5]
 24924 00005436 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 24925 0000543A 4A                              DEC     DX
 24926 0000543B 4A                              DEC     DX
 24927                                  
 24928                                  ;hkn; SS override HIGH_SECTOR
 24929                                  	; MSDOS 6.0
 24930                                  	;MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 24931                                  	;OR	CL,CL				;F.C. >32mb
 24932                                  	;JZ	short noshift			;F.C. >32mb
 24933                                  	;XOR	CH,CH 				;F.C. >32mb
 24934                                  ;rotleft:					;F.C. >32mb
 24935                                  	;CLC					;F.C. >32mb
 24936                                  	;RCL	DX,1				;F.C. >32mb
 24937                                  	;RCL	word [HIGH_SECTOR],1		;F.C. >32mb
 24938                                  	;LOOP	rotleft				;F.C. >32mb
 24939                                  ;noshift:
 24940                                  
 24941                                  	; MSDOS 3.3
 24942 0000543C D3E2                    	SHL     DX,CL
 24943                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24944 0000543E 08DA                            OR      DL,BL
 24945                                  	;add	dx,[es:bp+0Bh]
 24946 00005440 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 24947                                  	; MSDOS 6.0
 24948                                          ;ADC	word [HIGH_SECTOR],0		;F.C. >32mb
 24949                                  	; MSDOS 3.3 (& MSDOS 6.0)        
 24950 00005444 59                      	POP     CX
 24951                                  figrec_retn:
 24952 00005445 C3                              retn
 24953                                  
 24954                                  ; 30/07/2018 - Retro DOS v3.0
 24955                                  ; IBMDOS.COM (MSDOS3.3, 1987) - Offset 
 24956                                  
 24957                                  ;Break   <ALLOCATE -- Assign disk space>
 24958                                  ;---------------------------------------------------------------------------
 24959                                  ;
 24960                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 24961                                  ;
 24962                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 24963                                  ;   FAT-chained onto the end of the existing file.
 24964                                  ;
 24965                                  ;   The DPB contains the cluster # of the last free cluster allocated
 24966                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 24967                                  ;   numbered clusters, looking for the necessary free blocks.
 24968                                  ;
 24969                                  ;   Once again, fancy terminology gets in the way of corrct coding. When
 24970                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 24971                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 24972                                  ;
 24973                                  ;       If we get to the end of the disk without satisfaction:
 24974                                  ;
 24975                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 24976                                  ;               return (insufficient_disk_space)
 24977                                  ;           ELSE
 24978                                  ;               dpb_next_free = 2; start scan over from the beginning.
 24979                                  ;
 24980                                  ;   Note that there is no multitasking interlock. There is no race when
 24981                                  ;   examining the entrys in an in-core FAT block since there will be no
 24982                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 24983                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 24984                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 24985                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 24986                                  ;   satisfied. We can't allow another activation to think this cluster is
 24987                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 24988                                  ;   allocated.
 24989                                  ;
 24990                                  ;   Note that when we run out of space this algorithem will scan from
 24991                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 24992                                  ;   redundantly scanning the later part of the disk. This only happens when
 24993                                  ;   we run out of space, so sue me.
 24994                                  ;
 24995                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 24996                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 24997                                  ;                                                                          ;
 24998                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 24999                                  ;   explanation:
 25000                                  ;
 25001                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 25002                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 25003                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 25004                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 25005                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 25006                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 25007                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 25008                                  ;   the
 25009                                  ;           LOOP   findfre         ; alloc more if needed
 25010                                  ;   instruction when the first cluster is allocated to the nul file. The
 25011                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 25012                                  ;
 25013                                  ;   This method is obviously useless (because it is non-reentrant) for
 25014                                  ;   multitasking, and will have to be changed. Storing the required value on
 25015                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 25016                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 25017                                  ;   problems with INT 24 well.
 25018                                  ;
 25019                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 25020                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 25021                                  ;                                                                          ;
 25022                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 25023                                  ;               CX = No. of clusters to allocate
 25024                                  ;               ES:BP = Base of drive parameters
 25025                                  ;               [THISSFT] = Points to SFT
 25026                                  ;
 25027                                  ;       EXIT    'C' set if insufficient space
 25028                                  ;                 [FAILERR] can be tested to see the reason for failure
 25029                                  ;                 CX = max. no. of clusters that could be added to file
 25030                                  ;               'C' clear if space allocated
 25031                                  ;                 BX = First cluster allocated
 25032                                  ;                 FAT is fully updated
 25033                                  ;                 sf_FIRCLUS field of SFT set if file was null
 25034                                  ;
 25035                                  ;       USES    ALL but SI, BP
 25036                                  
 25037                                  ;callmagic  proc near
 25038                                  ;       push    ds                             ;push segment of routine 
 25039                                  ;       push    Offset MagicPatch              ;push offset for routine
 25040                                  ;       retf                                   ;simulate jmp far
 25041                                  ;                                              ;far return address is on
 25042                                  ;                                              ;stack, so far return from
 25043                                  ;                                              ;call will return this routine
 25044                                  ;callmagic  endp
 25045                                  
 25046                                  ALLOCATE:
 25047                                  	; 10/09/2018
 25048                                  ;BEGIN MAGICDRV MODIFICATIONS
 25049                                  ;
 25050                                  ;7/5/92 scottq
 25051                                  ;
 25052                                  ;This is the disk compression patch location which allows
 25053                                  ;the disk compression software to fail allocations if the
 25054                                  ;FAT would allows allocation, but the free space for compressed
 25055                                  ;data would not.
 25056                                  ;        
 25057                                  ;;;	call    far ptr MAGICPATCH
 25058                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 25059                                  ;;; but we do know the segment and offset of the routine
 25060                                  ;;; so simulate a far call to dosdata:magicpatch
 25061                                  ;;; note dosassume above, so DS -> dosdata
 25062                                  
 25063                                  	; MSDOS 6.0
 25064                                          ;clc				;clear carry so we fall through
 25065                                  	;				;if no patch is present
 25066                                  	;push	cs			;push segment for far return
 25067                                          ;call	callmagic		;this is a near call
 25068                                          ;jnc	short Regular_Allocate_Path
 25069                                  	;jmp	Disk_Full_Return
 25070                                  
 25071                                  	; MSDOS 6.0
 25072                                          ;clc				;clear carry so we fall through
 25073                                  	;				;if no patch is present
 25074                                  	;push	cs			;push segment for far return
 25075                                          ;call	callmagic		;this is a near call
 25076                                          ;jnc	short Regular_Allocate_Path
 25077                                  	;jmp	Disk_Full_Return ; 10/09/2018 !
 25078                                  
 25079                                  ;Regular_Allocate_Path:
 25080                                  ;END MAGICDRV MODIFICATIONS
 25081                                  
 25082 00005446 53                              PUSH    BX                      ; save (bx)
 25083 00005447 31DB                            XOR     BX,BX
 25084 00005449 E80506                  	call	UNPACK
 25085 0000544C 893E[2E05]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 25086 00005450 5B                              POP     BX
 25087 00005451 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 25088                                  
 25089 00005453 51                              PUSH    CX
 25090 00005454 53                              PUSH    BX
 25091                                  
 25092 00005455 89DA                            MOV     DX,BX
 25093                                  	;mov	bx,[es:bp+1Ch]
 25094 00005457 268B5E1C                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 25095 0000545B 83FB02                          cmp     bx,2
 25096 0000545E 7709                            ja	short FINDFRE
 25097                                  
 25098                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 25099                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 25100                                  
 25101                                  ads1:
 25102                                  	;mov	word [es:bp+1Ch],2
 25103 00005460 26C7461C0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 25104 00005466 BB0100                          mov     bx,1                    ; Counter next instruction so first
 25105                                                                          ;       cluster examined is 2
 25106                                  
 25107                                  ;   Scanning both forwards and backwards for a free cluster
 25108                                  ;
 25109                                  ;       (BX) = forwards scan pointer
 25110                                  ;       (CX) = clusters remaining to be allocated
 25111                                  ;       (DX) = current last cluster in file
 25112                                  ;       (TOS) = last cluster of file
 25113                                  
 25114                                  FINDFRE:
 25115 00005469 43                              INC     BX
 25116                                  	;cmp	bx,[es:bp+0Dh]
 25117 0000546A 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 25118 0000546E 7757                    	ja	short ads7	; at end of disk
 25119 00005470 E8DE05                          call	UNPACK          ; check out this cluster
 25120 00005473 722F                            jc	short ads4	; FAT error             [INTERR?]
 25121 00005475 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 25122                                  
 25123                                  ;   Have found a free cluster. Chain it to the file
 25124                                  ;
 25125                                  ;       (BX) = found free cluster #
 25126                                  ;       (DX) = current last cluster in file
 25127                                  
 25128                                  	;mov	[es:bp+1Ch],bx
 25129 00005477 26895E1C                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 25130 0000547B 92                              xchg    ax,dx           ; save (dx) in ax
 25131 0000547C BA0100                          mov     dx,1            ; mark this free guy as "1"
 25132 0000547F E81806                  	call	PACK            ; set special "temporary" mark
 25133 00005482 7220                            jc	short ads4	; FAT error             [INTERR?]
 25134                                  	;cmp	word [es:bp+1Eh],-1
 25135 00005484 26837E1EFF                      CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 25136 00005489 7404                            JZ	short NO_ALLOC	; No
 25137                                  	;dec	word [es:bp+1Eh]
 25138 0000548B 26FF4E1E                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 25139                                  NO_ALLOC:
 25140 0000548F 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 25141 00005490 87DA                            XCHG    BX,DX
 25142 00005492 89D0                            MOV     AX,DX
 25143 00005494 E80306                  	call	PACK            ; link free cluster onto file
 25144                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 25145                                                                  ;    cluster 0 with FIRCLUS value.
 25146 00005497 720B                            jc	short ads4	; FAT error [INTERR?]
 25147 00005499 93                              xchg    BX,AX           ; (BX) = last one we looked at
 25148 0000549A 89DA                            mov     dx,bx           ; (dx) = current end of file
 25149 0000549C E2CB                            LOOP    FINDFRE         ; alloc more if needed
 25150                                  
 25151                                  ;   We've successfully extended the file. Clean up and exit
 25152                                  ;
 25153                                  ;       (BX) = last cluster in file
 25154                                  
 25155 0000549E BAFFFF                          MOV     DX,0FFFFH
 25156 000054A1 E8F605                  	call	PACK            ; mark last cluster EOF
 25157                                  
 25158                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 25159                                  ;   2 whole bytes.  Hope its worth it...
 25160                                  ;
 25161                                  ;       'C' set iff error
 25162                                  ;       calling (BX) and (CX) pushed on stack
 25163                                  
 25164                                  ads4:   
 25165 000054A4 5B                      	POP     BX
 25166 000054A5 59                              POP     CX              ; Don't need this stuff since we're successful
 25167 000054A6 729D                            jc	short figrec_retn
 25168 000054A8 E8A605                          call	UNPACK          ; Get first cluster allocated for return
 25169                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 25170 000054AB 7298                            jc	short figrec_retn
 25171 000054AD E82D00                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 25172 000054B0 7293                            jc	short figrec_retn
 25173 000054B2 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 25174 000054B4 09FF                            OR      DI,DI           ; clear 'C'
 25175 000054B6 758D                    	jnz	short figrec_retn ; we were extending an existing file
 25176                                  
 25177                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 25178                                  ;   info
 25179                                  dofastk:
 25180 000054B8 06                              PUSH	ES
 25181 000054B9 C43E[3605]                      LES     DI,[THISSFT]
 25182                                  	;mov	[es:di+0Bh],bx
 25183 000054BD 26895D0B                        MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 25184                                  	;mov	[es:di+1Bh],bx
 25185 000054C1 26895D1B                        MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 25186 000054C5 07                              POP	ES
 25187 000054C6 C3                              retn
 25188                                  
 25189                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 25190                                  ;   of the disk...
 25191                                  
 25192                                  ads7:   
 25193 000054C7 26837E1C02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 25194 000054CC 7592                    	jnz	short ads1	; start scan from front of disk
 25195                                  
 25196                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 25197                                  ;   the space back to the free list and tell the caller how much he could have
 25198                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 25199                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 25200                                  ;
 25201                                  ;       (CX) = clusters remaining to be allocated
 25202                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 25203                                  ;       (TOS+1) = # of clusters wanted to allocate
 25204                                  
 25205 000054CE 5B                              POP     BX              ; (BX) = last cluster of file
 25206 000054CF BAFFFF                          MOV     DX,0FFFFH
 25207 000054D2 E81A00                  	call	RELBLKS         ; give back any clusters just alloced
 25208 000054D5 58                              POP     AX              ; No. of clusters requested
 25209                                                                  ; Don't "retc". We are setting Carry anyway,
 25210                                                                  ;   Alloc failed, so proceed with return CX
 25211                                                                  ;   setup.
 25212 000054D6 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 25213 000054D8 E80200                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 25214                                                                  ;   Alloc failed.
 25215                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 25216                                          ; MSDOS 6.0
 25217                                  	;MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 25218 000054DB F9                              STC
 25219 000054DC C3                              retn
 25220                                  
 25221                                  ;-----------------------------------------------------------------------
 25222                                  ;
 25223                                  ; Procedure Name : RESTFATBYT
 25224                                  ;
 25225                                  ; SEE ALLOCATE CAVEAT
 25226                                  ;       Carry set if error (currently user FAILed to I 24)
 25227                                  ;-----------------------------------------------------------------------
 25228                                  
 25229                                  RESTFATBYT:
 25230 000054DD 53                              PUSH    BX
 25231 000054DE 52                              PUSH    DX
 25232 000054DF 57                              PUSH    DI
 25233 000054E0 31DB                            XOR     BX,BX
 25234 000054E2 8B16[2E05]                      MOV     DX,[FATBYT]
 25235 000054E6 E8B105                  	call	PACK
 25236 000054E9 5F                              POP     DI
 25237 000054EA 5A                              POP     DX
 25238 000054EB 5B                              POP     BX
 25239                                  RELEASE_flush:
 25240 000054EC C3                      	retn
 25241                                  
 25242                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 25243                                  ;---------------------------------------------------------------------------
 25244                                  ;
 25245                                  ; Procedure Name : RELEASE
 25246                                  ;
 25247                                  ; Inputs:
 25248                                  ;       BX = Cluster in file
 25249                                  ;       ES:BP = Base of drive parameters
 25250                                  ; Function:
 25251                                  ;       Frees cluster chain starting with [BX]
 25252                                  ;       Carry set if error (currently user FAILed to I 24)
 25253                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 25254                                  ;
 25255                                  ;-----------------------------------------------------------------------------
 25256                                  
 25257                                  RELEASE:
 25258 000054ED 31D2                            XOR     DX,DX
 25259                                  
 25260                                  	;entry	RELBLKS
 25261                                  RELBLKS:
 25262                                  
 25263                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 25264                                  ;   and free the rest in the chain.
 25265                                  
 25266 000054EF E85F05                  	call	UNPACK
 25267 000054F2 72F8                    	jc	short RELEASE_flush
 25268 000054F4 74F6                    	jz	short RELEASE_flush
 25269 000054F6 89F8                            MOV     AX,DI
 25270 000054F8 52                              PUSH    DX
 25271 000054F9 E89E05                  	call	PACK
 25272 000054FC 5A                              POP     DX
 25273 000054FD 72ED                    	jc	short RELEASE_flush
 25274 000054FF 09D2                            OR      DX,DX
 25275 00005501 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 25276                                  	;cmp	word [es:bp+1Eh],-1
 25277 00005503 26837E1EFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 25278 00005508 7404                            JZ	short NO_DEALLOC	; No
 25279 0000550A 26FF461E                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 25280                                  NO_DEALLOC:
 25281 0000550E 89C3                            MOV     BX,AX
 25282 00005510 48                              dec     ax              ; check for "1"
 25283 00005511 74D9                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 25284 00005513 E82405                  	call	IsEOF
 25285 00005516 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 25286                                  
 25287                                  ;RELEASE_flush:
 25288                                  	; MSDOS 6.0
 25289                                  	;mov	al,[es:bp]
 25290                                  	;;MOV	AL,[ES:BP+DPB.DRIVE]
 25291                                  	;push	si		; FLUSHBUF may trash these and we guarantee
 25292                                  	;push	cx		;  them to be preserved.
 25293                                  	;push	es
 25294                                  	;push	bp
 25295                                  	;call	FLUSHBUF	; commit buffers for this drive
 25296                                  	;pop	bp
 25297                                  	;pop	es
 25298                                  	;pop	cx
 25299                                  	;pop	si
 25300                                  RET12:
 25301 00005518 C3                      	retn
 25302                                  
 25303                                  ;Break	<GETEOF -- Find the end of a file>
 25304                                  ;------------------------------------------------------------------------
 25305                                  ;
 25306                                  ; Procedure Name : GETEOF
 25307                                  ;
 25308                                  ; Inputs:
 25309                                  ;       ES:BP Points to DPB
 25310                                  ;       BX = Cluster in a file
 25311                                  ;       DS = CS
 25312                                  ; Outputs:
 25313                                  ;       BX = Last cluster in the file
 25314                                  ;       Carry set if error (currently user FAILed to I 24)
 25315                                  ; DI destroyed. No other registers affected.
 25316                                  ;
 25317                                  ;--------------------------------------------------------------------------
 25318                                  
 25319                                  GETEOF:
 25320 00005519 E83505                  	call	UNPACK
 25321 0000551C 72FA                            jc	short RET12
 25322 0000551E 53                              PUSH    BX
 25323 0000551F 89FB                            MOV     BX,DI
 25324 00005521 E81605                  	call	IsEOF
 25325 00005524 5B                              POP     BX
 25326 00005525 73F1                            JAE     short RET12
 25327 00005527 89FB                            MOV     BX,DI
 25328 00005529 EBEE                            JMP     short GETEOF
 25329                                  
 25330                                  ;============================================================================
 25331                                  ; FCB.ASM, MSDOS 6.0, 1991
 25332                                  ;============================================================================
 25333                                  ; 30/07/2018 - Retro DOS v3.0
 25334                                  
 25335                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 25336                                  ;	NAME	FCB
 25337                                  
 25338                                  ;**	FCB.ASM -  Low level routines for parsing names into FCBs and analyzing
 25339                                  ;		   filename characters
 25340                                  ;
 25341                                  ;	MakeFcb
 25342                                  ;	NameTrans
 25343                                  ;	PATHCHRCMP
 25344                                  ;	GetLet
 25345                                  ;	UCase
 25346                                  ;	GetLet3
 25347                                  ;	GetCharType
 25348                                  ;	TESTKANJ
 25349                                  ;	NORMSCAN
 25350                                  ;	DELIM
 25351                                  ;
 25352                                  ;	Revision history:
 25353                                  ;
 25354                                  ;		A000  version 4.00  Jan. 1988
 25355                                  ;	
 25356                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 25357                                  
 25358                                  TableLook	EQU -1
 25359                                  
 25360                                  SCANSEPARATOR	EQU	1
 25361                                  DRVBIT		EQU	2
 25362                                  NAMBIT		EQU	4
 25363                                  EXTBIT		EQU	8
 25364                                  
 25365                                  ;
 25366                                  ;----------------------------------------------------------------------------
 25367                                  ;
 25368                                  ; Procedure : MakeFcb
 25369                                  ;
 25370                                  ;----------------------------------------------------------------------------
 25371                                  ;
 25372                                  
 25373                                  MAKEFCB:
 25374                                  ;hkn; SS override
 25375 0000552B 36C606[FA02]00          	MOV	BYTE [SS:SpaceFlag],0
 25376 00005531 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 25377                                  	;test	al,2
 25378 00005533 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 25379 00005535 7504                    	JNZ	short DEFDRV
 25380 00005537 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 25381                                  DEFDRV:
 25382 0000553B 47                      	INC	DI
 25383 0000553C B90800                  	MOV	CX,8
 25384                                  	;test	al,4
 25385 0000553F A804                    	test	AL,NAMBIT	; Use current name fields as default?
 25386 00005541 93                      	XCHG	AX,BX		; Save bits in BX
 25387 00005542 B020                    	MOV	AL," "
 25388 00005544 7404                    	JZ	short FILLB	; If not, go fill with blanks
 25389 00005546 01CF                    	ADD	DI,CX
 25390 00005548 31C9                    	XOR	CX,CX		; Don't fill any
 25391                                  FILLB:
 25392 0000554A F3AA                    	REP	STOSB
 25393 0000554C B103                    	MOV	CL,3
 25394 0000554E F6C308                  	test	BL,EXTBIT	; Use current extension as default
 25395 00005551 7404                    	JZ	short FILLB2
 25396 00005553 01CF                    	ADD	DI,CX
 25397 00005555 31C9                    	XOR	CX,CX
 25398                                  FILLB2:
 25399 00005557 F3AA                    	REP	STOSB
 25400 00005559 91                      	XCHG	AX,CX		; Put zero in AX
 25401 0000555A AB                      	STOSW
 25402 0000555B AB                      	STOSW			; Initialize two words after to zero
 25403 0000555C 83EF10                  	SUB	DI,16		; Point back at start
 25404                                  	;test	bl,1
 25405 0000555F F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 25406 00005562 7409                    	JZ	short SKPSPC
 25407 00005564 E87300                  	CALL	SCANB		; Peel off blanks and tabs
 25408 00005567 E8CA00                  	CALL	DELIM		; Is it a one-time-only delimiter?
 25409 0000556A 7504                    	JNZ	short NOSCAN
 25410 0000556C 46                      	INC	SI		; Skip over the delimiter
 25411                                  SKPSPC:
 25412 0000556D E86A00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 25413                                  NOSCAN:
 25414 00005570 E89C00                  	CALL	GETLET
 25415 00005573 7616                    	JBE	short NODRV	; Quit if termination character
 25416 00005575 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 25417 00005578 7511                    	JNZ	short NODRV
 25418 0000557A 46                      	INC	SI		; Skip over colon
 25419 0000557B 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 25420 0000557D 7607                    	JBE	short BADDRV	; Drive letter out of range
 25421                                  
 25422 0000557F 50                      	PUSH	AX
 25423 00005580 E8DB13                  	call	GetVisDrv
 25424 00005583 58                      	POP	AX
 25425 00005584 7302                    	JNC	short HAVDRV
 25426                                  
 25427                                  	; MSDOS 6.0
 25428                                  ;hkn; SS override
 25429                                  	;CMP	byte [SS:DrvErr],error_not_DOS_disk
 25430                                  	;				; if not FAT drive ;AN000;
 25431                                  	;JZ	short HAVDRV		; assume ok	   ;AN000;
 25432                                  BADDRV:
 25433 00005586 B2FF                    	MOV	DL,-1
 25434                                  HAVDRV:
 25435 00005588 AA                      	STOSB			; Put drive specifier in first byte
 25436 00005589 46                      	INC	SI
 25437 0000558A 4F                      	DEC	DI		; Counteract next two instructions
 25438                                  NODRV:
 25439 0000558B 4E                      	DEC	SI		; Back up
 25440 0000558C 47                      	INC	DI		; Skip drive byte
 25441                                  
 25442                                  	;entry	NORMSCAN
 25443                                  NORMSCAN:
 25444 0000558D B90800                  	MOV	CX,8
 25445 00005590 E81300                  	CALL	GETWORD 	; Get 8-letter file name
 25446 00005593 803C2E                  	CMP	BYTE [SI],"."
 25447 00005596 7507                    	JNZ	short NODOT
 25448 00005598 46                      	INC	SI		; Skip over dot if present
 25449                                  
 25450                                  	; MSDOS6.0
 25451                                  ;hkn; SS override
 25452                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2	;AN000;
 25453                                  	;JZ	short VOLOK				;AN000;
 25454                                  	;MOVSB			; 2nd byte of DBCS	;AN000;
 25455                                  	;MOV	CX,2					;AN000;
 25456                                  	;JMP	SHORT contvol				;AN000;
 25457                                  ;VOLOK:
 25458 00005599 B90300                  	MOV	CX,3		; Get 3-letter extension
 25459                                  contvol:
 25460 0000559C E80D00                  	CALL	MUSTGETWORD
 25461                                  NODOT:
 25462 0000559F 88D0                    	MOV	AL,DL
 25463                                  
 25464                                  	; MSDOS 6.0
 25465                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 25466                                  
 25467 000055A1 C3                      	retn
 25468                                  
 25469                                  NONAM:
 25470 000055A2 01CF                    	ADD	DI,CX
 25471 000055A4 4E                      	DEC	SI
 25472 000055A5 C3                      	retn
 25473                                  
 25474                                  GETWORD:
 25475 000055A6 E86600                  	CALL	GETLET		
 25476 000055A9 76F7                    	JBE	short NONAM	; Exit if invalid character
 25477 000055AB 4E                      	DEC	SI
 25478                                  
 25479                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 25480                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 25481                                  
 25482                                  MUSTGETWORD:
 25483 000055AC E86000                  	CALL	GETLET
 25484                                  
 25485                                  ;	If spaceFlag is set then we allow spaces in a pathname
 25486                                  
 25487                                  ;IF NOT TABLELOOK
 25488 000055AF 7223                    	JB	short FILLNAM
 25489                                  ;ENDIF
 25490 000055B1 750C                    	JNZ	short MustCheckCX
 25491                                  
 25492                                  ;hkn; SS override
 25493 000055B3 36F606[FA02]FF          	test	BYTE [SS:SpaceFlag],0FFh
 25494 000055B9 7419                    	JZ	short FILLNAM
 25495 000055BB 3C20                    	CMP	AL," "
 25496 000055BD 7515                    	JNZ	short FILLNAM
 25497                                  
 25498                                  MustCheckCX:
 25499 000055BF E3EB                    	JCXZ	MUSTGETWORD
 25500 000055C1 49                      	DEC	CX
 25501 000055C2 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 25502 000055C4 7504                    	JNZ	short NOSTAR
 25503 000055C6 B03F                    	MOV	AL,"?"
 25504 000055C8 F3AA                    	REP	STOSB
 25505                                  NOSTAR:
 25506 000055CA AA                      	STOSB
 25507 000055CB 3C3F                    	CMP	AL,"?"
 25508 000055CD 75DD                    	JNZ	short MUSTGETWORD
 25509 000055CF 80CA01                  	OR	DL,1		; Flag ambiguous file name
 25510 000055D2 EBD8                    	JMP	short MUSTGETWORD
 25511                                  FILLNAM:
 25512 000055D4 B020                    	MOV	AL," "
 25513 000055D6 F3AA                    	REP	STOSB
 25514 000055D8 4E                      	DEC	SI
 25515 000055D9 C3                      	retn
 25516                                  
 25517                                  SCANB:
 25518 000055DA AC                      	LODSB
 25519 000055DB E86200                  	CALL	SPCHK
 25520 000055DE 74FA                    	JZ	short SCANB
 25521 000055E0 4E                      	DEC	SI
 25522                                  scanb_retn:
 25523 000055E1 C3                      	retn
 25524                                  
 25525                                  ;----------------------------------------------------------------------------
 25526                                  ;
 25527                                  ; Procedure Name : NameTrans
 25528                                  ;
 25529                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 25530                                  ; allow spaces in pathnames
 25531                                  ;
 25532                                  ;   Inputs:	DS:SI points to start of path element
 25533                                  ;   Outputs:	Name1 has unpacked name, uppercased
 25534                                  ;		ES = DOSGroup
 25535                                  ;		DS:SI advanced after name
 25536                                  ;   Registers modified: DI,AX,DX,CX
 25537                                  ;
 25538                                  ;----------------------------------------------------------------------------
 25539                                  
 25540                                  NameTrans:
 25541                                  ;hkn; SS override
 25542 000055E2 36C606[FA02]01          	MOV	BYTE [SS:SpaceFlag],1
 25543 000055E8 16                      	push	ss
 25544 000055E9 07                      	pop	es
 25545                                  
 25546                                  ;hkn; NAME1 is in DOSDATA
 25547 000055EA BF[E604]                	MOV	DI,NAME1
 25548 000055ED 57                      	PUSH	DI
 25549 000055EE B82020                  	MOV	AX,'  '
 25550 000055F1 B90500                  	MOV	CX,5
 25551 000055F4 AA                      	STOSB
 25552 000055F5 F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 25553 000055F7 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 25554 000055F9 88C2                    	MOV	DL,AL
 25555 000055FB AA                      	STOSB
 25556 000055FC 5F                      	POP	DI
 25557                                  
 25558 000055FD E88DFF                  	CALL	NORMSCAN
 25559                                  
 25560                                  ;hkn; SS override for NAME1
 25561 00005600 36803E[E604]E5          	CMP	byte [SS:NAME1],0E5H
 25562 00005606 75D9                    	jnz	short scanb_retn
 25563 00005608 36C606[E604]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 25564 0000560E C3                      	retn
 25565                                  
 25566                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 25567                                  
 25568                                  ;----------------------------------------------------------------------------
 25569                                  ;
 25570                                  ; Procedure Names : GetLet, UCase, GetLet3
 25571                                  ;
 25572                                  ; These routines take a character, convert it to upper case, and check
 25573                                  ; for delimiters.  Three different entry points:
 25574                                  ;	GetLet -  DS:[SI] = character to convert
 25575                                  ;	UCase  -  AL = character to convert
 25576                                  ;	GetLet3 - AL = character
 25577                                  ;		  [BX] = translation table to use
 25578                                  ;
 25579                                  ;	Exit (in all cases) : AL = upper case character
 25580                                  ;			      CY set if char is control char other than TAB
 25581                                  ;			      ZF set if char is a delimiter
 25582                                  ;	Uses : AX, flags
 25583                                  ;
 25584                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 25585                                  ; inline version.  Return with carry set is only possible in the inline
 25586                                  ; version.  The table lookup version is the one in use.
 25587                                  ;
 25588                                  ;----------------------------------------------------------------------------
 25589                                  
 25590                                  
 25591                                  ; This entry point has character at [SI]
 25592                                  
 25593                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 25594                                  GETLET:	
 25595 0000560F AC                      	LODSB
 25596                                  
 25597                                  ; This entry point has character in AL
 25598                                  
 25599                                  	;entry	UCase
 25600                                  UCase:	
 25601                                  	; 09/08/2018
 25602                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 25603                                  _UCase:
 25604 00005610 53                      	PUSH	BX
 25605 00005611 BB[0A11]                	MOV	BX,FILE_UCASE_TAB+2
 25606                                  
 25607                                  ; Convert the character in AL to upper case
 25608                                  
 25609                                  gl_0:
 25610 00005614 3C61                    	CMP	AL,"a"
 25611 00005616 720E                    	JB	short gl_2	; Already upper case, go check type
 25612 00005618 3C7A                    	CMP	AL,"z"
 25613 0000561A 7702                    	JA	short gl_1
 25614 0000561C 2C20                    	SUB	AL,20H		; Convert to upper case
 25615                                  
 25616                                  ; Map European character to upper case
 25617                                  
 25618                                  gl_1:
 25619 0000561E 3C80                    	CMP	AL,80H
 25620 00005620 7204                    	JB	short gl_2	; Not EuroChar, go check type
 25621 00005622 2C80                    	SUB	AL,80H		; translate to upper case with this index
 25622                                  
 25623                                  	; M048 - Start 
 25624                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 25625                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 25626                                  	; preserve it.
 25627                                  	;
 25628                                  
 25629                                  	;push	ds
 25630                                  	;push	cs
 25631                                  	;pop	ds
 25632                                  
 25633                                  	; 09/08/2018
 25634                                  	;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 25635 00005624 2ED7                    	CS	XLAT
 25636                                  
 25637                                  	;pop	ds
 25638                                  
 25639                                  	; M048 - End
 25640                                  
 25641                                  ; Now check the type
 25642                                  
 25643                                  ;If TableLook
 25644                                  
 25645                                  gl_2:
 25646 00005626 50                      	PUSH	AX
 25647                                  	
 25648                                  	; MSDOS 6.0
 25649                                  	;CALL	GetCharType	; returns type flags in AL
 25650                                  	
 25651                                  	; MSDOS 3.3
 25652 00005627 BB[1613]                	mov	bx,CharType
 25653                                  	; 09/08/2018
 25654                                  	;xlat	byte [cs:bx]
 25655 0000562A 2ED7                    	cs	xlat	
 25656                                  
 25657                                  	;test	al,1	
 25658 0000562C A801                    	TEST	AL,FCHK 	; test for normal character
 25659 0000562E 58                      	POP	AX
 25660 0000562F 5B                      	POP	BX
 25661 00005630 C3                      	RETN
 25662                                  
 25663                                  ; This entry has character in AL and lookup table in BX
 25664                                  
 25665                                  	; MSDOS 6.0
 25666                                  ;	;entry GetLet3
 25667                                  GETLET3: ; 10/08/2018
 25668 00005631 53                      	PUSH	BX
 25669 00005632 EBE0                    	JMP	short gl_0
 25670                                  
 25671                                  ;ELSE
 25672                                  ;
 25673                                  ;gl_2:
 25674                                  ;	POP	BX
 25675                                  ;	CMP	AL,"."
 25676                                  ;	retz
 25677                                  ;	CMP	AL,'"'
 25678                                  ;	retz
 25679                                  ;	CALL	PATHCHRCMP
 25680                                  ;	retz
 25681                                  ;	CMP	AL,"["
 25682                                  ;	retz
 25683                                  ;	CMP	AL,"]"
 25684                                  ;	retz
 25685                                  ;ENDIF
 25686                                  
 25687                                  ;---------------------------------------------------------------------
 25688                                  ;
 25689                                  ; DELIM - check if character is a delimiter
 25690                                  ;	Entry : AX = character to check
 25691                                  ;	Exit  : ZF set if character is not a delimiter
 25692                                  ;	Uses  : Flags
 25693                                  ;
 25694                                  ;--------------------------------------------------------------------
 25695                                  
 25696                                  	;entry	DELIM
 25697                                  DELIM:
 25698                                  ;IF TableLook
 25699 00005634 50                      	PUSH	AX
 25700                                  
 25701                                  	; MSDOS 6.0
 25702                                  	;CALL	GetCharType
 25703                                  	
 25704                                  	; MSDOS 3.3
 25705 00005635 53                      	push	bx
 25706 00005636 BB[1613]                	mov	bx,CharType
 25707                                  	;09/08/2018
 25708                                  	;xlat	byte [cs:bx]
 25709 00005639 2ED7                    	cs	xlat
 25710 0000563B 5B                      	pop	bx
 25711                                  
 25712                                  	;test	al,2
 25713 0000563C A802                    	TEST	AL,FDELIM
 25714 0000563E 58                      	POP	AX
 25715 0000563F C3                      	RETN
 25716                                  ;ELSE
 25717                                  ;	CMP	AL,":"
 25718                                  ;	retz
 25719                                  ;
 25720                                  ;	CMP	AL,"<"
 25721                                  ;	retz
 25722                                  ;	CMP	AL,"|"
 25723                                  ;	retz
 25724                                  ;	CMP	AL,">"
 25725                                  ;	retz
 25726                                  ;
 25727                                  ;	CMP	AL,"+"
 25728                                  ;	retz
 25729                                  ;	CMP	AL,"="
 25730                                  ;	retz
 25731                                  ;	CMP	AL,";"
 25732                                  ;	retz
 25733                                  ;	CMP	AL,","
 25734                                  ;	retz
 25735                                  ;ENDIF
 25736                                  
 25737                                  ;-------------------------------------------------------------------------
 25738                                  ;
 25739                                  ;  SPCHK - checks to see if a character is a space or equivalent
 25740                                  ;	Entry : AL = character to check
 25741                                  ;	Exit  : ZF set if character is a space
 25742                                  ;	Uses  : flags
 25743                                  ;
 25744                                  ;-------------------------------------------------------------------------
 25745                                  
 25746                                  	;entry SPCHK
 25747                                  SPCHK:
 25748                                  ;IF TableLook
 25749 00005640 50                      	PUSH	AX
 25750                                  
 25751                                  	; MSDOS 6.0
 25752                                  	;CALL	GetCharType
 25753                                  	
 25754                                  	; MSDOS 3.3
 25755 00005641 53                      	push	bx
 25756 00005642 BB[1613]                	mov	bx,CharType
 25757                                  	; 09/08/2018
 25758                                  	;xlat	byte [cs:bx]
 25759 00005645 2ED7                    	cs	xlat
 25760 00005647 5B                      	pop	bx
 25761                                  
 25762                                  	;test	al,4
 25763 00005648 A804                    	TEST	AL,FSPCHK
 25764 0000564A 58                      	POP	AX
 25765 0000564B C3                      	RETN
 25766                                  ;ELSE
 25767                                  ;	CMP	AL,9		; Filter out tabs too
 25768                                  ;	retz
 25769                                  ;; WARNING! " " MUST be the last compare
 25770                                  ;	CMP	AL," "
 25771                                  ;	return
 25772                                  ;ENDIF
 25773                                  
 25774                                  ; MSDOS 6.0
 25775                                  ;-------------------------------------------------------------------------
 25776                                  ;
 25777                                  ;  GetCharType - return flag bits indicating character type
 25778                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 25779                                  ;	defined above at label CharType.
 25780                                  ;
 25781                                  ;	Entry : AL = character to return type flags for
 25782                                  ;	Exit  : AL = type flags
 25783                                  ;	Uses  : AL, flags
 25784                                  ;
 25785                                  ;-------------------------------------------------------------------------
 25786                                  ;
 25787                                  ;GetCharType:
 25788                                  ;	cmp	al,CharType_last	; beyond end of table?
 25789                                  ;	jae	short gct_90		; return standard value
 25790                                  ;
 25791                                  ;	push	bx
 25792                                  ;	mov	bx,CharType		; load lookup table
 25793                                  ;	shr	al,1			; adjust for half-byte table entry size
 25794                                  ;	;xlat	cs:[bx] 		; get flags
 25795                                  ;	cs	xlat	
 25796                                  ;	pop	bx
 25797                                  ;
 25798                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 25799                                  ; we have to shift the flags down to the low nibble
 25800                                  ;
 25801                                  ;	jnc	short gct_80		; carry clear, no shift needed
 25802                                  ;
 25803                                  ;	shr	al,1			; we want high nibble, shift it down
 25804                                  ;	shr	al,1
 25805                                  ;	shr	al,1
 25806                                  ;	shr	al,1
 25807                                  ;
 25808                                  ;gct_80:
 25809                                  ;	and	al,0Fh			; clear the unused nibble
 25810                                  ;	retn
 25811                                  ;
 25812                                  ;gct_90:
 25813                                  ;	mov	al,0Fh			; set all flags
 25814                                  ;	retn
 25815                                  
 25816                                  ;----------------------------------------------------------------------------
 25817                                  ;
 25818                                  ; Procedure : PATHCHRCMP
 25819                                  ;
 25820                                  ;----------------------------------------------------------------------------
 25821                                  
 25822                                  PATHCHRCMP:
 25823 0000564C 3C2F                    	CMP	AL,'/'
 25824 0000564E 7606                    	JBE	short PathRet
 25825 00005650 3C5C                    	CMP	AL,'\'
 25826 00005652 C3                      	retn
 25827                                  GotFor:
 25828 00005653 B05C                    	MOV	AL,'\'
 25829 00005655 C3                      	retn
 25830                                  PathRet:
 25831 00005656 74FB                    	JZ	short GotFor
 25832 00005658 C3                      	retn
 25833                                  
 25834                                  
 25835                                  ;============================================================================
 25836                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 25837                                  ;============================================================================
 25838                                  ; 30/07/2018 - Retro DOS v3.0
 25839                                  
 25840                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 25841                                  
 25842                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 25843                                  
 25844                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 25845                                  ;	NAME	IBMCTRLC
 25846                                  
 25847                                  ;**	Low level routines for detecting special characters on CON input,
 25848                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 25849                                  ;	process termination code, and the INT 0 divide overflow handler.
 25850                                  ;
 25851                                  ;	FATAL
 25852                                  ;	FATAL1
 25853                                  ;	reset_environment
 25854                                  ;	DSKSTATCHK
 25855                                  ;	SPOOLINT
 25856                                  ;	STATCHK
 25857                                  ;	CNTCHAND
 25858                                  ;	DIVOV
 25859                                  ;	CHARHARD
 25860                                  ;	HardErr
 25861                                  ;
 25862                                  ;	Revision history:
 25863                                  ;
 25864                                  ;	    AN000	version 4.0   Jan 1988
 25865                                  ;	    A002	PTM    -- dir >lpt3 hangs
 25866                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 25867                                  ;
 25868                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 25869                                  ;	      flags register. In order to return to user normally DOS used to
 25870                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 25871                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 25872                                  ;
 25873                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 25874                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 25875                                  ;	      charhard.
 25876                                  
 25877                                  
 25878                                  	; MSDOS 6.0
 25879                                  ;		public	LowInt23Addr		
 25880                                  ;LowInt23Addr	LABEL	DWORD
 25881                                  ;	DW	offset DOSDATA:LowInt23, 0
 25882                                  ;
 25883                                  ;		public	LowInt24Addr
 25884                                  ;LowInt24Addr	LABEL	DWORD
 25885                                  ;	DW	offset DOSDATA:LowInt24, 0
 25886                                  ;
 25887                                  ;		public	LowInt28Addr
 25888                                  ;LowInt28Addr	LABEL	DWORD
 25889                                  ;	DW	offset DOSDATA:LowInt28, 0
 25890                                  
 25891                                  ;Break	<Checks for ^C in CON I/O>
 25892                                  
 25893                                  ;---------------------------------------------------------------------------
 25894                                  ;
 25895                                  ; Procedure Name : DSKSTATCHK
 25896                                  ;
 25897                                  ; Check for ^C if only one level in
 25898                                  ;
 25899                                  ;---------------------------------------------------------------------------
 25900                                  
 25901                                          ;procedure   DSKSTATCHK,NEAR ; Check for ^C if only one level in
 25902                                  
 25903                                  DSKSTATCHK:        
 25904                                  	;CMP	BYTE [INDOS],1
 25905 00005659 36803E[CF02]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 25906                                  	;retnz			; Do NOTHING
 25907 0000565F 7535                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 25908                                  
 25909 00005661 51                      	PUSH    CX
 25910 00005662 06                              PUSH    ES
 25911 00005663 53                              PUSH    BX
 25912 00005664 1E                              PUSH    DS
 25913 00005665 56                              PUSH    SI
 25914                                          
 25915                                  	;PUSH	CS
 25916                                          ;POP	ES
 25917                                          ;PUSH	CS
 25918                                          ;POP	DS
 25919                                  
 25920 00005666 8CD3                    	MOV	BX, SS		; SS is DOSDATA. ES:BX must be set up
 25921 00005668 8EC3                    	MOV	ES, BX		; for deviocall2
 25922 0000566A 8EDB                    	MOV	DS, BX
 25923                                  
 25924                                  	; 09/09/2018
 25925 0000566C C606[3C03]05                    MOV     BYTE [DSKSTCOM],DEVRDND
 25926 00005671 C606[3A03]0E                    MOV     BYTE [DSKSTCALL],DRDNDHL
 25927 00005676 C706[3D03]0000          	mov	word [DSKSTST],0
 25928                                  
 25929 0000567C BB[3A03]                        MOV     BX,DSKSTCALL
 25930 0000567F C536[3200]                      LDS     SI,[BCON]
 25931 00005683 E878F8                          CALL	DEVIOCALL2
 25932                                   	; 15/03/2018
 25933                                  	;test	word [ss:DSKSTST],200h
 25934 00005686 36F706[3D03]0002                TEST    WORD [SS:DSKSTST],STBUI
 25935                                  	;JNZ	SHORT ZRET		; No characters available
 25936                                  	; 30/07/2018
 25937 0000568D 7408                    	jz	short _GotCh
 25938                                  ;ZRET:
 25939 0000568F 30C0                            XOR     AL,AL                   ; Set zero
 25940                                  RET36:
 25941 00005691 5E                              POP     SI
 25942 00005692 1F                              POP     DS
 25943 00005693 5B                              POP     BX
 25944 00005694 07                              POP     ES
 25945 00005695 59                              POP     CX
 25946                                  _RET37:
 25947 00005696 C3                              RETN
 25948                                  
 25949                                  _GotCh:
 25950 00005697 36A0[4703]                      MOV     AL,[SS:DSKCHRET]	; SS override
 25951                                  
 25952 0000569B 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 25953 0000569D 75F2                            JNZ     SHORT RET36
 25954 0000569F 36C606[3C03]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 25955 000056A5 36C606[3A03]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 25956 000056AB 36880E[4703]                    MOV     [SS:DSKCHRET],CL
 25957                                  	; 09/09/2018
 25958 000056B0 36C706[3D03]0000        	MOV	word [SS:DSKSTST],0
 25959 000056B7 36C706[4C03]0100        	MOV	word [SS:DSKSTCNT],1
 25960 000056BE E83DF8                  	CALL	DEVIOCALL2              ; Eat the ^C
 25961 000056C1 5E                              POP     SI
 25962 000056C2 1F                              POP     DS
 25963 000056C3 5B                              POP     BX                      ; Clean stack
 25964 000056C4 07                              POP     ES
 25965 000056C5 59                              POP     CX
 25966 000056C6 E9BF00                          JMP	CNTCHAND ; 10/08/2018
 25967                                  
 25968                                  NOSTOP:
 25969                                  	; MSDOS 6.0
 25970                                  	;CMP	AL,"P"-"@"
 25971                                  	;JNZ	short check_next
 25972                                  				    	; SS override
 25973                                  	;CMP	BYTE [SS:Scan_Flag],0	; ALT_Q ?
 25974                                  	;JZ	short INCHKJ		; no
 25975                                  	;retn
 25976                                  ;check_next:
 25977                                  	;;IF	NOT TOGLPRN
 25978                                  	;CMP	AL,"N"-"@"
 25979                                  	;JZ	short INCHKJ
 25980                                  	;;ENDIF
 25981                                  
 25982                                  	;CMP	AL,"C"-"@"
 25983                                  	;JZ	short INCHKJ
 25984                                  ;check_end:
 25985                                  	;retn
 25986                                  
 25987                                  	; MSDOS 3.3
 25988 000056C9 3C10                            CMP     AL,"P"-"@"  ; cmp al,16	
 25989 000056CB 7405                            JZ	short INCHKJ
 25990                                  
 25991                                  	; 15/04/2018
 25992                                          ;;IF	NOT TOGLPRN
 25993                                          ;CMP	AL,"N"-"@"
 25994                                          ;JZ	SHORT INCHKJ
 25995                                          ;;ENDIF
 25996                                  
 25997 000056CD 3C03                            CMP     AL,"C"-"@"  ; cmp al,3	
 25998 000056CF 7401                            JZ	short INCHKJ
 25999 000056D1 C3                      	RETN
 26000                                  
 26001                                  	; 08/09/2018
 26002                                  INCHKJ:	; 10/08/2018
 26003 000056D2 E98F00                  	JMP	INCHK
 26004                                  
 26005                                  ;----------------------------------------------------------------------------
 26006                                  ;
 26007                                  ; Procedure Name : SpoolInt
 26008                                  ;
 26009                                  ; SpoolInt - signal processes that the DOS is truly idle.  We are allowed to
 26010                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 26011                                  ; the middle of an INT 24.
 26012                                  ;
 26013                                  ;----------------------------------------------------------------------------
 26014                                  
 26015                                  SPOOLINT:
 26016 000056D5 9C                              PUSHF
 26017                                  	; 15/03/2018
 26018 000056D6 36803E[0403]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 26019 000056DC 7414                            JZ      SHORT POPFRET
 26020 000056DE 36803E[CE02]00                  CMP     BYTE [SS:ERRORMODE],0
 26021 000056E4 750C                            JNZ     SHORT POPFRET		;No spool ints in error mode
 26022                                  
 26023                                  	; 30/07/2018
 26024                                  
 26025                                  	; Note that we are going to allow an external program to issue system 
 26026                                  	; calls at this time.  We MUST preserve IdleInt across this.
 26027                                  
 26028                                  
 26029 000056E6 36FF36[0403]            	PUSH	WORD [SS:IDLEINT]
 26030                                   
 26031                                  	; MSDOS 6.0
 26032                                  	;cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 26033                                  	;jne	short do_low_int28	; Y: the int must be done from low mem
 26034                                  	;INT	int_spooler		; N: Execute user int 28 handler
 26035                                  	;jmp	short spool_ret_addr
 26036                                  
 26037                                  ;do_low_int28:
 26038                                  	;call	far [SS:LowInt28Addr]
 26039                                  
 26040                                  ;spool_ret_addr:
 26041                                  
 26042 000056EB CD28                            INT     int_spooler		; INT 28h
 26043                                  
 26044 000056ED 368F06[0403]            	POP	WORD [SS:IDLEINT]
 26045                                  
 26046                                  POPFRET:
 26047 000056F2 9D                              POPF
 26048                                  _RET18:  
 26049 000056F3 C3                      	RETN
 26050                                  
 26051                                  ;----------------------------------------------------------------------------
 26052                                  ;
 26053                                  ; Procedure Name : STATCHK
 26054                                  ;
 26055                                  ;----------------------------------------------------------------------------
 26056                                  
 26057                                  STATCHK:
 26058 000056F4 E862FF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 26059                                                                          ; input redirection
 26060 000056F7 53                              PUSH    BX
 26061 000056F8 31DB                            XOR     BX,BX
 26062 000056FA E8C1E9                          CALL	GET_IO_SFT
 26063 000056FD 5B                              POP     BX
 26064 000056FE 72F3                            JC      SHORT _RET18
 26065 00005700 B401                            MOV     AH,1
 26066 00005702 E84CF6                          CALL	IOFUNC
 26067 00005705 74CE                            JZ      SHORT SPOOLINT
 26068 00005707 3C13                            CMP     AL,'S'-'@'
 26069 00005709 75BE                            JNZ     SHORT NOSTOP
 26070                                  
 26071                                  	; MSDOS 6.0			; SS override
 26072                                  	;CMP	BYTE [SS:Scan_Flag],0	; AN000; ALT_R ?
 26073                                  	;JNZ	short check_end		; AN000; yes
 26074                                  
 26075 0000570B 30E4                            XOR     AH,AH
 26076 0000570D E841F6                          CALL	IOFUNC                  ; Eat Cntrl-S
 26077 00005710 EB4B                            JMP     SHORT PAUSOSTRT
 26078                                  
 26079                                  PRINTOFF:
 26080                                  PRINTON:
 26081 00005712 36F616[AC02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 26082                                  
 26083                                  	; 30/07/2018 - Retro DOS v3.0
 26084 00005717 53                      	PUSH	BX
 26085 00005718 BB0400                  	MOV	BX,4
 26086 0000571B E8A0E9                  	call	GET_IO_SFT
 26087 0000571E 5B                      	POP	BX
 26088 0000571F 72D2                    	jc	short _RET18
 26089 00005721 06                      	PUSH	ES
 26090 00005722 57                      	PUSH	DI
 26091 00005723 1E                      	PUSH	DS
 26092 00005724 07                      	POP	ES
 26093 00005725 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 26094                                  	;test	word [es:di+5],800h
 26095 00005727 26F745050008            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 26096 0000572D 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 26097                                  
 26098                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 26099                                  					; See if allowed
 26100 0000572F 50                      	push	ax
 26101 00005730 B82611                  	mov	ax, 1126h
 26102 00005733 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 26103                                  			; Return: CF set on error, AX = error code
 26104                                  			; STACK unchanged
 26105 00005735 58                      	pop	ax
 26106                                  
 26107 00005736 730F                    	JNC	short NORM_PR 		; Echo is OK
 26108                                  
 26109                                  					; SS override
 26110 00005738 36C606[AC02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 26111                                  
 26112                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 26113                                  
 26114 0000573E 50                      	push    ax
 26115 0000573F B82411                  	mov     ax, 1124h
 26116 00005742 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 26117                                  			; ES:DI -> SFT, SS = DOS CS
 26118 00005744 58                      	pop     ax
 26119                                  
 26120 00005745 EB10                    	JMP	SHORT RETP6
 26121                                  
 26122                                  NORM_PR:
 26123 00005747 36803E[AC02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 26124 0000574D 7505                    	JNZ	short PRNOPN
 26125 0000574F E82EF7                  	call	DEV_CLOSE_SFT
 26126 00005752 EB03                    	JMP	SHORT RETP6
 26127                                  
 26128                                  PRNOPN:
 26129 00005754 E822F7                  	call	DEV_OPEN_SFT
 26130                                  RETP6:
 26131 00005757 5F                      	POP	DI
 26132 00005758 07                      	POP	ES
 26133                                  
 26134                                  STATCHK_RETN:
 26135 00005759 C3                              RETN
 26136                                  
 26137                                  PAUSOLP:
 26138 0000575A E878FF                          CALL    SPOOLINT
 26139                                  PAUSOSTRT:
 26140 0000575D B401                            MOV     AH,1
 26141 0000575F E8EFF5                          CALL	IOFUNC
 26142 00005762 74F6                            JZ      SHORT PAUSOLP
 26143                                  INCHK:
 26144 00005764 53                              PUSH    BX
 26145 00005765 31DB                            XOR     BX,BX
 26146 00005767 E854E9                          CALL	GET_IO_SFT
 26147 0000576A 5B                              POP     BX
 26148 0000576B 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 26149 0000576D 30E4                            XOR     AH,AH
 26150 0000576F E8DFF5                          CALL	IOFUNC
 26151                                  	; 30/07/2018
 26152                                  	; MSDOS 3.3
 26153 00005772 3C10                            CMP     AL,'P'-'@' ;cmp al,16
 26154 00005774 750E                            JNZ	SHORT NOPRINT
 26155                                  
 26156 00005776 36803E[8B0F]00          	cmp	byte [SS:SCAN_FLAG],0
 26157 0000577C 7494                    	JZ	SHORT PRINTON	
 26158 0000577E 36C606[8B0F]00          	mov	byte [ss:SCAN_FLAG],0
 26159                                  
 26160                                  	; MSDOS 6.0
 26161                                  	;CMP	AL,"P"-"@"
 26162                                  	;;;;;  7/14/86	ALT_Q key fix
 26163                                  	;JZ	short PRINTON		; no! must be CTRL_P
 26164                                  
 26165                                  NOPRINT:	
 26166                                  	;IF	NOT TOGLPRN
 26167                                  	;CMP	AL,"N"-"@"
 26168                                  	;JZ	short PRINTOFF
 26169                                  	;ENDIF
 26170 00005784 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 26171                                  	;retnz
 26172 00005786 75D1                    	jnz	short STATCHK_RETN
 26173                                  
 26174                                  ;	!! NOTE: FALL THROUGH !!
 26175                                  
 26176                                  ;---------------------------------------------------------------------------
 26177                                  ;
 26178                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 26179                                  ;
 26180                                  ; "^C" and CR/LF is printed.  Then the user registers are restored and the
 26181                                  ; user CTRL-C handler is executed.  At this point the top of the stack has 1)
 26182                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 26183                                  ; processing to continue; 2) the original interrupt return address to the code
 26184                                  ; that performed the function call in the first place.	If the user CTRL-C
 26185                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 26186                                  ; (not IRET) with carry CLEAR.	If carry is SET then an terminate system call
 26187                                  ; is simulated.
 26188                                  ;
 26189                                  ;---------------------------------------------------------------------------
 26190                                  
 26191                                  CNTCHAND:
 26192                                  	; MSDOS 6.0			; SS override
 26193                                  					; AN002; from RAWOUT
 26194                                  	;TEST	word [SS:Dos34_Flag],CTRL_BREAK_FLAG  
 26195                                  	;JNZ	short around_deadlock 	; AN002;
 26196                                  
 26197 00005788 B003                            MOV     AL,3			; Display "^C"
 26198 0000578A E891CC                          CALL	BUFOUT
 26199 0000578D E831CB                          CALL	CRLF
 26200                                  ;around_deadlock:
 26201 00005790 16                              PUSH    SS
 26202 00005791 1F                              POP     DS
 26203 00005792 803E[0303]00                    CMP     BYTE [CONSWAP],0
 26204 00005797 7403                            JZ      SHORT NOSWAP
 26205 00005799 E84EE6                          CALL	SWAPBACK
 26206                                  NOSWAP:
 26207 0000579C FA                      	CLI				; Prepare to play with stack
 26208 0000579D 8E16[2005]              	MOV	SS,[USER_SS]		; User stack now restored
 26209 000057A1 8B26[1E05]              	MOV	SP,[USER_SP]
 26210 000057A5 E83DBE                          CALL	restore_world       ; User registers now restored
 26211                                  
 26212                                  	; 30/07/2018 - Retro DOS v3.0 
 26213                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 26214                                          ; 14/03/2018 - Retro DOS v2.0
 26215 000057A8 2EC606[CF02]00          	MOV     BYTE [CS:INDOS],0	
 26216 000057AE 2EC606[CE02]00                  MOV     BYTE [CS:ERRORMODE],0
 26217 000057B4 2E8926[E002]                    MOV     [CS:ConC_Spsave],SP
 26218 000057B9 F8                      	clc	;30/07/2018
 26219 000057BA CD23                            INT     int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 26220                                  	;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 26221                                  			; Return: return via RETF 2 with CF set
 26222                                  			; DOS will abort program with errorlevel 0
 26223                                  			; else
 26224                                  			; interrupted DOS call continues
 26225                                  
 26226                                  	; 30/07/2018 
 26227                                  
 26228                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 26229                                  
 26230                                  ; The user has returned to us.	The circumstances we allow are:
 26231                                  ;
 26232                                  ;   IRET	We retry the operation by redispatching the system call
 26233                                  ;   CLC/RETF	POP the stack and retry
 26234                                  ;   ... 	Exit the current process with ^C exit
 26235                                  ;
 26236                                  ; User's may RETURN to us and leave interrupts on. 
 26237                                  ; Turn 'em off just to be sure
 26238                                  
 26239 000057BC FA                      	CLI
 26240                                  
 26241 000057BD 2EA3[E602]              	MOV	[CS:USER_IN_AX],ax	; save the AX
 26242 000057C1 9C                      	PUSHF				; and the flags (maybe new call)
 26243 000057C2 58                      	POP	AX
 26244                                  
 26245                                  ; See if the input stack is identical to the output stack
 26246                                  
 26247 000057C3 2E3B26[E002]                    CMP	SP,[CS:ConC_Spsave]
 26248 000057C8 7507                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 26249                                  
 26250                                  ; Repeat the operation by redispatching the system call.
 26251                                  
 26252                                  ctrlc_repeat:
 26253 000057CA 2EA1[E602]                      MOV     AX,[CS:USER_IN_AX]
 26254                                  	;transfer COMMAND           ; Repeat command otherwise
 26255                                  COMMANDJ:
 26256 000057CE E9D9BC                  	JMP	COMMAND
 26257                                  
 26258                                  ; The current SP is NOT the same as the input SP. Presume that he 
 26259                                  ; RETF'd leaving some flags on the stack and examine the input
 26260                                  
 26261                                  ctrlc_try_new:
 26262 000057D1 83C402                  	ADD	SP,2			; pop those flags
 26263                                  	;test	ax,1
 26264 000057D4 A90100                  	TEST	AX,f_Carry		; did he return with carry?
 26265 000057D7 74F1                    	JZ	short ctrlc_repeat	; no carry set, just retry
 26266                                  
 26267                                  	; Well...  time to abort the user.  
 26268                                  	; Signal a ^C exit and use the EXIT system call..
 26269                                  
 26270                                  ctrlc_abort:
 26271                                          ;MOV	AX,(EXIT SHL 8) + 0
 26272 000057D9 B8004C                          MOV	AX, (EXIT*256) + 0  ; 4C00h
 26273 000057DC 2EC606[F902]FF          	mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 26274                                          ;transfer COMMAND	    ; give up by faking $EXIT
 26275                                  	;JMP	SHORT COMMANDJ
 26276 000057E2 E9C5BC                  	JMP	COMMAND
 26277                                  
 26278                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 26279                                  ;----------------------------------------------------------------------------
 26280                                  ;
 26281                                  ; Procedure Name : DIVOV
 26282                                  ;
 26283                                  ; Default handler for division overflow trap
 26284                                  ;
 26285                                  ;----------------------------------------------------------------------------
 26286                                  
 26287                                  DIVOV: 
 26288                                  	; 30/07/2018
 26289                                  	; 07/07/2018 - Retro DOS v3.0
 26290 000057E5 BE[BC12]                	mov	si,DIVMES
 26291 000057E8 2E8B1E[CF12]            	mov	bx,[cs:DivMesLen]
 26292 000057ED 8CC8                    	mov     ax,cs
 26293 000057EF 8ED0                    	mov	ss,ax
 26294 000057F1 BC[0607]                	mov     sp,AUXSTACK
 26295 000057F4 E80200                  	call	RealDivOv
 26296                                  	;call	_outmes ; MSDOS 6.0
 26297 000057F7 EBE0                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 26298                                  
 26299                                  ; 30/07/2018
 26300                                  
 26301                                  ; MSDOS 6.0
 26302                                  ;---------------------------------------------------------------------------
 26303                                  ;
 26304                                  ; Procedure Name : OutMes
 26305                                  ;
 26306                                  ;
 26307                                  ; OutMes: perform message output
 26308                                  ; Inputs:   SS:SI points to message
 26309                                  ;	    BX has message length
 26310                                  ; Outputs:  message to BCON
 26311                                  ;
 26312                                  ;Actually, cs:si points to the message now. The segment address is filled in
 26313                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 26314                                  ;NB. This procedure is called only from DIVOV. -SR
 26315                                  ;
 26316                                  ;---------------------------------------------------------------------------
 26317                                  
 26318                                  ;MSDOS 3.3
 26319                                  ;---------------------------------------------------------------------------
 26320                                  ; RealDivOv: perform actual divide overflow stuff.
 26321                                  ; Inputs:   none
 26322                                  ; Outputs:  message to BCON
 26323                                  ;---------------------------------------------------------------------------
 26324                                  
 26325                                  	; 30/07/2018
 26326                                  	; MSDOS 6.0
 26327                                  ;_OUTMES:
 26328                                  	;MSDOS 3.3
 26329                                  RealDivOv:
 26330                                  	 
 26331                                  	; 07/07/2018 - Retro DOS v3.0
 26332                                          ;Context ES
 26333                                          ;push	ss ; 30/07/2018
 26334 000057F9 0E                      	PUSH	CS			; get ES addressability
 26335 000057FA 07                      	POP	ES
 26336                                          ;Context DS
 26337                                  	;push	ss ; 30/07/2018
 26338 000057FB 0E                      	PUSH	CS			; get DS addressability
 26339 000057FC 1F                      	POP	DS
 26340 000057FD C606[3C03]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 26341 00005802 C606[3A03]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 26342 00005807 C706[3D03]0000                  MOV     WORD [DSKSTST],0
 26343                                  	; BX = [DivMesLen] = 19
 26344 0000580D 891E[4C03]                      MOV     [DSKSTCNT],BX
 26345 00005811 BB[3A03]                        MOV     BX,DSKSTCALL
 26346                                          ;MOV     [DSKCHRET+1],SI	; transfer address (need an EQU)
 26347                                  	; 08/09/2018
 26348 00005814 8936[4803]              	mov	[DEVIOBUF_PTR],si
 26349                                  	; MSDOS 6.0
 26350                                  					; CS is used for string, fill in 
 26351                                  					; segment address 
 26352                                  	;MOV	[DskChRet+3],CS
 26353                                  
 26354 00005818 C536[3200]                      LDS     SI,[BCON]
 26355 0000581C E8DFF6                          CALL	DEVIOCALL2
 26356                                  	; 14/03/2018
 26357                                          ;MOV     WORD [CS:DSKCHRET+1],DEVIOBUF
 26358                                  	; 08/09/2018
 26359 0000581F 2EC706[4803][5E03]      	mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 26360 00005826 2EC706[4C03]0100                MOV     WORD [CS:DSKSTCNT],1
 26361 0000582D C3                              RETN
 26362                                  
 26363                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 26364                                  ;---------------------------------------------------------------------------
 26365                                  ;
 26366                                  ; Procedure Name : CHARHARD
 26367                                  ;
 26368                                  ;
 26369                                  ; Character device error handler
 26370                                  ; Same function as HARDERR
 26371                                  ;
 26372                                  ;---------------------------------------------------------------------------
 26373                                  
 26374                                  CHARHARD:
 26375                                  	; 30/07/2018
 26376                                  	; 08/07/2018 - Retro DOS v3.0
 26377                                  
 26378                                  	; MSDOS 6.0
 26379                                  ;		   			; M024 - start
 26380                                  ;	cmp	byte ptr [ERRORMODE], 0	; Q: are we in the middle of int 24
 26381                                  ;	jne	@f			; Y: allow fail
 26382                                  ;
 26383                                  ;	OR	AH, Allowed_RETRY	; assume ctrl p
 26384                                  ;
 26385                                  ;	test	byte ptr [PFLAG], -1	; Q: has ctrl p been pressed
 26386                                  ;	jnz	ctrlp			; Y: 
 26387                                  ;@@:					; M024 - end
 26388                                  
 26389                                  ; Character device error handler
 26390                                  ; Same function as HARDERR
 26391                                  
 26392                                  	;or	ah,38h
 26393 0000582E 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 26394                                  ;ctrlp:			; SS override for Allowed and EXITHOLD
 26395 00005831 368826[F702]            	mov	[SS:ALLOWED],ah
 26396                                  
 26397                                  	; 15/03/2018
 26398 00005836 368C06[1C05]                    MOV     [SS:EXITHOLD+2],ES
 26399 0000583B 36892E[1A05]                    MOV     [SS:EXITHOLD],BP
 26400 00005840 56                              PUSH    SI
 26401                                  	;and	di,0FFh
 26402 00005841 81E7FF00                        AND     DI,STECODE
 26403 00005845 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 26404 00005847 E86400                          CALL    FATALC
 26405 0000584A 5E                              POP     SI
 26406                                  	;return
 26407 0000584B C3                              RETN
 26408                                  
 26409                                  ;---------------------------------------------------------------------------
 26410                                  ;
 26411                                  ; Procedure Name : HardErr
 26412                                  ;
 26413                                  ; Hard disk error handler. Entry conditions:
 26414                                  ;	DS:BX = Original disk transfer address
 26415                                  ;	DX = Original logical sector number
 26416                                  ;	CX = Number of sectors to go (first one gave the error)
 26417                                  ;	AX = Hardware error code
 26418                                  ;	DI = Original sector transfer count	
 26419                                  ;	ES:BP = Base of drive parameters
 26420                                  ;	[READOP] = 0 for read, 1 for write
 26421                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 26422                                  ; Output:
 26423                                  ;	[FAILERR] will be set if user responded FAIL
 26424                                  ;
 26425                                  ;--------------------------------------------------------------------------
 26426                                  
 26427                                  HARDERR:
 26428                                  	; 30/07/2018
 26429                                  	; 08/07/2018 - Retro DOS v3.0
 26430 0000584C 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 26431                                          ;and	di,0FFh
 26432 0000584D 81E7FF00                	AND     DI,STECODE              ; And off status bits
 26433                                          ;CMP	DI,WRECODE		; Write Protect Error?
 26434                                  	;cmp	di,0
 26435 00005851 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 26436 00005854 750A                            JNZ     short NOSETWRPERR
 26437 00005856 50                              PUSH    AX
 26438                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 26439                                          ;MOV	AL,[ES:BP+0]
 26440 00005857 268A4600                	mov	al,[ES:BP]
 26441                                          	; 15/03/2018
 26442 0000585B 36A2[D002]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 26443 0000585F 58                              POP     AX
 26444                                  NOSETWRPERR:
 26445 00005860 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 26446 00005862 01C2                            ADD     DX,AX                   ; First sector number to retry
 26447 00005864 52                              PUSH    DX
 26448                                  	; 08/07/2018
 26449                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 26450 00005865 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 26451 00005869 5A                              POP     DX
 26452 0000586A 01C3                            ADD     BX,AX                   ; First address for retry
 26453 0000586C 30E4                            XOR     AH,AH                   ; Flag disk section in error
 26454                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 26455 0000586E 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 26456 00005872 721A                            JB      SHORT ERRINT
 26457 00005874 FEC4                            INC     AH                      ; Flag for FAT
 26458                                          ;CMP	DX,[ES:BP+10H] 		; In FAT?
 26459 00005876 263B5610                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]   
 26460 0000587A 7308                    	JAE	short TESTDIR 		; No
 26461                                  		 ; Err in FAT must force recomp of freespace
 26462                                  	;mov	word[ES:BP+1Eh],-1
 26463 0000587C 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 26464 00005882 EB0A                    	JMP	SHORT ERRINT
 26465                                  TESTDIR:
 26466 00005884 FEC4                            INC     AH
 26467                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 26468 00005886 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 26469 0000588A 7202                            JB      SHORT ERRINT
 26470 0000588C FEC4                            INC     AH                      ; Must be in data area
 26471                                  ERRINT:
 26472 0000588E D0E4                            SHL     AH,1                    ; Make room for read/write bit
 26473 00005890 360A26[1005]                    OR      AH,[SS:READOP] ; 15/03/2018
 26474                                  
 26475                                  	; 15/08/2018
 26476                                  					; SS override for allowed and EXITHOLD
 26477 00005895 360A26[F702]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 26478                                  
 26479                                          ;entry   FATAL
 26480                                  FATAL:
 26481                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 26482                                          ;MOV	AL,[ES:BP+0]		; Get drive number
 26483 0000589A 268A4600                	MOV	AL,[ES:BP]        
 26484                                  
 26485                                  	;entry   FATAL1
 26486                                  FATAL1:  
 26487                                  	; 15/03/2018      
 26488 0000589E 368C06[1C05]            	MOV     [SS:EXITHOLD+2],ES
 26489 000058A3 36892E[1A05]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 26490                                  	;LES	SI,[ES:BP+12H]
 26491 000058A8 26C47612                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 26492 000058AC 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 26493                                  
 26494                                  	; DI has the INT-24-style extended error. We now map the error code 
 26495                                  	; for this into the normalized get extended error set by using the 
 26496                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 26497                                  	; the device returned codes and leave all others beyond the look up 
 26498                                  	; table alone.
 26499                                  
 26500                                  	; 08/07/2018 - Retro DOS v3.0
 26501                                  FATALC:
 26502 000058AE E86701                  	call	SET_I24_EXTENDED_ERROR
 26503                                  	;cmp	di,0Ch
 26504 000058B1 83FF0C                  	CMP	DI,error_I24_gen_failure
 26505 000058B4 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 26506 000058B6 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 26507                                  					;  Only come via GetExtendedError
 26508                                  ;**
 26509                                  ;
 26510                                  ; Entry point used by REDIRector on Network I 24 errors.
 26511                                  ;
 26512                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 26513                                  ;
 26514                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 26515                                  ;     EXITHOLD set for restore of ES:BP.
 26516                                  ;
 26517                                  	;entry	NET_I24_ENTRY
 26518                                  NET_I24_ENTRY:
 26519                                  GOT_RIGHT_CODE:
 26520 000058B9 36803E[CE02]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 26521 000058BF 7404                            JZ	SHORT NoSetFail
 26522 000058C1 B003                    	MOV	AL,3
 26523 000058C3 EB51                    	JMP	short FailRet
 26524                                  NoSetFail:
 26525 000058C5 368926[2205]                    MOV     [SS:CONTSTK],SP		; SS override
 26526 000058CA 16                              PUSH	SS
 26527 000058CB 07                              POP	ES
 26528                                      
 26529                                  	; Wango!!! We may need to free some user state info... In 
 26530                                  	; particular, we may have locked down a JFN for a user and he may 
 26531                                  	; NEVER return to us. Thus,we need to free it here and then 
 26532                                  	; reallocate it when we come back.
 26533                                  
 26534 000058CC 36833E[4205]FF          	CMP	word [SS:SFN],-1
 26535 000058D2 740C                    	JZ	short _NoFree
 26536 000058D4 1E                      	push	ds
 26537 000058D5 56                      	push	si
 26538 000058D6 36C536[4605]            	LDS	SI,[SS:PJFN]
 26539 000058DB C604FF                  	MOV	BYTE [SI],0FFH
 26540 000058DE 5E                      	pop	si
 26541 000058DF 1F                      	pop	ds
 26542                                  
 26543                                  _NoFree:
 26544 000058E0 FA                      	CLI
 26545                                  					; Prepare to play with stack
 26546 000058E1 36FE06[CE02]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 26547 000058E6 36FE0E[CF02]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 26548 000058EB 368E16[2005]                    MOV     SS,[SS:USER_SS]
 26549 000058F0 268B26[1E05]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 26550                                  	;int	24h	
 26551 000058F5 CD24                            INT     int_fatal_abort         ; Fatal error interrupt vector, must preserve ES
 26552 000058F7 268926[1E05]                    MOV     [ES:USER_SP],SP         ; restore our stack
 26553 000058FC 268C16[2005]                    MOV     [ES:USER_SS],SS
 26554 00005901 8CC5                            MOV     BP,ES
 26555 00005903 8ED5                            MOV     SS,BP
 26556 00005905 368B26[2205]                    MOV     SP,[SS:CONTSTK]
 26557 0000590A 36FE06[CF02]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 26558 0000590F 36C606[CE02]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 26559 00005915 FB                              STI
 26560                                  FailRet:
 26561 00005916 36C42E[1A05]                    LES     BP,[SS:EXITHOLD]
 26562                                  	
 26563                                  	; 08/07/2018
 26564                                  
 26565                                  	; Triage the user's reply.
 26566                                  
 26567 0000591B 3C01                    	CMP	AL,1
 26568 0000591D 7235                    	JB	short CheckIgnore	; 0 => ignore
 26569 0000591F 743D                    	JZ	short CheckRetry	; 1 => retry
 26570 00005921 3C03                    	CMP	AL,3			; 3 => fail
 26571 00005923 7543                    	JNZ	short DoAbort 		; 2, invalid => abort
 26572                                  
 26573                                  	; The reply was fail.  See if we are allowed to fail.
 26574                                  
 26575                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 26576                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 26577                                  	;test	byte [ss:ALLOWED],8
 26578 00005925 36F606[F702]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 26579 0000592B 743B                    	jz	short DoAbort	; No, do abort
 26580                                  DoFail:
 26581 0000592D B003                    	MOV	AL,3		; just in case...
 26582                                  				; AN000;EO. I24 error disabled
 26583                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 26584                                  	;test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 26585                                  	;jnz	short Cleanup 		; AN000;EO. no
 26586                                  	
 26587 0000592F 36FE06[F602]            	inc	byte [SS:FAILERR]	; Tell everybody
 26588                                  
 26589                                  CleanUp:
 26590 00005934 36C606[D002]FF          	MOV	byte [SS:WPERR],-1
 26591 0000593A 36833E[4205]FF          	CMP	word [SS:SFN],-1
 26592                                  	;jnz	short CleanUp2
 26593                                  	;retn
 26594 00005940 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 26595                                  ;CleanUp2:
 26596 00005942 1E                      	push	ds
 26597 00005943 56                      	push	si
 26598 00005944 50                      	push	ax
 26599 00005945 36A1[4205]              	MOV	AX,[ss:SFN]
 26600 00005949 36C536[4605]            	LDS	SI,[ss:PJFN]
 26601 0000594E 8804                    	MOV	[SI],AL
 26602 00005950 58                      	pop	ax
 26603 00005951 5E                      	pop	si
 26604 00005952 1F                      	pop	ds
 26605                                  Cleanup_retn:
 26606 00005953 C3                      	retn
 26607                                  
 26608                                  	; The reply was IGNORE. See if we are allowed to ignore.
 26609                                  
 26610                                  CheckIgnore:
 26611                                  	;test	byte [ss:ALLOWED],20h
 26612 00005954 36F606[F702]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 26613 0000595A 74D1                    	jz	short DoFail			 ; No, do fail
 26614 0000595C EBD6                    	jmp	short CleanUp
 26615                                  
 26616                                  	; The reply was RETRY. See if we are allowed to retry.
 26617                                  
 26618                                  CheckRetry:
 26619                                  	;test	byte [ss:ALLOWED],10h
 26620 0000595E 36F606[F702]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 26621 00005964 74C7                    	jz	short DoFail			; No, do fail
 26622 00005966 EBCC                    	JMP	short CleanUp
 26623                                  
 26624                                  	; The reply was ABORT.
 26625                                  
 26626                                  DoAbort:
 26627 00005968 16                      	push	ss
 26628 00005969 1F                      	pop	ds
 26629                                  
 26630 0000596A 803E[0303]00            	CMP	byte [CONSWAP],0
 26631 0000596F 7403                    	JZ	short NOSWAP2
 26632 00005971 E876E4                  	call	SWAPBACK
 26633                                  NOSWAP2:
 26634                                  	; See if we are to truly abort. If we are in the process of aborting, 
 26635                                  	; turn this abort into a fail.
 26636                                  
 26637                                  	;test	byte [fAborting],0FFh
 26638                                  	;jnz	short DoFail
 26639                                  
 26640 00005974 803E[0503]00            	cmp	byte [fAborting],0
 26641 00005979 75B2                    	JNZ	short DoFail
 26642                                  
 26643                                  	; Set return code
 26644                                  
 26645 0000597B C606[1705]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR
 26646 00005980 30C0                    	XOR	AL,AL
 26647                                  
 26648                                  	; we are truly aborting the process. Go restore information from 
 26649                                  	; the PDB as necessary.
 26650                                  
 26651 00005982 E93B0B                  	jmp	exit_inner
 26652                                  
 26653                                  ;**
 26654                                  ;
 26655                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 26656                                  ; different, then an old-style return is performed. If they are the same,
 26657                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 26658                                  ; the source of the terminate addresses.
 26659                                  ;
 26660                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 26661                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 26662                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 26663                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 26664                                  ; flag that will indicate that if any abort code is seen, we just continue the
 26665                                  ; operation. In essence, we dis-allow the abort response.
 26666                                  ;
 26667                                  ; output:   none.
 26668                                  ;
 26669                                  	;entry	reset_environment
 26670                                  	
 26671                                  reset_environment:
 26672                                  	; 30/07/2018 - Retro DOS v3.0
 26673                                  	; IBMDOS.COM (MSDOS3.3) - Offset 588Ah 
 26674                                  
 26675                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 26676                                  
 26677 00005985 1E                      	PUSH	DS			; save PDB of process
 26678                                  
 26679                                  	; There are no critical sections in force. Although we may enter 
 26680                                  	; here with critical sections locked down, they are no longer 
 26681                                  	; relevant. We may safely free all allocated resources.
 26682                                  
 26683 00005986 B482                    	MOV	AH,82h
 26684                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 26685                                  	;int	2Ah 	
 26686 00005988 CD2A                    	INT	int_IBM
 26687                                  
 26688                                  					; SS override
 26689 0000598A 36C606[0503]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 26690                                  
 26691                                  					; DOS 4.00 doesn't need it
 26692                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 26693                                  					; Allow REDIR to clear some stuff
 26694                                  					; On process exit.
 26695 00005990 B82211                  	mov     ax, 1122h
 26696 00005993 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 26697                                  			; SS = DOS CS
 26698                                  	;mov	al,22h	
 26699 00005995 B022                    	MOV	AL,int_terminate
 26700 00005997 E8C7C2                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 26701                                  
 26702 0000599A 59                      	POP	CX			; get ThisPDB
 26703 0000599B 06                      	push	es
 26704 0000599C 53                      	push	bx			; save return address
 26705                                  
 26706 0000599D 368B1E[DE02]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 26707 000059A2 8EDB                    	MOV	DS,BX
 26708 000059A4 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 26709                                  
 26710                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 26711                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 26712                                  	; is not Exit_keep_process
 26713                                  	
 26714 000059A7 39D8                    	CMP	AX,BX
 26715 000059A9 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 26716 000059AB 39CB                    	CMP	BX,CX
 26717 000059AD 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 26718 000059AF 50                      	PUSH	AX			; save parent
 26719                                  
 26720                                  					; SS override
 26721                                  	;cmp	byte [SS:EXIT_TYPE],3
 26722 000059B0 36803E[1705]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 26723 000059B6 7406                    	JZ	short reset_to_parent 	; keeping this process
 26724                                  
 26725                                  	; We are truly removing a process. Free all allocation blocks 
 26726                                  	; belonging to this PDB
 26727                                  
 26728                                  	;invoke	arena_free_process
 26729 000059B8 E83C0B                  	call	arena_free_process
 26730                                  
 26731                                  	; Kill off remainder of this process. Close file handles and signal 
 26732                                  	; to relevant network folks that this process is dead. Remember that 
 26733                                  	; CurrentPDB is STILL the current process!
 26734                                  
 26735                                  	;invoke	DOS_ABORT
 26736 000059BB E897E0                  	call	DOS_ABORT
 26737                                  
 26738                                  reset_to_parent:
 26739                                  					; SS override
 26740 000059BE 368F06[DE02]            	POP	word [SS:CurrentPDB]	; set up process as parent
 26741                                  
 26742                                  reset_return:				; come here for normal return
 26743                                  	;Context DS			; DS is used to refer to DOSDATA  
 26744 000059C3 16                      	push	ss
 26745 000059C4 1F                      	pop	ds	
 26746                                  
 26747 000059C5 B0FF                    	MOV	AL,-1
 26748                                  
 26749                                  	; make sure that everything is clean In this case ignore any errors, 
 26750                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 26751                                  
 26752                                  	;EnterCrit critDisk
 26753 000059C7 E8A2C6                  	call	EcritDisk
 26754                                  	;invoke	FLUSHBUF
 26755 000059CA E86405                  	call	FLUSHBUF
 26756                                  	;LeaveCrit critDisk
 26757 000059CD E8A4C6                  	call	LcritDisk
 26758                                  
 26759                                  	; Decrement open ref. count if we had done a virtual open earlier.
 26760                                  
 26761 000059D0 E8C3F8                  	call	CHECK_VIRT_OPEN
 26762 000059D3 FA                      	CLI
 26763 000059D4 C606[CF02]00            	MOV	BYTE [INDOS],0		; Go to known state
 26764 000059D9 C606[D002]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 26765 000059DE C606[0503]00            	MOV	byte [fAborting],0	; let aborts occur
 26766 000059E3 8F06[1A05]              	POP	WORD [EXITHOLD]
 26767 000059E7 8F06[1C05]              	POP	WORD [EXITHOLD+2]
 26768                                  
 26769                                  	; Snake into multitasking... Get stack from CurrentPDB person
 26770                                  
 26771 000059EB 8E1E[DE02]              	MOV	DS,[CurrentPDB]
 26772 000059EF 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 26773 000059F3 8B262E00                	MOV	SP,[PDB.USER_STACK]
 26774                                  
 26775 000059F7 E8EBBB                  	call	restore_world
 26776                                  
 26777                                  	; MSDOS 6.0
 26778                                  	;push	ax			; set up ds, but save ds in TEMPSEG 
 26779                                  	;mov	ax, ds			; and not on stack.
 26780                                  	;getdseg <ds>			; ds -> dosdata
 26781                                  	;mov	TempSeg, ax
 26782                                  	;pop	ax
 26783                                  					; set up ds to DOSDATA
 26784 000059FA 2EA3[1E05]              	MOV	[CS:USER_SP],AX
 26785                                  
 26786 000059FE 58                      	POP	AX			; suck off CS:IP of interrupt...
 26787 000059FF 58                      	POP	AX
 26788 00005A00 58                      	POP	AX
 26789                                  
 26790                                  ; M011 : BEGIN
 26791                                  
 26792                                  	; MSDOS 3.3
 26793                                  ;	MOV	AX,0F202h	; STI
 26794                                  
 26795                                  	; MSDOS 6.0
 26796 00005A01 9F                      	LAHF
 26797 00005A02 86E0                    	XCHG	AH, AL
 26798 00005A04 2402                    	AND	AL, 02
 26799 00005A06 B4F2                    	MOV	AH, 0F2h
 26800                                  
 26801                                  ; M011 : END
 26802                                  
 26803                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26804 00005A08 50                      	PUSH	AX
 26805                                   
 26806 00005A09 2EFF36[1C05]            	PUSH	word [CS:EXITHOLD+2]
 26807 00005A0E 2EFF36[1A05]            	PUSH	word [CS:EXITHOLD]
 26808                                  
 26809 00005A13 2EA1[1E05]              	MOV	AX,[CS:USER_SP]
 26810                                  
 26811                                  	; MSDOS 6.0
 26812                                  	;mov	ds,TempSeg	; restore ds
 26813                                  
 26814 00005A17 CF                      	IRET			; Long return back to user terminate address
 26815                                  
 26816                                  ;---------------------------------------------------------------------------
 26817                                  ;
 26818                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 26819                                  ;
 26820                                  ; This routine handles extended error codes.
 26821                                  ; Input : DI = error code from device
 26822                                  ; Output: All EXTERR fields are set
 26823                                  ;
 26824                                  ;--------------------------------------------------------------------------
 26825                                  
 26826                                  SET_I24_EXTENDED_ERROR:
 26827 00005A18 50                      	PUSH	AX
 26828                                  					; ErrMap24End is in DOSDATA
 26829 00005A19 B8[030E]                	MOV	AX,ErrMap24End
 26830 00005A1C 2D[F30D]                	SUB	AX,ErrMap24
 26831                                  					; Change to dosdata to access 
 26832                                  					; ErrMap24 and EXTERR -SR
 26833                                  	; MSDOS 6.0
 26834                                  	;push	ds
 26835                                  	;getdseg <ds>			; ds ->dosdata
 26836                                  
 26837                                  	; AX is the index of the first unavailable error. Do not translate 
 26838                                  	; if greater or equal to AX.
 26839                                  
 26840 00005A1F 39C7                    	CMP	DI,AX
 26841 00005A21 89F8                    	MOV	AX,DI
 26842 00005A23 7307                    	JAE	short NoTrans
 26843                                  
 26844 00005A25 2E8A85[F30D]            	MOV	AL,[CS:DI+ErrMap24]
 26845 00005A2A 30E4                    	XOR	AH,AH
 26846                                  NoTrans:
 26847 00005A2C 2EA3[D202]              	MOV	[CS:EXTERR],AX
 26848                                  	;pop	ds
 26849                                  	;assume	ds:nothing
 26850 00005A30 58                      	POP	AX
 26851                                  
 26852                                  	; Now Extended error is set correctly. Translate it to get correct 
 26853                                  	; error locus class and recommended action.
 26854                                  
 26855 00005A31 56                      	PUSH	SI
 26856                                  					; ERR_TABLE_24 is in DOSCODE 
 26857 00005A32 BE[A30D]                	MOV	SI,ERR_TABLE_24
 26858 00005A35 E80BBD                  	call	CAL_LK			; Set other extended error fields
 26859 00005A38 5E                      	POP	SI
 26860 00005A39 C3                      	retn
 26861                                  
 26862                                  ;============================================================================
 26863                                  ; FAT.ASM, MSDOS 6.0, 1991
 26864                                  ;============================================================================
 26865                                  ; 30/07/2018 - Retro DOS v3.0
 26866                                  
 26867                                  ;	TITLE	FAT - FAT maintenance routines
 26868                                  ;	NAME	FAT
 26869                                  
 26870                                  ;**	FAT.ASM
 26871                                  ;
 26872                                  ;	Low level local device routines for performing disk change sequence,
 26873                                  ;	setting cluster validity, and manipulating the FAT
 26874                                  ;
 26875                                  ;	IsEof
 26876                                  ;	UNPACK
 26877                                  ;	PACK
 26878                                  ;	MAPCLUSTER
 26879                                  ;	FATREAD_SFT
 26880                                  ;	FATREAD_CDS
 26881                                  ;	FAT_operation
 26882                                  ;
 26883                                  ;	Revision history:
 26884                                  ;
 26885                                  ;	  AN000  version Jan. 1988
 26886                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 26887                                  ;
 26888                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 26889                                  ;	       from CL0FATENTRY rather than disk.
 26890                                  ;
 26891                                  
 26892                                  ;Break <IsEOF - check the quantity in BX for EOF>
 26893                                  ;----------------------------------------------------------------------------
 26894                                  ;
 26895                                  ; Procedure Name : IsEOF
 26896                                  ;
 26897                                  ; IsEOF - check the fat value in BX for eof.
 26898                                  ;
 26899                                  ;   Inputs:	ES:BP point to DPB
 26900                                  ;		BX has fat value
 26901                                  ;   Outputs:	JAE eof
 26902                                  ;   Registers modified: none
 26903                                  ;
 26904                                  ;---------------------------------------------------------------------------
 26905                                  
 26906                                  IsEOF:
 26907                                  	;cmp	word [es:bp+0Dh],0FF6h
 26908 00005A3A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 26909 00005A40 730B                    	JAE	short EOF16			; yes, check for eof there
 26910                                  
 26911                                  ;J.K. 8/27/86
 26912                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 26913                                  ;of any media that has "F0"(Other) as a MediaByte.
 26914                                  ;Hopely, this does not create any side effect for those who may use any value
 26915                                  ;other than "FF8-FFF" as an EOF for their own file.
 26916                                  
 26917 00005A42 81FBF00F                	cmp	bx,0FF0h
 26918 00005A46 7404                    	je	short IsEOF_other
 26919                                  
 26920 00005A48 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 26921                                  IsEOF_other:
 26922 00005A4C C3                      	retn
 26923                                  EOF16:
 26924 00005A4D 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 26925 00005A50 C3                      	retn
 26926                                  
 26927                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 26928                                  ;---------------------------------------------------------------------------
 26929                                  ;
 26930                                  ; Procedur Name : UNPACK
 26931                                  ;
 26932                                  ; Inputs:
 26933                                  ;	BX = Cluster number (may be full 16-bit quantity)
 26934                                  ;	ES:BP = Base of drive parameters
 26935                                  ; Outputs:
 26936                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 26937                                  ;	Zero set means DI=0 (free cluster)
 26938                                  ;	Carry set means error (currently user FAILed to I 24)
 26939                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 26940                                  ;
 26941                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 26942                                  ;
 26943                                  ;----------------------------------------------------------------------------
 26944                                  
 26945                                  UNPACK:
 26946                                  	; MSDOS 6.0			; M014 - Start
 26947                                  	;or	bx, bx			; Q: are we unpacking cluster 0
 26948                                  	;jnz	short up_cont		; N: proceed with normal unpack
 26949                                  	;mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 26950                                  	;or	di,di 			; return z if di=0
 26951                                  	;retn				; done
 26952                                  ;up_cont:				; M014 - End
 26953                                  	;cmp	bx,[es:bp+0Dh]
 26954 00005A51 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 26955 00005A55 7726                    	JA	short HURTFAT
 26956 00005A57 E8B900                  	CALL	MAPCLUSTER
 26957 00005A5A 721E                    	jc	short _DoContext
 26958 00005A5C 8B3D                    	MOV	DI,[DI]
 26959 00005A5E 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 26960 00005A60 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 26961 00005A64 81FEF60F                	CMP	SI,4096-10
 26962 00005A68 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 26963 00005A6A 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 26964 00005A6C EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 26965                                  
 26966                                  High12:
 26967 00005A6E D1EF                    	SHR	DI,1
 26968 00005A70 D1EF                    	SHR	DI,1
 26969 00005A72 D1EF                    	SHR	DI,1
 26970 00005A74 D1EF                    	SHR	DI,1
 26971                                  Unpack12:
 26972 00005A76 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 26973                                  _DoContext:
 26974 00005A7A 16                      	PUSH	SS
 26975 00005A7B 1F                      	POP	DS
 26976 00005A7C C3                      	retn
 26977                                  
 26978                                  HURTFAT:
 26979                                  	;mov	word [es:bp+1Eh],0FFFFh
 26980 00005A7D 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 26981 00005A83 50                      	PUSH	AX
 26982 00005A84 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 26983                                  
 26984                                  ;hkn; SS override
 26985 00005A86 36C606[F702]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 26986                                  ;
 26987                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 26988                                  ;
 26989 00005A8C BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 26990 00005A8F E808FE                  	call	FATAL
 26991 00005A92 3C03                    	CMP	AL,3
 26992 00005A94 F8                      	CLC
 26993 00005A95 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 26994 00005A97 F9                      	STC				; User said FAIL
 26995                                  OKU_RET:
 26996 00005A98 58                      	POP	AX
 26997                                  hurtfat_retn:
 26998 00005A99 C3                      	retn
 26999                                  
 27000                                  ;Break	<PACK -- PACK FAT ENTRIES>
 27001                                  ;----------------------------------------------------------------------------
 27002                                  ;
 27003                                  ; Procedure Name : PACK
 27004                                  ;
 27005                                  ; Inputs:
 27006                                  ;	BX = Cluster number
 27007                                  ;	DX = Data
 27008                                  ;	ES:BP = Pointer to drive DPB
 27009                                  ; Outputs:
 27010                                  ;	The data is stored in the FAT at the given cluster.
 27011                                  ;	SI,DX,DI all destroyed
 27012                                  ;	Carry set means error (currently user FAILed to I 24)
 27013                                  ;	No other registers affected
 27014                                  ;
 27015                                  ; NOTE: if BX = 0 then data in DX is atored in CL0FATENTRY.
 27016                                  ;
 27017                                  ;---------------------------------------------------------------------------
 27018                                  
 27019                                  PACK:
 27020                                  	; MSDOS 6.0			; M014 - start
 27021                                  	;or	bx, bx			; Q: are we packing cluster 0
 27022                                  	;jnz	short p_cont		; N: proceed with normal pack
 27023                                  	;mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 27024                                  	;retn				; done
 27025                                  ;p_cont:				; M014 - end
 27026 00005A9A E87600                  	CALL	MAPCLUSTER
 27027 00005A9D 72DB                    	JC	short _DoContext
 27028 00005A9F 8B35                    	MOV	SI,[DI]
 27029 00005AA1 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 27030 00005AA3 51                      	PUSH	CX			; move data to upper 12 bits
 27031 00005AA4 B104                    	MOV	CL,4
 27032 00005AA6 D3E2                    	SHL	DX,CL
 27033 00005AA8 59                      	POP	CX
 27034 00005AA9 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 27035 00005AAC EB14                    	JMP	SHORT PACKIN
 27036                                  ALIGNED:
 27037                                  	;cmp	word [es:bp+0Dh],0FF6h
 27038 00005AAE 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 27039 00005AB4 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 27040 00005AB6 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 27041 00005ABA 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 27042 00005ABE EB02                    	JMP	SHORT PACKIN		; MZ go store
 27043                                  Pack16:
 27044 00005AC0 31F6                    	XOR	SI,SI			; MZ no original data
 27045                                  PACKIN:
 27046 00005AC2 09D6                    	OR	SI,DX
 27047 00005AC4 8935                    	MOV	[DI],SI
 27048                                  
 27049                                  ;hkn; SS override
 27050 00005AC6 36C536[7405]            	LDS	SI,[SS:CURBUF]
 27051                                  	; MSDOS 6.0
 27052                                  	;TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 27053                                  					;LB. if already dirty		  ;AN000;
 27054                                  	;JNZ	short yesdirty6		;LB.  don't increment dirty count ;AN000;
 27055                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27056                                  	
 27057                                  	;or	byte [si+5],40h
 27058 00005ACB 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 27059                                  ;yesdirty6:				;LB.				  ;AN000;
 27060                                  ;hkn; SS override
 27061 00005ACF 36803E[1305]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 27062                                  ;hkn; SS is DOSDATA
 27063 00005AD5 16                      	push	ss
 27064 00005AD6 1F                      	pop	ds
 27065 00005AD7 74C0                    	jz	short hurtfat_retn	; Carry clear
 27066 00005AD9 50                      	PUSH	AX
 27067 00005ADA 53                      	PUSH	BX
 27068 00005ADB 51                      	PUSH	CX
 27069 00005ADC A1[2805]                	MOV	AX,[CLUSSAVE]
 27070 00005ADF 8E1E[7605]              	MOV	DS,[CURBUF+2]
 27071 00005AE3 83C610                  	ADD	SI,BUFINSIZ  ; add si,16
 27072 00005AE6 8824                    	MOV	[SI],AH
 27073                                  ;hkn; SS is DOSDATA
 27074                                  	;Context DS
 27075 00005AE8 16                      	push	ss
 27076 00005AE9 1F                      	pop	ds	
 27077 00005AEA 50                      	PUSH	AX
 27078                                  	; MSDOS 6.0
 27079                                  	;MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 27080                                  	;MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 27081                                  
 27082 00005AEB 8B16[2A05]              	MOV	DX,[CLUSSEC]
 27083 00005AEF BE0100                  	MOV	SI,1
 27084 00005AF2 30C0                    	XOR	AL,AL
 27085 00005AF4 E89403                  	call	GETBUFFRB
 27086 00005AF7 58                      	POP	AX
 27087 00005AF8 7213                    	JC	short POPP_RET
 27088 00005AFA C53E[7405]              	LDS	DI,[CURBUF]
 27089                                  	; MSDOS 6.0
 27090                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 27091                                  	;				;LB. if already dirty		  ;AN000;
 27092                                  	;JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 27093                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 27094                                  	
 27095                                  	;or	byte [di+5],40h
 27096 00005AFE 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 27097                                  yesdirty7:
 27098 00005B02 83C710                  	ADD	DI,BUFINSIZ ; add di,16
 27099 00005B05 4F                      	DEC	DI
 27100                                  	;add	di,[es:bp+2]
 27101 00005B06 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 27102 00005B0A 8805                    	MOV	[DI],AL
 27103 00005B0C F8                      	CLC
 27104                                  POPP_RET:
 27105 00005B0D 16                      	PUSH	SS
 27106 00005B0E 1F                      	POP	DS
 27107 00005B0F 59                      	POP	CX
 27108 00005B10 5B                      	POP	BX
 27109 00005B11 58                      	POP	AX
 27110 00005B12 C3                      	retn
 27111                                  
 27112                                  ; 31/07/2018 - Retro DOS v3.0
 27113                                  
 27114                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 27115                                  ;---------------------------------------------------------------------------
 27116                                  ;
 27117                                  ; Procedure Name : MAPCLUSTER
 27118                                  ;
 27119                                  ; Inputs:
 27120                                  ;	ES:BP Points to DPB
 27121                                  ;	BX Is cluster number
 27122                                  ; Function:
 27123                                  ;	Get a pointer to the cluster
 27124                                  ; Outputs:
 27125                                  ;	DS:DI Points to contents of FAT for given cluster
 27126                                  ;	DS:SI Points to start of buffer
 27127                                  ;	Zero Not set if cluster data is in high 12 bits of word
 27128                                  ;	Zero set if cluster data is in low 12 or 16 bits
 27129                                  ;	Carry set if failed.
 27130                                  ; SI is destroyed.
 27131                                  ;
 27132                                  ;---------------------------------------------------------------------------
 27133                                  
 27134                                  MAPCLUSTER:
 27135                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 27136 00005B13 C606[1305]00            	MOV	BYTE [CLUSSPLIT],0
 27137                                  	;SAVE	<AX,BX,CX,DX>
 27138 00005B18 50                      	push	ax
 27139 00005B19 53                      	push	bx
 27140 00005B1A 51                      	push	cx
 27141 00005B1B 52                      	push	dx
 27142 00005B1C 89D8                    	MOV	AX,BX			; AX = BX
 27143 00005B1E 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 27144 00005B24 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 27145 00005B26 D1E8                    	SHR	AX,1			; AX = BX/2
 27146                                  Map16:	
 27147                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 27148                                  	;XOR	DI,DI			; >32mb fat ;AN000;
 27149                                  	
 27150 00005B28 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 27151                                  	;ADC	DI,DI			; >32mb fat ;DI is zero before op;AN000;
 27152 00005B2A 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 27153                                  
 27154                                  ;IF FastDiv
 27155                                  ;
 27156                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 27157                                  ; case and apply a really fast algorithm to get the desired results
 27158                                  ;
 27159                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 27160                                  ; Fast method takes 39+20*4=119
 27161                                  ;
 27162                                  ; This saves a bunch.
 27163                                  ;
 27164 00005B2E 81F90002                	CMP	CX,512			; 4	Is this 512 byte sector?
 27165 00005B32 750E                    	jne	short _DoDiv		; 4     for no jump
 27166 00005B34 89C2                    	MOV	DX,AX			; 2	get set for remainder
 27167 00005B36 81E2FF01                	AND	DX,512-1		; 4	Form remainder
 27168 00005B3A 88E0                    	MOV	AL,AH			; 2     Quotient in formation in AL
 27169                                  	; MDOS 6.0
 27170                                  	;shr	di,1			; 2
 27171                                  	;rcr	al,1			; 2
 27172                                  	; MDOS 3.3
 27173 00005B3C D0E8                    	shr	al,1	
 27174                                  	; MDOS 3.3 (& MSDOS 6.0)
 27175 00005B3E 30E4                    	xor	ah,ah			; 3
 27176 00005B40 EB04                    	jmp	short DivDone		; 16
 27177                                  _DoDiv:
 27178                                  ;ENDIF
 27179                                  	; MSDOS 6.0
 27180                                  	;mov	dx,di			; 2
 27181                                  	; MSDOS 3.3
 27182 00005B42 31D2                    	xor	dx,dx
 27183                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 27184 00005B44 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 27185                                  ;IF FastDiv
 27186                                  DivDone:
 27187                                  ;ENDIF
 27188 00005B46 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 27189 00005B4A 49                      	DEC	CX			; CX is sector size - 1
 27190                                  	;SAVE	<AX,DX,CX>
 27191 00005B4B 50                      	push	ax
 27192 00005B4C 52                      	push	dx
 27193 00005B4D 51                      	push	cx
 27194 00005B4E 89C2                    	MOV	DX,AX
 27195                                  	; MSDOS 6.0
 27196                                  	;MOV	word [HIGH_SECTOR],0 	;F.C. >32mb  low sector #
 27197 00005B50 30C0                    	XOR	AL,AL
 27198 00005B52 BE0100                  	MOV	SI,1
 27199                                  	;invoke	GETBUFFRB
 27200 00005B55 E83303                  	call	GETBUFFRB
 27201                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 27202 00005B58 59                      	pop	cx
 27203 00005B59 58                      	pop	ax
 27204 00005B5A 5A                      	pop	dx
 27205 00005B5B 724B                    	JC	short MAP_POP
 27206 00005B5D C536[7405]              	LDS	SI,[CURBUF]
 27207 00005B61 8D7C10                  	LEA	DI,[SI+BUFINSIZ]  ; [si+16]
 27208 00005B64 01C7                    	ADD	DI,AX
 27209 00005B66 39C8                    	CMP	AX,CX
 27210 00005B68 752B                    	JNZ	short MAPRET
 27211 00005B6A 8A05                    	MOV	AL,[DI]
 27212                                  	;Context DS		 	;hkn; SS is DOSDATA
 27213 00005B6C 16                      	push	ss
 27214 00005B6D 1F                      	pop	ds	
 27215 00005B6E FE06[1305]              	INC	BYTE [CLUSSPLIT]
 27216 00005B72 A2[2805]                	MOV	[CLUSSAVE],AL
 27217 00005B75 8916[2A05]              	MOV	[CLUSSEC],DX
 27218                                  	; MSDOS 6.0
 27219                                  	;MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb		;AN000;
 27220 00005B79 42                      	INC	DX
 27221                                  	;MOV	word [HIGH_SECTOR],0	;F.C. >32mb FAT sector <32mb ;AN000;
 27222 00005B7A 30C0                    	XOR	AL,AL
 27223 00005B7C BE0100                  	MOV	SI,1
 27224                                  	;invoke	GETBUFFRB
 27225 00005B7F E80903                  	call	GETBUFFRB
 27226 00005B82 7224                    	JC	short MAP_POP
 27227 00005B84 C536[7405]              	LDS	SI,[CURBUF]
 27228 00005B88 8D7C10                  	LEA	DI,[SI+BUFINSIZ]
 27229 00005B8B 8A05                    	MOV	AL,[DI]
 27230                                  	;Context DS			;hkn; SS is DOSDATA
 27231 00005B8D 16                      	push	ss
 27232 00005B8E 1F                      	pop	ds
 27233 00005B8F A2[2905]                	MOV	[CLUSSAVE+1],AL
 27234                                  
 27235                                  ;hkn; CLUSSAVE is in DOSDATA
 27236 00005B92 BF[2805]                	MOV	DI,CLUSSAVE
 27237                                  MAPRET:
 27238                                  	;RESTORE <DX,CX,BX>
 27239 00005B95 5A                      	pop	dx
 27240 00005B96 59                      	pop	cx
 27241 00005B97 5B                      	pop	bx
 27242 00005B98 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 27243 00005B9A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 27244 00005BA0 7302                    	JAE	short MapSet		; MZ no, set flags
 27245 00005BA2 89D8                    	MOV	AX,BX
 27246                                  MapSet:
 27247 00005BA4 A801                    	TEST	AL,1			; set zero flag if not on boundary
 27248                                  	;RESTORE <AX>
 27249 00005BA6 58                      	pop	ax
 27250 00005BA7 C3                      	retn
 27251                                  
 27252                                  MAP_POP:
 27253                                  	;RESTORE <DX,CX,BX,AX>
 27254 00005BA8 5A                      	pop	dx
 27255 00005BA9 59                      	pop	cx
 27256 00005BAA 5B                      	pop	bx
 27257 00005BAB 58                      	pop	ax
 27258 00005BAC C3                      	retn
 27259                                  
 27260                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 27261                                  ;----------------------------------------------------------------------------
 27262                                  ;
 27263                                  ; Procedure Name : FATREAD_SFT
 27264                                  ;
 27265                                  ; Inputs:
 27266                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 27267                                  ;		giving a NET SFT will produce system crashing results).
 27268                                  ;	DS DOSDATA
 27269                                  ; Function:
 27270                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 27271                                  ;	if disk changed.
 27272                                  ;	In other respects, same as FATREAD_CDS.
 27273                                  ;	(note ES:DI destroyed!)
 27274                                  ; Outputs:
 27275                                  ;	Carry set if error (currently user FAILed to I 24)
 27276                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 27277                                  ;	as far as invalidating curdir_ID is concerned.
 27278                                  ;	Since getting a true disk changed on this call is a screw up
 27279                                  ;	anyway, that's the way it goes.
 27280                                  ;
 27281                                  ;---------------------------------------------------------------------------
 27282                                  
 27283                                  FATREAD_SFT:
 27284 00005BAD 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 27285                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 27286 00005BB1 268A4600                	mov	AL,[ES:BP]
 27287 00005BB5 A2[1105]                	MOV	[THISDRV],AL
 27288 00005BB8 E839BB                  	call	GOTDPB			;Set THISDPB
 27289 00005BBB E87A00                  	CALL	FAT_GOT_DPB
 27290                                  fatread_sft_retn:
 27291 00005BBE C3                      	retn
 27292                                  
 27293                                  ;----------------------------------------------------------------------------
 27294                                  ;
 27295                                  ; Procedure Name : FATREAD_CDS
 27296                                  ;
 27297                                  ; Inputs:
 27298                                  ;	DS:DOSDATA
 27299                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 27300                                  ;		giving a NET or NUL CDS will produce system crashing results).
 27301                                  ; Function:
 27302                                  ;	If disk may have been changed, media is determined and buffers are
 27303                                  ;	flagged invalid. If not, no action is taken.
 27304                                  ; Outputs:
 27305                                  ;	ES:BP = Drive parameter block
 27306                                  ;	THISDPB = ES:BP
 27307                                  ;	THISDRV set
 27308                                  ;	Carry set if error (currently user FAILed to I 24)
 27309                                  ; DS preserved , all other registers destroyed
 27310                                  ;
 27311                                  ;---------------------------------------------------------------------------
 27312                                  
 27313                                  FATREAD_CDS:
 27314 00005BBF 06                      	PUSH	ES
 27315 00005BC0 57                      	PUSH	DI
 27316                                  	;les	bp,[es:di+45h]
 27317 00005BC1 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 27318                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 27319 00005BC5 268A4600                	mov	AL,[ES:BP]
 27320 00005BC9 A2[1105]                	MOV	[THISDRV],AL
 27321 00005BCC E825BB                  	call	GOTDPB			;Set THISDPB
 27322 00005BCF E86600                  	CALL	FAT_GOT_DPB
 27323 00005BD2 5F                      	POP	DI			;Get back CDS pointer
 27324 00005BD3 07                      	POP	ES
 27325 00005BD4 72E8                    	jc	short fatread_sft_retn
 27326 00005BD6 7539                    	JNZ	short NO_CHANGE		;Media NOT changed
 27327                                  
 27328                                  ;	Media changed. We now need to find all CDS structures which use this
 27329                                  ;	DPB and invalidate their ID pointers.
 27330                                  
 27331                                  MED_CHANGE:
 27332 00005BD8 31C0                    	XOR	AX,AX
 27333 00005BDA 48                      	DEC	AX			; AX = -1
 27334 00005BDB 1E                      	PUSH	DS
 27335 00005BDC 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 27336 00005BE0 30ED                    	XOR	CH,CH			; CX is number of structures
 27337                                  	;lds	si,[es:di+45h]
 27338 00005BE2 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 27339                                  
 27340                                  ;hkn; SS override
 27341                                  
 27342                                  ;	Find all CDSs with this DevPtr
 27343                                  ;
 27344                                  ;	(ax) = -1
 27345                                  ;	(ds:si) = DevPtr
 27346                                  
 27347 00005BE6 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 27348                                  frcd20: 
 27349                                  	;test	word [es:di+43h],8000h
 27350 00005BEB 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 27351 00005BF1 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 27352                                  
 27353                                  	; MSDOS 3.3
 27354                                  	;push	es
 27355                                  	;push	di
 27356                                  	;les	di,[es:di+45h]
 27357                                  	;;les	di,[ES:DI+curdir.devptr]
 27358                                  	;call	POINTCOMP
 27359                                  	;pop	di
 27360                                  	;pop	es
 27361                                  	;jnz	short frcd25
 27362                                  
 27363                                  	; MSDOS 6.0
 27364 00005BF3 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 27365 00005BF7 7512                    	jne	short frcd25		; no match
 27366 00005BF9 8CDB                    	mov	bx,ds
 27367 00005BFB 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 27368 00005BFF 750A                    	jne	short frcd25		; CDS not for this drive
 27369                                  
 27370                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27371                                  	;test	[es:di+49h],ax
 27372 00005C01 26854549                	test	[ES:DI+curdir.ID],AX
 27373 00005C05 7404                    	JZ	short frcd25		; If root (0), leave root
 27374                                  	;mov	[es:di+49h],ax
 27375 00005C07 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 27376                                  frcd25:	
 27377                                  	;add	di,81
 27378 00005C0B 83C751                  	ADD	DI,curdir.size		; Point to next CDS
 27379 00005C0E E2DB                    	LOOP	frcd20
 27380 00005C10 1F                      	POP	DS
 27381                                  NO_CHANGE:
 27382 00005C11 C42E[2405]              	LES	BP,[THISDPB]
 27383 00005C15 F8                      	CLC
 27384 00005C16 C3                      	retn
 27385                                  
 27386                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 27387                                  ;----------------------------------------------------------------------------
 27388                                  ;
 27389                                  ; Procedure Name : FAT_operation
 27390                                  ;
 27391                                  ;----------------------------------------------------------------------------
 27392                                  FAT_operation:
 27393                                  	; 31/07/2018 - Retro DOS v3.0
 27394                                  FATERR:
 27395                                  	;mov	word [es:bp+1Eh],-1
 27396 00005C17 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 27397                                  					; Err in FAT must force recomp of freespace
 27398                                  	;and	di,0FFh
 27399 00005C1D 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 27400                                  	;mov	byte [ALLOWED],18h
 27401 00005C21 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 27402                                  	;mov	ah,1Ah
 27403 00005C26 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 27404 00005C28 A0[1105]                	MOV	AL,[THISDRV]		; Tell which drive
 27405 00005C2B E870FC                  	call	FATAL1
 27406 00005C2E C42E[2405]              	LES	BP,[THISDPB]
 27407 00005C32 3C03                    	CMP	AL,3
 27408 00005C34 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 27409 00005C36 F9                      	STC				; User said FAIL
 27410 00005C37 C3                      	retn
 27411                                  
 27412                                  FAT_GOT_DPB:
 27413                                  	;Context DS			;hkn; SS is DOSDATA
 27414 00005C38 16                      	push	ss			
 27415 00005C39 1F                      	pop	ds
 27416                                  	;mov	al,0Fh
 27417 00005C3A B00F                    	MOV	AL,DMEDHL
 27418                                  	;mov	al,[es:bp+1]
 27419 00005C3C 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 27420 00005C40 A3[0603]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 27421 00005C43 C606[0803]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 27422 00005C48 C706[0903]0000          	MOV	word [DEVCALL_REQSTAT],0
 27423                                  	;mov	al,[es:bp+16h]
 27424 00005C4E 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27425 00005C52 A2[1303]                	MOV	[CALLMED],AL
 27426 00005C55 06                      	PUSH	ES
 27427 00005C56 1E                      	PUSH	DS
 27428                                  
 27429                                  ;hkn; DEVCALL is in DOSDATA
 27430 00005C57 BB[0603]                	MOV	BX,DEVCALL
 27431                                  	;lds	si,[es:bp+12h]
 27432 00005C5A 26C57612                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 27433 00005C5E 07                      	POP	ES			; ES:BX Points to call header
 27434 00005C5F E89CF2                  	call	DEVIOCALL2
 27435                                  	;Context DS		 	;hkn; SS is DOSDATA
 27436 00005C62 16                      	push	ss
 27437 00005C63 1F                      	pop	ds
 27438 00005C64 07                      	POP	ES			; Restore ES:BP
 27439 00005C65 8B3E[0903]              	MOV	DI,[DEVCALL_REQSTAT]
 27440                                  	;test	di,8000h
 27441                                  	;jnz	short FATERR
 27442 00005C69 09FF                    	or	di,di
 27443 00005C6B 78AA                    	js	short FATERR		; have error
 27444 00005C6D 30E4                    	XOR	AH,AH
 27445                                  	;xchg	ah,[es:bp+17h]
 27446 00005C6F 26866617                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 27447 00005C73 A0[1105]                	MOV	AL,[THISDRV]		; Use physical unit number
 27448                                  ; See if we had changed volume id by creating one on the diskette
 27449 00005C76 3806[070A]              	cmp	[VOLCHNG_FLAG],AL
 27450 00005C7A 7508                    	jnz	short CHECK_BYT
 27451 00005C7C C606[070A]FF            	mov	byte [VOLCHNG_FLAG],-1
 27452 00005C81 E98800                  	jmp	GOGETBPB		; Need to get device driver to read in
 27453                                  					; new volume label.
 27454                                  CHECK_BYT:
 27455 00005C84 0A26[1403]              	OR	AH,[CALLRBYT]
 27456                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 27457                                  	;JMP	short NEWDSK
 27458 00005C88 785D                    	js	short NEWDSK
 27459                                  
 27460                                  CHECK_ZR:
 27461 00005C8A 743D                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 27462 00005C8C F8                      	CLC
 27463 00005C8D C3                      	retn				; If Media not changed (NZ)
 27464                                  
 27465                                  DISK_CHNG_ERR:
 27466 00005C8E 06                      	PUSH	ES
 27467 00005C8F 55                      	PUSH	BP
 27468                                  	;les	bp,[es:bp+12h]
 27469 00005C90 26C46E12                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 27470                                  	;test	word [es:bp+4],800h
 27471 00005C94 26F746040008            	TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 27472 00005C9A 5D                      	POP	BP
 27473 00005C9B 07                      	POP	ES
 27474 00005C9C 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 27475 00005C9E 1E                      	PUSH	DS			; Save buffer pointer for ignore
 27476 00005C9F 57                      	PUSH	DI
 27477 00005CA0 16                      	push	ss			;hkn; SS is DOSDATA
 27478 00005CA1 1F                      	pop	ds
 27479                                  	;mov	byte [ALLOWED],18h
 27480 00005CA2 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 27481 00005CA7 06                      	PUSH	ES
 27482 00005CA8 C43E[1503]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 27483 00005CAC 8C06[D802]              	MOV	[EXTERRPT+2],ES
 27484 00005CB0 07                      	POP	ES
 27485 00005CB1 893E[D602]              	MOV	[EXTERRPT],DI
 27486                                  	;mov	ax,0Fh
 27487 00005CB5 B80F00                  	MOV	AX,error_I24_wrong_disk
 27488 00005CB8 C606[1005]01            	MOV	byte [READOP],1		; Write
 27489                                  	;invoke	HARDERR
 27490 00005CBD E88CFB                  	call	HARDERR
 27491 00005CC0 5F                      	POP	DI			; Get back buffer for ignore
 27492 00005CC1 1F                      	POP	DS
 27493 00005CC2 3C03                    	CMP	AL,3
 27494                                  FAIL_OPJ2:
 27495 00005CC4 7416                    	JZ	short FAIL_OP
 27496 00005CC6 E96FFF                  	JMP	FAT_GOT_DPB		; Retry
 27497                                  
 27498                                  CHKBUFFDIRT:
 27499                                  	; MSDOS 6.0
 27500                                  	;cmp	word [DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 27501                                  	;je	short NEWDSK			; no, skip the check
 27502                                  	;call	GetCurHead			; get pointer to first buffer
 27503                                  
 27504                                  	; MSDOS 3.3
 27505 00005CC9 C53E[3800]              	lds	di,[BUFFHEAD]
 27506                                  nbuffer:
 27507                                  	;cmp	al,[di+4]
 27508 00005CCD 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 27509 00005CD0 750E                    	jne	short lfnxt			; no, go for next buffer
 27510                                  	;test   byte [di+5],40h
 27511 00005CD2 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 27512 00005CD6 7408                    	jz	short lfnxt			; no, go for next buffer
 27513                                  	;Context DS
 27514 00005CD8 16                      	push	ss
 27515 00005CD9 1F                      	pop	ds
 27516 00005CDA F8                      	clc
 27517 00005CDB C3                      	retn
 27518                                  
 27519                                  FAIL_OP:					; This label & code is here
 27520                                  	;Context DS				;  for reachability
 27521 00005CDC 16                      	push	ss
 27522 00005CDD 1F                      	pop	ds
 27523 00005CDE F9                      	STC
 27524 00005CDF C3                      	retn
 27525                                  
 27526                                  lfnxt:
 27527                                  	; 15/08/2018
 27528                                  	;mov	di,[di]
 27529                                  	;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 27530                                  	;
 27531 00005CE0 C53D                    	lds	di,[di]
 27532                                  	;
 27533                                  	; MSDOS 6.0
 27534                                  	;cmp	[FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 27535                                  	;jne	short nbuffer			; no, check this guy also
 27536                                  	; MSDOS 3.3
 27537 00005CE2 83FFFF                  	cmp	di,-1
 27538 00005CE5 75E6                    	jne	short nbuffer
 27539                                  
 27540                                  ; If no dirty buffers, assume Media changed
 27541                                  NEWDSK:
 27542                                  	;mov	word [es:bp+1Eh],0FFFFh
 27543 00005CE7 26C7461EFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 27544                                  	; MSDOS 6.0				;  recompute
 27545                                  	;call	GetCurHead
 27546                                  	; MSDOS 3.3
 27547 00005CED E8B500                  	call	SETVISIT
 27548                                  nxbuffer:
 27549                                  	; MSDOS 3.3
 27550 00005CF0 804D0520                	or 	byte [di+5],20h
 27551                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27552                                  	;cmp	[di+4],al
 27553 00005CF4 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 27554 00005CF7 750E                    	jne	short lfnxt2
 27555                                  	;test	byte [di+5],40h
 27556 00005CF9 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 27557 00005CFD 758F                    	jnz	short DISK_CHNG_ERR
 27558                                  	;mov	word [di+4],20FFh
 27559 00005CFF C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 27560 00005D04 E8CB00                  	call	SCANPLACE
 27561                                  	; MSDOS 6.0
 27562                                  	;jmp	short skpbuff
 27563                                  ;lfnxt2:
 27564                                  	;;mov	di,[di+BUFFINFO.buf_next]
 27565                                  	;mov	di,[di]
 27566                                  ;skpbuff:
 27567                                  	;cmp	di,[FIRST_BUFF_ADDR]					;hkn;
 27568                                  	;jne	short nxbuffer
 27569                                  
 27570                                  	;CMP	word [SC_CACHE_COUNT],0	;LB.  look ahead buffers ?	;AN001;
 27571                                  	;JZ	short GOGETBPB		;LB.  no			;AN001;
 27572                                  	;CMP	AL,[CURSC_DRIVE]	;LB.  same as changed drive	;AN001;
 27573                                  	;JNZ	short GOGETBPB		;LB.  no			;AN001;
 27574                                  	;MOV	byte [CURSC_DRIVE],-1	;LB.  invalidate look ahead buffers ;AN000;
 27575                                  lfnxt2:
 27576                                  	; MSDOS 3.3
 27577 00005D07 E8B400                  	call	SKIPVISIT
 27578 00005D0A 75E4                    	jnz	short nxbuffer
 27579                                  GOGETBPB:
 27580                                  	;lds	di,[es:bp+12h]
 27581 00005D0C 26C57E12                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 27582                                  	;test	word [di+4],2000h
 27583 00005D10 F745040020              	TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 27584 00005D15 7510                    	JNZ	short GETFREEBUF
 27585                                  	;context DS	    		;hkn; SS is DOSDATA
 27586 00005D17 16                      	push	ss
 27587 00005D18 1F                      	pop	ds
 27588 00005D19 BB0200                  	MOV	BX,2
 27589 00005D1C E832FD                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 27590                                  FAIL_OPJ:
 27591 00005D1F 72BB                    	JC	short FAIL_OP
 27592 00005D21 C53E[7405]              	LDS	DI,[CURBUF]
 27593 00005D25 EB0E                    	JMP	SHORT GOTGETBUF
 27594                                  
 27595                                  GETFREEBUF:
 27596 00005D27 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 27597 00005D28 55                      	PUSH	BP
 27598                                  	; MSDOS 3.3
 27599 00005D29 36C53E[3800]            	LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 27600                                  	; MSDOS 6.0
 27601                                  	;XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 27602                                  ;hkn; SS override
 27603                                  	;MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 27604                                  	;call	GETCURHEAD		;LB.			  ;AN000;
 27605                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27606 00005D2E E84F02                  	call	BUFWRITE
 27607 00005D31 5D                      	POP	BP
 27608 00005D32 07                      	POP	ES
 27609                                  	;JC	short FAIL_OPJ
 27610 00005D33 72A7                    	jc	short FAIL_OP
 27611                                  GOTGETBUF:
 27612                                  	;add	di,16
 27613 00005D35 83C710                  	ADD	DI,BUFINSIZ
 27614                                  
 27615                                  ;hkn; SS override
 27616 00005D38 368C1E[1603]            	MOV	[SS:CALLXAD+2],DS
 27617                                  	;Context DS			;hkn; SS is DOSDATA
 27618 00005D3D 16                      	push	ss
 27619 00005D3E 1F                      	pop	ds
 27620 00005D3F 893E[1403]              	MOV	[CALLXAD],DI
 27621                                  	;mov	al,16h
 27622 00005D43 B016                    	MOV	AL,DBPBHL
 27623                                  	;mov	ah,[es:bp+1]
 27624 00005D45 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 27625 00005D49 A3[0603]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 27626 00005D4C C606[0803]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 27627 00005D51 C706[0903]0000          	MOV	word [DEVCALL_REQSTAT],0
 27628                                  	;mov	al,[es:bp+16h]
 27629 00005D57 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27630 00005D5B A2[1303]                	MOV	[CALLMED],AL
 27631 00005D5E 06                      	PUSH	ES
 27632 00005D5F 1E                      	PUSH	DS
 27633                                  	;push	word [es:bp+14h]
 27634 00005D60 26FF7614                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 27635                                  	;push	word [es:bp+12h]
 27636 00005D64 26FF7612                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 27637                                  
 27638                                  ;hkn; DEVCALL is in DOSDATA
 27639 00005D68 BB[0603]                	MOV	BX,DEVCALL
 27640 00005D6B 5E                      	POP	SI
 27641 00005D6C 1F                      	POP	DS			; DS:SI Points to device header
 27642 00005D6D 07                      	POP	ES			; ES:BX Points to call header
 27643                                  	;invoke	DEVIOCALL2
 27644 00005D6E E88DF1                  	call	DEVIOCALL2
 27645 00005D71 07                      	POP	ES			; Restore ES:BP
 27646                                  	;Context DS
 27647 00005D72 16                      	push	ss		 	;hkn; SS is DOSDATA
 27648 00005D73 1F                      	pop	ds
 27649 00005D74 8B3E[0903]              	MOV	DI,[DEVCALL_REQSTAT]
 27650                                  	; MSDOS 3.3
 27651                                  	;test	di,8000h
 27652                                  	;jnz	short FATERRJ
 27653                                  	; MSDOS 6.0
 27654 00005D78 09FF                    	or	di,di
 27655 00005D7A 7826                    	js	short FATERRJ 		; have error
 27656                                  	;;mov	al,[es:bp+16h]
 27657 00005D7C 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27658 00005D80 C536[1803]              	LDS	SI,[CALLBPB]
 27659                                  	;mov	word [es:bp+1Ch],0
 27660 00005D84 26C7461C0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 27661                                  	;invoke	$SETDPB
 27662 00005D8A E8FFBF                  	call	_$SETDPB
 27663                                  
 27664                                  ;hkn; SS override
 27665 00005D8D 36C53E[1403]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 27666                                  	;mov	al,[es:bp+8]
 27667 00005D92 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 27668                                  
 27669                                  	; MSDOS 6.0
 27670                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL ;>32mb		  ;AN000;
 27671                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb			  ;AC000;
 27672                                  	;MOV	[DI.buf_wrtcntinc-BUFINSIZ],AX ;>32mb Correct buffer info ;AC000;
 27673                                  
 27674                                  	; MSDOS 3.3
 27675                                  	;mov	ah,[es:bp+0Fh]
 27676 00005D96 268A660F                	MOV	AH,[ES:BP+DPB.FAT_SIZE]
 27677                                  	;mov	[DI-8],ax
 27678 00005D9A 8945F8                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 27679                                  
 27680                                  	;Context DS			;hkn; SS is DOSDATA
 27681 00005D9D 16                      	push	ss
 27682 00005D9E 1F                      	pop	ds
 27683 00005D9F 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 27684 00005DA1 C3                      	retn
 27685                                  
 27686                                  FATERRJ: 
 27687 00005DA2 E972FE                  	JMP	FATERR
 27688                                  
 27689                                  
 27690                                  ;============================================================================
 27691                                  ; STDBUF.ASM
 27692                                  ;============================================================================
 27693                                  ; Retro DOS v2.0 - 12/03/2018
 27694                                  
 27695                                  ;
 27696                                  ; Standard buffer management for MSDOS
 27697                                  ;
 27698                                  
 27699                                  ;.xlist
 27700                                  ;.xcref
 27701                                  ;INCLUDE STDSW.ASM
 27702                                  ;.cref
 27703                                  ;.list
 27704                                  
 27705                                  ;TITLE	STDBUF - MSDOS buffer management
 27706                                  ;NAME	STDBUF
 27707                                  
 27708                                  ;INCLUDE BUF.ASM
 27709                                  
 27710                                  ;============================================================================
 27711                                  ; BUF.ASM
 27712                                  ;============================================================================
 27713                                  ; 31/07/2018 - Retro DOS v3.0
 27714                                  ; Retro DOS v2.0 - 12/03/2018
 27715                                  
 27716                                  ;
 27717                                  ; buffer management for MSDOS
 27718                                  ;
 27719                                  
 27720                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 27721                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 27722                                  
 27723                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 27724                                  
 27725                                  SETVISIT:
 27726                                  	; 31/07/2018 - Retro DOS v3.0
 27727                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 27728                                  ; Inputs:
 27729                                  ;       None
 27730                                  ; Function:
 27731                                  ;       Set up a scan of I/O buffers
 27732                                  ; Outputs:
 27733                                  ;       All visit flags = 0
 27734                                  ;               NOTE: This pre-scan is needed because a hard disk error
 27735                                  ;                     may cause a scan to stop in the middle leaving some
 27736                                  ;                     visit flags set, and some not set.
 27737                                  ;       DS:DI Points to [BUFFHEAD]
 27738                                  ; No other registers altered
 27739                                  
 27740 00005DA5 36C53E[3800]                    LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 27741 00005DAA 50                      	PUSH    AX
 27742                                          ;;XOR	AX,AX	  ;; MSDOS 2.11
 27743                                  	;mov	al,0DFh
 27744 00005DAB B0DF                    	mov	al,~buf_visit
 27745                                  SETLOOP:
 27746                                          ;;MOV	[DI+7],AL ;; MSDOS 2.11
 27747                                  	;and	[DI+5],al
 27748 00005DAD 204505                  	AND	[DI+BUFFINFO.buf_flags],AL
 27749 00005DB0 C53D                            LDS     DI,[DI]
 27750 00005DB2 83FFFF                          CMP     DI,-1
 27751 00005DB5 75F6                            JNZ     SHORT SETLOOP
 27752 00005DB7 58                              POP     AX ; 09/09/2018
 27753 00005DB8 36C53E[3800]            	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 27754                                  SVISIT_RETN:
 27755 00005DBD C3                              RETN
 27756                                  
 27757                                  SKIPVISIT:
 27758                                  	; 31/07/2018 - Retro DOS v3.0
 27759                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 27760                                  
 27761                                  ; Inputs:
 27762                                  ;       DS:DI Points to a buffer
 27763                                  ; Function:
 27764                                  ;       Skip visited buffers
 27765                                  ; Outputs:
 27766                                  ;       DS:DI Points to next unvisited buffer
 27767                                  ;       Zero is set if skip to LAST buffer
 27768                                  ; No other registers altered
 27769                                  
 27770 00005DBE 83FFFF                          CMP     DI,-1
 27771                                          ;retz
 27772 00005DC1 74FA                            JZ	SHORT SVISIT_RETN
 27773                                  
 27774                                  	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 27775                                          ;;;retnz
 27776                                          ;;JNZ	SHORT SVISIT_RETN
 27777                                  
 27778                                  	;test	byte [di+5],20h
 27779 00005DC3 F6450520                	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 27780 00005DC7 7505                    	JNZ	short SKIPLOOP
 27781                                  	
 27782 00005DC9 50                      	push	ax
 27783 00005DCA 0C01                    	or	al,1
 27784 00005DCC 58                      	pop	ax
 27785 00005DCD C3                      	retn	
 27786                                  
 27787                                  SKIPLOOP:
 27788 00005DCE C53D                    	LDS     DI,[DI]
 27789 00005DD0 EBEC                            JMP     SHORT SKIPVISIT
 27790                                  
 27791                                  ;============================================================================
 27792                                  ; BUF.ASM, MSDOS 6.0, 1991
 27793                                  ;============================================================================
 27794                                  ; 31/07/2018 - Retro DOS v3.0
 27795                                  
 27796                                  ;	TITLE	BUF - MSDOS buffer management
 27797                                  ;	NAME	BUF
 27798                                  
 27799                                  ;**	BUF.ASM - Low level routines for buffer cache management
 27800                                  ;
 27801                                  ;	GETCURHEAD
 27802                                  ;	ScanPlace
 27803                                  ;	PLACEBUF
 27804                                  ;	PLACEHEAD
 27805                                  ;	PointComp
 27806                                  ;	GETBUFFR
 27807                                  ;	GETBUFFRB
 27808                                  ;	FlushBuf
 27809                                  ;	BufWrite
 27810                                  ;	SET_RQ_SC_PARMS
 27811                                  ;
 27812                                  ;	Revision history:
 27813                                  ;
 27814                                  ;		AN000  version 4.00  Jan. 1988
 27815                                  ;		A004   PTM 3765 -- Disk reset failed
 27816                                  ;		M039 DB 10/17/90 - Disk write optimization
 27817                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 27818                                  
 27819                                  ;Break	<GETCURHEAD -- Get current buffer header>
 27820                                  ;----------------------------------------------------------------------------
 27821                                  ; Procedure Name : GetCurHead
 27822                                  ; Inputs:
 27823                                  ;	 No Inputs
 27824                                  ; Function:
 27825                                  ;	Returns the pointer to the first buffer in Queue
 27826                                  ;	and updates FIRST_BUFF_ADDR
 27827                                  ;       and invalidates LASTBUFFER (recency pointer)
 27828                                  ; Outputs:
 27829                                  ;	DS:DI = pointer to the first buffer in Queue
 27830                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 27831                                  ;       LASTBUFFER = -1
 27832                                  ; No other registers altered
 27833                                  ;----------------------------------------------------------------------------
 27834                                  
 27835                                  ;procedure   GETCURHEAD,NEAR
 27836                                  ;
 27837                                  ;	lds	di, BufferQueue		; Pointer to the first buffer;smr;SS Override
 27838                                  ;	mov	word ptr [LastBuffer],-1; invalidate last buffer;smr;SS Override
 27839                                  ;	mov	[FIRST_BUFF_ADDR],di	;save first buffer addr;smr;SS Override
 27840                                  ;	ret
 27841                                  ;
 27842                                  ;EndProc GETCURHEAD
 27843                                  
 27844                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 27845                                  ;----------------------------------------------------------------------------
 27846                                  ; Procedure Name : ScanPlace
 27847                                  ; Inputs:
 27848                                  ;	Same as PLACEBUF
 27849                                  ; Function:
 27850                                  ;	Save scan location and call PLACEBUF
 27851                                  ; Outputs:
 27852                                  ;	DS:DI Points to saved scan location
 27853                                  ; All registers, except DS:DI, preserved.
 27854                                  ;----------------------------------------------------------------------------
 27855                                  ;M039: Rewritten to preserve registers.
 27856                                  
 27857                                  SCANPLACE:
 27858                                  	; 31/07/2018 - Retro DOS v3.0
 27859                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 27860 00005DD2 06                      	push	es
 27861 00005DD3 C435                    	les	si,[di]
 27862                                  	;les	si,[DI+BUFFINFO.buf_link]
 27863 00005DD5 E80600                  	call	PLACEBUF
 27864 00005DD8 06                      	push	es
 27865 00005DD9 1F                      	pop	ds
 27866 00005DDA 89F7                    	mov	di,si
 27867 00005DDC 07                      	pop	es
 27868                                  scanplace_retn:
 27869 00005DDD C3                      	retn	
 27870                                  	
 27871                                  	; MSDOS 6.0
 27872                                  ;ScanPlace:
 27873                                  	;push	[di].buf_next		;Save scan location
 27874                                  	;call	PLACEBUF
 27875                                  	;pop	di
 27876                                  	;retn
 27877                                  
 27878                                  ;----------------------------------------------------------------------------
 27879                                  ; Procedure Name : PlaceBuf
 27880                                  ; Input:
 27881                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 27882                                  ; Function:
 27883                                  ;	Remove buffer from queue and re-insert it in proper place.
 27884                                  ; NO registers altered
 27885                                  ;----------------------------------------------------------------------------
 27886                                  
 27887                                  ;procedure   PLACEBUF,NEAR
 27888                                  
 27889                                  ;PLACEBUF:
 27890                                  	; 31/07/2018 - Retro DOS v3.0
 27891                                  
 27892                                  	; MSDOS 6.0
 27893                                  	;push	AX			;Save only regs we modify	;AN000;
 27894                                  	;push	BX							;AN000;
 27895                                  	;push	SI							;AN000;
 27896                                  	;mov	ax, [di].BUF_NEXT
 27897                                  	;mov	bx, word ptr[BufferQueue]	; bx = offset of head of list;smr;SS Override
 27898                                  	;
 27899                                  	;cmp	ax,bx				;Buf = last?		;AN000;
 27900                                  	;je	nret				;Yes, special case	;AN000;
 27901                                  	;cmp	di,bx				;Buf = first?		;AN000;
 27902                                  	;jne	not_first 			;Yes, special case	;AN000;
 27903                                  	;mov	word ptr [BufferQueue],ax	;smr;SS Override
 27904                                  	;jmp	short nret 			;Continue with repositioning;AN000;
 27905                                  ;not_first:
 27906                                  	;mov	SI,[DI].BUF_PREV		;No, SI = prior Buf	;AN000;
 27907                                  	;mov	[SI].BUF_NEXT,AX		; ax has di->buf_next	;AN000;
 27908                                  	;xchg	si, ax
 27909                                  	;mov	[SI].BUF_PREV,AX		;			;AN000;
 27910                                  	;
 27911                                  	;mov	SI,[BX].BUF_PREV		;SI-> last buffer	;AN000;
 27912                                  	;mov	[SI].BUF_NEXT,DI		;Add Buf to end of list ;AN000;
 27913                                  	;mov	[BX].BUF_PREV,DI					;AN000;
 27914                                  	;mov	[DI].BUF_PREV,SI		;Update link in Buf too	;AN000;
 27915                                  	;mov	[DI].BUF_NEXT,BX					;AN000;
 27916                                  ;nret:									;AN000;
 27917                                  	;pop	SI							;AN000;
 27918                                  	;pop	BX							;AN000;
 27919                                  	;pop	AX							;AN000;
 27920                                  	;								;AN000;
 27921                                  	;cmp	[di.buf_ID],-1			; Buffer FREE?		;AN000;
 27922                                          ;jne	pbx                             ; M039: -no, jump.
 27923                                  	;mov	WORD PTR [BufferQueue],di	; M039: -yes, make it LRU.
 27924                                  ;pbx:	
 27925                                  ;	ret								;AN000;
 27926                                  
 27927                                  	; 31/07/2018 - Retro DOS v3.0
 27928                                  
 27929                                  	; MSDOS 3.3
 27930                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 27931                                  
 27932                                  PLACEBUF:
 27933                                  	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 27934                                  	
 27935 00005DDE E817B8                          CALL	save_world
 27936 00005DE1 C40D                            LES     CX,[DI]
 27937 00005DE3 83F9FF                          CMP     CX,-1           	; Buf is LAST?
 27938 00005DE6 744B                            JZ      SHORT NRET		; Buffer already last
 27939 00005DE8 8CC5                            MOV     BP,ES           	; Pointsave = Buf.nextbuf
 27940 00005DEA 1E                              PUSH    DS
 27941 00005DEB 07                              POP     ES              	; Buf is ES:DI
 27942                                  	; 15/03/2018
 27943 00005DEC 36C536[3800]                    LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 27944 00005DF1 E88600                          CALL    POINTCOMP       	; Buf == HEAD?
 27945 00005DF4 750C                            JNZ     SHORT BUFLOOP
 27946 00005DF6 36890E[3800]                    MOV     [SS:BUFFHEAD],CX
 27947 00005DFB 36892E[3A00]                    MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 27948 00005E00 EB14                            JMP     SHORT LOOKEND
 27949                                  
 27950                                  BUFLOOP:
 27951                                  	; 31/07/2018
 27952 00005E02 8CD8                    	mov	ax,ds
 27953 00005E04 89F3                    	mov	bx,si
 27954                                  	;lds	si,[SI+BUFFINFO.buf_link]
 27955 00005E06 C534                            LDS     SI,[SI]
 27956 00005E08 E86F00                          CALL    POINTCOMP
 27957 00005E0B 75F5                            jnz	short BUFLOOP
 27958                                  	;
 27959 00005E0D 8ED8                    	mov	ds,ax
 27960 00005E0F 89DE                    	mov	si,bx
 27961 00005E11 890C                    	mov	[SI],cx
 27962                                  	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 27963 00005E13 896C02                  	mov	[SI+2],bp
 27964                                  	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 27965                                  LOOKEND:
 27966 00005E16 8CD8                    	mov	ax,ds
 27967 00005E18 89F3                    	mov	bx,si
 27968 00005E1A C534                            LDS     SI,[SI]
 27969 00005E1C 83FEFF                          CMP     SI,-1
 27970 00005E1F 75F5                            jnz     short LOOKEND
 27971                                  
 27972                                  GOTHEEND:
 27973 00005E21 8ED8                            mov	ds,ax
 27974 00005E23 893F                    	mov	[BX],di
 27975 00005E25 8C4702                          MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 27976 00005E28 26C705FFFF                      MOV     WORD [ES:DI],-1
 27977                                  	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 27978 00005E2D 26C74502FFFF                    MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 27979                                  	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 27980                                  NRET:
 27981 00005E33 E8AFB7                          CALL	restore_world
 27982                                  	
 27983                                  	;cmp	byte [di+4],-1
 27984 00005E36 807D04FF                	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 27985 00005E3A 75A1                    	jnz     short scanplace_retn
 27986 00005E3C E80100                  	call    PLACEHEAD
 27987 00005E3F C3                      	retn
 27988                                  
 27989                                  ;EndProc PLACEBUF
 27990                                  
 27991                                  ;M039 - Removed PLACEHEAD.
 27992                                  ;----------------------------------------------------------------------------
 27993                                  ; places buffer at head
 27994                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 27995                                  ;	ONE IN THE LIST!!!!!!!
 27996                                  ; BUGBUG ---- this routine can be removed because it has only
 27997                                  ; BUGBUG ---- one instruction. This routine is called from
 27998                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 27999                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 28000                                  ; BUGBUG ---- But kept as it is for modularity
 28001                                  ;----------------------------------------------------------------------------
 28002                                  ;procedure   PLACEHEAD,NEAR
 28003                                  ;	mov	word ptr [BufferQueue], di
 28004                                  ;	ret
 28005                                  ;EndProc PLACEHEAD
 28006                                  ;M039
 28007                                  
 28008                                  ;----------------------------------------------------------------------------
 28009                                  ; Procedure Name : PLACEHEAD
 28010                                  ;
 28011                                  ; SAME AS PLACEBUF except places buffer at head
 28012                                  ;----------------------------------------------------------------------------
 28013                                  
 28014                                  	; MSDOS 3.3 (Retro DOS v3.0)
 28015                                  	; 05/09/2018
 28016                                  	; MSDOS 2.11 (Retro DOS v2.0)
 28017                                  PLACEHEAD:
 28018                                  	; 31/07/2018 - Retro DOS v3.0
 28019                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 28020                                  
 28021 00005E40 E8B5B7                          CALL	save_world
 28022 00005E43 1E                              PUSH	DS
 28023 00005E44 07                              POP	ES
 28024                                  	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 28025 00005E45 36C536[3800]                    LDS     SI,[SS:BUFFHEAD]
 28026                                  	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 28027 00005E4A E82D00                  	CALL    POINTCOMP
 28028 00005E4D 7427                            JZ      SHORT GOTHEEND2
 28029 00005E4F 268935                  	MOV	[ES:DI],SI
 28030                                  	;mov	[ES:DI+BUFFINFO.buf_link],si
 28031 00005E52 268C5D02                        MOV	[ES:DI+2],DS
 28032                                  	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 28033 00005E56 36893E[3800]                    MOV	[SS:BUFFHEAD],DI
 28034 00005E5B 368C06[3A00]                    MOV	[SS:BUFFHEAD+2],ES
 28035                                  LOOKEND2:
 28036 00005E60 8CD8                            mov	ax,ds
 28037 00005E62 89F3                    	mov	bx,si
 28038                                  	;lds	si,[SI+BUFFINFO.buf_link]
 28039 00005E64 C534                            LDS     SI,[SI]
 28040 00005E66 E81100                          CALL    POINTCOMP
 28041 00005E69 75F5                            JNZ	SHORT LOOKEND2 ; 05/09/2018
 28042 00005E6B 8ED8                            mov	ds,ax
 28043 00005E6D C707FFFF                	mov	word [bx],-1
 28044                                  	;mov	word [BX+BUFFINFO.buf_link],-1
 28045 00005E71 C74702FFFF              	mov	word [bx+2],-1
 28046                                  	;mov	word [BX+BUFFINFO.buf_link+2],-1
 28047                                  GOTHEEND2:
 28048 00005E76 E86CB7                         	call	restore_world
 28049                                  placehead_retn:
 28050 00005E79 C3                      	retn
 28051                                  
 28052                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 28053                                  ;----------------------------------------------------------------------------
 28054                                  ;
 28055                                  ; Procedure Name : PointComp
 28056                                  ; Inputs:
 28057                                  ;         DS:SI & ES:DI
 28058                                  ; Function:
 28059                                  ;          Checks for ((SI==DI) && (ES==DS))
 28060                                  ;	   Assumes that pointers are normalized for the
 28061                                  ;	   same segment
 28062                                  ;
 28063                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 28064                                  ; DO NOT USE FOR < or >
 28065                                  ; No Registers altered
 28066                                  ;
 28067                                  ;----------------------------------------------------------------------------
 28068                                  
 28069                                  POINTCOMP:
 28070                                  	; 31/07/2018 - Retro DOS v3.0
 28071                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 28072 00005E7A 39FE                    	CMP	SI,DI
 28073                                  	;jnz	short _ret_label	; return if nz
 28074 00005E7C 75FB                    	jnz	short placehead_retn 
 28075 00005E7E 51                      	PUSH	CX
 28076 00005E7F 52                      	PUSH	DX
 28077 00005E80 8CD9                    	MOV	CX,DS
 28078 00005E82 8CC2                    	MOV	DX,ES
 28079 00005E84 39D1                    	CMP	CX,DX
 28080 00005E86 5A                      	POP	DX
 28081 00005E87 59                      	POP	CX
 28082                                  ;_ret_label:
 28083 00005E88 C3                      	retn
 28084                                  
 28085                                  
 28086                                  ; 01/08/2018 - Retro DOS v3.0
 28087                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 28088                                  
 28089                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 28090                                  
 28091                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 28092                                  ;----------------------------------------------------------------------------
 28093                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 28094                                  ;	It gets the specified local sector into one of the I/O buffers
 28095                                  ;	and shuffles the queue
 28096                                  ; 
 28097                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 28098                                  ;		       ELSE no pre-read
 28099                                  ;		(DX) = Desired physical sector number	      (LOW)
 28100                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 28101                                  ;		(ES:BP) = Pointer to drive parameters
 28102                                  ;		ALLOWED set in case of INT 24
 28103                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 28104                                  ;		'C' clear if OK
 28105                                  ;		CURBUF Points to the Buffer for the sector
 28106                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 28107                                  ;	USES	AX, BX, CX, SI, DI, Flags
 28108                                  ;----------------------------------------------------------------------------
 28109                                  
 28110                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 28111                                  ;----------------------------------------------------------------------------
 28112                                  ;	GetBuffr reads a sector from the FAT file system's FAT table.
 28113                                  ;	It gets the specified sector into one of the I/O buffers
 28114                                  ;	and shuffles the queue. We need a special entry point so that
 28115                                  ;	we can read the alternate FAT sector if the first read fails, also
 28116                                  ;	so we can mark the buffer as a FAT sector.
 28117                                  ; 
 28118                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 28119                                  ;		       ELSE no pre-read
 28120                                  ;		(DX) = Desired physical sector number	      (LOW)
 28121                                  ;		(SI) != 0
 28122                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 28123                                  ;		(ES:BP) = Pointer to drive parameters
 28124                                  ;		ALLOWED set in case of INT 24
 28125                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 28126                                  ;		'C' clear if OK
 28127                                  ;		CUR ddBUF Points to the Buffer for the sector
 28128                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 28129                                  ;	USES	AX, BX, CX, SI, DI, Flags
 28130                                  ;----------------------------------------------------------------------------
 28131                                  
 28132                                  GETBUFFR:
 28133 00005E89 31F6                    	XOR	SI,SI
 28134                                  
 28135                                  ;	This entry point is called for FAT buffering with SI != 0
 28136                                  
 28137                                  GETBUFFRB:
 28138 00005E8B A3[2C05]                	MOV	[PREREAD],AX			; save pre-read flag
 28139 00005E8E 268A4600                	mov	al,[ES:BP]
 28140                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 28141 00005E92 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 28142                                  	; MSDOS 6.0
 28143                                  ;hkn; SS override
 28144                                  	;MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb		;AN000;
 28145                                  
 28146                                  ;	See if this is the buffer that was most recently returned.
 28147                                  ;	A big performance win if it is.
 28148                                  
 28149 00005E96 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 28150 00005E99 740A                    	je	short getb5			; No
 28151                                  	;cmp	dx,[di+6]
 28152 00005E9B 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 28153 00005E9E 7505                    	JNZ	short getb5			; Wrong sector
 28154                                  	
 28155                                  	; MSDOS 6.0
 28156                                  	;CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb		;AN000;
 28157                                  	;JNZ	short getb5			; F.C. >32mb		;AN000;
 28158                                  	
 28159                                  	;cmp	al,[di+4]
 28160 00005EA0 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28161 00005EA3 7474                    	JZ	getb35				; Just asked for same buffer
 28162                                  
 28163                                  ;	It's not the buffer most recently returned.  See if it's in the
 28164                                  ;	cache.
 28165                                  ;
 28166                                  ;	(cx:dx) = sector #
 28167                                  ;	(al) = drive #
 28168                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 28169                                  ;	??? list may be incomplete ???
 28170                                  
 28171                                  getb5:	
 28172                                  	; MSDOS 6.0
 28173                                  	;CALL	GETCURHEAD			; get Q Head
 28174                                  	; MSDOS 3.3
 28175 00005EA5 36C53E[3800]            	lds	di,[SS:BUFFHEAD]
 28176                                  getb10:	
 28177                                  	;cmp	dx,[di+6]
 28178 00005EAA 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 28179 00005EAD 7505                    	jne	short getb12			; wrong sector lo
 28180                                  	
 28181                                  	; MSDOS 6.0
 28182                                  	;CMP	CX,[DI+BUFFINFO.buf_sector+2]
 28183                                  	;jne	short getb12			; wrong sector hi
 28184                                  	
 28185                                  	;cmp	al,[di+4]
 28186 00005EAF 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28187 00005EB2 7450                    	je	short getb25 ; 05/09/2018	; Found the requested sector
 28188                                  getb12:	
 28189                                  	; MSDOS 6.0
 28190                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 28191                                  	;cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 28192                                  	;jne	short getb10			; no, continue looking
 28193                                  
 28194                                  	; MSDOS 3.3
 28195                                  	;mov	di,[DI]
 28196                                  	;mov	di,[DI+BUFFINFO.buf_link]
 28197                                  	;
 28198                                  	; 15/08/2018
 28199 00005EB4 C53D                    	lds	di,[di]
 28200                                  	;
 28201 00005EB6 83FFFF                  	cmp	di,-1 ; 0FFFFh
 28202 00005EB9 75EF                    	jne	short getb10
 28203 00005EBB 36C53E[3800]            	lds	di,[SS:BUFFHEAD]		
 28204                                  
 28205                                  ;	The requested sector is not available in the buffers. DS:DI now points
 28206                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 28207                                  ;	new sector into it.
 28208                                  ;
 28209                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 28210                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 28211                                  ;	him, we should take LRU. And the above lookup shouldn't be
 28212                                  ;	down a chain, but should be hashed.
 28213                                  ;
 28214                                  ;	(DS:DI) = first buffer in the queue
 28215                                  ;	(CX:DX) = sector # we want
 28216                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 28217                                  
 28218                                  ;hkn; SS override
 28219                                  	;PUSH	cx
 28220 00005EC0 56                      	push	si
 28221 00005EC1 52                      	push	dx
 28222 00005EC2 55                      	push	bp
 28223 00005EC3 06                      	push	es
 28224 00005EC4 E8B900                  	CALL	BUFWRITE			; Write out the dirty buffer
 28225 00005EC7 07                      	pop	es
 28226 00005EC8 5D                      	pop	bp
 28227 00005EC9 5A                      	pop	dx
 28228 00005ECA 5E                      	pop	si
 28229                                  	;POP	word [SS:HIGH_SECTOR]
 28230 00005ECB 7261                    	jc	short getbx			; if got hard error
 28231                                  
 28232                                  	; MSDOS 6.0
 28233                                  	;CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 28234                                  
 28235                                  ;	We're ready to read in the buffer, if need be. If the caller
 28236                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 28237                                  
 28238 00005ECD 30E4                    	XOR	AH,AH				; initial flags
 28239                                  ;hkn; SS override
 28240                                  	;test	byte [ss:PREREAD],0FFh
 28241                                  	;jnz	short getb20
 28242 00005ECF 363826[2C05]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 28243 00005ED4 751E                    	JNZ	short getb20			; no, we're done
 28244 00005ED6 8D5D10                  	LEA	BX,[DI+BUFINSIZ] ; [DI+16]	; (ds:bx) = data address
 28245 00005ED9 B90100                  	MOV	CX,1
 28246 00005EDC 56                      	push	si
 28247 00005EDD 57                      	push	di
 28248 00005EDE 52                      	push	dx
 28249                                  	; MSDOS 6.0
 28250                                  	;push	es
 28251                                  ; Note:  As far as I can tell, all disk reads into buffers go through
 28252                                  ;	 this point.  -mrw 10/88
 28253                                  	;cmp	BuffInHMA, 0		; is buffers in HMA?
 28254                                  	;jz	@f
 28255                                  	;push	ds
 28256                                  	;push	bx
 28257                                  	;lds	bx, dword ptr LoMemBuff	; Then let's read it into scratch buff
 28258                                  ;@@:
 28259                                  ;M039: Eliminated redundant HMA code.
 28260                                  
 28261                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28262 00005EDF 09F6                    	OR	SI,SI			; FAT sector ?
 28263 00005EE1 7407                    	JZ	short getb15		
 28264                                  
 28265 00005EE3 E863E2                  	call	FATSECRD
 28266                                  	;mov	ah,2
 28267 00005EE6 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 28268                                  
 28269 00005EE8 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 28270                                  
 28271                                  getb15:
 28272 00005EEA E883E2                  	call	DREAD			; Buffer is marked free if read barfs
 28273 00005EED B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 28274                                  getb17:	
 28275                                  	; MSDOS 6.0							  ;I001
 28276                                  	;pushf								  ;I001
 28277                                  	;cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 28278                                  	;jz	short not_in_hma	; no				  ;I001
 28279                                  	;mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 28280                                  	;shr	cx,1							  ;I001
 28281                                  	;popf				; Retreive possible CY from DREAD ;I001
 28282                                  	;mov	si,bx							  ;I001
 28283                                  	;pop	di							  ;I001
 28284                                  	;pop	es							  ;I001
 28285                                  	;cld								  ;I001
 28286                                  	;pushf				; Preserve possible CY from DREAD ;I001
 28287                                  	;rep	movsw			; move the contents of scratch buf;I001
 28288                                  	;push	es							  ;I001
 28289                                  	;pop	ds							  ;I001
 28290                                  ;not_in_hma:								  ;I001
 28291                                  	;popf							 	  ;I001
 28292                                  	;pop	es
 28293                                  	;
 28294 00005EEF 5A                      	pop	dx
 28295 00005EF0 5F                      	pop	di
 28296 00005EF1 5E                      	pop	si
 28297 00005EF2 723A                    	JC	short getbx
 28298                                  
 28299                                  ;	The buffer has the data setup in it (if we were to read)
 28300                                  ;	Setup the various buffer fields
 28301                                  ;
 28302                                  ;	(ds:di) = buffer address
 28303                                  ;	(es:bp) = DPB address
 28304                                  ;	(HIGH_SECTOR:DX) = sector #
 28305                                  ;	(ah) = BUF_FLAGS value
 28306                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 28307                                  
 28308                                  ;hkn; SS override
 28309                                  getb20:	; MSDOS 6.0
 28310                                  	;MOV	CX,[SS:HIGH_SECTOR]
 28311                                  	;MOV	WORD [DI+BUFFINFO.buf_sector+2],CX
 28312                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 28313                                   	;mov	[di+6],dx
 28314 00005EF4 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 28315                                  	;mov	[di+0Ah],bp
 28316 00005EF7 896D0A                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 28317                                  	;mov	[di+0Ch], es
 28318 00005EFA 8C450C                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 28319 00005EFD 268A4600                	mov	al,[es:bp]
 28320                                  	;mov	al,[es:bp+0]
 28321                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28322                                  	;mov	[di+4],ax
 28323 00005F01 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 28324                                  getb25:	
 28325                                  	; MSDOS 6.0
 28326                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 28327                                  	;XOR	AX,AX
 28328                                  
 28329                                  	; MSDOS 3.3
 28330 00005F04 B80100                  	mov     ax,1
 28331                                  
 28332 00005F07 09F6                    	OR	SI,SI				; FAT sector ?
 28333 00005F09 7408                    	JZ	short getb30
 28334                                  
 28335                                  	;mov	al,[es:bp+8]
 28336 00005F0B 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 28337                                  	; MSDOS 6.0
 28338                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 28339                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 28340                                  						;  sectors
 28341                                  	; MSDOS 3.3
 28342                                  	;mov	ah,[es:bp+0Fh]
 28343 00005F0F 268A660F                	MOV	AH,[ES:BP+DPB.FAT_SIZE]
 28344                                  
 28345                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 28346                                  ;		is set
 28347                                  
 28348                                  getb30:	
 28349                                  	; MSDOS 6.0
 28350                                  	;MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 28351                                  
 28352                                  	; MSDOS 3.3
 28353                                  	;mov	[di+8],ax ; 15/08/2018	
 28354 00005F13 894508                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 28355                                  
 28356 00005F16 E8C5FE                  	CALL	PLACEBUF
 28357                                  
 28358                                  ;hkn; SS override for next 4
 28359                                  getb35: 
 28360 00005F19 368C1E[7605]            	MOV	[SS:CURBUF+2],DS
 28361 00005F1E 368C1E[2000]            	MOV	[SS:LastBuffer+2],DS
 28362 00005F23 36893E[7405]            	MOV	[SS:CURBUF],DI
 28363 00005F28 36893E[1E00]            	MOV	[SS:LastBuffer],DI
 28364 00005F2D F8                      	CLC
 28365                                  
 28366                                  ;	Return with 'C' set appropriately
 28367                                  ;
 28368                                  ;	(dx) = caller's original value
 28369                                  
 28370                                  getbx:	
 28371 00005F2E 16                      	push	ss
 28372 00005F2F 1F                      	pop	ds
 28373 00005F30 C3                      	retn
 28374                                  
 28375                                  
 28376                                  
 28377                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 28378                                  ;----------------------------------------------------------------------------
 28379                                  ; Input:
 28380                                  ;	DS = DOSGROUP
 28381                                  ;	AL = Physical unit number local buffers only
 28382                                  ;	   = -1 for all units and all remote buffers
 28383                                  ; Function:
 28384                                  ;	Write out all dirty buffers for unit, and flag them as clean
 28385                                  ;	Carry set if error (user FAILed to I 24)
 28386                                  ;	    Flush operation completed.
 28387                                  ; DS Preserved, all others destroyed (ES too)
 28388                                  ;----------------------------------------------------------------------------
 28389                                  
 28390                                  FLUSHBUF:
 28391                                  	; MSDOS 6.0
 28392                                  	;call	GetCurHead
 28393                                  	;TEST	word [DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 28394                                  	;jnz	short scan_buf_queue
 28395                                  	;cmp	word [DirtyBufferCount], 0			;hkn;
 28396                                  	;je	short end_scan
 28397                                  	
 28398                                  	; MSDOS 3.3
 28399                                  	;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 28400 00005F31 C53E[3800]              	lds	di,[BUFFHEAD]
 28401                                  scan_buf_queue:
 28402 00005F35 E81F00                  	call	CHECKFLUSH
 28403                                  	;push	ax  ; MSDOS 3.3
 28404                                  	; MSDOS 6.0
 28405 00005F38 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 28406 00005F3B 363826[D002]            	cmp	[SS:WPERR],ah					;hkn;
 28407                                  	;je	short free_the_buf
 28408                                  	;TEST	word [DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 28409                                  	;jz	short dont_free_the_buf
 28410                                  	; MSDOS 3.3
 28411                                  	;mov	al,[di+4]
 28412                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 28413                                  	;cmp	[SS:WPERR],al					;hkn;
 28414                                  	; 15/08/2018
 28415 00005F40 7505                    	jne	short dont_free_the_buf	
 28416                                  free_the_buf:
 28417                                  	; MSDOS 6.0 (& MSDOS 3.3)
 28418 00005F42 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 28419                                  dont_free_the_buf:
 28420                                  	;pop	ax  ; MSDOS 3.3 	   	
 28421                                  	
 28422                                  	; MSDOS 6.0
 28423                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 28424                                  	;cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 28425                                  	;jne	short scan_buf_queue
 28426                                  
 28427                                  	; MSDOS 3.3
 28428                                  	;mov	di,[DI]
 28429                                  	;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 28430                                  	;
 28431                                  	; 15/08/2018
 28432 00005F47 C53D                    	lds	di,[di]
 28433                                  	;
 28434 00005F49 83FFFF                  	cmp	di,-1 ; 0FFFFh
 28435 00005F4C 75E7                    	jnz	short scan_buf_queue 
 28436                                  
 28437                                  end_scan:
 28438 00005F4E 16                      	push	ss
 28439 00005F4F 1F                      	pop	ds
 28440                                  	; 01/08/2018 - Retro DOS v3.0
 28441                                  	;cmp	byte [FAILERR],0
 28442                                  	;jne	short bad_flush
 28443                                  	;retn
 28444                                  ;bad_flush:
 28445                                  	;stc
 28446                                  	;retn
 28447                                  	; 01/08/2018 - Retro DOS v3.0
 28448 00005F50 803E[F602]01            	cmp	byte [FAILERR],1
 28449 00005F55 F5                      	cmc
 28450                                  flushbuf_retn:
 28451 00005F56 C3                      	retn
 28452                                  
 28453                                  ;----------------------------------------------------------------------------
 28454                                  ;
 28455                                  ; Procedure Name : CHECKFLUSH
 28456                                  ;
 28457                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 28458                                  ;	   DS:DI - pointer to buffer
 28459                                  ;
 28460                                  ; Function : Write out a buffer if it is dirty
 28461                                  ;
 28462                                  ; Carry set if problem (currently user FAILed to I 24)
 28463                                  ;
 28464                                  ;----------------------------------------------------------------------------
 28465                                  
 28466                                  CHECKFLUSH:
 28467                                  	; MSDOS 6.0
 28468 00005F57 B4FF                    	mov	ah, -1 ; 01/08/2018 Retro DOS v3.0
 28469                                  	;cmp	[di+4],ah
 28470 00005F59 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 28471 00005F5C 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 28472 00005F5E 38C4                    	CMP	AH,AL			; 
 28473 00005F60 7406                    	JZ	short DOBUFFER		; do this buffer
 28474                                  	;cmp	al,[di+4]
 28475 00005F62 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28476 00005F65 F8                      	CLC
 28477 00005F66 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 28478                                  DOBUFFER:
 28479                                  	;test	byte [di+5],40h
 28480 00005F68 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 28481 00005F6C 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 28482 00005F6E 50                      	PUSH	AX
 28483                                  	;push	word [di+4]
 28484 00005F6F FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 28485 00005F72 E80B00                  	CALL	BUFWRITE
 28486 00005F75 58                      	POP	AX
 28487 00005F76 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 28488                                  	;and	ah,0BFh
 28489 00005F78 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 28490                                  	;mov	[di+4],ax
 28491 00005F7B 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 28492                                  LEAVE_BUF:
 28493 00005F7E 58                      	POP	AX			; Search info
 28494                                  checkflush_retn:
 28495 00005F7F C3                      	retn
 28496                                  
 28497                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 28498                                  ;----------------------------------------------------------------------------
 28499                                  ;
 28500                                  ;	BufWrite writes a buffer to the disk, iff it's dirty.
 28501                                  ;
 28502                                  ;	ENTRY	DS:DI Points to the buffer
 28503                                  ;
 28504                                  ;	EXIT	Buffer marked free
 28505                                  ;		Carry set if error (currently user FAILed to I 24)
 28506                                  ;
 28507                                  ;	USES	All buf DS:DI
 28508                                  ;		HIGH_SECTOR
 28509                                  ;----------------------------------------------------------------------------
 28510                                  
 28511                                  BUFWRITE:
 28512                                  	; 10/09/2018
 28513                                  	; 01/08/2018 - Retro DOS v3.0
 28514                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 28515 00005F80 B8FF00                  	MOV	AX,00FFH
 28516                                  	;xchg	ax,[di+4]
 28517 00005F83 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 28518 00005F86 3CFF                    	CMP	AL,0FFH
 28519 00005F88 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 28520                                  	;test	ah,40h
 28521 00005F8A F6C440                  	test	AH,buf_dirty
 28522 00005F8D 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 28523                                  	; MSDOS 6.0
 28524                                  	;call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 28525                                  
 28526                                  ;hkn; SS override
 28527 00005F8F 363A06[D002]            	CMP	AL,[SS:WPERR]
 28528 00005F94 74E9                    	jz      short checkflush_retn	; If in WP error zap buffer
 28529                                  
 28530                                  ;hkn; SS override
 28531                                  	; MSDOS 6.0
 28532                                  	;MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 28533                                  	
 28534                                  	;les	bp,[di+10]
 28535 00005F96 C46D0A                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 28536                                  	;lea	bx,[di+16]
 28537 00005F99 8D5D10                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 28538                                  	;mov	dx,[di+6]
 28539 00005F9C 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 28540                                  	; MSDOS 6.0
 28541                                  	;MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 28542                                  
 28543                                  ;hkn; SS override
 28544                                  	;MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 28545                                  	;MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 28546                                  	; MSDOS 3.3
 28547                                  	; mov	cx,[DI+8]
 28548 00005F9F 8B4D08                  	mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 28549 00005FA2 88E8                    	MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 28550 00005FA4 30ED                    	XOR	CH,CH
 28551                                  	;mov	ah,ch ; MSDOS 3.3
 28552                                  
 28553                                  ;hkn; SS override for ALLOWED
 28554                                  	;mov	byte [SS:ALLOWED],18h
 28555 00005FA6 36C606[F702]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 28556                                  	;test	byte [di+5],8
 28557                                  	;test	ah,8
 28558 00005FAC F6C408                  	test	AH,buf_isDATA
 28559 00005FAF 7406                    	JZ	short NO_IGNORE
 28560                                  	;or	byte [SS:ALLOWED],20h
 28561 00005FB1 36800E[F702]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 28562                                  NO_IGNORE:
 28563 00005FB7 30E4                    	xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 28564                                  	; MSDOS 6.0
 28565                                  	;MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 28566                                  
 28567 00005FB9 57                      	PUSH	DI		; Save buffer pointer
 28568 00005FBA 31FF                    	XOR	DI,DI		; Indicate failure
 28569                                  
 28570                                  	;push	ds
 28571                                  	;push	bx
 28572                                  WRTAGAIN:
 28573 00005FBC 57                      	push	di
 28574 00005FBD 51                      	push	cx
 28575 00005FBE 50                      	push	ax
 28576 00005FBF B90100                  	MOV	CX,1
 28577 00005FC2 53                      	push	bx
 28578 00005FC3 52                      	push	dx
 28579 00005FC4 1E                      	push	ds
 28580                                  
 28581                                  ; Note:  As far as I can tell, all disk reads into buffers go through this point.  -mrw 10/88
 28582                                  
 28583                                  	; MSDOS 6.0
 28584                                  	;cmp	byte [BuffInHMA], 0
 28585                                  	;jz	short NBUFFINHMA
 28586                                  	;push	cx
 28587                                  	;push	es
 28588                                  	;mov	si,bx
 28589                                  	;mov	cx,[es:bp+DPB.SECTOR_SIZE]
 28590                                  	;shr	cx,1
 28591                                  	;les	di,[LoMemBuff]
 28592                                  	;mov	bx,di
 28593                                  	;cld
 28594                                  	;rep	movsw
 28595                                  	;push	es
 28596                                  	;pop	ds
 28597                                  	;pop	es
 28598                                  	;pop	cx
 28599                                  ;NBUFFINHMA:
 28600 00005FC5 E807E2                  	call	DWRITE		; Write out the dirty buffer
 28601 00005FC8 1F                      	pop	ds
 28602 00005FC9 5A                      	pop	dx
 28603 00005FCA 5B                      	pop	bx
 28604 00005FCB 58                      	pop	ax
 28605 00005FCC 59                      	pop	cx
 28606 00005FCD 5F                      	pop	di
 28607 00005FCE 7201                    	JC	short NOSET
 28608 00005FD0 47                      	INC	DI		; If at least ONE write succeedes, the operation
 28609                                  NOSET:				;	succeedes.
 28610 00005FD1 01C2                    	ADD	DX,AX
 28611 00005FD3 E2E7                    	LOOP	WRTAGAIN
 28612                                  	;pop	bx
 28613                                  	;pop	ds
 28614 00005FD5 09FF                    	OR	DI,DI		; Clears carry
 28615 00005FD7 7501                    	JNZ	short BWROK	; At least one write worked
 28616 00005FD9 F9                      	STC			; DI never got INCed, all writes failed.
 28617                                  BWROK:	
 28618 00005FDA 5F                      	POP	DI
 28619 00005FDB C3                      	retn
 28620                                  
 28621                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 28622                                  ;----------------------------------------------------------------------------
 28623                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 28624                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 28625                                  ;	SC_DRIVE even if SC is disabled to save the testing
 28626                                  ;	code and time
 28627                                  ;
 28628                                  ;	ENTRY	ES:BP = drive parameter block
 28629                                  ;
 28630                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 28631                                  ;		[SC_DRIVE]= drive #
 28632                                  ;
 28633                                  ;	USES	Flags
 28634                                  ;----------------------------------------------------------------------------
 28635                                  
 28636                                  ;procedure   SET_RQ_SC_PARMS,NEAR
 28637                                  ;
 28638                                  ;;hkn; SS override for all variables used in this procedure.
 28639                                  ;
 28640                                  ;	SAVE	<ax>
 28641                                  ;
 28642                                  ;	MOV	ax,ES:[BP].DPB_SECTOR_SIZE	; save sector size
 28643                                  ;	MOV	SC_SECTOR_SIZE,ax
 28644                                  ;
 28645                                  ;	MOV	al,ES:[BP].DPB_DRIVE		; save drive #
 28646                                  ;	MOV	SC_DRIVE,al
 28647                                  ;
 28648                                  ;	RESTORE <ax>
 28649                                  ;
 28650                                  ;srspx:	return
 28651                                  ;
 28652                                  ;EndProc SET_RQ_SC_PARMS 			;LB. return
 28653                                  
 28654                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 28655                                  ;----------------------------------------------------------------------------
 28656                                  ; Input:
 28657                                  ;	none
 28658                                  ; Function:
 28659                                  ;	increment dirty buffers count
 28660                                  ; Output:
 28661                                  ;	dirty buffers count is incremented
 28662                                  ;
 28663                                  ; All registers preserved
 28664                                  ;----------------------------------------------------------------------------
 28665                                  
 28666                                  ;procedure   INC_DIRTY_COUNT,NEAR
 28667                                  ;
 28668                                  ;; BUGBUG  ---- remove this routine
 28669                                  ;; BUGBUG ---- only one instruction is needed   (speed win, space loose)
 28670                                  ;	inc	[DirtyBufferCount]			;hkn;
 28671                                  ;	ret
 28672                                  ;EndProc INC_DIRTY_COUNT
 28673                                  
 28674                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 28675                                  ;----------------------------------------------------------------------------
 28676                                  ; Input:
 28677                                  ;	none
 28678                                  ; Function:
 28679                                  ;	decrement dirty buffers count
 28680                                  ; Output:
 28681                                  ;	dirty buffers count is decremented
 28682                                  ;
 28683                                  ; All registers preserved
 28684                                  ;----------------------------------------------------------------------------
 28685                                  
 28686                                  ;procedure   DEC_DIRTY_COUNT,NEAR
 28687                                  ;	cmp	[DirtyBufferCount], 0	;hkn;
 28688                                  ;	jz	ddcx			; BUGBUG - shouldn't it be an
 28689                                  ;	dec	[DirtyBufferCount]	; error condition to underflow here? ;hkn;
 28690                                  ;ddcx:	ret
 28691                                  ;
 28692                                  ;EndProc DEC_DIRTY_COUNT
 28693                                  
 28694                                  ;============================================================================
 28695                                  ; MSPROC.ASM, MSDOS 6.0, 1991
 28696                                  ;============================================================================
 28697                                  ; 02/08/2018 - Retro DOS v3.0
 28698                                  
 28699                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 28700                                  
 28701                                  ; Pseudo EXEC system call for DOS
 28702                                  
 28703                                  ;	TITLE	MSPROC - process maintenance
 28704                                  ;	NAME	MSPROC
 28705                                  
 28706                                  ; =========================================================================
 28707                                  ;**	Process related system calls and low level routines for DOS 2.X.
 28708                                  ;	I/O specs are defined in DISPATCH.
 28709                                  ;
 28710                                  ;	$WAIT
 28711                                  ;	$EXEC
 28712                                  ;	$Keep_process
 28713                                  ;	Stay_resident
 28714                                  ;	$EXIT
 28715                                  ;	$ABORT
 28716                                  ;	abort_inner
 28717                                  ;
 28718                                  ;	Modification history:
 28719                                  ;
 28720                                  ;		Created: ARR 30 March 1983
 28721                                  ;		AN000	version 4.0 jan. 1988
 28722                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 28723                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 28724                                  ;
 28725                                  ;		M000	added support for loading programs into UMBs 7/9/90
 28726                                  ;
 28727                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 28728                                  ;		       dossym.inc. 7/30/90
 28729                                  ;		M005 - Support for EXE programs with out STACK segment and 
 28730                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 28731                                  ;		       stack is provided at the end of the program. Note that
 28732                                  ;		       only SP is changed.
 28733                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 28734                                  ;
 28735                                  ;		M028 - 4b04 implementation
 28736                                  ;
 28737                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 28738                                  ;			in memory block >= 64K, sp = 0. If memory block
 28739                                  ;			obtained is <64K, point sp at the end of the memory
 28740                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 28741                                  ;			added for a stack segment which may be needed if it
 28742                                  ;			is loaded in low memory situations.
 28743                                  ;
 28744                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 28745                                  ;
 28746                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 28747                                  ;			a bad environment if it reached 32767 bytes. Changed
 28748                                  ;			to allow 32768 bytes of environment.
 28749                                  ;
 28750                                  ;		M047 - Release the allocated UMB when we failed to load a 
 28751                                  ;		       COM file high. Also ensure that if the biggest block
 28752                                  ;		       into which we load the com file is less than 64K then
 28753                                  ;		       we provide atleast 256 bytes of stack to the user.
 28754                                  ;
 28755                                  ;		M050 - Made Lie table search CASE insensitive
 28756                                  ;
 28757                                  ;		M060 - Removed special version table from the kernal and
 28758                                  ;                      put it in a device drive which puts the address
 28759                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 28760                                  ;		       as a DWORD.
 28761                                  ;
 28762                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 28763                                  ;		       entry do not try to load low if there is no space in
 28764                                  ;		       UMBs.
 28765                                  ;
 28766                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 28767                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 28768                                  ;		       change return address to LeaveDos if AL=5.
 28769                                  ;
 28770                                  ;               20-Jul-1992 bens    Added ifdef RESTRICTED_BUILD code that
 28771                                  ;                      controls building a version of MSDOS.SYS that only
 28772                                  ;                      runs programs from a fixed list (defined in the
 28773                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 28774                                  ;                      for details.  This feature is used to build a
 28775                                  ;                      "special" version of DOS that can be handed out to
 28776                                  ;                      OEM/ISV customers as part of a "service" disk.
 28777                                  ;
 28778                                  ; =========================================================================
 28779                                  
 28780                                  ;SAVEXIT 	EQU	10
 28781                                  
 28782                                  ;BREAK	<$WAIT - return previous process error code>
 28783                                  ; =========================================================================
 28784                                  ;	$WAIT - Return previous process error code.
 28785                                  ;
 28786                                  ;	Assembler usage:
 28787                                  ;
 28788                                  ;	    MOV     AH, WaitProcess
 28789                                  ;	    INT     int_command
 28790                                  ;
 28791                                  ;	ENTRY	none
 28792                                  ;	EXIT	(ax) = exit code
 28793                                  ;	USES	all
 28794                                  ; =========================================================================
 28795                                  
 28796                                  _$WAIT:
 28797                                  	; 02/08/2018 - Retro DOS v3.0
 28798                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 28799                                  
 28800 00005FDC 31C0                    	xor	AX,AX
 28801 00005FDE 368706[E202]            	xchg	AX,[ss:exit_code]
 28802 00005FE3 E917B7                  	jmp	SYS_RET_OK
 28803                                  
 28804                                  ; =========================================================================
 28805                                  ;BREAK <$exec - load/go a program>
 28806                                  ;	EXEC.ASM - EXEC System Call
 28807                                  ;
 28808                                  ;
 28809                                  ; Assembler usage:
 28810                                  ;	    lds     DX, Name
 28811                                  ;	    les     BX, Blk
 28812                                  ;	    mov     AH, Exec
 28813                                  ;	    mov     AL, FUNC
 28814                                  ;	    int     INT_COMMAND
 28815                                  ;
 28816                                  ;	AL  Function
 28817                                  ;	--  --------
 28818                                  ;	 0  Load and execute the program.
 28819                                  ;	 1  Load, create  the  program	header	but  do  not
 28820                                  ;	    begin execution.
 28821                                  ;	 3  Load overlay. No header created.
 28822                                  ;
 28823                                  ;	    AL = 0 -> load/execute program
 28824                                  ;
 28825                                  ;	    +---------------------------+
 28826                                  ;	    | WORD segment address of	|
 28827                                  ;	    | environment.		|
 28828                                  ;	    +---------------------------+
 28829                                  ;	    | DWORD pointer to ASCIZ	|
 28830                                  ;	    | command line at 80h	|
 28831                                  ;	    +---------------------------+
 28832                                  ;	    | DWORD pointer to default	|
 28833                                  ;	    | FCB to be passed at 5Ch	|
 28834                                  ;	    +---------------------------+
 28835                                  ;	    | DWORD pointer to default	|
 28836                                  ;	    | FCB to be passed at 6Ch	|
 28837                                  ;	    +---------------------------+
 28838                                  ;
 28839                                  ;	    AL = 1 -> load program
 28840                                  ;
 28841                                  ;	    +---------------------------+
 28842                                  ;	    | WORD segment address of	|
 28843                                  ;	    | environment.		|
 28844                                  ;	    +---------------------------+
 28845                                  ;	    | DWORD pointer to ASCIZ	|
 28846                                  ;	    | command line at 80h	|
 28847                                  ;	    +---------------------------+
 28848                                  ;	    | DWORD pointer to default	|
 28849                                  ;	    | FCB to be passed at 5Ch	|
 28850                                  ;	    +---------------------------+
 28851                                  ;	    | DWORD pointer to default	|
 28852                                  ;	    | FCB to be passed at 6Ch	|
 28853                                  ;	    +---------------------------+
 28854                                  ;	    | DWORD returned value of	|
 28855                                  ;	    | CS:IP			|
 28856                                  ;	    +---------------------------+
 28857                                  ;	    | DWORD returned value of	|
 28858                                  ;	    | SS:IP			|
 28859                                  ;	    +---------------------------+
 28860                                  ;
 28861                                  ;	    AL = 3 -> load overlay
 28862                                  ;
 28863                                  ;	    +---------------------------+
 28864                                  ;	    | WORD segment address where|
 28865                                  ;	    | file will be loaded.	|
 28866                                  ;	    +---------------------------+
 28867                                  ;	    | WORD relocation factor to |
 28868                                  ;	    | be applied to the image.	|
 28869                                  ;	    +---------------------------+
 28870                                  ;
 28871                                  ; Returns:
 28872                                  ;	    AX = error_invalid_function
 28873                                  ;	       = error_bad_format
 28874                                  ;	       = error_bad_environment
 28875                                  ;	       = error_not_enough_memory
 28876                                  ;	       = error_file_not_found
 28877                                  ; =========================================================================
 28878                                  ;
 28879                                  ;   Revision history:
 28880                                  ;
 28881                                  ;	 A000	version 4.00  Jan. 1988
 28882                                  ;
 28883                                  ; =========================================================================
 28884                                  
 28885                                  Exec_Internal_Buffer		EQU	OPENBUF
 28886                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 28887                                  
 28888                                  ; =========================================================================
 28889                                  
 28890                                  ;IF1		; warning message on buffers
 28891                                  ;%out	Please make sure that the following are contiguous and of the
 28892                                  ;%out	following sizes:
 28893                                  ;%out
 28894                                  ;%out	OpenBuf     128
 28895                                  ;%out	RenBuf	    128
 28896                                  ;%out	SearchBuf    53
 28897                                  ;%out	DummyCDS    curdirLen
 28898                                  ;ENDIF
 28899                                  
 28900                                  ; =========================================================================
 28901                                  
 28902                                  ; =========================================================================
 28903                                  ;
 28904                                  ; =========================================================================
 28905                                  
 28906                                  _$EXEC:
 28907                                  	; 02/08/2018 - Retro DOS v3.0
 28908                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 28909                                  
 28910                                  EXEC001S:
 28911                                  
 28912                                  	;LocalVar    Exec_Blk		,DWORD
 28913                                  	;LocalVar    Exec_Func		,BYTE
 28914                                  	;LocalVar    Exec_Load_High	,BYTE
 28915                                  	;LocalVar    Exec_FH		,WORD
 28916                                  	;LocalVar    Exec_Rel_Fac	,WORD
 28917                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 28918                                  	;LocalVar    Exec_Environ	,WORD
 28919                                  	;LocalVar    Exec_Size		,WORD
 28920                                  	;LocalVar    Exec_Load_Block	,WORD
 28921                                  	;LocalVar    Exec_DMA		,WORD
 28922                                  	;LocalVar    ExecNameLen 	,WORD
 28923                                  	;LocalVar    ExecName		,DWORD
 28924                                  	;
 28925                                  	;LocalVar    Exec_DMA_Save	,WORD
 28926                                  	;LocalVar    Exec_NoStack	,BYTE
 28927                                  
 28928                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28929                                  	;%define	Exec_Blk	dword [bp-4]
 28930                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 28931                                  	%define		Exec_BlkL	word [bp-4]	
 28932                                  	%define		Exec_BlkH	word [bp-2]
 28933                                  	%define		Exec_Func	byte [bp-5]
 28934                                  	%define		Exec_Load_High	byte [bp-6]
 28935                                  	%define		Exec_FH		word [bp-8]
 28936                                  	%define		Exec_Rel_Fac	word [bp-10]
 28937                                  	%define		Exec_Res_Len_Para word [bp-12]
 28938                                  	%define		Exec_Environ	word [bp-14]
 28939                                  	%define		Exec_Size	word [bp-16]
 28940                                  	%define		Exec_Load_Block	word [bp-18]
 28941                                  	%define		Exec_DMA	word [bp-20]
 28942                                  	%define		ExecNameLen	word [bp-22]
 28943                                  	;%define	ExecName	dword [bp-26]
 28944                                  	%define		ExecName	[bp-26] ; 09/08/2018
 28945                                  	%define		ExecNameL	word [bp-26]	
 28946                                  	%define		ExecNameH	word [bp-24]
 28947                                  	; MSDOS 6.0
 28948                                  	%define		Exec_DMA_Save	word [bp-28]
 28949                                  	%define		Exec_NoStack	byte [bp-29]
 28950                                  	
 28951                                  	; ==================================================================
 28952                                  	; validate function
 28953                                  	; ==================================================================
 28954                                  		      	
 28955                                  	;
 28956                                  	; M068 - Start
 28957                                  	;
 28958                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 28959                                  	; possibility that the count may not be decremented all the way to
 28960                                  	; 0. A typical case is if the program for which we intended to keep 
 28961                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 28962                                  	; calls), exits pre-maturely due to error conditions.
 28963                                  	;
 28964                                  
 28965                                  	; MSDOS 6.0
 28966                                  	;mov	byte [SS:A20OFF_COUNT], 0
 28967                                  
 28968                                  	;
 28969                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 28970                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 28971                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 28972                                  	;
 28973                                  	
 28974                                  	;cmp	al, 5			; Q: is this ExecReady call
 28975                                  	;jne	@f			; N: continue
 28976                                  					; Y: change ret addr. to LeaveDos.
 28977                                  	;pop	cx			; Note CX is not input to ExecReady
 28978                                  	;mov	cx, offset DOSCODE:LeaveDos
 28979                                  	;push	cx
 28980                                  ;@@:
 28981                                  	;
 28982                                  	; M068 - End
 28983                                  	;
 28984                                  
 28985                                  	;Enter
 28986                                  
 28987 00005FE6 55                      	push	bp
 28988 00005FE7 89E5                    	mov	bp,sp
 28989 00005FE9 83EC1E                  	sub	sp,30 ; MSDOS 6.0
 28990                                  	;sub	sp,26 ; MSDOS 3.3
 28991                                  
 28992                                  	; MSDOS 6.0
 28993                                  	;cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 28994                                  					; M030
 28995                                  	;jna	short Exec_Check_2
 28996                                  
 28997                                  	; MSDOS 3.3
 28998 00005FEC 3C03                    	cmp	AL,3
 28999 00005FEE 760E                    	jna	short Exec_Check_2
 29000                                  
 29001                                  Exec_Bad_Fun:
 29002 00005FF0 36C606[D102]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk 
 29003                                  					; Extended Error Locus	;smr;SS Override
 29004                                  	;mov	al,1
 29005 00005FF6 B001                    	mov	al,error_invalid_function
 29006                                  
 29007                                  Exec_Ret_Err:
 29008                                  	;Leave
 29009 00005FF8 89EC                    	mov	sp,bp
 29010 00005FFA 5D                      	pop	bp
 29011                                  	;transfer SYS_RET_ERR
 29012 00005FFB E90BB7                  	jmp	SYS_RET_ERR
 29013                                  
 29014                                  	; MSDOS 6.0
 29015                                  ;ExecReadyJ:
 29016                                  	;call	ExecReady		; M028
 29017                                  	;jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 29018                                  
 29019                                  Exec_Check_2:
 29020 00005FFE 3C02                    	cmp	AL,2			
 29021 00006000 74EE                    	jz	short Exec_Bad_Fun
 29022                                  
 29023                                  	; MSDOS 6.0
 29024                                  	;cmp	al,4			; 2 & 4 are not allowed
 29025                                  	;je	short Exec_Bad_Fun
 29026                                  	;
 29027                                  	;cmp	al,5			; M028 ; M030
 29028                                  	;je	short ExecReadyJ		; M028
 29029                                  
 29030                                  	;mov	[bp-4],bx
 29031 00006002 895EFC                  	mov	Exec_BlkL,BX		; stash args
 29032                                  	;mov	[bp-2],es
 29033 00006005 8C46FE                  	mov	Exec_BlkH,ES
 29034                                  	;mov	[bp-5],al
 29035 00006008 8846FB                  	mov	Exec_Func,AL
 29036                                  	;mov	byte [bp-6],0
 29037 0000600B C646FA00                	mov	Exec_Load_High,0
 29038                                  
 29039                                  	;mov	[bp-26],dx
 29040 0000600F 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 29041                                  	;mov	[bp-24],ds
 29042 00006012 8C5EE8                  	mov	ExecNameH,DS
 29043 00006015 89D6                    	mov	SI,DX			; move pointer to convenient place
 29044                                  	;invoke	DStrLen
 29045 00006017 E85EBF                  	call	DStrLen
 29046                                  	;mov	[bp-22],cx
 29047 0000601A 894EEA                  	mov	ExecNameLen,CX		; save length
 29048                                  
 29049                                  	; MSDOS 6.0
 29050                                  	;mov	al, [AllocMethod]	; M063: save alloc method in 
 29051                                  	;mov	[AllocMsave], al	; M063: AllocMsave
 29052                                  
 29053 0000601D 30C0                    	xor	AL,AL			; open for reading
 29054 0000601F 55                      	push	BP
 29055                                  
 29056                                  	; MSDOS 6.0
 29057                                  	;or	byte [DOS_FLAG], EXECOPEN ; this flag is set to indicate to 
 29058                                  					; the redir that this open call is
 29059                                  					; due to an exec.
 29060                                  
 29061                                  	;invoke	$OPEN			; is the file there?
 29062 00006020 E81710                  	call	_$OPEN
 29063                                  
 29064                                  	; MSDOS 6.0
 29065                                  	;pushf
 29066                                  	;and	byte [DOS_FLAG],~EXECOPEN; reset flag
 29067                                  	;popf
 29068                                  
 29069 00006023 5D                      	pop	BP
 29070                                  	;MSDOS 3.3
 29071 00006024 72D2                    	jc	short Exec_Ret_Err
 29072                                  
 29073                                  	;mov	[bp-8],ax
 29074 00006026 8946F8                  	mov	Exec_FH,AX
 29075 00006029 89C3                    	mov	BX,AX
 29076 0000602B 30C0                    	xor	AL,AL
 29077                                  	;invoke	$Ioctl
 29078 0000602D E888CF                  	call	_$IOCTL
 29079 00006030 7207                    	jc	short Exec_BombJ
 29080                                  
 29081                                  	;test	dl,80h
 29082 00006032 F6C280                  	test	DL,devid_ISDEV
 29083 00006035 740A                    	jz	short Exec_Check_Environ
 29084                                  
 29085                                  	;mov	al,2
 29086 00006037 B002                    	mov	AL,error_file_not_found
 29087                                  Exec_BombJ:
 29088 00006039 E9CC00                  	jmp	Exec_Bomb
 29089                                  
 29090                                  BadEnv:
 29091                                  	;mov	al,0Ah
 29092 0000603C B00A                    	mov	AL,error_bad_environment
 29093 0000603E E9C700                  	jmp	Exec_Bomb
 29094                                  
 29095                                  Exec_Check_Environ:
 29096                                  	;mov	word [bp-18],0
 29097 00006041 C746EE0000              	mov	Exec_Load_Block,0
 29098                                  	;mov	word [bp-14],0
 29099 00006046 C746F20000              	mov	Exec_Environ,0
 29100                                  					; overlays... no environment
 29101                                  	;test	byte [bp-5],2
 29102 0000604B F646FB02                	test	Exec_Func,exec_func_overlay
 29103 0000604F 7554                    	jnz	short Exec_Read_Header
 29104                                  
 29105                                  	;lds	si,[bp-4]
 29106 00006051 C576FC                  	lds	SI,Exec_Blk		; get block
 29107 00006054 8B04                    	mov	ax,[SI]
 29108                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 29109 00006056 09C0                    	or	AX,AX
 29110 00006058 750C                    	jnz	short Exec_Scan_Env
 29111                                  
 29112 0000605A 368E1E[DE02]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 29113                                  	;mov	ax,[44]
 29114 0000605F A12C00                  	mov	AX,[PDB.ENVIRON]
 29115                                  
 29116                                  ; MSDOS 6.0
 29117                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 29118                                  ;
 29119                                  ; Exec_environ is being correctly initialized after the environment has been
 29120                                  ; allocated and copied form the parent's env. It must not be initialized here.
 29121                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 29122                                  ; parent's environment.
 29123                                  ;	mov	Exec_Environ,AX
 29124                                  ;
 29125                                  ;----------------------------------------------------------------------------
 29126                                  
 29127                                  	;mov	[bp-14],ax
 29128                                  	;mov	Exec_Environ,ax
 29129                                  
 29130 00006062 09C0                    	or	AX,AX
 29131 00006064 743F                    	jz	short Exec_Read_Header
 29132                                  
 29133                                  Exec_Scan_Env:
 29134 00006066 8EC0                    	mov	ES,AX
 29135 00006068 31FF                    	xor	DI,DI
 29136                                  	;mov	cx,7FFFh ; MSDOS 3.3
 29137 0000606A B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 29138 0000606D 30C0                    	xor	AL,AL
 29139                                  
 29140                                  Exec_Get_Environ_Len:
 29141 0000606F F2AE                    	repnz	scasb			; find that nul byte
 29142 00006071 75C9                    	jnz	short BadEnv
 29143                                  
 29144 00006073 49                      	dec	CX			; Dec CX for the next nul byte test
 29145 00006074 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 29146                                  
 29147 00006076 AE                      	scasb				; is there another nul byte?
 29148 00006077 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 29149                                  
 29150 00006079 57                      	push	DI
 29151                                  	;lea	bx,[DI+11h]
 29152 0000607A 8D5D11                  	lea	BX,[DI+0Fh+2]
 29153                                  	;add	bx,[bp-22]
 29154 0000607D 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 29155                                  					; remember argv[0] length
 29156                                  					; round up and remember argc
 29157 00006080 B104                    	mov	CL,4
 29158 00006082 D3EB                    	shr	BX,CL			; number of paragraphs needed
 29159 00006084 06                      	push	ES
 29160                                  	;invoke	$Alloc			; can we get the space?
 29161 00006085 E8CA04                  	call	_$ALLOC
 29162 00006088 1F                      	pop	DS
 29163 00006089 59                      	pop	CX
 29164 0000608A 7302                    	jnc	short Exec_Save_Environ
 29165                                  
 29166 0000608C EB74                    	jmp	SHORT Exec_No_Mem	; nope... cry and sob
 29167                                  
 29168                                  Exec_Save_Environ:
 29169 0000608E 8EC0                    	mov	ES,AX
 29170                                  	;mov	[bp-14],ax
 29171 00006090 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 29172 00006093 31F6                    	xor	SI,SI
 29173 00006095 89F7                    	mov	DI,SI
 29174 00006097 F3A4                    	rep	movsb			; copy the environment
 29175 00006099 B80100                  	mov	AX,1
 29176 0000609C AB                      	stosw
 29177                                  	;lds	si,[bp-26]
 29178 0000609D C576E6                  	lds	SI,ExecName
 29179                                  	;mov	cx,[bp-22]
 29180 000060A0 8B4EEA                  	mov	CX,ExecNameLen
 29181 000060A3 F3A4                    	rep	movsb
 29182                                  
 29183                                  Exec_Read_Header:
 29184                                  	; We read in the program header into the above data area and
 29185                                  	; determine where in this memory the image will be located.
 29186                                  
 29187                                  	;Context DS
 29188 000060A5 16                      	push	ss
 29189 000060A6 1F                      	pop	ds
 29190                                  	;mov	cx,26
 29191 000060A7 B91A00                  	mov	CX,Exec_Header_Len	; header size
 29192 000060AA BA[1E14]                	mov	DX,exec_signature
 29193 000060AD 06                      	push	ES
 29194 000060AE 1E                      	push	DS
 29195 000060AF E87803                  	call	ExecRead
 29196 000060B2 1F                      	pop	DS
 29197 000060B3 07                      	pop	ES
 29198 000060B4 7250                    	jc	short Exec_Bad_File
 29199                                  
 29200 000060B6 09C0                    	or	AX,AX
 29201 000060B8 744C                    	jz	short Exec_Bad_File
 29202                                  	;cmp	ax,26
 29203 000060BA 83F81A                  	cmp	AX,Exec_Header_Len	; did we read the right number?
 29204 000060BD 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 29205                                  
 29206 000060BF F706[2A14]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 29207 000060C5 7504                    	jnz	short Exec_Check_Sig
 29208                                  
 29209                                  	;mov	byte [bp-6],0FFh
 29210 000060C7 C646FAFF                	mov	Exec_Load_High,-1
 29211                                  
 29212                                  Exec_Check_Sig:
 29213 000060CB A1[1E14]                	mov	AX,[exec_signature]	; rms;NSS
 29214                                  	;cmp	ax,5A4Dh ; 'MZ'
 29215 000060CE 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 29216 000060D1 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 29217                                  
 29218                                  	;cmp	ax,4D5Ah ; 'ZM'
 29219 000060D3 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 29220 000060D6 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 29221                                  
 29222                                  Exec_Com_Filej:
 29223 000060D8 E9A201                  	jmp	Exec_Com_File
 29224                                  
 29225                                  	; We have the program header... determine memory requirements
 29226                                  
 29227                                  Exec_Save_Start:
 29228 000060DB A1[2214]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 29229 000060DE B105                    	mov	CL,5			; convert to paragraphs
 29230 000060E0 D3E0                    	shl	AX,CL
 29231 000060E2 2B06[2614]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs;rms;NSS
 29232                                  	;mov	[bp-12],ax
 29233 000060E6 8946F4                  	mov	Exec_Res_Len_Para,AX
 29234                                  
 29235                                  		; Do we need to allocate memory?
 29236                                  		; Yes if function is not load-overlay
 29237                                  
 29238                                  	;test	byte [bp-5],2
 29239 000060E9 F646FB02                	test	Exec_Func,exec_func_overlay
 29240 000060ED 742C                    	jz	short Exec_Allocate	; allocation of space
 29241                                  
 29242                                  		; get load address from block
 29243                                  
 29244                                  	;les	di,[bp-4]
 29245 000060EF C47EFC                  	les	DI,Exec_Blk
 29246 000060F2 268B05                  	mov	ax,[es:di]
 29247                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 29248                                  	;mov	[bp-20],ax
 29249 000060F5 8946EC                  	mov	Exec_DMA,AX
 29250 000060F8 268B4502                	mov	AX,[ES:DI+EXEC3.reloc_fac]
 29251                                  	;mov	[bp-10],ax
 29252 000060FC 8946F6                  	mov	Exec_Rel_Fac,AX
 29253                                  	; 10/08/2018
 29254 000060FF E9AB00                  	jmp	Exec_Find_Res		; M000
 29255                                  
 29256                                  Exec_No_Mem:
 29257                                  	;mov	al,8
 29258 00006102 B008                    	mov	AL,error_not_enough_memory
 29259 00006104 EB02                    	jmp	short Exec_Bomb
 29260                                  
 29261                                  Exec_Bad_File:
 29262                                  	;mov	al,0Bh
 29263 00006106 B00B                    	mov	AL,error_bad_format
 29264                                  
 29265                                  Exec_Bomb:
 29266                                  	;mov	bx,[bp-8]
 29267 00006108 8B5EF8                  	mov	BX,Exec_FH
 29268 0000610B E82B03                  	call	Exec_Dealloc
 29269                                  	;LeaveCrit CritMem
 29270 0000610E E863BF                  	call	LcritMem
 29271                                  	;save	<AX,BP>
 29272 00006111 50                      	push	ax
 29273 00006112 55                      	push	bp
 29274                                  	;invoke	$CLOSE
 29275 00006113 E8B10C                  	call	_$CLOSE
 29276                                  	;restore <BP,AX>
 29277 00006116 5D                      	pop	bp
 29278 00006117 58                      	pop	ax
 29279 00006118 E9DDFE                  	jmp	Exec_Ret_Err
 29280                                  
 29281                                  Exec_Chk_Mem: 
 29282                                  	; MSDOS 6.0    			; M063 - Start
 29283                                  	;mov	al,[AllocMethod]	; save current alloc method in ax
 29284                                  	;mov	bl,[AllocMsave]
 29285                                  	;mov	[AllocMethod], bl	; restore original allocmethod
 29286                                  	;test	bl,HIGH_ONLY 		; Q: was the HIGH_ONLY bit already set
 29287                                  	;jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 29288                                  	;				; N: continue
 29289                                  	;
 29290                                  	;test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 29291                                  	;jz	short Exec_No_Mem	; N: no memory 
 29292                                  	;mov	ax,[save_AX]		; Y: restore ax and
 29293                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 29294                                  	;				; M063 - End
 29295                                  
 29296                                  Exec_Allocate:
 29297                                  	; 09/09/2018
 29298                                  
 29299                                  	; M005 - START
 29300                                  	; If there is no STACK segment for this exe file and if this
 29301                                  	; not an overlay and the resident size is less than 64K - 
 29302                                  	; 256 bytes we shall add 256bytes bytes to the programs 
 29303                                  	; resident memory requirement and set Exec_SP to this value.
 29304                                  
 29305                                  	; MSDOS 6.0
 29306 0000611B C646E300                	mov	Exec_NoStack,0
 29307 0000611F 833E[2C14]00            	cmp	word [exec_SS],0	; Q: is there a stack seg
 29308 00006124 7512                    	jne	short ea1		; Y: continue normal processing
 29309 00006126 833E[2E14]00            	cmp	word [exec_SP],0	; Q: is there a stack ptr
 29310 0000612B 750B                    	jne	short ea1		; Y: continue normal processing
 29311                                  
 29312 0000612D FE46E3                  	inc	Exec_NoStack
 29313 00006130 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 29314 00006133 7303                    	jae	short ea1		; Y: don't set Exec_SP
 29315                                  
 29316 00006135 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 29317                                  ea1:
 29318                                  	; M005 - END
 29319                                  
 29320                                  	; MSDOS 6.0			; M000 - start
 29321                                  	;test	byte [AllocMethod],HIGH_FIRST
 29322                                  	;				; Q: is the alloc strat high_first
 29323                                  	;jz	short Exec_Norm_Alloc	; N: normal allocate
 29324                                  	;				; Y: set high_only bit
 29325                                  	;or	byte [AllocMethod],HIGH_ONLY
 29326                                  	;				; M000 - end
 29327                                  
 29328                                  ;Exec_Norm_Alloc:
 29329                                  	;mov	[save_ax],ax		; M000: save ax for possible 2nd  
 29330                                  					; M000: attempt at allocating memory
 29331                                  	;;push	ax			; M000
 29332                                  
 29333                                  	; MSDOS 3.3
 29334 00006138 50                      	push	ax	
 29335                                  
 29336 00006139 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 29337 0000613C 1E                      	push	DS
 29338                                  	;invoke	$Alloc			; should have carry set and BX has max
 29339 0000613D E81204                  	call	_$ALLOC
 29340 00006140 1F                      	pop	DS
 29341                                  
 29342                                  	; MSDOS 6.0
 29343                                  	;mov	ax,[save_ax]		; M000
 29344                                  	;;pop	AX			; M000
 29345                                  
 29346                                  	; MSDOS 3.3
 29347 00006141 58                      	pop	ax
 29348                                  
 29349 00006142 83C010                  	add	AX,10h			; room for header
 29350 00006145 83FB11                  	cmp	BX,11h			; enough room for a header
 29351                                  	; MSDOS 6.0
 29352                                  	;jb	short Exec_Chk_Mem	; M000
 29353                                  	; MSDOS 3.3	
 29354 00006148 72B8                    	jb	short Exec_No_Mem
 29355                                  
 29356 0000614A 39D8                    	cmp	AX,BX			; is there enough for bare image?
 29357                                  	; MSDOS 6.0
 29358                                  	;ja	short Exec_Chk_Mem	; M000
 29359                                  	; MSDOS 3.3
 29360 0000614C 77B4                    	ja	short Exec_No_Mem
 29361                                  
 29362                                  	;test	byte [bp-6],0FFh
 29363 0000614E F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 29364 00006152 7518                    	jnz	short Exec_BX_Max	; use max
 29365                                  
 29366                                  	; 09/09/2018
 29367                                  
 29368 00006154 0306[2814]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 29369                                  	; MSDOS 6.0
 29370                                  	;jc	short Exec_Chk_Mem		; M000
 29371                                  	; MSDOS 3.3
 29372 00006158 72A8                    	jc	short Exec_No_Mem
 29373                                  
 29374 0000615A 39D8                    	cmp	AX,BX			; enough space?
 29375                                  	; MSDOS 6.0
 29376                                  	;ja	short Exec_Chk_Mem	; M000: nope...	
 29377                                  	; MSDOS 3.3
 29378 0000615C 77A4                    	ja	short Exec_No_Mem
 29379                                  
 29380 0000615E 2B06[2814]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 29381 00006162 0306[2A14]              	add	AX,[exec_max_BSS] 	; go for the MAX
 29382 00006166 7204                    	jc	short Exec_BX_Max
 29383                                  
 29384 00006168 39D8                    	cmp	AX,BX
 29385 0000616A 7602                    	jbe	short Exec_Got_Block
 29386                                  
 29387                                  Exec_BX_Max:
 29388 0000616C 89D8                    	mov	AX,BX
 29389                                  
 29390                                  Exec_Got_Block:
 29391                                  	; 03/08/2018 - Retro DOS v3.0
 29392                                  
 29393 0000616E 1E                      	push	DS
 29394 0000616F 89C3                    	mov	BX,AX
 29395                                  	;mov	[bp-16],bx
 29396 00006171 895EF0                  	mov	Exec_Size,BX
 29397                                  	;invoke	$Alloc			; get the space
 29398 00006174 E8DB03                  	call	_$ALLOC
 29399 00006177 1F                      	pop	DS
 29400                                  	; MSDOS 6.0
 29401                                  	;jc	short Exec_Chk_Mem	; M000
 29402                                  	; MSDOS 3.3
 29403 00006178 7288                    	jc	short Exec_No_Mem
 29404                                  
 29405                                  	; MSDOS 6.0
 29406                                  	;mov	cl,[AllocMsave]		; M063: 
 29407                                  	;mov	[AllocMethod],cl	; M063: restore allocmethod
 29408                                  
 29409                                  ;M029; Begin changes
 29410                                  ; This code does special handling for programs with no stack segment. If so,
 29411                                  ;check if the current block is larger than 64K. If so, we do not modify
 29412                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 29413                                  ;case Exec_SS is not changed.
 29414                                  ;
 29415                                  	; MSDOS 6.0
 29416 0000617A 807EE300                	cmp	Exec_NoStack,0
 29417                                  	;je	@f
 29418 0000617E 7412                    	je	short ea2
 29419                                  
 29420 00006180 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 29421                                  	;jae	@f			; Y: Exec_SP = 0
 29422 00006184 730C                    	jae	short ea2
 29423                                  ;
 29424                                  ;Make Exec_SP point at the top of the memory block
 29425                                  ;
 29426 00006186 B104                    	mov	cl,4
 29427 00006188 D3E3                    	shl	bx,cl			; get byte offset
 29428 0000618A 81EB0001                	sub	bx,100h			; take care of PSP
 29429 0000618E 891E[2E14]              	mov	[exec_SP],bx		; Exec_SP = top of block
 29430                                  ea2:
 29431                                  ;@@:
 29432                                  ;
 29433                                  ;M029; end changes
 29434                                  ;
 29435                                  	;mov	[bp-18],ax
 29436 00006192 8946EE                  	mov	Exec_Load_Block,AX
 29437 00006195 83C010                  	add	AX,10h
 29438                                  	;test	byte [bp-6],0FFh
 29439 00006198 F646FAFF                	test	Exec_Load_High,-1
 29440 0000619C 7409                    	jz	short Exec_Use_AX	; use ax for load info
 29441                                  
 29442                                  	;add	ax,[bp-16]
 29443 0000619E 0346F0                  	add	AX,Exec_Size		; go to end
 29444                                  	;sub	ax,[bp-12]
 29445 000061A1 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 29446 000061A4 83E810                  	sub	AX,10h			; drop off pdb
 29447                                  
 29448                                  Exec_Use_AX:
 29449                                  	;mov	[bp-10],ax
 29450 000061A7 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 29451                                  	;mov	[bp-20],ax
 29452 000061AA 8946EC                  	mov	Exec_DMA,AX		; beginning of dma
 29453                                  
 29454                                  	; Determine the location in the file of the beginning of
 29455                                  	; the resident
 29456                                  
 29457                                  Exec_Find_Res:
 29458                                  	; MSDOS 6.0
 29459                                  	;mov	dx,[bp-20]
 29460 000061AD 8B56EC                  	mov	DX,Exec_DMA
 29461                                  	;mov	[bp-28],dx
 29462 000061B0 8956E4                  	mov	Exec_DMA_Save,DX
 29463                                  
 29464                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29465 000061B3 8B16[2614]              	mov	DX,[exec_par_dir]
 29466 000061B7 52                      	push	DX
 29467 000061B8 B104                    	mov	CL,4
 29468 000061BA D3E2                    	shl	DX,CL			; low word of location
 29469 000061BC 58                      	pop	AX
 29470 000061BD B10C                    	mov	CL,12
 29471 000061BF D3E8                    	shr	AX,CL			; high word of location
 29472 000061C1 89C1                    	mov	CX,AX			; CX <- high
 29473                                  
 29474                                  		; Read in the resident image (first, seek to it)
 29475                                  	;mov	bx,[bp-8]
 29476 000061C3 8B5EF8                  	mov	BX,Exec_FH
 29477 000061C6 1E                      	push	DS
 29478 000061C7 30C0                    	xor	AL,AL
 29479                                  	;invoke	$Lseek			; Seek to resident
 29480 000061C9 E86D0D                  	call	_$LSEEK
 29481 000061CC 1F                      	pop	DS
 29482 000061CD 7303                    	jnc	short Exec_Big_Read
 29483                                  
 29484 000061CF E936FF                  	jmp	Exec_Bomb
 29485                                  
 29486                                  Exec_Big_Read:				; Read resident into memory
 29487                                  	;mov	bx,[bp-12]
 29488 000061D2 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 29489 000061D5 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 29490 000061D9 7203                    	jb	short Exec_Read_OK
 29491                                  
 29492 000061DB BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 29493                                  
 29494                                  Exec_Read_OK:
 29495                                  	;sub	[bp-12],bx
 29496 000061DE 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 29497 000061E1 53                      	push	BX
 29498 000061E2 B104                    	mov	CL,4
 29499 000061E4 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 29500 000061E6 89D9                    	mov	CX,BX			; Count in correct register
 29501 000061E8 1E                      	push	DS
 29502                                  	;mov	ds,[bp-20]
 29503 000061E9 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 29504                                  
 29505 000061EC 31D2                    	xor	DX,DX
 29506 000061EE 51                      	push	CX			; Save our count
 29507 000061EF E83802                  	call	ExecRead
 29508 000061F2 59                      	pop	CX			; Get old count to verify
 29509 000061F3 1F                      	pop	DS
 29510 000061F4 7248                    	jc	short Exec_Bad_FileJ
 29511                                  
 29512 000061F6 39C1                    	cmp	CX,AX			; Did we read enough?
 29513 000061F8 5B                      	pop	BX			; Get paragraph count back
 29514 000061F9 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 29515                                  
 29516                                  	; The read did not match the request. If we are off by 512
 29517                                  	; bytes or more then the header lied and we have an error.
 29518                                  
 29519 000061FB 29C1                    	sub	CX,AX
 29520 000061FD 81F90002                	cmp	CX,512
 29521 00006201 733B                    	jae	short Exec_Bad_FileJ
 29522                                  
 29523                                  	; We've read in CX bytes... bump DTA location
 29524                                  
 29525                                  ExecCheckEnd:
 29526                                  	;add	[bp-20],bx
 29527 00006203 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 29528                                  	;test	word [bp-12],0FFFFh
 29529 00006206 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 29530 0000620B 75C5                    	jnz	short Exec_Big_Read
 29531                                  
 29532                                  	; The image has now been read in. We must perform relocation
 29533                                  	; to the current location.
 29534                                  
 29535                                  exec_do_reloc:
 29536                                  	;mov	cx,[bp-10]
 29537 0000620D 8B4EF6                  	mov	CX,Exec_Rel_Fac
 29538 00006210 A1[2C14]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 29539 00006213 01C8                    	add	AX,CX			; and relocate him
 29540 00006215 A3[1814]                	mov	[exec_init_SS],AX 	; rms;NSS
 29541                                  
 29542 00006218 A1[2E14]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 29543 0000621B A3[1614]                	mov	[exec_init_SP],AX 	; rms;NSS
 29544                                  
 29545 0000621E C406[3214]              	les	AX,[exec_IP]		; rms;NSS
 29546 00006222 A3[1A14]                	mov	[exec_init_IP],AX 	; rms;NSS
 29547 00006225 8CC0                    	mov	AX,ES			; rms;NSS
 29548 00006227 01C8                    	add	AX,CX			; relocated...
 29549 00006229 A3[1C14]                	mov	[exec_init_CS],AX 	; rms;NSS
 29550                                  
 29551 0000622C 31C9                    	xor	CX,CX
 29552 0000622E 8B16[3614]              	mov	DX,[exec_rle_table]	; rms;NSS
 29553                                  	;mov	bx,[bp-8]
 29554 00006232 8B5EF8                  	mov	BX,Exec_FH
 29555 00006235 1E                      	push	DS
 29556 00006236 31C0                    	xor	AX,AX
 29557                                  	;invoke	$Lseek
 29558 00006238 E8FE0C                  	call	_$LSEEK
 29559 0000623B 1F                      	pop	DS
 29560 0000623C 7303                    	jnc	short exec_get_entries
 29561                                  
 29562                                  Exec_Bad_FileJ:
 29563 0000623E E9C5FE                  	jmp	Exec_Bad_File
 29564                                  
 29565                                  exec_get_entries:
 29566 00006241 8B16[2414]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 29567                                  
 29568                                  exec_read_reloc:
 29569 00006245 52                      	push	DX
 29570                                  	;mov	dx,OPENBUF
 29571 00006246 BA[6003]                	mov	DX,Exec_Internal_Buffer
 29572                                  	;mov	cx,388
 29573 00006249 B98401                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (390>>2)<<2
 29574 0000624C 1E                      	push	DS
 29575 0000624D E8DA01                  	call	ExecRead
 29576 00006250 07                      	pop	ES
 29577 00006251 5A                      	pop	DX
 29578 00006252 72EA                    	jc	short Exec_Bad_FileJ
 29579                                  
 29580                                  	;mov	cx,97
 29581 00006254 B96100                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (390>>2)
 29582                                  					; Pointer to byte location in header
 29583                                  	;mov	di,OPENBUF
 29584 00006257 BF[6003]                	mov	DI,Exec_Internal_Buffer
 29585                                  	;mov	si,[bp-10]
 29586 0000625A 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 29587                                  
 29588                                  exec_reloc_one:
 29589 0000625D 09D2                    	or	DX,DX			; Any more entries?
 29590 0000625F 7416                    	jz	short Exec_Set_PDBJ
 29591                                  
 29592                                  exec_get_addr:
 29593 00006261 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 29594 00006264 8CD8                    	mov	AX,DS			; Relocate address of item
 29595                                  
 29596                                  	; MSDOS 6.0
 29597                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 29598                                  	;add	ax,[bp-28]
 29599 00006266 0346E4                  	add	AX,Exec_DMA_Save
 29600                                  
 29601 00006269 8ED8                    	mov	DS,AX
 29602 0000626B 0137                    	add	[BX],SI
 29603 0000626D 83C704                  	add	DI,4
 29604 00006270 4A                      	dec	DX
 29605 00006271 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 29606                                  
 29607                                  	; We've exhausted a single buffer's worth. Read in the next
 29608                                  	; piece of the relocation table.
 29609                                  
 29610 00006273 06                      	push	ES
 29611 00006274 1F                      	pop	DS
 29612 00006275 EBCE                    	jmp	short exec_read_reloc
 29613                                  
 29614                                  Exec_Set_PDBJ:
 29615                                  
 29616                                  	; MSDOS 6.0
 29617                                  	;
 29618                                  	; We now determine if this is a buggy exe packed file and if 
 29619                                  	; so we patch in the right code. Note that fixexepatch will
 29620                                  	; point to a ret if dos loads low. The load segment as 
 29621                                  	; determined above will be in exec_dma_save
 29622                                  	;
 29623                                  	;push	es
 29624                                  	;push	ax			; M030
 29625                                  	;push	cx			; M030
 29626                                  	;mov	es,Exec_DMA_Save
 29627                                  	;mov	ax,[exec_init_CS]	; M030
 29628                                  	;mov	cx,[exec_init_IP]	; M030
 29629                                  	;call	word [fixexepatch]
 29630                                  	;call	word [Rational386PatchPtr]
 29631                                  	;pop	cx			; M030
 29632                                  	;pop	ax			; M030
 29633                                  	;pop	es
 29634                                  
 29635 00006277 E99D00                  	jmp	Exec_Set_PDB
 29636                                  
 29637                                  Exec_No_Memj:
 29638 0000627A E985FE                  	jmp	Exec_No_Mem
 29639                                  
 29640                                  	; we have a .COM file.	First, determine if we are merely
 29641                                  	; loading an overlay.
 29642                                  
 29643                                  Exec_Com_File:
 29644                                  	;test	byte [bp-5],2
 29645 0000627D F646FB02                	test	Exec_Func,exec_func_overlay
 29646 00006281 740C                    	jz	short Exec_Alloc_Com_File
 29647                                  	;lds	si,[bp-4]
 29648 00006283 C576FC                  	lds	SI,Exec_Blk		; get arg block
 29649 00006286 AD                      	lodsw				; get load address
 29650                                  	;mov	[bp-20],ax
 29651 00006287 8946EC                  	mov	Exec_DMA,AX
 29652 0000628A B8FFFF                  	mov	AX,0FFFFh
 29653 0000628D EB34                    	jmp	SHORT Exec_Read_Block	; read it all!
 29654                                  
 29655                                  Exec_Chk_Com_Mem:			
 29656                                  	; MSDOS 6.0	     		; M063 - Start
 29657                                  	;mov	al,[AllocMethod]	; save current alloc method in ax
 29658                                  	;mov	bl,[AllocMsave]
 29659                                  	;mov	[AllocMethod],bl	; restore original allocmethod
 29660                                  	;test	bl,HIGH_ONLY 		; Q: was the HIGH_ONLY bit already set
 29661                                  	;jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 29662                                  	;				; N: continue
 29663                                  	;
 29664                                  	;test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 29665                                  	;jz	short Exec_No_Memj	; N: no memory 
 29666                                  	;
 29667                                  	;mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 29668                                  	;xor	bx,bx			; M047: bx => free arena
 29669                                  	;call	ChangeOwner		; M047: free this block
 29670                                  	;
 29671                                  	;jmp	short Exec_Norm_Com_Alloc
 29672                                  	;				; M063 - End
 29673                                  	
 29674                                  	; We must allocate the max possible size block (ick!)
 29675                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 29676                                  	; size of block.
 29677                                  
 29678                                  Exec_Alloc_Com_File:
 29679                                  
 29680                                  	; MSDOS 6.0			; M000 -start
 29681                                  	;test	byte [AllocMethod],HIGH_FIRST
 29682                                  	;				; Q: is the alloc strat high_first
 29683                                  	;jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 29684                                  	;				; Y: set high_only bit
 29685                                  	;or	byte [AllocMethod],HIGH_ONLY
 29686                                  	;				; M000 - end
 29687                                  ;Exec_Norm_Com_Alloc:			; M000
 29688                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29689 0000628F BBFFFF                  	mov	BX,0FFFFh
 29690                                  	;invoke	$Alloc			; largest piece available as error
 29691 00006292 E8BD02                  	call	_$ALLOC
 29692 00006295 09DB                    	or	BX,BX
 29693                                  	; MSDOS 6.0
 29694                                  	;jz	short Exec_Chk_Com_Mem	; M000
 29695                                  	; MSDOS 3.3
 29696 00006297 74E1                    	jz	short Exec_No_Memj
 29697                                  
 29698                                  	;mov	[bp-16],bx
 29699 00006299 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 29700 0000629C 53                      	push	BX
 29701                                  	;invoke	$ALLOC			; largest piece available as error
 29702 0000629D E8B202                  	call	_$ALLOC
 29703 000062A0 5B                      	pop	BX			; get size of block...
 29704                                  	;mov	[bp-18],ax
 29705 000062A1 8946EE                  	mov	Exec_Load_Block,AX
 29706 000062A4 83C010                  	add	AX,10h			; increment for header
 29707                                  	;mov	[bp-20],ax
 29708 000062A7 8946EC                  	mov	Exec_DMA,AX
 29709 000062AA 31C0                    	xor	AX,AX			; presume 64K read...
 29710 000062AC 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 29711 000062B0 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 29712                                  
 29713 000062B2 89D8                    	mov	AX,BX			; convert size to bytes
 29714 000062B4 B104                    	mov	CL,4
 29715 000062B6 D3E0                    	shl	AX,CL
 29716                                  	; MSDOS 6.0
 29717 000062B8 3D0002                          cmp     AX,200h                 ; enough memory for PSP and stack?
 29718                                  ;	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 29719                                  ;	;jbe	short Exec_No_Memj	; M000: jump if not
 29720                                  	; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 29721                                  	;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 29722 000062BB 76BD                    	jbe	short Exec_No_Memj	; M000: jump if not
 29723                                  
 29724                                  					; M047: size of the block is < 64K
 29725 000062BD 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 29726                                  
 29727                                  Exec_Read_Com:
 29728                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29729 000062C0 2D0001                  	sub	AX,100h 		; remember size of psp
 29730                                  
 29731                                  Exec_Read_Block:
 29732 000062C3 50                      	push	AX			; save number to read
 29733                                  	;mov	bx,[bp-8]
 29734 000062C4 8B5EF8                  	mov	BX,Exec_FH		; of com file
 29735 000062C7 31C9                    	xor	CX,CX			; but seek to 0:0
 29736 000062C9 89CA                    	mov	DX,CX
 29737 000062CB 31C0                    	xor	AX,AX			; seek relative to beginning
 29738                                  	;invoke	$Lseek			; back to beginning of file
 29739 000062CD E8690C                  	call	_$LSEEK
 29740 000062D0 59                      	pop	CX			; number to read
 29741                                  	;mov	ds,[bp-20]
 29742 000062D1 8E5EEC                  	mov	DS,Exec_DMA
 29743 000062D4 31D2                    	xor	DX,DX
 29744 000062D6 51                      	push	CX
 29745 000062D7 E85001                  	call	ExecRead
 29746 000062DA 5E                      	pop	SI			; get number of bytes to read
 29747 000062DB 7303                    	jnc	short OkRead
 29748                                  
 29749 000062DD E926FE                  	jmp	Exec_Bad_File
 29750                                  
 29751                                  	; 10/09/2018
 29752                                  OkRead:
 29753 000062E0 39F0                    	cmp	AX,SI			; did we read them all?
 29754                                  	; MSDOS 6.0
 29755                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 29756                                  	; MSDOS 3.3
 29757 000062E2 7496                    	jz	short Exec_No_Memj	; M00: exactly the wrong number...
 29758                                  	
 29759                                  	; MSDOS 6.0
 29760                                  	;mov	bl,[AllocMsave]		; M063
 29761                                  	;mov	[AllocMethod],bl	; M063: restore allocmethod
 29762                                  
 29763                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29764                                  	;test	byte [bp-5],2
 29765 000062E4 F646FB02                	test	Exec_Func,exec_func_overlay
 29766 000062E8 752D                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 29767                                  
 29768                                  	;mov	ax,[bp-20]
 29769 000062EA 8B46EC                  	mov	AX,Exec_DMA
 29770 000062ED 83E810                  	sub	AX,10h
 29771 000062F0 36A3[1C14]              	mov	[SS:exec_init_CS],AX
 29772 000062F4 36C706[1A14]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 29773                                  
 29774                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 29775                                  	; of 0 on stack.
 29776                                  
 29777 000062FB 81C6FE00                	add	SI,0FEh 		; make room for stack
 29778                                  
 29779                                  	; MSDOS 6.0
 29780 000062FF 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 29781 00006302 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 29782 00006304 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 29783                                  
 29784                                  Exec_St_Ok:
 29785                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29786 00006308 368936[1614]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 29787 0000630D 36A3[1814]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 29788 00006311 8ED8                    	mov	DS,AX
 29789 00006313 C7040000                	mov	WORD [SI],0		; 0 for return
 29790                                  
 29791                                  	; MSDOS 6.0
 29792                                  	;
 29793                                  	; M068
 29794                                  	;
 29795                                  	; We now determine if this is a Copy Protected App. If so the 
 29796                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 29797                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 29798                                  
 29799                                  	;call	word ptr [ChkCopyProt]	
 29800                                  
 29801                                  Exec_Set_PDB:
 29802                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29803                                  	;mov	bx,[bp-8]
 29804 00006317 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 29805 0000631A E81C01                  	call	Exec_Dealloc
 29806 0000631D 55                      	push	BP
 29807                                  	;invoke	$Close			; release the jfn
 29808 0000631E E8A60A                  	call	_$CLOSE
 29809 00006321 5D                      	pop	BP
 29810 00006322 E81F01                  	call	Exec_Alloc
 29811                                  	;test	byte [bp-5],2
 29812 00006325 F646FB02                	test	Exec_Func,exec_func_overlay
 29813 00006329 7406                    	jz	short Exec_Build_Header
 29814                                  
 29815                                  	; MSDOS 6.0
 29816                                  	;call	Scan_Execname
 29817                                  	;call	Scan_Special_Entries
 29818                                  	;
 29819                                  ;SR;
 29820                                  ;The current lie strategy uses the PSP to store the lie version. However,
 29821                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 29822                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 29823                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 29824                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 29825                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 29826                                  ;issues the version check, it gets the lie version until the next overlay
 29827                                  ;call is issued.
 29828                                  ;
 29829                                  	;cmp	DriverLoad,0		;was Sysinit processing done?
 29830                                  	;je	norm_ovl		;yes, no special handling
 29831                                  	;push	si
 29832                                  	;push	es
 29833                                  	;les	si,BiosDataPtr		;get ptr to BIOS data block
 29834                                  	;cmp	byte ptr es:[si],0		;in Sysinit?
 29835                                  	;je	sysinit_done		;no, Sysinit is finished
 29836                                  	;
 29837                                  	;mov	es,CurrentPDB		;es = current PSP (Sysinit PSP)
 29838                                  	;push	Special_Version
 29839                                  	;pop	es:PDB_Version		;store lie version in Sysinit PSP
 29840                                  		;;; PDB.VERSION
 29841                                  	;jmp	short setver_done
 29842                                  ;sysinit_done:
 29843                                  	;mov	DriverLoad,0		;Sysinit done,special handling off
 29844                                  ;setver_done:
 29845                                  	;pop	es
 29846                                  	;pop	si
 29847                                  ;norm_ovl:
 29848                                  
 29849                                  	;leave
 29850 0000632B 89EC                    	mov	sp,bp		
 29851 0000632D 5D                      	pop	bp
 29852                                  
 29853                                  	;transfer SYS_RET_OK		; overlay load -> done
 29854 0000632E E9CCB3                  	jmp	SYS_RET_OK
 29855                                  
 29856                                  Exec_Build_Header:
 29857                                  	;mov	dx,[bp-18]
 29858 00006331 8B56EE                  	mov	DX,Exec_Load_Block
 29859                                  					; assign the space to the process
 29860                                  	;mov	si,1
 29861 00006334 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 29862                                  	;mov	ax,[bp-14]
 29863 00006337 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 29864 0000633A 09C0                    	or	AX,AX
 29865 0000633C 7405                    	jz	short No_Owner		; no environment
 29866                                  
 29867 0000633E 48                      	dec	AX			; point to header
 29868 0000633F 8ED8                    	mov	DS,AX
 29869 00006341 8914                    	mov	[SI],DX 		; assign ownership
 29870                                  
 29871                                  No_Owner:
 29872                                  	;mov	ax,[bp-18]
 29873 00006343 8B46EE                  	mov	AX,Exec_Load_Block	; get load block pointer
 29874 00006346 48                      	dec	AX
 29875 00006347 8ED8                    	mov	DS,AX			; point to header
 29876 00006349 8914                    	mov	[SI],DX 		; assign ownership
 29877                                  
 29878                                  	; MSDOS 6.0
 29879                                  	;push	DS			;AN000;MS. make ES=DS
 29880                                  	;pop	ES			;AN000;MS.
 29881                                  	;mov	DI,Arena_Name		;AN000;MS. ES:DI points to destination
 29882                                  	;call	Scan_Execname		;AN007;MS. parse execname
 29883                                  	;				;	   ds:si->name, cx=name length
 29884                                  	;push	CX			;AN007;;MS. save for fake version
 29885                                  	;push	SI			;AN007;;MS. save for fake version
 29886                                  	;
 29887                                  ;MoveName:				;AN000;
 29888                                  	;lodsb				;AN000;;MS. get char
 29889                                  	;cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 29890                                  	;jz	Mem_Done		;AN000;;MS. no, move to header
 29891                                  	;				;AN000;
 29892                                  	;stosb				;AN000;;MS. move char
 29893                                  	;				; MSKK bug fix - limit length copied
 29894                                  	;cmp	di,16			; end of memory arena block?
 29895                                  	;jae	mem_done		; jump if so
 29896                                  	;
 29897                                  	;loop	movename		;AN000;;MS. continue
 29898                                  ;Mem_Done:				;AN000;
 29899                                  	;xor	AL,AL			;AN000;;MS. make ASCIIZ
 29900                                  	;cmp	DI,SIZE ARENA		;AN000;MS. if not all filled
 29901                                  	;jae	Fill8			;AN000;MS.
 29902                                  	;
 29903                                  	;stosb				;AN000;MS.
 29904                                  	;
 29905                                  ;Fill8:					;AN000;
 29906                                  	;pop	SI			;AN007;MS. ds:si -> file name
 29907                                  	;pop	CX			;AN007;MS.
 29908                                  	;
 29909                                  	;call	Scan_Special_Entries	;AN007;MS.
 29910                                  
 29911                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29912 0000634B 52                      	push	DX
 29913                                  	;mov	si,[bp-16]
 29914 0000634C 8B76F0                  	mov	SI,Exec_Size
 29915 0000634F 01D6                    	add	SI,DX
 29916                                  	;Invoke	$Dup_PDB		; ES is now PDB
 29917 00006351 E8E2BA                  	call	_$DUP_PDB
 29918 00006354 5A                      	pop	DX
 29919                                  
 29920                                  	;push	word [bp-14]
 29921 00006355 FF76F2                  	push	Exec_Environ
 29922                                  	;pop	WORD [ES:2Ch]
 29923 00006358 268F062C00              	pop	word [ES:PDB.ENVIRON]
 29924                                  
 29925                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 29926                                  					; version number in PSP
 29927                                   	;push	word [Special_Version]	; Set the DOS version number to
 29928                                  	;pop	word [ES:PDB_Version]	; to be used for this application
 29929                                  		; PDB.VERSION
 29930                                  
 29931                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 29932                                  	;lds	si,[bp-4]
 29933 0000635D C576FC                  	lds	SI,Exec_Blk		; get the block
 29934 00006360 1E                      	push	DS			; save its location
 29935 00006361 56                      	push	SI
 29936                                  	;lds	si, [si+6]
 29937 00006362 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 29938                                  
 29939                                  	; DS points to user space 5C FCB
 29940                                  
 29941 00006365 B90C00                  	mov	CX,12			; copy drive, name and ext
 29942 00006368 51                      	push	CX
 29943 00006369 BF5C00                  	mov	DI,5Ch
 29944 0000636C 8A1C                    	mov	BL,[SI]
 29945 0000636E F3A4                    	rep	movsb
 29946                                  
 29947                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 29948                                  
 29949 00006370 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 29950 00006372 AB                      	stosw
 29951 00006373 AB                      	stosw
 29952                                  
 29953                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 29954                                  
 29955 00006374 59                      	pop	CX
 29956 00006375 5E                      	pop	SI			; get block
 29957 00006376 1F                      	pop	DS
 29958 00006377 1E                      	push	DS			; save (again)
 29959 00006378 56                      	push	SI
 29960                                  	;lds	si,[si+0Ah]
 29961 00006379 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 29962                                  
 29963                                  	; DS points to user space 6C FCB
 29964                                  
 29965 0000637C 8A3C                    	mov	BH,[SI] 		; do same as above
 29966 0000637E F3A4                    	rep	movsb
 29967 00006380 AB                      	stosw
 29968 00006381 AB                      	stosw
 29969 00006382 5E                      	pop	SI			; get block (last time)
 29970 00006383 1F                      	pop	DS
 29971                                  	;ld	si,[si+2]
 29972 00006384 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 29973                                  
 29974                                  	; DS points to user space 80 command line
 29975                                  
 29976 00006387 80C980                  	or	CL,80h
 29977 0000638A 89CF                    	mov	DI,CX
 29978 0000638C F3A4                    	rep	movsb			; Wham!
 29979                                  
 29980                                  	; Process BX into default AX (validity of drive specs on args).
 29981                                  	; We no longer care about DS:SI.
 29982                                  
 29983 0000638E FEC9                    	dec	CL			; get 0FFh in CL
 29984 00006390 88F8                    	mov	AL,BH
 29985 00006392 30FF                    	xor	BH,BH
 29986                                  	;invoke	GetVisDrv
 29987 00006394 E8C705                  	call	GetVisDrv
 29988 00006397 7302                    	jnc	short Exec_BL
 29989                                  
 29990 00006399 88CF                    	mov	BH,CL
 29991                                  
 29992                                  Exec_BL:
 29993 0000639B 88D8                    	mov	AL,BL
 29994 0000639D 30DB                    	xor	BL,BL
 29995                                  	;invoke	GetVisDrv
 29996 0000639F E8BC05                  	call	GetVisDrv
 29997 000063A2 7302                    	jnc	short Exec_Set_Return
 29998                                  
 29999 000063A4 88CB                    	mov	BL,CL
 30000                                  
 30001                                  Exec_Set_Return:
 30002                                  	;invoke	Get_User_Stack			; get his return address
 30003 000063A6 E862B2                  	call	Get_User_Stack
 30004                                  
 30005                                  	;push	word [si+14h]
 30006 000063A9 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 30007                                  	;push	word [si+12h]
 30008 000063AC FF7412                  	push	word [SI+user_env.user_IP]
 30009                                  	;push	word [si+14h]
 30010 000063AF FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 30011                                  	;push	word [si+12h]
 30012 000063B2 FF7412                  	push	word [SI+user_env.user_IP]
 30013                                  	;pop	word [ES:0Ah]
 30014 000063B5 268F060A00              	pop	WORD [ES:PDB.EXIT]
 30015                                  	;pop	word [ES:0Ch]
 30016 000063BA 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 30017                                  
 30018 000063BF 31C0                    	xor	AX,AX
 30019 000063C1 8ED8                    	mov	DS,AX
 30020                                  					; save them where we can get them
 30021                                  					; later when the child exits.
 30022                                  	;pop	word [88h]
 30023 000063C3 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 30024                                  	;pop	word [90h]
 30025 000063C7 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 30026                                  
 30027 000063CB 36C706[DA02]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 30028 000063D2 368E1E[DE02]            	mov	DS,[SS:CurrentPDB]	; SS Override
 30029 000063D7 368C1E[DC02]            	mov	[SS:DMAADD+2],DS	; SS Override
 30030                                  
 30031                                  	;test	byte [bp-5],1
 30032 000063DC F646FB01                	test	Exec_Func,exec_func_no_execute
 30033 000063E0 7427                    	jz	short exec_go
 30034                                  
 30035 000063E2 36C536[1614]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 30036                                  	;les	di,[bp-4]
 30037 000063E7 C47EFC                  	les	DI,Exec_Blk		; and block for return
 30038                                  	;mov	[es:di+10h],ds
 30039 000063EA 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 30040                                  
 30041 000063EE 4E                      	dec	SI			; 'push' default AX
 30042 000063EF 4E                      	dec	SI
 30043 000063F0 891C                    	mov	[SI],BX 		; save default AX reg
 30044                                  	;mov	[es:di+0Eh], si
 30045 000063F2 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 30046                                  
 30047 000063F6 36C506[1A14]            	lds	AX,[SS:exec_init_IP]	; SS Override
 30048                                  	;mov	[es:di+14h],ds
 30049 000063FB 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 30050                                  	;mov	[es:di+12h],ax
 30051 000063FF 26894512                	mov	[ES:DI+EXEC1.IP],AX
 30052                                  	
 30053                                  	;leave
 30054 00006403 89EC                    	mov	sp,bp
 30055 00006405 5D                      	pop	bp	
 30056                                  
 30057                                  	;transfer SYS_RET_OK
 30058 00006406 E9F4B2                  	jmp	SYS_RET_OK
 30059                                  
 30060                                  exec_go:
 30061 00006409 36C536[1A14]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 30062 0000640E 36C43E[1614]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 30063 00006413 8CC0                    	mov	AX,ES
 30064                                  
 30065                                  	; MSDOS 6.0
 30066                                  	;cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 30067                                  	;je	short Xfer_To_User	; N: transfer control to user
 30068                                  
 30069                                  	;push	ds			; Y: control must go to low mem stub
 30070                                  	;	
 30071                                  	;push	cs			;    where we disable a20 and Xfer 
 30072                                  	;pop	ds			;    control to user 
 30073                                  	;
 30074                                  	;or	byte [DOS_FLAG],EXECA20OFF ; M068:
 30075                                  	;				; M004: Set bit to signal int 21
 30076                                  	;				; ah = 25 & ah= 49. See dossym.inc 
 30077                                  	;				; under TAG M003 & M009 for 
 30078                                  	;				; explanation
 30079                                  	;mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 30080                                  	;				; M068: going to be turned OFF.
 30081                                  	;
 30082                                  	;mov	ax,ds			; ax = segment of low mem stub
 30083                                  	;pop	ds
 30084                                  	;
 30085                                  	;push	ax			; ret far into the low mem stub
 30086                                  	;mov	ax,Disa20_Xfer
 30087                                  	;push	ax
 30088                                  	;mov	AX,ES			; restore ax
 30089                                  	;retf
 30090                                  
 30091                                  Xfer_To_User:
 30092                                  	; DS:SI points to entry point
 30093                                  	; AX:DI points to initial stack
 30094                                  	; DX has PDB pointer
 30095                                  	; BX has initial AX value
 30096                                  
 30097 00006415 FA                      	cli
 30098                                  	; 15/08/2018
 30099 00006416 36C606[CF02]00          	mov	BYTE [SS:INDOS],0	; SS Override
 30100                                  
 30101 0000641C 8ED0                    	mov	SS,AX			; set up user's stack
 30102 0000641E 89FC                    	mov	SP,DI			; and SP
 30103 00006420 FB                      	sti
 30104                                  
 30105 00006421 1E                      	push	DS			; fake long call to entry
 30106 00006422 56                      	push	SI
 30107 00006423 8EC2                    	mov	ES,DX			; set up proper seg registers
 30108 00006425 8EDA                    	mov	DS,DX
 30109 00006427 89D8                    	mov	AX,BX			; set up proper AX
 30110                                  
 30111 00006429 CB                      	retf
 30112                                  
 30113                                  ; 04/08/2018 - Retro DOS v3.0
 30114                                  
 30115                                  ;----------------------------------------------------------------------------
 30116                                  ;
 30117                                  ;----------------------------------------------------------------------------
 30118                                  
 30119                                  ExecRead:
 30120 0000642A E80C00                  	CALL	Exec_Dealloc
 30121                                  	;mov	bx,[bp-8]
 30122 0000642D 8B5EF8                  	MOV	bx,Exec_FH
 30123 00006430 55                      	PUSH	BP
 30124 00006431 E8AB0A                  	call	_$READ
 30125 00006434 5D                      	POP	BP
 30126 00006435 E80C00                  	CALL	Exec_Alloc
 30127 00006438 C3                      	retn
 30128                                  
 30129                                  ;----------------------------------------------------------------------------
 30130                                  ;
 30131                                  ;----------------------------------------------------------------------------
 30132                                  
 30133                                  Exec_Dealloc:
 30134 00006439 53                      	push	BX
 30135                                  	;mov	bx,0
 30136 0000643A 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 30137 0000643C E82DBC                  	call	EcritMem
 30138 0000643F E81000                  	call	ChangeOwners
 30139 00006442 5B                      	pop	BX
 30140 00006443 C3                      	retn
 30141                                  
 30142                                  ;----------------------------------------------------------------------------
 30143                                  ;
 30144                                  ;----------------------------------------------------------------------------
 30145                                  
 30146                                  Exec_Alloc:
 30147 00006444 53                      	push	BX
 30148                                  	;mov	bx,[SS:CurrentPDB]	; SS Override
 30149 00006445 2E8B1E[DE02]            	mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 30150 0000644A E80500                  	call	ChangeOwners
 30151 0000644D E824BC                  	call	LcritMem
 30152 00006450 5B                      	pop	BX
 30153 00006451 C3                      	retn
 30154                                  
 30155                                  ;----------------------------------------------------------------------------
 30156                                  ;
 30157                                  ;----------------------------------------------------------------------------
 30158                                  
 30159                                  ChangeOwners:
 30160 00006452 9C                      	pushf
 30161 00006453 50                      	push	AX
 30162                                  	;mov	ax,[bp-14]
 30163 00006454 8B46F2                  	mov	AX,Exec_Environ
 30164 00006457 E80900                  	call	ChangeOwner
 30165                                  	;mov	ax,[bp-18]
 30166 0000645A 8B46EE                  	mov	AX,Exec_Load_Block
 30167 0000645D E80300                  	call	ChangeOwner
 30168 00006460 58                      	pop	AX
 30169 00006461 9D                      	popf
 30170                                  chgown_retn:
 30171 00006462 C3                      	retn
 30172                                  
 30173                                  ;----------------------------------------------------------------------------
 30174                                  ;
 30175                                  ;----------------------------------------------------------------------------
 30176                                  
 30177                                  ChangeOwner:
 30178 00006463 09C0                    	or	AX,AX			; is area allocated?
 30179 00006465 74FB                    	jz	short chgown_retn	; no, do nothing
 30180 00006467 48                      	dec	AX
 30181 00006468 1E                      	push	DS
 30182 00006469 8ED8                    	mov	DS,AX
 30183 0000646B 891E0100                	mov	[ARENA.OWNER],BX
 30184 0000646F 1F                      	pop	DS
 30185 00006470 C3                      	retn
 30186                                  
 30187                                  
 30188                                  ; MSDOS 6.0
 30189                                  ;----------------------------------------------------------------------------
 30190                                  ;
 30191                                  ;----------------------------------------------------------------------------
 30192                                  
 30193                                  ;Procedure	Scan_Execname,near
 30194                                  ;	ASSUME	SS:DosData
 30195                                  ;
 30196                                  ;	lds	SI,ExecName		; DS:SI points to name
 30197                                  ;Entry	Scan_Execname1			; M028
 30198                                  ;Save_Begin:				;
 30199                                  ;	mov	CX,SI			; CX= starting addr
 30200                                  ;Scan0:					;
 30201                                  ;	lodsb				; get char
 30202                                  ;
 30203                                  ;	cmp	AL,':'			; is ':' , may be A:name
 30204                                  ;	jz	save_begin		; yes, save si
 30205                                  ;	cmp	AL,'\'                  ; is '\', may be A:\name
 30206                                  ;	jz	save_begin		; yes, save si
 30207                                  ;	cmp	AL,0			; is end of name
 30208                                  ;	jnz	scan0			; no, continue scanning
 30209                                  ;	sub	SI,CX			; get name's length
 30210                                  ;	xchg	SI,CX			; cx= length, si= starting addr
 30211                                  ;
 30212                                  ;	return
 30213                                  ;
 30214                                  ;EndProc Scan_Execname
 30215                                  
 30216                                  ; MSDOS 6.0
 30217                                  ;----------------------------------------------------------------------------
 30218                                  ;
 30219                                  ;----------------------------------------------------------------------------
 30220                                  
 30221                                  ;Procedure    Scan_Special_Entries,near
 30222                                  ;	assume	SS:DOSDATA
 30223                                  ;
 30224                                  ;	dec	CX			; cx= name length
 30225                                  ;;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 30226                                  ;					;reset to current version
 30227                                  ;	mov    [Special_Version],(Minor_Version SHL 8) + Major_Version
 30228                                  ;;***	call	Reset_Version
 30229                                  ;
 30230                                  ;;M060	push	SS
 30231                                  ;;M060	pop	ES
 30232                                  ;
 30233                                  ;	les	DI,SS:UU_IFS_DOS_CALL	;M060; ES:DI --> Table in SETVER.SYS
 30234                                  ;	mov	AX,ES			;M060; First do a NULL ptr check to
 30235                                  ;	or	AX,DI			;M060; be sure the table exists
 30236                                  ;	jz	End_List		;M060; If ZR then no table
 30237                                  ;
 30238                                  ;GetEntries:
 30239                                  ;	mov	AL,ES:[DI]		; end of list
 30240                                  ;	or	AL,AL
 30241                                  ;	jz	End_List		; yes
 30242                                  ;
 30243                                  ;	mov	[Temp_Var2],DI		; save di
 30244                                  ;	cmp	AL,CL			; same length ?
 30245                                  ;	jnz	SkipOne 		; no
 30246                                  ;
 30247                                  ;	inc	DI			; es:di -> special name
 30248                                  ;	push	CX			; save length and name addr
 30249                                  ;	push	SI
 30250                                  ;
 30251                                  ;;
 30252                                  ;; M050 - BEGIN
 30253                                  ;;
 30254                                  ;	push	ax			; save len
 30255                                  ;sse_next_char:
 30256                                  ;	lodsb
 30257                                  ;	call	UCase
 30258                                  ;	scasb
 30259                                  ;	jne	Not_Matched
 30260                                  ;	loop	sse_next_char
 30261                                  ;	
 30262                                  ;;
 30263                                  ;;	repz	cmpsb			; same name ?
 30264                                  ;;
 30265                                  ;;	jnz	Not_Matched		; no
 30266                                  ;;
 30267                                  ;	pop	ax			; take len off the stack
 30268                                  ;;
 30269                                  ;; M050 - END
 30270                                  ;;
 30271                                  ;	mov	AX,ES:[DI]		; get special version
 30272                                  ;	mov	[Special_Version],AX	; save it
 30273                                  ;
 30274                                  ;;***	mov	AL,ES:[DI+2]		; get fake count
 30275                                  ;;***	mov	[Fake_Count],AL 	; save it
 30276                                  ;
 30277                                  ;	pop	SI
 30278                                  ;	pop	CX
 30279                                  ;	jmp	SHORT end_list
 30280                                  ;
 30281                                  ;Not_Matched:
 30282                                  ;	pop	ax			; get len from stack ; M050
 30283                                  ;	pop	SI			; restore si,cx
 30284                                  ;	pop	CX
 30285                                  ;
 30286                                  ;SkipOne:
 30287                                  ;	mov	DI,[Temp_Var2]		; restore old di use SS Override
 30288                                  ;	xor	AH,AH			; position to next entry
 30289                                  ;	add	DI,AX
 30290                                  ;
 30291                                  ;	add	DI,3			; DI -> next entry length
 30292                                  ;;***	add	DI,4			; DI -> next entry length
 30293                                  ;
 30294                                  ;	jmp	Getentries
 30295                                  ;
 30296                                  ;End_List:
 30297                                  ;	return
 30298                                  ;
 30299                                  ;EndProc Scan_Special_Entries
 30300                                  
 30301                                  
 30302                                  ; 04/08/2018 - Retro DOS v3.0
 30303                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 30304                                  
 30305                                  ;----------------------------------------------------------------------------
 30306                                  ;SUBTTL Terminate and stay resident handler
 30307                                  ;
 30308                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 30309                                  ;	    truncate the current block.
 30310                                  ;
 30311                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 30312                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 30313                                  ;	    and restoring the vectors.
 30314                                  ;
 30315                                  ;----------------------------------------------------------------------------
 30316                                  
 30317                                  _$KEEP_PROCESS:
 30318 00006471 50                      	push	AX			; keep exit code around
 30319                                  	;mov	byte [SS:EXIT_TYPE],3
 30320 00006472 36C606[1705]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 30321 00006478 368E06[DE02]            	mov	ES,[SS:CurrentPDB]
 30322 0000647D 83FA06                  	cmp	DX,6h			; keep enough space around for system
 30323 00006480 7303                    	jae	short Keep_Shrink	; info
 30324                                  
 30325 00006482 BA0600                  	mov	DX,6h
 30326                                  
 30327                                  Keep_Shrink:
 30328 00006485 89D3                    	mov	BX,DX
 30329 00006487 53                      	push	BX
 30330 00006488 06                      	push	ES
 30331 00006489 E8BF01                  	call	_$SETBLOCK		; ignore return codes.
 30332 0000648C 1F                      	pop	DS
 30333 0000648D 5B                      	pop	BX
 30334 0000648E 7207                    	jc	short Keep_Done		; failed on modification
 30335                                  
 30336 00006490 8CD8                    	mov	AX,DS
 30337 00006492 01D8                    	add	AX,BX
 30338                                  	;mov	[2],ax
 30339 00006494 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 30340                                  
 30341                                  Keep_Done:
 30342 00006497 58                      	pop	AX
 30343 00006498 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 30344                                  
 30345                                  ;----------------------------------------------------------------------------
 30346                                  ;
 30347                                  ;----------------------------------------------------------------------------
 30348                                  
 30349                                  STAY_RESIDENT:
 30350                                  	;mov	ax,3100h
 30351 0000649A B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 30352 0000649D 83C20F                  	add	DX,15
 30353 000064A0 D1DA                    	rcr	DX,1
 30354 000064A2 B103                    	mov	CL,3
 30355 000064A4 D3EA                    	shr	DX,CL
 30356                                  
 30357 000064A6 E901B0                  	jmp	COMMAND
 30358                                  
 30359                                  ;----------------------------------------------------------------------------
 30360                                  ;SUBTTL $EXIT - return to parent process
 30361                                  ;   Assembler usage:
 30362                                  ;	    MOV     AL, code
 30363                                  ;	    MOV     AH, Exit
 30364                                  ;	    INT     int_command
 30365                                  ;   Error return:
 30366                                  ;	    None.
 30367                                  ;
 30368                                  ;----------------------------------------------------------------------------
 30369                                  
 30370                                  _$EXIT:
 30371                                  	; 04/08/2018 - Retro DOS v3.0
 30372                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 30373 000064A9 30E4                    	xor	AH,AH
 30374 000064AB 368626[F902]            	xchg	AH,[SS:DidCTRLC]
 30375 000064B0 08E4                    	or	AH,AH
 30376                                  	;mov	BYTE [SS:EXIT_TYPE],0
 30377 000064B2 36C606[1705]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 30378 000064B8 7406                    	jz	short exit_inner
 30379                                  	;mov	BYTE [SS:EXIT_TYPE],1
 30380 000064BA 36C606[1705]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 30381                                  
 30382                                  	;entry	Exit_inner
 30383                                  exit_inner:
 30384 000064C0 E848B1                  	call	Get_User_Stack		;PBUGBUG
 30385                                  
 30386 000064C3 36FF36[DE02]            	push	word [ss:CurrentPDB]
 30387                                  	;pop	word [si+14h]
 30388 000064C8 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 30389 000064CB EB08                    	jmp	short abort_inner
 30390                                  
 30391                                  ;BREAK <$ABORT -- Terminate a process>
 30392                                  ;----------------------------------------------------------------------------
 30393                                  ; Inputs:
 30394                                  ;	user_CS:00 must point to valid program header block
 30395                                  ; Function:
 30396                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 30397                                  ;	to the terminate address
 30398                                  ; Returns:
 30399                                  ;	TO THE TERMINATE ADDRESS
 30400                                  ;----------------------------------------------------------------------------
 30401                                  
 30402                                  _$ABORT:
 30403 000064CD 30C0                    	xor	AL,AL
 30404                                  	;mov	byte [SS:EXIT_TYPE],0
 30405                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 30406 000064CF 36C606[1705]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 30407                                  
 30408                                  	; abort_inner must have AL set as the exit code! The exit type
 30409                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 30410                                  	; to be correct as the one that is terminating.
 30411                                  
 30412                                  abort_inner:
 30413 000064D5 368A26[1705]            	mov	AH,[SS:EXIT_TYPE]
 30414 000064DA 36A3[E202]              	mov	[SS:exit_code],AX
 30415 000064DE E82AB1                  	call	Get_User_Stack
 30416                                  
 30417                                  	;mov	ds,[si+14h]
 30418 000064E1 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 30419 000064E4 31C0                    	xor	AX,AX
 30420 000064E6 8EC0                    	mov	ES,AX
 30421                                  	;mov	si,10
 30422 000064E8 BE0A00                  	mov	SI,SAVEXIT
 30423                                  	;mov	di,88h
 30424 000064EB BF8800                  	mov	DI,addr_int_terminate
 30425 000064EE A5                      	movsw
 30426 000064EF A5                      	movsw
 30427 000064F0 A5                      	movsw
 30428 000064F1 A5                      	movsw
 30429 000064F2 A5                      	movsw
 30430 000064F3 A5                      	movsw
 30431 000064F4 E98EF4                  	jmp	reset_environment
 30432                                  
 30433                                  ; MSDOS 6.0
 30434                                  ;----------------------------------------------------------------------------
 30435                                  ;
 30436                                  ; fixexepatch will point to this is DOS loads low. 
 30437                                  ;
 30438                                  ;----------------------------------------------------------------------------
 30439                                  
 30440                                  ;retexepatch	proc	near
 30441                                  ;	
 30442                                  ;	ret
 30443                                  ;
 30444                                  ;retexepatch 	endp
 30445                                  
 30446                                  
 30447                                  ;============================================================================
 30448                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 30449                                  ;============================================================================
 30450                                  ; 04/08/2018 - Retro DOS v3.0
 30451                                  
 30452                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 30453                                  
 30454                                  ;**
 30455                                  ;	Microsoft Confidential
 30456                                  ;	Copyright (C) Microsoft Corporation 1991
 30457                                  ;	All Rights Reserved.
 30458                                  ;
 30459                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 30460                                  ;	I/O specs are defined in DISPATCH.
 30461                                  ;
 30462                                  ;	$ALLOC
 30463                                  ;	$SETBLOCK
 30464                                  ;	$DEALLOC
 30465                                  ;	$AllocOper
 30466                                  ;	arena_free_process
 30467                                  ;	arena_next
 30468                                  ;	check_signature
 30469                                  ;	Coalesce
 30470                                  ;
 30471                                  ;	Modification history:
 30472                                  ;
 30473                                  ;	    Created: ARR 30 March 1983
 30474                                  ;
 30475                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 30476                                  ;		      M003 - added support for link/unlink UMBs from
 30477                                  ;			     DOS arena chain. 7/18/90
 30478                                  ;		      M009 - Added error returns invalid function and 
 30479                                  ;			     arena trashed in set link state call.
 30480                                  ;		      M010 - Release UMB arenas allocated to current PDB
 30481                                  ;			     if UMB_HEAD is initialized.
 30482                                  ;
 30483                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 30484                                  ;			     support. Please see under M009 in 
 30485                                  ;			     ..\inc\dossym.inc. 8/31/90.
 30486                                  ;
 30487                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 30488                                  ;			     sure that umb_head arena is valid and also make
 30489                                  ;			     sure that the previous arena is pointing to 
 30490                                  ;			     umb_head.
 30491                                  ;
 30492                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 30493                                  ;			     set allloc strategy.
 30494                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 30495                                  ;			     bx in AllocSetStrat.
 30496                                  ;
 30497                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 30498                                  ;			     a bit to indicate to dos dispatcher to turn
 30499                                  ;			     a20 off before iret. See M016.
 30500                                  ;
 30501                                  
 30502                                  ;	BREAK	<memory allocation utility routines>
 30503                                  
 30504                                  
 30505                                  ; 15/04/2018 - Retro DOS v2.0
 30506                                  ;----------------------------------------------------------------------------
 30507                                  ; xenix memory calls for MSDOS
 30508                                  ;
 30509                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 30510                                  ; arena_owner_system are all equal to zero and are contained in DI.
 30511                                  ;
 30512                                  ;INCLUDE DOSSEG.ASM
 30513                                  
 30514                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 30515                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 30516                                  
 30517                                  ;.xlist
 30518                                  ;.xcref
 30519                                  ;INCLUDE DOSSYM.ASM
 30520                                  ;INCLUDE DEVSYM.ASM
 30521                                  ;.cref
 30522                                  ;.list
 30523                                  
 30524                                  ;TITLE ALLOC.ASM - memory arena manager
 30525                                  ;NAME Alloc
 30526                                  
 30527                                  ;SUBTTL memory allocation utility routines
 30528                                  ;PAGE
 30529                                  ;
 30530                                  ; arena data
 30531                                  ;
 30532                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 30533                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 30534                                  ;       i_need  FirstArena,WORD         ; first free block found
 30535                                  ;       i_need  BestArena,WORD          ; best free block found
 30536                                  ;       i_need  LastArena,WORD          ; last free block found
 30537                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 30538                                  
 30539                                  ;**	Arena_Free_Process
 30540                                  ;----------------------------------------------------------------------------
 30541                                  ;	Free all arena blocks allocated to a prOcess
 30542                                  ;
 30543                                  ;	ENTRY	(bx) = PID of process
 30544                                  ;	EXIT	none
 30545                                  ;	USES	????? BUGBUG
 30546                                  ;----------------------------------------------------------------------------
 30547                                  
 30548                                  arena_free_process:
 30549                                  	; 04/08/2018 - Retro DOS v3.0
 30550 000064F7 36A1[2400]                      MOV	AX,[SS:arena_head]
 30551                                  arena_free_process_start:
 30552 000064FB BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 30553                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 30554 000064FE E81F00                          CALL    check_signature         ; ES <- AX, check for valid block
 30555                                  
 30556                                  arena_free_process_loop:
 30557                                          ;retc
 30558 00006501 722C                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 30559 00006503 06                      	PUSH    ES
 30560 00006504 1F                              POP     DS
 30561                                  	;cmp	[1],bx 
 30562 00006505 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 30563 00006509 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 30564                                  	; 20/05/2019
 30565                                  	;mov	[1],di
 30566 0000650B 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 30567                                  
 30568                                  arena_free_next:
 30569                                  	;cmp	byte [di],5Ah ;'Z'
 30570 0000650F 803D5A                          CMP     BYTE [DI],arena_signature_end
 30571                                                                          ; end of road, Jack?
 30572                                          ;retz				; never come back no more
 30573 00006512 741B                    	JZ	SHORT AFP_RETN  ;msdos 3.3 (& MSDOS 2.11)
 30574                                  	; MSDOS 6.0
 30575                                  	;jz	short arena_chk_umbs
 30576                                          
 30577 00006514 E80200                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 30578 00006517 EBE8                            JMP     SHORT arena_free_process_loop
 30579                                  
 30580                                  	; MSDOS 6.0
 30581                                  ;arena_chk_umbs:			; M010 - Start
 30582                                  	;mov	ax,[umb_head]		; ax = umb_head
 30583                                  	;cmp	ax,0FFFFh		; Q: is umb_head initialized
 30584                                  	;je	short ret_label		; N: we're done
 30585                                  	;
 30586                                  	;mov	di,ds			; di = last arena
 30587                                  	;cmp	di,ax			; Q: is last arena above umb_head
 30588                                  	;jae	short ret_label		; Y: we've scanned umbs also. done.
 30589                                  	;jmp	short arena_free_process_start
 30590                                  					; M010 - End
 30591                                  
 30592                                  ;AFP_RETN:
 30593                                  ;	RETN
 30594                                  
 30595                                  ;	BREAK	<Arena Helper Routines>
 30596                                  
 30597                                  ;**	Arena_Next - Find Next item in Arena
 30598                                  ;----------------------------------------------------------------------------
 30599                                  ;	ENTRY	DS - pointer to block head
 30600                                  ;		(di) = 0
 30601                                  ;	EXIT	AX,ES - pointers to next head
 30602                                  ;		'C' set iff arena damaged
 30603                                  ;----------------------------------------------------------------------------
 30604                                  
 30605                                  arena_next:
 30606 00006519 8CD8                            MOV     AX,DS                   ; AX <- current block
 30607 0000651B 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 30608 0000651F 40                              INC     AX                      ; remember that header!
 30609                                  ;
 30610                                  ;       fall into check_signature and return
 30611                                  ;
 30612                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 30613                                  ;       RET
 30614                                  
 30615                                  ;**	Check_Signature - Check Memory Block Signature
 30616                                  ;----------------------------------------------------------------------------
 30617                                  ;	ENTRY	(AX) = address of block header
 30618                                  ;		(di) = 0
 30619                                  ;	EXIT	 ES = AX
 30620                                  ;		'C' clear if signature good
 30621                                  ;		'C' set if signature bad
 30622                                  ;	USES	ES, Flags
 30623                                  ;----------------------------------------------------------------------------
 30624                                  
 30625                                  check_signature:        
 30626                                  
 30627 00006520 8EC0                    	MOV     ES,AX                   ; ES <- AX
 30628                                  	;cmp	byte [es:di],4Dh ; 'M'
 30629 00006522 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 30630                                                                          ; IF next signature = not_end THEN
 30631 00006526 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 30632                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 30633 00006528 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 30634                                                                          ; IF next signature = end then
 30635 0000652C 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 30636 0000652E F9                              STC                             ; set error
 30637                                  ;ret_label: ; MSDOS 6.0
 30638                                  AFP_RETN:
 30639                                   	;  Retro DOS v.20 - 05/03/2018
 30640                                  check_signature_ok:
 30641                                  COALESCE_RETN:
 30642 0000652F C3                      	RETN
 30643                                  
 30644                                  ;**	Coalesce - Combine free blocks ahead with current block
 30645                                  ;----------------------------------------------------------------------------
 30646                                  ;	Coalesce adds the block following the argument to the argument block,
 30647                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 30648                                  ;	some callers (such as $setblock) use it to join a free block to it's
 30649                                  ;	preceeding allocated block.
 30650                                  ;
 30651                                  ;	ENTRY	(ds) = pointer to the head of a free block
 30652                                  ;		(di) = 0
 30653                                  ;	EXIT	'C' clear if OK
 30654                                  ;		  (ds) unchanged, this block updated
 30655                                  ;		  (ax) = address of next block, IFF not at end
 30656                                  ;		'C' set if arena trashed
 30657                                  ;	USES	(cx)
 30658                                  ;----------------------------------------------------------------------------
 30659                                          
 30660                                  Coalesce:
 30661                                  	;cmp	byte [di],5Ah ; 'Z'
 30662 00006530 803D5A                  	CMP     BYTE [DI],arena_signature_end
 30663                                                                          ; IF current signature = END THEN
 30664                                          ;retz				;   GOTO ok
 30665 00006533 74FA                            jz	short COALESCE_RETN
 30666 00006535 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 30667                                          ;retc				; IF no error THEN GOTO check
 30668 00006538 72F5                    	jc	short COALESCE_RETN
 30669                                  
 30670                                  coalesce_check:
 30671                                  	;cmp	[es:1],di
 30672 0000653A 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 30673                                          ;retnz				; IF next block isnt free THEN return
 30674 0000653F 75EE                            JNZ	SHORT COALESCE_RETN
 30675                                  	;mov	cx,[ES:3]
 30676 00006541 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 30677 00006546 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 30678                                          ;ADD	[3],CX
 30679 00006547 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 30680 0000654B 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 30681 0000654E 880D                            MOV     [DI],CL
 30682 00006550 EBDE                            JMP     SHORT Coalesce		; try again
 30683                                  
 30684                                  ; 04/08/2018 - Retro DOS v3.0
 30685                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 30686                                  
 30687                                  ;	BREAK  <$Alloc - allocate space in memory>
 30688                                  
 30689                                  ; MSDOS 6.0
 30690                                  ;----------------------------------------------------------------------------
 30691                                  ;**	$Alloc - Allocate Memory Space
 30692                                  ;
 30693                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 30694                                  ;	Alloc returns a pointer to a free block of memory that
 30695                                  ;	has the requested size in paragraphs.
 30696                                  ;
 30697                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 30698                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 30699                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 30700                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 30701                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 30702                                  ;
 30703                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 30704                                  ;	starts from arena_head.
 30705                                  ;
 30706                                  ;	Assembler usage:
 30707                                  ;           MOV     BX,size
 30708                                  ;           MOV     AH,Alloc
 30709                                  ;           INT     21h
 30710                                  ;
 30711                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 30712                                  ;	so that we start searching the arena at it's first non-trivial free
 30713                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 30714                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 30715                                  ;	doesn't have too many memory objects in it beyond the first free one.
 30716                                  ;	verify that this is true; if so, this can stay as is
 30717                                  ;
 30718                                  ;	ENTRY	(bx) = requested size, in bytes
 30719                                  ;		(DS) = (ES) = DOSGROUP
 30720                                  ;	EXIT	'C' clear if memory allocated
 30721                                  ;		  (ax:0) = address of requested memory
 30722                                  ;		'C' set if request failed
 30723                                  ;		  (AX) = error_not_enough_memory
 30724                                  ;		    (bx) = max size we could have allocated
 30725                                  ;		  (ax) = error_arena_trashed
 30726                                  ;	USES	All
 30727                                  ;----------------------------------------------------------------------------
 30728                                  
 30729                                  ; MSDOS 2.11 (& MSDOS 3.3)
 30730                                  ;----------------------------------------------------------------------------
 30731                                  ;SUBTTL $Alloc - allocate space in memory
 30732                                  ;
 30733                                  ;   Assembler usage:
 30734                                  ;           MOV     BX,size
 30735                                  ;           MOV     AH,Alloc
 30736                                  ;           INT     21h
 30737                                  ;         AX:0 is pointer to allocated memory
 30738                                  ;         BX is max size if not enough memory
 30739                                  ;
 30740                                  ;   Description:
 30741                                  ;           Alloc returns  a  pointer  to  a  free  block of
 30742                                  ;       memory that has the requested  size  in  paragraphs.
 30743                                  ;
 30744                                  ;   Error return:
 30745                                  ;           AX = error_not_enough_memory
 30746                                  ;              = error_arena_trashed
 30747                                  ;----------------------------------------------------------------------------
 30748                                  
 30749                                  _$ALLOC:
 30750                                  	; 04/08/2018 - Retro DOS v3.0
 30751                                  	;EnterCrit critMem
 30752 00006552 E817BB                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 30753                                  
 30754                                  	; MSDOS 6.0
 30755                                  	;mov	ax,[arena_head]
 30756                                  	;mov	[start_arena],ax	; assume LOW_FIRST
 30757                                  	;			
 30758                                  	;test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 30759                                  	;				; Q: should we start scanning from 
 30760                                  	;				;    UMB's
 30761                                  	;jz	short norm_alloc	; N: scan from arena_head
 30762                                  	;	
 30763                                  	;;cmp	word [umb_head],-1	; Q: Has umb_head been initialized
 30764                                  	;;je	short norm_alloc	; N: scan from arena_head
 30765                                  	;test	byte [UmbFlag],LINKSTATE ; Q: are umb's linked
 30766                                  	;jz	short norm_alloc	; N: scan from arena_head
 30767                                  	;
 30768                                  	;mov	ax,[umb_head]
 30769                                  	;mov	[start_arena],ax	; start_arena = umb_head
 30770                                  	;
 30771                                  					; M000 - end
 30772                                  ;norm_alloc:
 30773 00006555 31C0                            XOR     AX,AX
 30774 00006557 89C7                            MOV     DI,AX
 30775                                  	; 15/03/2018
 30776 00006559 36A3[EC02]                      MOV     [SS:FirstArena],AX	; init the options
 30777 0000655D 36A3[EE02]                      MOV     [SS:BestArena],AX
 30778 00006561 36A3[F002]                      MOV     [SS:LastArena],AX
 30779 00006565 50                              PUSH    AX                      ; alloc_max <- 0
 30780                                  	; 04/08/2018
 30781                                  start_scan:
 30782                                  	; MSDOS 6.0
 30783                                  	;mov	ax,[SS:start_arena]	; M000: AX <- beginning of arena
 30784                                  	;
 30785 00006566 36A1[2400]              	MOV     AX,[SS:arena_head]	; AX <- beginning of arena
 30786 0000656A E8B3FF                  	CALL    check_signature         ; ES <- AX, carry set if error
 30787 0000656D 7212                            JC      SHORT alloc_err		; IF error THEN GOTO err
 30788                                  
 30789                                  alloc_scan:
 30790 0000656F 06                              PUSH    ES
 30791 00006570 1F                              POP     DS                      ; DS <- ES
 30792 00006571 393E0100                        CMP     [ARENA.OWNER],DI
 30793 00006575 742A                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 30794                                  
 30795                                  alloc_next:
 30796                                  	; MSDOS 6.0			; M000 - start 
 30797                                  	;test	byte [UmbFlag],LINKSTATE ; Q: are umb's linked
 30798                                  	;jz	short norm_strat	; N: see if we reached last arena
 30799                                  	;
 30800                                  	;test	byte [AllocMethod],HIGH_FIRST
 30801                                  	;				; Q: is alloc strategy high_first
 30802                                  	;jz	short norm_strat	; N: see if we reached last arena
 30803                                  	;mov	ax,[start_arena]
 30804                                  	;cmp	ax,[arena_head]		; Q: did we start scan from 
 30805                                  					;    arena_head
 30806                                  	;jne	short norm_strat	; N: see if we reached last arena
 30807                                  	;mov	ax,ds			; ax = current block
 30808                                  	;cmp	ax,[umb_head]		; Q: check against umb_head 
 30809                                  	;jmp	short alloc_chk_end
 30810                                  
 30811                                  ;norm_strat:
 30812                                  	;cmp	byte [di],5Ah ; 'Z'
 30813 00006577 803D5A                          CMP     BYTE [DI],arena_signature_end
 30814                                                                          ; IF current block is last THEN
 30815 0000657A 740E                            JZ      SHORT alloc_end		;   GOTO end
 30816 0000657C E89AFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 30817 0000657F 73EE                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 30818                                  
 30819                                  alloc_err:
 30820 00006581 58                              POP     AX
 30821                                  
 30822                                  alloc_trashed:
 30823                                  	;LeaveCrit critMem
 30824 00006582 E8EFBA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0	
 30825                                          ;error	error_arena_trashed
 30826                                  	;mov	al,7
 30827 00006585 B007                    	MOV	AL,error_arena_trashed
 30828                                  alloc_errj:
 30829 00006587 E97FB1                  	JMP	SYS_RET_ERR
 30830                                  
 30831                                  alloc_end:
 30832 0000658A 36833E[EC02]00                  CMP	WORD [SS:FirstArena],0	; 15/03/2018
 30833 00006590 756B                    	JNZ     SHORT alloc_do_split
 30834                                  
 30835                                  	; MSDOS 6.0
 30836                                  	;mov	ax,[arena_head]
 30837                                  	;cmp	ax,[start_arena]	; Q: started scanning from arena_head
 30838                                  	;je	short alloc_fail	; Y: not enough memory
 30839                                  	;				; N:
 30840                                  	;				; Q: is the alloc strat HIGH_ONLY
 30841                                  	;test 	byte [AllocMethod],HIGH_ONLY
 30842                                  	;jnz	short alloc_fail	; Y: return size of largest UMB
 30843                                  	;
 30844                                  	;mov	[start_arena],ax	; N: start scanning from arena_head
 30845                                  	;jmp	short start_scan
 30846                                  	;				; M000 - end
 30847                                  
 30848                                  alloc_fail:
 30849                                          ;invoke Get_User_Stack
 30850 00006592 E876B0                          CALL	Get_User_Stack
 30851 00006595 5B                      	POP     BX
 30852                                          ;MOV	[SI].user_BX,BX
 30853                                  	;MOV	[SI+2],BX
 30854 00006596 895C02                  	mov	[SI+user_env.user_BX],bx
 30855                                  	;LeaveCrit critMem
 30856 00006599 E8D8BA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 30857                                  	;error	error_not_enough_memory
 30858                                  	;mov	al,8
 30859 0000659C B008                    	MOV	AL,error_not_enough_memory
 30860                                  	;jmp	short alloc_errj
 30861 0000659E E968B1                  	JMP	SYS_RET_ERR
 30862                                  
 30863                                  alloc_free:
 30864 000065A1 E88CFF                          CALL    Coalesce		; add following free block to current
 30865 000065A4 72DB                            JC	SHORT alloc_err		; IF error THEN GOTO err
 30866 000065A6 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30867 000065AA 5A                              POP     DX                      ; check for max found size
 30868 000065AB 39D1                            CMP     CX,DX
 30869 000065AD 7602                            JNA     SHORT alloc_test
 30870 000065AF 89CA                            MOV     DX,CX
 30871                                  
 30872                                  alloc_test:
 30873 000065B1 52                              PUSH    DX
 30874 000065B2 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 30875 000065B4 77C1                            JA      SHORT alloc_next	;   GOTO next
 30876                                  
 30877                                  	; 15/03/2018
 30878 000065B6 36833E[EC02]00                  CMP     WORD [SS:FirstArena],0
 30879 000065BC 7505                    	JNZ	SHORT alloc_best
 30880 000065BE 368C1E[EC02]                    MOV     [SS:FirstArena],DS	; save first one found	
 30881                                  alloc_best:
 30882 000065C3 36833E[EE02]00                  CMP     WORD [SS:BestArena],0
 30883 000065C9 740E                            JZ      SHORT alloc_make_best	; initial best
 30884 000065CB 06                              PUSH	ES
 30885 000065CC 368E06[EE02]                    MOV     ES,[SS:BestArena]
 30886 000065D1 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 30887 000065D6 07                              POP	ES
 30888 000065D7 7605                            JBE     SHORT alloc_last
 30889                                  alloc_make_best:
 30890 000065D9 368C1E[EE02]                    MOV     [SS:BestArena],DS	; assign best
 30891                                  alloc_last:
 30892 000065DE 368C1E[F002]                    MOV     [SS:LastArena],DS 	; assign last
 30893 000065E3 EB92                            JMP     SHORT alloc_next
 30894                                  ;
 30895                                  ; split the block high
 30896                                  ;
 30897                                  alloc_do_split_high:
 30898 000065E5 368E1E[F002]                    MOV     DS,[SS:LastArena]
 30899 000065EA 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30900 000065EE 29D9                            SUB     CX,BX
 30901 000065F0 8CDA                            MOV     DX,DS
 30902 000065F2 7444                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 30903 000065F4 01CA                            ADD     DX,CX                   ; point to next block
 30904 000065F6 8EC2                            MOV     ES,DX                   ; no decrement!
 30905 000065F8 49                              DEC     CX
 30906 000065F9 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 30907 000065FB EB26                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 30908                                  ;
 30909                                  ; we have scanned memory and have found all appropriate blocks
 30910                                  ; check for the type of allocation desired; first and best are identical
 30911                                  ; last must be split high
 30912                                  ;
 30913                                  alloc_do_split:
 30914                                  	; 04/08/2018
 30915                                  	; MSDOS 6.0			; M000 - start
 30916                                  	;xor	cx,cx
 30917                                  	;mov	cl,[AllocMethod]
 30918                                  	;and	cx,STRAT_MASK		; mask off bit 7
 30919                                  	;cmp	cx,BEST_FIT		; Q; is the alloc strategy best_fit
 30920                                  
 30921                                  	; 15/03/2018
 30922                                          ;CMP     BYTE [SS:AllocMethod], 1
 30923                                  	; 04/08/2018
 30924 000065FD 36803E[B002]01          	CMP     BYTE [SS:AllocMethod],BEST_FIT
 30925 00006603 77E0                            JA      SHORT alloc_do_split_high
 30926 00006605 368E1E[EC02]                    MOV     DS,[SS:FirstArena]        
 30927 0000660A 7205                    	JB      SHORT alloc_get_size
 30928 0000660C 368E1E[EE02]            	MOV     DS,[SS:BestArena]
 30929                                  
 30930                                  alloc_get_size:
 30931 00006611 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30932 00006615 29D9                            SUB     CX,BX                   ; get room left over
 30933 00006617 8CD8                            MOV     AX,DS
 30934 00006619 89C2                            MOV     DX,AX                   ; save for owner setting
 30935 0000661B 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 30936 0000661D 01D8                            ADD     AX,BX
 30937 0000661F 40                              INC     AX                      ; remember the header
 30938 00006620 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 30939 00006622 49                              DEC     CX                      ; CX <- size of split block
 30940                                  alloc_set_sizes:
 30941 00006623 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 30942 00006627 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 30943                                  	;mov	bl,4Dh ; 'M'
 30944 0000662C B34D                            MOV     BL,arena_signature_normal
 30945 0000662E 861D                            XCHG    BL,[DI]			; current signature <- 4D
 30946 00006630 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 30947 00006633 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 30948                                  
 30949                                  alloc_set_owner:
 30950 00006638 8EDA                            MOV     DS,DX
 30951 0000663A 36A1[DE02]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 30952 0000663E A30100                          MOV     [ARENA.OWNER],AX
 30953 00006641 8CD8                            MOV     AX,DS
 30954 00006643 40                              INC     AX
 30955 00006644 5B                              POP     BX
 30956                                  	;LeaveCrit critMem
 30957 00006645 E82CBA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 30958                                          ;transfer SYS_RET_OK
 30959 00006648 E9B2B0                  	JMP	SYS_RET_OK
 30960                                  
 30961                                  
 30962                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 30963                                  
 30964                                  ; MSDOS 6.0
 30965                                  ;----------------------------------------------------------------------------
 30966                                  ;**	$SETBLOCK - Change size of an Alocated Block
 30967                                  ;
 30968                                  ;	Setblock changes the size of an allocated block.  First, we coalesce
 30969                                  ;	any following free space onto this block; then we try to trim the
 30970                                  ;	block down to the size requested.
 30971                                  ;
 30972                                  ;	Note that if the guy wants to grow the block but that growth fails,
 30973                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 30974                                  ;	Thus the maximum-size-possible value that we return has already
 30975                                  ;	been allocated!  This is a bug, dare we fix it?  BUGBUG
 30976                                  ;
 30977                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 30978                                  ;		finish it's work.  FOr this reason we build the allocsf
 30979                                  ;		structure on the frame, to make us compatible with $ALLOCs
 30980                                  ;		code.
 30981                                  ;
 30982                                  ;	ENTRY	(es) = segment of old block
 30983                                  ;		(bx) = newsize
 30984                                  ;		(ah) = SETBLOCK
 30985                                  ;
 30986                                  ;	EXIT	'C' clear if OK
 30987                                  ;		'C' set if error
 30988                                  ;		  (ax) = error_invalid_block
 30989                                  ;		       = error_arena_trashed
 30990                                  ;		       = error_not_enough_memory
 30991                                  ;		       = error_invalid_function
 30992                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 30993                                  ;	USES	???? BUGBUG
 30994                                  ;----------------------------------------------------------------------------
 30995                                  
 30996                                  ; MSDOS 2.11 (& MSDOS 3.3)
 30997                                  ;----------------------------------------------------------------------------
 30998                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 30999                                  ;
 31000                                  ;   Assembler usage:
 31001                                  ;           MOV     ES,block
 31002                                  ;           MOV     BX,newsize
 31003                                  ;           MOV     AH,setblock
 31004                                  ;           INT     21h
 31005                                  ;         if setblock fails for growing, BX will have the maximum
 31006                                  ;         size possible
 31007                                  ;   Error return:
 31008                                  ;           AX = error_invalid_block
 31009                                  ;              = error_arena_trashed
 31010                                  ;              = error_not_enough_memory
 31011                                  ;              = error_invalid_function
 31012                                  ;----------------------------------------------------------------------------
 31013                                  
 31014                                  _$SETBLOCK:        
 31015                                  	; 04/08/2018 - Retro DOS v3.0
 31016                                  	;EnterCrit   critMem
 31017 0000664B E81EBA                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 31018                                  
 31019 0000664E BF0000                  	MOV     DI,ARENA.SIGNATURE
 31020 00006651 8CC0                            MOV     AX,ES
 31021 00006653 48                              DEC     AX
 31022 00006654 E8C9FE                          CALL    check_signature
 31023 00006657 7303                            JNC     SHORT setblock_grab
 31024                                  
 31025                                  setblock_bad:
 31026 00006659 E926FF                          JMP     alloc_trashed
 31027                                  
 31028                                  setblock_grab:
 31029 0000665C 8ED8                            MOV     DS,AX
 31030 0000665E E8CFFE                          CALL    Coalesce
 31031 00006661 72F6                            JC      SHORT setblock_bad
 31032 00006663 8B0E0300                        MOV     CX,[ARENA.SIZE]
 31033 00006667 51                              PUSH    CX
 31034 00006668 39CB                            CMP     BX,CX
 31035 0000666A 76A5                            JBE     SHORT alloc_get_size
 31036 0000666C E923FF                          JMP     alloc_fail
 31037                                  
 31038                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 31039                                  
 31040                                  ; MSDOS 6.0
 31041                                  ;----------------------------------------------------------------------------
 31042                                  ;**	$DEALLOC - Free Heap Memory
 31043                                  ;
 31044                                  ;	ENTRY	(es) = address of item
 31045                                  ;
 31046                                  ;	EXIT	'C' clear of OK
 31047                                  ;		'C' set if error
 31048                                  ;		  (AX) = error_invalid_block
 31049                                  ;	USES	???? BUGBUG
 31050                                  
 31051                                  ; MSDOS 2.11 (& MSDOS 3.3)
 31052                                  ;----------------------------------------------------------------------------
 31053                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 31054                                  ;
 31055                                  ;   Assembler usage:
 31056                                  ;           MOV     ES,block
 31057                                  ;           MOV     AH,dealloc
 31058                                  ;           INT     21h
 31059                                  ;
 31060                                  ;   Error return:
 31061                                  ;           AX = error_invalid_block
 31062                                  ;              = error_arena_trashed
 31063                                  ;---------------------------------------------------------------------------- 
 31064                                  
 31065                                  _$DEALLOC:    
 31066                                  	; 04/08/2018 - Retro DOS v3.0
 31067                                  	;EnterCrit   critMem
 31068 0000666F E8FAB9                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 31069                                  
 31070                                  	; MSDOS 6.0			; M016, M068 - Start
 31071                                  	;test	byte [DOS_FLAG],EXECA20OFF
 31072                                  					; Q: was the previous call an int 21
 31073                                  					;    exec call
 31074                                  	;jz	short deallocate	; N: continue
 31075                                  	;cmp	byte [A20OFF_COUNT], 0	; Q: is count 0
 31076                                  	;jne	short deallocate	; N: continue
 31077                                  	;mov	byte [A20OFF_COUNT], 1	; Y: set count to 1
 31078                                  ;deallocate:				; M016, M068 - End
 31079                                      
 31080 00006672 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 31081 00006675 8CC0                            MOV     AX,ES
 31082 00006677 48                              DEC     AX
 31083 00006678 E8A5FE                          CALL    check_signature
 31084 0000667B 720B                            JC      SHORT dealloc_err
 31085 0000667D 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 31086                                  	;LeaveCrit critMem
 31087 00006682 E8EFB9                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 31088                                          ;transfer SYS_RET_OK
 31089 00006685 E975B0                  	JMP	SYS_RET_OK
 31090                                  
 31091                                  dealloc_err:
 31092                                  	;LeaveCrit critMem
 31093 00006688 E8E9B9                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 31094                                          ;error	error_invalid_block
 31095                                  	;mov	al,9
 31096 0000668B B009                    	MOV	AL,error_invalid_block
 31097 0000668D E979B0                  	JMP	SYS_RET_ERR
 31098                                  
 31099                                  ;	BREAK $AllocOper - get/set allocation mechanism
 31100                                  
 31101                                  ; MSDOS 6.0
 31102                                  ;----------------------------------------------------------------------------
 31103                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 31104                                  ;
 31105                                  ;	Assembler usage:
 31106                                  ;           MOV     AH,AllocOper
 31107                                  ;           MOV     BX,method
 31108                                  ;           MOV     AL,func
 31109                                  ;           INT     21h
 31110                                  ;
 31111                                  ;	ENTRY	
 31112                                  ;		(al) = 0
 31113                                  ;		  Get allocation Strategy in (ax)
 31114                                  ;
 31115                                  ;		(al) = 1, (bx) = method = zw0000xy
 31116                                  ;		  Set allocation strategy.
 31117                                  ;		   w  = 1  => HIGH_ONLY
 31118                                  ;		   z  = 1  => HIGH_FIRST
 31119                                  ;		   xy = 00 => FIRST_FIT
 31120                                  ;		      = 01 => BEST_FIT
 31121                                  ;		      = 10 => LAST_FIT
 31122                                  ;
 31123                                  ;		(al) = 2
 31124                                  ;		  Get UMB link state in (al)
 31125                                  ;
 31126                                  ;		(al) = 3
 31127                                  ;		  Set UMB link state
 31128                                  ;		   (bx) = 0 => Unlink UMBs
 31129                                  ;		   (bx) = 1 => Link UMBs
 31130                                  ;
 31131                                  ;
 31132                                  ;	EXIT	'C' clear if OK
 31133                                  ;
 31134                                  ;		 if (al) = 0
 31135                                  ;		  (ax) = existing method
 31136                                  ;		 if (al) = 1
 31137                                  ;		  Sets allocation strategy
 31138                                  ;		 if (al) = 2
 31139                                  ;		  (al) = 0 => UMBs not linked
 31140                                  ;		  (al) = 1 => UMBs linked in
 31141                                  ;		 if (al) = 3
 31142                                  ;		  Links/Unlinks the UMBs into DOS chain
 31143                                  ;
 31144                                  ;		'C' set if error
 31145                                  ;		  AX = error_invalid_function
 31146                                  ;
 31147                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 31148                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 31149                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 31150                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 31151                                  ;		    arena' if an arena sig is damaged.
 31152                                  ;----------------------------------------------------------------------------
 31153                                  
 31154                                  ; MSDOS 2.11 (& MSDOS 3.3)
 31155                                  ;----------------------------------------------------------------------------
 31156                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 31157                                  ;
 31158                                  ;   Assembler usage:
 31159                                  ;           MOV     AH,AllocOper
 31160                                  ;           MOV     BX,method
 31161                                  ;           MOV     AL,func
 31162                                  ;           INT     21h
 31163                                  ;
 31164                                  ;   Error return:
 31165                                  ;           AX = error_invalid_function
 31166                                  ;----------------------------------------------------------------------------
 31167                                  
 31168                                  _$ALLOCOPER:
 31169                                  	; MSDOS 6.0
 31170                                  	;or	al, al
 31171                                  	;jz	short AllocGetStrat
 31172                                  	;cmp	al, 1
 31173                                  	;jz	short AllocSetStrat
 31174                                  	;cmp	al, 2
 31175                                  	;jz	short AllocGetLink
 31176                                  	;cmp	al, 3
 31177                                  	;jz	short AllocSetLink
 31178                                  
 31179                                  	; 15/04/2018
 31180 00006690 3C01                    	CMP     AL,1
 31181 00006692 720D                            JB      SHORT AllocOperGet
 31182 00006694 7414                            JZ      SHORT AllocOperSet
 31183                                  
 31184                                  AllocOperError:
 31185                                  	; 04/08/2018 - Retro DOS v3.0
 31186                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 31187                                  	;mov	byte [ss:EXTERR_LOCUS],5
 31188 00006696 36C606[D102]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 31189                                  	;error	error_invalid_function
 31190                                  	;mov	al,1
 31191 0000669C B001                    	MOV	AL,error_invalid_function
 31192                                  AllocOperErrj:
 31193 0000669E E968B0                  	JMP	SYS_RET_ERR
 31194                                  
 31195                                  ;AllocArenaError:
 31196                                  	; MSDOS 6.0
 31197                                  	;MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 31198                                  	;				; M009: Extended Error Locus
 31199                                  	;;error   error_arena_trashed	; M009:
 31200                                  	;MOV	AL,error_arena_trashed
 31201                                  	;;JMP	SYS_RET_ERR
 31202                                  	;jmp	short AllocOperErrj
 31203                                  
 31204                                  ;AllocGetStrat: 
 31205                                  	; MSDOS 6.0
 31206                                  AllocOperGet:
 31207 000066A1 36A0[B002]                      MOV     AL,[SS:AllocMethod]
 31208 000066A5 30E4                            XOR     AH,AH
 31209                                          ;transfer SYS_RET_OK
 31210 000066A7 E953B0                  	JMP	SYS_RET_OK
 31211                                  
 31212                                  ;AllocSetStrat: 
 31213                                  	; MSDOS 6.0
 31214                                  	;push	bx			; M000 - start
 31215                                  	;and	bx,STRAT_MASK 		; M064: mask off bit 6 & 7
 31216                                  	;cmp	bx,2			; BX must be 0-2
 31217                                  	;pop	bx			; M000 - end
 31218                                  	;ja	short AllocOperError
 31219                                  
 31220                                  AllocOperSet:
 31221 000066AA 36881E[B002]                    MOV     [SS:AllocMethod],BL
 31222                                          ;transfer SYS_RET_OK
 31223 000066AF E94BB0                  	JMP	SYS_RET_OK
 31224                                  
 31225                                  ;AllocGetLink:
 31226                                  	; MSDOS 6.0
 31227                                  	;mov	al,[UmbFlag]		; return link state in al
 31228                                  	;and 	al,LINKSTATE		
 31229                                  	;;transfer SYS_RET_OK
 31230                                  	;jmp	SYS_RET_OK
 31231                                  
 31232                                  ;AllocSetLink:
 31233                                  	; MSDOS 6.0			; M009 - start
 31234                                  	;mov	cx,[umb_head]		; cx = umb_head
 31235                                  	;cmp	cx,0FFFFh		; Q: has umb_head been initialized
 31236                                  	;je	short AllocOperError	; N: error
 31237                                  	;				; Y: continue
 31238                                  	;				; M009 - end
 31239                                  	;cmp	bx,1			
 31240                                  	;jb	short UnlinkUmbs
 31241                                  	;jz	short LinkUmbs
 31242                                  	;
 31243                                  	;jmp	short AllocOperError
 31244                                  	;
 31245                                  ;UnlinkUmbs:
 31246                                  	;test	byte[UmbFlag],LINKSTATE	; Q: umbs unlinked?
 31247                                  	;jz	short unlinked		; Y: return 
 31248                                  	;
 31249                                  	;call	GetLastArena		; get arena before umb_head in DS
 31250                                  	;jc	short AllocArenaError	; M009: arena trashed
 31251                                  	;
 31252                                  	;				; make it last
 31253                                  	;mov	byte [0],arena_signature_end
 31254                                  	;
 31255                                  	;and	byte [UmbFlag],~LINKSTATE ; indicate unlink'd state in umbflag
 31256                                  	;
 31257                                  ;unlinked:
 31258                                  	;;transfer SYS_RET_OK
 31259                                  	;jmp	SYS_RET_OK
 31260                                  
 31261                                  ;LinkUmbs:
 31262                                  	;test	byte [UmbFlag],LINKSTATE ; Q: umbs linked?
 31263                                  	;jnz	short linked		; Y: return
 31264                                  	;
 31265                                  	;call	GetLastArena		; get arena before umb_head
 31266                                  	;jc	short AllocArenaError	; M009: arena trashed
 31267                                  	;
 31268                                  	;				; make it normal. M061: ds points to
 31269                                  	;				; arena before umb_head
 31270                                  	;mov	byte [0],arena_signature_normal
 31271                                  	;
 31272                                  	;or	byte [UmbFlag],LINKSTATE ; indicate link'd state in umbflag
 31273                                  ;linked:
 31274                                  	;;transfer SYS_RET_OK
 31275                                  	;jmp	SYS_RET_OK
 31276                                  
 31277                                  ; MSDOS 6.0
 31278                                  ;--------------------------------------------------------------------------
 31279                                  ; Procedure Name : GetLastArena		-  M003
 31280                                  ;
 31281                                  ; Inputs	 : cx = umb_head
 31282                                  ;
 31283                                  ;
 31284                                  ; Outputs	 : If UMBs are linked
 31285                                  ;			ES = umb_head
 31286                                  ;			DS = arena before umb_head
 31287                                  ;		   else
 31288                                  ;			DS = last arena
 31289                                  ;			ES = next arena. will be umb_head if NC.
 31290                                  ;
 31291                                  ;		   CY if error
 31292                                  ;
 31293                                  ; Uses		 : DS, ES, DI, BX
 31294                                  ;--------------------------------------------------------------------------
 31295                                  	
 31296                                  ;Procedure	GetLastArena, NEAR
 31297                                  ;
 31298                                  ;	push	ax			; save ax
 31299                                  ;
 31300                                  ;	mov	ax, [arena_head]
 31301                                  ;	mov	es, ax			; es = arena_head
 31302                                  ;	xor	di, di
 31303                                  ;
 31304                                  ;	cmp     byte ptr es:[di],arena_signature_end
 31305                                  ;					; Q: is this the last arena
 31306                                  ;	je	GLA_done		; Y: return last arena in ES		
 31307                                  ;					
 31308                                  ;
 31309                                  ;GLA_next:
 31310                                  ;	mov	ds, ax
 31311                                  ;	call	arena_next		; ax, es -> next arena
 31312                                  ;	jc	GLA_err
 31313                                  ;
 31314                                  ;	test	[UmbFlag], LINKSTATE	; Q: are UMBs linked
 31315                                  ;	jnz	GLA_chkumb		; Y: terminating condition is 
 31316                                  ;					;    umb_head
 31317                                  ;					; N: terminating condition is 05Ah
 31318                                  ;
 31319                                  ;	cmp     byte ptr es:[di],arena_signature_end
 31320                                  ;					; Q: is this the last arena
 31321                                  ;	jmp	short @f
 31322                                  ;GLA_chkumb:
 31323                                  ;	cmp	ax, cx			; Q: is this umb_head
 31324                                  ;@@:
 31325                                  ;	jne	GLA_next		; N: get next arena
 31326                                  ;
 31327                                  ;GLA_done:
 31328                                  ;					; M061 - Start
 31329                                  ;	test	[UmbFlag], LINKSTATE	; Q: are UMBs linked
 31330                                  ;	jnz	GLA_ret			; Y: we're done
 31331                                  ;					; N: let us confirm that the next 
 31332                                  ;					;    arena is umb_head
 31333                                  ;	mov	ds, ax
 31334                                  ;	call	arena_next		; ax, es -> next arena
 31335                                  ;	jc	GLA_err
 31336                                  ;	cmp	ax, cx			; Q: is this umb_head
 31337                                  ;	jne	GLA_err			; N: error
 31338                                  ;					; M061 - End
 31339                                  ;
 31340                                  ;GLA_ret:				
 31341                                  ;	clc
 31342                                  ;	pop	ax			; M061
 31343                                  ;	ret				; M061
 31344                                  ;
 31345                                  ;GLA_err:
 31346                                  ;	stc				; M061
 31347                                  ;	pop	ax
 31348                                  ;	ret
 31349                                  ;
 31350                                  ;EndProc GetLastArena
 31351                                  
 31352                                  ;============================================================================
 31353                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 31354                                  ;============================================================================
 31355                                  ; 04/08/2018 - Retro DOS v3.0
 31356                                  
 31357                                  ;	TITLE SRVCALL - Server DOS call
 31358                                  ;	NAME  SRVCALL
 31359                                  
 31360                                  ;**	SRVCALL.ASM - Server DOS call functions
 31361                                  ;
 31362                                  ;
 31363                                  ;	$ServerCall
 31364                                  ;
 31365                                  ;	Modification history:
 31366                                  ;
 31367                                  ;	    Created: ARR 08 August 1983
 31368                                  
 31369                                  ;AsmVars <Installed>
 31370                                  
 31371                                  ;include dpl.asm
 31372                                  
 31373                                  ;Installed = TRUE
 31374                                  
 31375                                  ;BREAK <ServerCall -- Server DOS call>
 31376                                  ;----------------------------------------------------------------------------
 31377                                  ;
 31378                                  ; Procedure Name : $ServerCall
 31379                                  ;
 31380                                  ; Inputs:
 31381                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 31382                                  ; Function:
 31383                                  ;	AL=0	Server DOS call
 31384                                  ;	AL=1	Commit All files
 31385                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 31386                                  ;	AL=3	Close all files for DPL_UID
 31387                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 31388                                  ;	AL=5	Get open file list entry
 31389                                  ;		    IN: BX File Index
 31390                                  ;			CX User Index
 31391                                  ;		    OUT:ES:DI -> Name
 31392                                  ;			BX = UID
 31393                                  ;		    CX = # locked blocks held by this UID
 31394                                  ;	AL=6	Get DOS data area
 31395                                  ;		    OUT: DS:SI -> Start
 31396                                  ;			CX size in bytes of swap if indos
 31397                                  ;			DX size in bytes of swap always
 31398                                  ;	AL=7	Get truncate flag
 31399                                  ;	AL=8	Set truncate flag
 31400                                  ;	AL=9	Close all spool files
 31401                                  ;	AL=10	SetExtendedError
 31402                                  ;
 31403                                  ;----------------------------------------------------------------------------
 31404                                  
 31405                                  _$ServerCall:
 31406                                  	; 05/08/2018 - Retro DOS v3.0
 31407                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 31408 000066B2 3C07                    	CMP	AL,7
 31409 000066B4 7204                    	JB	short SET_STUFF
 31410 000066B6 3C09                    	CMP	AL,9
 31411 000066B8 7612                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 31412                                  SET_STUFF:
 31413 000066BA 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 31414                                  	;mov	bx,[si+12h]
 31415 000066BC 8B5C12                  	MOV	BX,[SI+DPL.UID]
 31416                                  
 31417                                  	; MSDOS 6.0
 31418                                  ;SR;
 31419                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 31420                                  ; of USER_ID
 31421                                  ;
 31422                                  	;test	byte [SS:IsWin386],1
 31423                                  	;jnz	short skip_win386
 31424                                  
 31425                                  ;hkn; SS override for user_id and proc_id
 31426                                  	; 15/08/2018
 31427 000066BF 36891E[EA02]            	MOV	[SS:USER_ID],BX		; Set UID
 31428                                  
 31429                                  ;skip_win386:
 31430                                  
 31431 000066C4 8B5C14                  	MOV	BX,[SI+DPL.PID]
 31432 000066C7 36891E[E802]            	MOV	[SS:PROC_ID],BX		; Set process ID
 31433                                  NO_SET_ID:
 31434 000066CC 36FF36[3A14]            	PUSH	word [SS:SERVERLEAVE]	; push return address
 31435 000066D1 36FF36[3814]            	PUSH	word [SS:SERVERTAB]	; push table address
 31436 000066D6 50                      	PUSH	AX
 31437 000066D7 E8C9B8                  	call	TableDispatch
 31438                                  
 31439                                  ;hkn; SS override
 31440                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 31441 000066DA 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 31442                                  	;error	error_invalid_function
 31443                                  	;mov	al,1
 31444 000066E0 B001                    	MOV	AL,error_invalid_function
 31445                                  servercall_error:
 31446 000066E2 E924B0                  	JMP	SYS_RET_ERR
 31447                                  
 31448                                  SERVERRETURN:
 31449 000066E5 C3                      	retn
 31450                                  
 31451                                  ; Commit - iterate through the open file list and make sure that the
 31452                                  ; directory entries are correctly updated.
 31453                                  
 31454                                  COMMIT_ALL:
 31455 000066E6 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 31456 000066E8 16                      	push	ss
 31457 000066E9 1F                      	pop	ds
 31458 000066EA E87FB9                  	call	EcritSFT		; Gonna scan SFT cache, lock it down
 31459                                  CommitLoop:
 31460 000066ED 53                      	push	bx
 31461 000066EE E82501                  	call	SFFromSFN
 31462 000066F1 7223                    	JC	short CommitDone
 31463 000066F3 26833D00                	cmp	word [es:di],0
 31464                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 31465                                  					; if (ThisSFT->refcount != 0)
 31466 000066F7 7419                    	JZ	short CommitNext
 31467                                  	;cmp	word [es:di],0FFFFh ; -1
 31468 000066F9 26833DFF                	cmp	word [ES:DI],sf_busy
 31469                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 31470                                  					; BUSY SFTs have god knows what
 31471 000066FD 7413                    	JZ	short CommitNext	;   in them.
 31472 000066FF 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 31473 00006705 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 31474                                  					;	doesn't deadlock
 31475 00006707 893E[3605]              	MOV	[THISSFT],DI
 31476 0000670B 8C06[3805]              	MOV	[THISSFT+2],ES
 31477 0000670F E8B1D4                  	call	DOS_COMMIT		;	DOSCommit ();
 31478                                  CommitNext:
 31479 00006712 5B                      	pop	bx
 31480 00006713 43                      	INC	BX
 31481 00006714 EBD7                    	JMP	short CommitLoop
 31482                                  CommitDone:
 31483 00006716 E85BB9                  	call	LcritSFT
 31484 00006719 5B                      	pop	bx
 31485 0000671A E9E0AF                  	jmp	SYS_RET_OK
 31486                                  
 31487                                  CLOSE_NAME:
 31488                                  
 31489                                  ;if installed
 31490                                  
 31491                                  ;hkn; SS override
 31492 0000671D 36FF1E[7000]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 31493                                  ;else
 31494                                  ;	Call	MFTcloN
 31495                                  ;endif
 31496                                  
 31497                                  CheckReturns:
 31498 00006722 7203                    	JC	short func_err
 31499 00006724 E9D6AF                  	jmp	SYS_RET_OK
 31500                                  func_err:
 31501                                  	;transfer SYS_RET_ERR
 31502                                  	;jmp	SYS_RET_ERR
 31503 00006727 EBB9                    	jmp	short servercall_error
 31504                                  
 31505                                  CLOSE_UID:
 31506                                  
 31507                                  ;if installed
 31508                                  ;hkn; SS override
 31509 00006729 36FF1E[6800]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 31510                                  ;else
 31511                                  ;	Call	MFTclU
 31512                                  ;endif
 31513 0000672E EBF2                    	JMP	short CheckReturns
 31514                                  
 31515                                  CLOSE_UID_PID:
 31516                                  
 31517                                  ;if installed
 31518                                  ;hkn; SS override
 31519 00006730 36FF1E[6C00]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 31520                                  ;else
 31521                                  ;	Call	MFTCloseP
 31522                                  ;endif
 31523 00006735 EBEB                    	JMP	CheckReturns
 31524                                  
 31525                                  GET_LIST:
 31526                                  
 31527                                  ;if installed
 31528                                  ;hkn; SS override
 31529 00006737 36FF1E[8000]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 31530                                  ;else
 31531                                  ;	Call	MFT_get
 31532                                  ;endif
 31533 0000673C 72E9                    	JC	short func_err
 31534 0000673E E8CAAE                  	call	Get_User_Stack
 31535                                  	;mov	[si+2],bx
 31536 00006741 895C02                  	MOV	[SI+user_env.user_BX],BX
 31537                                  	;mov	[si+10],di
 31538 00006744 897C0A                  	MOV	[SI+user_env.user_DI],DI
 31539                                  	;mov	[si+16],es
 31540 00006747 8C4410                  	MOV	[SI+user_env.user_ES],ES
 31541                                  SetCXOK:
 31542                                  	;mov	[si+4],cx
 31543 0000674A 894C04                  	MOV	[SI+user_env.user_CX],CX
 31544 0000674D E9ADAF                  	jmp	SYS_RET_OK
 31545                                  
 31546                                  SRV_CALL:
 31547 00006750 58                      	POP	AX			; get rid of call to $srvcall
 31548 00006751 1E                      	push	ds
 31549 00006752 56                      	push	si
 31550 00006753 E8B5AE                  	call	Get_User_Stack
 31551 00006756 5F                      	pop	di
 31552 00006757 07                      	pop	es
 31553                                  ;
 31554                                  ; DS:SI point to stack
 31555                                  ; ES:DI point to DPL
 31556                                  ;
 31557 00006758 E827B8                  	call	XCHGP
 31558                                  ;
 31559                                  ; DS:SI point to DPL
 31560                                  ; ES:DI point to stack
 31561                                  ;
 31562                                  ; We now copy the registers from DPL to save stack
 31563                                  ;
 31564 0000675B 56                      	push	si
 31565 0000675C B90600                  	MOV	CX,6
 31566 0000675F F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 31567 00006761 47                      	INC	DI
 31568 00006762 47                      	INC	DI			; Skip user_BP
 31569 00006763 A5                      	MOVSW				; DS
 31570 00006764 A5                      	MOVSW				; ES
 31571 00006765 5E                      	pop	si			; DS:SI -> DPL
 31572 00006766 8B04                    	mov	ax,[SI]
 31573                                  	;MOV	AX,[SI+DPL.AX]
 31574                                  	;mov	bx,[si+2]
 31575 00006768 8B5C02                  	MOV	BX,[SI+DPL.BX]
 31576                                  	;mov	cx,[si+4]
 31577 0000676B 8B4C04                  	MOV	CX,[SI+DPL.CX]
 31578                                  	;mov	dx,[si+6]
 31579 0000676E 8B5406                  	MOV	DX,[SI+DPL.DX]
 31580                                  	;mov	di,[si+10]
 31581 00006771 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 31582                                  	;mov	es,[si+14]
 31583 00006774 8E440E                  	MOV	ES,[SI+DPL.ES]
 31584                                  	;push	word [si+8]
 31585 00006777 FF7408                  	PUSH	word [SI+DPL.SI]
 31586                                  	;mov	ds,[si+12]
 31587 0000677A 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 31588 0000677D 5E                      	POP	SI
 31589                                  
 31590                                  ;hkn; SS override for next 3
 31591 0000677E 368C1E[7E05]            	MOV	[SS:SAVEDS],DS
 31592 00006783 36891E[7C05]            	MOV	[SS:SAVEBX],BX
 31593 00006788 36C606[0D05]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 31594 0000678E E9B4AD                  	jmp	REDISP
 31595                                  
 31596                                  GET_DOS_DATA:
 31597 00006791 16                      	push	ss
 31598 00006792 07                      	pop	es
 31599 00006793 BF[CE02]                	MOV     DI,SWAP_START
 31600 00006796 B9[090A]                	MOV     CX,SWAP_END
 31601 00006799 BA[E602]                	MOV     DX,SWAP_ALWAYS
 31602 0000679C 29F9                    	SUB     CX,DI
 31603 0000679E 29FA                    	SUB     DX,DI
 31604 000067A0 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 31605 000067A2 83D100                  	ADC     CX,0                    ; div by 2 + round up
 31606 000067A5 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 31607 000067A7 E861AE                  	call	Get_User_Stack
 31608                                  	;mov	[si+14],es
 31609 000067AA 8C440E                  	MOV     [SI+user_env.user_DS],ES
 31610                                  	;mov	[si+8],di
 31611 000067AD 897C08                  	MOV     [SI+user_env.user_SI],DI
 31612                                  	;mov	[si+6],dx
 31613 000067B0 895406                  	MOV     [SI+user_env.user_DX],DX
 31614 000067B3 EB95                    	JMP	short SetCXOK
 31615                                  
 31616                                  SPOOL_OPER:
 31617                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 31618                                  
 31619 000067B5 50                      	push    ax
 31620 000067B6 B82511                  	mov     ax, 1125h
 31621 000067B9 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 31622                                  			; STACK: WORD subfunction
 31623                                  			; Return: CF set on error, AX = error code
 31624                                  			; STACK unchanged
 31625 000067BB 5B                      	pop	bx
 31626 000067BC 7203                    	JC	short func_err2
 31627 000067BE E93CAF                  	jmp	SYS_RET_OK
 31628                                  func_err2:
 31629 000067C1 E945AF                  	jmp	SYS_RET_ERR
 31630                                  
 31631                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 31632                                  ;--------------------------------------------------------------------------
 31633                                  ;
 31634                                  ; Procedure Name : $SetExtendedError
 31635                                  ;
 31636                                  ; $SetExtendedError takes extended error information and loads it up for the
 31637                                  ; next extended error call.  This is used by interrupt-level proccessors to
 31638                                  ; mask their actions.
 31639                                  ;
 31640                                  ;   Inputs: DS:SI points to DPL which contains all registers
 31641                                  ;   Outputs: none
 31642                                  ;
 31643                                  ;---------------------------------------------------------------------------
 31644                                  
 31645                                  _$SetExtendedError:
 31646                                  
 31647                                  ;hkn; SS override for all variables used
 31648                                  
 31649 000067C4 8B04                    	mov	ax,[si]
 31650                                  	;MOV	AX,[SI+DPL.AX]
 31651 000067C6 36A3[D202]              	MOV	[SS:EXTERR],AX
 31652                                  	;mov	ax,[si+10]
 31653 000067CA 8B440A                  	MOV	AX,[SI+DPL.DI]
 31654 000067CD 36A3[D602]              	MOV	[SS:EXTERRPT],AX
 31655                                  	;mov	ax,[si+14]
 31656 000067D1 8B440E                  	MOV	AX,[SI+DPL.ES]
 31657 000067D4 36A3[D802]              	MOV	[SS:EXTERRPT+2],AX
 31658                                  	;mov	ax,[si+2]
 31659 000067D8 8B4402                  	MOV	AX,[SI+DPL.BX]
 31660 000067DB 36A3[D402]              	MOV	[SS:EXTERR_ACTION],AX
 31661                                  	;mov	ax,[si+4]
 31662 000067DF 8B4404                  	MOV	AX,[SI+DPL.CX]
 31663 000067E2 368826[D102]            	MOV	[SS:EXTERR_LOCUS],AH
 31664 000067E7 C3                      	retn
 31665                                  
 31666                                  ;============================================================================
 31667                                  ; UTIL.ASM, MSDOS 6.0, 1991
 31668                                  ;============================================================================
 31669                                  ; 05/08/2018 - Retro DOS v3.0
 31670                                  
 31671                                  ;**	Handle related utilities for MSDOS 2.X.
 31672                                  ;
 31673                                  ;	pJFNFromHandle	written
 31674                                  ;	SFFromHandle	written
 31675                                  ;	SFFromSFN	written
 31676                                  ;	JFNFree 	written
 31677                                  ;	SFNFree 	written
 31678                                  ;
 31679                                  ;	Modification history:
 31680                                  ;
 31681                                  ;	    Created: MZ 1 April 1983
 31682                                  
 31683                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 31684                                  
 31685                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 31686                                  ;----------------------------------------------------------------------------
 31687                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 31688                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 31689                                  ;
 31690                                  ;	NOTE:
 31691                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 31692                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 31693                                  ;
 31694                                  ;	ENTRY	(bx) = handle
 31695                                  ;	EXIT	'C' clear if ok
 31696                                  ;		  (es:di) = address of JFN value
 31697                                  ;		'C' set if error
 31698                                  ;		  (ax) = error code
 31699                                  ;	USES	AX, DI, ES, Flags
 31700                                  ;----------------------------------------------------------------------------
 31701                                  
 31702                                  pJFNFromHandle:
 31703                                  
 31704 000067E8 2E8E06[DE02]            	MOV	ES,[cs:CurrentPDB]	; get user process data block
 31705                                  	;cmp	bx,[ES:32h]
 31706 000067ED 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 31707 000067F2 7204                    	JB	short pjfn10		; no, get offset
 31708                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 31709                                  	;mov	al,6
 31710 000067F4 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 31711                                  ReturnCarry:
 31712 000067F6 F9                      	STC                             ; signal error
 31713 000067F7 C3                      	retn				; go back
 31714                                  pjfn10: 
 31715                                  	;les	di,[es:34h]
 31716 000067F8 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 31717 000067FD 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 31718                                  	;clc
 31719                                  pJFNFromHandle_error:
 31720 000067FF C3                      	retn
 31721                                  
 31722                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 31723                                  ;----------------------------------------------------------------------------
 31724                                  ;
 31725                                  ; Procedure Name : SFFromHandle
 31726                                  ;
 31727                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 31728                                  ;
 31729                                  ;   Input:      BX has handle
 31730                                  ;   Output:     Carry Set
 31731                                  ;                   AX has error code
 31732                                  ;               Carry Reset
 31733                                  ;                   ES:DI has pointer to SF entry
 31734                                  ;   Registers modified: If error, AX,ES, else ES:DI
 31735                                  ; NOTE:
 31736                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 31737                                  ;       at DOSINIT time with SS NOT DOSGROUP
 31738                                  ;
 31739                                  ;----------------------------------------------------------------------------
 31740                                  
 31741                                  SFFromHandle:
 31742 00006800 E8E5FF                  	CALL    pJFNFromHandle          ; get jfn pointer
 31743                                  	;retc				; return if error
 31744 00006803 72FA                    	jc	short pJFNFromHandle_error
 31745 00006805 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 31746                                  	;JNZ	short GetSF		; nope, suck out SF
 31747                                  	;;mov	al,6
 31748                                  	;MOV	AL,error_invalid_handle ; appropriate error
 31749                                  	;jmp	short ReturnCarry	; signal it
 31750 00006809 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 31751                                  GetSF:
 31752 0000680B 53                      	push	bx			; save handle
 31753 0000680C 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 31754 0000680F 30FF                    	XOR     BH,BH                   ; ignore upper half
 31755 00006811 E80200                  	CALL    SFFromSFN               ; get real sf spot
 31756 00006814 5B                      	pop	bx			; restore
 31757 00006815 C3                      	retn                          ; say goodbye
 31758                                  
 31759                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 31760                                  
 31761                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 31762                                  ;----------------------------------------------------------------------------
 31763                                  ;	SFFromSfn uses an SFN to index an entry into the SF table.  This
 31764                                  ;	is more than just a simple index instruction because the SF table
 31765                                  ;	can be made up of multiple pieces chained together. We follow the
 31766                                  ;	chain to the right piece and then do the index operation.
 31767                                  ;
 31768                                  ;   NOTE:
 31769                                  ;	This routine is called from SFFromHandle which is called
 31770                                  ;       at DOSINIT time with SS NOT DOSGROUP
 31771                                  ;
 31772                                  ;	ENTRY	BX has SF index
 31773                                  ;	EXIT	'C' clear if OK
 31774                                  ;		  ES:DI points to SF entry
 31775                                  ;		'C' set if index too large
 31776                                  ;	USES	BX, DI, ES
 31777                                  ;----------------------------------------------------------------------------
 31778                                  
 31779                                  SFFromSFN:
 31780 00006816 2EC43E[2A00]            	LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 31781                                  sfsfn5:	
 31782                                  	;cmp	bx,[es:di+4]
 31783 0000681B 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 31784 0000681F 720E                    	JB	short sfsfn7		; yes, go grab it
 31785                                  	;sub	bx,[es:di+4]
 31786 00006821 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 31787 00006825 26C43D                  	les	di,[es:di] ; 14/08/2018
 31788                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 31789 00006828 83FFFF                  	CMP     DI,-1                   ; end of tables?
 31790 0000682B 75EE                    	JNZ	short sfsfn5		; no, try again
 31791 0000682D F9                      	STC
 31792 0000682E C3                      	retn				; return with error, not found
 31793                                  
 31794                                  sfsfn7:
 31795 0000682F 50                      	push	ax
 31796                                  	;mov	ax,53
 31797 00006830 B83500                  	MOV     AX,SF_ENTRY.size	; put it in a nice place
 31798 00006833 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 31799 00006835 01C7                    	ADD	DI,AX			; add base of SF block
 31800 00006837 58                      	pop	ax
 31801                                  	;add	di,6
 31802 00006838 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 31803 0000683B C3                      	retn				; return with 'C' clear
 31804                                  
 31805                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 31806                                  
 31807                                  ;**	JFNFree - Find a Free JFN Slot
 31808                                  ;----------------------------------------------------------------------------
 31809                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 31810                                  ;
 31811                                  ;	ENTRY	(ss) = DOSDATA
 31812                                  ;	EXIT	'C' clear if OK
 31813                                  ;		  (bx) = new handle
 31814                                  ;		  (es:di) = pointer to JFN slot
 31815                                  ;		'C' set if error
 31816                                  ;		  (al) = error code
 31817                                  ;	USES	bx, di, es, flags
 31818                                  ;----------------------------------------------------------------------------
 31819                                  
 31820                                  JFNFree:
 31821 0000683C 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 31822                                  jfnf1:	
 31823 0000683E E8A7FF                  	CALL	pJFNFromHandle		; get the appropriate handle
 31824 00006841 7209                    	JC	short jfnf5		; no more handles
 31825 00006843 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 31826 00006847 7405                    	je	short jfnfx		; yes, carry is clear
 31827 00006849 43                      	INC     BX                      ; no, next handle
 31828 0000684A EBF2                    	JMP	short jfnf1		; and try again
 31829                                  
 31830                                  ;	Error.	'C' set
 31831                                  jfnf5:	
 31832                                  	;mov	al,4
 31833 0000684C B004                    	MOV	AL,error_too_many_open_files
 31834                                  jfnfx:	
 31835 0000684E C3                      	retn				; bye
 31836                                  
 31837                                  ;	BREAK <SFNFree - Allocate a free SFN>
 31838                                  
 31839                                  ;**	SFNFree - Allocate a Free SFN/SFT
 31840                                  ;----------------------------------------------------------------------------
 31841                                  ;	SFNFree scans through the sf table looking for a free entry
 31842                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 31843                                  ;
 31844                                  ;	The problem is that we want to mark the SFT busy so that other threads
 31845                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 31846                                  ;	we can't just mark it busy because we may get blown out of our open
 31847                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 31848                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 31849                                  ;	an SFT with this value we look to see if it belongs to this user
 31850                                  ;	and process.  If it does belong to us then it must be an orphan
 31851                                  ;	and we reclaim it.
 31852                                  ;
 31853                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 31854                                  ;		over and over, but we could at least set a high water mark...
 31855                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 31856                                  ;		even though this is not a frequently called routine - jgl
 31857                                  ;
 31858                                  ;	ENTRY	(ss) = DOSDATA
 31859                                  ;	EXIT	'C' clear if no error
 31860                                  ;		  (bx) = SFN
 31861                                  ;		  (es:di) = pointer to SFT
 31862                                  ;		  es:[di].SFT_REF_COUNT = -1
 31863                                  ;		'C' set if error
 31864                                  ;		  (al) = error code
 31865                                  ;	USES	bx, di, es, Flags
 31866                                  ;----------------------------------------------------------------------------
 31867                                  
 31868                                  SFNFree:
 31869                                  	;12/08/2018
 31870                                  	;05/08/2018 - Retro DOS v3.0
 31871                                  	; MSDOS 6.0
 31872 0000684F 50                      	push	ax
 31873 00006850 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 31874                                  sfnf5:	
 31875 00006852 53                      	push	bx
 31876 00006853 E8C0FF                  	call	SFFromSFN		; get the potential handle
 31877 00006856 5B                      	pop	bx
 31878 00006857 723A                    	jc	short sfnf95		; no more free SFNs
 31879 00006859 26833D00                	cmp	word [ES:DI],0
 31880                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 31881 0000685D 741D                    	je	short sfnf20			; yep, got one
 31882                                  	
 31883                                  	;cmp	word [es:di],0FFFFh ; -1
 31884 0000685F 26833DFF                	cmp	word [ES:DI],sf_busy
 31885                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 31886 00006863 7403                    	je	short sfnf10		; special busy mark
 31887                                  sfnf7:	
 31888 00006865 43                      	inc	bx			; try the next one
 31889 00006866 EBEA                    	jmp	short sfnf5
 31890                                  
 31891                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 31892                                  ;	it was abandoned during a earlier call and we can use it.
 31893                                  ;
 31894                                  ;	(bx)	= SFN
 31895                                  ;	(es:di) = pointer to SFT
 31896                                  ;	(TOS)	= caller's (ax)
 31897                                  
 31898                                  sfnf10:	
 31899 00006868 36A1[EA02]              	mov	ax,[SS:USER_ID]
 31900                                  	;cmp	[es:di+2Fh],ax
 31901 0000686C 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 31902 00006870 75F3                    	jnz	short sfnf7		; not ours
 31903 00006872 36A1[E802]              	mov	ax,[SS:PROC_ID]
 31904                                  	;cmp	[es:di+31h],ax
 31905 00006876 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 31906 0000687A 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 31907                                  
 31908                                  ;	We have an SFT to allocate
 31909                                  ;
 31910                                  ;	(bx)	= SFN
 31911                                  ;	(es:di) = pointer to SFT
 31912                                  ;	(TOS)	= caller's (ax)
 31913                                  
 31914                                  sfnf20:
 31915                                  	; cf = 0 ;; Retro DOS v3.0
 31916                                  
 31917                                  	;mov	word [es:di],0FFFFh
 31918 0000687C 26C705FFFF              	mov	word [ES:DI],sf_busy
 31919                                  					; make sure that this is allocated
 31920                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 31921                                  
 31922 00006881 36A1[EA02]              	mov	ax,[SS:USER_ID]
 31923                                  	;mov	[es:di+2Fh],ax
 31924 00006885 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 31925 00006889 36A1[E802]              	mov	ax,[SS:PROC_ID]
 31926                                  	;mov	[es:di+31h],ax
 31927 0000688D 26894531                	mov	[es:DI+SF_ENTRY.sf_PID],ax
 31928                                  sfnf21: ;; Retro DOS v3.0
 31929 00006891 58                      	pop	ax
 31930                                  	;clc
 31931 00006892 C3                      	retn				; return with no error
 31932                                  
 31933                                  ;**	Error - no more free SFNs
 31934                                  ;
 31935                                  ;	'C' set
 31936                                  ;	(TOS) = saved ax
 31937                                  
 31938                                  sfnf95: 
 31939 00006893 58                      	pop	ax
 31940                                  	;mov	al,4
 31941 00006894 B004                    	mov	al,error_too_many_open_files
 31942 00006896 C3                      	retn				; return with 'C' and error
 31943                                  
 31944                                  ;============================================================================
 31945                                  ; MACRO.ASM, MSDOS 6.0, 1991
 31946                                  ;============================================================================
 31947                                  ; Retro	DOS v3.0 - 11/07/2018
 31948                                  
 31949                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 31950                                  ;	NAME	MACRO
 31951                                  
 31952                                  ;	Microsoft Confidential
 31953                                  ;	Copyright (C) Microsoft Corporation 1991
 31954                                  ;	All Rights Reserved.
 31955                                  
 31956                                  ;**	MACRO.ASM
 31957                                  ;
 31958                                  ;	$AssignOper
 31959                                  ;	FIND_DPB
 31960                                  ;	InitCDS
 31961                                  ;	$UserOper
 31962                                  ;	GetVisDrv
 31963                                  ;	GetThisDrv
 31964                                  ;	GetCDSFromDrv
 31965                                  ;
 31966                                  ;   Revision history:
 31967                                  ;
 31968                                  ;	Created: MZ 4 April 1983
 31969                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 31970                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 31971                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 31972                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 31973                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 31974                                  ;				    aliasing.
 31975                                  ;
 31976                                  ;   MSDOS performs several types of name translation. First, we maintain for
 31977                                  ;   each valid drive letter the text of the current directory on that drive.
 31978                                  ;   For invalid drive letters, there is no current directory so we pretend to
 31979                                  ;   be at the root. A current directory is either the raw local directory
 31980                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 31981                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 31982                                  ;
 31983                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 31984                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 31985                                  ;   this and all * are expanded into ?'s.
 31986                                  ;
 31987                                  ;   The second part of name translation involves subtree aliasing. A list of
 31988                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 31989                                  ;   the previous 'canonicalization' are then examined to see if any of the
 31990                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 31991                                  ;   replaced with the other subtree in the pair.
 31992                                  ;
 31993                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 31994                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 31995                                  ;   The output of the previous translation is examined to see if any of the
 31996                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 31997                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 31998                                  ;   'mount' one device under another.
 31999                                  ;
 32000                                  ;   The final form of name translation involves the mapping of a user's
 32001                                  ;   logical drive number into the internal physical drive. This is
 32002                                  ;   accomplished by converting the drive number into letter:CON, performing
 32003                                  ;   the above translation and then converting the character back into a drive
 32004                                  ;   number.
 32005                                  ;
 32006                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 32007                                  ;   take a path and form the real text of the pathname with all . and ..
 32008                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 32009                                  ;   TransPath.
 32010                                  ;
 32011                                  ;	A000	version 4.00  Jan. 1988
 32012                                  
 32013                                  ;Installed = TRUE
 32014                                  
 32015                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 32016                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 32017                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 32018                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 32019                                  ;					; current drive)
 32020                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 32021                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 32022                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 32023                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 32024                                  ;	I_need	MYNAME,16		; machine name
 32025                                  ;	I_need	MYNUM,WORD		; machine number
 32026                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 32027                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 32028                                  ;	I_need	DrvErr,BYTE		; drive error
 32029                                  
 32030                                  ;BREAK <$AssignOper -- Set up a Macro>
 32031                                  ;----------------------------------------------------------------------------
 32032                                  ; Inputs:
 32033                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 32034                                  ;	AL = 01 set assign mode 		    (SetMode)
 32035                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 32036                                  ;	AL = 03 Define Macro (attch start)
 32037                                  ;	    BL = Macro type
 32038                                  ;	       = 0 alias
 32039                                  ;	       = 1 file/device
 32040                                  ;	       = 2 drive
 32041                                  ;	       = 3 Char device -> network
 32042                                  ;	       = 4 File device -> network
 32043                                  ;	    DS:SI -> ASCIZ source name
 32044                                  ;	    ES:DI -> ASCIZ destination name
 32045                                  ;	AL = 04 Cancel Macro
 32046                                  ;	    DS:SI -> ASCIZ source name
 32047                                  ;	AL = 05 Modified get attach list entry
 32048                                  ;	AL = 06 Get ifsfunc item
 32049                                  ;	AL = 07 set in_use of a drive's CDS
 32050                                  ;	     DL = drive number, 0=default  0=A,,
 32051                                  ;	AL = 08 reset in_use of a drive's CDS
 32052                                  ;	     DL = drive number, 0=A, 1=B,,,
 32053                                  ; Function:
 32054                                  ;	Do macro stuff
 32055                                  ; Returns:
 32056                                  ;	Std Xenix style error return
 32057                                  ;----------------------------------------------------------------------------
 32058                                  
 32059                                  _$AssignOper:
 32060                                  	; MSDOS 6.0
 32061                                  	;CMP	AL,7			      ; set in_use ?		;AN000;
 32062                                  	;JNZ	short chk08		      ; no			;AN000;
 32063                                  ;srinuse:								;AN000;
 32064                                  	;PUSH	AX			      ; save al 		;AN000;
 32065                                  	;MOV	AL,DL			      ; AL= drive id		;AN000;
 32066                                  	;CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 32067                                  	;POP	AX			      ; 			;AN000;
 32068                                  	;JC	short baddrv		      ; bad drive		;AN000;
 32069                                  	;CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 32070                                  	;JZ	short baddrv		      ;     no			;AN000;
 32071                                  	;CMP	AL,7			      ; set ?			;AN000;
 32072                                  	;JNZ	short resetdrv		      ; no			;AN000;
 32073                                  	;OR	word [SI+curdir.flags],curdir_inuse; set in_use		;AN000;
 32074                                  	;JMP	SHORT okdone		      ; 			;AN000;
 32075                                  ;resetdrv:								;AN000;
 32076                                  	;AND	word [SI+curdir_flags],~curdir_inuse ; reset in_use	;AN000;
 32077                                  	;JMP	SHORT okdone			; 			;AN000;
 32078                                  ;baddrv: 								;AN000;
 32079                                  	;MOV	AX,error_invalid_drive	      ; error			;AN000;
 32080                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 32081                                  ;chk08:									;AN000;
 32082                                  	;CMP	AL,8			      ; reset inuse ?		;AN000;
 32083                                  	;JZ	short srinuse 		      ; yes			;AN000;
 32084                                  
 32085                                  	;IF	NOT INSTALLED
 32086                                  	;transfer NET_ASSOPER
 32087                                  	;ELSE
 32088                                  
 32089                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32090 00006897 50                      	PUSH	AX
 32091                                  	;mov	ax,111Eh
 32092                                  	;MOV	AX,(MultNET SHL 8) OR 30
 32093 00006898 B81E11                  	mov	ax,(MultNET*256)+30
 32094 0000689B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 32095                                  			; SS = DOS CS
 32096                                  			; STACK: WORD function to execute
 32097                                  			; Return: CF set on error, AX = error code
 32098                                  			; STACK unchanged
 32099 0000689D 5B                      	POP	BX			; Don't zap error code in AX
 32100 0000689E 7203                    	JC	short ASS_ERR
 32101                                  okdone:
 32102 000068A0 E95AAE                  	jmp	SYS_RET_OK
 32103                                  
 32104                                  ASS_ERR:
 32105 000068A3 E963AE                  	jmp	SYS_RET_ERR
 32106                                  
 32107                                  	;ENDIF
 32108                                  
 32109                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 32110                                  ;----------------------------------------------------------------------------
 32111                                  ;**	FIND_DPB - Find a DPB from a Drive #
 32112                                  ;
 32113                                  ;	ENTRY	AL has drive number A = 0
 32114                                  ;	EXIT	'C' set
 32115                                  ;		    No DPB for this drive number
 32116                                  ;		'C' clear
 32117                                  ;		    DS:SI points to DPB for drive
 32118                                  ;	USES	SI, DS, Flags
 32119                                  ;----------------------------------------------------------------------------
 32120                                  
 32121                                  FIND_DPB:
 32122 000068A6 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 32123                                  fdpb5:	
 32124 000068AB 83FEFF                  	CMP	SI,-1
 32125 000068AE 7409                    	JZ	short fdpb10
 32126 000068B0 3A04                    	cmp	al,[si]
 32127                                  	;CMP	AL,[SI+DPB.DRIVE]
 32128 000068B2 7406                    	jz	short ret_label15	; Carry clear (retz)
 32129                                  	;lds	si,[si+18h]
 32130 000068B4 C57418                  	LDS	SI,[SI+DPB.NEXT_DPB]
 32131 000068B7 EBF2                    	JMP	short fdpb5
 32132                                  
 32133                                  fdpb10:	
 32134 000068B9 F9                      	STC
 32135                                  
 32136                                  ret_label15:
 32137 000068BA C3                      	retn
 32138                                  
 32139                                  ;	Break <InitCDS - set up an empty CDS>
 32140                                  ;----------------------------------------------------------------------------
 32141                                  ;**	InitCDS - Setup an Empty CDS
 32142                                  ;
 32143                                  ;	ENTRY	ThisCDS points to CDS
 32144                                  ;		AL has uppercase drive letter
 32145                                  ;	EXIT	ThisCDS is now empty
 32146                                  ;		(ES:DI) = CDS
 32147                                  ;		'C' set if no DPB associated with drive
 32148                                  ;	USES	AH,ES,DI, Flags
 32149                                  ;----------------------------------------------------------------------------
 32150                                  
 32151                                  InitCDS:
 32152                                  	; 19/08/2018
 32153                                  	; 05/08/2018 - Retro DOS v3.0
 32154                                  	; MSDOS 6.0
 32155 000068BB 50                      	push	ax			; save (AL) for caller
 32156 000068BC 36C43E[3A05]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 32157                                  	;mov	word [es:di+67],0
 32158 000068C1 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 32159 000068C7 2C40                    	SUB	AL,"A"-1                ; A = 1
 32160 000068C9 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 32161 000068CE 7236                    	JC	short icdsx		; Drive does not map a physical drive
 32162 000068D0 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 32163 000068D1 50                      	PUSH	AX			; save drive number for later
 32164 000068D2 0441                    	add	al,"A"
 32165 000068D4 B43A                    	MOV	AH,':'
 32166 000068D6 268905                  	mov	[ES:DI],ax
 32167                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 32168                                  	;mov	ax,"\"
 32169                                  	;mov	[es:di+2],ax
 32170                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 32171 000068D9 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 32172                                  	;or	word [es:di+67],4000h
 32173                                  	;or	byte [es:di+68],40h
 32174 000068DF 26804D4440              	OR	byte [ES:DI+curdir.flags+1],curdir_inuse>>8
 32175 000068E4 29C0                    	sub	ax,ax
 32176                                  	;MOV	[es:di+73],ax ; 0
 32177 000068E6 26894549                	MOV	[ES:DI+curdir.ID],ax
 32178                                  	;mov	[es:di+75],ax ; 0
 32179 000068EA 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 32180 000068EE B002                    	mov	al,2
 32181                                  	;mov	[es:di+79],aX ; 2
 32182 000068F0 2689454F                	MOV	[ES:DI+curdir.end],ax
 32183 000068F4 58                      	POP	AX			; (al) = drive number
 32184 000068F5 1E                      	push	ds
 32185 000068F6 56                      	push	si
 32186 000068F7 E8ACFF                  	call	FIND_DPB
 32187 000068FA 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 32188                                  	;mov	[es:di+69],si
 32189 000068FC 26897545                	MOV	[ES:DI+curdir.devptr],SI
 32190                                  	;mov	[es:di+71],ds
 32191 00006900 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 32192                                  icds5:	
 32193 00006904 5E                      	pop	si
 32194 00006905 1F                      	pop	ds
 32195                                  icdsx:	
 32196 00006906 58                      	pop	ax
 32197                                  RET45:
 32198 00006907 C3                      	retn
 32199                                  
 32200                                  ;Break <$UserOper - get/set current user ID (for net)>
 32201                                  ;----------------------------------------------------------------------------
 32202                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 32203                                  ;	maintain this string and do no verifications.
 32204                                  ;
 32205                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 32206                                  ;				      4-printer-set-flags,5-printer-get-flags)
 32207                                  ;		DS:DX is user string pointer (calls 1,2)
 32208                                  ;		ES:DI is user buffer (call 3)
 32209                                  ;		BX is assign index (calls 2,3,4,5)
 32210                                  ;		CX is user number (call 1)
 32211                                  ;		DX is flag word (call 4)
 32212                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 32213                                  ;			and user CX is set to the user number
 32214                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 32215                                  ;		If AL = 5 then DX is flag word
 32216                                  ;----------------------------------------------------------------------------
 32217                                  
 32218                                  _$UserOper:
 32219                                  	; 05/08/2018 - Retro DOS v3.0
 32220                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32221 00006908 50                      	PUSH	AX
 32222 00006909 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 32223 0000690B 58                      	POP	AX
 32224 0000690C 7211                    	JB	short UserGet 		; return to user the string
 32225 0000690E 742E                    	JZ	short UserSet 		; set the current user
 32226 00006910 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 32227 00006912 763D                    	JBE	short UserPrint		; yep
 32228                                  	;mov	byte [ss:EXTERR_LOCUS],1
 32229 00006914 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 32230                                  					; Extended Error Locus
 32231                                  	;error	error_invalid_function	; not 0,1,2,3
 32232                                  	;mov	al,1
 32233 0000691A B001                    	MOV	AL,error_invalid_function
 32234                                  useroper_error:
 32235 0000691C E9EAAD                  	JMP	SYS_RET_ERR
 32236                                  
 32237                                  UserGet:
 32238                                  ; Transfer MYNAME to DS:DX
 32239                                  ; Set Return CX to MYNUM
 32240 0000691F 1E                      	PUSH	DS			; switch registers
 32241 00006920 07                      	POP	ES
 32242 00006921 89D7                    	MOV	DI,DX			; destination
 32243 00006923 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 32244 00006928 E8E0AC                  	call	Get_User_Stack
 32245 0000692B 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 32246 0000692E 16                      	push	ss			; point to DOSDATA
 32247 0000692F 1F                      	pop	ds
 32248 00006930 BE[B302]                	MOV	SI,MYNAME		; point source to user string
 32249                                  UserMove:
 32250 00006933 B90F00                  	MOV	CX,15
 32251 00006936 F3A4                    	REP	MOVSB			; blam.
 32252 00006938 31C0                    	XOR	AX,AX			; 16th byte is 0
 32253 0000693A AA                      	STOSB
 32254                                  UserBye:
 32255 0000693B E9BFAD                  	jmp	SYS_RET_OK		; no errors here
 32256                                  
 32257                                  UserSet:
 32258                                  ; Transfer DS:DX to MYNAME
 32259                                  ; CX to MYNUM
 32260 0000693E 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 32261 00006943 89D6                    	MOV	SI,DX			; user space has source
 32262 00006945 16                      	push	ss
 32263 00006946 07                      	pop	es
 32264 00006947 BF[B302]                	MOV	DI,MYNAME		; point dest to user string
 32265 0000694A 36FE06[B202]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 32266 0000694F EBE2                    	JMP	short UserMove
 32267                                  
 32268                                  UserPrint:
 32269                                  
 32270                                  ;IF NOT Installed
 32271                                  ;	transfer PRINTER_GETSET_STRING
 32272                                  ;ELSE
 32273 00006951 50                      	PUSH	AX
 32274                                  	;mov	ax,111Fh
 32275                                  	;MOV	AX,(MultNET SHL 8) OR 31
 32276 00006952 B81F11                  	mov	ax,(MultNET<<8)|31
 32277 00006955 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 32278                                  			; STACK: WORD function
 32279                                  			; Return: CF set on error, AX = error code
 32280                                  			; STACK unchanged
 32281 00006957 5A                      	POP	DX			; Clean stack
 32282 00006958 7302                    	JNC	short OKPA
 32283 0000695A EBC0                    	jmp	short useroper_error
 32284                                  OKPA:
 32285 0000695C EBDD                    	jmp	short UserBye
 32286                                  ;ENDIF
 32287                                  
 32288                                  
 32289                                  ;Break	<GetVisDrv - return visible drive>
 32290                                  ;----------------------------------------------------------------------------
 32291                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 32292                                  ;
 32293                                  ;   Inputs:	AL has drive identifier (0=default)
 32294                                  ;   Outputs:	Carry Set - invalid drive/macro
 32295                                  ;		Carry Clear - AL has physical drive (0=A)
 32296                                  ;		    ThisCDS points to CDS
 32297                                  ;   Registers modified: AL
 32298                                  ;----------------------------------------------------------------------------
 32299                                  
 32300                                  GetVisDrv:
 32301                                  	; 05/08/2018 - Retro DOS v3.0
 32302                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 32303 0000695E E81400                  	CALL	GETTHISDRV		; get inuse drive
 32304 00006961 72A4                    	jc	short RET45
 32305 00006963 1E                      	push	ds
 32306 00006964 56                      	push	si
 32307 00006965 36C536[3A05]            	LDS	SI,[SS:THISCDS]			;smr;SS Override
 32308                                  	;test	word [si+67],2000h
 32309 0000696A F744430020              	TEST	word [SI+curdir.flags],curdir_splice
 32310 0000696F 5E                      	pop	si
 32311 00006970 1F                      	pop	ds
 32312 00006971 7494                    	jz	short RET45		; if not spliced, return OK
 32313                                  	; MSDOS 6.0
 32314                                  	;MOV	[SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 32315                                  	;
 32316 00006973 F9                      	STC				; signal error
 32317 00006974 C3                      	retn
 32318                                  
 32319                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 32320                                  ;----------------------------------------------------------------------------
 32321                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 32322                                  ;	macro pointer
 32323                                  ;
 32324                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 32325                                  ;   Outputs:
 32326                                  ;		Carry Set - invalid drive/macro
 32327                                  ;		Carry Clear - AL has physical drive (0=A)
 32328                                  ;		   ThisCDS points to macro
 32329                                  ;   Registers modified: AL
 32330                                  ;----------------------------------------------------------------------------
 32331                                  
 32332                                  GETTHISDRV:
 32333                                  	; 05/08/2018
 32334                                  	; 12/07/2018 - Retro DOS v3.0
 32335                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 32336                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32337 00006975 08C0                    	OR	AL,AL			; are we using default drive?
 32338 00006977 7506                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 32339 00006979 36A0[E402]              	MOV	AL,[SS:CURDRV]		; get the current drive
 32340                                  	;INC	ax			; Counteract next instruction
 32341                                  	; 04/09/2018
 32342 0000697D FEC0                    	inc	al
 32343                                  GTD10:	
 32344                                  	;DEC	ax			; 0 = A
 32345 0000697F FEC8                    	dec	al
 32346 00006981 1E                      	PUSH	DS			; save world
 32347 00006982 56                      	PUSH	SI
 32348                                  	;mov	byte [ss:EXTERR_LOCUS],2
 32349 00006983 36C606[D102]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 32350 00006989 36F606[0D05]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 32351 0000698F 7421                    	JZ	SHORT GTD20		; Logical
 32352 00006991 50                      	PUSH	AX
 32353 00006992 06                      	PUSH	ES
 32354 00006993 57                      	PUSH	DI
 32355 00006994 36C706[3A05][9504]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 32356 0000699B 368C0E[3C05]            	mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 32357                                  	;MOV	[SS:THISCDS+2],SS	;ThisCDS = &DummyCDS;smr;
 32358 000069A0 0441                    	ADD	AL,'A'
 32359 000069A2 E816FF                  	CALL	InitCDS			;	InitCDS(c);
 32360                                  	;test	word [es:di+67],4000h
 32361 000069A5 26F745430040            	TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 32362 000069AB 5F                      	POP	DI
 32363 000069AC 07                      	POP	ES
 32364 000069AD 58                      	POP	AX
 32365 000069AE 740E                    	JZ	SHORT GTD30		; Not a physical drive.
 32366 000069B0 EB13                    	JMP	SHORT GTDX		; carry clear
 32367                                  GTD20:
 32368 000069B2 E81300                  	CALL	GetCDSFromDrv
 32369 000069B5 7207                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 32370                                  	;test	word [si+43h],4000h
 32371 000069B7 F744430040              	TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 32372 000069BC 7507                    	JNZ	SHORT GTDX		; carry clear
 32373                                  GTD30:	
 32374                                  	; 14/08/2018
 32375                                  	;MOV	AL,error_invalid_drive	; invalid FAT drive
 32376                                  	;MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 32377 000069BE 36C606[D102]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 32378 000069C4 F9                      	STC
 32379                                  GTDX:	
 32380 000069C5 5E                      	POP	SI			; restore world
 32381 000069C6 1F                      	POP	DS
 32382 000069C7 C3                      	RETN
 32383                                   
 32384                                  
 32385                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 32386                                  ;----------------------------------------------------------------------------
 32387                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 32388                                  ;	pointer, returning an error if the drive number is greater than the
 32389                                  ;	number of CDS's
 32390                                  ;
 32391                                  ;   Inputs:	AL is physical unit # A=0...
 32392                                  ;   Outputs:	Carry Set if Bad Drive
 32393                                  ;		Carry Clear
 32394                                  ;		    DS:SI -> CDS
 32395                                  ;		    [THISCDS] = DS:SI
 32396                                  ;   Registers modified: DS,SI
 32397                                  ;----------------------------------------------------------------------------
 32398                                  
 32399                                  GetCDSFromDrv:
 32400 000069C8 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 32401 000069CD 7202                    	JB	SHORT GetCDS		; yes, go get the macro
 32402 000069CF F9                      	STC				; signal error
 32403 000069D0 C3                      	RETN				; bye
 32404                                  GetCDS:
 32405 000069D1 53                      	PUSH	BX
 32406 000069D2 50                      	PUSH	AX
 32407 000069D3 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 32408                                  	;mov	bl,81
 32409 000069D8 B351                    	MOV	BL,curdir.size		; size in convenient spot
 32410 000069DA F6E3                    	MUL	BL			; get net offset
 32411 000069DC 01C6                    	ADD	SI,AX			; convert to true pointer
 32412 000069DE 368936[3A05]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 32413 000069E3 368C1E[3C05]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 32414 000069E8 58                      	POP	AX
 32415 000069E9 5B                      	POP	BX
 32416 000069EA F8                      	CLC				; no error
 32417 000069EB C3                      	RETN				; bye!
 32418                                  
 32419                                  ;============================================================================
 32420                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 32421                                  ;============================================================================
 32422                                  ; Retro	DOS v3.0 - 12/07/2018
 32423                                  
 32424                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 32425                                  ;----------------------------------------------------------------------------
 32426                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 32427                                  ;       gritty substitution.
 32428                                  ;
 32429                                  ;   Inputs:     DS:DX - pointer to FCB
 32430                                  ;               ES:DI - point to destination
 32431                                  ;   Outputs:    Carry Set - invalid path in final map
 32432                                  ;               Carry Clear - FCB has been mapped into ES:DI
 32433                                  ;                   Sattrib is set from possibly extended FCB
 32434                                  ;                   ExtFCB set if extended FCB found
 32435                                  ;   Registers modified: most
 32436                                  ;----------------------------------------------------------------------------
 32437                                  
 32438                                  TransFCB:
 32439                                  	; 12/07/2018 - Retro DOS v3.0
 32440                                  	;LocalVar FCBTmp,16
 32441                                  	;ENTER
 32442 000069EC 55                      	push	bp
 32443 000069ED 89E5                    	mov	bp,sp
 32444                                  	;sub	sp,15	; MSDOS 3.3
 32445 000069EF 83EC10                  	sub	sp,16	; MSDOS 6.0
 32446 000069F2 16                      	push	ss
 32447 000069F3 07                      	pop	es
 32448 000069F4 06                      	push	es
 32449 000069F5 57                      	push	di
 32450                                  	;lea	di,[bp-15] ; MSDOS 3.3
 32451                                  	;LEA	DI,FCBTmp 
 32452 000069F6 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 32453 000069F9 36C606[0705]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 32454 000069FF 36C606[0805]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 32455 00006A05 E8C1BF                  	call	GetExtended             ; get FCB, extended or not
 32456 00006A08 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 32457 00006A0A 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 32458 00006A0D 36A2[0805]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 32459 00006A11 36C606[0705]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 32460                                  GetDrive:
 32461 00006A17 AC                      	lodsb				; get drive byte
 32462 00006A18 E85AFF                  	call	GETTHISDRV
 32463 00006A1B 722C                    	jc	short BadPack
 32464 00006A1D E87C03                  	call	TextFromDrive           ; convert 0-based drive to text
 32465                                  ;
 32466                                  ; Scan the source to see if there are any illegal chars
 32467                                  ;
 32468 00006A20 BB[1613]                	mov	bx,CharType		; load lookup table
 32469 00006A23 B90B00                  	mov	cx,11
 32470 00006A26 56                      	push	si			; back over name, ext
 32471                                  FCBScan:
 32472 00006A27 AC                      	lodsb				; get a byte
 32473                                  	; 09/08/2018
 32474                                  	;xlat	byte [es:bx]
 32475 00006A28 26D7                    	es	xlat			; get flags
 32476                                  	;test	al,8	
 32477 00006A2A A808                    	test	al,FFCB
 32478 00006A2C 741B                    	jz	short BadPack
 32479                                  NextCh: 
 32480 00006A2E E2F7                    	loop	FCBScan
 32481 00006A30 5E                      	pop	si
 32482 00006A31 89FB                    	mov	bx,di
 32483 00006A33 E8E5C3                  	call	PackName                ; crunch the path
 32484 00006A36 5F                      	pop	di			; get original destination
 32485 00006A37 07                      	pop	es
 32486 00006A38 16                      	push	ss			; get DS addressability
 32487 00006A39 1F                      	pop	ds
 32488                                  	;lea	si,[bp-15] ; MSDOS 3.3
 32489                                  	;LEA	SI,FCBTmp		; point at new pathname
 32490 00006A3A 8D76F0                  	lea	si,[bp-16]
 32491 00006A3D 803F00                  	cmp	byte [bx],0
 32492 00006A40 7407                    	jz	short BadPack
 32493 00006A42 55                      	push	bp
 32494 00006A43 E80E00                  	call	TransPathSet            ; convert the path
 32495 00006A46 5D                      	pop	bp
 32496 00006A47 7303                    	jnc	short FCBRet		; bye with transPath error code
 32497                                  BadPack:
 32498 00006A49 F9                      	STC
 32499                                  	;mov	al,3
 32500 00006A4A B003                    	MOV     AL,error_path_not_found
 32501                                  FCBRet: 
 32502                                  	;LEAVE
 32503 00006A4C 89EC                    	mov	sp,bp
 32504 00006A4E 5D                      	pop	bp
 32505                                  TransPath_retn:
 32506 00006A4F C3                      	retn
 32507                                  
 32508                                  ; 12/07/2018 - Retro DOS v3.0
 32509                                  
 32510                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 32511                                  ;----------------------------------------------------------------------------
 32512                                  ;
 32513                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 32514                                  ;       substitution, insertion of current directory and fixing . and ..
 32515                                  ;       entries. Perform splicing. Allow input string to match splice
 32516                                  ;       exactly.
 32517                                  ;
 32518                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 32519                                  ;       matches splice.
 32520                                  ;
 32521                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 32522                                  ;
 32523                                  ;   The following anomalous behaviour is required:
 32524                                  ;
 32525                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 32526                                  ;       Paths on devices are ignored. (truncate to 0-length)
 32527                                  ;       Raw net I/O sets ThisCDS => NULL.
 32528                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 32529                                  ;
 32530                                  ;   Other behaviour:
 32531                                  ;
 32532                                  ;       ThisCDS set up.
 32533                                  ;       FatRead done on local CDS.
 32534                                  ;       ValidateCDS done on local CDS.
 32535                                  ;
 32536                                  ;   Brief flowchart:
 32537                                  ;
 32538                                  ;       if fSharing then
 32539                                  ;           set up DummyCDS (ThisCDS)
 32540                                  ;           canonicalize (sets cMeta)
 32541                                  ;           splice
 32542                                  ;           fatRead
 32543                                  ;           return
 32544                                  ;       if \\ or d:\\ lead then
 32545                                  ;           set up null CDS (ThisCDS)
 32546                                  ;           canonicalize (sets cMeta)
 32547                                  ;           return
 32548                                  ;       if device then
 32549                                  ;           set up dummyCDS (ThisCDS)
 32550                                  ;           canonicalize (sets cMeta)
 32551                                  ;           return
 32552                                  ;       if file then
 32553                                  ;           getCDS (sets (ThisCDS) from name)
 32554                                  ;           validateCDS (may reset current dir)
 32555                                  ;           Copy current dir
 32556                                  ;           canonicalize (set cMeta)
 32557                                  ;           splice
 32558                                  ;           generate correct CDS (ThisCDS)
 32559                                  ;           if local then
 32560                                  ;               fatread
 32561                                  ;           return
 32562                                  ;
 32563                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 32564                                  ;               DI - point to buffer in DOSDATA
 32565                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 32566                                  ;                   syntax, etc. or user FAILed to I 24.
 32567                                  ;               WFP_Start - points to beginning of buffer
 32568                                  ;               Curr_Dir_End - points to end of current dir in path
 32569                                  ;               DS - DOSDATA
 32570                                  ;   Registers modified: most
 32571                                  ;
 32572                                  ;----------------------------------------------------------------------------
 32573                                  
 32574                                  TransPath:
 32575 00006A50 30C0                    	XOR     AL,AL
 32576 00006A52 EB02                    	JMP     SHORT SetSplice
 32577                                  TransPathSet:
 32578 00006A54 B0FF                    	MOV     AL,-1
 32579                                  SetSplice:
 32580 00006A56 36A2[F802]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 32581 00006A5A B0FF                    	MOV     AL,-1
 32582                                  TransPathNoSet:
 32583 00006A5C 36A2[0C05]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 32584 00006A60 36C606[1505]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 32585 00006A66 36893E[4A05]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 32586 00006A6B 36C706[4E05]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 32587 00006A72 16                      	push	ss
 32588 00006A73 07                      	pop	es
 32589                                  	;lea	bp,[di+134]
 32590 00006A74 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 32591                                  ;
 32592                                  ; if this is through the server dos call, fsharing is set. We set up a
 32593                                  ; dummy cds and let the operation go.
 32594                                  ;
 32595 00006A78 36F606[0D05]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 32596 00006A7E 7435                    	JZ	short CheckUNC		; skip to UNC check
 32597                                  ;
 32598                                  ; ES:DI point to buffer
 32599                                  ;
 32600 00006A80 E80203                  	CALL	DriveFromText           ; get drive and advance DS:SI
 32601 00006A83 E8EFFE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 32602 00006A86 722A                    	jc	short NoPath
 32603 00006A88 E81103                  	CALL	TextFromDrive		; drop in new
 32604 00006A8B 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 32605 00006A8E E83801                  	CALL	Canonicalize            ; copy and canonicalize
 32606 00006A91 72BC                    	jc	short TransPath_retn	; errors
 32607                                  ;
 32608                                  ; Perform splices for net guys.
 32609                                  ;
 32610 00006A93 16                      	push	ss
 32611 00006A94 1F                      	pop	ds
 32612 00006A95 8B36[4A05]              	MOV     SI,[WFP_START] 		; point to name
 32613 00006A99 F606[0C05]FF            	TEST	byte [FSPLICE],-1
 32614 00006A9E 7403                    	JZ	short NoServerSplice
 32615 00006AA0 E83602                  	CALL    Splice
 32616                                  NoServerSplice:
 32617 00006AA3 16                      	push	ss
 32618 00006AA4 1F                      	pop	ds                      ; for FATREAD
 32619 00006AA5 C43E[3A05]              	LES     DI,[THISCDS]		; for fatread
 32620 00006AA9 E8C0B5                  	call	EcritDisk
 32621 00006AAC E810F1                  	call	FATREAD_CDS
 32622 00006AAF E8C2B5                  	call	LcritDisk
 32623                                  NoPath:
 32624                                  	;mov	al,3
 32625 00006AB2 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32626 00006AB4 C3                      	retn				; any errors are in Carry flag
 32627                                  
 32628                                  ;
 32629                                  ; Let the network decide if the name is for a spooled device. It will map
 32630                                  ; the name if so.
 32631                                  ;
 32632                                  CheckUNC:
 32633 00006AB5 36C706[3A05]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 32634                                  	;CallInstall NetSpoolCheck,MultNET,35
 32635 00006ABC B82311                  	mov	ax,1123h
 32636 00006ABF CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 32637                                  			; DS:SI -> ASCIZ filename to canonicalize
 32638                                  			; ES:DI -> 128-byte buffer for qualified name
 32639                                  			; Return: CF set if not resolved
 32640 00006AC1 7329                    	JNC	short UNCDone
 32641                                  ;
 32642                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 32643                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 32644                                  ; input, then the name has been changed to the remote spooler by the above net
 32645                                  ; call. Also, there may be a drive in front of the \\.
 32646                                  ;
 32647                                  NO_CHECK:
 32648 00006AC3 E8BF02                  	CALL    DriveFromText		; eat drive letter
 32649 00006AC6 50                      	PUSH    AX                      ; save it
 32650 00006AC7 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 32651 00006AC9 E880EB                  	call    PATHCHRCMP              ; convert to normal form
 32652 00006ACC 86E0                    	XCHG    AH,AL                   ; swap for second byte
 32653 00006ACE E87BEB                  	call    PATHCHRCMP              ; convert to normal form
 32654 00006AD1 751F                    	JNZ	short CheckDevice	; not a path char
 32655 00006AD3 38C4                    	CMP     AH,AL                   ; are they same?
 32656 00006AD5 751B                    	JNZ	short CheckDevice	; nope
 32657                                  ;
 32658                                  ; We have a UNC request. We must copy the string up to the beginning of the
 32659                                  ; local machine root path
 32660                                  ;
 32661                                  
 32662 00006AD7 58                      	POP     AX
 32663 00006AD8 A5                      	MOVSW                           ; get the lead \\.
 32664                                  UNCCpy:
 32665 00006AD9 AC                      	LODSB                           ; get a byte
 32666 00006ADA E833EB                   	call	UCase                   ;AN000;; convert the char
 32667 00006ADD 08C0                    	OR      AL,AL
 32668 00006ADF 740E                    	JZ	short UNCTerm		; end of string. All done.
 32669 00006AE1 E868EB                  	call    PATHCHRCMP              ; is it a path char?
 32670 00006AE4 89FB                    	MOV     BX,DI                   ; backup position
 32671 00006AE6 AA                      	STOSB
 32672 00006AE7 75F0                    	JNZ	short UNCCpy		; no, go copy
 32673 00006AE9 E8DD00                  	CALL    Canonicalize            ; wham (and set cMeta)
 32674                                  UNCDone:
 32675 00006AEC 16                      	push	ss
 32676 00006AED 1F                      	pop	ds
 32677 00006AEE C3                       	retn				; return error code
 32678                                  UNCTerm:
 32679 00006AEF AA                      	STOSB                           ;AN000;
 32680 00006AF0 EBFA                    	JMP	short UNCDone		;AN000;
 32681                                  
 32682                                  CheckDevice:
 32683                                  ;
 32684                                  ; Check DS:SI for device. First eat any path stuff
 32685                                  ;
 32686 00006AF2 58                      	POP     AX                      ; retrieve drive info
 32687 00006AF3 803C00                  	CMP     BYTE [SI],0		; check for null file
 32688 00006AF6 7504                    	JNZ	short CheckPath
 32689                                  	;mov	al,2 
 32690 00006AF8 B002                    	MOV     AL,error_file_not_found ; bad file error
 32691 00006AFA F9                      	STC                             ; signal error on null input
 32692 00006AFB C3                      	RETN				; bye!
 32693                                  CheckPath:
 32694 00006AFC 50                      	push	ax
 32695 00006AFD 55                      	push	bp			; save drive number
 32696                                  
 32697                                  	; MSDOS 6.0
 32698                                  ;;;BUGBUG BUG 10-26-1992 scottq
 32699                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 32700                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 32701                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 32702                                  ;;;end up having a 5D in the opcode's displacement field. The
 32703                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 32704                                  ;;;
 32705                                  ;;;What we do here is do a call to a function that is less than 5Dh
 32706                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 32707                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 32708                                  ;;;
 32709                                  ;;;More info:
 32710                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 32711                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 32712                                  ;;;
 32713 00006AFE E82000                  	call	no5Dshere
 32714                                  start5Dhack:
 32715                                  ;following is replaced with 5Dhack code--Invoke  CheckThisDevice         
 32716                                  backfrom5Dhack:
 32717 00006B01 5D                      	pop	bp
 32718 00006B02 58                      	pop	ax			; get drive letter back
 32719 00006B03 731F                    	JNC	short DoFile		; yes we have a file.
 32720                                  ;
 32721                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 32722                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 32723                                  ; call.
 32724                                  ;
 32725 00006B05 36C606[0D05]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 32726 00006B0B E867FE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 32727 00006B0E 36C606[0D05]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 32728                                  ;
 32729                                  ; Now that we have noted that we have a device, we put it into a form that
 32730                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 32731                                  ; string. We relax this to state that if the d:\ is present then the path
 32732                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 32733                                  ; a device.
 32734                                  ;
 32735 00006B14 E88502                  	CALL    TextFromDrive
 32736 00006B17 B02F                    	MOV     AL,'/'                  ; path sep.
 32737 00006B19 AA                      	STOSB
 32738 00006B1A E835B4                  	call	StrCpy			; move remainder of string
 32739                                  
 32740 00006B1D F8                      	CLC                             ; everything OK.
 32741 00006B1E 16                      	push	ss
 32742 00006B1F 1F                      	pop	ds                      ; remainder of OK stuff
 32743                                  DoFile_retn:
 32744 00006B20 C3                      	retn
 32745                                  
 32746                                  no5Dshere:
 32747                                  	; 10/08/2018
 32748 00006B21 E902E1                  	jmp	CheckThisDevice		; snoop for device
 32749                                  
 32750                                  ;.erre (no5Dshere - start5Dhack - 5D)
 32751                                  
 32752                                  ;
 32753                                  ; We have a file. Get the raw CDS.
 32754                                  ;
 32755                                  
 32756                                  DoFile:
 32757                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32758                                  
 32759 00006B24 E837FE                  	call	GetVisDrv               ; get proper CDS
 32760                                  	;mov	al,3 
 32761 00006B27 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 32762 00006B29 72F5                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 32763                                  ;
 32764                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 32765                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 32766                                  ; Use the one that we are going to use (ES:DI).
 32767                                  ;
 32768                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 32769 00006B2B 1E                      	push	ds
 32770 00006B2C 56                      	push	si
 32771 00006B2D 06                      	push	es
 32772 00006B2E 57                      	push	di
 32773 00006B2F E840E0                  	call	ValidateCDS             ; poke CDS and make everything OK
 32774                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 32775 00006B32 5F                      	pop	di
 32776 00006B33 07                      	pop	es
 32777 00006B34 5E                      	pop	si
 32778 00006B35 1F                      	pop	ds
 32779                                  	;mov	al,3
 32780 00006B36 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32781                                  	;retc				; someone failed an operation
 32782 00006B38 72E6                    	jc	short DoFile_retn
 32783                                  ;
 32784                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 32785                                  ; current directory. Copy it in.
 32786                                  ;
 32787 00006B3A 1E                      	push	ds
 32788 00006B3B 56                      	push	si
 32789 00006B3C 36C536[3A05]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 32790 00006B41 89FB                    	MOV     BX,DI                   ; point to destination
 32791 00006B43 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 32792                                  ;       LEA     SI,[SI+curdir.text]	; point to text
 32793                                  	;lea	bp,[di+134]
 32794 00006B46 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 32795                                  					;AN000;
 32796 00006B4A E814B4                  	call	FStrCpy                 ; copy string. ES:DI point to end
 32797 00006B4D 4F                      	DEC     DI                      ; point to NUL byte
 32798                                  
 32799                                  ;
 32800                                  ; Make sure that there is a path char at end.
 32801                                  ;
 32802 00006B4E B05C                    	MOV     AL,'\'
 32803 00006B50 263845FF                	CMP     [ES:DI-1],AL
 32804 00006B54 7401                    	JZ	short GetOrig
 32805 00006B56 AA                      	STOSB
 32806                                  ;
 32807                                  ; Now get original string.
 32808                                  ;
 32809                                  GetOrig:
 32810 00006B57 4F                      	DEC     DI                      ; point to path char
 32811 00006B58 5E                      	pop	si
 32812 00006B59 1F                      	pop	ds
 32813                                  ;
 32814                                  ; BX points to the end of the root part of the CDS (at where a path char
 32815                                  ; should be). Now, we decide whether we use this root or extend it with the
 32816                                  ; current directory.  See if the input string begins with a leading ;
 32818 00006B5A E8D100                  	CALL    PathSep                 ; is DS:SI a path sep?
 32819 00006B5D 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 32820 00006B5F 08C0                    	OR      AL,AL                   ; end of string?
 32821 00006B61 7410                    	JZ	short DoCanon		; yes, skip.
 32822                                  ;
 32823                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 32824                                  ; to this root. Make sure that there is a path char there and advance the
 32825                                  ; source string over all leading \'s.
 32826                                  ;
 32827 00006B63 89DF                    	MOV     DI,BX                   ; back up to root point.
 32828                                  SkipPath:
 32829 00006B65 AC                      	LODSB
 32830 00006B66 E8E3EA                  	call    PATHCHRCMP
 32831 00006B69 74FA                    	JZ	short SkipPath
 32832 00006B6B 4E                      	DEC     SI
 32833 00006B6C 08C0                    	OR      AL,AL
 32834 00006B6E 7403                    	JZ	short DoCanon
 32835                                  ;
 32836                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 32837                                  ; for yucks.
 32838                                  ;
 32839                                  PathAssure:
 32840 00006B70 B05C                    	MOV     AL,'\'
 32841 00006B72 AA                      	STOSB
 32842                                  ;
 32843                                  ; ES:DI point to the correct spot for canonicalization to begin.
 32844                                  ; BP is the max extent to advance DI
 32845                                  ; BX is the backup limit for ..
 32846                                  ;
 32847                                  DoCanon:
 32848 00006B73 E85300                  	CALL    Canonicalize            ; wham.
 32849                                  	;retc				; badly formatted path.
 32850 00006B76 72A8                    	jc	short DoFile_retn
 32851                                  
 32852                                  ;
 32853                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 32854                                  ; to wfp_start and do string substitution. BP is still the max position in
 32855                                  ; buffer.
 32856                                  ;
 32857 00006B78 16                      	push	ss
 32858 00006B79 1F                      	pop	ds
 32859 00006B7A 8B3E[4A05]              	MOV     DI,[WFP_START]		; DS:SI point to string
 32860 00006B7E C536[3A05]              	LDS     SI,[THISCDS]		; point to CDS
 32861                                  ;       LEA     SI,[SI+curdir.text]	; point to text
 32862 00006B82 E81F02                  	CALL    PathPref                ; is there a prefix?
 32863 00006B85 7514                    	JNZ	short DoSplice		; no, do splice
 32864                                  ;
 32865                                  ; We have a match. Check to see if we ended in a path char.
 32866                                  ;
 32867 00006B87 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 32868 00006B8A E8BFEA                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 32869 00006B8D 740C                    	JZ	short DoSplice		; yes, no current dir here.
 32870                                  Pathline:                               ; 2/13/KK
 32871 00006B8F 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 32872 00006B93 7406                    	JZ	short DoSplice
 32873 00006B95 47                      	INC     DI                      ; point to after current path char
 32874 00006B96 36893E[4E05]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 32875                                  ;
 32876                                  ; Splice the result.
 32877                                  ;
 32878                                  DoSplice:
 32879 00006B9B 16                      	push	ss
 32880 00006B9C 1F                      	pop	ds			; back to DOSDATA
 32881 00006B9D 8B36[4A05]              	MOV     SI,[WFP_START]		; point to beginning of string
 32882 00006BA1 31C9                    	XOR     CX,CX
 32883 00006BA3 F606[0C05]FF            	TEST	byte [FSPLICE],-1
 32884 00006BA8 7403                    	JZ	short SkipSplice
 32885 00006BAA E82C01                  	CALL    Splice                  ; replaces in place.
 32886                                  SkipSplice:
 32887                                  ;
 32888                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 32889                                  ; device.
 32890                                  ;
 32891 00006BAD 16                      	push	ss
 32892 00006BAE 1F                      	pop	ds
 32893 00006BAF C43E[3A05]              	LES     DI,[THISCDS]		; point to correct drive
 32894                                  	;test	word [es:di+67],8000h
 32895 00006BB3 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 32896 00006BB9 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 32897 00006BBB E30B                    	JCXZ    Done
 32898 00006BBD E8ACB4                  	call	EcritDisk
 32899 00006BC0 E8FCEF                  	call	FATREAD_CDS
 32900 00006BC3 E8AEB4                  	call	LcritDisk
 32901                                  	;mov	al, 3
 32902 00006BC6 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32903                                  Done:   
 32904 00006BC8 C3                      	retn                         ; any errors in carry flag.
 32905                                  
 32906                                  ; 13/07/2018
 32907                                  
 32908                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 32909                                  ;----------------------------------------------------------------------------
 32910                                  ;   Canonicalize - copy path removing . and .. entries.
 32911                                  ;
 32912                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 32913                                  ;               ES:DI - point to buffer
 32914                                  ;               BX - backup limit (offset from ES) points to slash
 32915                                  ;               BP - end of buffer
 32916                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 32917                                  ;                   syntax, etc.
 32918                                  ;               Carry Clear -
 32919                                  ;                   DS:DI - advanced to end of string
 32920                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 32921                                  ;   Registers modified: AX CX DX (in addition to those above)
 32922                                  ;----------------------------------------------------------------------------
 32923                                  
 32924                                  Canonicalize:
 32925                                  ;
 32926                                  ; We copy all leading path separators.
 32927                                  ;
 32928 00006BC9 AC                      	LODSB                           ;   while (PathChr (*s))
 32929 00006BCA E87FEA                  	call    PATHCHRCMP
 32930 00006BCD 7507                    	JNZ	short CanonDec
 32931 00006BCF 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 32932 00006BD1 7319                    	JAE	short CanonBad		;           goto error;
 32933 00006BD3 AA                      	STOSB
 32934 00006BD4 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 32935                                  CanonDec:
 32936 00006BD6 4E                      	DEC     SI
 32937                                  ;
 32938                                  ; Main canonicalization loop.  We come here with DS:SI pointing to a textual
 32939                                  ; component (no leading path separators) and ES:DI being the destination
 32940                                  ; buffer.
 32941                                  ;
 32942                                  CanonLoop:
 32943                                  ;
 32944                                  ; If we are at the end of the source string, then we need to check to see that
 32945                                  ; a potential drive specifier is correctly terminated with a path sep char.
 32946                                  ; Otherwise, do nothing
 32947                                  ;
 32948 00006BD7 31C0                    	XOR     AX,AX
 32949 00006BD9 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 32950 00006BDB 751A                    	JNZ	short DoComponent
 32951 00006BDD 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 32952 00006BE2 7505                    	JNZ	short DoTerminate
 32953 00006BE4 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 32954 00006BE6 AA                      	STOSB
 32955 00006BE7 88E0                    	MOV     AL,AH
 32956                                  DoTerminate:
 32957 00006BE9 AA                      	STOSB                           ;           *d++ = 0;
 32958 00006BEA F8                      	CLC                             ;           return (0);
 32959 00006BEB C3                      	retn
 32960                                  
 32961                                  CanonBad:
 32962 00006BEC E8CE01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 32963                                  	;mov	al,3
 32964 00006BEF B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 32965 00006BF1 7402                    	JZ	short PathEnc		; path character encountered in string
 32966                                  	;mov	al,2
 32967 00006BF3 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 32968                                  PathEnc:
 32969 00006BF5 F9                      	STC
 32970                                  CanonBad_retn:
 32971 00006BF6 C3                      	retn
 32972                                  ;
 32973                                  ; We have a textual component that we must copy.  We uppercase it and truncate
 32974                                  ; it to 8.3
 32975                                  ;
 32976                                  DoComponent:                            ;           }
 32977 00006BF7 E85100                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 32978 00006BFA 72FA                    	jc	short CanonBad_retn	;           return (-1);
 32979                                  ;
 32980                                  ; We special case the . and .. cases.  These will be backed up.
 32981                                  ;
 32982                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 32983 00006BFC 26833D2E                	CMP	WORD [ES:DI],002Eh
 32984 00006C00 7408                    	JZ	short Skip1
 32985                                  	;CMP	WORD PTR ES:[DI],'..'
 32986 00006C02 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 32987 00006C07 750A                    	JNZ	short CanonNormal
 32988 00006C09 4F                      	DEC     DI                      ;           d--;
 32989                                  Skip1:  
 32990 00006C0A E82B00                  	CALL    SkipBack                ;           SkipBack ();
 32991                                  	;mov	al,3
 32992 00006C0D B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32993 00006C0F 72E5                    	jc	short CanonBad_retn
 32994 00006C11 EB02                    	JMP     short CanonPath         ;           }
 32995                                  ;
 32996                                  ; We have a normal path.  Advance destination pointer over it.
 32997                                  ;
 32998                                  CanonNormal:                            ;       else
 32999 00006C13 01CF                    	ADD     DI,CX                   ;           d += ct;
 33000                                  ;
 33001                                  ; We have successfully copied a component.  We are now pointing at a path
 33002                                  ; sep char or are pointing at a nul or are pointing at something else.
 33003                                  ; If we point at something else, then we have an error.
 33004                                  ;
 33005                                  CanonPath:
 33006 00006C15 E81600                  	CALL    PathSep
 33007 00006C18 75D2                    	JNZ	short CanonBad		; something else...
 33008                                  ;
 33009                                  ; Copy the first path char we see.
 33010                                  ;
 33011 00006C1A AC                      	LODSB                           ; get the char
 33012 00006C1B E82EEA                  	call    PATHCHRCMP              ; is it path char?
 33013 00006C1E 75B6                    	JNZ	short CanonDec		; no, go test for nul
 33014 00006C20 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 33015 00006C22 73C8                    	JAE	short CanonBad		; yep, error.
 33016 00006C24 AA                      	STOSB                           ; copy the one byte
 33017                                  ;
 33018                                  ; Skip all remaining path chars
 33019                                  ;
 33020                                  CanonPathLoop:
 33021 00006C25 AC                      	LODSB                           ; get next byte
 33022 00006C26 E823EA                  	call    PATHCHRCMP              ; path char again?
 33023 00006C29 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 33024 00006C2B 4E                      	DEC     SI                      ; back up
 33025 00006C2C EBA9                    	JMP	short  CanonLoop	; go copy component
 33026                                  
 33027                                  ;BREAK <PathSep - determine if char is a path separator>
 33028                                  ;----------------------------------------------------------------------------
 33029                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 33030                                  ;   Inputs:     DS:SI - point to a char
 33031                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 33032                                  ;               Zero set if AL is / \ or NUL
 33033                                  ;               Zero reset otherwise
 33034                                  ;   Registers modified: AL
 33035                                  ;----------------------------------------------------------------------------
 33036                                  
 33037                                  PathSep:
 33038 00006C2E 8A04                    	MOV     AL,[SI]                 ; get the character
 33039                                  PathSepGotCh:				; already have character
 33040 00006C30 08C0                    	OR      AL,AL                   ; test for zero
 33041 00006C32 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 33042 00006C34 E815EA                  	call    PATHCHRCMP              ; check for path character
 33043 00006C37 C3                      	retn				; and return HIS determination
 33044                                  
 33045                                  ;BREAK <SkipBack - move backwards to a path separator>
 33046                                  ;----------------------------------------------------------------------------
 33047                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 33049                                  ;               BX has current directory back up limit (point to a / \)
 33050                                  ;   Outputs:    ES:DI backed up to point to a path char
 33051                                  ;               AL has char from output ES:DI (path sep if carry clear)
 33052                                  ;               Carry set if illegal backup
 33053                                  ;               Carry Clear if ok
 33054                                  ;   Registers modified: DI,AL
 33055                                  ;----------------------------------------------------------------------------
 33056                                  
 33057                                  SkipBack:
 33058 00006C38 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 33059 00006C3A 720B                    	JB	short SkipBad		;       if (d < dlim)
 33060 00006C3C 4F                      	DEC     DI                      ;           goto err;
 33061 00006C3D 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 33062 00006C40 E809EA                  	call    PATHCHRCMP              ;           break;
 33063 00006C43 75F3                    	JNZ	short SkipBack		;       }
 33064 00006C45 F8                      	CLC                             ;   return (0);
 33065 00006C46 C3                      	retn				;
 33066                                  SkipBad:                                ;err:
 33067                                  	;mov	al,3
 33068 00006C47 B003                    	MOV     AL,error_path_not_found ; bad path error
 33069 00006C49 F9                      	STC                             ;   return (-1);
 33070 00006C4A C3                      	retn                          ;
 33071                                  
 33072                                  ;Break <CopyComponent - copy out a file path component>
 33073                                  ;----------------------------------------------------------------------------
 33074                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 33075                                  ;
 33076                                  ;   Inputs:     DS:SI - source path
 33077                                  ;               ES:DI - destination
 33078                                  ;               ES:BP - end of buffer
 33079                                  ;   Outputs:    Carry Set - too long
 33080                                  ;               Carry Clear - DS:SI moved past component
 33081                                  ;                   CX has length of destination
 33082                                  ;   Registers modified: AX,CX,DX
 33083                                  ;----------------------------------------------------------------------------
 33084                                  
 33085                                  CopyComponent:
 33086                                  
 33087                                  %define CopyBP	 [BP]		; word
 33088                                  %define CopyD	 [BP+2]		; dword
 33089                                  %define CopyDoff [BP+2]		; word
 33090                                  %define CopyS	 [BP+6]		; dword
 33091                                  %define CopySoff [BP+6]		; word
 33092                                  %define CopyTemp [BP+10]	; byte
 33093                                  
 33094 00006C4B 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 33095 00006C4E 1E                      	push	ds
 33096 00006C4F 56                      	push	si
 33097 00006C50 06                      	push	es
 33098 00006C51 57                      	push	di
 33099 00006C52 55                      	push	bp
 33100 00006C53 89E5                    	MOV     BP,SP
 33101 00006C55 B42E                    	MOV     AH,'.'
 33102 00006C57 AC                      	LODSB
 33103 00006C58 AA                      	STOSB
 33104 00006C59 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 33105 00006C5B 7518                    	JNZ	short NormalComp
 33106 00006C5D E8CEFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 33107 00006C60 740B                    	JZ	short NulTerm
 33108                                  TryTwoDot:
 33109 00006C62 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 33110 00006C63 AA                      	STOSB
 33111 00006C64 38E0                    	CMP     AL,AH
 33112 00006C66 7557                    	JNZ	short CopyBad
 33113 00006C68 E8C3FF                  	CALL    PathSep
 33114 00006C6B 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 33115                                  NulTerm:                                ;               return -1;
 33116 00006C6D 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 33117 00006C6F AA                      	STOSB
 33118 00006C70 897606                  	MOV     CopySoff,SI
 33119 00006C73 EB47                    	JMP     SHORT _GoodRet		;       }
 33120                                  NormalComp:                             ;   else {
 33121 00006C75 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 33122 00006C78 E867E9                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 33123 00006C7B 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 33124 00006C7E 743F                    	JZ	short CopyBad		;           return (-1);
 33125 00006C80 36F606[0D05]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 33126 00006C86 7510                    	JNZ	short DoPack
 33127 00006C88 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 33128 00006C8B 360016[1505]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 33129 00006C90 7F2D                    	JG	short CopyBad		;               return (-1);
 33130 00006C92 7504                    	JNZ	short DoPack		;           else
 33131 00006C94 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 33132 00006C96 742F                    	JZ	short CopyBadPath	;               return (-1);
 33133                                  DoPack:                                 ;           }
 33134 00006C98 897606                  	MOV     CopySoff,SI ; [bp+6]
 33135 00006C9B 16                      	push	ss
 33136 00006C9C 1F                      	pop	ds
 33137 00006C9D BE[E604]                	MOV     SI,NAME1
 33138 00006CA0 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 33139 00006CA3 57                      	push	di
 33140 00006CA4 E874C1                  	call	PackName                ;       PackName (Name1, temp);
 33141 00006CA7 5F                      	pop	di
 33142 00006CA8 E8BFB2                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 33143 00006CAB 49                      	DEC     CX
 33144 00006CAC 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 33145 00006CAF 3B4E00                  	CMP     CX,CopyBP   ; [bp+0]
 33146 00006CB2 730B                    	JAE	short CopyBad		;           return (-1);
 33147 00006CB4 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 33148 00006CB6 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 33149 00006CB9 E8A5B2                  	call	FStrCpy
 33150                                  _GoodRet:				;       }
 33151 00006CBC F8                      	CLC
 33152 00006CBD EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 33153                                  CopyBad:
 33154 00006CBF F9                      	STC
 33155 00006CC0 E8FA00                  	CALL    ScanPathChar            ; check for path chars in rest of string
 33156                                  	;mov	al,2
 33157 00006CC3 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 33158 00006CC5 7503                    	JNZ	short CopyEnd
 33159                                  CopyBadPath:
 33160 00006CC7 F9                      	STC
 33161                                  	;mov	al,3
 33162 00006CC8 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 33163                                  CopyEnd:
 33164 00006CCA 5D                      	pop	bp
 33165 00006CCB 5F                      	pop	di
 33166 00006CCC 07                      	pop	es
 33167 00006CCD 5E                      	pop	si
 33168 00006CCE 1F                      	pop	ds
 33169 00006CCF 9F                      	LAHF
 33170 00006CD0 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 33171 00006CD3 E894B2                  	call	StrLen
 33172 00006CD6 49                      	DEC     CX
 33173 00006CD7 9E                      	SAHF
 33174 00006CD8 C3                      	retn
 33175                                  
 33176                                  ;Break <Splice - pseudo mount by string substitution>
 33177                                  ;----------------------------------------------------------------------------
 33178                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 33179                                  ;       ThisCDS to point to physical drive CDS.
 33180                                  ;   Inputs:     DS:SI point to string
 33181                                  ;               NoSetDir = TRUE => exact matches with splice fail
 33182                                  ;   Outputs:    DS:SI points to thisCDS
 33183                                  ;               ES:DI points to DPB
 33184                                  ;               String at DS:SI may be reduced in length by removing prefix
 33185                                  ;               and substituting drive letter.
 33186                                  ;               CX = 0 If no splice done
 33187                                  ;               CX <> 0 otherwise
 33188                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 33189                                  ;                   left alone
 33190                                  ;               ThisDPB points to proper DPB
 33191                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 33192                                  ;----------------------------------------------------------------------------
 33193                                  
 33194                                  Splice:
 33195 00006CD9 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 33196 00006CDF 746A                    	JZ	short AllDone
 33197 00006CE1 36FF36[3A05]            	push	word [SS:THISCDS]
 33198 00006CE6 36FF36[3C05]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 33199 00006CEB 1E                      	push	ds
 33200 00006CEC 56                      	push	si
 33201 00006CED 5F                      	pop	di
 33202 00006CEE 07                      	pop	es
 33203 00006CEF 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 33204                                  SpliceScan:
 33205 00006CF1 E8D4FC                  	call	GetCDSFromDrv
 33206 00006CF4 724B                    	JC	short SpliceDone
 33207 00006CF6 FEC0                    	INC     AL
 33208                                  	;test	word [si+67],2000h
 33209 00006CF8 F744430020              	TEST    word [SI+curdir.flags],curdir_splice
 33210 00006CFD 74F2                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 33211 00006CFF 57                      	push	di
 33212 00006D00 E8A100                  	CALL    PathPref                ;           if (!PathPref (s, d))
 33213 00006D03 7403                    	JZ	short SpliceFound	;
 33214                                  SpliceSkip:
 33215 00006D05 5F                      	pop	di
 33216 00006D06 EBE9                    	JMP	short SpliceScan	;               continue;
 33217                                  SpliceFound:
 33218 00006D08 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 33219 00006D0C 7508                    	JNZ	short SpliceDo
 33220 00006D0E 36F606[F802]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 33221 00006D14 75EF                    	JNZ	short SpliceSkip
 33222                                  SpliceDo:
 33223 00006D16 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 33224 00006D18 06                      	push	es
 33225 00006D19 1F                      	pop	ds
 33226 00006D1A 5F                      	pop	di
 33227 00006D1B E88000                  	CALL    TextFromDrive1          ;               src = TextFromDrive1(src,i);
 33228 00006D1E 36A1[4E05]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 33229 00006D22 09C0                    	OR      AX,AX
 33230 00006D24 7808                    	JS	short NoPoke
 33231 00006D26 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 33232 00006D28 29F0                    	SUB     AX,SI
 33233 00006D2A 36A3[4E05]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 33234                                  NoPoke:
 33235 00006D2E 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 33236 00006D31 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 33237 00006D33 B05C                    	MOV     AL,"\"
 33238 00006D35 AA                      	STOSB
 33239                                  SpliceCopy:                             ;               strcpy (src, p);
 33240 00006D36 E828B2                  	call	FStrCpy
 33241 00006D39 83C404                  	ADD     SP,4                    ; throw away saved stuff
 33242 00006D3C 80C901                  	OR      CL,1                    ; signal splice done.
 33243 00006D3F EB0C                    	JMP     SHORT DoSet             ;               return;
 33244                                  SpliceDone:                             ;               }
 33245 00006D41 368F06[3C05]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 33246 00006D46 368F06[3A05]            	pop	word [SS:THISCDS]			;smr;SS Override
 33247                                  AllDone:
 33248 00006D4B 31C9                    	XOR     CX,CX
 33249                                  DoSet:
 33250 00006D4D 36C536[3A05]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 33251                                  	;les	di,[si+69]
 33252 00006D52 C47C45                  	LES     DI,[SI+curdir.devptr]	
 33253 00006D55 36893E[2405]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 33254 00006D5A 368C06[2605]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 33255                                  Splice_retn:
 33256 00006D5F C3                      	retn
 33257                                  
 33258                                  ;Break <$NameTrans - partially process a name>
 33259                                  ;----------------------------------------------------------------------------
 33260                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 33261                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 33262                                  ;   to Transpath playing games with devices, we need to insure that the output
 33263                                  ;   has drive letter and : in it.
 33264                                  ;
 33265                                  ;   Inputs:     DS:SI - source string for translation
 33266                                  ;               ES:DI - pointer to buffer
 33267                                  ;   Outputs:
 33268                                  ;       Carry Clear
 33269                                  ;               Buffer at ES:DI is filled in with data
 33270                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 33271                                  ;       Carry Set
 33272                                  ;               AX = error_path_not_found
 33273                                  ;   Registers modified: all
 33274                                  ;----------------------------------------------------------------------------
 33275                                  
 33276                                  _$NameTrans:
 33277 00006D60 1E                      	push	ds
 33278 00006D61 56                      	push	si
 33279 00006D62 06                      	push	es
 33280 00006D63 57                      	push	di
 33281 00006D64 51                      	push	cx ; MSDOS 6.0
 33282                                  	
 33283                                  	; MSDOS 6.0	
 33284                                  ; M027 - Start
 33285                                  ;
 33286                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 33287                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 33288                                  ; device if the old call set the volume attribute bit. Note that devname in
 33289                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 33290                                  ; and restore CX.
 33291                                  ;
 33292 00006D65 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 33293 00006D67 E81C05                  	call	SetAttrib
 33294                                  
 33295                                  ; M027 - End
 33296                                  
 33297                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33298 00006D6A BF[6003]                	MOV     DI,OPENBUF
 33299 00006D6D E8E0FC                  	CALL    TransPath               ; to translation (everything)
 33300 00006D70 59                      	pop	cx ; MSDOS 6.0
 33301 00006D71 5F                      	pop     di
 33302 00006D72 07                      	pop	es
 33303 00006D73 5E                      	pop     si
 33304 00006D74 1F                      	pop     ds
 33305 00006D75 7303                    	JNC	short TransOK
 33306 00006D77 E98FA9                  	jmp	SYS_RET_ERR
 33307                                  TransOK:
 33308 00006D7A BE[6003]                	MOV     SI,OPENBUF
 33309 00006D7D 16                      	push	ss
 33310 00006D7E 1F                      	pop	ds
 33311                                  GotText:
 33312 00006D7F E8DFB1                  	call	FStrCpy
 33313 00006D82 E978A9                  	jmp	SYS_RET_OK
 33314                                  
 33315                                  ;Break   <DriveFromText - return drive number from a text string>
 33316                                  ;----------------------------------------------------------------------------
 33317                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 33318                                  ;   pointer.
 33319                                  ;
 33320                                  ;   Inputs:     DS:SI point to a text string
 33321                                  ;   Outputs:    AL has drive number
 33322                                  ;               DS:SI advanced
 33323                                  ;   Registers modified: AX,SI.
 33324                                  ;----------------------------------------------------------------------------
 33325                                  
 33326                                  DriveFromText:
 33327 00006D85 30C0                    	XOR     AL,AL                   ;       drive = 0;
 33328 00006D87 803C00                  	CMP     BYTE [SI],0		;       if (*s &&
 33329 00006D8A 74D3                    	jz	short Splice_retn
 33330 00006D8C 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 33331 00006D90 75CD                    	jnz	short Splice_retn
 33332 00006D92 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 33333 00006D93 0C20                    	OR      AL,20h
 33334                                  	;sub	al,60h
 33335 00006D95 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 33336 00006D97 75C6                    	jnz	short Splice_retn
 33337 00006D99 B0FF                    	MOV     AL,-1                   ; nuke AL...
 33338 00006D9B C3                      	retn				;           }
 33339                                  
 33340                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 33341                                  ;----------------------------------------------------------------------------
 33342                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 33343                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 33344                                  ;
 33345                                  ;   Inputs:     AL has 0-based drive number
 33346                                  ;   Outputs:    ES:DI advanced
 33347                                  ;   Registers modified: AX
 33348                                  ;----------------------------------------------------------------------------
 33349                                  
 33350                                  TextFromDrive:
 33351 00006D9C FEC0                    	INC     AL
 33352                                  TextFromDrive1:
 33353                                  	;add	al,40h
 33354 00006D9E 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 33355 00006DA0 B43A                    	MOV     AH,":"                  ;   strcat (d, ":");
 33356 00006DA2 AB                      	STOSW
 33357                                  PathPref_retn:
 33358 00006DA3 C3                      	retn
 33359                                  
 33360                                  ;Break   <PathPref - see if one path is a prefix of another>
 33361                                  ;----------------------------------------------------------------------------
 33362                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 33363                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 33364                                  ;   prefix: A:\ and A:\FOO
 33365                                  ;
 33366                                  ;   Inputs:     DS:SI potential prefix
 33367                                  ;               ES:DI string
 33368                                  ;   Outputs:    Zero set => prefix found
 33369                                  ;                   DI/SI advanced past matching part
 33370                                  ;               Zero reset => no prefix, DS/SI garbage
 33371                                  ;   Registers modified: CX
 33372                                  ;----------------------------------------------------------------------------
 33373                                  
 33374                                  PathPref:
 33375 00006DA4 E8D1B1                  	call	DStrLen                 ; get length
 33376 00006DA7 49                      	DEC     CX                      ; do not include nul byte
 33377 00006DA8 F3A6                    	REPZ    CMPSB                   ; compare
 33378 00006DAA 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 33379 00006DAC 50                      	push	ax			; save char register
 33380 00006DAD 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 33381 00006DB0 E899E8                  	call    PATHCHRCMP              ; is it a path char (Root!)
 33382 00006DB3 7406                    	JZ	short Prefix		; yes, match root (I hope)
 33383                                  NotSep:                                 ; 2/13/KK
 33384 00006DB5 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 33385 00006DB8 E875FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 33386                                  Prefix:
 33387 00006DBB 58                      	pop	ax			; get back original
 33388 00006DBC C3                      	retn
 33389                                  
 33390                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 33391                                  ;----------------------------------------------------------------------------
 33392                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 33393                                  ;     a path separator.
 33394                                  ;
 33395                                  ;     Input:    DS:SI target string (null terminated)
 33396                                  ;     Output:   Zero set => path separator encountered in string
 33397                                  ;               Zero clear => null encountered
 33398                                  ;     Registers modified: SI
 33399                                  ;----------------------------------------------------------------------------
 33400                                  
 33401                                  ScanPathChar:
 33402 00006DBD AC                      	LODSB                           ; fetch a character
 33403 00006DBE E86FFE                  	call    PathSepGotCh
 33404 00006DC1 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 33405 00006DC3 E886E8                  	call    PATHCHRCMP              ; path separator?
 33406 00006DC6 C3                      	retn
 33407                                  
 33408                                  ;============================================================================
 33409                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 33410                                  ;============================================================================
 33411                                  ; 13/07/2018 - Retro DOS v3.0
 33412                                  
 33413                                  ;	BREAK <$Close - return a handle to the system>
 33414                                  ;----------------------------------------------------------------------------
 33415                                  ;
 33416                                  ;**	$Close - Close a file Handle
 33417                                  ;
 33418                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 33419                                  ;		path
 33420                                  ;
 33421                                  ;	Assembler usage:
 33422                                  ;	    MOV     BX, handle
 33423                                  ;	    MOV     AH, Close
 33424                                  ;	    INT     int_command
 33425                                  ;
 33426                                  ;	ENTRY	(bx) = handle
 33427                                  ;	EXIT	<normal INT21 return convention>
 33428                                  ;	USES	all
 33429                                  ;
 33430                                  ;----------------------------------------------------------------------------
 33431                                  
 33432                                  _$CLOSE:
 33433                                  ;	Grab the SFT pointer from the JFN.
 33434                                  
 33435 00006DC7 E85B02                  	call	CheckOwner		; get system file entry
 33436 00006DCA 722B                    	jc	short CloseError	; error return
 33437 00006DCC 16                      	push	ss
 33438 00006DCD 1F                      	pop	ds			; For DOS_CLOSE
 33439 00006DCE 893E[3605]              	MOV	[THISSFT],DI		; save offset of pointer
 33440 00006DD2 8C06[3805]              	MOV	[THISSFT+2],ES		; save segment value
 33441                                  
 33442                                  ; DS:SI point to JFN table entry.
 33443                                  ; ES:DI point to SFT
 33444                                  ;
 33445                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 33446                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 33447                                  ; If the file was not a net FCB, we free the JFN too.
 33448                                  
 33449                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 33450 00006DD6 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 33451 00006DDA 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 33452                                  	;mov	al,[ES:DI+2]
 33453 00006DDC 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 33454                                  	;and	al,0F0h
 33455 00006DE0 24F0                    	AND	AL,SHARING_MASK
 33456                                  	;cmp	al,70h
 33457 00006DE2 3C70                    	CMP	AL,SHARING_NET_FCB
 33458 00006DE4 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 33459                                  
 33460                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 33461                                  ; -1.
 33462                                  
 33463                                  FreeJFN:
 33464 00006DE6 E8FFF9                  	call	pJFNFromHandle		;   d = pJFN (handle);
 33465 00006DE9 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 33466                                  PostFree:
 33467                                  
 33468                                  ; ThisSFT is correctly set, we have DS = DOSDATA.  Looks OK for a DOS_CLOSE!
 33469                                  
 33470 00006DED E8D2CC                  	call	DOS_CLOSE
 33471                                  
 33472                                  ; DOS_Close may return an error.  If we see such an error, we report it but
 33473                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 33474                                  
 33475 00006DF0 7205                    	JC	short CloseError
 33476                                  	;mov	ah,3Eh
 33477 00006DF2 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 33478 00006DF4 E906A9                  	jmp	SYS_RET_OK
 33479                                  CloseError:
 33480 00006DF7 E90FA9                  	jmp	SYS_RET_ERR
 33481                                  
 33482                                  
 33483                                  ;	BREAK <$Commit - commit the file>
 33484                                  ;----------------------------------------------------------------------------
 33485                                  ;
 33486                                  ;**	$Commit - Commit a File
 33487                                  ;
 33488                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 33489                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 33490                                  ;	the directory entry, etc., so this commit is pretty useless.  check
 33491                                  ;	and fix this!! jgl
 33492                                  ;
 33493                                  ;	Assembler usage:
 33494                                  ;	    MOV     BX, handle
 33495                                  ;	    MOV     AH, Commit
 33496                                  ;	    INT     int_command
 33497                                  ;
 33498                                  ;	ENTRY	(bx) = handle
 33499                                  ;	EXIT	none
 33500                                  ;	USES	all
 33501                                  ;;----------------------------------------------------------------------------
 33502                                  
 33503                                  _$COMMIT:
 33504                                  ;	Grab the SFT pointer from the JFN.
 33505                                  
 33506 00006DFA E82802                  	call	CheckOwner		; get system file entry
 33507 00006DFD 7214                    	JC	short CommitError	; error return
 33508 00006DFF 16                      	push	ss
 33509 00006E00 1F                      	pop	ds			; For DOS_COMMIT
 33510 00006E01 893E[3605]              	MOV	[THISSFT],DI		; save offset of pointer
 33511 00006E05 8C06[3805]              	MOV	[THISSFT+2],ES		; save segment value
 33512                                  
 33513                                  ;	ThisSFT is correctly set, we have DS = DOSDATA.  Looks OK for a DOS_COMMIT
 33514                                  ;
 33515                                  ;	ES:DI point to SFT
 33516                                  
 33517 00006E09 E8B7CD                  	call	DOS_COMMIT
 33518 00006E0C 7205                    	JC	short CommitError
 33519                                  	;mov	ah,68h
 33520 00006E0E B468                    	MOV	AH,COMMIT		;
 33521 00006E10 E9EAA8                  	jmp	SYS_RET_OK
 33522                                  CommitError:
 33523 00006E13 E9F3A8                  	jmp	SYS_RET_ERR
 33524                                  
 33525                                  ;	BREAK <$ExtHandle - extend handle count>
 33526                                  
 33527                                  ;**	$ExtHandle - Extend Handle Count
 33528                                  ;----------------------------------------------------------------------------
 33529                                  ;	Assembler usage:
 33530                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 33531                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 33532                                  ;	    INT     int_command 		 busy )
 33533                                  ;
 33534                                  ;	ENTRY	(bx) = new number of handles
 33535                                  ;	EXIT	'C' clear if OK
 33536                                  ;		'C' set iff err
 33537                                  ;		  (ax) = error code
 33538                                  ;			 AX = error_not_enough_memory
 33539                                  ;			      error_too_many_open_files
 33540                                  ;	USES	all
 33541                                  ;----------------------------------------------------------------------------
 33542                                  
 33543                                  _$ExtHandle:
 33544 00006E16 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 33545                                  	;cmp	bx,20
 33546 00006E18 83FB14                  	CMP	BX,FILPERPROC
 33547 00006E1B 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 33548 00006E1D BB1400                  	MOV	BX,FILPERPROC
 33549                                  exth2:	
 33550 00006E20 368E06[DE02]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 33551                                  	;mov	cx,[ES:32h]
 33552 00006E25 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 33553 00006E2A 39CB                    	CMP	BX,CX			; the requested == current
 33554 00006E2C 7452                    	JE	short ok_done 		; yes and exit
 33555 00006E2E 7722                    	JA	short larger		; go allocate new table
 33556                                  
 33557                                  ;	We're going to shrink the # of handles available
 33558                                  
 33559 00006E30 BD0100                  	MOV	BP,1			; shrink
 33560                                  	;mov	ds,[ES:36h]
 33561 00006E33 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 33562 00006E38 89DE                    	MOV	SI,BX			;
 33563 00006E3A 29D9                    	SUB	CX,BX			; get difference
 33564                                  
 33565                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 33566                                  chck_handles:
 33567 00006E3C 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 33568 00006E3F 7542                    	JNZ	short too_many_files	; status
 33569 00006E41 46                      	INC	SI
 33570 00006E42 E2F8                    	LOOP	chck_handles
 33571 00006E44 83FB14                  	CMP	BX,FILPERPROC		; = 20
 33572 00006E47 7709                    	JA	short larger		; no
 33573                                  
 33574 00006E49 BD0200                  	MOV	BP,2			; psp
 33575                                  	;mov	di,24
 33576 00006E4C BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 33577 00006E4F 53                      	PUSH	BX
 33578 00006E50 EB1F                    	JMP	short movhandl
 33579                                  
 33580                                  larger:
 33581 00006E52 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 33582 00006E55 0F848100                	JZ	invalid_func ; 10/08/2018
 33583 00006E59 F8                      	CLC
 33584 00006E5A 53                      	PUSH	BX			; save requested number
 33585 00006E5B 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 33586 00006E5E B104                    	MOV	CL,4
 33587                                  	;ror	bx,cl			; MSDOS 3.3
 33588 00006E60 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 33589 00006E62 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 33590                                  
 33591 00006E66 55                      	PUSH	BP
 33592 00006E67 E8E8F6                  	call	_$ALLOC			; allocate memory
 33593 00006E6A 5D                      	POP	BP
 33594 00006E6B 7267                    	JC	short no_memory		; not enough meory
 33595                                  
 33596 00006E6D 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 33597 00006E6F 31FF                    	XOR	DI,DI
 33598                                  movhandl:
 33599 00006E71 368E1E[DE02]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 33600                                  
 33601 00006E76 F7C50300                	test	BP,3			; enlarge ?
 33602 00006E7A 740C                    	JZ	short enlarge 		; yes
 33603 00006E7C 59                      	POP	CX			; cx = the amount you shrink
 33604 00006E7D 51                      	PUSH	CX
 33605 00006E7E EB0C                    	JMP	short copy_hand
 33606                                  
 33607                                  ;	Done.  'C' clear
 33608                                  
 33609                                  ok_done:
 33610 00006E80 E97AA8                  	jmp	SYS_RET_OK
 33611                                  
 33612                                  too_many_files:
 33613                                  	;mov	al,4
 33614 00006E83 B004                    	MOV	AL,error_too_many_open_files
 33615 00006E85 E981A8                  	jmp	SYS_RET_ERR
 33616                                  
 33617                                  enlarge:
 33618                                  	;mov	cx,[32h]
 33619 00006E88 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 33620                                  copy_hand:
 33621 00006E8C 89CA                    	MOV	DX,CX
 33622                                  	;lds	si,[34h]
 33623 00006E8E C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 33624 00006E92 F3A4                    	REP	MOVSB			; copy infomation to new table
 33625 00006E94 59                      	POP	CX			; get new number of handles
 33626 00006E95 51                      	PUSH	CX			; save it again
 33627 00006E96 29D1                    	SUB	CX,DX			; get the difference
 33628 00006E98 B0FF                    	MOV	AL,-1			; set availability to handles
 33629 00006E9A F3AA                    	REP	STOSB
 33630 00006E9C 368E1E[DE02]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 33631                                  	;cmp	word [34h],0
 33632 00006EA1 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 33633 00006EA6 750D                    	JNZ	short update_info	; yes, go update PDB entries
 33634 00006EA8 55                      	PUSH	BP
 33635 00006EA9 1E                      	PUSH	DS			; save old table segment
 33636 00006EAA 06                      	PUSH	ES			; save new table segment
 33637 00006EAB 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 33638 00006EAF E8BDF7                  	call	_$DEALLOC		; deallocate old table meomory
 33639 00006EB2 07                      	POP	ES			; restore new table segment
 33640 00006EB3 1F                      	POP	DS			; restore old table segment
 33641 00006EB4 5D                      	POP	BP
 33642                                  
 33643                                  update_info:
 33644 00006EB5 F7C50200                	test	BP,2			; psp?
 33645 00006EB9 7408                    	JZ	short non_psp 		; no
 33646                                  	;mov	word [34h],18h ; 24
 33647 00006EBB C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 33648 00006EC1 EB06                    	JMP	short final
 33649                                  non_psp:
 33650                                  	;mov	word [34h],0
 33651 00006EC3 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 33652                                  final:
 33653                                  	;mov	word [36h],es	
 33654 00006EC9 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 33655                                  	;pop	word [32h]
 33656 00006ECD 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 33657 00006ED1 E929A8                  	jmp	SYS_RET_OK
 33658                                  
 33659                                  no_memory:
 33660 00006ED4 5B                      	POP	BX			; clean stack
 33661                                  	;mov	al,8
 33662 00006ED5 B008                    	MOV	AL,error_not_enough_memory
 33663 00006ED7 E92FA8                  	jmp	SYS_RET_ERR
 33664                                  invalid_func:
 33665                                  	;mov	al,1
 33666 00006EDA B001                    	MOV	AL,error_invalid_function
 33667 00006EDC E92AA8                  	jmp	SYS_RET_ERR
 33668                                  
 33669                                  
 33670                                  ;	BREAK <$READ - Read from a file handle>
 33671                                  ;----------------------------------------------------------------------------
 33672                                  ;
 33673                                  ;**	$Read - Read from a File Handle
 33674                                  ;
 33675                                  ;   Assembler usage:
 33676                                  ;
 33677                                  ;	LDS	DX, buf
 33678                                  ;	MOV	CX, count
 33679                                  ;	MOV	BX, handle
 33680                                  ;	MOV	AH, Read
 33681                                  ;	INT	int_command
 33682                                  ;	  AX has number of bytes read
 33683                                  ;
 33684                                  ;	ENTRY	(bx) = file handle
 33685                                  ;		(cx) = byte count
 33686                                  ;		(ds:dx) = buffer address
 33687                                  ;	EXIT	Through system call return so that to user:
 33688                                  ;		  'C' clear if OK
 33689                                  ;		    (ax) = bytes read
 33690                                  ;		  'C' set if error
 33691                                  ;		    (ax) = error code
 33692                                  ;
 33693                                  ;----------------------------------------------------------------------------
 33694                                  
 33695                                  _$READ:
 33696 00006EDF BE[043E]                	MOV	SI,DOS_READ
 33697                                  ReadDo:
 33698 00006EE2 E803F9                  	call	pJFNFromHandle
 33699 00006EE5 7208                    	JC	short ReadError
 33700 00006EE7 268A05                  	MOV	AL,[ES:DI]
 33701 00006EEA E83801                  	call	CheckOwner		; get the handle
 33702 00006EED 7303                    	JNC	short ReadSetup		; no errors do the operation
 33703                                  
 33704                                  ;	Have an error.	'C' set
 33705                                  
 33706                                  ReadError:
 33707 00006EEF E917A8                  	jmp	SYS_RET_ERR		; go to error traps
 33708                                  
 33709                                  ReadSetup:
 33710 00006EF2 36893E[3605]            	MOV	[SS:THISSFT],DI		; save offset of pointer;smr;SS Override
 33711 00006EF7 368C06[3805]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 33712                                  	;;; MSDOS 6.0 
 33713                                  ;; Extended Open
 33714                                  	;;;testb [ES:DI+SF_ENTRY.sf_mode],INT_24_ERROR  ;AN000;;EO. need i24
 33715                                  	;;;JZ	short needi24 		      ;AN000;;EO. yes
 33716                                  	;;;OR	byte [EXTOPEN_ON],EXT_OPEN_I24_OFF 
 33717                                  					;AN000;;EO. set it off;smr;SS Override
 33718                                  needi24:				;AN000;
 33719                                  ;; Extended Open
 33720 00006EFC 36FF36[DA02]            	push	word [SS:DMAADD]
 33721 00006F01 36FF36[DC02]            	push	word [SS:DMAADD+2]	;smr;SS Override
 33722                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 33723                                  	;;; MSDOS 6.0
 33724                                  	;;; CALL Align_Buffer		;AN000;MS. align user's buffer
 33725                                  	; MSDOS 3.3
 33726 00006F06 89D3                    	MOV	BX,DX			; copy offset
 33727 00006F08 51                      	push	cx			; don't stomp on count
 33728 00006F09 B104                    	MOV	CL,4			; bits to shift bytes->para
 33729 00006F0B D3EB                    	SHR	BX,CL			; get number of paragraphs
 33730 00006F0D 59                      	pop	cx			; get count back
 33731 00006F0E 8CD8                    	MOV	AX,DS			; get original segment
 33732 00006F10 01D8                    	ADD	AX,BX			; get new segment
 33733 00006F12 8ED8                    	MOV	DS,AX			; in seg register
 33734 00006F14 83E20F                  	AND	DX,0Fh			; normalize offset
 33735 00006F17 368916[DA02]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 33736 00006F1C 368C1E[DC02]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 33737                                  						;smr;SS Override
 33738                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 33739 00006F21 16                      	push	ss			; go for DOS addressability
 33740 00006F22 1F                      	pop	ds
 33741 00006F23 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 33742 00006F25 8F06[DC02]              	pop	word [DMAADD+2]
 33743 00006F29 8F06[DA02]              	pop	word [DMAADD]
 33744                                  	;JNC	short READ_OK		;AN002;
 33745                                  	;JMP	ReadError		;AN002; if error, say bye bye
 33746 00006F2D 72C0                    	jc	short ReadError
 33747                                  READ_OK:
 33748 00006F2F 89C8                    	MOV	AX,CX			; get correct return in correct reg
 33749 00006F31 E9C9A7                  	jmp	SYS_RET_OK		; successful return
 33750                                  
 33751                                  
 33752                                  
 33753                                  ; 13/07/2018 - Retro DOS v3.0
 33754                                  
 33755                                  ;
 33756                                  ;   Input: DS:DX points to user's buffer addr
 33757                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 33758                                  ;   Output: [DMAADD] set
 33759                                  ;
 33760                                  
 33761                                  ;Align_Buffer:
 33762                                  ;	MOV	BX,DX			; copy offset
 33763                                  ;	push	cx			; don't stomp on count
 33764                                  ;	MOV	CL,4			; bits to shift bytes->para
 33765                                  ;	SHR	BX,CL			; get number of paragraphs
 33766                                  ;	pop	cx			; get count back
 33767                                  ;	MOV	AX,DS			; get original segment
 33768                                  ;	ADD	AX,BX			; get new segment
 33769                                  ;	MOV	DS,AX			; in seg register
 33770                                  ;	AND	DX,0Fh			; normalize offset
 33771                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 33772                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 33773                                  ;						;smr;SS Override
 33774                                  ;	retn
 33775                                  
 33776                                  ;BREAK <$WRITE - write to a file handle>
 33777                                  ;----------------------------------------------------------------------------
 33778                                  ;
 33779                                  ;   Assembler usage:
 33780                                  ;	    LDS     DX, buf
 33781                                  ;	    MOV     CX, count
 33782                                  ;	    MOV     BX, handle
 33783                                  ;	    MOV     AH, Write
 33784                                  ;	    INT     int_command
 33785                                  ;	  AX has number of bytes written
 33786                                  ;   Errors:
 33787                                  ;	    AX = write_invalid_handle
 33788                                  ;	       = write_access_denied
 33789                                  ;
 33790                                  ;   Returns in register AX
 33791                                  ;
 33792                                  ;----------------------------------------------------------------------------
 33793                                  
 33794                                  _$WRITE:
 33795 00006F34 BE[853F]                	MOV	SI,DOS_WRITE
 33796 00006F37 EBA9                    	JMP	short ReadDo
 33797                                  
 33798                                  ;BREAK <$LSEEK - move r/w pointer>
 33799                                  ;----------------------------------------------------------------------------
 33800                                  ;
 33801                                  ;   Assembler usage:
 33802                                  ;	    MOV     DX, offsetlow
 33803                                  ;	    MOV     CX, offsethigh
 33804                                  ;	    MOV     BX, handle
 33805                                  ;	    MOV     AL, method
 33806                                  ;	    MOV     AH, LSeek
 33807                                  ;	    INT     int_command
 33808                                  ;	  DX:AX has the new location of the pointer
 33809                                  ;   Error returns:
 33810                                  ;	    AX = error_invalid_handle
 33811                                  ;	       = error_invalid_function
 33812                                  ;   Returns in registers DX:AX
 33813                                  ;
 33814                                  ;----------------------------------------------------------------------------
 33815                                  
 33816                                  _$LSEEK:
 33817 00006F39 E8E900                  	call	CheckOwner		; get system file entry
 33818                                  LSeekError:
 33819 00006F3C 7302                    	JNC	short CHKOWN_OK		;AN002;
 33820 00006F3E EBAF                    	JMP	short ReadError		;AN002; error return
 33821                                  
 33822                                  CHKOWN_OK:				;AN002;
 33823 00006F40 3C02                    	CMP	AL,2			; is the seek value correct?
 33824 00006F42 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 33825                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 33826 00006F44 36C606[D102]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 33827                                  					;smr;SS Override
 33828                                  	;mov	al,1
 33829 00006F4A B001                    	mov	al, error_invalid_function ; invalid method
 33830 00006F4C EBA1                    	jmp	short ReadError
 33831                                  LSeekDisp:
 33832 00006F4E 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 33833 00006F50 720A                    	JB	short LSeekStore	; just store CX:DX
 33834 00006F52 771C                    	JA	short LSeekEOF		; seek from end of file
 33835                                  	;add	dx,[es:di+21]
 33836 00006F54 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 33837                                  	;adc	cx,[es:di+23]
 33838 00006F58 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 33839                                  LSeekStore:
 33840 00006F5C 89C8                    	MOV	AX,CX			; AX:DX
 33841 00006F5E 92                      	XCHG	AX,DX			; DX:AX is the correct value
 33842                                  LSeekSetpos:
 33843                                  	;mov	[es:di+21],ax
 33844 00006F5F 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 33845                                  	;mov	[es:di+23],dx
 33846 00006F63 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 33847 00006F67 E8A1A6                  	call	Get_User_Stack
 33848                                  	;mov	[si+6],dx
 33849 00006F6A 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 33850 00006F6D E98DA7                  	jmp	SYS_RET_OK		; successful return
 33851                                  
 33852                                  LSeekEOF:
 33853                                  	;test	word [es:di+5],8000h
 33854 00006F70 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 33855 00006F76 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 33856                                  LOCAL_LSeek:
 33857                                  	;add	dx,[es:di+17]
 33858 00006F78 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 33859                                  	;adc	cx,[es:di+19]
 33860 00006F7C 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 33861 00006F80 EBDA                    	JMP	short LSeekStore	; go and set the position
 33862                                  
 33863                                  Check_LSeek_Mode:
 33864                                  	;test	word [es:di+2],8000h
 33865 00006F82 26F745020080            	test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 33866 00006F88 75EE                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 33867                                  	;mov	ax,[es:di+2]
 33868 00006F8A 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 33869                                  	;and	ax, 0F0h
 33870 00006F8E 25F000                  	AND	AX,SHARING_MASK
 33871                                  	;cmp	ax,40h
 33872 00006F91 83F840                  	CMP	AX,SHARING_DENY_NONE
 33873 00006F94 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 33874                                  	;cmp	ax,30h
 33875 00006F96 83F830                  	CMP	AX,SHARING_DENY_READ
 33876 00006F99 75DD                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 33877                                  NET_LSEEK:
 33878                                  ;	JMP	short LOCAL_LSeek
 33879                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 33880                                  	;CallInstall Net_Lseek,MultNET,33
 33881                                  	;JNC	short LSeekSetPos
 33882                                  
 33883 00006F9B B82111                  	mov     ax, 1121h
 33884 00006F9E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 33885                                  			; CX:DX = offset (in bytes) from end
 33886                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 33887                                  			; SS = DOS CS
 33888                                  			; Return: CF set on error
 33889                                  			; CF clear if successful, DX:AX = new file position
 33890 00006FA0 73BD                    	jnb     short LSeekSetpos
 33891 00006FA2 E964A7                  	jmp	SYS_RET_ERR
 33892                                  
 33893                                  ;BREAK <FileTimes - modify write times on a handle>
 33894                                  ;----------------------------------------------------------------------------
 33895                                  ;
 33896                                  ;   Assembler usage:
 33897                                  ;	    MOV AH, FileTimes (57H)
 33898                                  ;	    MOV AL, func
 33899                                  ;	    MOV BX, handle
 33900                                  ;	; if AL = 1 then then next two are mandatory
 33901                                  ;	    MOV CX, time
 33902                                  ;	    MOV DX, date
 33903                                  ;	    INT 21h
 33904                                  ;	; if AL = 0 then CX/DX has the last write time/date
 33905                                  ;	; for the handle.
 33906                                  ;
 33907                                  ;	AL=02		 get extended attributes
 33908                                  ;	   BX=handle
 33909                                  ;	   CX=size of buffer (0, return max size )
 33910                                  ;	   DS:SI query list (si=-1, selects all EA)
 33911                                  ;	   ES:DI buffer to hold EA list
 33912                                  ;
 33913                                  ;	AL=03		 get EA name list
 33914                                  ;	   BX=handle
 33915                                  ;	   CX=size of buffer (0, return max size )
 33916                                  ;	   ES:DI buffer to hold name list
 33917                                  ;
 33918                                  ;	AL=04		 set extended attributes
 33919                                  ;	   BX=handle
 33920                                  ;	   ES:DI buffer of EA list
 33921                                  ;
 33922                                  ;
 33923                                  ;   Error returns:
 33924                                  ;	    AX = error_invalid_function
 33925                                  ;	       = error_invalid_handle
 33926                                  ;
 33927                                  ;----------------------------------------------------------------------------
 33928                                  
 33929                                  _$FILE_TIMES:
 33930                                  	; 13/07/2018 - Retro DOS v3.0
 33931                                  
 33932                                  	; MSDOS 3.3
 33933 00006FA5 3C02                    	cmp	al,2			; correct subfunction ?
 33934 00006FA7 720B                    	jb	short ft1
 33935                                  
 33936                                          ;mov	byte [ss:EXTERR_LOCUS], 1
 33937 00006FA9 36C606[D102]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 33938                                  						;SS Overr
 33939                                  	;mov	al,1
 33940 00006FAF B001                    	mov	al,error_invalid_function ; give bad return
 33941 00006FB1 E955A7                  	jmp     SYS_RET_ERR
 33942                                  
 33943                                  	; MSDOS 6.0
 33944                                  	;cmp	al,2			; correct subfunction ?
 33945                                  	;jae	short inval_func
 33946                                  ft1:
 33947 00006FB4 E86E00                  	call	CheckOwner		; get sft
 33948 00006FB7 7283                    	jc	short LSeekError	; bad handle
 33949                                  
 33950 00006FB9 08C0                    	or	al,al			; get time/date ?
 33951 00006FBB 7515                    	jnz	short ft_set_time
 33952                                  
 33953                                  ;------ here we get the time & date from the sft for the user
 33954                                  
 33955 00006FBD FA                      	cli				; is this cli/sti reqd ? BUGBUG
 33956                                  	;mov	cx,[es:di+13]
 33957 00006FBE 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 33958                                  	;mov	dx,[es:di+15]
 33959 00006FC2 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 33960 00006FC6 FB                      	sti
 33961 00006FC7 E841A6                  	call	Get_User_Stack
 33962                                  	;mov	[si+4],cx
 33963 00006FCA 894C04                  	mov	[si+user_env.user_CX],cx
 33964                                  	;mov	[si+6],dx
 33965 00006FCD 895406                  	mov	[si+user_env.user_DX],dx
 33966 00006FD0 EB20                    	jmp	short ok_ret
 33967                                  
 33968                                  ;------ here we set the time in sft
 33969                                  
 33970                                  ft_set_time:
 33971 00006FD2 E897B0                  	call    EcritSFT
 33972                                  	;mov	[es:di+13],cx
 33973 00006FD5 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 33974                                  	;mov	[es:di+15],dx
 33975 00006FD9 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 33976                                  
 33977 00006FDD 31C0                    	xor	ax, ax
 33978 00006FDF 36FF1E[9400]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 33979                                  
 33980                                  ;------ set the flags in SFT entry
 33981                                  	;and	word [es:di+5],0FFBFh
 33982 00006FE4 26836505BF              	and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 33983                                  							; mark file as dirty
 33984                                  	;or	word [es:di+5],4000h
 33985 00006FE9 26814D050040            	or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 33986                                  							; ask close not to
 33987                                  							;   bother about date
 33988                                  							;   and time
 33989 00006FEF E882B0                  	call	LcritSFT
 33990                                  ok_ret:
 33991 00006FF2 E908A7                  	jmp	SYS_RET_OK
 33992                                  
 33993                                  ;inval_func:
 33994                                  ;	mov	byte [ss:EXTERR_LOCUS], 1
 33995                                  ;	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 33996                                  ;						;SS Overr
 33997                                  ;	;mov	al,1
 33998                                  ;	mov	al,error_invalid_function ; give bad return
 33999                                  ;	jmp     SYS_RET_ERR
 34000                                  
 34001                                  ;BREAK <$DUP - duplicate a jfn>
 34002                                  ;----------------------------------------------------------------------------
 34003                                  ;
 34004                                  ;   Assembler usage:
 34005                                  ;	    MOV     BX, fh
 34006                                  ;	    MOV     AH, Dup
 34007                                  ;	    INT     int_command
 34008                                  ;	  AX has the returned handle
 34009                                  ;   Errors:
 34010                                  ;	    AX = dup_invalid_handle
 34011                                  ;	       = dup_too_many_open_files
 34012                                  ;
 34013                                  ;----------------------------------------------------------------------------
 34014                                  
 34015                                  _$DUP:
 34016 00006FF5 89D8                    	MOV	AX,BX			; save away old handle in AX
 34017 00006FF7 E842F8                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 34018                                  DupErrorCheck:
 34019 00006FFA 7218                    	JC	short DupErr		; nope, bye
 34020 00006FFC 06                      	push	es
 34021 00006FFD 57                      	push	di			; save away SFT
 34022 00006FFE 5E                      	pop	si			; into convenient place DS:SI
 34023 00006FFF 1F                      	pop	ds
 34024 00007000 93                      	XCHG	AX,BX			; get back old handle
 34025 00007001 E82100                  	call	CheckOwner		; get sft in ES:DI
 34026 00007004 720E                    	JC	short DupErr		; errors go home
 34027 00007006 E8D7C6                  	call	DOS_Dup_Direct
 34028 00007009 E8DCF7                  	call	pJFNFromHandle		; get pointer
 34029 0000700C 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 34030 0000700F 881C                    	MOV	[SI],BL			; stuff in new SFT
 34031 00007011 E9E9A6                  	jmp	SYS_RET_OK		; and go home
 34032                                  DupErr:
 34033 00007014 E9F2A6                  	jmp	SYS_RET_ERR
 34034                                  
 34035                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 34036                                  ;----------------------------------------------------------------------------
 34037                                  ;
 34038                                  ;   Assembler usage:
 34039                                  ;	    MOV     BX, fh
 34040                                  ;	    MOV     CX, newfh
 34041                                  ;	    MOV     AH, Dup2
 34042                                  ;	    INT     int_command
 34043                                  ;   Error returns:
 34044                                  ;	    AX = error_invalid_handle
 34045                                  ;
 34046                                  ;----------------------------------------------------------------------------
 34047                                  
 34048                                  _$DUP2:
 34049 00007017 53                      	push	bx
 34050 00007018 51                      	push	cx			; save source
 34051 00007019 89CB                    	MOV	BX,CX			; get one to close
 34052 0000701B E8A9FD                  	call	_$CLOSE			; close destination handle
 34053 0000701E 5B                      	pop	bx
 34054 0000701F 58                      	pop	ax			; old in AX, new in BX
 34055 00007020 E8C5F7                  	call	pJFNFromHandle		; get pointer
 34056 00007023 EBD5                    	JMP	short DupErrorCheck	; check error and do dup
 34057                                  
 34058                                  ;Break	<CheckOwner - verify ownership of handles from server>
 34059                                  ;----------------------------------------------------------------------------
 34060                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 34061                                  ;   process without the process knowing it (delete/rename of open files, for
 34062                                  ;   example), it is possible for the redirector to issue a call to a handle
 34063                                  ;   that it soes not rightfully own.  We check here to make sure that the
 34064                                  ;   issuing process is the owner of the SFT.  At the same time, we do a
 34065                                  ;   SFFromHandle to really make sure that the SFT is good.
 34066                                  ;
 34067                                  ;	ENTRY	BX has the handle
 34068                                  ;		User_ID is the current user
 34069                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 34070                                  ;		Carry Set => AX has error code
 34071                                  ;	USES	none
 34072                                  ;----------------------------------------------------------------------------
 34073                                  
 34074                                  CheckOwner:
 34075                                  	; 13/07/2018 - Retro DOS v3.0
 34076                                  
 34077 00007025 E8D8F7                  	call	SFFromHandle
 34078 00007028 720F                    	jc	short co_ret_label	; retc
 34079                                  
 34080 0000702A 50                      	push	ax
 34081                                  
 34082                                  	; MSDOS 6.0
 34083                                  ;SR;
 34084                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 34085                                  ;SR; are shared across multiple VMs in win386.
 34086                                  ;SR;
 34087                                  	;test	byte [IsWin386],1
 34088                                  	;jz	short no_win386		;win386 is not present
 34089                                  	;xor	ax,ax			;set the zero flag
 34090                                  	;jmp	short skip_win386	
 34091                                  
 34092                                  ;no_win386:
 34093 0000702B 36A1[EA02]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 34094                                  	;cmp	ax,[es:di+47]
 34095 0000702F 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 34096                                  
 34097                                  ;skip_win386:
 34098 00007033 58                      	pop	ax
 34099                                  	
 34100 00007034 7403                    	jz	short co_ret_label
 34101                                  	
 34102                                  	;mov	al,6
 34103 00007036 B006                    	mov	al,error_invalid_handle
 34104 00007038 F9                      	stc
 34105                                  
 34106                                  co_ret_label:
 34107 00007039 C3                      	retn
 34108                                  
 34109                                  ;============================================================================
 34110                                  ; FILE.ASM, MSDOS 6.0, 1991
 34111                                  ;============================================================================
 34112                                  ; 14/07/2018 - Retro DOS v3.0
 34113                                  
 34114                                  ; MSDOS 2.11
 34115                                  ;BREAK <$Open - open a file handle>
 34116                                  ;----------------------------------------------------------------------------
 34117                                  ;   Assembler usage:
 34118                                  ;           LDS     DX, Name
 34119                                  ;           MOV     AH, Open
 34120                                  ;           MOV     AL, access
 34121                                  ;           INT     int_command
 34122                                  ;
 34123                                  ;       ACCESS          Function
 34124                                  ;       ------          --------
 34125                                  ;       open_for_read   file is opened for reading
 34126                                  ;       open_for_write  file is opened for writing
 34127                                  ;       open_for_both   file is opened for both reading and writing.
 34128                                  ;
 34129                                  ;   Error returns:
 34130                                  ;           AX = error_invalid_access
 34131                                  ;              = error_file_not_found
 34132                                  ;              = error_access_denied
 34133                                  ;              = error_too_many_open_files
 34134                                  ;----------------------------------------------------------------------------
 34135                                  
 34136                                  ; MSDOS 6.0
 34137                                  ;	BREAK <$Open - open a file from a path string>
 34138                                  ;----------------------------------------------------------------------------
 34139                                  ;
 34140                                  ;**	$OPen - Open a File
 34141                                  ;
 34142                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 34143                                  ;	file and and returns a handle
 34144                                  ;
 34145                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 34146                                  ;		(AL) = open mode
 34147                                  ;	EXIT	'C' clear if OK
 34148                                  ;		  (ax) = file handle
 34149                                  ;		'C' set if error
 34150                                  ;		  (ax) = error code
 34151                                  ;	USES	all
 34152                                  ;
 34153                                  ;----------------------------------------------------------------------------
 34154                                  
 34155                                  _$OPEN:       
 34156 0000703A 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 34157                                  _$Open2:
 34158                                  	;mov	ch,16h
 34159 0000703C B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 34160 0000703E E84502                  	call	SetAttrib
 34161 00007041 B9[8237]                	mov	cx,DOS_OPEN
 34162                                  
 34163                                  	;xor	ah,ah  ; MSDOS 3.3
 34164                                  
 34165 00007044 50                      	push	ax
 34166                                  
 34167                                  ;*	General file open/create code. The $CREATE call and the various
 34168                                  ;	$OPEN calls all come here.
 34169                                  ;
 34170                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 34171                                  ;	path names, etc., and then dispatch to our individual handlers.
 34172                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 34173                                  ;
 34174                                  ;	(TOS) = create mode
 34175                                  ;	(CX) = address of routine to call to do actual function
 34176                                  ;	(DS:DX) = ASCIZ name
 34177                                  ;	SAttrib = Attribute mask
 34178                                  
 34179                                  ;	Get a free SFT and mark it "being allocated"
 34180                                  
 34181                                  AccessFile:
 34182 00007045 E824B0                  	call	EcritSFT
 34183 00007048 E804F8                  	call	SFNFree			; get a free sfn
 34184 0000704B E826B0                  	call	LcritSFT
 34185 0000704E 7214                    	jc	short OpenFailJ		; oops, no free sft's
 34186 00007050 36891E[4205]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 34187 00007055 36893E[3605]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 34188 0000705A 368C06[3805]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 34189                                  
 34190                                  ;	Find a free area in the user's JFN table.
 34191                                  
 34192 0000705F E8DAF7                  	call	JFNFree			; get a free jfn
 34193 00007062 7303                    	jnc	short SaveJFN
 34194                                  OpenFailJ:
 34195 00007064 E98100                  	JMP	OpenFail		; there were free JFNs... try SFN
 34196                                  
 34197                                  SaveJFN:
 34198 00007067 36893E[4605]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 34199 0000706C 368C06[4805]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 34200 00007071 36891E[4405]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 34201                                  
 34202                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 34203                                  ;	reusing the same JFN.
 34204                                  
 34205 00007076 368B1E[4205]            	MOV	BX,[ss:SFN]					;smr;SS Override
 34206 0000707B 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 34207 0000707E 89D6                    	MOV	SI,DX			; get name in appropriate place
 34208 00007080 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34209 00007083 51                      	push	cx			; save routine to call
 34210 00007084 E8C9F9                  	call	TransPath		; convert the path
 34211 00007087 5B                      	pop	bx			; (bx) = routine to call
 34212                                  
 34213 00007088 36C536[3605]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 34214 0000708D 720A                    	JC	short OpenCleanJ	; no error, go and open file
 34215 0000708F 36803E[1505]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 34216 00007095 7404                    	JZ	short SetSearch
 34217                                  	;mov	al,2
 34218 00007097 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 34219                                  OpenCleanJ:
 34220 00007099 EB3E                    	JMP	short OpenClean
 34221                                  
 34222                                  SetSearch:
 34223 0000709B 58                      	pop	ax			; Mode (Open), Attributes (Create)
 34224                                  
 34225                                  ;	We need to get the new inheritance bits.
 34226                                  
 34227 0000709C 31C9                    	xor	cx,cx
 34228                                  	; MSDOS 6.0
 34229                                  	;mov	[si+2],cx ; 0
 34230 0000709E 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 34231                                  	;mov    [si+51],cx ; 0
 34232 000070A1 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 34233                                  	;
 34234 000070A4 81FB[8237]              	CMP	BX,DOS_OPEN
 34235 000070A8 7509                    	JNZ	short _DoOper
 34236                                  	;test   al,80h
 34237 000070AA A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 34238 000070AC 7405                    	JZ	short _DoOper ; 10/08/2018
 34239 000070AE 247F                    	AND	AL,7Fh			; mask off inherit bit
 34240                                  	;mov	cx,1000h
 34241 000070B0 B90010                  	MOV	CX,sf_no_inherit
 34242                                  _DoOper:
 34243                                  	;; MSDOS 3.3
 34244                                  	;;mov	word [si+2], 0
 34245                                  	;;mov	word [si+33h], 0
 34246                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 34247                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 34248                                  
 34249                                  	; MSDOS 6.0
 34250                                  ;**	Check if this is an extended open. If so you must set the
 34251                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 34252                                  ;	Set_EXT_mode in creat.asm
 34253                                  
 34254                                  	; MSDOS 6.0
 34255                                  	;;SAVE	<di, es>                ;M022 conditional removed here
 34256                                  	;push	di
 34257                                  	;push	es
 34258                                  	;push	ds
 34259                                  	;pop	es
 34260                                  	;push	si
 34261                                  	;pop	di			; (es:di) = SFT address
 34262                                  	;call	Set_EXT_mode
 34263                                  	;;RESTORE <es, di>
 34264                                  	;pop	es
 34265                                  	;pop	di
 34266                                  
 34267                                  	;Context DS
 34268 000070B3 16                      	push	ss
 34269 000070B4 1F                      	pop	ds	
 34270                                  
 34271 000070B5 51                      	push	cx
 34272 000070B6 FFD3                    	CALL	BX			; blam!
 34273 000070B8 59                      	pop	cx
 34274 000070B9 C536[3605]              	LDS	SI,[THISSFT]
 34275                                  	;JC	short OpenE2		;AN000;FT. chek extended open hooks first
 34276 000070BD 721B                    	jc	short OpenE ; MSDOS 3.3
 34277                                  
 34278                                  ;	The SFT was successfully opened. Remove busy mark.
 34279                                  
 34280                                  OpenOK:
 34281                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 34282 000070BF C7040100                	mov	word [SI],1
 34283                                  	;or	[SI+5],cx
 34284 000070C3 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 34285                                  
 34286                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 34287                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 34288                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 34289                                  ;
 34290                                  ; Since this is only relevant on sharer systems, we stick this code into the
 34291                                  ; sharer.
 34292                                  
 34293 000070C6 36A1[4405]              	MOV	AX,[ss:JFN]				;smr;SS Override
 34294 000070CA 36FF1E[8C00]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 34295                                  
 34296 000070CF 36C706[4205]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 34297 000070D6 E924A6                  	jmp	SYS_RET_OK		; bye with no errors
 34298                                  
 34299                                  	; MSDOS 6.0
 34300                                  ;Extended Open hooks check
 34301                                  ;OpenE2:					;AN000;;EO.
 34302                                  ;	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 34303                                  ;	JNZ	short OpenE		;AN000;;EO. no.
 34304                                  ;	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 34305                                  
 34306                                  ;	Extended Open hooks check
 34307                                  ;
 34308                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 34309                                  
 34310                                  OpenClean:
 34311 000070D9 5B                      	pop	bx			; clean off stack
 34312                                  OpenE:
 34313                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 34314 000070DA C7040000                	mov	word [SI],0
 34315 000070DE 36C536[4605]            	LDS	SI,[ss:PJFN]				;smr;SS Override
 34316 000070E3 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 34317 000070E6 EB02                    	JMP	SHORT OpenCritLeave
 34318                                  
 34319                                  OpenFail:
 34320 000070E8 FB                      	STI
 34321 000070E9 59                      	pop	cx			; Clean stack
 34322                                  OpenCritLeave:
 34323 000070EA 36C706[4205]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 34324                                  
 34325                                  	; MSDOS 6.0
 34326                                  ;; File Tagging DOS 4.00
 34327                                  ;	CMP	[SS:EXTERR],error_Code_Page_Mismatched 
 34328                                  ;				;AN000;;FT. code page mismatch;smr;SS Override
 34329                                  ;	JNZ	short NORERR	  	;AN000;;FT. no
 34330                                  ;	jmp	From_GetSet		;AN000;;FT. yes
 34331                                  ;NORERR: 				;AN000;
 34332                                  ;; File Tagging DOS 4.00
 34333                                  
 34334 000070F1 E915A6                  	jmp	SYS_RET_ERR		; no free, return error
 34335                                  
 34336                                  ; MSDOS 2.11
 34337                                  ;BREAK <$CREAT - creat a new file and open him for input>
 34338                                  ;----------------------------------------------------------------------------
 34339                                  ;   Assembler usage:
 34340                                  ;           LDS     DX, name
 34341                                  ;           MOV     AH, Creat
 34342                                  ;           MOV     CX, access
 34343                                  ;           INT     21h
 34344                                  ;       ; AX now has the handle
 34345                                  ;
 34346                                  ;   Error returns:
 34347                                  ;           AX = error_access_denied
 34348                                  ;              = error_path_not_found
 34349                                  ;              = error_too_many_open_files
 34350                                  ;----------------------------------------------------------------------------
 34351                                  
 34352                                  ; MSDOS 6.0
 34353                                  ;	BREAK <$Creat - create a brand-new file>
 34354                                  ;----------------------------------------------------------------------------
 34355                                  ;
 34356                                  ;**	$Creat - Create a File
 34357                                  ;
 34358                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 34359                                  ;	initial attributes contained in CX
 34360                                  ;
 34361                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 34362                                  ;		(CX) = initial attributes
 34363                                  ;	EXIT	'C' set if error
 34364                                  ;		  (ax) = error code
 34365                                  ;		'C' clear if OK
 34366                                  ;		  (ax) = file handle
 34367                                  ;	USES	all
 34368                                  ;
 34369                                  ;----------------------------------------------------------------------------
 34370                                  
 34371                                  _$CREAT:
 34372 000070F4 51                      	push	cx			; Save attributes on stack
 34373 000070F5 B9[EC36]                	mov	CX,DOS_CREATE		; routine to call
 34374                                  AccessSet:
 34375                                  	;mov	byte [ss:SATTRIB],6
 34376 000070F8 36C606[0805]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 34377                                  	; 10/08/2018
 34378 000070FE E944FF                  	JMP	AccessFile		; use good ol' open
 34379                                  
 34380                                  
 34381                                  ; MSDOS 6.0 (MSDOS 3.3)
 34382                                  ;	BREAK <$CHMOD - change file attributes>
 34383                                  ;----------------------------------------------------------------------------
 34384                                  ;
 34385                                  ;**	$CHMOD - Change File Attributes
 34386                                  ;
 34387                                  ;   Assembler usage:
 34388                                  ;	    LDS     DX, name
 34389                                  ;	    MOV     CX, attributes
 34390                                  ;	    MOV     AL,func (0=get, 1=set)
 34391                                  ;	    INT     21h
 34392                                  ;   Error returns:
 34393                                  ;	    AX = error_path_not_found
 34394                                  ;	    AX = error_access_denied
 34395                                  ;
 34396                                  ;----------------------------------------------------------------------------
 34397                                  
 34398                                  _$CHMOD:
 34399                                  	; 05/08/2018 - Retro DOS v3.0
 34400                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 34401 00007101 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34402 00007104 50                      	push	ax
 34403 00007105 51                      	push	cx			; save function and attributes
 34404 00007106 89D6                    	MOV	SI,DX			; get things in appropriate places
 34405 00007108 E849F9                  	call	TransPathSet		; get correct path
 34406 0000710B 59                      	pop	cx
 34407 0000710C 58                      	pop	ax			; and get function and attrs back
 34408 0000710D 7235                    	JC	short ChModErr		; errors get mapped to path not found
 34409 0000710F 16                      	push	ss			; set up for later possible calls
 34410 00007110 1F                      	pop	ds
 34411 00007111 803E[1505]FF            	CMP	byte [CMETA],-1
 34412 00007116 752C                    	JNZ	short ChModErr
 34413                                  	;mov	byte [SATTRIB],16h
 34414 00007118 C606[0805]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 34415 0000711D 2C01                    	SUB	AL,1			; fast way to discriminate
 34416 0000711F 720B                    	JB	short ChModGet		; 0 -> go get value
 34417 00007121 7417                    	JZ	short ChModSet		; 1 -> go set value
 34418                                  	;mov	byte [EXTERR_LOCUS],1
 34419 00007123 C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 34420                                  	;mov	al,1
 34421 00007128 B001                    	mov	al,error_invalid_function ; bad value
 34422                                  	;jmp	SYS_RET_ERR
 34423 0000712A EB1A                    	jmp	short ChModE	
 34424                                  ChModGet:
 34425 0000712C E8C4C4                  	call	GET_FILE_INFO		; suck out the ol' info
 34426 0000712F 7215                    	JC	short ChModE		; error codes are already set for ret
 34427 00007131 E8D7A4                  	call	Get_User_Stack		; point to user saved vaiables
 34428                                  	;mov	[SI+4],ax
 34429 00007134 894404                  	MOV	[SI+user_env.user_CX],AX  ; return the attributes
 34430 00007137 E9C3A5                  	jmp	SYS_RET_OK		; say sayonara
 34431                                  ChModSet:
 34432 0000713A 89C8                    	MOV	AX,CX			; get attrs in position
 34433 0000713C E815C5                  	call	SET_FILE_ATTRIBUTE	; go set
 34434 0000713F 7205                    	JC	short ChModE		; errors are set
 34435 00007141 E9B9A5                  	jmp	SYS_RET_OK
 34436                                  ChModErr:
 34437                                  	;mov	al, 3
 34438 00007144 B003                    	mov	al,error_path_not_found
 34439                                  ChModE:
 34440 00007146 E9C0A5                  	jmp	SYS_RET_ERR
 34441                                  
 34442                                  ;	BREAK <$UNLINK - delete a file entry>
 34443                                  ;----------------------------------------------------------------------------
 34444                                  ;
 34445                                  ;**	$UNLINK - Delete a File
 34446                                  ;
 34447                                  ;
 34448                                  ;	Assembler usage:
 34449                                  ;	    LDS     DX, name
 34450                                  ;	    IF VIA SERVER DOS CALL
 34451                                  ;	     MOV     CX,SEARCH_ATTRIB
 34452                                  ;	    MOV     AH, Unlink
 34453                                  ;	    INT     21h
 34454                                  ;
 34455                                  ;	ENTRY	(ds:dx) = path name
 34456                                  ;		(cx) = search_attribute, if via server_dos
 34457                                  ;	EXIT	'C' clear if no error
 34458                                  ;		'C' set if error
 34459                                  ;		  (ax) = error code
 34460                                  ;			= error_file_not_found
 34461                                  ;			= error_access_denied
 34462                                  ;
 34463                                  ;----------------------------------------------------------------------------
 34464                                  
 34465                                  _$UNLINK:
 34466 00007149 51                      	push	cx			; Save possible CX input parm
 34467 0000714A 89D6                    	MOV	SI,DX			; Point at input string
 34468 0000714C BF[6003]                	MOV	DI,OPENBUF		; temp spot for path
 34469 0000714F E802F9                  	call	TransPathSet		; go get normalized path
 34470 00007152 59                      	pop	cx
 34471 00007153 72EF                    	JC	short ChModErr		; badly formed path
 34472 00007155 36803E[1505]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 34473 0000715B 750F                    	JNZ	short NotFound
 34474 0000715D 16                      	push	ss
 34475 0000715E 1F                      	pop	ds
 34476                                  	;mov	ch,6
 34477 0000715F B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 34478 00007161 E82201                  	call	SetAttrib
 34479 00007164 E809C1                  	call	DOS_DELETE		; remove that file
 34480 00007167 7205                    	JC	short UnlinkE 		; error is there
 34481 00007169 E991A5                  	jmp	SYS_RET_OK		; okey doksy
 34482                                  NotFound:
 34483                                  	;mov	al, 3
 34484 0000716C B003                    	MOV	AL,error_path_not_found
 34485                                  UnlinkE:
 34486 0000716E E998A5                  	jmp	SYS_RET_ERR		; bye
 34487                                  
 34488                                  ;BREAK <$RENAME - move directory entries around>
 34489                                  ;----------------------------------------------------------------------------
 34490                                  ;
 34491                                  ;   Assembler usage:
 34492                                  ;	    LDS     DX, source
 34493                                  ;	    LES     DI, dest
 34494                                  ;	    IF VIA SERVER DOS CALL
 34495                                  ;	     MOV     CX,SEARCH_ATTRIB
 34496                                  ;	    MOV     AH, Rename
 34497                                  ;	    INT     21h
 34498                                  ;
 34499                                  ;   Error returns:
 34500                                  ;	    AX = error_file_not_found
 34501                                  ;	       = error_not_same_device
 34502                                  ;	       = error_access_denied
 34503                                  ;
 34504                                  ;----------------------------------------------------------------------------
 34505                                  
 34506                                  _$RENAME:
 34507                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34508 00007171 51                      	push	cx
 34509 00007172 1E                      	push	ds
 34510 00007173 52                      	push	dx			; save source and possible CX arg
 34511 00007174 06                      	PUSH	ES
 34512 00007175 1F                      	POP	DS			; move dest to source
 34513 00007176 89FE                    	MOV	SI,DI			; save for offsets
 34514 00007178 BF[E003]                	MOV	DI,RENBUF
 34515 0000717B E8D6F8                  	call	TransPathSet		; munge the paths
 34516 0000717E 36FF36[4A05]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 34517 00007183 368F06[4C05]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 34518 00007188 5E                      	pop	si
 34519 00007189 1F                      	pop	ds
 34520 0000718A 59                      	pop	cx			; get back source and possible CX arg
 34521                                  epjc2:	
 34522 0000718B 72B7                    	JC	short ChModErr		; get old error
 34523 0000718D 36803E[1505]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 34524 00007193 75D7                    	JNZ	short NotFound
 34525 00007195 51                      	push	cx			; Save possible CX arg
 34526 00007196 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34527 00007199 E8B8F8                  	call	TransPathSet		; wham
 34528 0000719C 59                      	pop	cx
 34529 0000719D 72EC                    	JC	short epjc2
 34530 0000719F 16                      	push	ss
 34531 000071A0 1F                      	pop	ds
 34532 000071A1 803E[1505]FF            	CMP	byte [CMETA],-1
 34533 000071A6 72C4                    	JB	short NotFound
 34534                                  
 34535                                  	; MSDOS 6.0
 34536 000071A8 FF36[3A05]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 34537 000071AC FF36[3C05]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 34538 000071B0 BF[6003]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 34539 000071B3 16                      	PUSH	SS			   ;AN000;;MS.
 34540 000071B4 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 34541 000071B5 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 34542                                  rnloop: 				   ;AN000;
 34543 000071B7 E80EF8                  	call	GetCDSFromDrv		   ;AN000;;MS.
 34544 000071BA 7211                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 34545 000071BC E875AD                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 34546 000071BF 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 34547 000071C1 FEC0                    	INC	AL			   ;AN000;;MS.	next
 34548 000071C3 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 34549                                  rnerr:					   ;AN000;
 34550 000071C5 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 34551                                  	;error	error_current_directory    ;AN000;;MS.
 34552 000071C8 B010                    	mov	al,error_current_directory 
 34553 000071CA E93CA5                  	jmp	SYS_RET_ERR
 34554                                  dorn:					   ;AN000;
 34555 000071CD 368F06[3C05]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 34556 000071D2 368F06[3A05]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 34557                                  
 34558 000071D7 16                      	push	ss
 34559 000071D8 1F                      	pop	ds
 34560                                  
 34561                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34562                                  	;mov	ch,16h
 34563 000071D9 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 34564                                  					; rename appropriate files
 34565 000071DB E8A800                  	call	SetAttrib
 34566 000071DE E83AC2                  	call	DOS_RENAME		; do the deed
 34567 000071E1 728B                    	JC	short UnlinkE 		; errors
 34568                                  
 34569 000071E3 E917A5                  	jmp	SYS_RET_OK
 34570                                  
 34571                                  
 34572                                  ; 14/07/2018 - Retro DOS v3.0
 34573                                  ; MSDOS 3.3 (& MSDOS 6.0)
 34574                                  
 34575                                  ;Break <$CreateNewFile - Create a new directory entry>
 34576                                  ;----------------------------------------------------------------------------
 34577                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 34578                                  ;	was no previous directory entry, and fail if a directory entry with
 34579                                  ;	the same name existed previously.
 34580                                  ;
 34581                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 34582                                  ;		CX contains default file attributes
 34583                                  ;   Outputs:	Carry Clear:
 34584                                  ;		    AX has file handle opened for read/write
 34585                                  ;		Carry Set:
 34586                                  ;		    AX has error code
 34587                                  ;   Registers modified: All
 34588                                  ;----------------------------------------------------------------------------
 34589                                  
 34590                                  _$CreateNewFile:
 34591 000071E6 51                      	push	cx			; Save attributes on stack
 34592 000071E7 B9[7D37]                	MOV	CX,DOS_Create_New	; routine to call
 34593 000071EA E90BFF                  	JMP	AccessSet		; use good ol' open
 34594                                  
 34595                                  ;**	BinToAscii - convert a number to a string.
 34596                                  ;----------------------------------------------------------------------------
 34597                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 34598                                  ;	This routine is used to generate temp file names so we don't spend
 34599                                  ;	the time and code needed for a true hex number, we just use
 34600                                  ;	A thorugh O.
 34601                                  ;
 34602                                  ;	ENTRY	(ax) = value
 34603                                  ;		(es:di) = destination
 34604                                  ;	EXIT	(es:di) updated by 4
 34605                                  ;	USES	cx, di, flags
 34606                                  ;----------------------------------------------------------------------------
 34607                                  
 34608                                  ; MSDOS 3.3
 34609                                  ;BinToAscii:
 34610                                  ;	mov     cx,4
 34611                                  ;bta5:
 34612                                  ;	push    cx
 34613                                  ;	mov     cl,4
 34614                                  ;	rol     ax,cl
 34615                                  ;	push    ax
 34616                                  ;	and     al,0Fh
 34617                                  ;	add     al,'0'
 34618                                  ;	cmp     al,'9'
 34619                                  ;	jbe     short bta6
 34620                                  ;	add     al,7
 34621                                  ;bta6: 
 34622                                  ;	stosb
 34623                                  ;	pop     ax
 34624                                  ;	pop     cx
 34625                                  ;	loop    bta5
 34626                                  ;	retn
 34627                                  
 34628                                  ; MSDOS 6.0
 34629                                  BinToAscii:
 34630 000071ED B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 34631                                  bta5:	
 34632 000071F0 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 34633 000071F2 50                      	push	ax			; preserve remainder of digits
 34634 000071F3 240F                    	AND	AL,0Fh			; grab low nibble
 34635 000071F5 0441                    	ADD	AL,'A'			; turn into ascii
 34636 000071F7 AA                      	STOSB				; drop in the character
 34637 000071F8 58                      	pop	ax			; (ax) = shifted number
 34638 000071F9 FECD                    	dec	ch
 34639 000071FB 75F3                    	jnz	short bta5		; process 4 digits
 34640 000071FD C3                      	retn
 34641                                  
 34642                                  ;Break	<$CreateTempFile - create a unique name>
 34643                                  ;----------------------------------------------------------------------------
 34644                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 34645                                  ;	Method used is to get the current time, convert to a name and attempt
 34646                                  ;	a create new.  Repeat until create new succeeds.
 34647                                  ;
 34648                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 34649                                  ;		CX  contains default attributes
 34650                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 34651                                  ;		AX has handle
 34652                                  ;   Registers modified: all
 34653                                  ;----------------------------------------------------------------------------
 34654                                  
 34655                                  _$CreateTempFile:
 34656                                  	;Enter
 34657 000071FE 55                      	push	bp
 34658 000071FF 89E5                    	mov	bp,sp
 34659                                  
 34660                                  	;LocalVar    EndPtr,DWORD
 34661                                  	;LocalVar    FilPtr,DWORD
 34662                                  	;LocalVar    Attr,WORD
 34663                                  
 34664 00007201 83EC0A                  	sub	sp,10
 34665                                  
 34666                                  	;test	cx,0FFD8h
 34667 00007204 F7C1D8FF                	test	CX,~attr_changeable
 34668 00007208 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 34669                                  ;
 34670                                  ; We need this "hook" here to detect these cases (like user sets one both of
 34671                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 34672                                  ; below.  The code loops on error_access_denied, but if one of the non
 34673                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 34674                                  ; infinite because CreateNewFile will fail with access_denied always.  Thus we
 34675                                  ; need to detect these cases before getting to the loop.
 34676                                  ;
 34677                                  	;mov	ax, 5
 34678 0000720A B80500                  	MOV	AX,error_access_denied
 34679 0000720D EB6B                    	JMP	SHORT SETTMPERR
 34680                                  
 34681                                  OKatts:
 34682                                  	;MOV	attr,CX 		; save attribute
 34683 0000720F 894EF6                  	mov     [bp-10],cx
 34684                                  	;MOV	FilPtrL,DX		; pointer to file
 34685 00007212 8956F8                  	mov	[bp-8],dx
 34686                                  	;MOV	FilPtrH,DS
 34687 00007215 8C5EFA                  	mov	[bp-6],ds
 34688                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 34689 00007218 8C5EFE                  	mov	[bp-2],ds
 34690 0000721B 1E                      	PUSH	DS
 34691 0000721C 07                      	POP	ES			; destination for nul search
 34692 0000721D 89D7                    	MOV	DI,DX
 34693 0000721F 89F9                    	MOV	CX,DI
 34694 00007221 F7D9                    	NEG	CX			; number of bytes remaining in segment
 34695                                  	; MSDOS 6.0
 34696 00007223 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 34697 00007225 7501                    	JNZ	short okok		;AN000;MS. no
 34698                                  	;MOV	CX,-1			;AN000;MS.
 34699 00007227 49                      	dec	cx  ; mov cx,-1
 34700                                  	;
 34701                                  okok:					;AN000;
 34702 00007228 31C0                    	XOR	AX,AX			;AN000;
 34703 0000722A F2AE                    	REPNZ	SCASB			;AN000;
 34704                                  					;AN000;
 34705 0000722C 4F                      	DEC	DI			; point back to the null
 34706 0000722D 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 34707 00007231 E818E4                  	call	PATHCHRCMP		; Is it a path separator?
 34708 00007234 7403                    	JZ	short SETENDPTR		; Yes
 34709                                  STOREPTH:
 34710 00007236 B05C                    	MOV	AL,'\'
 34711 00007238 AA                      	STOSB				; Add a path separator (and INC DI)
 34712                                  SETENDPTR:
 34713                                  	;MOV	EndPtrL,DI		; pointer to the tail
 34714 00007239 8856FC                  	mov	[bp-4],dl
 34715                                  CreateLoop:
 34716 0000723C 16                      	push	ss			; let ReadTime see variables
 34717 0000723D 1F                      	pop	ds
 34718 0000723E 55                      	push	bp
 34719 0000723F E89EA6                  	call	READTIME		; go get time
 34720 00007242 5D                      	pop	bp
 34721                                  ;
 34722                                  ; Time is in CX:DX.  Go drop it into the string.
 34723                                  ;
 34724                                  	;les	di,EndPtr		; point to the string
 34725 00007243 C47EFC                  	les	di,[BP-4]
 34726 00007246 89C8                    	mov	ax,cx
 34727 00007248 E8A2FF                  	call	BinToAscii		; store upper word
 34728 0000724B 89D0                    	mov	ax,dx
 34729 0000724D E89DFF                  	call	BinToAscii		; store lower word
 34730 00007250 30C0                    	xor	al,al
 34731 00007252 AA                      	STOSB				; nul terminate
 34732                                  	;LDS	DX,FilPtr		; get name
 34733 00007253 C556F8                  	lds	dx,[bp-8]
 34734                                  	;MOV	CX,Attr 		; get attr
 34735 00007256 8B4EF6                  	mov	cx,[bp-10]
 34736 00007259 55                      	push	bp
 34737 0000725A E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 34738 0000725D 5D                      	pop	bp
 34739 0000725E 731B                    	JNC	short CreateDone	; failed, go try again
 34740                                  ;
 34741                                  ; The operation failed and the error has been mapped in AX.  Grab the extended
 34742                                  ; error and figure out what to do.
 34743                                  ;
 34744                                  	;; MSDOS 3.3			; M049 - start
 34745                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 34746                                  ;;	cmp	al,error_file_exists
 34747                                  ;;	jz	short CreateLoop	; file existed => try with new name
 34748                                  ;;	cmp	al,error_access_denied
 34749                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 34750                                  
 34751                                  	; MSDOS 6.0
 34752                                  	;cmp	al,50h
 34753 00007260 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 34754 00007262 74D8                    	JZ	short CreateLoop	; Y: try again
 34755                                  	;cmp	al,5
 34756 00007264 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 34757 00007266 7512                    	JNZ	short SETTMPERR		; N: Error out
 34758                                  					; Y: Check to see if we got this due
 34759                                  					;    to the network drive. Note that
 34760                                  					;    the redir will set the exterr
 34761                                  					;    to error_cannot_make if this is 
 34762                                  					;    so. 
 34763 00007268 36803E[D202]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 34764                                  					; See if it's REALLY an att mismatch
 34765 0000726E 740A                    	je	short SETTMPERR		; no, network error, stop
 34766                                  ;M070
 34767                                  ; If the user failed on an I24, we do not want to try again
 34768                                  ;
 34769 00007270 36803E[D202]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 34770 00007276 7402                    	je	short SETTMPERR		;yes, do not try again ;M070
 34771                                  
 34772 00007278 EBC2                    	jmp	short CreateLoop	;attr mismatch, try again ;M070
 34773                                  
 34774                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 34775                                  					; M049 - end
 34776                                  SETTMPERR:
 34777 0000727A F9                      	STC
 34778                                  CreateDone:
 34779                                  	;Leave
 34780 0000727B 89EC                    	mov	sp,bp
 34781 0000727D 5D                      	pop	bp
 34782 0000727E 7203                    	JC	short CreateFail
 34783 00007280 E97AA4                  	jmp	SYS_RET_OK		; success!
 34784                                  CreateFail:
 34785 00007283 E983A4                  	jmp	SYS_RET_ERR
 34786                                  
 34787                                  ;
 34788                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 34789                                  ;   (CH) or to the value in CL if the current system call is through
 34790                                  ;   serverdoscall.
 34791                                  ;
 34792                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 34793                                  ;		fSharing == TRUE => set sattrib to CL
 34794                                  ;   Outputs:	none
 34795                                  ;   Registers changed:	CX
 34796                                  
 34797                                  SetAttrib:
 34798 00007286 36F606[0D05]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 34799 0000728C 7502                    	jnz	short Set
 34800 0000728E 88E9                    	mov	cl,ch
 34801                                  Set:
 34802 00007290 36880E[0805]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 34803 00007295 C3                      	retn
 34804                                  
 34805                                  ; 14/07/2018 - Retro DOS v3.0
 34806                                  ; MSDOS 6.0
 34807                                  
 34808                                  ;Break	<Extended_Open- Extended open the file>
 34809                                  ;----------------------------------------------------------------------------
 34810                                  ; Input: AL= 0 reserved  AH=6CH
 34811                                  ;	 BX= mode
 34812                                  ;	 CL= create attribute  CH=search attribute (from server)
 34813                                  ;	 DX= flag
 34814                                  ;	 DS:SI = file name
 34815                                  ;	 ES:DI = parm list
 34816                                  ;			   DD  SET EA list (-1) null
 34817                                  ;			   DW  n  parameters
 34818                                  ;			   DB  type (TTTTTTLL)
 34819                                  ;			   DW  IOMODE
 34820                                  ; Function: Extended Open
 34821                                  ; Output: carry clear
 34822                                  ;		     AX= handle
 34823                                  ;		     CX=1 file opened
 34824                                  ;			2 file created/opened
 34825                                  ;			3 file replaced/opened
 34826                                  ;	  carry set: AX has error code
 34827                                  ;----------------------------------------------------------------------------
 34828                                  
 34829                                  ;_$Extended_Open:			  ;AN000;
 34830                                  ;	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 34831                                  ;	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 34832                                  ;	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 34833                                  ;	TEST	DX,reserved_bits_mask	  ;AN000;EO. reserved bits 0  ?
 34834                                  ;	JNZ	short ext_inval2	  ;AN000;EO. no
 34835                                  ;	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 34836                                  ;	CMP	DL,0			  ;AN000;EO. all fail ?
 34837                                  ;	JZ	short ext_inval2	  ;AN000;EO. yes, error
 34838                                  ;	AND	DL,exists_mask		  ;AN000;EO. get exists action byte
 34839                                  ;	CMP	DL,2			  ;AN000;EO, > 02
 34840                                  ;	JA	short ext_inval2	  ;AN000;EO. yes ,error
 34841                                  ;	AND	AH,not_exists_mask	  ;AN000;EO. get no exists action byte
 34842                                  ;	CMP	AH,10H			  ;AN000;EO. > 10
 34843                                  ;	JA	short ext_inval2	  ;AN000;EO. yes error
 34844                                  ;
 34845                                  ;	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 34846                                  ;	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 34847                                  ;	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 34848                                  ;	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 34849                                  ;	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 34850                                  ;	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 34851                                  ;	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 34852                                  ;	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 34853                                  ;	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 34854                                  ;	MOV	AX,BX			  ;AN000;EO. ax= mode
 34855                                  ;	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 34856                                  ;ext_inval2:				  ;AN000;;EO.
 34857                                  ;	mov	al,error_invalid_function ;AN000;EO.. invalid function
 34858                                  ;	jmp	SYS_RET_ERR
 34859                                  ;error_return:				  ;AN000;EO.
 34860                                  ;	retn				  ;AN000;EO.. return with error
 34861                                  ;goopen2:				  ;AN000;
 34862                                  ;	TEST	BX,int_24_error 	  ;AN000;EO.. disable INT 24 error ?
 34863                                  ;	JZ	short goopen		  ;AN000;EO.. no
 34864                                  ;	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 34865                                  ;goopen:					  ;AN000;
 34866                                  ;	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 34867                                  ;	AND	word [SS:EXTOPEN_FLAG],0FFH  ;AN000;EO.create new ?;smr;SS Override
 34868                                  ;	CMP	word [SS:EXTOPEN_FLAG],ext_exists_fail + ext_nexists_create ;AN000;FT.;smr;SS Override
 34869                                  ;	JNZ	short chknext 		  ;AN000;;EO. no
 34870                                  ;	call	_$CreateNewFile		  ;AN000;;EO. yes
 34871                                  ;	JC	short error_return	  ;AN000;;EO. error
 34872                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 34873                                  ;	JZ	short ok_return2	  ;AN000;;EO. yes
 34874                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened ;AN000;EO. creted/opened;smr;SS Override
 34875                                  ;	JMP	short setXAttr		  ;AN000;;EO. set XAs
 34876                                  ;ok_return2:
 34877                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 34878                                  ;chknext:
 34879                                  ;	TEST	word [SS:EXTOPEN_FLAG],ext_exists_open ;AN000;;EO. exists open;smr;SS Override
 34880                                  ;	JNZ	short exist_open	  ;AN000;;EO. yes
 34881                                  ;	call	_$CREAT			  ;AN000;;EO. must be replace open
 34882                                  ;	JC	short error_return	  ;AN000;;EO. return with error
 34883                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 34884                                  ;	JZ	short ok_return2	  ;AN000;;EO. yes
 34885                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened ;AN000;EO. prsume create/open;smr;SS Override
 34886                                  ;	TEST	byte [SS:EXTOPEN_ON],ext_file_not_exists ;AN000;;EO. file not exists ?;smr;SS Override
 34887                                  ;	JNZ	short setXAttr		  ;AN000;;EO. no
 34888                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_replaced_opened ;AN000;;EO. replaced/opened;smr;SS Override
 34889                                  ;	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 34890                                  ;error_return2:
 34891                                  ;	STC 				  ; Set Carry again to flag error ;AN001;
 34892                                  ;	retn				  ;AN000;;EO. return with error
 34893                                  ;					  ;AN000;
 34894                                  ;exist_open:				  ;AN000;
 34895                                  ;	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 34896                                  ;	jz	short noserver		  ;AN000;;EO. no
 34897                                  ;	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 34898                                  ;noserver:
 34899                                  ;	call	_$Open2			  ;AN000;;EO. do open
 34900                                  ;	JNC	short ext_ok		  ;AN000;;EO.
 34901                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 34902                                  ;	JZ	short error_return2	  ;AN000;;EO. return with error
 34903                                  ;local_extopen:
 34904                                  ;	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 34905                                  ;	JNZ	short error_return2	  ;AN000;;EO. no,
 34906                                  ;	TEST	word [SS:EXTOPEN_FLAG],ext_nexists_create;AN000;;EO. want to fail;smr;SS Override
 34907                                  ;	JNZ	short do_creat		  ;AN000;;EO. yes
 34908                                  ;	JMP	short extexit 		  ;AN000;;EO. yes
 34909                                  ;do_creat:
 34910                                  ;	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 34911                                  ;	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 34912                                  ;	MOV	DX,SI			  ;AN000;;EO.
 34913                                  ;	call	_$CREAT			  ;AN000;;EO. do create
 34914                                  ;	JC	short extexit 		  ;AN000;;EO. error
 34915                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened 
 34916                                  ;					  ;AN000;;EO. is created/opened;smr;SS Override
 34917                                  ;	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 34918                                  ;
 34919                                  ;ext_ok:
 34920                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 34921                                  ;	JZ	short ok_return		  ;AN000;;EO. yes
 34922                                  ;	MOV	[SS:EXTOPEN_FLAG],action_opened ;AN000;;EO.  opened;smr;SS Override
 34923                                  ;setXAttr:
 34924                                  ;	call	Get_User_Stack		  ;AN000;;EO.
 34925                                  ;	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 34926                                  ;	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 34927                                  ;	POP	AX			  ;AN000;;EO.
 34928                                  ;	MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 34929                                  ;
 34930                                  ;ok_return:				  ;AN000;
 34931                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 34932                                  ;
 34933                                  ;extexit2:				  ;AN000; ERROR RECOVERY
 34934                                  ;	POP	BX			  ;AN000;EO. close the handle
 34935                                  ;	PUSH	AX			  ;AN000;EO. save error code from set XA
 34936                                  ;	CMP	word [SS:EXTOPEN_FLAG],action_created_opened 
 34937                                  ;					  ;AN000;EO. from create;smr;SS Override
 34938                                  ;	JNZ	short justopen		  ;AN000;EO.
 34939                                  ;	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 34940                                  ;	LDS	DX,[SI]			  ;AN000;EO.
 34941                                  ;	call	_$UNLINK 		  ;AN000;EO. delete the file
 34942                                  ;	JMP	SHORT reserror		  ;AN000;EO.
 34943                                  ;
 34944                                  ;justopen:				  ;AN000;
 34945                                  ;	call	$CLOSE			  ;AN000;EO. pretend never happend
 34946                                  ;reserror:				  ;AN000;
 34947                                  ;	POP	AX			  ;AN000;EO. restore error code from set XA
 34948                                  ;	JMP	SHORT extexit		  ;AN000;EO.
 34949                                  ;
 34950                                  ;ext_file_unfound:			  ;AN000;
 34951                                  ;	MOV	AX,error_file_not_found   ;AN000;EO.
 34952                                  ;	JMP	SHORT extexit		  ;AN000;EO.
 34953                                  ;ext_inval:				  ;AN000;
 34954                                  ;	MOV	AX,error_invalid_function ;AN000;EO.
 34955                                  ;extexit:
 34956                                  ;	jmp	SYS_RET_ERR		  ;AN000;EO.
 34957                                  
 34958                                  ;============================================================================
 34959                                  ; LOCK.ASM, MSDOS 6.0, 1991
 34960                                  ;============================================================================
 34961                                  ; 14/07/2018 - Retro DOS v3.0
 34962                                  
 34963                                  ;BREAK <$LockOper - Lock Calls>
 34964                                  
 34965                                  ;
 34966                                  ;   Assembler usage:
 34967                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 34968                                  ;	    MOV     CX, OffsetHigh
 34969                                  ;	    MOV     DX, OffsetLow
 34970                                  ;	    MOV     SI, LengthHigh
 34971                                  ;	    MOV     DI, LengthLow
 34972                                  ;	    MOV     AH, LockOper
 34973                                  ;	    MOV     AL, Request
 34974                                  ;	    INT     21h
 34975                                  ;
 34976                                  ;   Error returns:
 34977                                  ;	    AX = error_invalid_handle
 34978                                  ;	       = error_invalid_function
 34979                                  ;	       = error_lock_violation
 34980                                  ;
 34981                                  ;   Assembler usage:
 34982                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 34983                                  ;
 34984                                  ;				    0? lock all
 34985                                  ;				    8? lock write
 34986                                  ;				    ?2 lock multiple
 34987                                  ;				    ?3 unlock multiple
 34988                                  ;				    ?4 lock/read
 34989                                  ;				    ?5 write/unlock
 34990                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 34991                                  ;	    MOV     BX, Handle
 34992                                  ;	    MOV     CX, count or size
 34993                                  ;	    LDS     DX, buffer
 34994                                  ;	    INT     21h
 34995                                  ;
 34996                                  ;   Error returns:
 34997                                  ;	    AX = error_invalid_handle
 34998                                  ;	       = error_invalid_function
 34999                                  ;	       = error_lock_violation
 35000                                  
 35001                                  _$LockOper:
 35002 00007296 3C01                    	CMP	AL,1
 35003 00007298 770C                    	JA	short lock_bad_func
 35004                                  
 35005 0000729A 57                      	PUSH	DI			       ; Save LengthLow
 35006 0000729B E862F5                  	call	SFFromHandle		       ; ES:DI -> SFT
 35007 0000729E 7311                    	JNC	short lock_do 		       ; have valid handle
 35008 000072A0 5F                      	POP	DI			       ; Clean stack
 35009                                  	;mov	al,6
 35010 000072A1 B006                    	mov	al,error_invalid_handle
 35011 000072A3 E963A4                  	jmp	SYS_RET_ERR
 35012                                  
 35013                                  lock_bad_func:
 35014                                  	;mov	byte [ss:EXTERR_LOCUS],1
 35015 000072A6 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 35016                                  	;mov	al,1
 35017 000072AC B001                    	mov	al,error_invalid_function
 35018 000072AE E958A4                  	jmp	SYS_RET_ERR
 35019                                  
 35020                                  	; MSDOS 6.0 
 35021                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 35022                                  ; Dead code deleted, MD, 23 Mar 90
 35023                                  
 35024                                  lock_do:
 35025                                  	; MSDOS 3.3
 35026 000072B1 08C0                    	or	al,al
 35027 000072B3 58                      	pop	ax
 35028 000072B4 741E                    	jz	short DOS_Lock
 35029                                  DOS_Unlock:
 35030                                   	;test	word [es:di+5],8000h
 35031 000072B6 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35032 000072BC 7409                    	JZ	short LOCAL_UNLOCK
 35033 000072BE 50                      	push    ax
 35034 000072BF B80B11                  	mov     ax,110Bh
 35035 000072C2 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 35036                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35037                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 35038                                  			; SFT DPB field -> DPB of drive containing file
 35039                                  			; Return: CF set error
 35040 000072C4 5B                      	pop     bx
 35041 000072C5 EB05                    	jmp     short ValChk
 35042                                  
 35043                                  LOCAL_UNLOCK:
 35044 000072C7 36FF1E[7800]            	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 35045                                  ValChk:
 35046 000072CC 7303                    	JNC	short Lock_OK
 35047                                  lockerror:
 35048 000072CE E938A4                  	jmp	SYS_RET_ERR
 35049                                  Lock_OK:
 35050                                  	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 35051 000072D1 E929A4                  	jmp	SYS_RET_OK
 35052                                  DOS_Lock:
 35053                                  	;test	word [es:di+5],8000h
 35054 000072D4 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35055 000072DA 7407                    	JZ	short LOCAL_LOCK
 35056                                  	;CallInstall NET_XLock,MultNET,10
 35057 000072DC B80A11                  	mov     ax, 110Ah
 35058 000072DF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 35059                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35060                                  			; STACK: WORD low word of size, ES:DI -> SFT
 35061                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 35062                                  			; Return: CF set error
 35063 000072E1 EBE9                    	JMP	short ValChk
 35064                                  
 35065                                  LOCAL_LOCK:
 35066 000072E3 36FF1E[7400]            	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 35067 000072E8 EBE2                    	JMP	short ValChk
 35068                                  
 35069                                  ;lock_do:
 35070                                  ;	; MSDOS 6.0
 35071                                  ;	MOV	BX,AX				; save AX
 35072                                  ;	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 35073                                  ;	MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 35074                                  ;	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 35075                                  ;	POP	CX				; get low length
 35076                                  ;	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 35077                                  ;	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 35078                                  ;	MOV	CX,1				; one range
 35079                                  ;
 35080                                  ;;	PUSH	CS				;
 35081                                  ;;	POP	DS				; DS:DX points to
 35082                                  ;
 35083                                  ;	push	ss
 35084                                  ;	pop	ds
 35085                                  ;
 35086                                  ;	MOV	DX,BP				;   Lock_Buffer
 35087                                  ;	TEST	AL,Unlock_all			; function 1
 35088                                  ;	JNZ	short DOS_Unlock		; yes
 35089                                  ;	JMP	short DOS_Lock			; function 0
 35090                                  ;
 35091                                  ;DOS_Unlock:
 35092                                  ;	;test	word [es:di+5],8000h
 35093                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35094                                  ;	JZ	short LOCAL_UNLOCK
 35095                                  ;	;CallInstall Net_Xlock,MultNET,10
 35096                                  ;	mov     ax, 110Bh
 35097                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 35098                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35099                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 35100                                  ;			; SFT DPB field -> DPB of drive containing file
 35101                                  ;			; Return: CF set error
 35102                                  ;
 35103                                  ;	JMP	SHORT ValChk
 35104                                  ;LOCAL_UNLOCK:
 35105                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 35106                                  ;ValChk:
 35107                                  ;	JNC	short Lock_OK
 35108                                  ;lockerror:
 35109                                  ;	jmp	SYS_RET_ERR
 35110                                  ;Lock_OK:
 35111                                  ;	MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 35112                                  ;	jmp	SYS_RET_OK
 35113                                  ;DOS_Lock:
 35114                                  ;	;test	word [es:di+5],8000h
 35115                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35116                                  ;	JZ	short LOCAL_LOCK
 35117                                  ;	;CallInstall NET_XLock,MultNET,10
 35118                                  ;	mov     ax,110Ah
 35119                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 35120                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35121                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 35122                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 35123                                  ;			; Return: CF set error
 35124                                  ;	JMP	short ValChk
 35125                                  ;
 35126                                  ;LOCAL_LOCK:
 35127                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 35128                                  ;	JMP	short ValChk
 35129                                  
 35130                                  ; 14/07/2018 - Retro DOS v3.0
 35131                                  ; LOC_CHECK
 35132                                  ;MSDOS6.0 (& MSDOS3.3)
 35133                                  
 35134                                  ; Inputs:
 35135                                  ;	Outputs of SETUP
 35136                                  ;	[USER_ID] Set
 35137                                  ;	[PROC_ID] Set
 35138                                  ; Function:
 35139                                  ;	Check for lock violations on local I/O
 35140                                  ;	Retries are attempted with sleeps in between
 35141                                  ; Outputs:
 35142                                  ;    Carry clear
 35143                                  ;	Operation is OK
 35144                                  ;    Carry set
 35145                                  ;	A lock violation detected
 35146                                  ; Outputs of SETUP preserved
 35147                                  
 35148                                  LOCK_CHECK:
 35149 000072EA 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 35150                                  LockRetry:
 35151 000072EE 53                      	push	bx		; save regs
 35152                                  	;push	ax ; MSDOS 6.0
 35153                                  	;;MSDOS 3.3
 35154                                  	;;Call	far [JShare+(8*4)]
 35155 000072EF 36FF1E[7C00]            	Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 35156                                  	;pop	ax ; MSDOS 6.0
 35157 000072F4 5B                      	pop	bx		; restrore regs
 35158 000072F5 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 35159                                  LockN:
 35160 000072F7 E88FAC                  	call	Idle		; wait a while
 35161 000072FA 4B                      	DEC	BX		; remember a retry
 35162 000072FB 75F1                    	JNZ	short LockRetry	; more retries left...
 35163 000072FD F9                      	STC
 35164                                  lc_ret_label:
 35165 000072FE C3                      	retn
 35166                                  
 35167                                  ; 14/07/2018 - Retro DOS v3.0
 35168                                  ; LOCK_VIOLATION
 35169                                  ;MSDOS6.0 (& MSDOS3.3)
 35170                                  
 35171                                  ; Inputs:
 35172                                  ;	[THISDPB] set
 35173                                  ;	[READOP] indicates whether error on read or write
 35174                                  ; Function:
 35175                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 35176                                  ; Outputs:
 35177                                  ;	Carry set if user says FAIL, causes error_lock_violation
 35178                                  ;	Carry clear if user wants a retry
 35179                                  ;
 35180                                  ; DS, ES, DI, CX preserved, others destroyed
 35181                                  
 35182                                  LOCK_VIOLATION:
 35183 000072FF 1E                      	PUSH	DS
 35184 00007300 06                      	PUSH	ES
 35185 00007301 57                      	PUSH	DI
 35186 00007302 51                      	PUSH	CX
 35187                                  	;mov	ax,21h
 35188 00007303 B82100                  	MOV	AX,error_lock_violation
 35189                                  	;mov	byte [ALLOWED],18h
 35190 00007306 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 35191 0000730B C42E[2405]              	LES	BP,[THISDPB]
 35192 0000730F BF0100                  	MOV	DI,1		; Fake some registers
 35193 00007312 89F9                    	MOV	CX,DI
 35194                                  	;mov	dx,[es:bp+11]
 35195 00007314 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 35196 00007318 E831E5                  	call	HARDERR
 35197 0000731B 59                      	POP	CX
 35198 0000731C 5F                      	POP	DI
 35199 0000731D 07                      	POP	ES
 35200 0000731E 1F                      	POP	DS
 35201 0000731F 3C01                    	CMP	AL,1
 35202 00007321 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 35203 00007323 F9                      	STC
 35204 00007324 C3                      	retn
 35205                                  
 35206                                  ; 14/07/2018 - Retro DOS v3.0
 35207                                  
 35208                                  ;	do a retz to return error
 35209                                  
 35210                                  CheckShare:
 35211                                  	; MSDOS 6.0
 35212                                  	;push	ds			;smr;
 35213                                  	;;getdseg <ds>			; ds -> dosdata
 35214                                  	;push	cs
 35215                                  	;pop	ds
 35216                                  	;CMP	byte [fShare],0
 35217                                  	;pop	ds			;smr;
 35218                                  	;retn
 35219                                  	
 35220                                  	; MSDOS 3.3
 35221 00007325 2E803E[B102]00          	cmp	byte [cs:fShare],0
 35222 0000732B C3                      	retn
 35223                                  
 35224                                  ;============================================================================
 35225                                  ; SHARE.ASM, MSDOS 6.0, 1991
 35226                                  ;============================================================================
 35227                                  ; 14/07/2018 - Retro DOS v3.0
 35228                                  
 35229                                  ; SHARE_CHECK
 35230                                  
 35231                                  ; Inputs:
 35232                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 35233                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 35234                                  ;       [WFP_START] has full path of name
 35235                                  ;       [USER_ID] Set
 35236                                  ;       [PROC_ID] Set
 35237                                  ; Function:
 35238                                  ;       Check for sharing violations on local file/device access
 35239                                  ; Outputs:
 35240                                  ;    Carry clear
 35241                                  ;       Sharing approved
 35242                                  ;    Carry set
 35243                                  ;       A sharing violation detected
 35244                                  ;           AX is error code
 35245                                  ; USES    ALL but DS
 35246                                  
 35247                                  SHARE_CHECK:
 35248                                  	;call	far [JShare+(1*4)] 	; MSDOS 3.3
 35249 0000732C 36FF1E[6000]            	call	far [ss:JShare+(1*4)]	; 1 = MFT_Enter
 35250                                  shchk_retn:
 35251 00007331 C3                      	retn
 35252                                  
 35253                                  ; SHARE_VIOLATION
 35254                                  
 35255                                  ; Inputs:
 35256                                  ;       [THISDPB] Set
 35257                                  ;       AX has error code
 35258                                  ; Function:
 35259                                  ;       Handle Sharing errors
 35260                                  ; Outputs:
 35261                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 35262                                  ;       Carry clear if user wants a retry
 35263                                  ;
 35264                                  ; DS, ES, DI preserved, others destroyed
 35265                                  
 35266                                  SHARE_VIOLATION:
 35267 00007332 1E                      	PUSH    DS
 35268 00007333 06                      	PUSH	ES
 35269 00007334 57                      	PUSH    DI
 35270 00007335 C606[1005]00            	MOV     byte [READOP],0		; All share errors are reading
 35271                                  	;mov	byte [ALLOWED],18h
 35272 0000733A C606[F702]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 35273 0000733F C42E[2405]              	LES     BP,[THISDPB]
 35274 00007343 BF0100                  	MOV     DI,1			; Fake some registers
 35275 00007346 89F9                    	MOV     CX,DI
 35276                                  	;mov	dx,[es:bp+16]
 35277 00007348 268B5610                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 35278 0000734C E8FDE4                  	call	HARDERR
 35279 0000734F 5F                      	POP     DI
 35280 00007350 07                      	POP	ES
 35281 00007351 1F                      	POP     DS
 35282 00007352 3C01                    	CMP     AL,1
 35283 00007354 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 35284 00007356 F9                      	STC
 35285 00007357 C3                      	retn
 35286                                  
 35287                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID.  This does
 35288                                  ;       NOT perform a close, it merely asserts that the sharing information
 35289                                  ;       for the SFT/UID/PID may be safely released.
 35290                                  ;
 35291                                  ;   Inputs:     ES:DI points to an SFT
 35292                                  ;   Outputs:    None
 35293                                  ;   Registers modified: all except DS,ES,DI
 35294                                  
 35295                                  ShareEnd:
 35296                                  	;call	far [JShare+(2*4)]	; MSDOS 3.3
 35297 00007358 36FF1E[6400]            	call	far [ss:JShare+(2*4)]	; 2 = MFTClose
 35298 0000735D C3                      	retn
 35299                                  
 35300                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 35301                                  
 35302                                  ;
 35303                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set.  If
 35304                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 35305                                  ;
 35306                                  ;   Inputs:     ThisSFT points to the SFT
 35307                                  ;               WFP_Start points to the WFP
 35308                                  ;   Outputs:    Carry clear => successful entry
 35309                                  ;               Carry set => failed system call
 35310                                  ;   Registers modified: all
 35311                                  
 35312                                  ShareEnter:
 35313 0000735E 51                      	push	cx
 35314                                  retry:
 35315 0000735F 8B0E[1A00]              	mov     cx,[RetryCount]
 35316                                  attempt:
 35317 00007363 C43E[3605]              	les     di,[THISSFT]		; grab sft
 35318 00007367 31C0                    	XOR     AX,AX
 35319                                   	;mov	[es:di+51],ax
 35320 00007369 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 35321 0000736D 51                      	push	cx
 35322 0000736E E8BBFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 35323 00007371 59                      	pop	cx
 35324 00007372 730A                    	jnc	short done		; success, let the user see this
 35325 00007374 E812AC                  	call	Idle                    ; wait a while
 35326 00007377 E2EA                    	loop    attempt                 ; go back for another attempt
 35327 00007379 E8B6FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 35328 0000737C 73E1                    	jnc	short retry		; user said to retry, go do it
 35329                                  done:
 35330 0000737E 59                      	pop	cx
 35331 0000737F C3                      	retn
 35332                                  
 35333                                  ;----------------------------------------------------------------------------
 35334                                  
 35335                                  ;align 2 ; 05/09/2018 (Error!)
 35336                                  
 35337                                  align 16 ; 08/09/2018 (OK.)
 35338                                  
 35339                                  ; 06/08/2018 - Retro DOS v3.0
 35340                                  
 35341                                  ;============================================================================
 35342                                  ; MSINIT.ASM
 35343                                  ;============================================================================
 35344                                  ;
 35345                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 35346                                  ;
 35347                                  	; 15/07/2018 - RetroDOS v3.0
 35348                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 35349                                  
 35350                                  SYSBUF:
 35351                                  IRETT:
 35352 00007380 CF                      	iret
 35353                                  
 35354                                  	; 07/07/2018 - Retro DOS v3.0
 35355                                  	; Retro DOS v2.0 - 03/03/2018
 35356                                  DOSINIT:
 35357                                  	; Far call from SYSINIT
 35358                                  	; DX = Memory size in paragraphs
 35359                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 35360                                  	;	  (Retro DOS v2.0, 16/03/2018)
 35361 00007381 FA                              CLI
 35362 00007382 FC                              CLD
 35363 00007383 2E8916[F202]                    MOV     [CS:ENDMEM],DX
 35364 00007388 2E8926[6804]                    MOV     [CS:INITSP],SP
 35365 0000738D 2E8C16[6A04]                    MOV     [CS:INITSS],SS
 35366 00007392 8CC8                            MOV     AX,CS
 35367 00007394 8ED0                            MOV     SS,AX
 35368 00007396 BC[8476]                        MOV     SP,INITSTACK
 35369                                  	; 08/08/2018
 35370 00007399 368C1E[4A00]            	MOV     [SS:NULDEV+2],DS
 35371 0000739E 368936[4800]                    MOV     [SS:NULDEV],SI	; DS:SI Points to CONSOLE Device
 35372                                  	; 15/07/2018
 35373                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 35374                                  	; (Set INT 2Ah handler address to an 'IRET')
 35375 000073A3 1E                      	push    ds
 35376 000073A4 31C0                    	xor     ax,ax
 35377 000073A6 8ED8                    	mov     ds,ax
 35378 000073A8 B8[8073]                	mov     ax,IRETT
 35379 000073AB A3A800                  	mov     [2Ah*4],ax ; 00A8h
 35380 000073AE 8CC8                    	mov     ax,cs
 35381 000073B0 A3AA00                  	mov     [(2Ah*4)+2],ax ; 00AAh
 35382 000073B3 1F                      	pop     ds
 35383                                  	;
 35384 000073B4 E81C02                          CALL    CHARINIT	; initialize console driver
 35385                                  
 35386 000073B7 56                              PUSH	SI		; save pointer to header	
 35387 000073B8 0E                      	PUSH	CS
 35388 000073B9 07                              POP	ES
 35389                                          ; 07/07/2018
 35390 000073BA BF[9E00]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 35391 000073BD B80300                          MOV     AX,3
 35392 000073C0 AB                              STOSW           	; Refcount
 35393 000073C1 FEC8                            DEC     AL
 35394 000073C3 AB                              STOSW           	; Access rd/wr, compatibility
 35395 000073C4 30C0                            XOR     AL,AL
 35396 000073C6 AA                              STOSB           	; attribute
 35397                                  	;mov	al,0C3h
 35398 000073C7 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 35399 000073C9 AB                      	STOSw			; flags
 35400 000073CA 89F0                            mov	ax,si
 35401 000073CC AB                              stosw			; device pointer in devptr	
 35402 000073CD 8CD8                            mov	ax,ds
 35403 000073CF AB                      	stosw
 35404 000073D0 31C0                    	xor	ax,ax	; 0
 35405 000073D2 AB                      	stosw			; firclus
 35406 000073D3 AB                      	stosw			; time
 35407 000073D4 AB                      	stosw			; date
 35408 000073D5 48                      	dec	ax	; -1
 35409 000073D6 AB                      	stosw			; size
 35410 000073D7 AB                      	stosw
 35411 000073D8 40                      	inc	ax	; 0
 35412 000073D9 AB                      	stosw			; position
 35413 000073DA AB                      	stosw
 35414                                  	;add	di,7
 35415 000073DB 83C707                  	add	di,SF_ENTRY.sf_name - SF_ENTRY.sf_cluspos
 35416                                  				; point at name
 35417                                  	;add	si,10
 35418 000073DE 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 35419                                  				; point to name
 35420 000073E1 B90400                  	mov	cx,4
 35421 000073E4 F3A5                    	rep	movsw		; name
 35422 000073E6 B103                    	mov	cl,3
 35423 000073E8 B020                    	mov	al," "
 35424 000073EA F3AA                    	rep	stosb		; extension
 35425 000073EC 5E                      	POP	SI		; get back pointer to header
 35426                                  
 35427                                  				; mark device as CON I/O
 35428                                  	; 15/07/2018
 35429                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 35430 000073ED 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 35431                                  	; 12/03/2018
 35432 000073F1 368936[3200]            	MOV     [SS:BCON],SI
 35433 000073F6 368C1E[3400]                    MOV     [SS:BCON+2],DS
 35434                                  
 35435                                  CHAR_INIT_LOOP:
 35436 000073FB C534                            LDS     SI,[SI]				; AUX device
 35437 000073FD E8D301                          CALL    CHARINIT
 35438                                         	;15/07/2018
 35439                                  	;test	byte [SI+4],8
 35440 00007400 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 35441 00007404 74F5                            JZ      SHORT CHAR_INIT_LOOP
 35442                                  	; 12/03/2018
 35443 00007406 368936[2E00]                    MOV     [SS:BCLOCK],SI
 35444 0000740B 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 35445 00007410 BD[8676]                        MOV     BP,MEMSTRT			; ES:BP points to DPB
 35446                                  PERDRV:
 35447                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 35448 00007413 C534                            LDS     SI,[SI]				; Next device
 35449 00007415 83FEFF                          CMP     SI,-1
 35450 00007418 7468                    	JZ      SHORT CONTINIT
 35451                                  
 35452 0000741A E8B601                          CALL    CHARINIT
 35453                                  
 35454                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 35455                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 35456                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 35457                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 35458                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 35459                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 35460                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 35461                                  
 35462                                          ; 15/07/2018
 35463                                  	;test	word [SI+4],8000h		; DEVTYP
 35464 0000741D F744040080                      TEST    word [SI+SYSDEV.ATT],DEVTYP
 35465 00007422 75EF                    	JNZ     SHORT PERDRV			; Skip any other character devs
 35466                                  
 35467 00007424 368A0E[1303]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 35468 00007429 30ED                    	XOR     CH,CH
 35469                                          ; 07/07/2018
 35470                                  	;MOV	[SI+10],CL		; Number of units in name field
 35471 0000742B 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 35472 0000742E 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 35473 00007433 30F6                    	XOR     DH,DH
 35474 00007435 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 35475 0000743A 1E                      	PUSH    DS
 35476 0000743B 56                              PUSH    SI
 35477 0000743C 36C51E[1803]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 35478                                  PERUNIT:
 35479 00007441 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 35480 00007443 43                              INC     BX
 35481 00007444 43                              INC     BX                      ; On to next BPB
 35482                                  	;07/07/2018
 35483                                          ;mov	[ES:BP+DPB.DRIVE],dl
 35484 00007445 26885600                	MOV     [ES:BP],DL
 35485                                  	;MOV	[ES:BP+1],DH
 35486 00007449 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 35487 0000744D 53                              PUSH    BX
 35488 0000744E 51                              PUSH    CX
 35489 0000744F 52                              PUSH    DX
 35490                                  
 35491                                          ;invoke	$SETDPB
 35492 00007450 E839A9                          CALL	_$SETDPB
 35493                                  
 35494                                  	; 07/07/2018
 35495                                  	;MOV	AX,[ES:BP+2]
 35496 00007453 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 35497                                          ; 12/03/2018
 35498 00007457 363B06[3600]            	CMP	AX,[SS:MAXSEC]
 35499 0000745C 7604                    	JBE     SHORT NOTMAX
 35500 0000745E 36A3[3600]              	MOV	[SS:MAXSEC],AX
 35501                                  NOTMAX:
 35502 00007462 5A                              POP     DX
 35503 00007463 59                              POP     CX
 35504 00007464 5B                              POP     BX
 35505 00007465 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 35506 00007467 5E                              POP     SI
 35507 00007468 1F                              POP     DS
 35508                                  					; ds:si -> device header
 35509                                  					; store it in the corresponding dpb
 35510                                  	; 07/07/2018
 35511                                          ;MOV	[ES:BP+18],SI
 35512 00007469 26897612                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 35513                                          ;MOV	[ES:BP+20],DS
 35514 0000746D 268C5E14                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 35515                                  
 35516 00007471 1E                              PUSH    DS			; save pointer to device header
 35517 00007472 56                              PUSH    SI
 35518 00007473 FEC6                            INC     DH			; inc unit #
 35519 00007475 FEC2                            INC     DL			; inc drive #
 35520 00007477 8ED8                            MOV     DS,AX			; restore segment of BPB array
 35521                                          ;add	bp,32 ;15/07/2018
 35522 00007479 83C520                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 35523 0000747C E2C3                    	LOOP    PERUNIT			; process all units in each driver
 35524                                          
 35525 0000747E 5E                      	POP     SI			; restore pointer to device header
 35526 0000747F 1F                              POP     DS
 35527 00007480 EB91                    	JMP	SHORT PERDRV		; process all drivers in chain
 35528                                  
 35529                                  CONTINIT:
 35530 00007482 0E                              PUSH    CS
 35531 00007483 1F                              POP     DS
 35532                                  ; Calculate true address of buffers, FATs, free space
 35533 00007484 89EF                            MOV     DI,BP           ; First byte after current DPBs
 35534 00007486 8B2E[3600]                      MOV     BP,[MAXSEC]
 35535 0000748A B8[8073]                        MOV     AX,SYSBUF	; = IRETT (15/07/2018)
 35536                                          ; 07/07/2018
 35537                                  	;MOV	[BUFFSTRT],AX
 35538 0000748D 01E8                            ADD     AX,BP           ; One I/O buffer
 35539 0000748F 83C010                          ADD     AX,BUFINSIZ ; = 16
 35540 00007492 A3[2600]                        MOV     [DPBHEAD],AX	; True start of DPBs
 35541 00007495 89C2                            MOV     DX,AX
 35542 00007497 81EA[8073]                      SUB     DX,SYSBUF	; = IRETT (15/07/2018)
 35543 0000749B 89D5                            MOV     BP,DX
 35544 0000749D 01FD                            ADD     BP,DI           ; Allocate buffer space
 35545                                  	;sub	bp,918 ; = ADJFAC for current DOSINIT (07/07/2018)
 35546 0000749F 81ED0603                        SUB     BP,ADJFAC       ; True address of free memory
 35547 000074A3 55                              PUSH    BP ; ###		
 35548 000074A4 BF[8676]                        MOV     DI,MEMSTRT	; Current start of DPBs
 35549                                  	;add	di,24
 35550 000074A7 83C718                          ADD     DI,DPB.NEXT_DPB	; Point at dpb.next_dpb field
 35551 000074AA 8A0E[4600]                      MOV     CL,[NUMIO]
 35552 000074AE 30ED                            XOR     CH,CH
 35553                                  TRUEDPBAD:
 35554                                  	;add	ax,32
 35555 000074B0 83C020                          ADD     AX,DPBSIZ       ; Compute address of next DPB
 35556 000074B3 AB                              STOSW                   ; Set the link to next DPB
 35557 000074B4 83C71E                          ADD     DI,DPBSIZ-2     ; Point at next address
 35558 000074B7 E2F7                            LOOP    TRUEDPBAD
 35559 000074B9 83EF20                          SUB     DI,DPBSIZ       ; Point at last dpb.next_dpb field
 35560 000074BC B8FFFF                          MOV     AX,-1
 35561 000074BF AB                              STOSW                   ; End of list
 35562 000074C0 83C50F                          ADD     BP,15           ; True start of free space (round up to segment)
 35563                                  	; 15/07/2018
 35564                                  	;MOV	CL,4
 35565                                          ;SHR	BP,CL           ; Number of segments for DOS resources
 35566 000074C3 D1DD                            rcr	bp,1
 35567 000074C5 B103                    	mov	cl,3
 35568 000074C7 D3ED                    	shr	bp,cl
 35569                                  	;
 35570 000074C9 8CCA                    	MOV     DX,CS
 35571 000074CB 01EA                            ADD     DX,BP           ; First free segment
 35572                                  	
 35573                                  	; 06/07/2019
 35574                                  	;MOV	BX,15 ; 0Fh
 35575                                  	;MOV	CX,[ENDMEM]
 35576                                  
 35577 000074CD 8CCD                            MOV     BP,CS
 35578                                  
 35579                                  ; BP has segment of DOS (whether to load high or run in place)
 35580                                  ; DX has program segment (whether after DOS or overlaying DOS)
 35581                                  ; CX has size of memory in paragraphs (reduced by DOS size if HIGHMEM)
 35582                                          
 35583                                  	;MOV	[ENDMEM],CX ; 06/07/2019
 35584                                          
 35585 000074CF 8EC5                    	MOV     ES,BP
 35586 000074D1 268C06[4A03]                    MOV     [ES:DSKCHRET+3],ES ; mov [ES:DOSEG_INIT],es
 35587 000074D6 31C0                            XOR     AX,AX
 35588 000074D8 8ED8                            MOV     DS,AX
 35589 000074DA 8EC0                            MOV     ES,AX
 35590                                  	;mov	di,82h 
 35591 000074DC BF8200                          MOV     DI,INTBASE+2
 35592                                  	; 15/07/2018
 35593 000074DF 89E8                            MOV     AX,BP
 35594                                  	; Set INT 0 (divide by zero) handler
 35595 000074E1 C7060000[E557]          	mov     word [0],DIVOV
 35596 000074E7 A30200                  	mov     word [2],ax  ; = cs
 35597                                  	; Set INT 20h to INT 28h handler segments 
 35598                                  	;mov	cx,17
 35599 000074EA B111                    	mov	cl,17 ; 06/07/2019
 35600 000074EC F3AB                    	rep	stosw
 35601                                  	; DI points to INT 29h vector, offset
 35602 000074EE 83C706                  	add	di,6 
 35603                                  	; DI points to INT 2Ah vector, segment
 35604                                  	;Set  INT 2Ah to INT 3Fh handler segments		
 35605                                  	;mov	cx,43
 35606 000074F1 B12B                    	mov	cl,43 ; 06/07/2019
 35607                                  	
 35608 000074F3 F3AB                    	rep	stosw
 35609                                  	; DI points to INT 40h vector, segment
 35610 000074F5 BF8000                  	mov	di,80h
 35611                                  	; Set INT 20h to INT 28h vectors to their default handler offsets
 35612 000074F8 B8[9114]                	mov	ax,_IRET
 35613                                  	;mov	cx,9
 35614 000074FB B109                    	mov	cl,9 ; 06/07/2019
 35615                                  iset1:
 35616 000074FD AB                      	stosw
 35617 000074FE 83C702                  	add	di,2
 35618 00007501 E2FA                    	loop	iset1
 35619 00007503 83C704                  	add	di,4
 35620                                  	; Set INT 2Ah to INT 3Fh vectors to their default handler offsets
 35621                                  	;mov	cx,22
 35622 00007506 B116                    	mov	cl,22 ; 06/07/2019
 35623                                  iset2:
 35624 00007508 AB                      	stosw
 35625 00007509 83C702                  	add	di,2
 35626 0000750C E2FA                    	loop	iset2
 35627                                  	
 35628 0000750E 89E8                    	mov	ax,bp
 35629                                  	; Set	INT 2Fh handler offset to INT2F
 35630 00007510 C706BC00[C117]          	mov	word [2Fh*4],INT2F  ; 00BCh
 35631                                  
 35632                                  	; set up entry point call at vectors 30-31h
 35633                                  
 35634 00007516 C606C000EA                      MOV     BYTE [ENTRYPOINT],mi_Long_JMP
 35635 0000751B C706C100[9214]                  MOV     WORD [ENTRYPOINT+1],CALL_ENTRY
 35636 00007521 A3C300                          MOV    [ENTRYPOINT+3],AX
 35637                                  
 35638                                  	; Set	INT 20h, 21h, 22h, 23h handler offsets
 35639 00007524 C7068000[8B14]                  MOV     WORD [addr_int_abort],QUIT
 35640 0000752A C7068400[AA14]                  MOV     WORD [addr_int_command],COMMAND
 35641 00007530 C70688000001                    MOV     WORD [addr_int_terminate],100H
 35642 00007536 89168A00                        MOV     [addr_int_terminate+2],DX
 35643                                  	; 15/07/2018 - Retro DOS v3.0
 35644 0000753A C7069400[7316]                  MOV     WORD [addr_int_disk_read],ABSDRD   ; INT 25h
 35645 00007540 C7069800[B616]                  MOV     WORD [addr_int_disk_write],ABSDWRT ; INT 26h
 35646 00007546 C7069C00[9A64]                  MOV     WORD [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 35647                                  
 35648                                  	; 15/07/2018
 35649                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 35650 0000754C 0E                      	push	cs
 35651 0000754D 1F                      	pop	ds
 35652 0000754E 0E                      	push	cs
 35653 0000754F 07                      	pop	es
 35654                                  	; initialize the jump table for the sharer..
 35655                                  	;	(MSDOS 6.0, MSINIT.ASM, 1991, "patch_misc_segments")
 35656                                  	; MSDOS 3.3
 35657                                  	; (set JSharer jump table segments)
 35658 00007550 BF[5C00]                	mov	di,JShare
 35659 00007553 8CC8                    	mov	ax,cs
 35660 00007555 B90F00                  	mov	cx,15
 35661                                  iset3:
 35662 00007558 83C702                  	add	di,2
 35663 0000755B AB                      	stosw
 35664 0000755C E2FA                    	loop	iset3
 35665                                  
 35666                                  	; MSDOS 2.11, MSDOS 3.3
 35667 0000755E B8[5803]                        MOV     AX,INITBLOCK
 35668 00007561 83C00F                          ADD	AX,0Fh		; round to a paragraph
 35669 00007564 B104                            MOV     CL,4
 35670 00007566 D3E8                            SHR     AX,CL
 35671 00007568 8CDF                            MOV     DI,DS
 35672 0000756A 01C7                            ADD     DI,AX
 35673 0000756C 47                              INC     DI
 35674 0000756D 893E[DE02]                      MOV     [CurrentPDB],DI
 35675 00007571 55                              PUSH    BP ; ##
 35676 00007572 52                              PUSH    DX ; #		; Save COMMAND address
 35677 00007573 A1[F202]                        MOV     AX,[ENDMEM]
 35678 00007576 89FA                            MOV     DX,DI
 35679                                  
 35680                                          ;invoke	SETMEM          ; Basic Header
 35681 00007578 E844A9                  	CALL	SETMEM
 35682 0000757B 0E                              PUSH	CS
 35683 0000757C 1F                              POP	DS
 35684                                  	;mov	di,24
 35685 0000757D BF1800                          MOV     DI,PDB.JFN_TABLE
 35686 00007580 31C0                            XOR     AX,AX
 35687 00007582 AB                              STOSW
 35688 00007583 AA                              STOSB                   ; 0,1 and 2 are CON device
 35689 00007584 B0FF                            MOV     AL,0FFH
 35690                                  	;mov	cx,17
 35691                                  	;MOV     CX,FILPERPROC - 3 ; 17
 35692 00007586 B111                    	mov	cl,FILPERPROC-3 ; 06/07/2019
 35693 00007588 F3AA                            REP     STOSB           ; Rest are unused
 35694 0000758A 0E                              PUSH	CS
 35695 0000758B 07                              POP	ES
 35696 0000758C 8C1E[2C00]                      MOV     [SFT_ADDR+2],DS	; Must be set to print messages
 35697                                  
 35698                                  	; 15/07/2018 - Retro DOS v3.0
 35699                                  	; MSDOS 3.3
 35700                                  	; (set country cdpg table segments)
 35701 00007590 BE[FD0F]                	mov	si,COUNTRY_CDPG ; country_tab
 35702                                  	;mov	[es:si+79],es	; Ucase table segment
 35703                                  	;mov	[es:si+84],es	; File ucase table segment
 35704                                  	;mov	[es:si+89],es	; File char list segment
 35705                                  	;mov	[es:si+94],es	; Collate table segment
 35706                                  	;mov	[es:si+123],es	; Monocase routine segment
 35707 00007593 8C444F                  	mov	[si+79],es
 35708 00007596 8C4454                  	mov	[si+84],es
 35709 00007599 8C4459                  	mov	[Si+89],es
 35710 0000759C 8C445E                  	mov	[si+94],es
 35711 0000759F 8C447B                  	mov	[si+123],es
 35712                                  	; (set SysInitTable -sysinitvars and country_cdpg- segments)
 35713 000075A2 BE[3B0F]                	mov     si,SysInitTable
 35714                                  	;;mov	[es:si+6], es
 35715                                  	;;mov	[es:si+2], es
 35716                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 35717                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 35718 000075A5 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 35719 000075A8 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 35720                                  
 35721                                  	; (set FastOpen table FastRet segment)
 35722 000075AB BE[430F]                	mov     si,FastTable
 35723                                  	;mov	[es:si+4],es
 35724                                  	;;mov	[es:si+8],es
 35725 000075AE 8C4404                  	mov     [si+4],es
 35726                                  	;mov	[si+8],es
 35727                                  	; IBMDOS.COM (Offset 7259h), IBM PC DOS 3.30
 35728 000075B1 C706[8F0F]7258          	mov	word [FETCHI_TAG],5872h ; ? ('Xr')
 35729                                  
 35730                                  	; 10/08/2018 - Retro DOS v3.0
 35731                                  
 35732                                  	; MSDOS 2.11 (Retro DOS v2.0), MSDOS 3.3
 35733                                  
 35734                                  ; After this points the char device functions for CON will work for
 35735                                  ; printing messages
 35736                                  
 35737                                  	;;IF	NOT IBM
 35738                                  	;;IF	NOT ALTVECT
 35739                                  	;MOV	SI,HEADER
 35740                                  	;;invoke OUTMES
 35741                                  	;CALL	OUTMES
 35742                                  	;;PUSH	CS		; Outmes stomps on segments
 35743                                  	;;POP	DS
 35744                                  	;;PUSH	CS
 35745                                  	;;POP	ES
 35746                                  	;;ENDIF
 35747                                  	;;ENDIF
 35748                                  
 35749                                  ; Move the FATs into position
 35750 000075B7 5A                              POP     DX ; #			; Restore COMMAND address
 35751 000075B8 5D                              POP     BP ; ##
 35752 000075B9 59                              POP     CX ; ###		; True address of free memory
 35753 000075BA BE[8676]                        MOV     SI,MEMSTRT		; Place to move DPBs from
 35754 000075BD 8B3E[2600]                      MOV     DI,[DPBHEAD]		; Place to move DPBs to
 35755 000075C1 29F9                            SUB     CX,DI                   ; Total length of DPBs
 35756 000075C3 39F7                            CMP     DI,SI
 35757 000075C5 7607                            JBE     SHORT MOVJMP		; Are we moving to higher or 
 35758                                  					; lower memory?
 35759 000075C7 49                              DEC     CX                      ; Move backwards to higher memory
 35760 000075C8 01CF                            ADD     DI,CX
 35761 000075CA 01CE                            ADD     SI,CX
 35762 000075CC 41                              INC     CX
 35763 000075CD FD                              STD
 35764                                  MOVJMP:
 35765 000075CE 8EC5                            MOV     ES,BP
 35766 000075D0 E9998E                          JMP     MOVDPB
 35767                                  
 35768                                  CHARINIT:
 35769                                  	; 07/07/2018 - Retro DOS v3.0
 35770 000075D3 36C606[0603]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 35771 000075D9 36C606[0703]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 35772 000075DF 36C606[0803]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 35773 000075E5 36C706[0903]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 35774 000075EC 06                              PUSH	ES
 35775 000075ED 53                              PUSH	BX
 35776 000075EE 50                              PUSH	AX
 35777 000075EF BB[0603]                        MOV	BX,DEVCALL
 35778 000075F2 0E                              PUSH	CS
 35779 000075F3 07                              POP	ES
 35780 000075F4 E807D9                          CALL	DEVIOCALL2	
 35781 000075F7 58                      	POP	AX
 35782 000075F8 5B                              POP	BX
 35783 000075F9 07                              POP	ES
 35784 000075FA C3                              RETN
 35785                                  
 35786 000075FB 90                      align 2
 35787                                          ;;DB	80H DUP(?)
 35788                                  	;TIMES 	64 dw 0 ; 05/09/2018
 35789                                  	; 10/08/2018
 35790                                  	;times	128 dw 0
 35791                                  	; 12/08/2018
 35792                                  	;times	132 dW 0 ; ADJFAC = 918 ; 08/09/2018 (OK.)
 35793                                  	; 08/09/2018 
 35794 000075FC 00<rep 88h>             	times	136 db 0 ; ADJFAC = 790	; 08/09/2018 (OK.) 
 35795                                  
 35796                                  INITSTACK:	; INITSTACK LABEL BYTE
 35797 00007684 0000                    	DW	0 ; DW ?
 35798                                  
 35799                                  ;MEMSTRT LABEL	WORD
 35800                                  MEMSTRT EQU	$
 35801                                  
 35802                                  ADJFAC  EQU     MEMSTRT-SYSBUF
 35803                                  
 35804 00007686 00                      	db 0
 35805 00007687 00                      	db 0
 35806 00007688 00                      	db 0
 35807 00007689 00                      	db 0
 35808 0000768A 00                      	db 0
 35809 0000768B 00                      	db 0
 35810 0000768C 00                      	db 0
 35811 0000768D 00                      	db 0
 35812 0000768E 00                      	db 0
 35813 0000768F 00                      	db 0
 35814                                  PcDosVersion:
 35815 00007690 1A4040402323232050-     	db 1Ah,'@@@### PC-DOS Version 3.30',0Dh,0Ah
 35815 00007699 432D444F5320566572-
 35815 000076A2 73696F6E20332E3330-
 35815 000076AB 0D0A               
 35816 000076AD 1A00                    	db 1Ah,0
 35817                                  
 35818                                          ;do_ext
 35819                                  ;LAST	ENDS
